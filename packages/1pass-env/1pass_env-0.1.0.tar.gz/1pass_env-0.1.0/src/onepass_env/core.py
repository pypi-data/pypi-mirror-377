"""Core functionality for importing environment variables from 1Password."""

from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from rich.console import Console

from onepass_env.exceptions import OnePassEnvError
from onepass_env.onepassword import OnePasswordClient

console = Console()


class EnvImporter:
    """Imports environment variables from 1Password items."""
    
    def __init__(
        self, 
        vault: str = "tokens", 
        verbose: bool = False
    ):
        """Initialize the environment importer.
        
        Args:
            vault: 1Password vault name
            verbose: Enable verbose logging
        """
        self.vault = vault
        self.verbose = verbose
        self.op_client = OnePasswordClient(vault=vault, verbose=verbose)
        
    def _log(self, message: str) -> None:
        """Log a message if verbose mode is enabled."""
        if self.verbose:
            console.print(f"[dim]{message}[/dim]")
    
    def import_to_file(
        self, 
        item_name: str,
        output_file: Union[str, Path] = "1pass.env",
        field_filter: Optional[List[str]] = None,
        merge_existing: bool = True
    ) -> Dict[str, str]:
        """Import environment variables from a 1Password item to a file.
        
        Args:
            item_name: Name of the 1Password item
            output_file: Path to output file
            field_filter: List of specific fields to import (None for all)
            merge_existing: Whether to merge with existing variables
            
        Returns:
            Dictionary of imported variables
        """
        output_path = Path(output_file)
        
        # Check authentication
        if not self.op_client.is_authenticated():
            raise OnePassEnvError(
                "Not authenticated with 1Password. Please check your OP_SERVICE_ACCOUNT_TOKEN "
                "environment variable and ensure it has access to the specified vault."
            )
        
        # Get the item from 1Password
        item = self.op_client.get_item_by_title(item_name)
        if not item:
            raise OnePassEnvError(f"Item '{item_name}' not found in vault '{self.vault}'")
        
        self._log(f"Found item: {item.title} (ID: {item.id})")
        
        # Extract fields
        imported_vars = {}
        for field in item.fields:
            if not field.label or not field.value:
                continue
            
            # Apply field filter if specified
            if field_filter and field.label not in field_filter:
                continue
            
            imported_vars[field.label] = field.value
            self._log(f"Imported field: {field.label}")
        
        if not imported_vars:
            self._log("No fields found to import")
            return {}
        
        # Merge with existing variables if requested
        existing_vars = {}
        if merge_existing and output_path.exists():
            try:
                from dotenv import dotenv_values
                existing_vars = dict(dotenv_values(str(output_path)))
                self._log(f"Found {len(existing_vars)} existing variables in {output_file}")
            except Exception as e:
                self._log(f"Could not read existing env file: {e}")
        
        # Imported variables take precedence
        final_vars = {**existing_vars, **imported_vars}
        
        # Write to file
        with open(output_path, 'w') as f:
            f.write(f"# Environment variables imported from 1Password\n")
            f.write(f"# Vault: {self.vault}\n")
            f.write(f"# Item: {item_name}\n")
            f.write(f"# Generated by 1pass-env\n\n")
            
            for key, value in final_vars.items():
                if value is not None:
                    escaped_value = str(value).replace('"', '\\"')
                    f.write(f'{key}="{escaped_value}"\n')
        
        self._log(f"Imported {len(imported_vars)} variables to {output_file}")
        return imported_vars
    
    def get_item_fields(self, item_name: str) -> List[str]:
        """Get list of field names from a 1Password item.
        
        Args:
            item_name: Name of the 1Password item
            
        Returns:
            List of field names
        """
        if not self.op_client.is_authenticated():
            raise OnePassEnvError(
                "Not authenticated with 1Password. Please check your OP_SERVICE_ACCOUNT_TOKEN "
                "environment variable."
            )
        
        item = self.op_client.get_item_by_title(item_name)
        if not item:
            raise OnePassEnvError(f"Item '{item_name}' not found in vault '{self.vault}'")
        
        return [field.label for field in item.fields if field.label and field.value]


class EnvExporter:
    """Exports environment variables from files to 1Password items."""
    
    def __init__(
        self, 
        vault: str = "tokens", 
        verbose: bool = False
    ):
        """Initialize the environment exporter.
        
        Args:
            vault: 1Password vault name
            verbose: Enable verbose logging
        """
        self.vault = vault
        self.verbose = verbose
        self.op_client = OnePasswordClient(vault=vault, verbose=verbose)
        
    def _log(self, message: str) -> None:
        """Log a message if verbose mode is enabled."""
        if self.verbose:
            console.print(f"[dim]{message}[/dim]")
    
    def export_from_file(
        self, 
        input_file: Union[str, Path],
        item_name: str,
        field_filter: Optional[List[str]] = None,
        overwrite: bool = False
    ) -> Dict[str, str]:
        """Export environment variables from a file to a 1Password item.
        
        Args:
            input_file: Path to input environment file
            item_name: Name of the 1Password item to create/update
            field_filter: List of specific fields to export (None for all)
            overwrite: Whether to overwrite existing item
            
        Returns:
            Dictionary of exported variables
        """
        import asyncio
        from dotenv import dotenv_values
        
        input_path = Path(input_file)
        
        # Check if input file exists
        if not input_path.exists():
            raise OnePassEnvError(f"Input file '{input_file}' not found")
        
        # Check authentication
        if not self.op_client.is_authenticated():
            raise OnePassEnvError(
                "Not authenticated with 1Password. Please check your OP_SERVICE_ACCOUNT_TOKEN "
                "environment variable and ensure it has access to the specified vault."
            )
        
        # Read environment variables from file
        try:
            env_vars = dict(dotenv_values(str(input_path)))
            if not env_vars:
                raise OnePassEnvError(f"No environment variables found in '{input_file}'")
        except Exception as e:
            raise OnePassEnvError(f"Failed to read file '{input_file}': {e}")
        
        # Filter fields if specified
        if field_filter:
            original_count = len(env_vars)
            env_vars = {k: v for k, v in env_vars.items() if k in field_filter}
            missing_fields = set(field_filter) - set(env_vars.keys())
            if missing_fields:
                self._log(f"Fields not found in file: {', '.join(missing_fields)}")
            self._log(f"Filtered {original_count} variables down to {len(env_vars)} specified fields")
        
        if not env_vars:
            raise OnePassEnvError("No environment variables to export")
        
        # Export to 1Password using async functionality
        return asyncio.run(self._export_to_onepassword_async(env_vars, item_name, overwrite))
    
    async def _export_to_onepassword_async(
        self, 
        env_vars: Dict[str, str], 
        item_name: str, 
        overwrite: bool
    ) -> Dict[str, str]:
        """Async helper to export variables to 1Password."""
        from onepass_env.onepassword import get_client
        
        try:
            client = await get_client()
            
            # Get vault by name
            vaults = await client.vaults.list()
            vault_obj = next((v for v in vaults if v.title == self.vault), None)
            if not vault_obj:
                available_vaults = [v.title for v in vaults]
                raise OnePassEnvError(f"Vault '{self.vault}' not found. Available vaults: {', '.join(available_vaults)}")
            
            # Check if item already exists
            items = await client.items.list(vault_obj.id)
            existing_item = next((i for i in items if i.title == item_name), None)
            
            if existing_item and not overwrite:
                raise OnePassEnvError(f"Item '{item_name}' already exists in vault '{self.vault}'. Use overwrite=True to replace it.")
            
            # Prepare fields for 1Password
            fields_list = [{"label": k, "value": v, "type": "CONCEALED"} for k, v in env_vars.items()]
            
            if existing_item:
                # Update existing item
                self._log(f"Updating existing item '{item_name}'")
                await client.items.edit(
                    vault_id=vault_obj.id,
                    item_id=existing_item.id,
                    title=item_name,
                    fields=fields_list
                )
            else:
                # Create new item
                self._log(f"Creating new item '{item_name}'")
                await client.items.create(
                    vault_id=vault_obj.id,
                    category="SECURE_NOTE",  # Using SECURE_NOTE for environment variables
                    title=item_name,
                    fields=fields_list
                )
            
            self._log(f"Successfully exported {len(env_vars)} environment variables to vault '{self.vault}' under item '{item_name}'")
            return env_vars
            
        except Exception as e:
            if isinstance(e, OnePassEnvError):
                raise
            raise OnePassEnvError(f"Failed to export to 1Password: {e}")

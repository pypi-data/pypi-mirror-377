# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/docs/examples/001_rag.ipynb.

# %% auto 0
__all__ = ['RagFactory']

# %% ../../nbs/docs/examples/001_rag.ipynb 5
from .. import V,E,Define
from ..chat import Chat
from ..db import ChromaClient

# %% ../../nbs/docs/examples/001_rag.ipynb 8
def RagFactory(db:ChromaClient,collection_name:str,k:int,model:str='gpt-4o-mini',system_prompt:str=None):
    """
    A diagram Factory for a RAG workflow.

    Args:
        db: A ChromaClient instance.
        collection_name: The name of the collection to use.
        k: The number of documents to retrieve.
        system_prompt: A system prompt to use for the RAG workflow.
            make sure to include references to the documents in the system prompt.
            documents are fed to the prompt under the key 'docs' 
            which is a list of dictionaries whose 'text' key is the document text.
    
    Returns:
        A Rag diagram schema.
    """
    if system_prompt is None:
        system_prompt = '''
            You are a helpful assistant that answers questions about dogs.
            I found the following documents that may be relevant to the user's question:
            {% for doc in docs %}
            {{doc['text']}}
            {% endfor %}
            '''
    rag_chat = Chat(model=model,messages=[
        {'role':'system','content':system_prompt},
        {'role':'user','content':'{{question}}'},
        ])

    def db_query(query:str):
        return db.query(collection_name=collection_name,k=k,query=query)
    
    with Define('RAG Agent',type='flow') as RagSchema:
        V('get_docs',db_query,
            inputs=['Start(**)'],
        )
        V('chat',rag_chat,
            inputs=['get_docs(docs)','Start(question=query)'],
            outputs=['End']
        )
    return RagSchema

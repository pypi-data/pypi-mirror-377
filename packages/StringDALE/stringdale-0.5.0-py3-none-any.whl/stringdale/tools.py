# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/026_tools.ipynb.

# %% auto 0
__all__ = ['logger', 'runner_imports', 'wikipedia_search', 'google_search', 'run_python_code']

# %% ../nbs/026_tools.ipynb 5
import os
from pathlib import Path
from copy import deepcopy
from fastcore.foundation import L
import json

from collections import defaultdict
from singleton_decorator import singleton

import logging

logger = logging.getLogger(__name__)

from openai import OpenAI
import base64
from typing import Optional

from joblib import Memory
from pathlib import Path

from .core import disk_cache



# %% ../nbs/026_tools.ipynb 7
import wikipedia

# %% ../nbs/026_tools.ipynb 8
@disk_cache.cache
def wikipedia_search(q:str):
    """
    A tool to query wikipedia, useful when you need to find information about a specific topic or person that is well known.
    Useful when you dont have enough context to reason about how to answer the question.

    Args:
        q (str): The query string to search for

    Returns:
        str: The wikipedia search results
    """

    return wikipedia.page(q).content

# %% ../nbs/026_tools.ipynb 12
from serpapi import SerpApiClient


# %% ../nbs/026_tools.ipynb 14
@disk_cache.cache
def google_search(q:str,location:str='Austin, Texas',engine:str='google_scholar'):
    """Search the web for information using various search engines.

    This function performs web searches using the SerpAPI client, allowing access to
    information from different search engines including Google Scholar. Results include
    source information for verification.

    Args:
        q (str): The search query string.
        location (str, optional): The location to use for localized search results.
            Defaults to 'Austin, Texas'.
        engine (str, optional): The search engine to use. Defaults to 'google_scholar'.

    Returns:
        dict: A dictionary containing the search results and metadata from the SerpAPI
            response.

    """
    return SerpApiClient({'q':q,'location':location,'engine':engine,'serp_api_key':get_serper_api_key()}).get_dict()

# %% ../nbs/026_tools.ipynb 17
from smolagents.local_python_executor import LocalPythonExecutor

# %% ../nbs/026_tools.ipynb 18
runner_imports = [
    "collections",
    "datetime",
    "itertools",
    "math",
    "queue",
    "random",
    "re",
    "stat",
    "statistics",
    "time",
    "unicodedata",
    "numpy",
    "pandas",
]


# TODO add state to tools of chat
def run_python_code(code:str):
    """Execute python code, useful when you need to do a calculation or a simple task
    Input should be a valid python code.
    If you want to see the output of a variable, the last line of the code should be that variable name.
    
    Args:
        code (str): Python code to execute
        
    Returns:
        str: Output from executing the code, either the value of the last line or the error message
        
    """
    global runner_imports
    executor = LocalPythonExecutor(additional_authorized_imports=runner_imports)
    try:
        return executor(code).output
    except Exception as e:
        return str(e)

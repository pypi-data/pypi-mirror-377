# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/002_doc_utils.ipynb.

# %% auto 0
__all__ = ['lookup_table', 'function_doc_template', 'class_doc_template', 'pprint_yaml', 'clean_sig_data', 'clean_doc_data',
           'get_methods', 'get_source_link', 'escape_dunder', 'clean_obj_data', 'clean_class', 'show_doc']

# %% ../nbs/002_doc_utils.ipynb 4
from IPython.display import Image, display, HTML,SVG,display_pretty
from .core import jinja_render
from docstring_parser import parse
import inspect
from deepmerge import always_merger
from nbdev.doclinks import NbdevLookup


# %% ../nbs/002_doc_utils.ipynb 6
import yaml
from pygments import highlight
from pygments.lexers import YamlLexer
from pygments.formatters import HtmlFormatter
from IPython.display import HTML, display
from pathlib import Path

# %% ../nbs/002_doc_utils.ipynb 7
def pprint_yaml(yaml_obj, style=None):
    if isinstance(yaml_obj, str):
        yaml_str = yaml_obj
    elif isinstance(yaml_obj, Path):
        yaml_str = yaml_obj.read_text() 
    else:
        yaml_str = yaml.dump(yaml_obj, sort_keys=False)
    
    # Generate a unique class name based on the style
    class_name = f'highlight_{style if style else "default"}'
    if style is None:
        formatter = HtmlFormatter(cssclass=class_name)
    else:
        formatter = HtmlFormatter(style=style, cssclass=class_name)
    
    # Use the unique class name in the style definitions
    style_defs = formatter.get_style_defs(f'.{class_name}')
    highlighted = highlight(yaml_str, YamlLexer(), formatter)
    display(HTML(f"<style>{style_defs}</style>{highlighted}"))


# %% ../nbs/002_doc_utils.ipynb 12
def clean_sig_data(obj):
    sig = inspect.signature(obj)
    clean_data = {'params':{},
     'signature':str(sig)
    }
    for key, param in sig.parameters.items():
        p_dat = {}
        if param.annotation != inspect._empty:
            p_dat['type'] = param.annotation
        if param.default != inspect._empty:
            p_dat['default'] = param.default
        clean_data['params'][key] = p_dat
    if sig.return_annotation != inspect._empty:
        clean_data['returns'] = {
            'type': sig.return_annotation,
        }
    return clean_data
    

# %% ../nbs/002_doc_utils.ipynb 16
def clean_doc_data(obj):
    doc = parse(obj.__doc__)
    clean_data = {
        'description': doc.description,
        'params':{},
        'param_order':[p.arg_name for p in doc.params]
    }
    for p in doc.params:
        p_dat = {'name':p.arg_name}
        if p.type_name != inspect._empty:
            p_dat['type'] = p.type_name
        if p.default != inspect._empty:
            p_dat['default'] = p.default
        if p.description != inspect._empty:
            p_dat['description'] = p.description
        clean_data['params'][p.arg_name] = p_dat
        
    if doc.returns:
        r_dat = {}
        if doc.returns.type_name != inspect._empty:
            r_dat['type'] = doc.returns.type_name
        if doc.returns.description != inspect._empty:
            r_dat['description'] = doc.returns.description
        clean_data['returns'] = r_dat
    return clean_data

# %% ../nbs/002_doc_utils.ipynb 18
def get_methods(cls,include=None):
    if include is None:
        include = [method for method in dir(cls) if callable(getattr(cls, method)) and not method.startswith("_")] #+ ['__call__']
    included_methods = [method for method in include if callable(getattr(cls, method,None))]
    return included_methods


# %% ../nbs/002_doc_utils.ipynb 20
lookup_table = NbdevLookup()

def get_source_link(obj):
    try:
        return lookup_table[obj.__qualname__][2]
    except:
        return None

# %% ../nbs/002_doc_utils.ipynb 23
def escape_dunder(name):
    return name.replace('__','\\_\\_')


def clean_obj_data(obj):
    merged_data = always_merger.merge(clean_doc_data(obj),clean_sig_data(obj))
    merged_data['name'] = escape_dunder(obj.__name__)
    merged_data['clean_name'] = obj.__name__
    merged_data['source'] = get_source_link(obj)
    merged_data['params'] = [merged_data['params'][name] for name in merged_data['param_order']]
    return merged_data

# %% ../nbs/002_doc_utils.ipynb 25
def clean_class(cls,methods=None):
    methods = get_methods(cls,methods)
    methods_data = [clean_obj_data(getattr(cls,method)) for method in methods]
    return {
        **clean_obj_data(cls),
        'methods':methods_data
    }

# %% ../nbs/002_doc_utils.ipynb 28
from IPython.display import Markdown,display
from .core import jinja_render

# %% ../nbs/002_doc_utils.ipynb 30
function_doc_template = """
### {{name}}

<p align="right"> <a href="{{source}}">source</a> </p>

> **Signature:** `{{clean_name}}{{signature}}`

{{description}}

| Parameter | Type | Default | Description |
|-----------|------|---------|-------------|
{%  for param in params -%}
| {{param.name}} | {{param.type}} | {{param.default}} | {{param.description | replace('\n', '') | safe }} |
{%  endfor %}
{%- if returns -%}
| :Returns: | {{returns.type}} | - | {{returns.description | replace('\n', '<br>') | safe }} |
{%  endif %}

"""

# %% ../nbs/002_doc_utils.ipynb 34
class_doc_template = """
### {{name}}
<p align="right"> <a href="{{source}}">source</a> </p>

> **Signature:** `{{clean_name}}{{signature}}`

{{description}}

| Parameter | Type | Default | Description |
|-----------|------|---------|-------------|
{%  for param in params -%}
| {{param.name}} | {{param.type}} | {{param.default}} | {{param.description | replace('\n', '') | safe }} |
{%  endfor %}
{%- if returns -%}
| :Returns: | {{returns.type}} | - | {{returns.description | replace('\n', '<br>') | safe }} |
{%  endif %}

{% for method in methods %}
#### {{ method.name }}

{{method.description}}
> **Signature:** `{{clean_name}}.{{method.clean_name}}{{method.signature}}`

| Parameter | Type | Default | Description |
|-----------|------|---------|-------------|
{%  for param in method.params -%}
| {{param.name}} | {{param.type}} | {{param.default}} | {{param.description | replace('\n', '') | safe }} |
{%  endfor -%}
{% if returns -%}
| :Returns: | {{returns.type}} | - | {{returns.description | replace('\n', '<br>') | safe }} |
{%  endif %}

{% endfor %}
"""

# %% ../nbs/002_doc_utils.ipynb 39
def show_doc(obj,methods=None):
    if inspect.isfunction(obj):
        data = clean_obj_data(obj)
        md = jinja_render(function_doc_template,data)
        
    elif inspect.isclass(obj):
        data = clean_class(obj,methods=methods)
        md = jinja_render(class_doc_template,data)

    else:
        raise ValueError(f"Unsupported object type: {type(obj)}")
    
    display(Markdown(md))

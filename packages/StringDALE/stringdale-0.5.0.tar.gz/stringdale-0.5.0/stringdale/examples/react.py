# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/docs/examples/002_react.ipynb.

# %% auto 0
__all__ = ['react_system_prompt', 'react_cot_chat', 'tools', 'react_tool_step', 'is_final_answer', 'Thought', 'react_cot_format']

# %% ../../nbs/docs/examples/002_react.ipynb 5
from typing import Literal,Optional
from pydantic import BaseModel
from pprint import pprint

from .. import Define,V,E, Condition
from ..chat import Chat
from ..tools import wikipedia_search,run_python_code


# %% ../../nbs/docs/examples/002_react.ipynb 6
react_system_prompt = [{'role':'system','content':"""
Answer the following questions as best you can.
Here is an example of the format of the answer:
Question: the input question you must answer
Thought: you should always think about what to do
Tool Name: the name of the tool you will use
Tool Input: the input to the tool
Observation: the result of the tool
This thought - tool name - tool input - observation can repeat N times
Final Answer: the final answer to the original input question
Each time you are prompter either provide a thought that you need to use a tool or provide a final answer.
the tool name, input and observation will be provided to you in the next message.

Example:
user:
Question: what is the year five years from now?
assistant:
Thought: I need to compute the current year
Tool Name: wikipedia_search
Tool Input: {query: 'what is the current year'}
Observation: 2024
Thought: I need to add 5 to the current year
Tool Name: run_python_code
Tool Input: {code: 'import datetime; result = datetime.datetime.now().year + 5',output_expression='result'}
Observation: 2029
Final Answer: 2029
"""}]


class Thought(BaseModel):
    type: Literal['thought','final_answer']
    text: str

react_cot_chat = Chat(model='gpt-4o-mini',
    save_history=True,
    init_messages=react_system_prompt,
    output_schema=Thought,
    )
react_cot_chat

# %% ../../nbs/docs/examples/002_react.ipynb 8
tools = {
    'wikipedia_search':wikipedia_search,
    'run_python_code':run_python_code,
}


react_tool_step = Chat(model='gpt-4o-mini',
    messages= [
        {'role':'system','content':'choose an appropriate tool to use to answer the following:'},
        {'role':'user','content':'{{thought}}'}],
    tools=tools,
    call_function=True
    )


# %% ../../nbs/docs/examples/002_react.ipynb 11
def react_cot_format(tool_name,input,output):
    return [{
        'role':'assistant',
        'content':f"""Tool Name: {tool_name}
Tool Input: {input}
Observation: {output}"""
    }]

is_final_answer= Condition('final_answer','(0=content.type)',name='is_final_answer')

# %% ../../nbs/docs/examples/002_react.ipynb 12
with Define('React Agent',type='decision') as ReactAgent:

    V('thinker',react_cot_chat,
        inputs = ['Start(messages)'],
        outputs = [
            ('End',is_final_answer),
            'use_tool(thought=content.text)'])
    V('use_tool',react_tool_step,outputs=['format_tool_call(tool_name=content.name,input=content.input,output=content.output)'])
    V('format_tool_call',react_cot_format,
        outputs =[
            'thinker(messages)'
        ])


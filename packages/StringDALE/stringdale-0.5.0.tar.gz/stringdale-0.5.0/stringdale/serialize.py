# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/011_diagram_serialization.ipynb.

# %% auto 0
__all__ = ['Encoder', 'serialize_to_json']

# %% ../nbs/011_diagram_serialization.ipynb 4
import os

from networkx.readwrite import json_graph
import json
from typing import Any

from . import Define,Scope,V,E,Diagram,DiagramSchema

from .base import _get_func_name
from .core import  checkLogs
from .viz import draw_nx


# %% ../nbs/011_diagram_serialization.ipynb 8
class Encoder(json.JSONEncoder):
    def default(self, obj: Any) -> str:
        # Handle objects that json.JSONEncoder doesn't know how to serialize
        try:
            # First try the default encoder
            return super().default(obj)
        except TypeError:
            # If that fails, convert to string
            if isinstance(obj,(Diagram,DiagramSchema)):
                return str(obj)
            elif isinstance(obj,set):
                return list(obj)
            elif isinstance(obj,tuple):
                return list(obj)
            elif callable(obj):
                return _get_func_name(obj)
            else:
                return str(obj)

# Example usage:
def serialize_to_json(obj: Any) -> str:
    return json.dumps(obj, cls=Encoder,indent=2)

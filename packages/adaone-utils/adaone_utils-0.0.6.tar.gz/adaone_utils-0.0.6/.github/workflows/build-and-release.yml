name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

env:
  PROJECT_NAME: "adaone-utils"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install Python linter
        run: pip install ruff
      - name: Lint Python code with ruff
        run: ruff check .

  linux-x64:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install Protobuf Compiler (for local steps)
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
      - name: Update Cargo.toml Version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting version to $VERSION"
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
          before-script-linux: |
            # Install latest protobuf compiler
            PROTOC_VERSION=$(curl -s https://api.github.com/repos/protocolbuffers/protobuf/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
            curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/${PROTOC_VERSION}/protoc-${PROTOC_VERSION#v}-linux-x86_64.zip"
            unzip "protoc-${PROTOC_VERSION#v}-linux-x86_64.zip" -d /usr/local
            rm "protoc-${PROTOC_VERSION#v}-linux-x86_64.zip"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: dist

  test:
    needs: [linux-x64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: dist
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install package
        run: |
          WHL_FILE=$(ls dist/*cp313*.whl)
          pip install "${WHL_FILE}[test]"
      - name: Run tests with pytest
        run: pytest
      - name: Type checking with mypy
        run: mypy python/tests python/adaone_utils

  windows:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [lint, test]
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
          architecture: ${{ matrix.target }}
      - name: Install Protobuf Compiler
        run: |
          choco install protoc
      - name: Update Cargo.toml Version
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          $VERSION = $env:GITHUB_REF -replace 'refs/tags/v',''
          Write-Host "Setting version to $VERSION"
          (Get-Content Cargo.toml) -replace '^version = ".*"', ('version = "' + $VERSION + '"') | Set-Content Cargo.toml
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  macos:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [lint, test]
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [macos-13, macos-14]
        include:
          - platform: macos-13
            target: x86_64
          - platform: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install Protobuf Compiler
        run: |
          brew install protobuf
      - name: Update Cargo.toml Version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting version to $VERSION"
          sed -i '' "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  sdist:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Update Cargo.toml Version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting version to $VERSION"
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [linux-x64, windows, macos, sdist]
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            wheels-sdist/*.tar.gz
            wheels-windows-*/*.whl
            wheels-linux-*/*.whl
            wheels-macos-*/*.whl
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}

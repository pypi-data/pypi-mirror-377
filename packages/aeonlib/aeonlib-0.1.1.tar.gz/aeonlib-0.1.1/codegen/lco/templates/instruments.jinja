# pyright:  reportUnannotatedClassAttribute=false
# This file is generated automatically and should not be edited by hand.

from typing import Any, Annotated, Literal

from annotated_types import Le
from pydantic import BaseModel, ConfigDict
from pydantic.types import NonNegativeInt, PositiveInt

from aeonlib.models import TARGET_TYPES
from aeonlib.ocs.target_models import Constraints
from aeonlib.ocs.config_models import Roi


{% for ctx in instruments %}
class {{ ctx.class_name }}OpticalElements(BaseModel):
    model_config = ConfigDict(validate_assignment=True)
    {% for key, values in ctx.optical_elements.items() %}
    {{ key }}: Literal[{% for v in values %}"{{ v['code'] }}"{% if not loop.last %}, {% endif %}{% endfor %}]
    {% endfor %}


class {{ ctx.class_name }}GuidingConfig(BaseModel):
    model_config = ConfigDict(validate_assignment=True)
    mode: Literal[{% for m in ctx.guiding_modes %}"{{ m }}"{% if not loop.last %}, {% endif %}{% endfor %}]
    optional: bool
    """Whether the guiding is optional or not"""
    exposure_time: Annotated[int, NonNegativeInt, Le(120)] | None = None
    """Guiding exposure time"""
    extra_params: dict[Any, Any] = {}


class {{ ctx.class_name }}AcquisitionConfig(BaseModel):
    model_config = ConfigDict(validate_assignment=True)
    mode: Literal[{% for m in ctx.acquisition_modes %}"{{ m }}"{% if not loop.last %}, {% endif %}{% endfor %}]
    exposure_time: Annotated[int, NonNegativeInt, Le(60)] | None = None
    """Acquisition exposure time"""
    extra_params: dict[Any, Any] = {}


class {{ ctx.class_name }}Config(BaseModel):
    model_config = ConfigDict(validate_assignment=True)
    exposure_count: PositiveInt
    """The number of exposures to take. This field must be set to a value greater than 0"""
    exposure_time: NonNegativeInt
    """ Exposure time in seconds"""
    mode: Literal[{% for m in ctx.readout_modes %}"{{ m }}"{% if not loop.last %}, {% endif %}{% endfor %}]
    {% if ctx.rotator_modes %}
    rotator_mode: Literal[{% for m in ctx.rotator_modes %}"{{ m }}"{% if not loop.last %}, {% endif %}{% endfor %}]
    {% endif %}
    rois: list[Roi] | None = None
    extra_params: dict[Any, Any] = {}
    optical_elements: {{ ctx.class_name}}OpticalElements


class {{ ctx.class_name }}(BaseModel):
    model_config = ConfigDict(validate_assignment=True)
    type: Literal[{% for t in ctx.config_types %}"{{ t }}"{% if not loop.last %}, {% endif %}{% endfor %}]
    instrument_type: Literal["{{ ctx.instrument_type }}"] = "{{ ctx.instrument_type }}"
    repeat_duration: NonNegativeInt | None = None
    extra_params: dict[Any, Any] = {}
    instrument_configs: list[{{ ctx.class_name }}Config] = []
    acquisition_config: {{ ctx.class_name }}AcquisitionConfig
    guiding_config: {{ ctx.class_name }}GuidingConfig
    target: TARGET_TYPES
    constraints: Constraints

    config_class = {{ ctx.class_name }}Config
    guiding_config_class = {{ ctx.class_name }}GuidingConfig
    acquisition_config_class = {{ ctx.class_name }}AcquisitionConfig
    optical_elements_class = {{ ctx.class_name }}OpticalElements


{% endfor %}
# Export a type that encompasses all instruments
{{ facility }}_INSTRUMENTS = {% for ctx in instruments %}{{ ctx.class_name }}{% if not loop.last%} | {% endif %}{% endfor %}

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["agenthub"]

[project]
name = "agentplug"
version = "0.1.1"
description = "AgentHub - The App Store for AI Agents"
readme = "README.md"
license = { file = "LICENSE" }
authors = [{ name = "William", email = "william@agenthub.dev" }]
maintainers = [{ name = "William", email = "william@agenthub.dev" }]
keywords = [
    "ai", "agents", "artificial-intelligence", "machine-learning",
    "automation", "tools", "mcp", "model-context-protocol", "llm",
    "agent-framework", "agent-marketplace", "agent-management"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    # Core framework
    "pyyaml>=6.0.1",
    "click>=8.1.7",
    "rich>=13.7.1",
    "pydantic>=2.11.0",
    "mcp[cli]>=1.13.1",

    # HTTP & Web
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "httpx>=0.27.0",
    "beautifulsoup4>=4.12.0",
    "ddgs>=9.5.0",

    # AI/LLM
    "aisuite>=0.1.0",
    "openai>=1.50.0",
    "anthropic>=0.45.0",

    # Document processing
    "pypdf>=4.0.0",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.0",
    "python-pptx>=0.6.0",
    "markdown>=3.5.0",

    # Code analysis
    "docstring-parser>=0.16",

    # Data processing
    "pandas>=2.2.0",
    "numpy>=1.26.0",

    # Security & validation
    "cryptography>=42.0.0",

    # Async & concurrency
    "asyncio-throttle>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/agenthub/agenthub"
Documentation = "https://docs.agenthub.dev"
Repository = "https://github.com/agenthub/agenthub"
Issues = "https://github.com/agenthub/agenthub/issues"
Changelog = "https://github.com/agenthub/agenthub/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.14.0",
    "black>=24.0.0",
    "mypy>=1.8.0",
    "ruff>=0.2.0",
    "pre-commit>=3.6.0",
    "types-pyyaml>=6.0.12",
    "safety>=3.0.0",
    "coverage>=7.9.0",
]
rag = [
    "llama-index>=0.12.0",
    "chromadb>=1.0.0",
    "sentence-transformers>=5.0.0",
    "faiss-cpu>=1.11.0",
]
code = ["docker>=7.0.0"]
full = ["agenthub[dev,rag,code]"]

[project.scripts]
agenthub = "agenthub.cli.main:main"

[tool.black]
line-length = 88
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
extend-exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short --strict-config --strict-markers"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "asyncio: Async tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:websockets.*",
    "ignore::DeprecationWarning:uvicorn.*",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::PendingDeprecationWarning:starlette.formparsers",
]

[tool.coverage.run]
source = ["agenthub"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.9",
    "types-pyyaml>=6.0.12.20250809",
]

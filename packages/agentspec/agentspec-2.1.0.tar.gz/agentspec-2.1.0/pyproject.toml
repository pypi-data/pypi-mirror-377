[build-system]
requires = ["setuptools>=45,<76", "wheel<0.46"]
build-backend = "setuptools.build_meta"

[project]
name = "agentspec"
version = "2.1.0"
description = "Specification-driven development toolkit with smart context detection"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Keyur Golani", email = "keyurrgolani@gmail.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",

    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Documentation",
]
keywords = ["specification", "development", "automation", "templates", "cli"]
requires-python = ">=3.8"
dependencies = [
    "pyyaml>=6.0",
    "jsonschema>=4.0.0",
    "click>=8.0.0",
    "rich>=12.0.0,<13.0.0",  # Pin rich to compatible version for Python 3.8
    "tomli>=1.2.0; python_version<'3.11'",  # TOML parser for Python < 3.11
    "argcomplete>=2.0.0",  # Shell completion support
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=24.0.0,<25.0.0",  # Pin black to stable version for consistency
    "flake8>=5.0.0,<7.0.0",  # Pin flake8 for Python 3.8 compatibility
    "mypy>=0.991,<1.8.0",    # Pin mypy for Python 3.8 compatibility
    "types-PyYAML>=6.0.0",   # Type stubs for PyYAML
    "types-jsonschema>=4.0.0",  # Type stubs for jsonschema
    "pre-commit>=2.20.0,<4.0.0",  # Pin pre-commit for Python 3.8 compatibility
    "bandit>=1.7.0,<2.0.0",  # Pin bandit for Python 3.8 compatibility
    "build>=0.8.0,<1.0.0",   # Pin build for Python 3.8 compatibility
    "twine>=4.0.0,<5.0.0",   # Pin twine for Python 3.8 compatibility
    "isort>=5.10.0,<6.0.0",  # Pin isort for Python 3.8 compatibility
]
test = [
    "pytest>=7.0.0,<8.0.0",      # Pin pytest for Python 3.8 compatibility
    "pytest-cov>=4.0.0,<5.0.0",  # Pin pytest-cov for Python 3.8 compatibility
    "pytest-mock>=3.8.0,<4.0.0", # Pin pytest-mock for Python 3.8 compatibility
    "pytest-timeout>=2.1.0,<3.0.0", # Pin pytest-timeout for Python 3.8 compatibility
]

[project.urls]
Homepage = "https://github.com/keyurgolani/AgentSpec"
Documentation = "https://github.com/keyurgolani/AgentSpec#readme"
Repository = "https://github.com/keyurgolani/AgentSpec.git"
"Bug Tracker" = "https://github.com/keyurgolani/AgentSpec/issues"

[project.scripts]
agentspec = "agentspec.cli.main:main"



[tool.setuptools.packages.find]
include = ["agentspec*"]

[tool.setuptools.package-data]
agentspec = [
    "data/instructions/*.json",
    "data/templates/*/*.json",
    "data/schemas/*.json",
    "config/*.yaml",
]

[tool.black]
line-length = 88
target-version = ["py38"]
include = "\\.pyi?$"
extend-exclude = """
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
"""

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=agentspec --cov-report=term-missing --cov-report=html:htmlcov --cov-report=xml:coverage.xml --cov-fail-under=60"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "network: Tests that require network access"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.coverage.run]
source = ["agentspec"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.bandit]
exclude_dirs = ["tests", "test"]
skips = ["B101", "B603", "B607"]  # Skip assert_used test, subprocess calls for git commands

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501", "C901"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".pytest_cache",
    ".mypy_cache",
]

{
  "instructions": [



    {
      "id": "real_time_features",
      "version": "1.0.0",
      "tags": ["realtime", "websockets", "sse", "notifications"],
      "content": "Implement real-time features using WebSockets or Server-Sent Events with connection management, reconnection logic, and scalability considerations.",
      "metadata": {
        "category": "backend",
        "priority": 6,
        "author": "AgentSpec",
        "created_at": "2024-01-01T00:00:00Z",
        "updated_at": "2024-01-01T00:00:00Z"
      }
    },
    {
      "id": "search_functionality",
      "version": "1.0.0",
      "tags": ["search", "elasticsearch", "indexing", "performance"],
      "content": "Implement efficient search with proper indexing, full-text search capabilities, faceted search, and search analytics.",
      "metadata": {
        "category": "backend",
        "priority": 5,
        "author": "AgentSpec",
        "created_at": "2024-01-01T00:00:00Z",
        "updated_at": "2024-01-01T00:00:00Z"
      }
    },
    {
      "id": "payment_processing",
      "version": "1.0.0",
      "tags": ["payments", "security", "integration", "compliance"],
      "content": "Implement secure payment processing with PCI compliance, proper error handling, refund capabilities, and webhook handling for payment providers.",
      "metadata": {
        "category": "backend",
        "priority": 7,
        "author": "AgentSpec",
        "created_at": "2024-01-01T00:00:00Z",
        "updated_at": "2024-01-01T00:00:00Z"
      }
    },


    {
      "id": "api_boilerplate_generation",
      "version": "1.0.0",
      "tags": ["backend", "api", "crud", "boilerplate", "scaffolding"],
      "content": "Generate backend service boilerplate efficiently: RESTful API endpoints, full CRUD operations, data models and database schemas. Specify technologies clearly (Django, PostgreSQL, Node.js) and define data structures comprehensively for consistent results.",
      "metadata": {
        "category": "backend",
        "priority": 8,
        "author": "Research Integration",
        "created_at": "2024-01-01T00:00:00Z",
        "updated_at": "2024-01-01T00:00:00Z"
      }
    },
    {
      "id": "incremental_backend_development",
      "version": "1.0.0",
      "tags": ["backend", "incremental", "modularity", "quality"],
      "content": "Break down backend implementation into manageable steps: 1. Generate data model, 2. Create database migration, 3. Implement service layer logic, 4. Build API controller. Validate each step before proceeding to ensure clean, maintainable results.",
      "metadata": {
        "category": "backend",
        "priority": 8,
        "author": "Research Integration",
        "created_at": "2024-01-01T00:00:00Z",
        "updated_at": "2024-01-01T00:00:00Z"
      }
    },
    {
      "id": "architecture_design",
      "version": "1.2.0",
      "tags": ["backend", "architecture", "modularity", "maintainability", "refactoring", "design", "patterns", "microservices", "distributed", "separation-of-concerns"],
      "content": "Design comprehensive architecture with clear separation of concerns, proper layering, and appropriate design patterns. Break large files into single-responsibility modules, eliminate duplicate code, remove dead code. Ensure each file has one clear conceptual responsibility. Compare architectural approaches (hexagonal, layered, microservices) and choose based on project requirements and constraints. For microservices, design with proper boundaries, communication patterns, and distributed system concerns like circuit breakers and bulkheads. For backend systems, apply creative problem-solving skills to unique project requirements and implement modular architecture that supports maintainability, scalability, and testability across all application layers.",
      "metadata": {
        "category": "backend",
        "priority": 8,
        "author": "AgentSpec Consolidated",
        "created_at": "2024-01-01T00:00:00Z",
        "updated_at": "2024-12-15T00:00:00Z"
      }
    }
  ]
}

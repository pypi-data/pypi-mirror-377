//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindBehaviorServices.MessageProtocol
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Payload for heartbeat messages indicating system health status.
    ///
    ///Heartbeat messages are used to monitor the health and availability
    ///of system components. They include a status indicator and optional
    ///context information.
    ///
    ///Attributes:
    ///    context: Optional additional data about the system state
    ///    status: Current health status of the component
    ///
    ///Examples:
    ///    ```python
    ///    heartbeat = HeartbeatPayload(
    ///        status=HeartbeatStatus.OK,
    ///        context={"cpu_usage": 0.25, "memory_usage": 0.60}
    ///    )
    ///    print(heartbeat.status)  # HeartbeatStatus.OK
    ///
    ///    warning_heartbeat = HeartbeatPayload(
    ///        status=HeartbeatStatus.WARNING,
    ///        context={"disk_space_low": True}
    ///    )
    ///    ```
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Payload for heartbeat messages indicating system health status.

    Heartbeat messages are used to monitor the health and availability
    of system components. They include a status indicator and optional
    context information.

    Attributes:
        context: Optional additional data about the system state
        status: Current health status of the component

    Examples:
        ```python
        heartbeat = HeartbeatPayload(
            status=HeartbeatStatus.OK,
            context={""cpu_usage"": 0.25, ""memory_usage"": 0.60}
        )
        print(heartbeat.status)  # HeartbeatStatus.OK

        warning_heartbeat = HeartbeatPayload(
            status=HeartbeatStatus.WARNING,
            context={""disk_space_low"": True}
        )
        ```")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HeartbeatPayload : RegisteredPayload
    {
    
        private object _context;
    
        private HeartbeatStatus _status;
    
        public HeartbeatPayload()
        {
        }
    
        protected HeartbeatPayload(HeartbeatPayload other) : 
                base(other)
        {
            _context = other._context;
            _status = other._status;
        }
    
        /// <summary>
        /// Additional context for the heartbeat message.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("context")]
        [System.ComponentModel.DescriptionAttribute("Additional context for the heartbeat message.")]
        public object Context
        {
            get
            {
                return _context;
            }
            set
            {
                _context = value;
            }
        }
    
        /// <summary>
        /// The status of the heartbeat message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("status", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The status of the heartbeat message")]
        public HeartbeatStatus Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
    
        public System.IObservable<HeartbeatPayload> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HeartbeatPayload(this)));
        }
    
        public System.IObservable<HeartbeatPayload> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HeartbeatPayload(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("context = " + _context + ", ");
            stringBuilder.Append("status = " + _status);
            return true;
        }
    }


    /// <summary>
    /// Enumeration of possible heartbeat status values.
    ///
    ///Represents the health status of a system component,
    ///with higher values indicating more severe issues.
    ///
    ///Examples:
    ///    ```python
    ///    HeartbeatStatus.OK                            # <HeartbeatStatus.OK: 0>
    ///    HeartbeatStatus.CRITICAL > HeartbeatStatus.WARNING  # True
    ///    int(HeartbeatStatus.ERROR)                    # 2
    ///    ```
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum HeartbeatStatus
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Ok = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Warning = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Error = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Critical = 3,
    }


    /// <summary>
    /// Enumeration of log levels for the logging system.
    ///
    ///Follows standard Python logging levels with integer values
    ///that allow for easy comparison and filtering.
    ///
    ///Examples:
    ///    ```python
    ///    LogLevel.ERROR > LogLevel.WARNING  # True
    ///    LogLevel.DEBUG.value               # 10
    ///    str(LogLevel.INFO)                 # 'LogLevel.INFO'
    ///    ```
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum LogLevel
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
        Critical = 50,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
        Error = 40,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
        Warning = 30,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
        Info = 20,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
        Debug = 10,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Notset = 0,
    }


    /// <summary>
    /// Payload for log messages containing logging information.
    ///
    ///This payload carries log data including the message content,
    ///severity level, optional context, and application version.
    ///
    ///Attributes:
    ///    message: The actual log message text
    ///    level: Severity level of the log entry
    ///    context: Optional additional data related to the log
    ///    application_version: Version of the application generating the log
    ///
    ///Examples:
    ///    ```python
    ///    log_payload = LogPayload(
    ///        message="System startup complete",
    ///        level=LogLevel.INFO,
    ///        context={"operator": "John Doe"},
    ///        application_version="1.0.0"
    ///    )
    ///    print(log_payload.level)  # LogLevel.INFO
    ///    ```
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Payload for log messages containing logging information.

    This payload carries log data including the message content,
    severity level, optional context, and application version.

    Attributes:
        message: The actual log message text
        level: Severity level of the log entry
        context: Optional additional data related to the log
        application_version: Version of the application generating the log

    Examples:
        ```python
        log_payload = LogPayload(
            message=""System startup complete"",
            level=LogLevel.INFO,
            context={""operator"": ""John Doe""},
            application_version=""1.0.0""
        )
        print(log_payload.level)  # LogLevel.INFO
        ```")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LogPayload : RegisteredPayload
    {
    
        private string _message;
    
        private LogLevel _level;
    
        private object _context;
    
        private string _applicationVersion;
    
        public LogPayload()
        {
            _level = AindBehaviorServices.MessageProtocol.LogLevel.Debug;
        }
    
        protected LogPayload(LogPayload other) : 
                base(other)
        {
            _message = other._message;
            _level = other._level;
            _context = other._context;
            _applicationVersion = other._applicationVersion;
        }
    
        /// <summary>
        /// The message of the log
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("message", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The message of the log")]
        public string Message
        {
            get
            {
                return _message;
            }
            set
            {
                _message = value;
            }
        }
    
        /// <summary>
        /// The level of the log message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("level")]
        [System.ComponentModel.DescriptionAttribute("The level of the log message")]
        public LogLevel Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
    
        /// <summary>
        /// Additional context for the log message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("context")]
        [System.ComponentModel.DescriptionAttribute("Additional context for the log message")]
        public object Context
        {
            get
            {
                return _context;
            }
            set
            {
                _context = value;
            }
        }
    
        /// <summary>
        /// The version of the application
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("application_version")]
        [System.ComponentModel.DescriptionAttribute("The version of the application")]
        public string ApplicationVersion
        {
            get
            {
                return _applicationVersion;
            }
            set
            {
                _applicationVersion = value;
            }
        }
    
        public System.IObservable<LogPayload> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogPayload(this)));
        }
    
        public System.IObservable<LogPayload> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogPayload(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("message = " + _message + ", ");
            stringBuilder.Append("level = " + _level + ", ");
            stringBuilder.Append("context = " + _context + ", ");
            stringBuilder.Append("application_version = " + _applicationVersion);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Message
    {
    
        private MessageType _messageType;
    
        private string _protocolVersion;
    
        private System.DateTimeOffset? _timestamp;
    
        private object _payload;
    
        private string _processId;
    
        private string _hostname;
    
        private string _rigName;
    
        public Message()
        {
            _protocolVersion = "0";
        }
    
        protected Message(Message other)
        {
            _messageType = other._messageType;
            _protocolVersion = other._protocolVersion;
            _timestamp = other._timestamp;
            _payload = other._payload;
            _processId = other._processId;
            _hostname = other._hostname;
            _rigName = other._rigName;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("message_type", Required=Newtonsoft.Json.Required.Always)]
        public MessageType MessageType
        {
            get
            {
                return _messageType;
            }
            set
            {
                _messageType = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("protocol_version")]
        public string ProtocolVersion
        {
            get
            {
                return _protocolVersion;
            }
            set
            {
                _protocolVersion = value;
            }
        }
    
        /// <summary>
        /// The timestamp of the message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("timestamp", Required=Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the message")]
        public System.DateTimeOffset? Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                _timestamp = value;
            }
        }
    
        /// <summary>
        /// The payload of the message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("payload", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The payload of the message")]
        public object Payload
        {
            get
            {
                return _payload;
            }
            set
            {
                _payload = value;
            }
        }
    
        /// <summary>
        /// Process that created the message
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("process_id", Required=Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DescriptionAttribute("Process that created the message")]
        public string ProcessId
        {
            get
            {
                return _processId;
            }
            set
            {
                _processId = value;
            }
        }
    
        /// <summary>
        /// Hostname that created the message
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hostname", Required=Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DescriptionAttribute("Hostname that created the message")]
        public string Hostname
        {
            get
            {
                return _hostname;
            }
            set
            {
                _hostname = value;
            }
        }
    
        /// <summary>
        /// Rig name that created the message
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DescriptionAttribute("Rig name that created the message")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        public System.IObservable<Message> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Message(this)));
        }
    
        public System.IObservable<Message> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Message(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("message_type = " + _messageType + ", ");
            stringBuilder.Append("protocol_version = " + _protocolVersion + ", ");
            stringBuilder.Append("timestamp = " + _timestamp + ", ");
            stringBuilder.Append("payload = " + _payload + ", ");
            stringBuilder.Append("process_id = " + _processId + ", ");
            stringBuilder.Append("hostname = " + _hostname + ", ");
            stringBuilder.Append("rig_name = " + _rigName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of possible message types in the protocol.
    ///
    ///Examples:
    ///    ```python
    ///    MessageType.REQUEST  # 'request'
    ///    MessageType.REPLY    # 'reply'
    ///    MessageType.EVENT    # 'event'
    ///    ```
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum MessageType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="request")]
        Request = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="reply")]
        Reply = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
        Event = 2,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RegisteredMessages
    {
    
        private MessageType _messageType;
    
        private string _protocolVersion;
    
        private System.DateTimeOffset? _timestamp;
    
        private RegisteredPayload _payload;
    
        private string _processId;
    
        private string _hostname;
    
        private string _rigName;
    
        public RegisteredMessages()
        {
            _protocolVersion = "0";
        }
    
        protected RegisteredMessages(RegisteredMessages other)
        {
            _messageType = other._messageType;
            _protocolVersion = other._protocolVersion;
            _timestamp = other._timestamp;
            _payload = other._payload;
            _processId = other._processId;
            _hostname = other._hostname;
            _rigName = other._rigName;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("message_type", Required=Newtonsoft.Json.Required.Always)]
        public MessageType MessageType
        {
            get
            {
                return _messageType;
            }
            set
            {
                _messageType = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("protocol_version")]
        public string ProtocolVersion
        {
            get
            {
                return _protocolVersion;
            }
            set
            {
                _protocolVersion = value;
            }
        }
    
        /// <summary>
        /// The timestamp of the message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("timestamp", Required=Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the message")]
        public System.DateTimeOffset? Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                _timestamp = value;
            }
        }
    
        /// <summary>
        /// The payload of the message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("payload", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The payload of the message")]
        public RegisteredPayload Payload
        {
            get
            {
                return _payload;
            }
            set
            {
                _payload = value;
            }
        }
    
        /// <summary>
        /// Process that created the message
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("process_id", Required=Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DescriptionAttribute("Process that created the message")]
        public string ProcessId
        {
            get
            {
                return _processId;
            }
            set
            {
                _processId = value;
            }
        }
    
        /// <summary>
        /// Hostname that created the message
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hostname", Required=Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DescriptionAttribute("Hostname that created the message")]
        public string Hostname
        {
            get
            {
                return _hostname;
            }
            set
            {
                _hostname = value;
            }
        }
    
        /// <summary>
        /// Rig name that created the message
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DescriptionAttribute("Rig name that created the message")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        public System.IObservable<RegisteredMessages> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RegisteredMessages(this)));
        }
    
        public System.IObservable<RegisteredMessages> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RegisteredMessages(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("message_type = " + _messageType + ", ");
            stringBuilder.Append("protocol_version = " + _protocolVersion + ", ");
            stringBuilder.Append("timestamp = " + _timestamp + ", ");
            stringBuilder.Append("payload = " + _payload + ", ");
            stringBuilder.Append("process_id = " + _processId + ", ");
            stringBuilder.Append("hostname = " + _hostname + ", ");
            stringBuilder.Append("rig_name = " + _rigName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Payload for log messages containing logging information.
    ///
    ///This payload carries log data including the message content,
    ///severity level, optional context, and application version.
    ///
    ///Attributes:
    ///    message: The actual log message text
    ///    level: Severity level of the log entry
    ///    context: Optional additional data related to the log
    ///    application_version: Version of the application generating the log
    ///
    ///Examples:
    ///    ```python
    ///    log_payload = LogPayload(
    ///        message="System startup complete",
    ///        level=LogLevel.INFO,
    ///        context={"operator": "John Doe"},
    ///        application_version="1.0.0"
    ///    )
    ///    print(log_payload.level)  # LogLevel.INFO
    ///    ```
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "payload_type")]
    [JsonInheritanceAttribute("LogPayload", typeof(LogPayload))]
    [JsonInheritanceAttribute("HeartbeatPayload", typeof(HeartbeatPayload))]
    [System.ComponentModel.DescriptionAttribute(@"Payload for log messages containing logging information.

    This payload carries log data including the message content,
    severity level, optional context, and application version.

    Attributes:
        message: The actual log message text
        level: Severity level of the log entry
        context: Optional additional data related to the log
        application_version: Version of the application generating the log

    Examples:
        ```python
        log_payload = LogPayload(
            message=""System startup complete"",
            level=LogLevel.INFO,
            context={""operator"": ""John Doe""},
            application_version=""1.0.0""
        )
        print(log_payload.level)  # LogLevel.INFO
        ```")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RegisteredPayload
    {
    
        public RegisteredPayload()
        {
        }
    
        protected RegisteredPayload(RegisteredPayload other)
        {
        }
    
        public System.IObservable<RegisteredPayload> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RegisteredPayload(this)));
        }
    
        public System.IObservable<RegisteredPayload> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RegisteredPayload(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Container for the complete message protocol including all registered message types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Container for the complete message protocol including all registered message type" +
        "s.")]
    public abstract partial class MessageProtocol
    {
    
        private RegisteredMessages _registeredMessage;
    
        private Message _message;
    
        protected MessageProtocol()
        {
            _registeredMessage = new RegisteredMessages();
            _message = new Message();
        }
    
        protected MessageProtocol(MessageProtocol other)
        {
            _registeredMessage = other._registeredMessage;
            _message = other._message;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("registered_message", Required=Newtonsoft.Json.Required.Always)]
        public RegisteredMessages RegisteredMessage
        {
            get
            {
                return _registeredMessage;
            }
            set
            {
                _registeredMessage = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("message", Required=Newtonsoft.Json.Required.Always)]
        public Message Message
        {
            get
            {
                return _message;
            }
            set
            {
                _message = value;
            }
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("registered_message = " + _registeredMessage + ", ");
            stringBuilder.Append("message = " + _message);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogPayload>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HeartbeatPayload>))]
    public partial class MatchRegisteredPayload : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(RegisteredPayload);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchRegisteredPayload),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<RegisteredPayload> source)
            where TResult : RegisteredPayload
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<RegisteredPayload>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<HeartbeatPayload> source)
        {
            return Process<HeartbeatPayload>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogPayload> source)
        {
            return Process<LogPayload>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Message> source)
        {
            return Process<Message>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RegisteredMessages> source)
        {
            return Process<RegisteredMessages>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RegisteredPayload> source)
        {
            return Process<RegisteredPayload>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MessageProtocol> source)
        {
            return Process<MessageProtocol>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.5.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HeartbeatPayload>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogPayload>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Message>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RegisteredMessages>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RegisteredPayload>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MessageProtocol>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<MessageProtocol>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}
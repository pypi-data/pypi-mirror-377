# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: anki/import_export.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'anki/import_export.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from anki import cards_pb2 as anki_dot_cards__pb2
from anki import collection_pb2 as anki_dot_collection__pb2
from anki import notes_pb2 as anki_dot_notes__pb2
from anki import generic_pb2 as anki_dot_generic__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x18\x61nki/import_export.proto\x12\x12\x61nki.import_export\x1a\x10\x61nki/cards.proto\x1a\x15\x61nki/collection.proto\x1a\x10\x61nki/notes.proto\x1a\x12\x61nki/generic.proto\"o\n\x1eImportCollectionPackageRequest\x12\x10\n\x08\x63ol_path\x18\x01 \x01(\t\x12\x13\n\x0b\x62\x61\x63kup_path\x18\x02 \x01(\t\x12\x14\n\x0cmedia_folder\x18\x03 \x01(\t\x12\x10\n\x08media_db\x18\x04 \x01(\t\"Y\n\x1e\x45xportCollectionPackageRequest\x12\x10\n\x08out_path\x18\x01 \x01(\t\x12\x15\n\rinclude_media\x18\x02 \x01(\x08\x12\x0e\n\x06legacy\x18\x03 \x01(\x08\"\x83\x02\n\x18ImportAnkiPackageOptions\x12\x17\n\x0fmerge_notetypes\x18\x01 \x01(\x08\x12J\n\x0cupdate_notes\x18\x02 \x01(\x0e\x32\x34.anki.import_export.ImportAnkiPackageUpdateCondition\x12N\n\x10update_notetypes\x18\x03 \x01(\x0e\x32\x34.anki.import_export.ImportAnkiPackageUpdateCondition\x12\x17\n\x0fwith_scheduling\x18\x04 \x01(\x08\x12\x19\n\x11with_deck_configs\x18\x05 \x01(\x08\"o\n\x18ImportAnkiPackageRequest\x12\x14\n\x0cpackage_path\x18\x01 \x01(\t\x12=\n\x07options\x18\x02 \x01(\x0b\x32,.anki.import_export.ImportAnkiPackageOptions\"\x84\x06\n\x0eImportResponse\x12+\n\x07\x63hanges\x18\x01 \x01(\x0b\x32\x1a.anki.collection.OpChanges\x12\x33\n\x03log\x18\x02 \x01(\x0b\x32&.anki.import_export.ImportResponse.Log\x1a\x36\n\x04Note\x12\x1e\n\x02id\x18\x01 \x01(\x0b\x32\x12.anki.notes.NoteId\x12\x0e\n\x06\x66ields\x18\x02 \x03(\t\x1a\xd7\x04\n\x03Log\x12\x34\n\x03new\x18\x01 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12\x38\n\x07updated\x18\x02 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12:\n\tduplicate\x18\x03 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12<\n\x0b\x63onflicting\x18\x04 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12\x42\n\x11\x66irst_field_match\x18\x05 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12\x41\n\x10missing_notetype\x18\x06 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12=\n\x0cmissing_deck\x18\x07 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12\x42\n\x11\x65mpty_first_field\x18\x08 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12G\n\x0f\x64upe_resolution\x18\t \x01(\x0e\x32..anki.import_export.CsvMetadata.DupeResolution\x12\x13\n\x0b\x66ound_notes\x18\n \x01(\r\"\x9b\x01\n\x18\x45xportAnkiPackageRequest\x12\x10\n\x08out_path\x18\x01 \x01(\t\x12=\n\x07options\x18\x02 \x01(\x0b\x32,.anki.import_export.ExportAnkiPackageOptions\x12.\n\x05limit\x18\x03 \x01(\x0b\x32\x1f.anki.import_export.ExportLimit\"r\n\x18\x45xportAnkiPackageOptions\x12\x17\n\x0fwith_scheduling\x18\x01 \x01(\x08\x12\x19\n\x11with_deck_configs\x18\x02 \x01(\x08\x12\x12\n\nwith_media\x18\x03 \x01(\x08\x12\x0e\n\x06legacy\x18\x04 \x01(\x08\"\xaf\x01\n\x0fPackageMetadata\x12<\n\x07version\x18\x01 \x01(\x0e\x32+.anki.import_export.PackageMetadata.Version\"^\n\x07Version\x12\x13\n\x0fVERSION_UNKNOWN\x10\x00\x12\x14\n\x10VERSION_LEGACY_1\x10\x01\x12\x14\n\x10VERSION_LEGACY_2\x10\x02\x12\x12\n\x0eVERSION_LATEST\x10\x03\"\xbf\x01\n\x0cMediaEntries\x12<\n\x07\x65ntries\x18\x01 \x03(\x0b\x32+.anki.import_export.MediaEntries.MediaEntry\x1aq\n\nMediaEntry\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0c\n\x04size\x18\x02 \x01(\r\x12\x0c\n\x04sha1\x18\x03 \x01(\x0c\x12!\n\x13legacy_zip_filename\x18\xff\x01 \x01(\rH\x00\x88\x01\x01\x42\x16\n\x14_legacy_zip_filename\"S\n\x10ImportCsvRequest\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x31\n\x08metadata\x18\x02 \x01(\x0b\x32\x1f.anki.import_export.CsvMetadata\"\xe1\x01\n\x12\x43svMetadataRequest\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x41\n\tdelimiter\x18\x02 \x01(\x0e\x32).anki.import_export.CsvMetadata.DelimiterH\x00\x88\x01\x01\x12\x18\n\x0bnotetype_id\x18\x03 \x01(\x03H\x01\x88\x01\x01\x12\x14\n\x07\x64\x65\x63k_id\x18\x04 \x01(\x03H\x02\x88\x01\x01\x12\x14\n\x07is_html\x18\x05 \x01(\x08H\x03\x88\x01\x01\x42\x0c\n\n_delimiterB\x0e\n\x0c_notetype_idB\n\n\x08_deck_idB\n\n\x08_is_html\"\xd9\x06\n\x0b\x43svMetadata\x12<\n\tdelimiter\x18\x01 \x01(\x0e\x32).anki.import_export.CsvMetadata.Delimiter\x12\x0f\n\x07is_html\x18\x02 \x01(\x08\x12\x13\n\x0bglobal_tags\x18\x03 \x03(\t\x12\x14\n\x0cupdated_tags\x18\x04 \x03(\t\x12\x15\n\rcolumn_labels\x18\x05 \x03(\t\x12\x11\n\x07\x64\x65\x63k_id\x18\x06 \x01(\x03H\x00\x12\x15\n\x0b\x64\x65\x63k_column\x18\x07 \x01(\rH\x00\x12\x13\n\tdeck_name\x18\x11 \x01(\tH\x00\x12I\n\x0fglobal_notetype\x18\x08 \x01(\x0b\x32..anki.import_export.CsvMetadata.MappedNotetypeH\x01\x12\x19\n\x0fnotetype_column\x18\t \x01(\rH\x01\x12\x13\n\x0btags_column\x18\n \x01(\r\x12\x17\n\x0f\x66orce_delimiter\x18\x0b \x01(\x08\x12\x15\n\rforce_is_html\x18\x0c \x01(\x08\x12)\n\x07preview\x18\r \x03(\x0b\x32\x18.anki.generic.StringList\x12\x13\n\x0bguid_column\x18\x0e \x01(\r\x12G\n\x0f\x64upe_resolution\x18\x0f \x01(\x0e\x32..anki.import_export.CsvMetadata.DupeResolution\x12?\n\x0bmatch_scope\x18\x10 \x01(\x0e\x32*.anki.import_export.CsvMetadata.MatchScope\x1a\x33\n\x0eMappedNotetype\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x15\n\rfield_columns\x18\x02 \x03(\r\"9\n\x0e\x44upeResolution\x12\n\n\x06UPDATE\x10\x00\x12\x0c\n\x08PRESERVE\x10\x01\x12\r\n\tDUPLICATE\x10\x02\"N\n\tDelimiter\x12\x07\n\x03TAB\x10\x00\x12\x08\n\x04PIPE\x10\x01\x12\r\n\tSEMICOLON\x10\x02\x12\t\n\x05\x43OLON\x10\x03\x12\t\n\x05\x43OMMA\x10\x04\x12\t\n\x05SPACE\x10\x05\"1\n\nMatchScope\x12\x0c\n\x08NOTETYPE\x10\x00\x12\x15\n\x11NOTETYPE_AND_DECK\x10\x01\x42\x06\n\x04\x64\x65\x63kB\n\n\x08notetype\"k\n\x14\x45xportCardCsvRequest\x12\x10\n\x08out_path\x18\x01 \x01(\t\x12\x11\n\twith_html\x18\x02 \x01(\x08\x12.\n\x05limit\x18\x03 \x01(\x0b\x32\x1f.anki.import_export.ExportLimit\"\xbb\x01\n\x14\x45xportNoteCsvRequest\x12\x10\n\x08out_path\x18\x01 \x01(\t\x12\x11\n\twith_html\x18\x02 \x01(\x08\x12\x11\n\twith_tags\x18\x03 \x01(\x08\x12\x11\n\twith_deck\x18\x04 \x01(\x08\x12\x15\n\rwith_notetype\x18\x05 \x01(\x08\x12\x11\n\twith_guid\x18\x06 \x01(\x08\x12.\n\x05limit\x18\x07 \x01(\x0b\x32\x1f.anki.import_export.ExportLimit\"\xac\x01\n\x0b\x45xportLimit\x12/\n\x10whole_collection\x18\x01 \x01(\x0b\x32\x13.anki.generic.EmptyH\x00\x12\x11\n\x07\x64\x65\x63k_id\x18\x02 \x01(\x03H\x00\x12\'\n\x08note_ids\x18\x03 \x01(\x0b\x32\x13.anki.notes.NoteIdsH\x00\x12\'\n\x08\x63\x61rd_ids\x18\x04 \x01(\x0b\x32\x13.anki.cards.CardIdsH\x00\x42\x07\n\x05limit*\xb6\x01\n ImportAnkiPackageUpdateCondition\x12\x31\n-IMPORT_ANKI_PACKAGE_UPDATE_CONDITION_IF_NEWER\x10\x00\x12/\n+IMPORT_ANKI_PACKAGE_UPDATE_CONDITION_ALWAYS\x10\x01\x12.\n*IMPORT_ANKI_PACKAGE_UPDATE_CONDITION_NEVER\x10\x02\x32\xa5\x06\n\x13ImportExportService\x12\x65\n\x11ImportAnkiPackage\x12,.anki.import_export.ImportAnkiPackageRequest\x1a\".anki.import_export.ImportResponse\x12`\n\x1bGetImportAnkiPackagePresets\x12\x13.anki.generic.Empty\x1a,.anki.import_export.ImportAnkiPackageOptions\x12W\n\x11\x45xportAnkiPackage\x12,.anki.import_export.ExportAnkiPackageRequest\x1a\x14.anki.generic.UInt32\x12Y\n\x0eGetCsvMetadata\x12&.anki.import_export.CsvMetadataRequest\x1a\x1f.anki.import_export.CsvMetadata\x12U\n\tImportCsv\x12$.anki.import_export.ImportCsvRequest\x1a\".anki.import_export.ImportResponse\x12O\n\rExportNoteCsv\x12(.anki.import_export.ExportNoteCsvRequest\x1a\x14.anki.generic.UInt32\x12O\n\rExportCardCsv\x12(.anki.import_export.ExportCardCsvRequest\x1a\x14.anki.generic.UInt32\x12J\n\x0eImportJsonFile\x12\x14.anki.generic.String\x1a\".anki.import_export.ImportResponse\x12L\n\x10ImportJsonString\x12\x14.anki.generic.String\x1a\".anki.import_export.ImportResponse2\xe4\x01\n\x1a\x42\x61\x63kendImportExportService\x12\x62\n\x17ImportCollectionPackage\x12\x32.anki.import_export.ImportCollectionPackageRequest\x1a\x13.anki.generic.Empty\x12\x62\n\x17\x45xportCollectionPackage\x12\x32.anki.import_export.ExportCollectionPackageRequest\x1a\x13.anki.generic.EmptyB\x02P\x01\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'anki.import_export_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'P\001'
  _globals['_IMPORTANKIPACKAGEUPDATECONDITION']._serialized_start=3775
  _globals['_IMPORTANKIPACKAGEUPDATECONDITION']._serialized_end=3957
  _globals['_IMPORTCOLLECTIONPACKAGEREQUEST']._serialized_start=127
  _globals['_IMPORTCOLLECTIONPACKAGEREQUEST']._serialized_end=238
  _globals['_EXPORTCOLLECTIONPACKAGEREQUEST']._serialized_start=240
  _globals['_EXPORTCOLLECTIONPACKAGEREQUEST']._serialized_end=329
  _globals['_IMPORTANKIPACKAGEOPTIONS']._serialized_start=332
  _globals['_IMPORTANKIPACKAGEOPTIONS']._serialized_end=591
  _globals['_IMPORTANKIPACKAGEREQUEST']._serialized_start=593
  _globals['_IMPORTANKIPACKAGEREQUEST']._serialized_end=704
  _globals['_IMPORTRESPONSE']._serialized_start=707
  _globals['_IMPORTRESPONSE']._serialized_end=1479
  _globals['_IMPORTRESPONSE_NOTE']._serialized_start=823
  _globals['_IMPORTRESPONSE_NOTE']._serialized_end=877
  _globals['_IMPORTRESPONSE_LOG']._serialized_start=880
  _globals['_IMPORTRESPONSE_LOG']._serialized_end=1479
  _globals['_EXPORTANKIPACKAGEREQUEST']._serialized_start=1482
  _globals['_EXPORTANKIPACKAGEREQUEST']._serialized_end=1637
  _globals['_EXPORTANKIPACKAGEOPTIONS']._serialized_start=1639
  _globals['_EXPORTANKIPACKAGEOPTIONS']._serialized_end=1753
  _globals['_PACKAGEMETADATA']._serialized_start=1756
  _globals['_PACKAGEMETADATA']._serialized_end=1931
  _globals['_PACKAGEMETADATA_VERSION']._serialized_start=1837
  _globals['_PACKAGEMETADATA_VERSION']._serialized_end=1931
  _globals['_MEDIAENTRIES']._serialized_start=1934
  _globals['_MEDIAENTRIES']._serialized_end=2125
  _globals['_MEDIAENTRIES_MEDIAENTRY']._serialized_start=2012
  _globals['_MEDIAENTRIES_MEDIAENTRY']._serialized_end=2125
  _globals['_IMPORTCSVREQUEST']._serialized_start=2127
  _globals['_IMPORTCSVREQUEST']._serialized_end=2210
  _globals['_CSVMETADATAREQUEST']._serialized_start=2213
  _globals['_CSVMETADATAREQUEST']._serialized_end=2438
  _globals['_CSVMETADATA']._serialized_start=2441
  _globals['_CSVMETADATA']._serialized_end=3298
  _globals['_CSVMETADATA_MAPPEDNOTETYPE']._serialized_start=3037
  _globals['_CSVMETADATA_MAPPEDNOTETYPE']._serialized_end=3088
  _globals['_CSVMETADATA_DUPERESOLUTION']._serialized_start=3090
  _globals['_CSVMETADATA_DUPERESOLUTION']._serialized_end=3147
  _globals['_CSVMETADATA_DELIMITER']._serialized_start=3149
  _globals['_CSVMETADATA_DELIMITER']._serialized_end=3227
  _globals['_CSVMETADATA_MATCHSCOPE']._serialized_start=3229
  _globals['_CSVMETADATA_MATCHSCOPE']._serialized_end=3278
  _globals['_EXPORTCARDCSVREQUEST']._serialized_start=3300
  _globals['_EXPORTCARDCSVREQUEST']._serialized_end=3407
  _globals['_EXPORTNOTECSVREQUEST']._serialized_start=3410
  _globals['_EXPORTNOTECSVREQUEST']._serialized_end=3597
  _globals['_EXPORTLIMIT']._serialized_start=3600
  _globals['_EXPORTLIMIT']._serialized_end=3772
  _globals['_IMPORTEXPORTSERVICE']._serialized_start=3960
  _globals['_IMPORTEXPORTSERVICE']._serialized_end=4765
  _globals['_BACKENDIMPORTEXPORTSERVICE']._serialized_start=4768
  _globals['_BACKENDIMPORTEXPORTSERVICE']._serialized_end=4996
# @@protoc_insertion_point(module_scope)

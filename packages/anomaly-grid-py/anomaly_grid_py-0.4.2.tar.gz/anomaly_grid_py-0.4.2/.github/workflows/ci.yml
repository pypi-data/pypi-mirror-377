name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin pytest pytest-benchmark
    
    - name: Install patchelf (Linux only)
      if: runner.os == 'Linux'
      run: pip install patchelf

    - name: Build and install package in development mode
      run: |
        # Use pip install -e . which works without virtual environment
        # This is equivalent to maturin develop but more CI-friendly
        pip install -e .
      env:
        PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1

    - name: Verify package installation
      run: |
        python -c "import anomaly_grid_py; print('[OK] Package imports successfully')"
        python -c "from anomaly_grid_py import AnomalyDetector; print('[OK] AnomalyDetector imports successfully')"
        python -c "import anomaly_grid_py; detector = anomaly_grid_py.AnomalyDetector(); print('[OK] AnomalyDetector creates successfully')"
        
    - name: Test basic functionality
      run: |
        python test_basic_functionality.py

    - name: Run tests
      run: |
        # Run tests to ensure the installed package works correctly
        python -m pytest tests/ -v

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy

    - name: Check formatting with Black
      run: black --check python/anomaly_grid_py/ tests/

    - name: Lint with Ruff
      run: ruff check python/anomaly_grid_py/ tests/

    - name: Type check with MyPy
      run: mypy python/anomaly_grid_py/ --ignore-missing-imports

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: bandit -r python/anomaly_grid_py/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: auto
      env:
        PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1
      continue-on-error: true

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist

  test-wheel-installation:
    name: Test wheel installation
    runs-on: ubuntu-latest
    needs: build-wheels
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        name: wheels-ubuntu-latest
        path: dist

    - name: Test wheel installation in clean environment
      run: |
        # Create clean virtual environment
        python -m venv test_env
        source test_env/bin/activate
        
        # Install wheel - pip will automatically select the compatible one
        pip install --find-links dist anomaly-grid-py==0.4.2
        
        # Test basic functionality
        python -c "
        import anomaly_grid_py
        print('[OK] Package imports successfully')
        
        # Test basic functionality
        detector = anomaly_grid_py.AnomalyDetector(max_order=3)
        detector.fit([['A', 'B', 'C']] * 10)
        results = detector.predict([['A', 'B', 'X'], ['X', 'Y', 'Z']], threshold=0.1)
        print(f'[OK] Basic functionality works: {sum(results)} anomalies detected')
        
        # Test type hints
        import inspect
        sig = inspect.signature(detector.predict)
        print(f'[OK] Type hints available: {sig}')
        "

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: build-wheels
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        name: wheels-ubuntu-latest
        path: dist

    - name: Install wheel and benchmark dependencies
      run: |
        # Install wheel - pip will automatically select the compatible one
        pip install --find-links dist anomaly-grid-py==0.4.2
        pip install pytest pytest-benchmark

    - name: Run performance benchmarks
      run: |
        pytest tests/test_performance.py -v --benchmark-only --benchmark-json=benchmark.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.json

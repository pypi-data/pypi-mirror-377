"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.sherlock.v0.SherlockAnalysisService_pb2
import ansys.api.sherlock.v0.SherlockCommonService_pb2
import grpc
import typing

class SherlockAnalysisServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    runAnalysis: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.RunAnalysisRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Runs one or more Sherlock analysis."""

    runStrainMapAnalysis: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.RunStrainMapAnalysisRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Run Sherlock strain map analysis."""

    getHarmonicVibeInputFields: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetHarmonicVibeInputFieldsRequest,
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetHarmonicVibeInputFieldsResponse] = ...
    """Returns the list of valid harmonic vibe input fields for the provided model source and user configuration."""

    updateHarmonicVibeProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateHarmonicVibePropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for harmonic vibe analysis."""

    getRandomVibeInputFields: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetRandomVibeInputFieldsRequest,
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetRandomVibeInputFieldsResponse] = ...
    """Returns the list of valid Random Vibe input fields for the provided model source and user configuration."""

    updateRandomVibeProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateRandomVibePropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for random vibe analysis."""

    getMechanicalShockInputFields: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetMechanicalShockInputFieldsRequest,
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetMechanicalShockInputFieldsResponse] = ...
    """Returns the list of valid mechanical shock input fields for the provided model source and user configuration."""

    updateMechanicalShockProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateMechanicalShockPropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for mechanical shock analysis."""

    updateSolderFatigueProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateSolderFatiguePropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for solder fatigue analysis."""

    getNaturalFrequencyInputFields: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetNaturalFrequencyInputFieldsRequest,
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetNaturalFrequencyInputFieldsResponse] = ...
    """Returns the list of valid natural frequency property fields given the user configuration."""

    updateNaturalFrequencyProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateNaturalFrequencyPropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for natural frequency analysis."""

    updateThermalMechProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateThermalMechPropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for thermal mech analysis."""

    getPcbModelingInputFields: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetPcbModelingInputFieldsRequest,
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetPcbModelingInputFieldsResponse] = ...
    """Returns the list of valid PCB modeling property field."""

    updatePcbModelingProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdatePcbModelingPropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the PCB modeling properties for the provided analysis types."""

    getSolderFatigueInputFields: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetSolderFatigueInputFieldsRequest,
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetSolderFatigueInputFieldsResponse] = ...
    """Returns the list of valid solder fatigue property fields given the user configuration."""

    updatePartModelingProperties: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdatePartModelingRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the part modeling properties for a given project's CCA."""

    getICTAnalysisInputFields: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetICTAnalysisInputFieldsRequest,
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetICTAnalysisInputFieldsResponse] = ...
    """Returns the list of valid ICT analysis property fields given the user configuration."""

    updateICTAnalysisProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateICTAnalysisPropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for ICT analysis."""

    updatePartsListValidationProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdatePartsListValidationPropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for parts list validation analysis."""

    getPartsListValidationProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetPartsListValidationPropsRequest,
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.PartsListValidationPropsResponse] = ...
    """Returns the parts list validation properties."""

    updateComponentFailureMechanismProps: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateComponentFailureMechanismPropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for component failure mechanism analysis."""

    updateSemiconductorWearoutAnalysisProps: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateSemiconductorWearoutAnalysisPropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for semiconductor wearout analysis."""

    updatePTHFatigueProps: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdatePTHFatiguePropsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates the analysis properties for plated through hole fatigue analysis."""


class SherlockAnalysisServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def runAnalysis(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.RunAnalysisRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Runs one or more Sherlock analysis."""
        pass

    @abc.abstractmethod
    def runStrainMapAnalysis(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.RunStrainMapAnalysisRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Run Sherlock strain map analysis."""
        pass

    @abc.abstractmethod
    def getHarmonicVibeInputFields(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetHarmonicVibeInputFieldsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetHarmonicVibeInputFieldsResponse:
        """Returns the list of valid harmonic vibe input fields for the provided model source and user configuration."""
        pass

    @abc.abstractmethod
    def updateHarmonicVibeProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateHarmonicVibePropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the analysis properties for harmonic vibe analysis."""
        pass

    @abc.abstractmethod
    def getRandomVibeInputFields(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetRandomVibeInputFieldsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetRandomVibeInputFieldsResponse:
        """Returns the list of valid Random Vibe input fields for the provided model source and user configuration."""
        pass

    @abc.abstractmethod
    def updateRandomVibeProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateRandomVibePropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the analysis properties for random vibe analysis."""
        pass

    @abc.abstractmethod
    def getMechanicalShockInputFields(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetMechanicalShockInputFieldsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetMechanicalShockInputFieldsResponse:
        """Returns the list of valid mechanical shock input fields for the provided model source and user configuration."""
        pass

    @abc.abstractmethod
    def updateMechanicalShockProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateMechanicalShockPropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the analysis properties for mechanical shock analysis."""
        pass

    @abc.abstractmethod
    def updateSolderFatigueProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateSolderFatiguePropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the analysis properties for solder fatigue analysis."""
        pass

    @abc.abstractmethod
    def getNaturalFrequencyInputFields(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetNaturalFrequencyInputFieldsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetNaturalFrequencyInputFieldsResponse:
        """Returns the list of valid natural frequency property fields given the user configuration."""
        pass

    @abc.abstractmethod
    def updateNaturalFrequencyProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateNaturalFrequencyPropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the analysis properties for natural frequency analysis."""
        pass

    @abc.abstractmethod
    def updateThermalMechProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateThermalMechPropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the analysis properties for thermal mech analysis."""
        pass

    @abc.abstractmethod
    def getPcbModelingInputFields(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetPcbModelingInputFieldsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetPcbModelingInputFieldsResponse:
        """Returns the list of valid PCB modeling property field."""
        pass

    @abc.abstractmethod
    def updatePcbModelingProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdatePcbModelingPropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the PCB modeling properties for the provided analysis types."""
        pass

    @abc.abstractmethod
    def getSolderFatigueInputFields(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetSolderFatigueInputFieldsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetSolderFatigueInputFieldsResponse:
        """Returns the list of valid solder fatigue property fields given the user configuration."""
        pass

    @abc.abstractmethod
    def updatePartModelingProperties(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdatePartModelingRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the part modeling properties for a given project's CCA."""
        pass

    @abc.abstractmethod
    def getICTAnalysisInputFields(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetICTAnalysisInputFieldsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetICTAnalysisInputFieldsResponse:
        """Returns the list of valid ICT analysis property fields given the user configuration."""
        pass

    @abc.abstractmethod
    def updateICTAnalysisProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateICTAnalysisPropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the analysis properties for ICT analysis."""
        pass

    @abc.abstractmethod
    def updatePartsListValidationProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdatePartsListValidationPropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Updates the analysis properties for parts list validation analysis."""
        pass

    @abc.abstractmethod
    def getPartsListValidationProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.GetPartsListValidationPropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockAnalysisService_pb2.PartsListValidationPropsResponse:
        """Returns the parts list validation properties."""
        pass

    @abc.abstractmethod
    def updateComponentFailureMechanismProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateComponentFailureMechanismPropsRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode]:
        """Updates the analysis properties for component failure mechanism analysis."""
        pass

    @abc.abstractmethod
    def updateSemiconductorWearoutAnalysisProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdateSemiconductorWearoutAnalysisPropsRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode]:
        """Updates the analysis properties for semiconductor wearout analysis."""
        pass

    @abc.abstractmethod
    def updatePTHFatigueProps(self,
        request: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.UpdatePTHFatiguePropsRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode]:
        """Updates the analysis properties for plated through hole fatigue analysis."""
        pass


def add_SherlockAnalysisServiceServicer_to_server(servicer: SherlockAnalysisServiceServicer, server: grpc.Server) -> None: ...

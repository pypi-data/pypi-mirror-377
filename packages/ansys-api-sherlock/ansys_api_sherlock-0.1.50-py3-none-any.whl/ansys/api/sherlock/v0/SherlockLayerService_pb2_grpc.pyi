"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.sherlock.v0.SherlockCommonService_pb2
import ansys.api.sherlock.v0.SherlockLayerService_pb2
import grpc
import typing

class SherlockLayerServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    addPottingRegion: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.AddPottingRegionRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Add a potting region with the specified shape and properties."""

    updatePottingRegion: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdatePottingRegionRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Updates a potting region with the specified shape and properties."""

    deletePottingRegion: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.DeletePottingRegionRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Deletes a potting region based on given identification properties."""

    copyPottingRegion: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.CopyPottingRegionRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Copies a potting region based on given identification properties."""

    deleteAllICTFixtures: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.DeleteAllICTFixturesRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Delete all ICT fixtures in specific CCA of specific project."""

    deleteAllMountPoints: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.DeleteAllMountPointsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Delete all mount points in specific CCA of specific project."""

    deleteAllTestPoints: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.DeleteAllTestPointsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Delete all test points in specific CCA of specific project."""

    exportAllMountPoints: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.ExportAllMountPointsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Export all mount points and their properties into a CSV formatted file."""

    exportAllICTFixtures: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.ExportAllICTFixturesRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Export all ICT fixtures and their properties into a CSV formatted file."""

    exportAllTestPoints: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.ExportAllTestPointsRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Export all test points and their properties into a CSV formatted file."""

    getMountPointBoundaries: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointBoundariesRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointBoundariesResponse] = ...
    """Get a list of valid mount point boundaries."""

    getMountPointChassisMaterials: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointChassisMaterialsRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointChassisMaterialsResponse] = ...
    """Get a list of valid mount point chassis materials."""

    getMountPointsProperties: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointsPropertiesRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointsPropertiesResponse] = ...
    """Get a list of valid mount point properties."""

    getICTFixturesProperties: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetICTFixturesPropertiesRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetICTFixturesPropertiesResponse] = ...
    """Get a list of valid ICT fixture properties."""

    getMountPointShapeTypes: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointShapeTypesRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointShapeTypesResponse] = ...
    """Get a list of valid mount point shape type values."""

    getMountPointSides: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointSidesRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointSidesResponse] = ...
    """Get a list of valid mount point sides."""

    getMountPointTypes: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointTypesRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointTypesResponse] = ...
    """Get a list of valid mount point type values."""

    getMountPointUnits: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointUnitsRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointUnitsResponse] = ...
    """Get a list of valid mount point units."""

    getTestPointProperties: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetTestPointPropertiesRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.GetTestPointPropertiesResponse] = ...
    """Get a series of valid test point properties."""

    updateICTFixtures: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateICTFixturesRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateICTFixturesResponse] = ...
    """Update the ICT fixtures properties of a CCA using input parameters.
    If the ID specified already exists, then the properties for that ICT fixture will be updated.
    If the ID specified does not already exist, or if the field is empty, then a new ICT fixture will be added with the specified properties.
    """

    updateICTFixturesByFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateICTFixturesByFileRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateICTFixturesResponse] = ...
    """Update the ICT fixtures properties of a CCA from a CSV formatted file. This API could be used to add new ICT fixtures or update existing ones depending on the file contents.
    If the ID specified already exists, then the properties for that ICT fixture will be updated.
    If the ID specified does not already exist, or if the field is empty, then a new ICT fixture will be added with the specified properties.
    The file format should be the same as the one produced from CCA -> Export ICT Fixtures.
    """

    updateMountPoints: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateMountPointsRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateMountPointsResponse] = ...
    """Update mount points with specified properties.
    If the ID specified already exists, then the properties for that mount point will be updated.
    If the ID specified does not already exist, or if the field is empty, then a new mount point will be added with the specified properties.
    """

    updateMountPointsByFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateMountPointsByFileRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateMountPointsResponse] = ...
    """Update the mount points properties of a CCA from a CSV formatted file. This API could be used to add new mount points or update existing ones depending on the file contents.
    If the ID specified already exists, then the properties for that mount point will be updated.
    If the ID specified does not already exist, or if the field is empty, then a new mount point will be added with the specified properties.
    The file format should be the same as the one produced from CCA -> Export Mount Points.
    """

    updateTestPoints: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateTestPointsRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateTestPointsResponse] = ...
    """Update the test points properties of a CCA from input parameters.
    If the ID specified already exists, then the properties for that test point will be updated.
    If the ID specified does not already exist, or if the field is empty, then a new test point will be added with the specified properties.
    """

    updateTestPointsByFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateTestPointsByFileRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateTestPointsResponse] = ...
    """Update the test points properties of a CCA from a CSV formatted file. This API could be used to add new test points or update existing ones depending on the file contents.
    If the ID specified already exists, then the properties for that test point will be updated.
    If the ID specified does not already exist, or if the field is empty, then a new test point will be added with the specified properties.
    The file format should be the same as the one produced from CCA -> Export Test Points.
    """

    addModelingRegion: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.AddModelingRegionRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Add one or more modeling regions with the specified shapes and properties."""

    updateModelingRegion: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateModelingRegionRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Update one or more modeling regions with the specified shapes and properties."""

    deleteModelingRegion: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.DeleteModelingRegionRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Delete one or more existing modeling regions."""

    copyModelingRegion: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.CopyModelingRegionRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Copy one or more existing modeling regions."""

    listLayers: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.ListLayersRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.ListLayersResponse] = ...
    """List all the available layers as seen in the layer viewer for a project CCA."""

    exportLayerImage: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockLayerService_pb2.ExportLayerImageRequest,
        ansys.api.sherlock.v0.SherlockLayerService_pb2.ExportLayerImageResponse] = ...
    """Export one or more 2D Layer Viewer images from a project CCA."""


class SherlockLayerServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def addPottingRegion(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.AddPottingRegionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Add a potting region with the specified shape and properties."""
        pass

    @abc.abstractmethod
    def updatePottingRegion(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdatePottingRegionRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode]:
        """Updates a potting region with the specified shape and properties."""
        pass

    @abc.abstractmethod
    def deletePottingRegion(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.DeletePottingRegionRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode]:
        """Deletes a potting region based on given identification properties."""
        pass

    @abc.abstractmethod
    def copyPottingRegion(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.CopyPottingRegionRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode]:
        """Copies a potting region based on given identification properties."""
        pass

    @abc.abstractmethod
    def deleteAllICTFixtures(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.DeleteAllICTFixturesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Delete all ICT fixtures in specific CCA of specific project."""
        pass

    @abc.abstractmethod
    def deleteAllMountPoints(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.DeleteAllMountPointsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Delete all mount points in specific CCA of specific project."""
        pass

    @abc.abstractmethod
    def deleteAllTestPoints(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.DeleteAllTestPointsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Delete all test points in specific CCA of specific project."""
        pass

    @abc.abstractmethod
    def exportAllMountPoints(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.ExportAllMountPointsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Export all mount points and their properties into a CSV formatted file."""
        pass

    @abc.abstractmethod
    def exportAllICTFixtures(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.ExportAllICTFixturesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Export all ICT fixtures and their properties into a CSV formatted file."""
        pass

    @abc.abstractmethod
    def exportAllTestPoints(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.ExportAllTestPointsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Export all test points and their properties into a CSV formatted file."""
        pass

    @abc.abstractmethod
    def getMountPointBoundaries(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointBoundariesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointBoundariesResponse:
        """Get a list of valid mount point boundaries."""
        pass

    @abc.abstractmethod
    def getMountPointChassisMaterials(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointChassisMaterialsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointChassisMaterialsResponse:
        """Get a list of valid mount point chassis materials."""
        pass

    @abc.abstractmethod
    def getMountPointsProperties(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointsPropertiesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointsPropertiesResponse:
        """Get a list of valid mount point properties."""
        pass

    @abc.abstractmethod
    def getICTFixturesProperties(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.GetICTFixturesPropertiesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.GetICTFixturesPropertiesResponse:
        """Get a list of valid ICT fixture properties."""
        pass

    @abc.abstractmethod
    def getMountPointShapeTypes(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointShapeTypesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointShapeTypesResponse:
        """Get a list of valid mount point shape type values."""
        pass

    @abc.abstractmethod
    def getMountPointSides(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointSidesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointSidesResponse:
        """Get a list of valid mount point sides."""
        pass

    @abc.abstractmethod
    def getMountPointTypes(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointTypesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointTypesResponse:
        """Get a list of valid mount point type values."""
        pass

    @abc.abstractmethod
    def getMountPointUnits(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointUnitsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.GetMountPointUnitsResponse:
        """Get a list of valid mount point units."""
        pass

    @abc.abstractmethod
    def getTestPointProperties(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.GetTestPointPropertiesRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockLayerService_pb2.GetTestPointPropertiesResponse]:
        """Get a series of valid test point properties."""
        pass

    @abc.abstractmethod
    def updateICTFixtures(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateICTFixturesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateICTFixturesResponse:
        """Update the ICT fixtures properties of a CCA using input parameters.
        If the ID specified already exists, then the properties for that ICT fixture will be updated.
        If the ID specified does not already exist, or if the field is empty, then a new ICT fixture will be added with the specified properties.
        """
        pass

    @abc.abstractmethod
    def updateICTFixturesByFile(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateICTFixturesByFileRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateICTFixturesResponse:
        """Update the ICT fixtures properties of a CCA from a CSV formatted file. This API could be used to add new ICT fixtures or update existing ones depending on the file contents.
        If the ID specified already exists, then the properties for that ICT fixture will be updated.
        If the ID specified does not already exist, or if the field is empty, then a new ICT fixture will be added with the specified properties.
        The file format should be the same as the one produced from CCA -> Export ICT Fixtures.
        """
        pass

    @abc.abstractmethod
    def updateMountPoints(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateMountPointsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateMountPointsResponse:
        """Update mount points with specified properties.
        If the ID specified already exists, then the properties for that mount point will be updated.
        If the ID specified does not already exist, or if the field is empty, then a new mount point will be added with the specified properties.
        """
        pass

    @abc.abstractmethod
    def updateMountPointsByFile(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateMountPointsByFileRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateMountPointsResponse:
        """Update the mount points properties of a CCA from a CSV formatted file. This API could be used to add new mount points or update existing ones depending on the file contents.
        If the ID specified already exists, then the properties for that mount point will be updated.
        If the ID specified does not already exist, or if the field is empty, then a new mount point will be added with the specified properties.
        The file format should be the same as the one produced from CCA -> Export Mount Points.
        """
        pass

    @abc.abstractmethod
    def updateTestPoints(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateTestPointsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateTestPointsResponse:
        """Update the test points properties of a CCA from input parameters.
        If the ID specified already exists, then the properties for that test point will be updated.
        If the ID specified does not already exist, or if the field is empty, then a new test point will be added with the specified properties.
        """
        pass

    @abc.abstractmethod
    def updateTestPointsByFile(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateTestPointsByFileRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateTestPointsResponse:
        """Update the test points properties of a CCA from a CSV formatted file. This API could be used to add new test points or update existing ones depending on the file contents.
        If the ID specified already exists, then the properties for that test point will be updated.
        If the ID specified does not already exist, or if the field is empty, then a new test point will be added with the specified properties.
        The file format should be the same as the one produced from CCA -> Export Test Points.
        """
        pass

    @abc.abstractmethod
    def addModelingRegion(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.AddModelingRegionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Add one or more modeling regions with the specified shapes and properties."""
        pass

    @abc.abstractmethod
    def updateModelingRegion(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.UpdateModelingRegionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Update one or more modeling regions with the specified shapes and properties."""
        pass

    @abc.abstractmethod
    def deleteModelingRegion(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.DeleteModelingRegionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Delete one or more existing modeling regions."""
        pass

    @abc.abstractmethod
    def copyModelingRegion(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.CopyModelingRegionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Copy one or more existing modeling regions."""
        pass

    @abc.abstractmethod
    def listLayers(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.ListLayersRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockLayerService_pb2.ListLayersResponse:
        """List all the available layers as seen in the layer viewer for a project CCA."""
        pass

    @abc.abstractmethod
    def exportLayerImage(self,
        request: ansys.api.sherlock.v0.SherlockLayerService_pb2.ExportLayerImageRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockLayerService_pb2.ExportLayerImageResponse]:
        """Export one or more 2D Layer Viewer images from a project CCA."""
        pass


def add_SherlockLayerServiceServicer_to_server(servicer: SherlockLayerServiceServicer, server: grpc.Server) -> None: ...

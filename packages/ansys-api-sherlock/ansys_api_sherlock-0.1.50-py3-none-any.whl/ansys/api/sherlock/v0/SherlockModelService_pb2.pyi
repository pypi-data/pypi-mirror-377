"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import ansys.api.sherlock.v0.SherlockAnalysisService_pb2
import ansys.api.sherlock.v0.SherlockCommonService_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _MeshType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _MeshTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MeshType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    NONE: MeshType.ValueType = ...  # 0
    """Defines only geometric volumes without generating mesh elements."""

    BONDED: MeshType.ValueType = ...  # 1
    """Defines meshed elements generated by Sherlock."""

    SWEEP: MeshType.ValueType = ...  # 2
    """Defines geometric volumes along with commands to mesh the volumes depending on the file type."""

class MeshType(_MeshType, metaclass=_MeshTypeEnumTypeWrapper):
    """*
     Different ways meshes are created. The options
     available depend on the export file type.
    """
    pass

NONE: MeshType.ValueType = ...  # 0
"""Defines only geometric volumes without generating mesh elements."""

BONDED: MeshType.ValueType = ...  # 1
"""Defines meshed elements generated by Sherlock."""

SWEEP: MeshType.ValueType = ...  # 2
"""Defines geometric volumes along with commands to mesh the volumes depending on the file type."""

global___MeshType = MeshType


class _TraceOutputType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _TraceOutputTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TraceOutputType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    ALL_REGIONS: TraceOutputType.ValueType = ...  # 0
    """Both Conductor and Dielectric."""

    CONDUCTOR_REGIONS: TraceOutputType.ValueType = ...  # 1
    """The traces themselves."""

    DIELECTRIC_REGIONS: TraceOutputType.ValueType = ...  # 2
    """Regions that surround the conductor regions (Ex. areas filled with resin)."""

class TraceOutputType(_TraceOutputType, metaclass=_TraceOutputTypeEnumTypeWrapper):
    """
    Indicates which trace regions to include in the 3D model.
    """
    pass

ALL_REGIONS: TraceOutputType.ValueType = ...  # 0
"""Both Conductor and Dielectric."""

CONDUCTOR_REGIONS: TraceOutputType.ValueType = ...  # 1
"""The traces themselves."""

DIELECTRIC_REGIONS: TraceOutputType.ValueType = ...  # 2
"""Regions that surround the conductor regions (Ex. areas filled with resin)."""

global___TraceOutputType = TraceOutputType


class ExportFEAModelRequest(google.protobuf.message.Message):
    """*
    Request to export an FEA model.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _ExportAnalysis:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ExportAnalysisEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ExportAnalysis.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        NaturalFreq: ExportFEAModelRequest.ExportAnalysis.ValueType = ...  # 0
        """Natural Frequency Analysis."""

        HarmonicVibe: ExportFEAModelRequest.ExportAnalysis.ValueType = ...  # 1
        """Harmonic Vibe Analysis."""

        ICTAnalysis: ExportFEAModelRequest.ExportAnalysis.ValueType = ...  # 2
        """ICT Analysis."""

        MechanicalShock: ExportFEAModelRequest.ExportAnalysis.ValueType = ...  # 3
        """Mechanical Shock Analysis."""

        RandomVibe: ExportFEAModelRequest.ExportAnalysis.ValueType = ...  # 4
        """Random Vibe Analysis."""

    class ExportAnalysis(_ExportAnalysis, metaclass=_ExportAnalysisEnumTypeWrapper):
        pass

    NaturalFreq: ExportFEAModelRequest.ExportAnalysis.ValueType = ...  # 0
    """Natural Frequency Analysis."""

    HarmonicVibe: ExportFEAModelRequest.ExportAnalysis.ValueType = ...  # 1
    """Harmonic Vibe Analysis."""

    ICTAnalysis: ExportFEAModelRequest.ExportAnalysis.ValueType = ...  # 2
    """ICT Analysis."""

    MechanicalShock: ExportFEAModelRequest.ExportAnalysis.ValueType = ...  # 3
    """Mechanical Shock Analysis."""

    RandomVibe: ExportFEAModelRequest.ExportAnalysis.ValueType = ...  # 4
    """Random Vibe Analysis."""


    class DrillHoleParam(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class MinHoleDiameter(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            VALUE_FIELD_NUMBER: builtins.int
            UNIT_FIELD_NUMBER: builtins.int
            value: builtins.float = ...
            """Minimum hole diameter value."""

            unit: typing.Text = ...
            """Minimum hole diameter unit."""

            def __init__(self,
                *,
                value : builtins.float = ...,
                unit : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["unit",b"unit","value",b"value"]) -> None: ...

        class MaxEdgeLength(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            VALUE_FIELD_NUMBER: builtins.int
            UNIT_FIELD_NUMBER: builtins.int
            value: builtins.float = ...
            """Maximum edge length value."""

            unit: typing.Text = ...
            """Maximum edge length unit."""

            def __init__(self,
                *,
                value : builtins.float = ...,
                unit : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["unit",b"unit","value",b"value"]) -> None: ...

        DRILLHOLEMODELING_FIELD_NUMBER: builtins.int
        MINHOLEDIAMETER_FIELD_NUMBER: builtins.int
        MAXEDGELENGTH_FIELD_NUMBER: builtins.int
        drillHoleModeling: typing.Text = ...
        """Enables or disables drill hole modeling, valid values are ENABLED/enabled or DISABLED/disabled."""

        @property
        def minHoleDiameter(self) -> global___ExportFEAModelRequest.DrillHoleParam.MinHoleDiameter:
            """	Minimum hole diameter info for a drill hole."""
            pass
        @property
        def maxEdgeLength(self) -> global___ExportFEAModelRequest.DrillHoleParam.MaxEdgeLength:
            """Maximum edge length info for a drill hole."""
            pass
        def __init__(self,
            *,
            drillHoleModeling : typing.Text = ...,
            minHoleDiameter : typing.Optional[global___ExportFEAModelRequest.DrillHoleParam.MinHoleDiameter] = ...,
            maxEdgeLength : typing.Optional[global___ExportFEAModelRequest.DrillHoleParam.MaxEdgeLength] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["maxEdgeLength",b"maxEdgeLength","minHoleDiameter",b"minHoleDiameter"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["drillHoleModeling",b"drillHoleModeling","maxEdgeLength",b"maxEdgeLength","minHoleDiameter",b"minHoleDiameter"]) -> None: ...

    class LeadModelParam(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class MaxMeshSize(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            VALUE_FIELD_NUMBER: builtins.int
            UNIT_FIELD_NUMBER: builtins.int
            value: builtins.float = ...
            """Max mesh size value."""

            unit: typing.Text = ...
            """Max mesh size unit."""

            def __init__(self,
                *,
                value : builtins.float = ...,
                unit : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["unit",b"unit","value",b"value"]) -> None: ...

        class VerticalMeshSize(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            VALUE_FIELD_NUMBER: builtins.int
            UNIT_FIELD_NUMBER: builtins.int
            value: builtins.float = ...
            """Vertical mesh size value."""

            unit: typing.Text = ...
            """Vertical mesh size unit."""

            def __init__(self,
                *,
                value : builtins.float = ...,
                unit : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["unit",b"unit","value",b"value"]) -> None: ...

        LEADMODELING_FIELD_NUMBER: builtins.int
        LEADELEMORDER_FIELD_NUMBER: builtins.int
        MAXMESHSIZE_FIELD_NUMBER: builtins.int
        VERTICALMESHSIZE_FIELD_NUMBER: builtins.int
        THICKNESSCOUNT_FIELD_NUMBER: builtins.int
        ASPECTRATIO_FIELD_NUMBER: builtins.int
        leadModeling: typing.Text = ...
        """Enables or disables lead modeling, valid values are ENABLED/enabled or DISABLED/disabled."""

        leadElemOrder: typing.Text = ...
        """Element order, valid values are "First Order (Linear)", "Second Order (Quadratic)", or "Solid Shell"."""

        @property
        def maxMeshSize(self) -> global___ExportFEAModelRequest.LeadModelParam.MaxMeshSize:
            """Max mesh size info for a lead model param."""
            pass
        @property
        def verticalMeshSize(self) -> global___ExportFEAModelRequest.LeadModelParam.VerticalMeshSize:
            """Vertical mesh size info for a lead model param."""
            pass
        thicknessCount: builtins.int = ...
        """The number of elements through the lead thickness that will be created per lead."""

        aspectRatio: builtins.int = ...
        """The default value is 3 and the maximum is 5.
        Only used when the advanced lead mesh setting is enabled.

        The aspect ratio is multiplied by the lead thickness divided by the through thickness count to give the lead element height.
        """

        def __init__(self,
            *,
            leadModeling : typing.Text = ...,
            leadElemOrder : typing.Text = ...,
            maxMeshSize : typing.Optional[global___ExportFEAModelRequest.LeadModelParam.MaxMeshSize] = ...,
            verticalMeshSize : typing.Optional[global___ExportFEAModelRequest.LeadModelParam.VerticalMeshSize] = ...,
            thicknessCount : builtins.int = ...,
            aspectRatio : builtins.int = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["maxMeshSize",b"maxMeshSize","verticalMeshSize",b"verticalMeshSize"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["aspectRatio",b"aspectRatio","leadElemOrder",b"leadElemOrder","leadModeling",b"leadModeling","maxMeshSize",b"maxMeshSize","thicknessCount",b"thicknessCount","verticalMeshSize",b"verticalMeshSize"]) -> None: ...

    PROJECT_FIELD_NUMBER: builtins.int
    CCANAME_FIELD_NUMBER: builtins.int
    EXPORTFILE_FIELD_NUMBER: builtins.int
    ANALYSIS_FIELD_NUMBER: builtins.int
    DRILLHOLEPARAM_FIELD_NUMBER: builtins.int
    DETECTLEADMODELING_FIELD_NUMBER: builtins.int
    LEADMODELPARAM_FIELD_NUMBER: builtins.int
    DISPLAYMODEL_FIELD_NUMBER: builtins.int
    CLEARFEADATABASE_FIELD_NUMBER: builtins.int
    USEFEAMODELID_FIELD_NUMBER: builtins.int
    COORDINATEUNITS_FIELD_NUMBER: builtins.int
    project: typing.Text = ...
    """Sherlock project name."""

    ccaName: typing.Text = ...
    """The CCA name."""

    exportFile: typing.Text = ...
    """Full file path to the export file."""

    analysis: global___ExportFEAModelRequest.ExportAnalysis.ValueType = ...
    """The ExportAnalysis enum representing the type of analysis that is being exported."""

    @property
    def drillHoleParam(self) -> global___ExportFEAModelRequest.DrillHoleParam:
        """Drill Holes modeling parameters - Min Hole Diameter and Max. Edge Length. If any of this parameter is provided, drill hole modeling will be enabled."""
        pass
    detectLeadModeling: typing.Text = ...
    """If enabled, automatically enable lead modeling if any part has lead geometry defined, valid values are ENABLED/enabled or DISABLED/disabled."""

    @property
    def leadModelParam(self) -> global___ExportFEAModelRequest.LeadModelParam:
        """Lead modeling parameter."""
        pass
    displayModel: builtins.bool = ...
    """Display model after export."""

    clearFEADatabase: builtins.bool = ...
    """Clear FEA Database before defining model."""

    useFEAModelID: builtins.bool = ...
    """Use FEA Model ID."""

    coordinateUnits: typing.Text = ...
    """Units of exported model coordinates, valid values are "in", "mm", "m", "mil", "micron", "nm"."""

    def __init__(self,
        *,
        project : typing.Text = ...,
        ccaName : typing.Text = ...,
        exportFile : typing.Text = ...,
        analysis : global___ExportFEAModelRequest.ExportAnalysis.ValueType = ...,
        drillHoleParam : typing.Optional[global___ExportFEAModelRequest.DrillHoleParam] = ...,
        detectLeadModeling : typing.Text = ...,
        leadModelParam : typing.Optional[global___ExportFEAModelRequest.LeadModelParam] = ...,
        displayModel : builtins.bool = ...,
        clearFEADatabase : builtins.bool = ...,
        useFEAModelID : builtins.bool = ...,
        coordinateUnits : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["drillHoleParam",b"drillHoleParam","leadModelParam",b"leadModelParam"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["analysis",b"analysis","ccaName",b"ccaName","clearFEADatabase",b"clearFEADatabase","coordinateUnits",b"coordinateUnits","detectLeadModeling",b"detectLeadModeling","displayModel",b"displayModel","drillHoleParam",b"drillHoleParam","exportFile",b"exportFile","leadModelParam",b"leadModelParam","project",b"project","useFEAModelID",b"useFEAModelID"]) -> None: ...
global___ExportFEAModelRequest = ExportFEAModelRequest

class ExportTraceReinforcementModelRequest(google.protobuf.message.Message):
    """*
    Request to export a trace reinforcement model.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class TraceParam(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class DiameterThreshold(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            VALUE_FIELD_NUMBER: builtins.int
            UNIT_FIELD_NUMBER: builtins.int
            value: builtins.float = ...
            """Diameter threshold value."""

            unit: typing.Text = ...
            """Diameter threshold unit."""

            def __init__(self,
                *,
                value : builtins.float = ...,
                unit : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["unit",b"unit","value",b"value"]) -> None: ...

        class MinHoleDiameterForShellOrBeam(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            VALUE_FIELD_NUMBER: builtins.int
            UNIT_FIELD_NUMBER: builtins.int
            value: builtins.float = ...
            """Min. hole diameter value for Shell/Beam."""

            unit: typing.Text = ...
            """Min. hole diameter unit for Shell/Beam."""

            def __init__(self,
                *,
                value : builtins.float = ...,
                unit : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["unit",b"unit","value",b"value"]) -> None: ...

        DIAMETERTHRESHOLD_FIELD_NUMBER: builtins.int
        MINHOLEDIAMETERFORSHELLORBEAM_FIELD_NUMBER: builtins.int
        @property
        def diameterThreshold(self) -> global___ExportTraceReinforcementModelRequest.TraceParam.DiameterThreshold:
            """Diameter threshold info for a trace parameter."""
            pass
        @property
        def minHoleDiameterForShellOrBeam(self) -> global___ExportTraceReinforcementModelRequest.TraceParam.MinHoleDiameterForShellOrBeam:
            """Minimum hole diameter info for Shell or Beam for a trace parameter."""
            pass
        def __init__(self,
            *,
            diameterThreshold : typing.Optional[global___ExportTraceReinforcementModelRequest.TraceParam.DiameterThreshold] = ...,
            minHoleDiameterForShellOrBeam : typing.Optional[global___ExportTraceReinforcementModelRequest.TraceParam.MinHoleDiameterForShellOrBeam] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["diameterThreshold",b"diameterThreshold","minHoleDiameterForShellOrBeam",b"minHoleDiameterForShellOrBeam"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["diameterThreshold",b"diameterThreshold","minHoleDiameterForShellOrBeam",b"minHoleDiameterForShellOrBeam"]) -> None: ...

    class TraceDrillHoleParam(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class MinHoleDiameter(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            VALUE_FIELD_NUMBER: builtins.int
            UNIT_FIELD_NUMBER: builtins.int
            value: builtins.float = ...
            """Minimum hole diameter value."""

            unit: typing.Text = ...
            """Minimum hole diameter unit."""

            def __init__(self,
                *,
                value : builtins.float = ...,
                unit : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["unit",b"unit","value",b"value"]) -> None: ...

        class MaxEdgeLength(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            VALUE_FIELD_NUMBER: builtins.int
            UNIT_FIELD_NUMBER: builtins.int
            value: builtins.float = ...
            """Maximum edge length value."""

            unit: typing.Text = ...
            """Maximum edge length unit."""

            def __init__(self,
                *,
                value : builtins.float = ...,
                unit : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["unit",b"unit","value",b"value"]) -> None: ...

        DRILLHOLEMODELING_FIELD_NUMBER: builtins.int
        MINHOLEDIAMETER_FIELD_NUMBER: builtins.int
        MAXEDGELENGTH_FIELD_NUMBER: builtins.int
        drillHoleModeling: typing.Text = ...
        """Enables or disables drill hole modeling, valid values are ENABLED/enabled or DISABLED/disabled."""

        @property
        def minHoleDiameter(self) -> global___ExportTraceReinforcementModelRequest.TraceDrillHoleParam.MinHoleDiameter:
            """Minimum hole diameter info for a trace drill hole param."""
            pass
        @property
        def maxEdgeLength(self) -> global___ExportTraceReinforcementModelRequest.TraceDrillHoleParam.MaxEdgeLength:
            """Maximum edge length info for a trace drill hole param."""
            pass
        def __init__(self,
            *,
            drillHoleModeling : typing.Text = ...,
            minHoleDiameter : typing.Optional[global___ExportTraceReinforcementModelRequest.TraceDrillHoleParam.MinHoleDiameter] = ...,
            maxEdgeLength : typing.Optional[global___ExportTraceReinforcementModelRequest.TraceDrillHoleParam.MaxEdgeLength] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["maxEdgeLength",b"maxEdgeLength","minHoleDiameter",b"minHoleDiameter"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["drillHoleModeling",b"drillHoleModeling","maxEdgeLength",b"maxEdgeLength","minHoleDiameter",b"minHoleDiameter"]) -> None: ...

    PROJECT_FIELD_NUMBER: builtins.int
    CCANAME_FIELD_NUMBER: builtins.int
    EXPORTFILE_FIELD_NUMBER: builtins.int
    OVERWRITE_FIELD_NUMBER: builtins.int
    DISPLAYMODEL_FIELD_NUMBER: builtins.int
    CLEARFEADATABASE_FIELD_NUMBER: builtins.int
    GENERATEMODELSFORALLLAYERS_FIELD_NUMBER: builtins.int
    TRACEPARAM_FIELD_NUMBER: builtins.int
    TRACEDRILLHOLEPARAM_FIELD_NUMBER: builtins.int
    DRILLHOLEMODELING_FIELD_NUMBER: builtins.int
    COORDINATEUNITS_FIELD_NUMBER: builtins.int
    project: typing.Text = ...
    """Sherlock project name."""

    ccaName: typing.Text = ...
    """The CCA name."""

    exportFile: typing.Text = ...
    """Full file path to the trace reinforcement export file."""

    overwrite: builtins.bool = ...
    """Overwrite existing file if true."""

    displayModel: builtins.bool = ...
    """Display model after export if true."""

    clearFEADatabase: builtins.bool = ...
    """Clear FEA Database before defining model if true."""

    generateModelsForAllLayers: builtins.bool = ...
    """Generate models for all layers."""

    @property
    def traceParam(self) -> global___ExportTraceReinforcementModelRequest.TraceParam:
        """Trace properties (Diameter Threshold and Minimum Hole Diameter for Shell/Beam)."""
        pass
    @property
    def traceDrillHoleParam(self) -> global___ExportTraceReinforcementModelRequest.TraceDrillHoleParam:
        """Drill Holes modeling parameters - Min Hole Diameter and Max. Edge Length. If any of this parameter is provided, drill hole modeling will be enabled."""
        pass
    @property
    def drillHoleModeling(self) -> global___DrillHoleModeling:
        """Properties used for exporting drill holes."""
        pass
    coordinateUnits: typing.Text = ...
    """Units of exported model coordinates, valid values are "in", "mm", "m", "mil", "micron", "nm"."""

    def __init__(self,
        *,
        project : typing.Text = ...,
        ccaName : typing.Text = ...,
        exportFile : typing.Text = ...,
        overwrite : builtins.bool = ...,
        displayModel : builtins.bool = ...,
        clearFEADatabase : builtins.bool = ...,
        generateModelsForAllLayers : builtins.bool = ...,
        traceParam : typing.Optional[global___ExportTraceReinforcementModelRequest.TraceParam] = ...,
        traceDrillHoleParam : typing.Optional[global___ExportTraceReinforcementModelRequest.TraceDrillHoleParam] = ...,
        drillHoleModeling : typing.Optional[global___DrillHoleModeling] = ...,
        coordinateUnits : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["drillHoleModeling",b"drillHoleModeling","drillHoleParams",b"drillHoleParams","traceDrillHoleParam",b"traceDrillHoleParam","traceParam",b"traceParam"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ccaName",b"ccaName","clearFEADatabase",b"clearFEADatabase","coordinateUnits",b"coordinateUnits","displayModel",b"displayModel","drillHoleModeling",b"drillHoleModeling","drillHoleParams",b"drillHoleParams","exportFile",b"exportFile","generateModelsForAllLayers",b"generateModelsForAllLayers","overwrite",b"overwrite","project",b"project","traceDrillHoleParam",b"traceDrillHoleParam","traceParam",b"traceParam"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["drillHoleParams",b"drillHoleParams"]) -> typing.Optional[typing_extensions.Literal["traceDrillHoleParam","drillHoleModeling"]]: ...
global___ExportTraceReinforcementModelRequest = ExportTraceReinforcementModelRequest

class GenerateTraceModelRequest(google.protobuf.message.Message):
    """*
    Request to generate a trace model.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_FIELD_NUMBER: builtins.int
    CCANAME_FIELD_NUMBER: builtins.int
    COPPERLAYERNAME_FIELD_NUMBER: builtins.int
    MAXARCSEGMENT_FIELD_NUMBER: builtins.int
    MAXARCSEGMENTUNITS_FIELD_NUMBER: builtins.int
    MINTRACEAREA_FIELD_NUMBER: builtins.int
    MINTRACEAREAUNITS_FIELD_NUMBER: builtins.int
    MINHOLEAREA_FIELD_NUMBER: builtins.int
    MINHOLEAREAUNITS_FIELD_NUMBER: builtins.int
    USESNAPSHOTFORNONIMAGELAYER_FIELD_NUMBER: builtins.int
    project: typing.Text = ...
    """Sherlock project name."""

    ccaName: typing.Text = ...
    """The CCA name. If left empty, trace models will be generated for all CCAs and all of their copper layers."""

    copperLayerName: typing.Text = ...
    """Copper layer from which to generate the trace model. If left empty, trace models will be generated for all copper layers."""

    maxArcSegment: builtins.float = ...
    """Max arc segment."""

    maxArcSegmentUnits: typing.Text = ...
    """Max arc segment units."""

    minTraceArea: builtins.float = ...
    """Min trace area."""

    minTraceAreaUnits: typing.Text = ...
    """Min trace area units."""

    minHoleArea: builtins.float = ...
    """Min hole area."""

    minHoleAreaUnits: typing.Text = ...
    """Min hole area units."""

    useSnapshotForNonImageLayer: builtins.bool = ...
    """Use an image to generate the trace model for layers that are not image layers. If a snapshot image exists for the layer, that snapshot is used. Otherwise this creates an image that is identical to creating a snapshot."""

    def __init__(self,
        *,
        project : typing.Text = ...,
        ccaName : typing.Text = ...,
        copperLayerName : typing.Text = ...,
        maxArcSegment : builtins.float = ...,
        maxArcSegmentUnits : typing.Text = ...,
        minTraceArea : builtins.float = ...,
        minTraceAreaUnits : typing.Text = ...,
        minHoleArea : builtins.float = ...,
        minHoleAreaUnits : typing.Text = ...,
        useSnapshotForNonImageLayer : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ccaName",b"ccaName","copperLayerName",b"copperLayerName","maxArcSegment",b"maxArcSegment","maxArcSegmentUnits",b"maxArcSegmentUnits","minHoleArea",b"minHoleArea","minHoleAreaUnits",b"minHoleAreaUnits","minTraceArea",b"minTraceArea","minTraceAreaUnits",b"minTraceAreaUnits","project",b"project","useSnapshotForNonImageLayer",b"useSnapshotForNonImageLayer"]) -> None: ...
global___GenerateTraceModelRequest = GenerateTraceModelRequest

class DrillHoleModeling(google.protobuf.message.Message):
    """*
    Drill hole properties used for exporting trace models.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DRILLHOLEMODELINGENABLED_FIELD_NUMBER: builtins.int
    MINHOLEDIAMETER_FIELD_NUMBER: builtins.int
    MAXEDGELENGTH_FIELD_NUMBER: builtins.int
    drillHoleModelingEnabled: builtins.bool = ...
    """Determines if drill holes will be included in the exported model."""

    @property
    def minHoleDiameter(self) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.Measurement:
        """All drill holes with a diameter less than this will not be included in the exported model."""
        pass
    @property
    def maxEdgeLength(self) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.Measurement:
        """Set this to 0 to include all drill holes.
        Specifies the size of the segments used to represent round drill holes by a polygon.
        """
        pass
    def __init__(self,
        *,
        drillHoleModelingEnabled : builtins.bool = ...,
        minHoleDiameter : typing.Optional[ansys.api.sherlock.v0.SherlockCommonService_pb2.Measurement] = ...,
        maxEdgeLength : typing.Optional[ansys.api.sherlock.v0.SherlockCommonService_pb2.Measurement] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["maxEdgeLength",b"maxEdgeLength","minHoleDiameter",b"minHoleDiameter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["drillHoleModelingEnabled",b"drillHoleModelingEnabled","maxEdgeLength",b"maxEdgeLength","minHoleDiameter",b"minHoleDiameter"]) -> None: ...
global___DrillHoleModeling = DrillHoleModeling

class ExportTraceModelRequest(google.protobuf.message.Message):
    """*
    Request to export one or many trace models.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TRACEMODELEXPORTPARAMS_FIELD_NUMBER: builtins.int
    @property
    def traceModelExportParams(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TraceModelExportParams]:
        """Parameters for a single trace model export."""
        pass
    def __init__(self,
        *,
        traceModelExportParams : typing.Optional[typing.Iterable[global___TraceModelExportParams]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["traceModelExportParams",b"traceModelExportParams"]) -> None: ...
global___ExportTraceModelRequest = ExportTraceModelRequest

class TraceModelExportParams(google.protobuf.message.Message):
    """*
    All parameters required to export a trace model.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class PcbMeshPropParam(google.protobuf.message.Message):
        """
        Mesh properties used for exporting trace models.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        MESHTYPE_FIELD_NUMBER: builtins.int
        ISMODELINGREGIONENABLED_FIELD_NUMBER: builtins.int
        meshType: global___MeshType.ValueType = ...
        """Options of different trace meshing strategies. The options available depend on export file type."""

        isModelingRegionEnabled: builtins.bool = ...
        """Determines if pre-defined modeling regions will be applied to the exported trace model."""

        def __init__(self,
            *,
            meshType : global___MeshType.ValueType = ...,
            isModelingRegionEnabled : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["isModelingRegionEnabled",b"isModelingRegionEnabled","meshType",b"meshType"]) -> None: ...

    class TracePropParam(google.protobuf.message.Message):
        """*
        Trace properties used for exporting trace models.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        TRACEOUTPUTS_FIELD_NUMBER: builtins.int
        ELEMENTORDER_FIELD_NUMBER: builtins.int
        MAXMESHSIZE_FIELD_NUMBER: builtins.int
        MAXHOLESPERTRACE_FIELD_NUMBER: builtins.int
        traceOutputs: global___TraceOutputType.ValueType = ...
        """Options to select which trace regions to include in the 3D model."""

        elementOrder: ansys.api.sherlock.v0.SherlockAnalysisService_pb2.ElementOrder.ValueType = ...
        """Type of FEA element to be used when modeling each component (First/linear, Second/quadratic, Solid Shell)."""

        @property
        def maxMeshSize(self) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.Measurement:
            """Value passed to FEA meshing tool to indicate the desired element sizes."""
            pass
        maxHolesPerTrace: builtins.int = ...
        """Maximum number of holes allowed in a trace before partitioning it into multiple traces."""

        def __init__(self,
            *,
            traceOutputs : global___TraceOutputType.ValueType = ...,
            elementOrder : ansys.api.sherlock.v0.SherlockAnalysisService_pb2.ElementOrder.ValueType = ...,
            maxMeshSize : typing.Optional[ansys.api.sherlock.v0.SherlockCommonService_pb2.Measurement] = ...,
            maxHolesPerTrace : builtins.int = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["maxMeshSize",b"maxMeshSize"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["elementOrder",b"elementOrder","maxHolesPerTrace",b"maxHolesPerTrace","maxMeshSize",b"maxMeshSize","traceOutputs",b"traceOutputs"]) -> None: ...

    PROJECT_FIELD_NUMBER: builtins.int
    CCANAME_FIELD_NUMBER: builtins.int
    FILEPATH_FIELD_NUMBER: builtins.int
    COPPERLAYERNAME_FIELD_NUMBER: builtins.int
    OVERWRITEEXISTINGFILE_FIELD_NUMBER: builtins.int
    DISPLAYMODELAFTEREXPORT_FIELD_NUMBER: builtins.int
    CLEARFEADATABASE_FIELD_NUMBER: builtins.int
    USEFEAMODELID_FIELD_NUMBER: builtins.int
    COORDUNITS_FIELD_NUMBER: builtins.int
    PCBMESHPROPPARAM_FIELD_NUMBER: builtins.int
    TRACEPROPPARAM_FIELD_NUMBER: builtins.int
    DRILLHOLEMODELING_FIELD_NUMBER: builtins.int
    project: typing.Text = ...
    """Sherlock project name."""

    ccaName: typing.Text = ...
    """Sherlock CCA name."""

    filePath: typing.Text = ...
    """Full file path to the trace export file."""

    copperLayerName: typing.Text = ...
    """Name of the layer in the CCA to export."""

    overwriteExistingFile: builtins.bool = ...
    """Option that determines if any existing files get overwritten."""

    displayModelAfterExport: builtins.bool = ...
    """Option to display the model after the export is done."""

    clearFEADatabase: builtins.bool = ...
    """Clears FEA Database. Applicable for .apdl, and .cdb. This will be set to false if it is omitted for applicable file types."""

    useFEAModelID: builtins.bool = ...
    """Use FEA Model ID."""

    coordUnits: typing.Text = ...
    """Units of the coordinate system. Applicable to .py .wbjn, and .stp/.step. This will be set to mm if omitted for applicable file types."""

    @property
    def pcbMeshPropParam(self) -> global___TraceModelExportParams.PcbMeshPropParam:
        """Properties used for exporting PCB mesh."""
        pass
    @property
    def tracePropParam(self) -> global___TraceModelExportParams.TracePropParam:
        """Properties used for exporting the traces."""
        pass
    @property
    def drillHoleModeling(self) -> global___DrillHoleModeling:
        """Properties used for exporting drill holes."""
        pass
    def __init__(self,
        *,
        project : typing.Text = ...,
        ccaName : typing.Text = ...,
        filePath : typing.Text = ...,
        copperLayerName : typing.Text = ...,
        overwriteExistingFile : builtins.bool = ...,
        displayModelAfterExport : builtins.bool = ...,
        clearFEADatabase : typing.Optional[builtins.bool] = ...,
        useFEAModelID : builtins.bool = ...,
        coordUnits : typing.Optional[typing.Text] = ...,
        pcbMeshPropParam : typing.Optional[global___TraceModelExportParams.PcbMeshPropParam] = ...,
        tracePropParam : typing.Optional[global___TraceModelExportParams.TracePropParam] = ...,
        drillHoleModeling : typing.Optional[global___DrillHoleModeling] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_clearFEADatabase",b"_clearFEADatabase","_coordUnits",b"_coordUnits","clearFEADatabase",b"clearFEADatabase","coordUnits",b"coordUnits","drillHoleModeling",b"drillHoleModeling","pcbMeshPropParam",b"pcbMeshPropParam","tracePropParam",b"tracePropParam"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_clearFEADatabase",b"_clearFEADatabase","_coordUnits",b"_coordUnits","ccaName",b"ccaName","clearFEADatabase",b"clearFEADatabase","coordUnits",b"coordUnits","copperLayerName",b"copperLayerName","displayModelAfterExport",b"displayModelAfterExport","drillHoleModeling",b"drillHoleModeling","filePath",b"filePath","overwriteExistingFile",b"overwriteExistingFile","pcbMeshPropParam",b"pcbMeshPropParam","project",b"project","tracePropParam",b"tracePropParam","useFEAModelID",b"useFEAModelID"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_clearFEADatabase",b"_clearFEADatabase"]) -> typing.Optional[typing_extensions.Literal["clearFEADatabase"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_coordUnits",b"_coordUnits"]) -> typing.Optional[typing_extensions.Literal["coordUnits"]]: ...
global___TraceModelExportParams = TraceModelExportParams

class ExportAEDBRequest(google.protobuf.message.Message):
    """*
    Request to export an Electronics Desktop model.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_FIELD_NUMBER: builtins.int
    CCANAME_FIELD_NUMBER: builtins.int
    EXPORTFILE_FIELD_NUMBER: builtins.int
    OVERWRITE_FIELD_NUMBER: builtins.int
    DISPLAYMODEL_FIELD_NUMBER: builtins.int
    project: typing.Text = ...
    """Sherlock project name."""

    ccaName: typing.Text = ...
    """The CCA name."""

    exportFile: typing.Text = ...
    """Full file path to the Electronics Desktop export file."""

    overwrite: builtins.bool = ...
    """Overwrite existing file if true."""

    displayModel: builtins.bool = ...
    """Display model after export if true."""

    def __init__(self,
        *,
        project : typing.Text = ...,
        ccaName : typing.Text = ...,
        exportFile : typing.Text = ...,
        overwrite : builtins.bool = ...,
        displayModel : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ccaName",b"ccaName","displayModel",b"displayModel","exportFile",b"exportFile","overwrite",b"overwrite","project",b"project"]) -> None: ...
global___ExportAEDBRequest = ExportAEDBRequest

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.sherlock.v0.SherlockCommonService_pb2
import ansys.api.sherlock.v0.SherlockProjectService_pb2
import grpc
import typing

class SherlockProjectServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    genReport: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.GenReportRequest,
        ansys.api.sherlock.v0.SherlockProjectService_pb2.GenReportResponse] = ...
    """Generates the project report and return it via streaming."""

    genCCAReport: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.GenCCAReportRequest,
        ansys.api.sherlock.v0.SherlockProjectService_pb2.GenCCAReportResponse] = ...
    """Generates the project CCA report and return it via streaming."""

    importODBArchive: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportODBRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Imports an ODB++ archive."""

    importIPC2581Archive: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportIPC2581Request,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Imports an IPC-2581 archive."""

    importProjectZipArchive: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportProjectZipRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Imports a zipped project archive -- multiple project mode."""

    importProjectZipArchiveSingleMode: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportProjectZipSingleModeRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Imports a zipped project archive -- single project mode."""

    importGDSIIFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportGDSIIRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Imports a GDSII project file and any optional config file."""

    deleteProject: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.DeleteProjectRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Delete a project from Sherlock."""

    addStrainMap: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.AddStrainMapRequest,
        ansys.api.sherlock.v0.SherlockProjectService_pb2.AddStrainMapResponse] = ...
    """Add a strain map files to a Sherlock project."""

    listStrainMaps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ListStrainMapsRequest,
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ListStrainMapsResponse] = ...
    """Returns a list of circuit cards and their assigned strain maps for a given Sherlock project."""

    listCCAs: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ListCCAsRequest,
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ListCCAsResponse] = ...
    """Returns a list of circuit cards, their properties, and sub-assemblies for a given Sherlock project."""

    addProject: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.AddProjectRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Add a project to Sherlock."""

    addCCA: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.AddCcaRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Creates a new circuit card assembly."""

    listThermalMaps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ListThermalMapsRequest,
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ListThermalMapsResponse] = ...
    """Returns a list of thermal map files and their types for a given Sherlock project."""

    updateThermalMaps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.UpdateThermalMapRequest,
        ansys.api.sherlock.v0.SherlockProjectService_pb2.UpdateThermalMapsResponse] = ...
    """Update thermal map files to a Sherlock project."""

    addThermalMaps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.AddThermalMapRequest,
        ansys.api.sherlock.v0.SherlockProjectService_pb2.AddThermalMapResponse] = ...
    """Add a thermal map to a Sherlock project."""

    exportProject: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ExportProjectRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Exports project to a zipped archive file."""

    createCCAFromModelingRegion: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.CreateCcaFromModelingRegionRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Creates a CCA from a given modeling region"""

    addOutlineFiles: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.AddOutlineFileRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Add outline files to Sherlock project CCA's."""

    importCopperFiles: grpc.UnaryStreamMultiCallable[
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportCopperFilesRequest,
        ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportCopperFilesResponse] = ...
    """Import copper files to a Sherlock project."""


class SherlockProjectServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def genReport(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.GenReportRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockProjectService_pb2.GenReportResponse]:
        """Generates the project report and return it via streaming."""
        pass

    @abc.abstractmethod
    def genCCAReport(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.GenCCAReportRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockProjectService_pb2.GenCCAReportResponse]:
        """Generates the project CCA report and return it via streaming."""
        pass

    @abc.abstractmethod
    def importODBArchive(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportODBRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Imports an ODB++ archive."""
        pass

    @abc.abstractmethod
    def importIPC2581Archive(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportIPC2581Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Imports an IPC-2581 archive."""
        pass

    @abc.abstractmethod
    def importProjectZipArchive(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportProjectZipRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Imports a zipped project archive -- multiple project mode."""
        pass

    @abc.abstractmethod
    def importProjectZipArchiveSingleMode(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportProjectZipSingleModeRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Imports a zipped project archive -- single project mode."""
        pass

    @abc.abstractmethod
    def importGDSIIFile(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportGDSIIRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Imports a GDSII project file and any optional config file."""
        pass

    @abc.abstractmethod
    def deleteProject(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.DeleteProjectRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Delete a project from Sherlock."""
        pass

    @abc.abstractmethod
    def addStrainMap(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.AddStrainMapRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockProjectService_pb2.AddStrainMapResponse:
        """Add a strain map files to a Sherlock project."""
        pass

    @abc.abstractmethod
    def listStrainMaps(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.ListStrainMapsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockProjectService_pb2.ListStrainMapsResponse:
        """Returns a list of circuit cards and their assigned strain maps for a given Sherlock project."""
        pass

    @abc.abstractmethod
    def listCCAs(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.ListCCAsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockProjectService_pb2.ListCCAsResponse:
        """Returns a list of circuit cards, their properties, and sub-assemblies for a given Sherlock project."""
        pass

    @abc.abstractmethod
    def addProject(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.AddProjectRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Add a project to Sherlock."""
        pass

    @abc.abstractmethod
    def addCCA(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.AddCcaRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Creates a new circuit card assembly."""
        pass

    @abc.abstractmethod
    def listThermalMaps(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.ListThermalMapsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockProjectService_pb2.ListThermalMapsResponse:
        """Returns a list of thermal map files and their types for a given Sherlock project."""
        pass

    @abc.abstractmethod
    def updateThermalMaps(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.UpdateThermalMapRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockProjectService_pb2.UpdateThermalMapsResponse:
        """Update thermal map files to a Sherlock project."""
        pass

    @abc.abstractmethod
    def addThermalMaps(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.AddThermalMapRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockProjectService_pb2.AddThermalMapResponse:
        """Add a thermal map to a Sherlock project."""
        pass

    @abc.abstractmethod
    def exportProject(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.ExportProjectRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Exports project to a zipped archive file."""
        pass

    @abc.abstractmethod
    def createCCAFromModelingRegion(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.CreateCcaFromModelingRegionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Creates a CCA from a given modeling region"""
        pass

    @abc.abstractmethod
    def addOutlineFiles(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.AddOutlineFileRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode]:
        """Add outline files to Sherlock project CCA's."""
        pass

    @abc.abstractmethod
    def importCopperFiles(self,
        request: ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportCopperFilesRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.sherlock.v0.SherlockProjectService_pb2.ImportCopperFilesResponse]:
        """Import copper files to a Sherlock project."""
        pass


def add_SherlockProjectServiceServicer_to_server(servicer: SherlockProjectServiceServicer, server: grpc.Server) -> None: ...

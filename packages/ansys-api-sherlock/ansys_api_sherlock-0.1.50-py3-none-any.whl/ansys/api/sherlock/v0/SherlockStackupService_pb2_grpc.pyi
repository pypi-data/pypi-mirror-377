"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.sherlock.v0.SherlockCommonService_pb2
import ansys.api.sherlock.v0.SherlockStackupService_pb2
import grpc

class SherlockStackupServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    listLaminates: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminatesRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminatesResponse] = ...
    """Returns a list of project's CCAs and their laminates."""

    updateLaminate: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.UpdateLaminateRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Update properties for a given laminate layer."""

    listLaminateThicknessUnits: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateThicknessUnitsRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateThicknessUnitsResponse] = ...
    """List all the supported laminate layer thickness units."""

    listConductorMaterials: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConductorMaterialsRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConductorMaterialsResponse] = ...
    """List all conductor materials."""

    listFiberMaterials: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListFiberMaterialsRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListFiberMaterialsResponse] = ...
    """List all fiber materials."""

    listLaminateMaterialsManufacturers: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateMaterialsManufacturersRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateMaterialsManufacturersResponse] = ...
    """List all laminate materials manufacturers."""

    listLaminateMaterials: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateMaterialsRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateMaterialsResponse] = ...
    """List all laminate materials (both based on manufacturer specified or without).
    If manufacturer is empty or not provided, then all manufacturers and their laminate materials will be returned.
    If a manufacturer is provided, then only that manufacturer's laminate materials will be returned.
    """

    listConstructionStyles: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConstructionStylesRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConstructionStylesResponse] = ...
    """List all construction styles."""

    listConductorLayers: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConductorLayersRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConductorLayersResponse] = ...
    """Returns a list of project's CCAs and their conductor layers."""

    updateConductorLayer: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.UpdateConductorLayerRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Update properties for a given conductor layer."""

    getLayerCount: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.GetLayerCountRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.GetLayerCountResponse] = ...
    """Returns the number of stackup layers."""

    getTotalConductorThickness: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.GetTotalConductorThicknessRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.GetTotalConductorThicknessResponse] = ...
    """Returns the total thickness for all conductor layers."""

    getStackupProps: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.GetStackupPropsRequest,
        ansys.api.sherlock.v0.SherlockStackupService_pb2.GetStackupPropsResponse] = ...
    """Returns a summary of the stackup properties."""

    genStackup: grpc.UnaryUnaryMultiCallable[
        ansys.api.sherlock.v0.SherlockStackupService_pb2.GenStackupRequest,
        ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode] = ...
    """Generate stackup layers."""


class SherlockStackupServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def listLaminates(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminatesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminatesResponse:
        """Returns a list of project's CCAs and their laminates."""
        pass

    @abc.abstractmethod
    def updateLaminate(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.UpdateLaminateRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Update properties for a given laminate layer."""
        pass

    @abc.abstractmethod
    def listLaminateThicknessUnits(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateThicknessUnitsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateThicknessUnitsResponse:
        """List all the supported laminate layer thickness units."""
        pass

    @abc.abstractmethod
    def listConductorMaterials(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConductorMaterialsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConductorMaterialsResponse:
        """List all conductor materials."""
        pass

    @abc.abstractmethod
    def listFiberMaterials(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.ListFiberMaterialsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.ListFiberMaterialsResponse:
        """List all fiber materials."""
        pass

    @abc.abstractmethod
    def listLaminateMaterialsManufacturers(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateMaterialsManufacturersRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateMaterialsManufacturersResponse:
        """List all laminate materials manufacturers."""
        pass

    @abc.abstractmethod
    def listLaminateMaterials(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateMaterialsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.ListLaminateMaterialsResponse:
        """List all laminate materials (both based on manufacturer specified or without).
        If manufacturer is empty or not provided, then all manufacturers and their laminate materials will be returned.
        If a manufacturer is provided, then only that manufacturer's laminate materials will be returned.
        """
        pass

    @abc.abstractmethod
    def listConstructionStyles(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConstructionStylesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConstructionStylesResponse:
        """List all construction styles."""
        pass

    @abc.abstractmethod
    def listConductorLayers(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConductorLayersRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.ListConductorLayersResponse:
        """Returns a list of project's CCAs and their conductor layers."""
        pass

    @abc.abstractmethod
    def updateConductorLayer(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.UpdateConductorLayerRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Update properties for a given conductor layer."""
        pass

    @abc.abstractmethod
    def getLayerCount(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.GetLayerCountRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.GetLayerCountResponse:
        """Returns the number of stackup layers."""
        pass

    @abc.abstractmethod
    def getTotalConductorThickness(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.GetTotalConductorThicknessRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.GetTotalConductorThicknessResponse:
        """Returns the total thickness for all conductor layers."""
        pass

    @abc.abstractmethod
    def getStackupProps(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.GetStackupPropsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockStackupService_pb2.GetStackupPropsResponse:
        """Returns a summary of the stackup properties."""
        pass

    @abc.abstractmethod
    def genStackup(self,
        request: ansys.api.sherlock.v0.SherlockStackupService_pb2.GenStackupRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.sherlock.v0.SherlockCommonService_pb2.ReturnCode:
        """Generate stackup layers."""
        pass


def add_SherlockStackupServiceServicer_to_server(servicer: SherlockStackupServiceServicer, server: grpc.Server) -> None: ...

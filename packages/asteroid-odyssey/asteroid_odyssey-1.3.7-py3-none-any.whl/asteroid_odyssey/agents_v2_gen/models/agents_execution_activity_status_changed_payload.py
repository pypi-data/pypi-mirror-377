# coding: utf-8

"""
    Agent Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from asteroid_odyssey.agents_v2_gen.models.agents_execution_awaiting_confirmation_payload import AgentsExecutionAwaitingConfirmationPayload
from asteroid_odyssey.agents_v2_gen.models.agents_execution_cancelled_payload import AgentsExecutionCancelledPayload
from asteroid_odyssey.agents_v2_gen.models.agents_execution_completed_payload import AgentsExecutionCompletedPayload
from asteroid_odyssey.agents_v2_gen.models.agents_execution_failed_payload import AgentsExecutionFailedPayload
from asteroid_odyssey.agents_v2_gen.models.agents_execution_paused_payload import AgentsExecutionPausedPayload
from asteroid_odyssey.agents_v2_gen.models.agents_execution_status import AgentsExecutionStatus
from typing import Optional, Set
from typing_extensions import Self

class AgentsExecutionActivityStatusChangedPayload(BaseModel):
    """
    AgentsExecutionActivityStatusChangedPayload
    """ # noqa: E501
    awaiting_confirmation_payload: Optional[AgentsExecutionAwaitingConfirmationPayload] = Field(default=None, alias="awaitingConfirmationPayload")
    cancelled_payload: Optional[AgentsExecutionCancelledPayload] = Field(default=None, alias="cancelledPayload")
    completed_payload: Optional[AgentsExecutionCompletedPayload] = Field(default=None, alias="completedPayload")
    failed_payload: Optional[AgentsExecutionFailedPayload] = Field(default=None, alias="failedPayload")
    paused_payload: Optional[AgentsExecutionPausedPayload] = Field(default=None, alias="pausedPayload")
    status: AgentsExecutionStatus
    __properties: ClassVar[List[str]] = ["awaitingConfirmationPayload", "cancelledPayload", "completedPayload", "failedPayload", "pausedPayload", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentsExecutionActivityStatusChangedPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of awaiting_confirmation_payload
        if self.awaiting_confirmation_payload:
            _dict['awaitingConfirmationPayload'] = self.awaiting_confirmation_payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cancelled_payload
        if self.cancelled_payload:
            _dict['cancelledPayload'] = self.cancelled_payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of completed_payload
        if self.completed_payload:
            _dict['completedPayload'] = self.completed_payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failed_payload
        if self.failed_payload:
            _dict['failedPayload'] = self.failed_payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of paused_payload
        if self.paused_payload:
            _dict['pausedPayload'] = self.paused_payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentsExecutionActivityStatusChangedPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awaitingConfirmationPayload": AgentsExecutionAwaitingConfirmationPayload.from_dict(obj["awaitingConfirmationPayload"]) if obj.get("awaitingConfirmationPayload") is not None else None,
            "cancelledPayload": AgentsExecutionCancelledPayload.from_dict(obj["cancelledPayload"]) if obj.get("cancelledPayload") is not None else None,
            "completedPayload": AgentsExecutionCompletedPayload.from_dict(obj["completedPayload"]) if obj.get("completedPayload") is not None else None,
            "failedPayload": AgentsExecutionFailedPayload.from_dict(obj["failedPayload"]) if obj.get("failedPayload") is not None else None,
            "pausedPayload": AgentsExecutionPausedPayload.from_dict(obj["pausedPayload"]) if obj.get("pausedPayload") is not None else None,
            "status": obj.get("status")
        })
        return _obj



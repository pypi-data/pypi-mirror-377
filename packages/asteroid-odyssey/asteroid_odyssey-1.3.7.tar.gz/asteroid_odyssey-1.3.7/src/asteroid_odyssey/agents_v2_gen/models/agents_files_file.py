# coding: utf-8

"""
    Agent Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class AgentsFilesFile(BaseModel):
    """
    AgentsFilesFile
    """ # noqa: E501
    agent_id: StrictStr = Field(alias="agentId")
    created_at: datetime = Field(alias="createdAt")
    execution_id: StrictStr = Field(alias="executionId")
    file_ext: StrictStr = Field(alias="fileExt")
    file_name: StrictStr = Field(alias="fileName")
    file_path: StrictStr = Field(alias="filePath")
    file_size: StrictInt = Field(alias="fileSize")
    file_type: StrictStr = Field(alias="fileType")
    id: StrictStr
    mime_type: StrictStr = Field(alias="mimeType")
    signed_url: StrictStr = Field(alias="signedUrl")
    __properties: ClassVar[List[str]] = ["agentId", "createdAt", "executionId", "fileExt", "fileName", "filePath", "fileSize", "fileType", "id", "mimeType", "signedUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentsFilesFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentsFilesFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentId": obj.get("agentId"),
            "createdAt": obj.get("createdAt"),
            "executionId": obj.get("executionId"),
            "fileExt": obj.get("fileExt"),
            "fileName": obj.get("fileName"),
            "filePath": obj.get("filePath"),
            "fileSize": obj.get("fileSize"),
            "fileType": obj.get("fileType"),
            "id": obj.get("id"),
            "mimeType": obj.get("mimeType"),
            "signedUrl": obj.get("signedUrl")
        })
        return _obj



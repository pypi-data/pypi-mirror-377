[project]
name = "asyncly"
version = "0.5.0"
description = "Simple HTTP client and server for your integrations based on aiohttp"
authors = [{ name = "Sergey Natalenko", email = "sergey.natalenko@mail.ru" }]
requires-python = ">=3.10, <4"
readme = "README.rst"
license = "MIT"
keywords = [
    "aiohttp",
    "http",
    "client",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: AsyncIO",
    "Framework :: Pytest",
    "Framework :: aiohttp",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
]
dependencies = ["aiohttp>=3.9.5,<4"]

[project.optional-dependencies]
msgspec = ["msgspec>=0.19.0,<0.20"]
pydantic = ["pydantic>=2.8.2,<3"]
orjson = ["orjson>=3.10.6,<4"]
prometheus = [
    "prometheus-client>=0.22.1",
]
opentelemetry = [
    "opentelemetry-sdk>=1.37.0",
]

[project.urls]
Homepage = "https://github.com/andy-takker/asyncly"
Source = "https://github.com/andy-takker/asyncly"
"Bug Tracker" = "https://github.com/andy-takker/asyncly/issues"

[dependency-groups]
dev = [
    "pre-commit>=3.7.1,<5.0.0",
    "mypy>=1.17.1,<2",
    "ruff>=0.5.2,<0.9.0",
    "restructuredtext-lint>=1.4.0,<2",
    "pygments>=2.18.0,<3",
    "pytest>=8.3.3,<9",
    "pytest-asyncio>=0.24.0,<0.25",
    "pytest-cov>=6.0.0,<7",
    "types-pyyaml>=6.0.12.20250822",
    "types-toml>=0.10.8.20240310",
    "toml>=0.10.2",
]

[tool.hatch.build.targets.sdist]
include = ["asyncly"]

[tool.hatch.build.targets.wheel]
include = ["asyncly"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
asyncio_mode = "auto"
python_files = "test_*"
python_functions = "test_*"
python_classes = "TestSuite*"
addopts = "-p no:cacheprovider"

[tool.coverage.run]
branch = true
source = ["asyncly"]
command_line = "-m pytest"

[tool.coverage.report]
fail_under = 90
show_missing = true
skip_covered = false
skip_empty = true
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == __main__:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "pass",
]

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff]
line-length = 88
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
]
indent-width = 4
target-version = "py310"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
select = [
    "BLE",
    "C90",
    "E",
    "F",
    "G",
    "I",
    "ICN",
    "ISC",
    "PLE",
    "Q",
    "RUF006",
    "RUF100",
    "T10",
    "T20",
    "TID",
    "UP",
    "W",
]
ignore = ["ISC001"]
fixable = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["asyncly", "tests"]

[tool.mypy]
plugins = ["pydantic.mypy"]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true

[[tool.mypy.overrides]]
module = [
    "msgspec.*",
    "orjson.*",
]
ignore_missing_imports = true

[project]
name = "atomworks"
version = "1.0.1"
description = "A research-oriented data toolkit for training biomolecular deep-learning foundation models"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Institute for Protein Design", email = "contact@ipd.uw.edu" }
]
license = { file = "LICENSE.md" }
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "License :: OSI Approved :: BSD License",
]

dependencies = [
    # ... generic tools
    "cython>=3.0.0,<4", # Cython compiler for C extensions
    "cytoolz>=0.12.3,<1", # Cython-optimized tools for itertools and functional programming
    "tqdm>=4.65.0,<5", # Fast, extensible progress bar for loops and more
    # ... CLI & config management
    "typer>=0.12.5,<1", # Modern CLI framework
    # ... linear algebra, maths & ml
    "numpy>=1.25.0,<3",
    "scipy>=1.13.1,<2",
    # ... data tools
    "pandas>=2.2,<2.4", # Data manipulation and analysis
    "pyarrow==17.0.0", # Columnar data format for efficient data storage and processing  # TODO: Test later versions
    # ... bioinformatics
    "py3Dmol>=2.2.1,<3", # Python wrapper for 3Dmol.js
    "pymol-remote>=0.0.5", # Remote access to PyMOL from Python (has no dependencies)
    "biotite>=1.3.0,<2", # Biotite is a Python library for bioinformatics  # TODO: Test newer versions
    "hydride>=1.2.3,<2", # Biotite-supported tool for hydrogen addition
    # ... small molecule libraries
    "rdkit>=2024.3.5,<2025.9",
]

[project.optional-dependencies]
ml = [
    # atomworks-ml dependencies
    "torch>=2.2.0,<2.8",
    "einops>=0.7.0,<1",
]

openbabel = [
    # Optional openbabel dependency
    "openbabel-wheel==3.1.1.22",
]

dev = [
    # Linters & formatters
    "ruff==0.8.3",
    # Testing tools
    "pytest>=8.2.0,<9", # testing framework
    "pytest-testmon>=2.1.1,<3", # run only tests related to changed code
    "pytest-xdist>=3.6.1,<4", # run tests in parallel
    "pytest-dotenv>=0.5.2,<1", # load environment variables from .env file
    "pytest-cov>=4.1.0,<5", # generate coverage report
    "pytest-benchmark>=5.0.0,<6", # benchmark tests for speed
]

docs = [
    "sphinx>=8.0.0,<9",
    "sphinx-gallery>=0.19.0,<1",
    "pydata-sphinx-theme>=0.16.1,<1",
    "matplotlib>=3.10.0,<4",
]

[dependency-groups]
# Reference optional dependencies for native uv compatability (in addition to the pip compatability)
dev = ["atomworks[dev]"]
ml = ["atomworks[ml]"] 
docs = ["atomworks[docs]"]
openbabel = ["atomworks[openbabel]"]

[project.urls]
homepage = "https://rosettacommons.github.io/atomworks/latest/index.html"
repository = "https://github.com/RosettaCommons/atomworks"
documentation = "https://rosettacommons.github.io/atomworks/latest/index.html"

[project.scripts]
atomworks = "atomworks_cli.__main__:main"

# Build settings ----------------------------------------------------------------------
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build]
packages = [
  "src/atomworks",
  "src/atomworks_cli",
]

[tool.hatch.metadata]
allow-direct-references = true
dynamic = false  # optional – this disables dynamic metadata guessing

# Code style settings -----------------------------------------------------------------
[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py312"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "env",
    ".venv",
    "venv",
    "data",
    "dev.py"
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true
docstring-code-line-length = 120

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Enable a comprehensive set of rules for better code quality
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "I",   # isort
    "N",   # pep8-naming
    #"D",   # pydocstyle
    "UP",  # pyupgrade -- use the latest supported python syntax
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "NPY", # fix deprecated numpy functions / types
    "RUF", # Ruff-specific rules
    "T10", # catch accidental debugger breakpoints in code
    "ANN", # type annotations
]

# Ignore specific rules that might conflict with our style or are too strict
ignore = [
    "B006",  # do not use mutable data structures for argument defaults
    "D203",  # 1 blank line required before class docstring
    "D212",  # Multi-line docstring summary should start at the first line
    "D100",  # Missing docstring in public module
    "NPY002",  # replacing legacy np.random.rand wih np.random.Generator
    "E501",  # line too long
    "SIM108",  # Replace if-else blocks
    "ANN002",  # missing annotation for `*args`
    "ANN003",  # missing annotation for `**kwargs`
    "ANN204",  # missing return type annotation for special method `__init__`
    "ANN401",  # disallow `Any` type
]

[tool.ruff.lint.pydocstyle]
convention = "google"

# Add per-file-ignores for specific cases
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py files
"tests/*" = ["D", "E", "RUF", "ANN"]    # Ignore docstring rules in tests
"docs/**/*.py" = ["E402"]               # Ignore forcing imports to be at the top of the file
"docs/**/*.ipynb" = ["E402"]            # Ignore forcing imports to be at the top of the file

# Allow one-letter variable names commonly used in scientific code.
[tool.ruff.lint.pep8-naming]
ignore-names = [
    "L",
    "B",
    "N",
    "M",
    "C",
    "S"
]

# Test settings --------------------------------------------------------------------------------
[tool.pytest.ini_options]
testpaths = "tests"  # Only run tests in the tests directory (speeds up collection)
norecursedirs = "docs *.egg-info .git .tox htmlcov"
addopts = "--import-mode=importlib"
pythonpath = ["src/atomworks", "tests"]
markers = [
    "requires_internet: marks tests that require an internet connection",
    "requires_pymol_remote: marks tests that require a PyMOL remote connection to run",
    "requires_x3dna: marks tests that require X3DNA to run",
    "requires_digs: marks tests that can only succeed on the DIGS infrastructure at the IPD",
    "slow: marks tests that are slow",
]

[tool.coverage.run]
parallel = true
source = ["src/atomworks"]
omit = [
    "src/atomworks/version.py",
    "tests/*",
    "*/__init__.py",
    "setup.py",
    "*/version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

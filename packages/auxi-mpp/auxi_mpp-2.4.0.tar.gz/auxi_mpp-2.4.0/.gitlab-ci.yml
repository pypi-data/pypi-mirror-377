variables:
  UV_VERSION: 0.7
  PYTHON_VERSION: 3.12
  BASE_LAYER: bookworm
  UV_CACHE_DIR: .uv-cache
  GIT_STRATEGY: clone
  GIT_DEPTH: 0

workflow:
  rules:
    # Don't run on semantic-release commits
    - if: $CI_COMMIT_AUTHOR =~ /semantic-release/
      when: never
    # Only run on main/master branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: never

stages:
  - test
  - version
  - publish

image: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER

cache:
  - key:
      files:
        - uv.lock
    paths:
      - $UV_CACHE_DIR

before_script:
  - python --version ; pip --version # For debugging
  - uv --version # For debugging
  - time uv sync

after_script:
  - time uv cache prune --ci

test:
  when: manual # temporarily disable automatic testing due to failing tests; remove this line when fixed
  stage: test
  script:
    - time uv run pytest

version-bump:
  stage: version
  script:
    - git checkout "$CI_COMMIT_REF_NAME"
    - time uv run semantic-release version
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

publish-registry:
  stage: publish
  dependencies:
    - version-bump
  script:
    - >
      if [ -n "$(ls -A dist/)" ]; then
        echo "Deploying to project registry...";
        uv publish --username gitlab-ci-token --password "${CI_JOB_TOKEN}" --publish-url "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi" dist/*;
      else
        echo "No files to deploy.";
      fi

publish-pypi:
  stage: publish
  image: python:3-bookworm
  dependencies:
    - version-bump
  id_tokens:
    PYPI_ID_TOKEN:
      aud: pypi
  before_script:
    - python --version ; pip --version # For debugging
    - python -m pip install -U twine
  script:
    - >
      if [ -n "$(ls -A dist/)" ]; then
        echo "Publishing to PyPI...";
        twine upload dist/*;
      else
        echo "No files to publish.";
      fi
  after_script:
    - echo "Publishing completed."

pages:
  # image: python:3.13
  script:
    # - pip install sphinx sphinx-rtd-theme sphinx-tabs sphinx-design
    - cd doc
    - uv run make html
    - mv _build/html/ ../public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
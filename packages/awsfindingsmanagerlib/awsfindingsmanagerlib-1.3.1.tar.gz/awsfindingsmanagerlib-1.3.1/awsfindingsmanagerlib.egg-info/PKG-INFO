Metadata-Version: 2.4
Name: awsfindingsmanagerlib
Version: 1.3.1
Summary: A library to manage findings in AWS.
Home-page: https://github.com/schubergphilis/awsfindingsmanagerlib.git
Author: Marwin Baumann
Author-email: mbaumann@schubergphilis.com
License: Apache Software License 2.0
Keywords: awsfindingsmanagerlib securityhub findings aws
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.8
License-File: LICENSE
License-File: AUTHORS.rst
Requires-Dist: boto3>=1.40.31; python_version >= "3.9"
Requires-Dist: opnieuw>=3.1.0; python_version >= "3.8"
Requires-Dist: python-dateutil>=2.9.0.post0; python_version >= "2.7" and python_version not in "3.0, 3.1, 3.2"
Requires-Dist: schema~=0.7.7
Requires-Dist: requests~=2.32.5; python_version >= "3.9"
Requires-Dist: pyyaml~=6.0.2; python_version >= "3.8"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: license-file
Dynamic: requires-dist
Dynamic: summary

=====================
awsfindingsmanagerlib
=====================

Automated scanning and finding consolidation is a cornerstone in evaluating your security posture.
AWS Security Hub is the native solution to perform this job in AWS.
As with any scanning and reporting tool, the amount of findings it generates can be overwhelming at first.
Also, you may find that some findings are not relevant or have less urgency to fix in your specific situation.

awsfindingsmanagerlib is a framework designed to automatically manage findings recorded by the AWS Security Hub service including it's `AWS service integrations <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-internal-providers.html#internal-integrations-summary>`_ based on a pre-defined and configurable rules list. 
At its core, awsfindingsmanagerlib aims to reduce noise and help you prioritize real security issues. 
Currently, it supports suppressing findings, ensuring you can manage irrelevant or less urgent findings effectively.

**Documentation: https://awsfindingsmanagerlib.readthedocs.org/en/latest**

Development Workflow
====================

The workflow supports the following steps

 * lint
 * test
 * build
 * document
 * upload
 * graph

These actions are supported out of the box by the corresponding scripts under _CI/scripts directory with sane defaults based on best practices.
Sourcing setup_aliases.ps1 for windows powershell or setup_aliases.sh in bash on Mac or Linux will provide with handy aliases for the shell of all those commands prepended with an underscore.

The bootstrap script creates a .venv directory inside the project directory hosting the virtual environment. It uses pipenv for that.
It is called by all other scripts before they do anything. So one could simple start by calling _lint and that would set up everything before it tried to actually lint the project

Once the code is ready to be delivered the _tag script should be called accepting one of three arguments, patch, minor, major following the semantic versioning scheme.
So for the initial delivery one would call

    $ _tag --minor

which would bump the version of the project to 0.1.0 tag it in git and do a push and also ask for the change and automagically update HISTORY.rst with the version and the change provided.


So the full workflow after git is initialized is:

 * repeat as necessary (of course it could be test - code - lint :) )

   * code
   * lint
   * test
 * commit and push
 * develop more through the code-lint-test cycle
 * tag (with the appropriate argument)
 * build
 * upload (if you want to host your package in pypi)
 * document (of course this could be run at any point)


Important Information
=====================

This template is based on pipenv. In order to be compatible with requirements.txt so the actual created package can be used by any part of the existing python ecosystem some hacks were needed.
So when building a package out of this **do not** simple call

    $ python setup.py sdist

**as this will produce an unusable artifact with files missing.**
Instead use the provided build and upload scripts that create all the necessary files in the artifact.


License info
============

While the project is released under the Apache 2 license, scripts under _CI/scripts are released under an MIT license as stated on their header.




History
-------


0.1.0 (26-04-2024)
------------------

* Initial release.


0.1.1 (19-06-2024)
------------------

* Fix s3 backend.


0.1.2 (19-06-2024)
------------------

* Bump dependencies.


1.0.0 (26-07-2024)
------------------

* Fix event handling.


1.0.1 (02-10-2024)
------------------

* Bump template python version to 3.11.


1.0.2 (04-10-2024)
------------------

* Fix development dependencies.


1.0.3 (04-10-2024)
------------------

* Bump twine to latest version to fix upload on pipeline.


1.0.4 (14-10-2024)
------------------

* Bump template python version to 3.12.
* Bugfixes.


1.1.0 (21-11-2024)
------------------

* Adds support for SecurityHub Integration findings


1.2.0 (24-12-2024)
------------------

* Updates default SecurityHub filter to fix issues with SecurityHub Integration findings support.
* Adjusted filtering logic to align with SecurityHub filtering: When both `match_on` options: `tags` and `resource_id_regexps` are specified, they are now combined using an **AND** condition instead of an **OR** condition.
* Introduce pagesize.

1.3.0 (07-04-2025)
------------------

* Adds support for filtering findings by region.
* Bump dependencies.


1.3.1 (16-09-2025)
------------------

* chore: bump dependencies

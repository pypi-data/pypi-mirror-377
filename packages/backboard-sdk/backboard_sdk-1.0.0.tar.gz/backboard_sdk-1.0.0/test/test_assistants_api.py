# coding: utf-8

"""
    Backboard API

     # Welcome to Backboard API  Build conversational AI applications with persistent memory and intelligent document processing.  ## Endpoint URL ``` https://backboard.io/api ```  ## Core Features  ### **Persistent Conversations** Create conversation threads that maintain context across multiple messages and support file attachments.  ### **Intelligent Document Processing** Upload and process documents (PDF, text, Office files) with automatic chunking and indexing for retrieval.  ### **AI Assistants** Create specialized assistants with custom instructions, document access, and tool capabilities.  ## Quickstart  ```python import requests  API_KEY = \"your_api_key\" BASE_URL = \"https://backboard.io/api\" HEADERS = {\"X-API-Key\": API_KEY}  # 1) Create assistant response = requests.post(     f\"{BASE_URL}/assistants\",     json={\"name\": \"Support Bot\", \"description\": \"After every response, pass a joke at the end of the response!\"},     headers=HEADERS, ) assistant_id = response.json()[\"assistant_id\"]  # 2) Create thread response = requests.post(     f\"{BASE_URL}/assistants/{assistant_id}/threads\",     json={},     headers=HEADERS, ) thread_id = response.json()[\"thread_id\"]  # 3) Send message response = requests.post(     f\"{BASE_URL}/threads/{thread_id}/messages\",     headers=HEADERS,     data={\"content\": \"Tell me about Canada in detail.\", \"stream\": \"false\"}, ) print(response.json().get(\"latest_message\", {}).get(\"content\")) ```  ---  Explore the **Assistants**, **Threads**, and **Documents** sections in the sidebar.     

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from backboard.api.assistants_api import AssistantsApi


class TestAssistantsApi(unittest.TestCase):
    """AssistantsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = AssistantsApi()

    def tearDown(self) -> None:
        pass

    def test_create_assistant_assistants_post(self) -> None:
        """Test case for create_assistant_assistants_post

        Create Assistant
        """
        pass

    def test_create_thread_for_assistant_assistants_assistant_id_threads_post(self) -> None:
        """Test case for create_thread_for_assistant_assistants_assistant_id_threads_post

        Create Thread for Assistant
        """
        pass

    def test_delete_assistant_assistants_assistant_id_delete(self) -> None:
        """Test case for delete_assistant_assistants_assistant_id_delete

        Delete Assistant
        """
        pass

    def test_get_assistant_assistants_assistant_id_get(self) -> None:
        """Test case for get_assistant_assistants_assistant_id_get

        Get Assistant
        """
        pass

    def test_list_assistant_documents_assistants_assistant_id_documents_get(self) -> None:
        """Test case for list_assistant_documents_assistants_assistant_id_documents_get

        List Assistant Documents
        """
        pass

    def test_list_assistants_assistants_get(self) -> None:
        """Test case for list_assistants_assistants_get

        List Assistants
        """
        pass

    def test_update_assistant_assistants_assistant_id_put(self) -> None:
        """Test case for update_assistant_assistants_assistant_id_put

        Update Assistant
        """
        pass

    def test_upload_document_to_assistant_assistants_assistant_id_documents_post(self) -> None:
        """Test case for upload_document_to_assistant_assistants_assistant_id_documents_post

        Upload Document to Assistant
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Backboard API

     # Welcome to Backboard API  Build conversational AI applications with persistent memory and intelligent document processing.  ## Endpoint URL ``` https://backboard.io/api ```  ## Core Features  ### **Persistent Conversations** Create conversation threads that maintain context across multiple messages and support file attachments.  ### **Intelligent Document Processing** Upload and process documents (PDF, text, Office files) with automatic chunking and indexing for retrieval.  ### **AI Assistants** Create specialized assistants with custom instructions, document access, and tool capabilities.  ## Quickstart  ```python import requests  API_KEY = \"your_api_key\" BASE_URL = \"https://backboard.io/api\" HEADERS = {\"X-API-Key\": API_KEY}  # 1) Create assistant response = requests.post(     f\"{BASE_URL}/assistants\",     json={\"name\": \"Support Bot\", \"description\": \"After every response, pass a joke at the end of the response!\"},     headers=HEADERS, ) assistant_id = response.json()[\"assistant_id\"]  # 2) Create thread response = requests.post(     f\"{BASE_URL}/assistants/{assistant_id}/threads\",     json={},     headers=HEADERS, ) thread_id = response.json()[\"thread_id\"]  # 3) Send message response = requests.post(     f\"{BASE_URL}/threads/{thread_id}/messages\",     headers=HEADERS,     data={\"content\": \"Tell me about Canada in detail.\", \"stream\": \"false\"}, ) print(response.json().get(\"latest_message\", {}).get(\"content\")) ```  ---  Explore the **Assistants**, **Threads**, and **Documents** sections in the sidebar.     

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from backboard.models.thread import Thread

class TestThread(unittest.TestCase):
    """Thread unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Thread:
        """Test Thread
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Thread`
        """
        model = Thread()
        if include_optional:
            return Thread(
                metadata_ = { },
                thread_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                messages = [
                    backboard.models.message_with_attachments.MessageWithAttachments(
                        role = 'user', 
                        content = '', 
                        metadata_ = { }, 
                        status = 'IN_PROGRESS', 
                        message_id = '', 
                        model_provider = '', 
                        model_name = '', 
                        input_tokens = 56, 
                        output_tokens = 56, 
                        total_tokens = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        attachments = [
                            backboard.models.attachment_info.AttachmentInfo(
                                document_id = '', 
                                filename = '', 
                                status = '', 
                                file_size_bytes = 56, 
                                summary = '', )
                            ], )
                    ]
            )
        else:
            return Thread(
                thread_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testThread(self):
        """Test Thread"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

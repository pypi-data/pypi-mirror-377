# coding: utf-8

"""
    Backboard API

     # Welcome to Backboard API  Build conversational AI applications with persistent memory and intelligent document processing.  ## Endpoint URL ``` https://backboard.io/api ```  ## Core Features  ### **Persistent Conversations** Create conversation threads that maintain context across multiple messages and support file attachments.  ### **Intelligent Document Processing** Upload and process documents (PDF, text, Office files) with automatic chunking and indexing for retrieval.  ### **AI Assistants** Create specialized assistants with custom instructions, document access, and tool capabilities.  ## Quickstart  ```python import requests  API_KEY = \"your_api_key\" BASE_URL = \"https://backboard.io/api\" HEADERS = {\"X-API-Key\": API_KEY}  # 1) Create assistant response = requests.post(     f\"{BASE_URL}/assistants\",     json={\"name\": \"Support Bot\", \"description\": \"After every response, pass a joke at the end of the response!\"},     headers=HEADERS, ) assistant_id = response.json()[\"assistant_id\"]  # 2) Create thread response = requests.post(     f\"{BASE_URL}/assistants/{assistant_id}/threads\",     json={},     headers=HEADERS, ) thread_id = response.json()[\"thread_id\"]  # 3) Send message response = requests.post(     f\"{BASE_URL}/threads/{thread_id}/messages\",     headers=HEADERS,     data={\"content\": \"Tell me about Canada in detail.\", \"stream\": \"false\"}, ) print(response.json().get(\"latest_message\", {}).get(\"content\")) ```  ---  Explore the **Assistants**, **Threads**, and **Documents** sections in the sidebar.     

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from backboard.models.chat_attachment import ChatAttachment
from typing import Optional, Set
from typing_extensions import Self

class ChatMessage(BaseModel):
    """
    ChatMessage
    """ # noqa: E501
    role: Annotated[str, Field(strict=True)]
    content: Optional[StrictStr] = None
    chat_message_id: StrictStr
    backboard_message_id: Optional[StrictStr] = None
    thread_id: StrictInt
    user_id: StrictInt
    model_used: Optional[StrictStr] = None
    token_count: Optional[StrictInt] = None
    processing_time: Optional[StrictInt] = None
    status: StrictStr
    created_at: datetime
    attachments: Optional[List[ChatAttachment]] = None
    __properties: ClassVar[List[str]] = ["role", "content", "chat_message_id", "backboard_message_id", "thread_id", "user_id", "model_used", "token_count", "processing_time", "status", "created_at", "attachments"]

    @field_validator('role')
    def role_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(user|assistant|system)$", value):
            raise ValueError(r"must validate the regular expression /^(user|assistant|system)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if backboard_message_id (nullable) is None
        # and model_fields_set contains the field
        if self.backboard_message_id is None and "backboard_message_id" in self.model_fields_set:
            _dict['backboard_message_id'] = None

        # set to None if model_used (nullable) is None
        # and model_fields_set contains the field
        if self.model_used is None and "model_used" in self.model_fields_set:
            _dict['model_used'] = None

        # set to None if token_count (nullable) is None
        # and model_fields_set contains the field
        if self.token_count is None and "token_count" in self.model_fields_set:
            _dict['token_count'] = None

        # set to None if processing_time (nullable) is None
        # and model_fields_set contains the field
        if self.processing_time is None and "processing_time" in self.model_fields_set:
            _dict['processing_time'] = None

        # set to None if attachments (nullable) is None
        # and model_fields_set contains the field
        if self.attachments is None and "attachments" in self.model_fields_set:
            _dict['attachments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "role": obj.get("role"),
            "content": obj.get("content"),
            "chat_message_id": obj.get("chat_message_id"),
            "backboard_message_id": obj.get("backboard_message_id"),
            "thread_id": obj.get("thread_id"),
            "user_id": obj.get("user_id"),
            "model_used": obj.get("model_used"),
            "token_count": obj.get("token_count"),
            "processing_time": obj.get("processing_time"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "attachments": [ChatAttachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None
        })
        return _obj



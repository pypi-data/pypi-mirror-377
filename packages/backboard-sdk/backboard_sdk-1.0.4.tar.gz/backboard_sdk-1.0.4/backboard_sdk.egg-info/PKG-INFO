Metadata-Version: 2.4
Name: backboard-sdk
Version: 1.0.4
Summary: Backboard API
Home-page: https://backboard.io
Author: OpenAPI Generator community
Author-email: OpenAPI Generator Community <team@openapitools.org>
License-Expression: MIT
Keywords: OpenAPI,OpenAPI-Generator,Backboard API
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: urllib3<3.0.0,>=2.1.0
Requires-Dist: python-dateutil>=2.8.2
Requires-Dist: pydantic>=2
Requires-Dist: typing-extensions>=4.7.1
Dynamic: author
Dynamic: home-page

# Backboard Python SDK

The official Python SDK for the Backboard API - Build conversational AI applications with persistent memory and intelligent document processing.

## Installation

```bash
pip install backboard-sdk
```

## Quick Start

```python
from backboard.client import Backboard

bb = Backboard(api_key="your_api_key_here")

# 1) Create assistant
assistant = bb.create_assistant(name="Support Bot", description="Helps users")

# 2) Create thread
thread = bb.create_thread(assistant.assistant_id)

# 3) Send message
resp = bb.send_message(thread.thread_id, content="Hello! I need help with my account.")
print(resp.latest_message.content if getattr(resp, 'latest_message', None) else resp.content)
```

## API Reference

### Simple client methods
- `Backboard.create_assistant(name, description=None, tools=None)`
- `Backboard.create_thread(assistant_id)`
- `Backboard.send_message(thread_id, content=None, files=None, llm_provider=None, model_name=None, stream=False, hide_tool_events=True)`
- `Backboard.upload_document_to_thread(thread_id, file)`
- `Backboard.upload_document_to_assistant(assistant_id, file)`

You can still drop down to the autogenerated APIs if needed:
```python
from backboard import AssistantsApi, ThreadsApi, DocumentsApi, ApiClient, Configuration
```

### Autogenerated APIs (optional)
- `AssistantsApi`, `ThreadsApi`, `DocumentsApi` remain available.

## Authentication

The SDK supports API key authentication. You can get your API key from the [Backboard Dashboard](https://backboard.io/dashboard).

```python
configuration = backboard.Configuration(
    api_key={'APIKeyHeader': 'your_api_key_here'}
)
```

## Error Handling

```python
from backboard.exceptions import ApiException

try:
    assistant = assistants.create_assistant(assistant_data)
except ApiException as e:
    print(f"API Error: {e.status} - {e.reason}")
    print(f"Response body: {e.body}")
```

## Advanced Usage

### Custom Configuration

```python
configuration = backboard.Configuration(
    host="https://your-custom-api-endpoint.com",
    api_key={'APIKeyHeader': 'your_api_key_here'}
)
```

### Async Support

The SDK supports async operations:

```python
import asyncio
import backboard

async def main():
    configuration = backboard.Configuration(
        api_key={'APIKeyHeader': 'your_api_key_here'}
    )
    
    async with backboard.ApiClient(configuration) as api_client:
        assistants = assistants_api.AssistantsApi(api_client)
        assistant = await assistants.create_assistant(assistant_data)
        print(f"Created assistant: {assistant.id}")

asyncio.run(main())
```

## Examples

Check out the `example.py` file in this repository for a complete working example.

## Support

- **Documentation**: [https://docs.backboard.io](https://docs.backboard.io)
- **API Reference**: [https://backboard.io/api/docs](https://backboard.io/api/docs)
- **Support**: [support@backboard.io](mailto:support@backboard.io)

## License

This project is licensed under the MIT License.

# coding: utf-8

"""
    Backboard API

     # Welcome to Backboard API  Build conversational AI applications with persistent memory and intelligent document processing.  ## Endpoint URL ``` https://backboard.io/api ```  ## Core Features  ### **Persistent Conversations** Create conversation threads that maintain context across multiple messages and support file attachments.  ### **Intelligent Document Processing** Upload and process documents (PDF, text, Office files) with automatic chunking and indexing for retrieval.  ### **AI Assistants** Create specialized assistants with custom instructions, document access, and tool capabilities.  ## Quickstart  ```python import requests  API_KEY = \"your_api_key\" BASE_URL = \"https://backboard.io/api\" HEADERS = {\"X-API-Key\": API_KEY}  # 1) Create assistant response = requests.post(     f\"{BASE_URL}/assistants\",     json={\"name\": \"Support Bot\", \"description\": \"After every response, pass a joke at the end of the response!\"},     headers=HEADERS, ) assistant_id = response.json()[\"assistant_id\"]  # 2) Create thread response = requests.post(     f\"{BASE_URL}/assistants/{assistant_id}/threads\",     json={},     headers=HEADERS, ) thread_id = response.json()[\"thread_id\"]  # 3) Send message response = requests.post(     f\"{BASE_URL}/threads/{thread_id}/messages\",     headers=HEADERS,     data={\"content\": \"Tell me about Canada in detail.\", \"stream\": \"false\"}, ) print(response.json().get(\"latest_message\", {}).get(\"content\")) ```  ---  Explore the **Assistants**, **Threads**, and **Documents** sections in the sidebar.     

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from backboard.models.auth_user_response import AuthUserResponse

class TestAuthUserResponse(unittest.TestCase):
    """AuthUserResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuthUserResponse:
        """Test AuthUserResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuthUserResponse`
        """
        model = AuthUserResponse()
        if include_optional:
            return AuthUserResponse(
                id = 56,
                email = '',
                first_name = '',
                last_name = '',
                role = 'admin',
                full_name = '',
                email_verified = True,
                last_login_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                client = backboard.models.auth_client_response.AuthClientResponse(
                    id = 56, 
                    company_name = '', 
                    company_website = '', 
                    industry = '', 
                    company_size = '', 
                    use_case = '', 
                    subscription_plan = 'FREE', 
                    billing_email = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                welcome_modal_seen = True
            )
        else:
            return AuthUserResponse(
                id = 56,
                email = '',
                first_name = '',
                last_name = '',
                role = 'admin',
                full_name = '',
                email_verified = True,
                last_login_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                client = backboard.models.auth_client_response.AuthClientResponse(
                    id = 56, 
                    company_name = '', 
                    company_website = '', 
                    industry = '', 
                    company_size = '', 
                    use_case = '', 
                    subscription_plan = 'FREE', 
                    billing_email = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
        )
        """

    def testAuthUserResponse(self):
        """Test AuthUserResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "baresquare-sdk"
dynamic = ["version"]
license = "MIT"
description = "Baresquare SDK for Python - Core utilities and 3rd party integrations"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "aiohttp>=3.9.0,<4.0.0",
    "fastapi>=0.115.12,<1.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    "tenacity>=8.2.0,<9.0.0",
]

[project.optional-dependencies]
aws = [
    "boto3>=1.38.21,<2.0.0",
    "pyjwt[crypto]>=2.10.1,<3.0.0",
    "requests>=2.32.3,<3.0.0",
]
gcp = [
    "db-dtypes>=1.4.3",
    "google-api-python-client>=2.179.0",
    "google-auth>=2.22.0,<3.0.0",
    "google-cloud-bigquery>=3.35.1",
    "google-cloud-bigquery-storage>=2.32.0",
    "google-cloud-secret-manager>=2.24.0",
    "google-cloud-storage>=2.10.0",
    "pandas>=2.3.1",
]
pretty-logs = [
    "rich>=14.1.0",
]

[tool.pyright]
extraPaths = ["__pypackages__/<major.minor>/lib/"]

[tool.hatch.build.targets.wheel]
packages = ["baresquare_sdk"]

[tool.hatch.build]
dev-mode-dirs = ["src"]

[tool.hatch.build.sources]
"src" = ""

[tool.hatch.version]
source = "vcs"

[tool.pytest.ini_options]
pythonpath = "src"
testpaths = ["tests"]
addopts = "-m 'not integration' --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "asyncio : marks tests as asyncio (deselect with '-m \"not asyncio\"')",
    "integration: marks tests as integration tests (require real AWS resources)",
]
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
src = ["src", "tests"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

output-format = "grouped"
line-length = 120

[tool.ruff.lint]
# List of rules https://docs.astral.sh/ruff/rules/
select = [
    # "B",     # bugbear
    "E112",  # no-indented-block
    "E2",    # Whitespace problems (missing or unexpected)
    "E402",  # module-import-not-at-top-of-file
    "E71",   # Comparison errors
    "E721",  # type-comparison
    "E722",  # bare-except
    "E9",
    "I001",  # unsorted-imports
    "W291",  # trailing-whitespace
    "W292",  # missing-newline-at-end-of-file
    "W293",  # blank-line-with-whitespace
    #"UP",    # pyupgrade
    # "PT",    # flake8-pytest-style
    # "G",     # flake8-logging-format
    "D201",  # no-blank-line-before-function
    "D202",  # no-blank-line-after-function
    "D212",  # multi-line-summary-first-line
    "D400",  # ends-in-period
    "D401",  # non-imperative-mood
    "ASYNC", # flake8-async
    "COM",   # flake8-commas
    # "T20",   # flake8-print
    "RET",   # flake8-return  # use for warning
    "SIM",   # flake8-simplify
    # "ARG",   # flake8-unused-arguments  # use for warning / improvements
    # "PL",    # pylint
    # "F821",  # undefined-name
    "F401",  # unused-import
    "F841",  # unused-variable
    "ARG001",  # unused-function-argument
]

ignore = [
    "UP015",   # redundant-open-modes
    "E501",    # line-too-long
    "SIM112",  # uncapitalized-environment-variables
    "RET503",  # implicit-return
    "D407",    # dashed-underline-after-section
    "SIM113",  # enumerate-for-loop
    "SIM108",  # if-else-block-instead-of-if-exp
    "SIM110",  # reimplemented-builtin
    "COM812",  # missing-trailing-comma (may cause conflicts with autoformatter)
]

[tool.ruff.lint.per-file-ignores]
"src/**/baresquare_*/**/__init__.py" = ["F401", "I001"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = "dynamic"
exclude = []
line-ending = "lf"
preview = false
skip-magic-trailing-comma = false

[dependency-groups]
dev = [
  {include-group = "lint"},
  {include-group = "pre-commit"},
  {include-group = "test"},
]
lint = [
    "ruff",
]
pre-commit = [
    "pre-commit",
]
test = [
    "pytest",
    "pytest-asyncio",
    "pytest-aiohttp",
]

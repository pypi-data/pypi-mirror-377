# Generated from OD.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,138,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,5,12,92,8,12,10,12,12,12,95,9,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,3,13,104,8,13,5,13,106,8,13,10,13,12,
        13,109,9,13,1,13,1,13,1,14,4,14,114,8,14,11,14,12,14,115,1,14,1,
        14,4,14,120,8,14,11,14,12,14,121,3,14,124,8,14,1,15,4,15,127,8,15,
        11,15,12,15,128,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,0,0,17,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,1,0,7,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,2,0,34,34,92,92,8,0,34,34,47,47,92,92,98,98,102,102,
        110,110,114,114,116,116,3,0,48,57,65,70,97,102,1,0,48,57,3,0,9,10,
        13,13,32,32,145,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,42,1,0,0,0,
        5,44,1,0,0,0,7,46,1,0,0,0,9,48,1,0,0,0,11,53,1,0,0,0,13,57,1,0,0,
        0,15,60,1,0,0,0,17,63,1,0,0,0,19,67,1,0,0,0,21,71,1,0,0,0,23,81,
        1,0,0,0,25,89,1,0,0,0,27,96,1,0,0,0,29,113,1,0,0,0,31,126,1,0,0,
        0,33,132,1,0,0,0,35,36,5,79,0,0,36,37,5,98,0,0,37,38,5,106,0,0,38,
        39,5,101,0,0,39,40,5,99,0,0,40,41,5,116,0,0,41,2,1,0,0,0,42,43,5,
        58,0,0,43,4,1,0,0,0,44,45,5,123,0,0,45,6,1,0,0,0,46,47,5,125,0,0,
        47,8,1,0,0,0,48,49,5,60,0,0,49,50,5,124,0,0,50,51,5,45,0,0,51,52,
        5,45,0,0,52,10,1,0,0,0,53,54,5,111,0,0,54,55,5,45,0,0,55,56,5,45,
        0,0,56,12,1,0,0,0,57,58,5,45,0,0,58,59,5,45,0,0,59,14,1,0,0,0,60,
        61,5,46,0,0,61,62,5,46,0,0,62,16,1,0,0,0,63,64,5,45,0,0,64,65,5,
        45,0,0,65,66,5,62,0,0,66,18,1,0,0,0,67,68,5,46,0,0,68,69,5,46,0,
        0,69,70,5,62,0,0,70,20,1,0,0,0,71,72,5,64,0,0,72,73,5,115,0,0,73,
        74,5,116,0,0,74,75,5,97,0,0,75,76,5,114,0,0,76,77,5,116,0,0,77,78,
        5,117,0,0,78,79,5,109,0,0,79,80,5,108,0,0,80,22,1,0,0,0,81,82,5,
        64,0,0,82,83,5,101,0,0,83,84,5,110,0,0,84,85,5,100,0,0,85,86,5,117,
        0,0,86,87,5,109,0,0,87,88,5,108,0,0,88,24,1,0,0,0,89,93,7,0,0,0,
        90,92,7,1,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,
        0,0,0,94,26,1,0,0,0,95,93,1,0,0,0,96,107,5,34,0,0,97,106,8,2,0,0,
        98,103,5,92,0,0,99,104,7,3,0,0,100,101,5,117,0,0,101,102,7,4,0,0,
        102,104,6,13,0,0,103,99,1,0,0,0,103,100,1,0,0,0,104,106,1,0,0,0,
        105,97,1,0,0,0,105,98,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,
        108,1,0,0,0,108,110,1,0,0,0,109,107,1,0,0,0,110,111,5,34,0,0,111,
        28,1,0,0,0,112,114,7,5,0,0,113,112,1,0,0,0,114,115,1,0,0,0,115,113,
        1,0,0,0,115,116,1,0,0,0,116,123,1,0,0,0,117,119,5,46,0,0,118,120,
        7,5,0,0,119,118,1,0,0,0,120,121,1,0,0,0,121,119,1,0,0,0,121,122,
        1,0,0,0,122,124,1,0,0,0,123,117,1,0,0,0,123,124,1,0,0,0,124,30,1,
        0,0,0,125,127,7,6,0,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,
        0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,131,6,15,1,0,131,32,1,
        0,0,0,132,133,3,29,14,0,133,134,5,47,0,0,134,135,3,29,14,0,135,136,
        5,47,0,0,136,137,3,29,14,0,137,34,1,0,0,0,9,0,93,103,105,107,115,
        121,123,128,2,1,13,0,6,0,0
    ]

class ODLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    Start = 11
    End = 12
    IDENTIFIER = 13
    STRING = 14
    NUMBER = 15
    WHITESPACE = 16
    DATE = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Object'", "':'", "'{'", "'}'", "'<|--'", "'o--'", "'--'", 
            "'..'", "'-->'", "'..>'", "'@startuml'", "'@enduml'" ]

    symbolicNames = [ "<INVALID>",
            "Start", "End", "IDENTIFIER", "STRING", "NUMBER", "WHITESPACE", 
            "DATE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "Start", "End", "IDENTIFIER", 
                  "STRING", "NUMBER", "WHITESPACE", "DATE" ]

    grammarFileName = "OD.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[13] = self.STRING_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            4
     



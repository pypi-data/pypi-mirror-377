"""migrate_cloud_sync_configs_to_json_schema

Revision ID: d930de046be6
Revises:
Create Date: 2025-09-15 22:49:39.129999

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "d930de046be6"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Check if apscheduler_jobs table exists before trying to drop it
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    existing_tables = inspector.get_table_names()

    if "apscheduler_jobs" in existing_tables:
        # Check if the index exists before trying to drop it
        existing_indexes = [
            idx["name"] for idx in inspector.get_indexes("apscheduler_jobs")
        ]

        with op.batch_alter_table("apscheduler_jobs", schema=None) as batch_op:
            if "ix_apscheduler_jobs_next_run_time" in existing_indexes:
                batch_op.drop_index(batch_op.f("ix_apscheduler_jobs_next_run_time"))

        op.drop_table("apscheduler_jobs")

    # Check if cloud_sync_configs table exists before trying to modify it
    if "cloud_sync_configs" in existing_tables:
        with op.batch_alter_table("cloud_sync_configs", schema=None) as batch_op:
            batch_op.add_column(sa.Column("provider_config", sa.Text(), nullable=False))
            batch_op.alter_column(
                "id", existing_type=sa.INTEGER(), nullable=False, autoincrement=True
            )
            batch_op.alter_column(
                "path_prefix",
                existing_type=sa.VARCHAR(),
                server_default=None,
                existing_nullable=False,
            )
            batch_op.alter_column(
                "enabled",
                existing_type=sa.BOOLEAN(),
                server_default=None,
                existing_nullable=True,
            )
            batch_op.drop_column("encrypted_secret_key")
            batch_op.drop_column("port")
            batch_op.drop_column("username")
            batch_op.drop_column("bucket_name")
            batch_op.drop_column("remote_path")
            batch_op.drop_column("encrypted_access_key")
            batch_op.drop_column("encrypted_password")
            batch_op.drop_column("encrypted_private_key")
            batch_op.drop_column("host")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("cloud_sync_configs", schema=None) as batch_op:
        batch_op.add_column(sa.Column("host", sa.VARCHAR(), nullable=True))
        batch_op.add_column(
            sa.Column("encrypted_private_key", sa.TEXT(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("encrypted_password", sa.VARCHAR(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("encrypted_access_key", sa.VARCHAR(), nullable=True)
        )
        batch_op.add_column(sa.Column("remote_path", sa.VARCHAR(), nullable=True))
        batch_op.add_column(sa.Column("bucket_name", sa.VARCHAR(), nullable=True))
        batch_op.add_column(sa.Column("username", sa.VARCHAR(), nullable=True))
        batch_op.add_column(
            sa.Column(
                "port", sa.INTEGER(), server_default=sa.text("(22)"), nullable=True
            )
        )
        batch_op.add_column(
            sa.Column("encrypted_secret_key", sa.VARCHAR(), nullable=True)
        )
        batch_op.alter_column(
            "enabled",
            existing_type=sa.BOOLEAN(),
            server_default=sa.text("1"),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "path_prefix",
            existing_type=sa.VARCHAR(),
            server_default=sa.text("('')"),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "id", existing_type=sa.INTEGER(), nullable=True, autoincrement=True
        )
        batch_op.drop_column("provider_config")

    op.create_table(
        "apscheduler_jobs",
        sa.Column("id", sa.VARCHAR(length=191), nullable=False),
        sa.Column("next_run_time", sa.FLOAT(), nullable=True),
        sa.Column("job_state", sa.BLOB(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("apscheduler_jobs", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_apscheduler_jobs_next_run_time"),
            ["next_run_time"],
            unique=False,
        )

    # ### end Alembic commands ###

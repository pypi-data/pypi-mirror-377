name: Integration Tests

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read

jobs:
  lock_file:
    name: ðŸ§· Prepare Locked Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - run: uv lock --locked


  s3_integration_tests:
    name: "ðŸ§ª Integration Test: S3 Emulator (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    needs: [lock_file]
    timeout-minutes: 10
    strategy:
      fail-fast: false # Allows all matrix jobs to run even if one fails
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - cloud_provider: s3
            install_extras: s3
            test_path: tests/integration/test_s3.py

    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: s3
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
          EAGER_SERVICE_LOADING: "1"
          ENDPOINT_PROTO: https
          LOCALSTACK_SSL: "1"
          LS_LOG: warn
          SKIP_INFRA_DOWNLOADS: "1"
        ports:
          - 4566:4566

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Wait for LocalStack to be ready
        run: |
          for i in {1..20}; do
            if curl -sk https://localhost:4566/_localstack/health \
              | grep '"s3": "running"' > /dev/null; then
              echo "LocalStack S3 ready!"
              exit 0
            fi
            echo "Waiting for LocalStack S3..."
            sleep 1
          done
          echo "LocalStack failed to start in time" >&2
          exit 1

      - name: Run Pytest for ${{ matrix.cloud_provider }} Cache
        env:
          AWS_ENDPOINT_URL: https://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: uv run --extra ${{ matrix.install_extras }} pytest ${{ matrix.test_path }} --no-cov


  azure_integration_tests:
    name: "ðŸ§ª Integration Test: Azure Emulator (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    needs: [lock_file]
    timeout-minutes: 10
    strategy:
      fail-fast: false # Allows all matrix jobs to run even if one fails
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - cloud_provider: azure
            install_extras: azure
            test_path: tests/integration/test_azure.py

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Download mkcert
        run: |
          curl -Ls "https://dl.filippo.io/mkcert/latest?for=linux/amd64" -o mkcert
          chmod +x mkcert
          sudo mv mkcert /usr/local/bin/

      - name: Create local CA
        run: mkcert -install

      - name: Generate HTTPS cert for Azurite
        run: mkcert 127.0.0.1

      - name: Install Azurite
        run: npm install -g azurite

      - name: Start Azurite
        run: |
          azurite --oauth basic --cert 127.0.0.1.pem --key 127.0.0.1-key.pem --silent &

      - name: Wait for Azurite to be ready
        run: |
          for i in {1..30}; do
            if curl -ks https://127.0.0.1:10000/devstoreaccount1; then
              echo "Azurite is ready"
              break
            fi
            sleep 1
          done

      - name: Run Pytest for ${{ matrix.cloud_provider }} Cache
        env:
          AZURE_ACCOUNT_URL: https://127.0.0.1:10000/devstoreaccount1
          # AZURE_ACCOUNT_URL: https://cloudautopkgrunner.blob.core.windows.net/cloudautopkgrunner
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: uv run --extra ${{ matrix.install_extras }} pytest ${{ matrix.test_path }} --no-cov


  gcs_integration_tests:
    name: "ðŸ§ª Integration Test: GCS Emulator (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    needs: [lock_file]
    timeout-minutes: 10
    strategy:
      fail-fast: false # Allows all matrix jobs to run even if one fails
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - cloud_provider: gcs
            install_extras: gcs
            test_path: tests/integration/test_gcs.py
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Start Fake GCS Server
        uses: fsouza/fake-gcs-action@v0.4.1
        with:
          backend: memory
          external-url: http://127.0.0.1:4443
          scheme: http

      - name: Wait for Fake GCS Server to be ready
        run: |
          for i in {1..20}; do
            if curl -s http://127.0.0.1:4443/storage/v1/b >/dev/null; then
              echo "Fake GCS Server is up!"
              exit 0
            fi
            echo "Waiting for Fake GCS Server..."
            sleep 1
          done
          echo "Fake GCS Server failed to start" >&2
          exit 1

      - name: Run Pytest for ${{ matrix.cloud_provider }} Cache
        env:
          STORAGE_EMULATOR_HOST: http://127.0.0.1:4443
          GOOGLE_CLOUD_PROJECT: cloud-autopkg-runner
        run: uv run --extra ${{ matrix.install_extras }} pytest ${{ matrix.test_path }} --no-cov

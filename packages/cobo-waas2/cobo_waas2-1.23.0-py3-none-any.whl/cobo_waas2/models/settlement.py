# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.acquiring_type import AcquiringType
from cobo_waas2.models.payout_channel import PayoutChannel
from cobo_waas2.models.settle_request_status import SettleRequestStatus
from cobo_waas2.models.settlement_detail import SettlementDetail
from cobo_waas2.models.settlement_type import SettlementType
from typing import Optional, Set
from typing_extensions import Self


class Settlement(BaseModel):
    """
    Settlement
    """  # noqa: E501
    settlement_request_id: StrictStr = Field(description="The settlement request ID generated by Cobo.")
    request_id: StrictStr = Field(description="The request ID provided by you when creating the settlement request.")
    status: SettleRequestStatus
    settlements: List[SettlementDetail]
    created_timestamp: Optional[StrictInt] = Field(default=None, description="The creation time of the settlement request, represented as a UNIX timestamp in seconds.")
    updated_timestamp: Optional[StrictInt] = Field(default=None, description="The last update time of the settlement request, represented as a UNIX timestamp in seconds.")
    initiator: Optional[StrictStr] = Field(default=None, description=" The initiator of this settlement request. Can return either an API key or the Payment Management App's ID.  - Format `api_key_<API_KEY>`: Indicates the settlement request was initiated via the Payment API using the API key. - Format `app_<APP_ID>`: Indicates the settlement request was initiated through the Payment Management App using the App ID. ")
    acquiring_type: Optional[AcquiringType] = None
    payout_channel: Optional[PayoutChannel] = None
    settlement_type: Optional[SettlementType] = None
    __properties: ClassVar[List[str]] = ["settlement_request_id", "request_id", "status", "settlements", "created_timestamp", "updated_timestamp", "initiator", "acquiring_type", "payout_channel", "settlement_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Settlement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in settlements (list)
        _items = []
        if self.settlements:
            for _item in self.settlements:
                if _item:
                    _items.append(_item.to_dict())
            _dict['settlements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Settlement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "settlement_request_id": obj.get("settlement_request_id"),
            "request_id": obj.get("request_id"),
            "status": obj.get("status"),
            "settlements": [SettlementDetail.from_dict(_item) for _item in obj["settlements"]] if obj.get("settlements") is not None else None,
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "initiator": obj.get("initiator"),
            "acquiring_type": obj.get("acquiring_type"),
            "payout_channel": obj.get("payout_channel"),
            "settlement_type": obj.get("settlement_type")
        })
        return _obj



"""Interface de linha de comando para CodeHealthAnalyzer.

Este m√≥dulo fornece uma CLI amig√°vel para usar a biblioteca CodeHealthAnalyzer.
"""

import click
import json
from pathlib import Path
from typing import Optional

from ..analyzers.violations import ViolationsAnalyzer
from ..analyzers.templates import TemplatesAnalyzer
from ..analyzers.errors import ErrorsAnalyzer
from ..reports.generator import ReportGenerator
from ..reports.formatter import ReportFormatter
from ..utils.validators import PathValidator
from ..utils.helpers import ColorHelper, TimeHelper
from .. import CodeAnalyzer


@click.group()
@click.version_option(version='1.0.0')
def cli():
    """üîç CodeHealthAnalyzer - An√°lise de qualidade e sa√∫de de c√≥digo.
    
    Uma ferramenta completa para analisar a qualidade do seu c√≥digo Python,
    detectar viola√ß√µes de tamanho, analisar templates HTML e integrar com
    ferramentas de linting como Ruff.
    """
    pass


@cli.command()
@click.argument('project_path', type=click.Path(exists=True, file_okay=False, dir_okay=True))
@click.option('--output', '-o', type=click.Path(), help='Diret√≥rio de sa√≠da para relat√≥rios')
@click.option('--format', '-f', type=click.Choice(['json', 'html', 'markdown', 'all']), default='json', help='Formato do relat√≥rio')
@click.option('--config', '-c', type=click.Path(exists=True), help='Arquivo de configura√ß√£o JSON')
@click.option('--verbose', '-v', is_flag=True, help='Sa√≠da detalhada')
def analyze(project_path: str, output: Optional[str], format: str, config: Optional[str], verbose: bool):
    """üîç Executa an√°lise completa do projeto.
    
    Analisa viola√ß√µes de tamanho, templates HTML com CSS/JS inline,
    e erros de linting (Ruff) em um projeto Python.
    
    PROJECT_PATH: Caminho para o diret√≥rio do projeto
    """
    if verbose:
        click.echo(ColorHelper.info(f"Iniciando an√°lise de {project_path}"))
    
    # Valida o projeto
    project_info = PathValidator.get_project_info(project_path)
    if not project_info['valid']:
        click.echo(ColorHelper.error(f"Projeto inv√°lido: {project_info.get('error', 'Erro desconhecido')}"))
        return
    
    if verbose:
        click.echo(f"üìä Projeto: {project_info['name']}")
        click.echo(f"üìÅ Arquivos Python: {project_info['python_files']}")
        click.echo(f"üé® Templates HTML: {project_info['html_files']}")
    
    # Carrega configura√ß√£o se fornecida
    config_data = {}
    if config:
        try:
            with open(config, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            if verbose:
                click.echo(ColorHelper.info(f"Configura√ß√£o carregada de {config}"))
        except Exception as e:
            click.echo(ColorHelper.warning(f"Erro ao carregar configura√ß√£o: {e}"))
    
    # Executa an√°lise
    try:
        analyzer = CodeAnalyzer(project_path, config_data)
        
        if verbose:
            click.echo("üîç Executando an√°lise...")
        
        report = analyzer.generate_full_report(output_dir=output)
        
        # Exibe resumo
        summary = report.get('summary', {})
        quality_score = summary.get('quality_score', 0)
        
        click.echo("\n" + "="*50)
        click.echo("üìä RESUMO DA AN√ÅLISE")
        click.echo("="*50)
        
        # Score de qualidade com cor
        if quality_score >= 80:
            score_text = ColorHelper.success(f"Score de Qualidade: {quality_score}/100")
        elif quality_score >= 60:
            score_text = ColorHelper.warning(f"Score de Qualidade: {quality_score}/100")
        else:
            score_text = ColorHelper.error(f"Score de Qualidade: {quality_score}/100")
        
        click.echo(score_text)
        click.echo(f"üìÅ Arquivos analisados: {summary.get('total_files', 0)}")
        click.echo(f"‚ö†Ô∏è  Arquivos com viola√ß√µes: {summary.get('violation_files', 0)}")
        click.echo(f"üé® Templates: {summary.get('total_templates', 0)}")
        click.echo(f"üîç Erros Ruff: {summary.get('total_errors', 0)}")
        click.echo(f"üî• Issues de alta prioridade: {summary.get('high_priority_issues', 0)}")
        
        # Prioridades de a√ß√£o
        priorities = report.get('priorities', [])
        if priorities:
            click.echo("\nüéØ PRIORIDADES DE A√á√ÉO:")
            for i, priority in enumerate(priorities[:5], 1):  # Top 5
                icon = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}.get(priority.get('priority', 'low'), '‚ö™')
                click.echo(f"{i}. {icon} {priority.get('title', 'N/A')} ({priority.get('count', 0)})")
        else:
            click.echo(ColorHelper.success("\n‚úÖ Nenhuma a√ß√£o urgente necess√°ria!"))
        
        # Salva relat√≥rios nos formatos solicitados
        if output:
            output_path = Path(output)
            formatter = ReportFormatter()
            
            if format in ['json', 'all']:
                json_file = output_path / 'full_report.json'
                formatter.to_json(report, str(json_file))
                if verbose:
                    click.echo(ColorHelper.success(f"Relat√≥rio JSON salvo em {json_file}"))
            
            if format in ['html', 'all']:
                html_file = output_path / 'report.html'
                ReportGenerator().generate_html_report(report, str(html_file))
                if verbose:
                    click.echo(ColorHelper.success(f"Relat√≥rio HTML salvo em {html_file}"))
            
            if format in ['markdown', 'all']:
                md_file = output_path / 'report.md'
                formatter.to_markdown(report, str(md_file))
                if verbose:
                    click.echo(ColorHelper.success(f"Relat√≥rio Markdown salvo em {md_file}"))
        
        click.echo("\n" + ColorHelper.success("An√°lise conclu√≠da com sucesso!"))
        
    except Exception as e:
        click.echo(ColorHelper.error(f"Erro durante an√°lise: {e}"))
        if verbose:
            import traceback
            click.echo(traceback.format_exc())


@cli.command()
@click.argument('project_path', type=click.Path(exists=True, file_okay=False, dir_okay=True))
@click.option('--output', '-o', type=click.Path(), help='Arquivo de sa√≠da JSON')
@click.option('--config', '-c', type=click.Path(exists=True), help='Arquivo de configura√ß√£o JSON')
def violations(project_path: str, output: Optional[str], config: Optional[str]):
    """üö® Analisa apenas viola√ß√µes de tamanho.
    
    PROJECT_PATH: Caminho para o diret√≥rio do projeto
    """
    config_data = {}
    if config:
        try:
            with open(config, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
        except Exception as e:
            click.echo(ColorHelper.warning(f"Erro ao carregar configura√ß√£o: {e}"))
    
    try:
        analyzer = ViolationsAnalyzer(project_path, config_data)
        report = analyzer.analyze()
        
        if output:
            analyzer.save_report(report, output)
            click.echo(ColorHelper.success(f"Relat√≥rio salvo em {output}"))
        else:
            click.echo(json.dumps(report, indent=2, ensure_ascii=False))
        
    except Exception as e:
        click.echo(ColorHelper.error(f"Erro: {e}"))


@cli.command()
@click.argument('project_path', type=click.Path(exists=True, file_okay=False, dir_okay=True))
@click.option('--output', '-o', type=click.Path(), help='Arquivo de sa√≠da JSON')
@click.option('--config', '-c', type=click.Path(exists=True), help='Arquivo de configura√ß√£o JSON')
def templates(project_path: str, output: Optional[str], config: Optional[str]):
    """üé® Analisa apenas templates HTML com CSS/JS inline.
    
    PROJECT_PATH: Caminho para o diret√≥rio do projeto
    """
    config_data = {}
    if config:
        try:
            with open(config, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
        except Exception as e:
            click.echo(ColorHelper.warning(f"Erro ao carregar configura√ß√£o: {e}"))
    
    try:
        analyzer = TemplatesAnalyzer(project_path, config_data)
        report = analyzer.analyze()
        
        if output:
            analyzer.save_report(report, output)
            click.echo(ColorHelper.success(f"Relat√≥rio salvo em {output}"))
        else:
            click.echo(json.dumps(report, indent=2, ensure_ascii=False))
        
    except Exception as e:
        click.echo(ColorHelper.error(f"Erro: {e}"))


@cli.command()
@click.argument('project_path', type=click.Path(exists=True, file_okay=False, dir_okay=True))
@click.option('--output', '-o', type=click.Path(), help='Arquivo de sa√≠da JSON')
@click.option('--markdown', '-m', type=click.Path(), help='Arquivo de sa√≠da Markdown')
@click.option('--config', '-c', type=click.Path(exists=True), help='Arquivo de configura√ß√£o JSON')
def errors(project_path: str, output: Optional[str], markdown: Optional[str], config: Optional[str]):
    """‚ö†Ô∏è Analisa apenas erros de linting (Ruff).
    
    PROJECT_PATH: Caminho para o diret√≥rio do projeto
    """
    config_data = {}
    if config:
        try:
            with open(config, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
        except Exception as e:
            click.echo(ColorHelper.warning(f"Erro ao carregar configura√ß√£o: {e}"))
    
    try:
        analyzer = ErrorsAnalyzer(project_path, config_data)
        report = analyzer.analyze()
        
        if output:
            analyzer.save_report(report, output)
            click.echo(ColorHelper.success(f"Relat√≥rio JSON salvo em {output}"))
        
        if markdown:
            analyzer.create_markdown_report(report, markdown)
            click.echo(ColorHelper.success(f"Relat√≥rio Markdown salvo em {markdown}"))
        
        if not output and not markdown:
            click.echo(json.dumps(report, indent=2, ensure_ascii=False))
        
    except Exception as e:
        click.echo(ColorHelper.error(f"Erro: {e}"))


@cli.command()
@click.argument('project_path', type=click.Path(exists=True, file_okay=False, dir_okay=True))
def score(project_path: str):
    """üìä Mostra apenas o score de qualidade do projeto.
    
    PROJECT_PATH: Caminho para o diret√≥rio do projeto
    """
    try:
        analyzer = CodeAnalyzer(project_path)
        quality_score = analyzer.get_quality_score()
        
        if quality_score >= 80:
            score_text = ColorHelper.success(f"Score de Qualidade: {quality_score}/100 - Excelente!")
        elif quality_score >= 60:
            score_text = ColorHelper.warning(f"Score de Qualidade: {quality_score}/100 - Bom")
        else:
            score_text = ColorHelper.error(f"Score de Qualidade: {quality_score}/100 - Precisa melhorar")
        
        click.echo(score_text)
        
    except Exception as e:
        click.echo(ColorHelper.error(f"Erro: {e}"))


@cli.command()
@click.argument('project_path', type=click.Path(exists=True, file_okay=False, dir_okay=True))
def info(project_path: str):
    """‚ÑπÔ∏è Mostra informa√ß√µes sobre o projeto.
    
    PROJECT_PATH: Caminho para o diret√≥rio do projeto
    """
    project_info = PathValidator.get_project_info(project_path)
    
    if not project_info['valid']:
        click.echo(ColorHelper.error(f"Projeto inv√°lido: {project_info.get('error', 'Erro desconhecido')}"))
        return
    
    click.echo("üìä INFORMA√á√ïES DO PROJETO")
    click.echo("="*30)
    click.echo(f"üìÅ Nome: {project_info['name']}")
    click.echo(f"üìÇ Caminho: {project_info['path']}")
    click.echo(f"üêç Projeto Python: {'Sim' if project_info['is_python_project'] else 'N√£o'}")
    click.echo(f"üé® Tem templates: {'Sim' if project_info['has_templates'] else 'N√£o'}")
    click.echo(f"üìÑ Arquivos Python: {project_info['python_files']}")
    click.echo(f"üåê Arquivos HTML: {project_info['html_files']}")
    click.echo(f"üìä Total de arquivos: {project_info['total_files']}")


def main():
    """Ponto de entrada principal da CLI."""
    cli()


if __name__ == '__main__':
    main()
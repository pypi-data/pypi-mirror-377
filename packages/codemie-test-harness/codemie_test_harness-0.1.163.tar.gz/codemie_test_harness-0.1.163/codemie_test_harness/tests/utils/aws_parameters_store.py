import base64
import json
import os
import random
import re
from time import sleep
from typing import List

import boto3
from botocore.exceptions import ClientError

from codemie_sdk.models.integration import CredentialValues
from codemie_test_harness.tests.enums.integrations import DataBaseDialect
from codemie_test_harness.tests.utils.env_resolver import EnvironmentResolver


class AwsParameterStore:
    """
    Python implementation of AWS Parameter Store client with role assumption capabilities.
    """

    INTEGRATIONS_PARAMETER_PATH = "/codemie/autotests/integrations/"
    _instance = None

    def __init__(self, access_key: str, secret_key: str, session_token: str = ""):
        """
        Initialize AWS Parameter Store with credentials and optional session token.

        Args:
            access_key (str): AWS access key ID
            secret_key (str): AWS secret access key
            session_token (str): AWS session token (optional)
        """
        self.region = "eu-central-1"

        # Initialize the session with basic credentials
        if not session_token:
            credentials = {
                "aws_access_key_id": access_key,
                "aws_secret_access_key": secret_key,
                "region_name": self.region,
            }
        else:
            credentials = {
                "aws_access_key_id": access_key,
                "aws_secret_access_key": secret_key,
                "aws_session_token": session_token,
                "region_name": self.region,
            }

            # Assume role if session token is provided
            sts_client = boto3.client("sts", **credentials)
            assumed_role = sts_client.assume_role(
                RoleArn="arn:aws:iam::025066278959:role/CodeMieAutotestsIntegrations",  # Replace with actual role ARN
                RoleSessionName="AutotestsUser",
            )

            # Update credentials with assumed role
            credentials = {
                "aws_access_key_id": assumed_role["Credentials"]["AccessKeyId"],
                "aws_secret_access_key": assumed_role["Credentials"]["SecretAccessKey"],
                "aws_session_token": assumed_role["Credentials"]["SessionToken"],
                "region_name": self.region,
            }

        # Initialize SSM client
        self.ssm_client = boto3.client("ssm", **credentials)

    @classmethod
    def get_instance(
        cls, access_key: str, secret_key: str, session_token: str = ""
    ) -> "AwsParameterStore":
        """
        Get singleton instance of AwsParameterStore.

        Args:
            access_key (str): AWS access key ID
            secret_key (str): AWS secret access key
            session_token (str): AWS session token (optional)

        Returns:
            AwsParameterStore: Singleton instance
        """
        if cls._instance is None:
            cls._instance = cls(access_key, secret_key, session_token)
        return cls._instance

    @classmethod
    def get_cloud_provider_credentials(cls, provider: str) -> dict:
        """
        Get cloud provider credentials from Parameter Store.

        Args:
            provider (str): Provider name (aws, azure, gcp, etc.)

        Returns:
            dict: JSON object containing provider credentials
        """
        sleep(random.random())
        parameter_path = f"{cls.INTEGRATIONS_PARAMETER_PATH}{provider.lower()}"
        if cls._instance:
            return json.loads(cls._instance.get_parameter(parameter_path))
        else:
            return {}

    def get_parameter(self, parameter_name: str) -> str:
        """
        Get a parameter value from Parameter Store.

        Args:
            parameter_name (str): Name of the parameter to retrieve

        Returns:
            str: Parameter value

        Raises:
            ClientError: If parameter cannot be retrieved
        """
        try:
            response = self.ssm_client.get_parameter(Name=parameter_name)
            return response["Parameter"]["Value"]
        except ClientError as e:
            print(f"Error getting parameter: {parameter_name}! Error message: {str(e)}")
            raise


class CredentialsUtil:
    """
    Utility class for managing various cloud provider credentials.
    """

    AUTO_GENERATED = "AutoGenerated"

    @staticmethod
    def aws_credentials() -> List[CredentialValues]:
        aws_creds = AwsParameterStore.get_cloud_provider_credentials("aws")
        return [
            CredentialValues(key="url", value=CredentialsUtil.AUTO_GENERATED),
            CredentialValues(
                key="aws_region", value=aws_creds.get("aws", {}).get("region")
            ),
            CredentialValues(
                key="aws_access_key_id",
                value=aws_creds.get("aws", {}).get("access_key_id"),
            ),
            CredentialValues(
                key="aws_secret_access_key",
                value=aws_creds.get("aws", {}).get("secret_access_key", ""),
            ),
        ]

    @staticmethod
    def invalid_aws_credentials():
        credentials = CredentialsUtil.aws_credentials()
        for cred in credentials:
            if cred.key == "aws_secret_access_key":
                cred.value = re.sub(r"\d", "0", cred.value)

        return credentials

    @staticmethod
    def gcp_credentials() -> List[CredentialValues]:
        gcp_creds = AwsParameterStore.get_cloud_provider_credentials("gcp")
        gcp_api_key = base64.b64decode(
            gcp_creds.get("gcp", {}).get("sa_key_in_base64", "")
        ).decode()

        return [
            CredentialValues(key="url", value=CredentialsUtil.AUTO_GENERATED),
            CredentialValues(key="gcp_api_key", value=gcp_api_key),
        ]

    @staticmethod
    def azure_credentials() -> List[CredentialValues]:
        azure_creds = AwsParameterStore.get_cloud_provider_credentials("azure")

        return [
            CredentialValues(key="url", value=CredentialsUtil.AUTO_GENERATED),
            CredentialValues(
                key="azure_subscription_id",
                value=azure_creds.get("azure", {}).get("subscription_id"),
            ),
            CredentialValues(
                key="azure_tenant_id",
                value=azure_creds.get("azure", {}).get("tenant_id"),
            ),
            CredentialValues(
                key="azure_client_id",
                value=azure_creds.get("azure", {}).get("client_id"),
            ),
            CredentialValues(
                key="azure_client_secret",
                value=azure_creds.get("azure", {}).get("client_secret"),
            ),
        ]

    @staticmethod
    def sonar_credentials() -> List[CredentialValues]:
        sonar_creds = AwsParameterStore.get_cloud_provider_credentials("sonar")
        return [
            CredentialValues(
                key="url",
                value=sonar_creds.get("sonar", {}).get("self-hosted", {}).get("url"),
            ),
            CredentialValues(
                key="token",
                value=sonar_creds.get("sonar", {}).get("self-hosted", {}).get("token"),
            ),
            CredentialValues(
                key="sonar_project_name",
                value=sonar_creds.get("sonar", {})
                .get("self-hosted", {})
                .get("projectKey"),
            ),
        ]

    @staticmethod
    def sonar_cloud_credentials() -> List[CredentialValues]:
        sonar_creds = AwsParameterStore.get_cloud_provider_credentials("sonar")
        return [
            CredentialValues(
                key="url",
                value=sonar_creds.get("sonar", {}).get("cloud", {}).get("url"),
            ),
            CredentialValues(
                key="token",
                value=sonar_creds.get("sonar", {}).get("cloud", {}).get("token"),
            ),
            CredentialValues(
                key="sonar_project_name",
                value=sonar_creds.get("sonar", {}).get("cloud", {}).get("projectKey"),
            ),
        ]

    @staticmethod
    def gitlab_credentials():
        return [
            CredentialValues(
                key="url", value=os.getenv("GITLAB_URL", "https://gitlab.com")
            ),
            CredentialValues(key="name", value="test-token-name"),
            CredentialValues(key="token", value=os.getenv("GITLAB_TOKEN", "token")),
        ]

    @staticmethod
    def github_credentials():
        return [
            CredentialValues(
                key="url", value=os.getenv("GITHUB_URL", "https://github.com")
            ),
            CredentialValues(key="name", value=""),
            CredentialValues(key="token", value=os.getenv("GITHUB_TOKEN", "token")),
        ]

    @staticmethod
    def plugin_credentials(plugin_key=None) -> List[CredentialValues]:
        creds = [CredentialValues(key="url", value=CredentialsUtil.AUTO_GENERATED)]
        if plugin_key:
            creds.append(CredentialValues(key="plugin_key", value=plugin_key))
        else:
            plugin_creds = AwsParameterStore.get_cloud_provider_credentials("plugin")
            creds.append(
                CredentialValues(key="plugin_key", value=plugin_creds["plugin"]["key"])
            )
        return creds

    @staticmethod
    def jira_credentials() -> List[CredentialValues]:
        """Create Jira credentials."""

        return [
            CredentialValues(key="url", value=os.getenv("JIRA_URL")),
            CredentialValues(key="name", value=""),
            CredentialValues(key="token", value=os.getenv("JIRA_TOKEN")),
        ]

    @staticmethod
    def jira_cloud_credentials() -> List[CredentialValues]:
        jira_creds = AwsParameterStore.get_cloud_provider_credentials("jira")

        return [
            CredentialValues(
                key="url", value=jira_creds.get("jiracloud", {}).get("url")
            ),
            CredentialValues(
                key="username", value=jira_creds.get("jiracloud", {}).get("email")
            ),
            CredentialValues(
                key="token", value=jira_creds.get("jiracloud", {}).get("token")
            ),
            CredentialValues(key="is_cloud", value=True),
        ]

    @staticmethod
    def confluence_credentials() -> List[CredentialValues]:
        """Create Confluence credentials."""

        return [
            CredentialValues(key="url", value=os.getenv("CONFLUENCE_URL")),
            CredentialValues(key="name", value=""),
            CredentialValues(key="token", value=os.getenv("CONFLUENCE_TOKEN")),
        ]

    @staticmethod
    def confluence_cloud_credentials() -> List[CredentialValues]:
        confluence_creds = AwsParameterStore.get_cloud_provider_credentials(
            "confluence"
        )

        return [
            CredentialValues(
                key="url", value=confluence_creds.get("confluencecloud", {}).get("url")
            ),
            CredentialValues(
                key="username",
                value=confluence_creds.get("confluencecloud", {}).get("email"),
            ),
            CredentialValues(
                key="token",
                value=confluence_creds.get("confluencecloud", {}).get("token"),
            ),
            CredentialValues(key="is_cloud", value=True),
        ]

    @staticmethod
    def invalid_confluence_credentials() -> List[CredentialValues]:
        return [
            CredentialValues(key="url", value=os.getenv("CONFLUENCE_URL")),
            CredentialValues(key="name", value=""),
            CredentialValues(key="token", value="wrong_token"),
        ]

    @staticmethod
    def gmail_credentials() -> List[CredentialValues]:
        """Create Gmail credentials."""

        gmail_creds = AwsParameterStore.get_cloud_provider_credentials("email")
        return [
            CredentialValues(key="url", value=gmail_creds.get("email", {}).get("url")),
            CredentialValues(
                key="smtp_username",
                value=gmail_creds.get("email", {}).get("smtp_username"),
            ),
            CredentialValues(
                key="smtp_password",
                value=gmail_creds.get("email", {}).get("smtp_password"),
            ),
        ]

    @staticmethod
    def telegram_credentials() -> List[CredentialValues]:
        """Create Telegram credentials."""

        telegram_creds = AwsParameterStore.get_cloud_provider_credentials("telegram")
        return [
            CredentialValues(
                key="token", value=telegram_creds.get("telegram", {}).get("token")
            ),
        ]

    @staticmethod
    def azure_devops_credentials() -> List[CredentialValues]:
        azure_devops_creds = AwsParameterStore.get_cloud_provider_credentials(
            "AzureDevOps"
        )
        return [
            CredentialValues(
                key="url", value=azure_devops_creds.get("azure_devops", {}).get("url")
            ),
            CredentialValues(
                key="token",
                value=azure_devops_creds.get("azure_devops", {}).get(
                    "personal_access_token"
                ),
            ),
            CredentialValues(
                key="project",
                value=azure_devops_creds.get("azure_devops", {}).get("project_name"),
            ),
            CredentialValues(
                key="organization",
                value=azure_devops_creds.get("azure_devops", {}).get(
                    "organization_name"
                ),
            ),
        ]

    @staticmethod
    def mcp_credentials() -> List[CredentialValues]:
        return [CredentialValues(key="ALLOWED_COMMANDS", value="ls,echo,mkdir")]

    @staticmethod
    def file_system_credentials() -> List[CredentialValues]:
        return [
            CredentialValues(key="url", value=CredentialsUtil.AUTO_GENERATED),
            CredentialValues(key="root_directory", value="/"),
        ]

    @staticmethod
    def open_api_credentials(token: str) -> List[CredentialValues]:
        openapi_path = os.path.join(
            os.path.dirname(__file__), "../test_data/openapi.json"
        )
        with open(openapi_path, "r") as openapi_json_file:
            openapi_spec = json.load(openapi_json_file)

        return [
            CredentialValues(key="url", value=CredentialsUtil.AUTO_GENERATED),
            CredentialValues(key="openapi_api_key", value=f"Bearer {token}"),
            CredentialValues(
                key="openapi_spec",
                value=json.dumps(openapi_spec, indent=4).replace(
                    "CODEMIE_API_DOMAIN", os.getenv("CODEMIE_API_DOMAIN")
                ),
            ),
        ]

    @staticmethod
    def elastic_credentials() -> List[CredentialValues]:
        elastic_creds = AwsParameterStore.get_cloud_provider_credentials("elastic")
        elastic_creds = (
            elastic_creds.get("elasticsearch", {})
            if EnvironmentResolver.is_preview()
            else elastic_creds.get("sandbox", {}).get("elasticsearch", {})
        )
        return [
            CredentialValues(key="url", value=elastic_creds.get("url")),
            CredentialValues(
                key="elastic_api_key_id", value=elastic_creds.get("apiKeyId")
            ),
            CredentialValues(key="elastic_api_key", value=elastic_creds.get("apiKey")),
        ]

    @staticmethod
    def sql_credentials(db_dialect: DataBaseDialect) -> List[CredentialValues]:
        sql_creds = AwsParameterStore.get_cloud_provider_credentials("sql")
        sql_creds = (
            sql_creds
            if EnvironmentResolver.is_preview()
            else sql_creds.get("sandbox", {})
        )

        return [
            CredentialValues(key="url", value=sql_creds.get(db_dialect, {}).get("url")),
            CredentialValues(
                key="dialect", value=sql_creds.get(db_dialect, {}).get("dialect")
            ),
            CredentialValues(
                key="port", value=sql_creds.get(db_dialect, {}).get("port")
            ),
            CredentialValues(
                key="database_name",
                value=sql_creds.get(db_dialect, {}).get("database_name"),
            ),
            CredentialValues(
                key="username", value=sql_creds.get(db_dialect, {}).get("username")
            ),
            CredentialValues(
                key="password", value=sql_creds.get(db_dialect, {}).get("password")
            ),
        ]

    @staticmethod
    def invalid_gcp_credentials():
        credentials = CredentialsUtil.gcp_credentials()
        for cred in credentials:
            if cred.key == "gcp_api_key":
                cred.value = re.sub(r"\d", "0", cred.value)

        return credentials

    @staticmethod
    def invalid_azure_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.azure_credentials()
        for cred in credentials:
            if cred.key == "azure_client_secret":
                cred.value = "wrong_secret"
        return credentials

    @staticmethod
    def invalid_sonar_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.sonar_credentials()
        for cred in credentials:
            if cred.key == "token":
                cred.value = "wrong_token"
        return credentials

    @staticmethod
    def invalid_sonar_cloud_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.sonar_cloud_credentials()
        for cred in credentials:
            if cred.key == "token":
                cred.value = "wrong_token"
        return credentials

    @staticmethod
    def invalid_gmail_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.gmail_credentials()
        for cred in credentials:
            if cred.key == "smtp_password":
                cred.value = "wrong_token"
        return credentials

    @staticmethod
    def invalid_jira_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.jira_credentials()
        for cred in credentials:
            if cred.key == "token":
                cred.value = "wrong_token"
        return credentials

    @staticmethod
    def invalid_ado_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.azure_devops_credentials()
        for cred in credentials:
            if cred.key == "personal_access_token":
                cred.value = "wrong_token"
        return credentials

    @staticmethod
    def invalid_git_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.gitlab_credentials()
        for cred in credentials:
            if cred.key == "token":
                cred.value = "wrong_token"
        return credentials

    @staticmethod
    def servicenow_credentials() -> List[CredentialValues]:
        """Get ServiceNow credentials from AWS Parameter Store."""
        servicenow_creds = AwsParameterStore.get_cloud_provider_credentials(
            "service_now"
        )
        return [
            CredentialValues(key="url", value=servicenow_creds.get("url")),
            CredentialValues(key="api_key", value=servicenow_creds.get("token")),
        ]

    @staticmethod
    def invalid_servicenow_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.servicenow_credentials()
        for cred in credentials:
            if cred.key == "api_key":
                cred.value = "wrong_token"
        return credentials

    @staticmethod
    def kubernetes_credentials() -> List[CredentialValues]:
        kubernetes_creds = (
            AwsParameterStore.get_cloud_provider_credentials("kubernetes")
            .get("sandbox", {})
            .get("kubernetes", {})
        )
        return [
            CredentialValues(key="url", value=CredentialsUtil.AUTO_GENERATED),
            CredentialValues(key="kubernetes_url", value=kubernetes_creds.get("url")),
            CredentialValues(
                key="kubernetes_token", value=kubernetes_creds.get("bearerToken")
            ),
        ]

    @staticmethod
    def invalid_kubernetes_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.kubernetes_credentials()
        for cred in credentials:
            if cred.key == "kubernetes_token":
                cred.value = "wrong_token"
        return credentials

    @staticmethod
    def keycloak_credentials() -> List[CredentialValues]:
        keycloak_creds = AwsParameterStore.get_cloud_provider_credentials("keycloak")
        return [
            CredentialValues(
                key="url", value=keycloak_creds.get("keycloak_admin", {}).get("url")
            ),
            CredentialValues(
                key="realm", value=keycloak_creds.get("keycloak_admin", {}).get("realm")
            ),
            CredentialValues(
                key="client_id",
                value=keycloak_creds.get("keycloak_admin", {}).get("client_id"),
            ),
            CredentialValues(
                key="client_secret",
                value=keycloak_creds.get("keycloak_admin", {}).get("client_secret"),
            ),
        ]

    @staticmethod
    def invalid_keycloak_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.keycloak_credentials()
        for cred in credentials:
            if cred.key == "client_secret":
                cred.value = "wrong_secret"
        return credentials

    @staticmethod
    def report_portal_credentials() -> List[CredentialValues]:
        report_portal_creds = AwsParameterStore.get_cloud_provider_credentials(
            "reportportal"
        )
        return [
            CredentialValues(
                key="url",
                value=report_portal_creds.get("url"),
            ),
            CredentialValues(
                key="project",
                value=report_portal_creds.get("project"),
            ),
            CredentialValues(
                key="api_key",
                value=report_portal_creds.get("api_key"),
            ),
        ]

    @staticmethod
    def invalid_report_portal_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.report_portal_credentials()
        for cred in credentials:
            if cred.key == "api_key":
                cred.value = "wrong_key"
        return credentials

    @staticmethod
    def lite_llm_credentials() -> List[CredentialValues]:
        lite_llm_creds = AwsParameterStore.get_cloud_provider_credentials("litellm")
        return [
            CredentialValues(
                key="api_key",
                value=lite_llm_creds.get("api_key"),
            ),
        ]

    @staticmethod
    def invalid_lite_llm_credentials() -> List[CredentialValues]:
        credentials = CredentialsUtil.lite_llm_credentials()
        for cred in credentials:
            if cred.key == "api_key":
                cred.value = "wrong_key"
        return credentials

    @staticmethod
    def jira_cloud_jql() -> str:
        jira_creds = AwsParameterStore.get_cloud_provider_credentials("jira")
        return jira_creds.get("jiracloud", {}).get("jql")

    @staticmethod
    def confluence_cloud_jql() -> str:
        confluence_creds = AwsParameterStore.get_cloud_provider_credentials(
            "confluence"
        )
        return confluence_creds.get("confluencecloud", {}).get("cql")

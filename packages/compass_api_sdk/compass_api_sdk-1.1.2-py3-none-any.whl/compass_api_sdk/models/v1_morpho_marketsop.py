"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .token_enum import TokenEnum
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from compass_api_sdk.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
from pydantic import model_serializer
from typing import Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class V1MorphoMarketsChain(str, Enum):
    ARBITRUM = "arbitrum"
    BASE = "base"
    ETHEREUM = "ethereum"


CollateralTokenTypedDict = TypeAliasType(
    "CollateralTokenTypedDict", Union[TokenEnum, str]
)
r"""Collateral token to identify the market."""


CollateralToken = TypeAliasType("CollateralToken", Union[TokenEnum, str])
r"""Collateral token to identify the market."""


LoanTokenTypedDict = TypeAliasType("LoanTokenTypedDict", Union[TokenEnum, str])
r"""Loan token to identify the market."""


LoanToken = TypeAliasType("LoanToken", Union[TokenEnum, str])
r"""Loan token to identify the market."""


class V1MorphoMarketsRequestTypedDict(TypedDict):
    chain: V1MorphoMarketsChain
    collateral_token: NotRequired[Nullable[CollateralTokenTypedDict]]
    r"""Collateral token to identify the market."""
    loan_token: NotRequired[Nullable[LoanTokenTypedDict]]
    r"""Loan token to identify the market."""


class V1MorphoMarketsRequest(BaseModel):
    chain: Annotated[
        V1MorphoMarketsChain,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = V1MorphoMarketsChain.BASE

    collateral_token: Annotated[
        OptionalNullable[CollateralToken],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Collateral token to identify the market."""

    loan_token: Annotated[
        OptionalNullable[LoanToken],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Loan token to identify the market."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["collateral_token", "loan_token"]
        nullable_fields = ["collateral_token", "loan_token"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

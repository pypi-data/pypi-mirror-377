[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "coordinate-parser"
version = "0.1.1"
description = "A Python library for parsing geographic coordinates in various formats"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Samantha Swift", email = "s.swift@marcura.com" }
]
maintainers = [
    { name = "Samantha Swift", email = "s.swift@marcura.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Filters",
    "Typing :: Typed",
]
keywords = ["coordinates", "latitude", "longitude", "parsing", "gis", "maritime"]
requires-python = ">=3.11"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "mypy>=1.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
]

[project.urls]
Homepage = "https://github.com/17swifts/coordinate-parser"
Repository = "https://github.com/17swifts/coordinate-parser"
Issues = "https://github.com/17swifts/coordinate-parser/issues"
Documentation = "https://github.com/17swifts/coordinate-parser#readme"

[tool.hatch.build.targets.wheel]
packages = ["src/coordinate_parser"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v --cov=coordinate_parser --cov-report=term-missing"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[tool.black]
target-version = ['py311']
line-length = 88
skip-string-normalization = false

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "B904", # raise-without-from-inside-except
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

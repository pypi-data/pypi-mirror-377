"""
Internationalization support for Cpolar Connect
"""

import os
import json
from pathlib import Path
from typing import Dict, Any, Optional
from enum import Enum


class Language(Enum):
    """Supported languages"""
    EN = "en"
    ZH = "zh"


class Messages:
    """Message translations"""
    
    # English messages
    EN = {
        # General
        "welcome": "Welcome to Cpolar Connect",
        "version": "Version",
        "help": "Help",
        
        # Authentication
        "auth.csrf_token": "Obtaining CSRF token...",
        "auth.logging_in": "Logging in as {username}...",
        "auth.login_success": "‚úÖ Successfully logged in to cpolar",
        "auth.login_failed": "Login failed. Please check your username and password.",
        "auth.password_required": "Password not found. Set CPOLAR_PASSWORD environment variable or run 'cpolar-connect init' to store password",
        "auth.logout": "Logged out from cpolar",
        
        # Tunnel
        "tunnel.fetching": "Fetching tunnel information...",
        "tunnel.found": "‚úÖ Found tunnel: {url}",
        "tunnel.not_found": "No active tunnel found. Please ensure cpolar is running on your server.",
        "tunnel.parsing_error": "Failed to parse tunnel information",
        
        # SSH
        "ssh.generating_key": "Generating SSH key pair...",
        "ssh.key_exists": "SSH key already exists: {path}",
        "ssh.uploading_key": "Uploading public key to server...",
        "ssh.need_password_for_key_upload": "Need password to upload SSH key to server",
        "ssh.trying_connect": "Attempting SSH connection as {username}@{hostname}...",
        "ssh.testing_connection": "Testing SSH connection...",
        "ssh.key_uploaded": "‚úÖ Public key uploaded successfully",
        "ssh.updating_config": "Updating SSH config...",
        "ssh.config_updated": "‚úÖ SSH config updated",
        "ssh.connecting": "Connecting to server via SSH...",
        "ssh.connected": "‚úÖ Connected to server",
        "ssh.connection_failed": "SSH connection failed: {error}",
        
        # CLI
        "cli.initializing": "Initializing Cpolar Connect...",
        "cli.init_complete": "‚úÖ Initialization complete! You can now run 'cpolar-connect' to connect to your server.",
        "cli.config_exists": "Configuration already exists. Use --force to overwrite.",
        "cli.enter_username": "Enter your cpolar username",
        "cli.enter_password": "Enter your cpolar password",
        "cli.enter_server_user": "Enter server username",
        "cli.enter_ssh_alias": "Enter SSH alias",
        "cli.enter_ports": "Enter ports to forward (comma-separated)",
        "cli.store_password": "Store password securely?",
        "cli.auto_connect": "Auto-connect after update?",
        "cli.basic_configuration": "Basic Configuration",
        "cli.connecting_server": "Connecting to server...",
        "cli.no_config": "No configuration found. Please run 'cpolar-connect init' first.",
        "cli.config_created": "‚úÖ Configuration created successfully",
        "cli.config_updated": "‚úÖ Configuration updated: {key} = {value}",
        "cli.config_saved_path": "Configuration saved to: {path}",

        # Status
        "status.title": "Cpolar Connect Status",
        "status.mode.remote": "Online",
        "status.mode.local": "Offline (local-only)",
        "status.auth_missing": "Password not available; showing local configuration only",
        "status.auth_failed": "Authentication failed; showing local configuration only: {error}",
        "status.network_failed": "Network error; showing local configuration only: {error}",
        "status.tunnel.unknown": "Unknown (not authenticated)",
        
        # Config
        "config.loading": "Loading configuration...",
        "config.saving": "Saving configuration...",
        "config.saved": "‚úÖ Configuration saved",
        "config.invalid": "Invalid configuration: {error}",
        
        # Errors
        "error.network": "Network error: {error}",
        "error.auth": "Authentication error: {error}",
        "error.tunnel": "Tunnel error: {error}",
        "error.ssh": "SSH error: {error}",
        "error.config": "Configuration error: {error}",
        "error.unknown": "Unknown error: {error}",
        "error.connection_failed": "Connection failed: {error}",
        "error.session_expired": "Session expired. Please re-authenticate.",
        "error.csrf_token_empty": "CSRF token is empty",
        "error.csrf_token_not_found": "Unable to find CSRF token. The login page structure may have changed.",
        "error.invalid_port": "Invalid port: {port}. Must be between 1-65535",
        "error.invalid_key_size": "SSH key size must be at least 1024 bits",
        "error.invalid_log_level": "Invalid log level: {level}",
        "error.invalid_language": "Invalid language: {lang}. Must be 'zh' or 'en'",
        "error.config_not_found": "Configuration file not found: {path}",
        "error.config_invalid_json": "Invalid JSON in config file: {error}",
        "error.config_load_failed": "Failed to load configuration: {error}",
        "error.config_save_failed": "Failed to save configuration: {error}",
        "error.config_create_failed": "Failed to create configuration: {error}",
        "error.config_key_not_found": "Configuration key '{key}' not found",
        "error.config_edit_failed": "Failed to open editor: {error}",
        "error.editor_not_found": "Editor '{editor}' not found. Set EDITOR environment variable.",
        "error.ssh_dir_failed": "Cannot create SSH directory: {error}",
        "error.ssh_key_gen_failed": "Failed to generate SSH key: {error}",
        "error.ssh_pubkey_regen_failed": "Failed to regenerate public key: {error}",
        "error.ssh_pubkey_not_found": "Public key not found: {path}",
        "error.ssh_upload_failed": "Failed to upload public key: {error}",
        "error.ssh_connect_failed": "Failed to connect: {error}",
        "error.ssh_auth_failed": "Failed to establish SSH key authentication",
        "error.ssh_auth_failed_detail": "SSH authentication failed for user '{username}' on {hostname}",
        "hint.check_username_password": "Please verify: 1) Server username is correct (run 'whoami' on server), 2) Password is correct",
        "hint.run_doctor": "Run 'cpolar-connect doctor' for diagnostics or 'cpolar-connect config set server.user USERNAME' to fix",
        "error.tunnel_url_invalid": "Invalid tunnel URL format: {url}",
        "error.password_clear_failed": "Failed to clear password: {error}",
        "error.keyring_access_failed": "Failed to access keyring: {error}",
        "error.password_store_failed": "Failed to store password: {error}",
        
        # Warnings
        "warning.config_exists": "Configuration already exists. Use --force to overwrite.",
        "warning.no_password": "No stored password found",
        "warning.ssh_key_exists": "Public key already exists in authorized_keys",
        "warning.ssh_auth_failed": "SSH key authentication failed, uploading public key...",
        "warning.connection_interrupted": "Connection interrupted by user",
        "warning.first_connection": "First time connection - need to upload SSH key",
        "warning.config_cancelled": "Configuration initialization cancelled",
        "warning.invalid_port_format": "Invalid port format",
        
        # Info/Tips
        "info.password_stored": "Password stored securely",
        "info.password_cleared": "Password cleared",
        "info.config_opened": "Configuration file opened in editor",
        "info.run_init": "Run 'cpolar-connect init' to create configuration",
        "info.env_password_tip": "You can also set CPOLAR_PASSWORD environment variable",
        "info.config_show_tip": "Run 'cpolar-connect config show' to view your configuration",
        
        # Doctor
        "doctor.title": "üè• Diagnosis Results",
        "doctor.running": "üîç Running diagnostics...",
        "doctor.column.check": "Check Item",
        "doctor.column.status": "Status",
        "doctor.column.message": "Details",
        "doctor.summary.title": "Summary",
        "doctor.summary.all_good": "‚úÖ All checks passed! Ready to connect.",
        "doctor.summary.has_warnings": "‚ö†Ô∏è Some warnings found, but should still work.",
        "doctor.summary.has_errors": "‚ùå Critical issues found. Please fix them before connecting.",
        "doctor.recommendations": "Recommendations",
        
        # Doctor checks
        "doctor.check.config": "Configuration file",
        "doctor.check.username": "Cpolar username",
        "doctor.check.server_user": "Server username",
        "doctor.check.password": "Password storage",
        "doctor.check.network": "Network connectivity",
        "doctor.check.cpolar_auth": "Cpolar authentication",
        "doctor.check.tunnel": "Tunnel status",
        "doctor.check.ssh_key": "SSH private key",
        "doctor.check.ssh_pubkey": "SSH public key",
        "doctor.check.ssh_config": "SSH config",
        "doctor.check.ssh_command": "SSH command",
        
        # Doctor messages
        "doctor.config.not_found": "Configuration not found. Run 'cpolar-connect init'",
        "doctor.config.no_username": "Cpolar username not configured",
        "doctor.config.no_server_user": "Server username not configured",
        "doctor.config.valid": "Configuration is valid",
        "doctor.password.found": "Password stored in keyring",
        "doctor.password.env": "Password found in environment variable",
        "doctor.password.not_found": "No password configured (will prompt when connecting)",
        "doctor.network.ok": "Network connection is good",
        "doctor.network.timeout": "Connection timeout - check your internet",
        "doctor.network.http_error": "HTTP error {status}",
        "doctor.network.error": "Network error: {error}",
        "doctor.cpolar.no_password": "Cannot test authentication without password",
        "doctor.cpolar.auth_success": "Successfully authenticated with cpolar",
        "doctor.cpolar.auth_failed": "Authentication failed: {error}",
        "doctor.tunnel.found": "Active tunnel found: {url}",
        "doctor.tunnel.not_found": "No active tunnel (server may need to run cpolar)",
        "doctor.ssh.key_exists": "SSH key exists",
        "doctor.ssh.key_will_create": "SSH key will be created on first connection",
        "doctor.ssh.key_permission": "SSH key has wrong permissions: {mode} (should be 600)",
        "doctor.ssh.pubkey_exists": "SSH public key exists",
        "doctor.ssh.pubkey_missing": "SSH public key missing (will regenerate)",
        "doctor.ssh.config_exists": "SSH config entry exists",
        "doctor.ssh.config_will_update": "SSH config will be updated on connection",
        "doctor.ssh.config_will_create": "SSH config will be created on connection",
        "doctor.command.found": "Command '{command}' is available",
        "doctor.command.not_found": "Command '{command}' not found",
        
        # Doctor recommendations
        "doctor.recommend.run_init": "Initialize configuration",
        "doctor.recommend.set_password": "Set password for cpolar authentication",
        "doctor.recommend.check_network": "Check network connectivity",
        "doctor.recommend.check_credentials": "Verify cpolar credentials",
        "doctor.recommend.check_server": "Check cpolar service on server",
        
        # Doctor command examples
        "doctor.cmd.init": "cpolar-connect init",
        "doctor.cmd.password.win": "set CPOLAR_PASSWORD=your_password",
        "doctor.cmd.password.unix": "export CPOLAR_PASSWORD=your_password",
        "doctor.cmd.password.save": "cpolar-connect init  # Save password permanently",
        "doctor.cmd.network.ping": "ping cpolar.com",
        "doctor.cmd.network.curl": "curl -I https://dashboard.cpolar.com",
        "doctor.cmd.network.check": "Check firewall/proxy settings",
        "doctor.cmd.auth.check1": "1. Username should be your email",
        "doctor.cmd.auth.check2": "2. Try logging in at https://dashboard.cpolar.com",
        "doctor.cmd.auth.check3": "3. Reset password if needed",
        "doctor.cmd.server.status": "sudo systemctl status cpolar",
        "doctor.cmd.server.start": "sudo systemctl start cpolar   # If not running",
        "doctor.cmd.server.tunnel": "cpolar tcp 22                 # Start SSH tunnel",
        "doctor.cmd.option1": "Option 1:",
        "doctor.cmd.option2": "Option 2:",
    }
    
    # Chinese messages
    ZH = {
        # ÈÄöÁî®
        "welcome": "Ê¨¢Ëøé‰ΩøÁî® Cpolar Connect",
        "version": "ÁâàÊú¨",
        "help": "Â∏ÆÂä©",
        
        # ËÆ§ËØÅ
        "auth.csrf_token": "Ê≠£Âú®Ëé∑Âèñ CSRF ‰ª§Áâå...",
        "auth.logging_in": "Ê≠£Âú®‰ª• {username} Ë∫´‰ªΩÁôªÂΩï...",
        "auth.login_success": "‚úÖ ÊàêÂäüÁôªÂΩï cpolar",
        "auth.login_failed": "ÁôªÂΩïÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Áî®Êà∑ÂêçÂíåÂØÜÁ†Å„ÄÇ",
        "auth.password_required": "Êú™ÊâæÂà∞ÂØÜÁ†Å„ÄÇËØ∑ËÆæÁΩÆ CPOLAR_PASSWORD ÁéØÂ¢ÉÂèòÈáèÊàñËøêË°å 'cpolar-connect init' Â≠òÂÇ®ÂØÜÁ†Å",
        "auth.logout": "Â∑≤‰ªé cpolar ÁôªÂá∫",
        
        # ÈößÈÅì
        "tunnel.fetching": "Ê≠£Âú®Ëé∑ÂèñÈößÈÅì‰ø°ÊÅØ...",
        "tunnel.found": "‚úÖ ÊâæÂà∞ÈößÈÅìÔºö{url}",
        "tunnel.not_found": "Êú™ÊâæÂà∞Ê¥ªÂä®ÈößÈÅì„ÄÇËØ∑Á°Æ‰øùÊúçÂä°Âô®‰∏ä cpolar Ê≠£Âú®ËøêË°å„ÄÇ",
        "tunnel.parsing_error": "Ëß£ÊûêÈößÈÅì‰ø°ÊÅØÂ§±Ë¥•",
        
        # SSH
        "ssh.generating_key": "Ê≠£Âú®ÁîüÊàê SSH ÂØÜÈí•ÂØπ...",
        "ssh.key_exists": "SSH ÂØÜÈí•Â∑≤Â≠òÂú®Ôºö{path}",
        "ssh.uploading_key": "Ê≠£Âú®‰∏ä‰º†ÂÖ¨Èí•Âà∞ÊúçÂä°Âô®...",
        "ssh.need_password_for_key_upload": "ÈúÄË¶ÅÂØÜÁ†ÅÊù•‰∏ä‰º† SSH ÂØÜÈí•Âà∞ÊúçÂä°Âô®",
        "ssh.trying_connect": "Ê≠£Âú®Â∞ùËØï‰ª• {username}@{hostname} ËøõË°å SSH ËøûÊé•...",
        "ssh.testing_connection": "Ê≠£Âú®ÊµãËØï SSH ËøûÊé•...",
        "ssh.key_uploaded": "‚úÖ ÂÖ¨Èí•‰∏ä‰º†ÊàêÂäü",
        "ssh.updating_config": "Ê≠£Âú®Êõ¥Êñ∞ SSH ÈÖçÁΩÆ...",
        "ssh.config_updated": "‚úÖ SSH ÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞",
        "ssh.connecting": "Ê≠£Âú®ÈÄöËøá SSH ËøûÊé•ÊúçÂä°Âô®...",
        "ssh.connected": "‚úÖ Â∑≤ËøûÊé•Âà∞ÊúçÂä°Âô®",
        "ssh.connection_failed": "SSH ËøûÊé•Â§±Ë¥•Ôºö{error}",
        
        # CLI
        "cli.initializing": "Ê≠£Âú®ÂàùÂßãÂåñ Cpolar Connect...",
        "cli.init_complete": "‚úÖ ÂàùÂßãÂåñÂÆåÊàêÔºÅÁé∞Âú®ÂèØ‰ª•ËøêË°å 'cpolar-connect' ËøûÊé•Âà∞ÊúçÂä°Âô®„ÄÇ",
        "cli.config_exists": "ÈÖçÁΩÆÂ∑≤Â≠òÂú®„ÄÇ‰ΩøÁî® --force Ë¶ÜÁõñ„ÄÇ",
        "cli.enter_username": "ËØ∑ËæìÂÖ• cpolar Áî®Êà∑Âêç",
        "cli.enter_password": "ËØ∑ËæìÂÖ• cpolar ÂØÜÁ†Å",
        "cli.enter_server_user": "ËØ∑ËæìÂÖ•ÊúçÂä°Âô®Áî®Êà∑Âêç",
        "cli.enter_ssh_alias": "ËØ∑ËæìÂÖ• SSH Âà´Âêç",
        "cli.enter_ports": "ËØ∑ËæìÂÖ•Ë¶ÅËΩ¨ÂèëÁöÑÁ´ØÂè£ÔºàÈÄóÂè∑ÂàÜÈöîÔºâ",
        "cli.store_password": "ÊòØÂê¶ÂÆâÂÖ®Â≠òÂÇ®ÂØÜÁ†ÅÔºü",
        "cli.auto_connect": "Êõ¥Êñ∞ÂêéËá™Âä®ËøûÊé•Ôºü",
        "cli.basic_configuration": "Âü∫Á°ÄÈÖçÁΩÆ",
        "cli.connecting_server": "Ê≠£Âú®ËøûÊé•ÊúçÂä°Âô®...",
        "cli.no_config": "Êú™ÊâæÂà∞ÈÖçÁΩÆ„ÄÇËØ∑ÂÖàËøêË°å 'cpolar-connect init'„ÄÇ",
        "cli.config_created": "‚úÖ ÈÖçÁΩÆÂàõÂª∫ÊàêÂäü",
        "cli.config_updated": "‚úÖ ÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞Ôºö{key} = {value}",
        "cli.config_saved_path": "ÈÖçÁΩÆÂ∑≤‰øùÂ≠òÂà∞Ôºö{path}",

        # Status
        "status.title": "Cpolar Áä∂ÊÄÅ",
        "status.mode.remote": "Âú®Á∫ø",
        "status.mode.local": "Á¶ªÁ∫øÔºà‰ªÖÊú¨Âú∞Ôºâ",
        "status.auth_missing": "Áº∫Â∞ëÂØÜÁ†ÅÔºå‰ªÖÂ±ïÁ§∫Êú¨Âú∞ÈÖçÁΩÆ",
        "status.auth_failed": "ËÆ§ËØÅÂ§±Ë¥•Ôºå‰ªÖÂ±ïÁ§∫Êú¨Âú∞ÈÖçÁΩÆÔºö{error}",
        "status.network_failed": "ÁΩëÁªúÂºÇÂ∏∏Ôºå‰ªÖÂ±ïÁ§∫Êú¨Âú∞ÈÖçÁΩÆÔºö{error}",
        "status.tunnel.unknown": "Êú™Áü•ÔºàÊú™ËÆ§ËØÅÔºâ",
        
        # ÈÖçÁΩÆ
        "config.loading": "Ê≠£Âú®Âä†ËΩΩÈÖçÁΩÆ...",
        "config.saving": "Ê≠£Âú®‰øùÂ≠òÈÖçÁΩÆ...",
        "config.saved": "‚úÖ ÈÖçÁΩÆÂ∑≤‰øùÂ≠ò",
        "config.invalid": "ÈÖçÁΩÆÊó†ÊïàÔºö{error}",
        
        # ÈîôËØØ
        "error.network": "ÁΩëÁªúÈîôËØØÔºö{error}",
        "error.auth": "ËÆ§ËØÅÈîôËØØÔºö{error}",
        "error.tunnel": "ÈößÈÅìÈîôËØØÔºö{error}",
        "error.ssh": "SSH ÈîôËØØÔºö{error}",
        "error.config": "ÈÖçÁΩÆÈîôËØØÔºö{error}",
        "error.unknown": "Êú™Áü•ÈîôËØØÔºö{error}",
        "error.connection_failed": "ËøûÊé•Â§±Ë¥•Ôºö{error}",
        "error.session_expired": "‰ºöËØùÂ∑≤ËøáÊúüÔºåËØ∑ÈáçÊñ∞ËÆ§ËØÅ„ÄÇ",
        "error.csrf_token_empty": "CSRF ‰ª§Áâå‰∏∫Á©∫",
        "error.csrf_token_not_found": "Êó†Ê≥ïÊâæÂà∞ CSRF ‰ª§Áâå„ÄÇÁôªÂΩïÈ°µÈù¢ÁªìÊûÑÂèØËÉΩÂ∑≤Êõ¥Êîπ„ÄÇ",
        "error.invalid_port": "Êó†ÊïàÁ´ØÂè£Ôºö{port}„ÄÇÂøÖÈ°ªÂú® 1-65535 ‰πãÈó¥",
        "error.invalid_key_size": "SSH ÂØÜÈí•Â§ßÂ∞èÂøÖÈ°ªËá≥Â∞ë‰∏∫ 1024 ‰Ωç",
        "error.invalid_log_level": "Êó†ÊïàÁöÑÊó•ÂøóÁ∫ßÂà´Ôºö{level}",
        "error.invalid_language": "Êó†ÊïàÁöÑËØ≠Ë®ÄÔºö{lang}„ÄÇÂøÖÈ°ªÊòØ 'zh' Êàñ 'en'",
        "error.config_not_found": "Êú™ÊâæÂà∞ÈÖçÁΩÆÊñá‰ª∂Ôºö{path}",
        "error.config_invalid_json": "ÈÖçÁΩÆÊñá‰ª∂‰∏≠ÁöÑ JSON Êó†ÊïàÔºö{error}",
        "error.config_load_failed": "Âä†ËΩΩÈÖçÁΩÆÂ§±Ë¥•Ôºö{error}",
        "error.config_save_failed": "‰øùÂ≠òÈÖçÁΩÆÂ§±Ë¥•Ôºö{error}",
        "error.config_create_failed": "ÂàõÂª∫ÈÖçÁΩÆÂ§±Ë¥•Ôºö{error}",
        "error.config_key_not_found": "ÈÖçÁΩÆÈîÆ '{key}' Êú™ÊâæÂà∞",
        "error.config_edit_failed": "ÊâìÂºÄÁºñËæëÂô®Â§±Ë¥•Ôºö{error}",
        "error.editor_not_found": "Êú™ÊâæÂà∞ÁºñËæëÂô® '{editor}'„ÄÇËØ∑ËÆæÁΩÆ EDITOR ÁéØÂ¢ÉÂèòÈáè„ÄÇ",
        "error.ssh_dir_failed": "Êó†Ê≥ïÂàõÂª∫ SSH ÁõÆÂΩïÔºö{error}",
        "error.ssh_key_gen_failed": "ÁîüÊàê SSH ÂØÜÈí•Â§±Ë¥•Ôºö{error}",
        "error.ssh_pubkey_regen_failed": "ÈáçÊñ∞ÁîüÊàêÂÖ¨Èí•Â§±Ë¥•Ôºö{error}",
        "error.ssh_pubkey_not_found": "Êú™ÊâæÂà∞ÂÖ¨Èí•Ôºö{path}",
        "error.ssh_upload_failed": "‰∏ä‰º†ÂÖ¨Èí•Â§±Ë¥•Ôºö{error}",
        "error.ssh_connect_failed": "ËøûÊé•Â§±Ë¥•Ôºö{error}",
        "error.ssh_auth_failed": "Âª∫Á´ã SSH ÂØÜÈí•ËÆ§ËØÅÂ§±Ë¥•",
        "error.ssh_auth_failed_detail": "SSH ËÆ§ËØÅÂ§±Ë¥•ÔºöÁî®Êà∑ '{username}' Âú®‰∏ªÊú∫ {hostname} ‰∏äËÆ§ËØÅÂ§±Ë¥•",
        "hint.check_username_password": "ËØ∑Ê£ÄÊü•Ôºö1) ÊúçÂä°Âô®Áî®Êà∑ÂêçÊòØÂê¶Ê≠£Á°ÆÔºàÂú®ÊúçÂä°Âô®ËøêË°å 'whoami' Êü•ÁúãÔºâÔºå2) ÂØÜÁ†ÅÊòØÂê¶Ê≠£Á°Æ",
        "hint.run_doctor": "ËøêË°å 'cpolar-connect doctor' ËøõË°åËØäÊñ≠ÔºåÊàñ‰ΩøÁî® 'cpolar-connect config set server.user Áî®Êà∑Âêç' ‰øÆÊ≠£",
        "error.tunnel_url_invalid": "Êó†ÊïàÁöÑÈößÈÅì URL Ê†ºÂºèÔºö{url}",
        "error.password_clear_failed": "Ê∏ÖÈô§ÂØÜÁ†ÅÂ§±Ë¥•Ôºö{error}",
        "error.keyring_access_failed": "ËÆøÈóÆÂØÜÈí•ÁéØÂ§±Ë¥•Ôºö{error}",
        "error.password_store_failed": "Â≠òÂÇ®ÂØÜÁ†ÅÂ§±Ë¥•Ôºö{error}",
        
        # Ë≠¶Âëä
        "warning.config_exists": "ÈÖçÁΩÆÂ∑≤Â≠òÂú®„ÄÇ‰ΩøÁî® --force Ë¶ÜÁõñ„ÄÇ",
        "warning.no_password": "Êú™ÊâæÂà∞Â≠òÂÇ®ÁöÑÂØÜÁ†Å",
        "warning.ssh_key_exists": "ÂÖ¨Èí•Â∑≤Â≠òÂú®‰∫é authorized_keys ‰∏≠",
        "warning.ssh_auth_failed": "SSH ÂØÜÈí•ËÆ§ËØÅÂ§±Ë¥•ÔºåÊ≠£Âú®‰∏ä‰º†ÂÖ¨Èí•...",
        "warning.connection_interrupted": "Áî®Êà∑‰∏≠Êñ≠ËøûÊé•",
        "warning.first_connection": "È¶ñÊ¨°ËøûÊé• - ÈúÄË¶Å‰∏ä‰º† SSH ÂØÜÈí•",
        "warning.config_cancelled": "ÈÖçÁΩÆÂàùÂßãÂåñÂ∑≤ÂèñÊ∂à",
        "warning.invalid_port_format": "Êó†ÊïàÁöÑÁ´ØÂè£Ê†ºÂºè",
        
        # ‰ø°ÊÅØ/ÊèêÁ§∫
        "info.password_stored": "ÂØÜÁ†ÅÂ∑≤ÂÆâÂÖ®Â≠òÂÇ®",
        "info.password_cleared": "ÂØÜÁ†ÅÂ∑≤Ê∏ÖÈô§",
        "info.config_opened": "ÈÖçÁΩÆÊñá‰ª∂Â∑≤Âú®ÁºñËæëÂô®‰∏≠ÊâìÂºÄ",
        "info.run_init": "ËøêË°å 'cpolar-connect init' ÂàõÂª∫ÈÖçÁΩÆ",
        "info.env_password_tip": "ÊÇ®‰πüÂèØ‰ª•ËÆæÁΩÆ CPOLAR_PASSWORD ÁéØÂ¢ÉÂèòÈáè",
        "info.config_show_tip": "ËøêË°å 'cpolar-connect config show' Êü•ÁúãÈÖçÁΩÆ",
        
        # ËØäÊñ≠Â∑•ÂÖ∑
        "doctor.title": "üè• ËØäÊñ≠ÁªìÊûú",
        "doctor.running": "üîç Ê≠£Âú®ËøêË°åËØäÊñ≠...",
        "doctor.column.check": "Ê£ÄÊü•È°π",
        "doctor.column.status": "Áä∂ÊÄÅ",
        "doctor.column.message": "ËØ¶ÊÉÖ",
        "doctor.summary.title": "ÊÄªÁªì",
        "doctor.summary.all_good": "‚úÖ ÊâÄÊúâÊ£ÄÊü•ÈÄöËøáÔºÅÂèØ‰ª•ËøûÊé•„ÄÇ",
        "doctor.summary.has_warnings": "‚ö†Ô∏è ÂèëÁé∞‰∏Ä‰∫õË≠¶ÂëäÔºå‰ΩÜÂ∫îËØ•‰ªçÂèØÂ∑•‰Ωú„ÄÇ",
        "doctor.summary.has_errors": "‚ùå ÂèëÁé∞‰∏•ÈáçÈóÆÈ¢ò„ÄÇËØ∑ÂÖà‰øÆÂ§çÂêéÂÜçËøûÊé•„ÄÇ",
        "doctor.recommendations": "Âª∫ËÆÆ",
        
        # ËØäÊñ≠Ê£ÄÊü•È°π
        "doctor.check.config": "ÈÖçÁΩÆÊñá‰ª∂",
        "doctor.check.username": "Cpolar Áî®Êà∑Âêç",
        "doctor.check.server_user": "ÊúçÂä°Âô®Áî®Êà∑Âêç",
        "doctor.check.password": "ÂØÜÁ†ÅÂ≠òÂÇ®",
        "doctor.check.network": "ÁΩëÁªúËøûÊé•",
        "doctor.check.cpolar_auth": "Cpolar ËÆ§ËØÅ",
        "doctor.check.tunnel": "ÈößÈÅìÁä∂ÊÄÅ",
        "doctor.check.ssh_key": "SSH ÁßÅÈí•",
        "doctor.check.ssh_pubkey": "SSH ÂÖ¨Èí•",
        "doctor.check.ssh_config": "SSH ÈÖçÁΩÆ",
        "doctor.check.ssh_command": "SSH ÂëΩ‰ª§",
        
        # ËØäÊñ≠Ê∂àÊÅØ
        "doctor.config.not_found": "Êú™ÊâæÂà∞ÈÖçÁΩÆ„ÄÇËøêË°å 'cpolar-connect init'",
        "doctor.config.no_username": "Êú™ÈÖçÁΩÆ Cpolar Áî®Êà∑Âêç",
        "doctor.config.no_server_user": "Êú™ÈÖçÁΩÆÊúçÂä°Âô®Áî®Êà∑Âêç",
        "doctor.config.valid": "ÈÖçÁΩÆÊúâÊïà",
        "doctor.password.found": "ÂØÜÁ†ÅÂ∑≤Â≠òÂÇ®Âú®ÂØÜÈí•ÁéØ‰∏≠",
        "doctor.password.env": "Âú®ÁéØÂ¢ÉÂèòÈáè‰∏≠ÊâæÂà∞ÂØÜÁ†Å",
        "doctor.password.not_found": "Êú™ÈÖçÁΩÆÂØÜÁ†ÅÔºàËøûÊé•Êó∂Â∞ÜÊèêÁ§∫ËæìÂÖ•Ôºâ",
        "doctor.network.ok": "ÁΩëÁªúËøûÊé•Ê≠£Â∏∏",
        "doctor.network.timeout": "ËøûÊé•Ë∂ÖÊó∂ - Ê£ÄÊü•‰∫íËÅîÁΩëËøûÊé•",
        "doctor.network.http_error": "HTTP ÈîôËØØ {status}",
        "doctor.network.error": "ÁΩëÁªúÈîôËØØÔºö{error}",
        "doctor.cpolar.no_password": "Ê≤°ÊúâÂØÜÁ†ÅÊó†Ê≥ïÊµãËØïËÆ§ËØÅ",
        "doctor.cpolar.auth_success": "ÊàêÂäüËÆ§ËØÅ cpolar",
        "doctor.cpolar.auth_failed": "ËÆ§ËØÅÂ§±Ë¥•Ôºö{error}",
        "doctor.tunnel.found": "ÊâæÂà∞Ê¥ªÂä®ÈößÈÅìÔºö{url}",
        "doctor.tunnel.not_found": "Ê≤°ÊúâÊ¥ªÂä®ÈößÈÅìÔºàÊúçÂä°Âô®ÂèØËÉΩÈúÄË¶ÅËøêË°å cpolarÔºâ",
        "doctor.ssh.key_exists": "SSH ÂØÜÈí•Â≠òÂú®",
        "doctor.ssh.key_will_create": "È¶ñÊ¨°ËøûÊé•Êó∂Â∞ÜÂàõÂª∫ SSH ÂØÜÈí•",
        "doctor.ssh.key_permission": "SSH ÂØÜÈí•ÊùÉÈôêÈîôËØØÔºö{mode}ÔºàÂ∫î‰∏∫ 600Ôºâ",
        "doctor.ssh.pubkey_exists": "SSH ÂÖ¨Èí•Â≠òÂú®",
        "doctor.ssh.pubkey_missing": "SSH ÂÖ¨Èí•Áº∫Â§±ÔºàÂ∞ÜÈáçÊñ∞ÁîüÊàêÔºâ",
        "doctor.ssh.config_exists": "SSH ÈÖçÁΩÆÈ°πÂ≠òÂú®",
        "doctor.ssh.config_will_update": "ËøûÊé•Êó∂Â∞ÜÊõ¥Êñ∞ SSH ÈÖçÁΩÆ",
        "doctor.ssh.config_will_create": "ËøûÊé•Êó∂Â∞ÜÂàõÂª∫ SSH ÈÖçÁΩÆ",
        "doctor.command.found": "ÂëΩ‰ª§ '{command}' ÂèØÁî®",
        "doctor.command.not_found": "ÂëΩ‰ª§ '{command}' Êú™ÊâæÂà∞",
        
        # ËØäÊñ≠Âª∫ËÆÆ
        "doctor.recommend.run_init": "ÂàùÂßãÂåñÈÖçÁΩÆ",
        "doctor.recommend.set_password": "ËÆæÁΩÆ cpolar ËÆ§ËØÅÂØÜÁ†Å",
        "doctor.recommend.check_network": "Ê£ÄÊü•ÁΩëÁªúËøûÊé•",
        "doctor.recommend.check_credentials": "È™åËØÅ cpolar Âá≠ÊçÆ",
        "doctor.recommend.check_server": "Ê£ÄÊü•ÊúçÂä°Âô®‰∏äÁöÑ cpolar ÊúçÂä°",
        
        # ËØäÊñ≠ÂëΩ‰ª§Á§∫‰æã
        "doctor.cmd.init": "cpolar-connect init",
        "doctor.cmd.password.win": "set CPOLAR_PASSWORD=‰Ω†ÁöÑÂØÜÁ†Å",
        "doctor.cmd.password.unix": "export CPOLAR_PASSWORD=‰Ω†ÁöÑÂØÜÁ†Å",
        "doctor.cmd.password.save": "cpolar-connect init  # Ê∞∏‰πÖ‰øùÂ≠òÂØÜÁ†Å",
        "doctor.cmd.network.ping": "ping cpolar.com",
        "doctor.cmd.network.curl": "curl -I https://dashboard.cpolar.com",
        "doctor.cmd.network.check": "Ê£ÄÊü•Èò≤ÁÅ´Â¢ô/‰ª£ÁêÜËÆæÁΩÆ",
        "doctor.cmd.auth.check1": "1. Áî®Êà∑ÂêçÂ∫îËØ•ÊòØÊÇ®ÁöÑÈÇÆÁÆ±",
        "doctor.cmd.auth.check2": "2. Â∞ùËØïÂú® https://dashboard.cpolar.com ÁôªÂΩï",
        "doctor.cmd.auth.check3": "3. Â¶ÇÈúÄË¶ÅÔºåÈáçÁΩÆÂØÜÁ†Å",
        "doctor.cmd.server.status": "sudo systemctl status cpolar",
        "doctor.cmd.server.start": "sudo systemctl start cpolar   # Â¶ÇÊûúÊú™ËøêË°å",
        "doctor.cmd.server.tunnel": "cpolar tcp 22                 # ÂêØÂä® SSH ÈößÈÅì",
        "doctor.cmd.option1": "ÊñπÂºè1:",
        "doctor.cmd.option2": "ÊñπÂºè2:",
    }


class I18n:
    """Internationalization manager"""
    
    def __init__(self, language: Optional[Language] = None):
        """
        Initialize i18n with specified language
        
        Args:
            language: Language to use, auto-detect if None
        """
        if language is None:
            language = self._detect_language()
        
        self.language = language
        self.messages = self._get_messages(language)
    
    def _detect_language(self) -> Language:
        """
        Auto-detect language from environment
        
        Priority:
        1. CPOLAR_LANG environment variable
        2. LANG environment variable
        3. Default to Chinese
        """
        # Check CPOLAR_LANG first (only zh/en)
        cpolar_lang = os.environ.get('CPOLAR_LANG', '').lower()
        if cpolar_lang == 'en':
            return Language.EN
        elif cpolar_lang == 'zh':
            return Language.ZH
        
        # Check system LANG
        system_lang = os.environ.get('LANG', '').lower()
        if 'zh' in system_lang:
            return Language.ZH
        elif 'en' in system_lang:
            return Language.EN
        
        # Default to Chinese for Chinese users
        return Language.ZH
    
    def _get_messages(self, language: Language) -> Dict[str, str]:
        """Get messages for specified language"""
        if language == Language.EN:
            return Messages.EN
        elif language == Language.ZH:
            return Messages.ZH
        else:
            return Messages.ZH  # Default
    
    def get(self, message_key: str, **kwargs) -> str:
        """
        Get translated message
        
        Args:
            message_key: Message key (e.g., 'auth.login_success')
            **kwargs: Format parameters
            
        Returns:
            Translated and formatted message
        """
        message = self.messages.get(message_key, message_key)
        
        # Format message with parameters
        if kwargs:
            try:
                message = message.format(**kwargs)
            except KeyError as e:
                # If formatting fails, return message with error indication
                message = f"{message} [Format error: {e}]"
        
        return message
    
    def set_language(self, language: Language) -> None:
        """
        Change language at runtime
        
        Args:
            language: New language to use
        """
        self.language = language
        self.messages = self._get_messages(language)
    
    @classmethod
    def load_from_config(cls, config_path: Optional[Path] = None) -> 'I18n':
        """
        Load language preference from config file
        
        Args:
            config_path: Path to config file
            
        Returns:
            I18n instance with configured language
        """
        if config_path is None:
            config_path = Path.home() / ".cpolar_connect" / "config.json"
        
        language = None
        if config_path.exists():
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    lang_str = config.get('language', '').lower()
                    if lang_str in ['en', 'english']:
                        language = Language.EN
                    elif lang_str in ['zh', 'chinese', 'cn']:
                        language = Language.ZH
            except Exception:
                pass
        
        return cls(language)


# Global i18n instance
_i18n: Optional[I18n] = None


def get_i18n() -> I18n:
    """Get or create global i18n instance"""
    global _i18n
    if _i18n is None:
        _i18n = I18n.load_from_config()
    return _i18n


def set_language(language: Language) -> None:
    """Set global language"""
    i18n = get_i18n()
    i18n.set_language(language)


def _(message_key: str, **kwargs) -> str:
    """
    Shortcut for getting translated message
    
    Usage:
        from cpolar_connect.i18n import _
        print(_('auth.login_success'))
        print(_('auth.logging_in', username='user@example.com'))
    """
    i18n = get_i18n()
    return i18n.get(message_key, **kwargs)

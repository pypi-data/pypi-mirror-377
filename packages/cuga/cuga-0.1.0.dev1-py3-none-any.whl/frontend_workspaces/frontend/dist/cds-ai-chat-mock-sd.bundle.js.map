{"version":3,"file":"cds-ai-chat-mock-sd.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEmG;AACsB;AAC1G;AACK;AACS;AACN;AACF;AACR;AACc;AAC0C;AACO;AACrC;AACkC;AACF;AACzC;AACP;AACe;AACC;AACkC;AACJ;AACa;AACf;AACG;AACD;AACO;AACzD;AACqE;AACd;AACG;AACN;AACG;AACR;AACQ;AACJ;AACF;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,2BAA2B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C,sCAAsC,eAAe,SAAS,OAAO,uKAAuK;AAC5O;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,eAAe;AACnF,mCAAmC,mDAA4B;AAC/D;AACA;AACA;AACA;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,mDAAmD;AACtH;AACA;AACA,0FAA0F,yBAAyB;AACnH,mFAAmF,QAAQ;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mDAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mDAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAS;AACnC;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0CAA0C;AAC5D,kBAAkB,0CAA0C;AAC5D,kBAAkB,0CAA0C;AAC5D;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,IAAI,wBAAwB,IAAI,wBAAwB;AAC/G;AACA;AACA;AACA,8BAA8B,uBAAuB,IAAI,sBAAsB,IAAI,sBAAsB;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAU;AACtC,+CAA+C,gDAAoB;AACnE;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAU;AACtC,+CAA+C,gDAAoB;AACnE,sCAAsC,gDAAc;AACpD,6CAA6C,gDAAc;AAC3D;AACA;AACA;AACA,6BAA6B;AAC7B,4BAA4B,mDAAU;AACtC,+CAA+C,gDAAoB;AACnE,sCAAsC,gDAAc;AACpD,6CAA6C,gDAAc;AAC3D;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAU;AACtC,+CAA+C,gDAAoB;AACnE;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAU;AACtC,+CAA+C,gDAAoB;AACnE;AACA,6BAA6B;AAC7B,4BAA4B,mDAAU;AACtC,+CAA+C,gDAAoB;AACnE,gDAAgD,mCAAmC;AACnF,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAU;AACtC,+CAA+C,gDAAoB;AACnE;AACA,6BAA6B;AAC7B,4BAA4B,mDAAU;AACtC,+CAA+C,gDAAoB;AACnE;AACA,6BAA6B;AAC7B,4BAA4B,mDAAU;AACtC,+CAA+C,gDAAoB;AACnE;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,gDAAgD;AAChD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,sBAAsB;AACpG,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF;AACpF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,gDAAgD;;AAEhD;;AAEA;AACA;;AAEsS","sources":["webpack://@carbon/ai-chat-examples-web-components-basic/../node_modules/.pnpm/@carbon+ai-chat@0.3.3_@carbon+icon-helpers@10.65.0_@carbon+icons@11.66.0_@carbon+react@_2d1b4ff090e346b709104e64783ade7d/node_modules/@carbon/ai-chat/dist/es/mockServiceDesk.js"],"sourcesContent":["/**\n* @license\n* \n* (C) Copyright IBM Corp. 2017, 2025. All Rights Reserved.\n* \n* Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n* in compliance with the License. You may obtain a copy of the License at\n* \n* http://www.apache.org/licenses/LICENSE-2.0\n* \n* Unless required by applicable law or agreed to in writing, software distributed under the License\n* is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n* or implied. See the License for the specific language governing permissions and limitations under\n* the License.\n* \n* @carbon/ai-chat 0.3.3\n* \n* Built: Jul 11 2025 1:09 pm -04:00\n* \n* \n*/\n\nimport { J as createMessageResponseForText, R as sleep, S as assertType } from './AppContainer.js';\nimport { E as ErrorType, j as MessageResponseTypes, d as ButtonItemKind, b as ButtonItemType } from './customElement.js';\nimport 'react';\nimport 'react-intl';\nimport '@carbon/icons-react';\nimport '@carbon/react';\nimport 'react-redux';\nimport 'lit';\nimport 'lit/decorators.js';\nimport '@carbon/web-components/es-custom/components/button/index.js';\nimport '@carbon/web-components/es-custom/components/overflow-menu/index.js';\nimport 'lit/directives/unsafe-html.js';\nimport '@carbon/web-components/es-custom/components/data-table/index.js';\nimport '@carbon/web-components/es-custom/components/checkbox/index.js';\nimport '@carbon/icon-helpers';\nimport '@carbon/icons';\nimport 'lit/directives/unsafe-svg.js';\nimport 'lit-html/directives/repeat.js';\nimport '@carbon/web-components/es-custom/components/pagination/index.js';\nimport '@carbon/web-components/es-custom/components/select/index.js';\nimport '@carbon/web-components/es-custom/components/data-table/table-skeleton.js';\nimport '@carbon/web-components/es-custom/components/slug/index.js';\nimport '@carbon/web-components/es-custom/components/ai-label/defs.js';\nimport '@carbon/web-components/es-custom/components/popover/defs.js';\nimport '@carbon/web-components/es-custom/components/skeleton-icon/index.js';\nimport 'react-dom';\nimport '@carbon/web-components/es-custom/components/ai-label/ai-label-action-button.js';\nimport '@carbon/web-components/es-custom/components/ai-label/ai-label.js';\nimport '@carbon/web-components/es-custom/components/inline-loading/index.js';\nimport '@carbon/web-components/es-custom/components/textarea/index.js';\nimport '@carbon/web-components/es-custom/components/icon-button/index.js';\nimport '@carbon/web-components/es-custom/components/tag/index.js';\nimport '@carbon/web-components/es-custom/components/chat-button/index.js';\nimport '@carbon/web-components/es-custom/components/button/button.js';\nimport '@carbon/web-components/es-custom/components/layer/index.js';\n\nvar ConnectInfoType;\n(function (ConnectInfoType) {\n    /**\n     * The connecting status will not show any information.\n     */\n    ConnectInfoType[ConnectInfoType[\"NONE\"] = 1] = \"NONE\";\n    /**\n     * The connecting status will show information about the user's position in a queue.\n     */\n    ConnectInfoType[ConnectInfoType[\"LINE\"] = 2] = \"LINE\";\n    /**\n     * The connecting status will show information about the wait time in minutes for the user.\n     */\n    ConnectInfoType[ConnectInfoType[\"MINUTES\"] = 3] = \"MINUTES\";\n    /**\n     * The connecting status will show a series of custom messages.\n     */\n    ConnectInfoType[ConnectInfoType[\"MESSAGE\"] = 4] = \"MESSAGE\";\n    /**\n     * Starting a chat will result in a connecting error {@link ErrorType.CONNECTING}.\n     */\n    ConnectInfoType[ConnectInfoType[\"CONNECTING_ERROR\"] = 5] = \"CONNECTING_ERROR\";\n    /**\n     * Starting a chat will just fail with the service desk throwing an error.\n     */\n    ConnectInfoType[ConnectInfoType[\"THROW_ERROR\"] = 6] = \"THROW_ERROR\";\n})(ConnectInfoType || (ConnectInfoType = {}));\nconst HELLO_TEXT = (userName) => `Hi${userName ? ` ${userName}` : ''}, I'm Shepard! I'm a **mock** service desk agent. Type *\"help\"* to see a list of messages you can mock me with. <script>alert(\"If you see this, it is a serious bug!\");</script>`;\nconst TEXT_LONG = 'The biggest problem that teams encounter when dealing with coding standards is the ' +\n    'variety of opinions on the subject or the introduction of new team members who are familiar with a' +\n    \" different standard. The first point I would make to address this is that I don't believe that what\" +\n    ' exactly is in your coding standard is nearly as important as having a standard and using it consistently.' +\n    \" It doesn't matter if you want braces to be on the following line or the same line as long as whatever you\" +\n    ' do is consistent.\\n\\nBut those who don\\'t agree to a specific point are likely to feel that it\\'s \"wrong\"' +\n    ' and not just \"different.\" Over my career I have worked on a lot of different projects with a wide range' +\n    ' of coding standards and in my experience, it takes relatively little time to adopt a new standard once' +\n    ' you\\'ve set aside your resistance to it. You may feel that putting braces on the same line is \"wrong\"' +\n    ' but I bet that if you try it, in just a few days you will begin to feel that the new style is \"right\"' +\n    ' and it\\'s now your old style that\\'s \"wrong\".\\n\\nAs an example, I spent 20 years of my life believing that' +\n    ' you were supposed to end a sentence with two spaces instead of one. Then one day I started to notice in ' +\n    'javadoc comments that other members of my team used just one. I decided to go look up the best practices for ' +\n    \"this and concluded that the two spaces were outdated and it's now generally accepted to use just one. I made a \" +\n    'few weak attempts to change but I just found it hard to switch a habit that I had had for so long. One day I ' +\n    'finally decided to practice what I preach and made a serious attempt to relegate that extra space to history ' +\n    'and sure enough, within a couple of days I no longer had any difficulty typing one space instead of two and in ' +\n    'not much time after that, I found myself occasionally noticing the two spaces in old code of mine and found that ' +\n    'it did indeed look odd now...\\n\\n' +\n    '[More](https://medium.com/@damon.lundin/on-coding-standards-4420e3fa281f)\\n\\n<script>alert(\"If you see this, it is a serious bug!\")</script>';\nconst PROFILE_URL_PREFIX = 'https://web-chat.assistant.test.watson.cloud.ibm.com';\nconst MOCK_AGENT_PROFILE_SHEPARD = {\n    id: 'CommanderShepard-id',\n    nickname: 'Shepard',\n    profile_picture_url: `${PROFILE_URL_PREFIX}/assets/example_avatar_1.png`,\n};\nconst MOCK_AGENT_PROFILE_GARRUS = {\n    id: 'GarrusVakarian-id',\n    nickname: 'Garrus',\n    profile_picture_url: `${PROFILE_URL_PREFIX}/assets/example_avatar_2.png`,\n};\nconst MOCK_AGENT_PROFILE_LEGION = {\n    id: 'Legion-id',\n    nickname: 'Legion',\n    profile_picture_url: `${PROFILE_URL_PREFIX}/assets/example_avatar_missing.png`,\n};\nconst MOCK_AGENT_PROFILE_EMPTY = {\n    id: null,\n    nickname: null,\n};\n// The agent we're currently talking to.\nclass MockServiceDesk {\n    constructor(parameters) {\n        /**\n         * The current internal state for the mock service desk. This object is exported by this module and these values may\n         * be controlled by external code.\n         */\n        this.mockState = {\n            connectDelayFactor: 1,\n            connectInfoType: ConnectInfoType.LINE,\n            agentAvailabilityDelay: 0,\n            agentAvailability: true,\n            showStateChanges: false,\n            currentAgent: MOCK_AGENT_PROFILE_SHEPARD,\n        };\n        console.log('Creating MockServiceDesk');\n        this.factoryParameters = parameters;\n        this.chatInstance = parameters.instance;\n        this.callback = parameters.callback;\n        this.callback.updateCapabilities({\n            allowFileUploads: true,\n            allowedFileUploadTypes: 'image/*,.txt',\n            allowMultipleFileUploads: true,\n        });\n        window.watsonAssistantChat = window.watsonAssistantChat || {};\n        window.watsonAssistantChat.mockServiceDesk = this;\n    }\n    getName() {\n        return 'wac mock service desk';\n    }\n    updateState(state) {\n        this.state = state;\n        if (this.hasStarted && this.mockState.showStateChanges) {\n            runSteps(this, STATE_CHANGED(state));\n        }\n    }\n    startChat(connectMessage, startChatOptions) {\n        console.log(`MockServiceDesk [startChat]: connectMessage`, connectMessage);\n        console.log(`MockServiceDesk [startChat]: startChatOptions`, startChatOptions);\n        this.preStartChatPayload = startChatOptions.preStartChatPayload || {};\n        if (this.mockState.connectInfoType === ConnectInfoType.CONNECTING_ERROR) {\n            return runSteps(this, START_CHAT_CONNECT_ERROR(this.mockState));\n        }\n        if (this.mockState.connectInfoType === ConnectInfoType.THROW_ERROR) {\n            throw new Error('The mock service desk threw an error during startChat!');\n        }\n        if (this.mockState.connectDelayFactor === 0) {\n            return runSteps(this, START_CHAT_IMMEDIATELY(this.preStartChatPayload.userName));\n        }\n        if (this.mockState.connectInfoType === ConnectInfoType.NONE) {\n            return runSteps(this, START_CHAT_NO_INFO(this.preStartChatPayload.userName, this.mockState));\n        }\n        this.hasStarted = true;\n        return runSteps(this, START_CHAT(this.preStartChatPayload.userName, this.mockState));\n    }\n    endChat(info) {\n        console.log(`MockServiceDesk [endChat]`, info);\n        let surveyResponse;\n        if (info.preEndChatPayload?.wasAgentHelpful === true) {\n            surveyResponse = 'We understand that you found the agent helpful. He will be given a cookie!';\n        }\n        else if (info.preEndChatPayload?.wasAgentHelpful === false) {\n            surveyResponse = 'We are sorry that the agent was not helpful. He will be reassigned to Siberia.';\n        }\n        if (surveyResponse) {\n            const text = `Thank you for responding to our survey. ${surveyResponse}`;\n            this.sendMessageToUser(createMessageResponseForText(text), this.mockState.currentAgent.id);\n        }\n        return Promise.resolve();\n    }\n    userTyping(isTyping) {\n        console.log(`MockServiceDesk [userTyping]: isTyping=${isTyping}`);\n        return Promise.resolve();\n    }\n    sendMessageToAgent(message, _messageID, additionalData) {\n        console.log(`MockServiceDesk [sendMessageToAgent]`, message, additionalData);\n        const { text } = message.input;\n        // Send a message back whenever we get a message from the user.\n        let steps;\n        if (!text) ;\n        else {\n            const textLower = text.toLowerCase();\n            if (textLower.includes('help')) {\n                steps = MESSAGE_TO_AGENT_HELP();\n            }\n            else if (textLower.includes('blank')) {\n                steps = null;\n            }\n            else if (textLower.includes('joke')) {\n                steps = MESSAGE_TO_AGENT_JOKE();\n            }\n            else if (textLower.includes('someone else')) {\n                if (this.mockState.currentAgent === MOCK_AGENT_PROFILE_SHEPARD ||\n                    this.mockState.currentAgent === MOCK_AGENT_PROFILE_EMPTY) {\n                    steps = TRANSFER_TO_GARRUS();\n                }\n                else if (this.mockState.currentAgent === MOCK_AGENT_PROFILE_GARRUS) {\n                    steps = TRANSFER_TO_LEGION();\n                }\n                else {\n                    steps = TRANSFER_TO_EMPTY();\n                }\n            }\n            else if (textLower.includes('text long')) {\n                steps = MESSAGE_TO_AGENT_TEXT(TEXT_LONG);\n            }\n            else if (textLower.includes('text medium')) {\n                steps = MESSAGE_TO_AGENT_TEXT(\"Thanks for being so interesting! I'm sure we're going to have a *wonderful* conversation. Let's get started...\");\n            }\n            else if (textLower.includes('markdown')) {\n                steps = MESSAGE_TO_AGENT_TEXT(MARKDOWN);\n            }\n            else if (textLower.includes('multiple')) {\n                steps = MESSAGE_TO_AGENT_MULTIPLE();\n            }\n            else if (textLower.includes('hide')) {\n                steps = MESSAGE_TO_AGENT_TEXT('Session history will hide this message!');\n            }\n            else if (textLower.includes('secret')) {\n                steps = MESSAGE_TO_AGENT_TEXT(\"I'm afraid I don't know any secrets!\");\n            }\n            else if (textLower.includes('version')) {\n                steps = MESSAGE_TO_AGENT_TEXT(`Web chat version: ${this.factoryParameters.instance.getWidgetVersion()}`);\n            }\n            else if (textLower.includes('intl')) {\n                const message = this.factoryParameters.instance.getIntl().formatMessage({ id: 'input_placeholder' });\n                steps = MESSAGE_TO_AGENT_TEXT(`Intl string (input_placeholder): *${message}*`);\n            }\n            else if (textLower.includes('leave')) {\n                steps = MESSAGE_TO_AGENT_LEAVE_CHAT();\n            }\n            else if (textLower.includes('text')) {\n                steps = MESSAGE_TO_AGENT_TEXT(\"TypeScript is awesome! I don't know how anyone can live without it. Seriously?!\");\n            }\n            else if (textLower.includes('upload')) {\n                steps = MESSAGE_TO_AGENT_TEXT('Alright, you can upload some files. But only .png files please.', 0, false);\n            }\n            else if (textLower.includes('message throw')) {\n                steps = MESSAGE_THROW();\n            }\n            else if (textLower.includes('image')) {\n                steps = MESSAGE_IMAGE();\n            }\n            else if (textLower.includes('files')) {\n                steps = MESSAGE_FILES();\n            }\n            else if (textLower.includes('video')) {\n                steps = MESSAGE_VIDEO();\n            }\n            else if (textLower.includes('custom')) {\n                steps = MESSAGE_CUSTOM();\n            }\n            else if (textLower.includes('hang')) {\n                steps = HANG_MESSAGE();\n            }\n            else {\n                steps = MESSAGE_TO_AGENT_TEXT('If you say so. Type *\"help\"* for a list of other things you can say.');\n            }\n        }\n        // Handle any file uploads we may have.\n        if (additionalData.filesToUpload) {\n            additionalData.filesToUpload.forEach(file => {\n                // Use a setTimeout to simulate a random amount of time it takes to upload a file.\n                setTimeout(() => {\n                    let errorMessage;\n                    if (!file.file.name.endsWith('.png')) {\n                        errorMessage = 'Only .png files may be uploaded.';\n                    }\n                    this.callback.setFileUploadStatus(file.id, Boolean(errorMessage), errorMessage);\n                }, Math.random() * 5000 + 1);\n            });\n        }\n        return runSteps(this, steps);\n    }\n    filesSelectedForUpload(uploads) {\n        console.log(`MockServiceDesk [filesSelectedForUpload]`, uploads);\n        uploads.forEach(file => {\n            if (file.file.name.toLowerCase().startsWith('a')) {\n                this.callback.setFileUploadStatus(file.id, true, 'You may not upload files that start with the letter \"A\"! Duh.');\n            }\n        });\n    }\n    userReadMessages() {\n        console.log(`MockServiceDesk [userReadMessages]`);\n        return Promise.resolve();\n    }\n    sendMessageToUser(message, agentID) {\n        // As soon as the agent sends a message, make sure to clear the \"isTyping\" event for the agent.\n        this.callback.agentTyping(false);\n        this.callback.sendMessageToUser(message, agentID);\n    }\n    async areAnyAgentsOnline() {\n        if (this.mockState.agentAvailabilityDelay) {\n            await sleep(this.mockState.agentAvailabilityDelay * 1000);\n        }\n        return this.mockState.agentAvailability;\n    }\n    async screenShareStop() {\n        this.callback.sendMessageToUser('Alright, you have stopped sharing your screen.', this.mockState.currentAgent.id);\n    }\n    async reconnect() {\n        await sleep(2000);\n        this.hasStarted = true;\n        return true;\n    }\n}\n/**\n * This function will run a series of steps to simulate some interaction between the agent and a user.\n */\nfunction runSteps(instance, steps) {\n    if (steps) {\n        let totalTime = 0;\n        steps.forEach(step => {\n            totalTime += step.delay || 0;\n            setTimeout(() => {\n                step.callback(instance);\n            }, totalTime);\n        });\n        const lastStep = steps[steps.length - 1];\n        // If the last step has some extra work to do in a Promise, then return that Promise. Otherwise, return a no-op.\n        return lastStep.returnPromise || Promise.resolve();\n    }\n    return Promise.resolve();\n}\n// Immediately start a chat with no delays.\nfunction START_CHAT_IMMEDIATELY(userName) {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                instance.mockState.currentAgent = MOCK_AGENT_PROFILE_SHEPARD;\n                instance.callback.agentJoined(MOCK_AGENT_PROFILE_SHEPARD);\n                instance.sendMessageToUser(HELLO_TEXT(userName), instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\nfunction START_CHAT_NO_INFO(userName, mockState) {\n    return [\n        {\n            delay: 1000 * mockState.connectDelayFactor,\n            callback: (instance) => {\n                mockState.currentAgent = MOCK_AGENT_PROFILE_SHEPARD;\n                instance.callback.agentJoined(MOCK_AGENT_PROFILE_SHEPARD);\n            },\n        },\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.callback.agentTyping(true);\n            },\n        },\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.sendMessageToUser(HELLO_TEXT(userName), MOCK_AGENT_PROFILE_SHEPARD.id);\n            },\n        },\n    ];\n}\nfunction START_CHAT_CONNECT_ERROR(mockState) {\n    return [\n        {\n            delay: 1000 * mockState.connectDelayFactor,\n            callback: (instance) => {\n                mockState.currentAgent = MOCK_AGENT_PROFILE_SHEPARD;\n                instance.callback.setErrorStatus({\n                    type: ErrorType.CONNECTING,\n                    logInfo: 'Error!',\n                    messageToUser: 'Apparently all our agents are taking naps',\n                });\n            },\n        },\n    ];\n}\n// Starts a chat with a standard sequence of events with low delays on them.\nfunction START_CHAT(userName, mockState) {\n    let availability;\n    switch (mockState?.connectInfoType) {\n        case ConnectInfoType.MESSAGE: {\n            availability = [\n                { message: 'Agent getting on a *plane*...' },\n                { message: 'Agent getting on a *train*...' },\n                { message: 'Agent getting into a *car*...' },\n            ];\n            break;\n        }\n        case ConnectInfoType.MINUTES: {\n            availability = [{ estimated_wait_time: 30 }, { estimated_wait_time: 2 }, { estimated_wait_time: 1 }];\n            break;\n        }\n        default: {\n            availability = [{ position_in_queue: 30 }, { position_in_queue: 2 }, { position_in_queue: 1 }];\n            break;\n        }\n    }\n    return [\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.callback.updateAgentAvailability(availability[0]);\n            },\n        },\n        {\n            delay: 500 * mockState.connectDelayFactor,\n            callback: (instance) => {\n                instance.callback.updateAgentAvailability(availability[1]);\n            },\n        },\n        {\n            delay: 1000 * mockState.connectDelayFactor,\n            callback: (instance) => {\n                instance.callback.updateAgentAvailability(availability[2]);\n            },\n        },\n        {\n            delay: 1000,\n            callback: (instance) => {\n                mockState.currentAgent = MOCK_AGENT_PROFILE_SHEPARD;\n                instance.callback.agentJoined(MOCK_AGENT_PROFILE_SHEPARD);\n            },\n        },\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.callback.agentTyping(true);\n            },\n        },\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.sendMessageToUser(HELLO_TEXT(userName), mockState.currentAgent.id);\n            },\n        },\n    ];\n}\n// Help messages\nconst HELP_TEXT = `You can send me the messages below to get a specific response from me.\\n\\n\n**text**: I will say something pithy.\n**text medium**: I will send you a few lines of text.\n**text long**: I will bore you with a treatise on coding standards.\n**joke**: I will tell you a joke with after a longer pause with multiple pauses in between messages.\n**someone else**: I will transfer you to someone not as nice as I am.\n**multiple**: I will output a response with multiple items in it.\n**version**: I will output the version of web chat being used.\n**intl**: I will output the current value for a translatable string.\n**message throw**: This will throw an error while sending this message.\n**hang**: The service desk will never respond to this message.\n**leave**: I will leave the chat without ending it.\n**hide**: I will send a message that should get hidden from session history.\n**hide this message**: The user message should be hidden from session history.\n**secret**: I will send you a message with the word \"secret\" in it.\n**image**: I will insert an image response.\n**files**: I will insert some file responses.\n**video**: I will insert a video response.\n**custom**: I will insert a custom response.\n**markdown**: I will insert some markdown.`;\nfunction MESSAGE_TO_AGENT_HELP() {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                instance.sendMessageToUser('***These messages must be sent to an agent and not to the bot.***', instance.mockState.currentAgent.id);\n                instance.sendMessageToUser(HELP_TEXT, instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\n// A message to the agent to respond with some simple text.\nfunction MESSAGE_TO_AGENT_TEXT(text, delay = 1000, showTyping = true) {\n    const steps = [];\n    if (showTyping) {\n        steps.push({\n            delay,\n            callback: (instance) => {\n                instance.callback.agentReadMessages();\n                instance.callback.agentTyping(true);\n            },\n        });\n    }\n    steps.push({\n        delay,\n        callback: (instance) => {\n            instance.sendMessageToUser(text, instance.mockState.currentAgent.id);\n        },\n    });\n    return steps;\n}\n// A response to talk to someone else.\nfunction TRANSFER_TO_GARRUS() {\n    return [\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.callback.agentReadMessages();\n                instance.callback.agentTyping(true);\n            },\n        },\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.sendMessageToUser('Noooooo! I thought we were getting along so well!', instance.mockState.currentAgent.id);\n            },\n        },\n        {\n            delay: 500,\n            callback: (instance) => {\n                instance.callback.agentReadMessages();\n                instance.callback.agentTyping(true);\n            },\n        },\n        {\n            delay: 500,\n            callback: (instance) => {\n                instance.sendMessageToUser(\"Okay, I'll find **someone else** you can talk to.\", instance.mockState.currentAgent.id);\n            },\n        },\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.callback.beginTransferToAnotherAgent();\n            },\n        },\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.mockState.currentAgent = MOCK_AGENT_PROFILE_GARRUS;\n                instance.callback.agentJoined(MOCK_AGENT_PROFILE_GARRUS);\n            },\n        },\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.callback.agentReadMessages();\n                instance.callback.agentTyping(true);\n            },\n        },\n        {\n            delay: 500,\n            callback: (instance) => {\n                instance.sendMessageToUser(\"Hi! I'm **Garrus** and I'm nicer than **Shepard**!\", instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\n// A response to talk to a third agent.\nfunction TRANSFER_TO_LEGION() {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                instance.sendMessageToUser(\"You'll regret this.\", instance.mockState.currentAgent.id);\n            },\n        },\n        {\n            delay: 0,\n            callback: (instance) => {\n                instance.callback.agentReadMessages();\n                instance.callback.agentTyping(true);\n            },\n        },\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.mockState.currentAgent = MOCK_AGENT_PROFILE_LEGION;\n                instance.callback.beginTransferToAnotherAgent(MOCK_AGENT_PROFILE_LEGION);\n                instance.callback.agentJoined(MOCK_AGENT_PROFILE_LEGION);\n            },\n        },\n        {\n            delay: 0,\n            callback: (instance) => {\n                instance.sendMessageToUser('Shepard-Commander.', instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\n// A response to trigger the agent leaving the chat.\nfunction MESSAGE_TO_AGENT_LEAVE_CHAT() {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                instance.sendMessageToUser('I am leaving now!', instance.mockState.currentAgent.id);\n                instance.callback.agentLeftChat();\n            },\n        },\n    ];\n}\n// A response to talk to an agent with no name.\nfunction TRANSFER_TO_EMPTY() {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                instance.sendMessageToUser('Transferring you to a no-name.', instance.mockState.currentAgent.id);\n                instance.mockState.currentAgent = MOCK_AGENT_PROFILE_EMPTY;\n                instance.callback.agentJoined(MOCK_AGENT_PROFILE_EMPTY);\n                instance.sendMessageToUser('Hi.', instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\n// A message from the user that fails.\nfunction MESSAGE_THROW() {\n    return [\n        {\n            delay: 0,\n            callback: () => { },\n            returnPromise: Promise.reject(),\n        },\n    ];\n}\nfunction MESSAGE_IMAGE() {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                const message = {\n                    id: null,\n                    output: {\n                        generic: [\n                            assertType({\n                                response_type: MessageResponseTypes.IMAGE,\n                                source: 'https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/cat-1950632_1280.jpg',\n                                title: 'Grump cat',\n                            }),\n                        ],\n                    },\n                };\n                instance.sendMessageToUser(message, instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\nfunction MESSAGE_FILES() {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                const message = {\n                    id: null,\n                    output: {\n                        generic: [\n                            assertType({\n                                response_type: MessageResponseTypes.BUTTON,\n                                kind: ButtonItemKind.LINK,\n                                button_type: ButtonItemType.URL,\n                                url: 'https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/cat-1950632_1280.jpg',\n                                label: 'Grump Cat.png',\n                                target: '_blank',\n                            }),\n                            assertType({\n                                response_type: MessageResponseTypes.BUTTON,\n                                kind: ButtonItemKind.LINK,\n                                button_type: ButtonItemType.URL,\n                                url: 'https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/maine-coon-694730_1280.jpg',\n                                target: '_blank',\n                            }),\n                        ],\n                    },\n                };\n                instance.sendMessageToUser(message, instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\nfunction MESSAGE_VIDEO() {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                const message = {\n                    id: null,\n                    output: {\n                        generic: [\n                            assertType({\n                                response_type: MessageResponseTypes.VIDEO,\n                                title: 'The video title',\n                                source: 'https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/lake%20(720p).mp4',\n                                alt_text: 'The video alternate text',\n                                description: 'The video description',\n                            }),\n                        ],\n                    },\n                };\n                instance.sendMessageToUser(message, instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\n// A custom response.\nfunction MESSAGE_CUSTOM() {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                const message = {\n                    id: null,\n                    output: {\n                        generic: [\n                            assertType({\n                                response_type: MessageResponseTypes.TEXT,\n                                text: 'Below is a custom response but you may not see it if no handler has been created.',\n                            }),\n                            assertType({\n                                response_type: MessageResponseTypes.USER_DEFINED,\n                                user_defined: { user_defined_type: 'agent_custom' },\n                            }),\n                        ],\n                    },\n                };\n                instance.sendMessageToUser(message, instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\nfunction MESSAGE_TO_AGENT_MULTIPLE() {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                const message = {\n                    id: null,\n                    output: {\n                        generic: [\n                            assertType({\n                                response_type: MessageResponseTypes.TEXT,\n                                text: 'This is a text item in this response.',\n                            }),\n                            assertType({\n                                response_type: MessageResponseTypes.TEXT,\n                                text: 'This is a second text item.',\n                            }),\n                            assertType({\n                                response_type: MessageResponseTypes.IMAGE,\n                                source: 'https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/cat-1950632_1280.jpg',\n                            }),\n                        ],\n                    },\n                };\n                instance.sendMessageToUser(message, instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\n// A message from the user that hangs.\nfunction HANG_MESSAGE() {\n    return [\n        {\n            delay: 0,\n            callback: () => { },\n            returnPromise: new Promise(() => { }),\n        },\n    ];\n}\n// A response to a user asking for a joke.\nfunction MESSAGE_TO_AGENT_JOKE() {\n    return [\n        {\n            delay: 1000,\n            callback: (instance) => {\n                instance.callback.agentReadMessages();\n                instance.callback.agentTyping(true);\n            },\n        },\n        {\n            delay: 5000,\n            callback: (instance) => {\n                instance.sendMessageToUser(\"One atom says to another atom: I think I've lost an electron.\", instance.mockState.currentAgent.id);\n            },\n        },\n        {\n            delay: 2000,\n            callback: (instance) => {\n                instance.sendMessageToUser('The second atom says: are you sure?', instance.mockState.currentAgent.id);\n            },\n        },\n        {\n            delay: 2000,\n            callback: (instance) => {\n                instance.sendMessageToUser(\"The first atom says: I'm positive.\", instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\n// A message from the user that fails.\nfunction STATE_CHANGED(state) {\n    return [\n        {\n            delay: 0,\n            callback: (instance) => {\n                instance.sendMessageToUser(`The web chat state has changed: ${JSON.stringify(state)}`, instance.mockState.currentAgent.id);\n            },\n        },\n    ];\n}\nconst FENCE_BLOCK = `\n\\`\\`\\`\nconst example = {\n  value: true,\n};\n\\`\\`\\`\n`;\n// Note, blockquote is not supported. Our HTML sanitization turns the \">\" into \"&gt;\" which prevents the markdown\n// library from turning it into a blockquote.\nconst MARKDOWN = `\nThis is **bold**, ***bold and italics***, **bold *italics inside***, *italics **bold inside***, and ~~strikethrough~~.\n\n# H1\nH1 Text\n## H2\nH2 Text\n\n1. Ordered List 1 \n2. Ordered List 2 \n\n- Unordered List 1 \n- Unordered List 2\n\n\\`Inline code\\`\n\n${FENCE_BLOCK}\n\n| Header 1 | Header 2 |\n| ----------- | ----------- |\n| Text 1 | Text 2 |\n| Text 3 | Text 4 |\n\n---\n\n[IBM's HomePage 1 (new tab)](https://ibm.com)\n\n[IBM's HomePage 1 (same tab)](https://ibm.com){{target=_self}}\n\nibm.com (autolink, new tab)\n\n![Cute kitten!](https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/cat-1950632_1280.jpg)\n`;\n\nexport { ConnectInfoType, MARKDOWN, MESSAGE_CUSTOM, MESSAGE_FILES, MESSAGE_IMAGE, MESSAGE_TO_AGENT_MULTIPLE, MESSAGE_TO_AGENT_TEXT, MESSAGE_VIDEO, MOCK_AGENT_PROFILE_EMPTY, MOCK_AGENT_PROFILE_GARRUS, MOCK_AGENT_PROFILE_LEGION, MOCK_AGENT_PROFILE_SHEPARD, MockServiceDesk, TEXT_LONG, runSteps };\n"],"names":[],"sourceRoot":""}
[project]
name = "dbt2pdf"
version = "0.0.10"
description = "Generate a PDF document from your DBT project's documentation."
authors = [{ name = "Dribia Code", email = "code@dribia.com" }]
requires-python = ">=3.10,<3.14"
readme = "README.md"
license = "MIT"
maintainers = [{ name = "Dribia Code", email = "code@dribia.com" }]
keywords = [
    "dbt",
    "pdf",
    "docs",
    "documentation",
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Information Technology",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Database",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "typer>=0.17.4,<0.18",
    "rich>=14.1.0,<15",
    "fpdf2>=2.7.9,<3",
    "matplotlib>=3.9.2,<4",
    "pydantic>=1.10,<3.0",
]

[project.urls]
Homepage = "https://github.com/dribia/dbt2pdf"
Repository = "https://github.com/dribia/dbt2pdf"

[project.scripts]
dbt2pdf = "dbt2pdf.cli:app"

[dependency-groups]
ci = ["setuptools>=80.9.0,<81"]
dev = ["pre-commit>=3.8,<5.0"]
lint = [
    "ruff==0.13.0",
    "mypy==1.18.1",
    "types-fpdf2>=2.8.4.20250822,<3",
]
test = [
    "pytest>=8.4.2,<9",
    "pytest-cov>=7.0.0,<8",
]
docs = [
    "mkdocs>=1.5.3,<2",
    "mkdocs-material>=9.6.20,<10",
    "mike>=2.1.3,<3",
]

[tool.uv]
default-groups = [
    "ci",
    "dev",
    "lint",
    "test",
    "docs",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # convention
    "B",  # flake8-bugbear
    "D",  # pydocstyle
    "UP",  # pyupgrade
    "N",  # pep8-naming
    "NPY",  # numpy
    "PD",   # pandas
    "RUF",  # ruff
    "PTH",  # pathlib
    "SIM",  # simplify
    "RET",  # return
    "RSE",  # raise
    "Q",  # quotes
    "G",  # logging-format
    "LOG",  # logging
    "ISC",  # implicit str concat
    "C4",  # comprehensions
    "COM",  # commas
    "TD",  # to-do
    "INT",  # gettext
    "TRY",  # tryceratops
]
ignore = [
    "C901",  # function is too complex
    "N805",  # allow naming `self` to first class argument
    "RUF013",  # implicit optional
    "ISC001",  # allow implicit str concat
    "COM812",  # allow missing trailing comma
    "TRY003",  # allow long description exceptions
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]
"dbt2pdf/cli.py" = ["B008"]

[tool.ruff.lint.isort]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
plugins = []
strict_optional = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "dbt_artifacts_parser.parser",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "--verbose"
filterwarnings = 'error'
xfail_strict = true
testpaths = ["tests"]
markers = [
  "integration: integration tests",
]

[tool.coverage.run]
source = ["dbt2pdf"]
branch = true

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    '@overload',
]

[tool.coverage.xml]
output = "coverage.xml"

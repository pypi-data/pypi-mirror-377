# generated by datamodel-codegen:
#   filename:  audience.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, Field, RootModel, conint


class Kind(Enum):
    CUSTOM = 'CUSTOM'


class Kind4(Enum):
    SEED = 'SEED'


class Audience5(BaseModel):
    audienceSize: Optional[conint(ge=0)] = None
    audienceType: str
    createdAt: str
    kind: Kind4


class Kind5(Enum):
    BASE = 'BASE'


class AudienceReference1(BaseModel):
    kind: Kind5


class AudienceReference2(BaseModel):
    id: str
    kind: Kind


class AudienceReference3(BaseModel):
    audienceType: str
    kind: Kind4


class AudienceReference(
    RootModel[Union[AudienceReference1, AudienceReference2, AudienceReference3]]
):
    root: Union[AudienceReference1, AudienceReference2, AudienceReference3]


class BooleanOp(Enum):
    AND = 'AND'
    OR = 'OR'


class CombineOperator(Enum):
    INTERSECT = 'INTERSECT'
    UNION = 'UNION'
    DIFF = 'DIFF'


class Kind8(Enum):
    LOOKALIKE = 'LOOKALIKE'


class CustomAudienceDefinition1(BaseModel):
    excludeSeedAudience: Optional[bool] = None
    kind: Kind8
    reach: conint(ge=0)
    sourceRef: AudienceReference


class Kind9(Enum):
    RULE_BASED = 'RULE_BASED'


class FilterOperator(Enum):
    CONTAINS_ANY_OF = 'CONTAINS_ANY_OF'
    CONTAINS_NONE_OF = 'CONTAINS_NONE_OF'
    CONTAINS_ALL_OF = 'CONTAINS_ALL_OF'
    EMPTY = 'EMPTY'
    NOT_EMPTY = 'NOT_EMPTY'


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition2(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    kind: Kind9
    sourceRef: AudienceReference


class CustomAudienceDefinition(
    RootModel[Union[CustomAudienceDefinition1, CustomAudienceDefinition2]]
):
    root: Union[CustomAudienceDefinition1, CustomAudienceDefinition2]


class Audience4(BaseModel):
    createdAt: str
    createdBy: str
    definition: CustomAudienceDefinition
    doesAudienceDependOnLookalikeAudience: Optional[bool] = False
    id: str
    isStale: Optional[bool] = Field(
        False,
        description='Whether this audience cannot be generated with the current data provisioned to the MDCR. NOTE: This is added here so that the types we generate are correct. This value can only be set in the Python computation get_audiences that has access to the actual data.',
    )
    kind: Kind
    name: str
    sharedWith: Optional[Sequence[str]] = []


class Audience(RootModel[Union[Audience4, Audience5]]):
    root: Union[Audience4, Audience5] = Field(
        ...,
        description='An audience representation that unifies the seed audiences that come from the data and the audiences that are defined by the MDCR users. NOTE: This exists primarily for generating the type definitions used by the clients.',
        title='Audience',
    )

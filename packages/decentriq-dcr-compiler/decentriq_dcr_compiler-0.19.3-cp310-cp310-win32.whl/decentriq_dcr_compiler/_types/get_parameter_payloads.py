# generated by datamodel-codegen:
#   filename:  get_parameter_payloads.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict

BooleanOp = Literal['and', 'or']


CombineOperator = Literal['intersect', 'union', 'diff']


FilterOperator = Literal[
    'contains_any_of', 'contains_none_of', 'contains_all_of', 'empty', 'not_empty'
]


Status = Literal['ready', 'published', 'published_as_intermediate']


class AudienceFilter(TypedDict):
    attribute: str
    operator: FilterOperator
    values: NotRequired[Sequence[str]]


class AudienceFilters(TypedDict):
    boolean_op: BooleanOp
    filters: Sequence[AudienceFilter]


class MutableAudienceData(TypedDict):
    created_at: NotRequired[Optional[str]]
    name: str
    status: Status


class Audience(TypedDict):
    audience_size: NotRequired[Optional[int]]
    audience_type: str
    id: str
    kind: Literal['advertiser']
    mutable: NotRequired[Optional[MutableAudienceData]]


class Audience8(TypedDict):
    exclude_seed_audience: NotRequired[Optional[bool]]
    id: str
    kind: Literal['lookalike']
    mutable: NotRequired[Optional[MutableAudienceData]]
    reach: int
    source_ref: str


class AudienceCombinator(TypedDict):
    filters: NotRequired[Optional[AudienceFilters]]
    operator: CombineOperator
    source_ref: str


class Audience9(TypedDict):
    combine: NotRequired[Sequence[AudienceCombinator]]
    filters: NotRequired[Optional[AudienceFilters]]
    id: str
    kind: Literal['rulebased']
    mutable: NotRequired[Optional[MutableAudienceData]]
    source_ref: str


Audience6 = Union[Audience, Audience8, Audience9]


class RequestedAudiencePayload(TypedDict):
    audiences: Sequence[Audience6]
    target_ref: str


class ParameterPayloads(TypedDict):
    generate: RequestedAudiencePayload
    lal: NotRequired[Optional[RequestedAudiencePayload]]

# generated by datamodel-codegen:
#   filename:  create_media_dcr.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence

from pydantic import BaseModel, Field, RootModel


class Version(Enum):
    v0 = 'v0'


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class Permission(Enum):
    VIEW_OVERLAP = 'VIEW_OVERLAP'
    VIEW_INSIGHTS = 'VIEW_INSIGHTS'
    PROVIDE_SEED_AUDIENCE = 'PROVIDE_SEED_AUDIENCE'
    PROVIDE_BASE_AUDIENCE = 'PROVIDE_BASE_AUDIENCE'
    CREATE_CUSTOM_AUDIENCE = 'CREATE_CUSTOM_AUDIENCE'
    EXPORT_AUDIENCE = 'EXPORT_AUDIENCE'
    MODEL_QUALITY = 'MODEL_QUALITY'


class PublishedPolicy(BaseModel):
    leafId: str
    policyId: str
    publishedAt: Optional[str] = None
    publishedByEmail: Optional[str] = None


class ParticipantGroup(BaseModel):
    emails: Sequence[str]
    id: str
    organizationId: Optional[str] = None
    permissions: Sequence[Permission]
    role: str


class CreateMediaDcr1(BaseModel):
    enableDebugMode: bool
    enableInsights: bool
    enableLookalikeAudiences: bool
    enableRemarketing: bool
    enableRuleBasedAudiences: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    hideAbsoluteValuesFromInsights: bool
    matchingIdFormat: FormatType
    name: str
    participantGroups: Sequence[ParticipantGroup]
    policies: Sequence[PublishedPolicy]
    version: Version


class CreateMediaDcr(RootModel[CreateMediaDcr1]):
    root: CreateMediaDcr1 = Field(..., title='CreateMediaDcr')

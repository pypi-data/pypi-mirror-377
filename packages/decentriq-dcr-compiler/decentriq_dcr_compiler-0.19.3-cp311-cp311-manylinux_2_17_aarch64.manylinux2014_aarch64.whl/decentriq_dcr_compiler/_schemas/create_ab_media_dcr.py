# generated by datamodel-codegen:
#   filename:  create_ab_media_dcr.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class CreateAbMediaV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: Optional[Sequence[str]] = None
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAdvertiserAudienceDownload: Optional[bool] = None
    enableDataPartner: bool
    enableDebugMode: bool
    enableHideAbsoluteValuesFromInsights: bool
    enableInsights: bool
    enableLookalikeAudiences: bool
    enableRateLimitingOnPublishDataset: Optional[bool] = None
    enableRemarketing: bool
    enableRuleBasedAudiences: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = None
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = None


class CreateAbMediaV1(CreateAbMediaV0):
    pass


class CreateAbMediaV2(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: Optional[Sequence[str]] = None
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAdvertiserAudienceDownload: Optional[bool] = None
    enableDataPartner: bool
    enableDebugMode: bool
    enableDropInvalidRows: Optional[bool] = True
    enableHideAbsoluteValuesFromInsights: bool
    enableInsights: bool
    enableLookalikeAudiences: bool
    enableRateLimitingOnPublishDataset: Optional[bool] = None
    enableRemarketing: bool
    enableRuleBasedAudiences: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = None
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = None


class CreateAbMediaV3(CreateAbMediaV2):
    pass


class CreateAbMediaV4(CreateAbMediaV2):
    pass


class CreateAbMediaV5(CreateAbMediaV2):
    pass


class CreateAbMediaV6(CreateAbMediaV2):
    pass


class CreateAbMediaV7(CreateAbMediaV2):
    pass


class CreateAbMediaDcr1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: CreateAbMediaV0


class CreateAbMediaDcr2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: CreateAbMediaV1


class CreateAbMediaDcr3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: CreateAbMediaV2


class CreateAbMediaDcr4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: CreateAbMediaV3


class CreateAbMediaDcr5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v4: CreateAbMediaV4


class CreateAbMediaDcr6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v5: CreateAbMediaV5


class CreateAbMediaDcr7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v6: CreateAbMediaV6


class CreateAbMediaDcr8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v7: CreateAbMediaV7


class CreateAbMediaDcr(
    RootModel[
        Union[
            CreateAbMediaDcr1,
            CreateAbMediaDcr2,
            CreateAbMediaDcr3,
            CreateAbMediaDcr4,
            CreateAbMediaDcr5,
            CreateAbMediaDcr6,
            CreateAbMediaDcr7,
            CreateAbMediaDcr8,
        ]
    ]
):
    root: Union[
        CreateAbMediaDcr1,
        CreateAbMediaDcr2,
        CreateAbMediaDcr3,
        CreateAbMediaDcr4,
        CreateAbMediaDcr5,
        CreateAbMediaDcr6,
        CreateAbMediaDcr7,
        CreateAbMediaDcr8,
    ] = Field(
        ...,
        description='Arguments for creating a specific version of a MIDCR.',
        title='CreateAbMediaDcr',
    )

# generated by datamodel-codegen:
#   filename:  high_level_dcr.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class AnalystPermission(TypedDict):
    nodeId: str


class AwsConfig(TypedDict):
    bucket: str
    objectKey: NotRequired[Optional[str]]
    region: str


ColumnDataType = Literal['integer', 'float', 'string']


class ColumnTuple(TypedDict):
    columns: Sequence[int]


class DataOwnerPermission(AnalystPermission):
    pass


class DatasetSinkEncryptionKeyDependency(TypedDict):
    dependency: str
    isKeyHexEncoded: bool


class EnclaveSpecification(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


class EnclaveSpecification2(EnclaveSpecification):
    pass


class EnclaveSpecificationV0(EnclaveSpecification):
    pass


class ExportConnectorKind(TypedDict):
    aws: AwsConfig


ExportConnectorKind5 = ExportConnectorKind


class ExportType7(TypedDict):
    raw: Sequence


class ExportType8(TypedDict):
    zipSingleFile: str


class ExportType9(TypedDict):
    zipAllFiles: Sequence


ExportType = Union[ExportType7, ExportType8, ExportType9]


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


class ImportConnectorKind(ExportConnectorKind):
    pass


ImportConnectorKind5 = ImportConnectorKind


class ImportConnectorNode(TypedDict):
    credentialsDependency: str
    kind: ImportConnectorKind5
    specificationId: str


class InputDataType5(ExportType7):
    pass


class ManagerPermission(TypedDict):
    pass


MaskType = Literal[
    'genericString',
    'genericNumber',
    'name',
    'address',
    'postcode',
    'phoneNumber',
    'socialSecurityNumber',
    'email',
    'date',
    'timestamp',
    'iban',
]


class MatchingComputationNode(TypedDict):
    config: str
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    output: str
    specificationId: str
    staticContentSpecificationId: str


ModelEvaluationType = Literal['ROC_CURVE', 'DISTANCE_TO_EMBEDDING', 'JACCARD']


class NumRowsValidationRule(TypedDict):
    atLeast: NotRequired[Optional[int]]
    atMost: NotRequired[Optional[int]]


class NumericRangeRule(TypedDict):
    greaterThan: NotRequired[Optional[float]]
    greaterThanEquals: NotRequired[Optional[float]]
    lessThan: NotRequired[Optional[float]]
    lessThanEquals: NotRequired[Optional[float]]


class ParticipantPermission4(TypedDict):
    dataOwner: DataOwnerPermission


class ParticipantPermission5(TypedDict):
    analyst: AnalystPermission


class ParticipantPermission6(TypedDict):
    manager: ManagerPermission


ParticipantPermission = Union[
    ParticipantPermission4, ParticipantPermission5, ParticipantPermission6
]


class PostComputationNode(TypedDict):
    dependency: str
    specificationId: str
    useMockBackend: bool


class PreviewComputationNode(TypedDict):
    dependency: str
    quotaBytes: int


class RawLeafNode(ManagerPermission):
    pass


class RequirementFlagValue13(TypedDict):
    type: Literal['SUPPORTED']


class RequirementFlagValue14(TypedDict):
    type: Literal['DATASET']


class RequirementFlagValue15(TypedDict):
    type: Literal['PROPERTY']
    value: str


RequirementFlagValue = Union[
    RequirementFlagValue13, RequirementFlagValue14, RequirementFlagValue15
]


S3Provider = Literal['Aws', 'Gcs']


class S3SinkComputationNode(TypedDict):
    credentialsDependencyId: str
    endpoint: str
    region: NotRequired[str]
    s3Provider: NotRequired[S3Provider]
    specificationId: str
    uploadDependencyId: str


class Script(TypedDict):
    content: str
    name: str


ScriptingLanguage = Literal['python', 'r']


class SqlNodePrivacyFilter(TypedDict):
    minimumRowsCount: int


class TableMapping(TypedDict):
    nodeId: str
    tableName: str


class UniquenessValidationRule(TypedDict):
    uniqueKeys: Sequence[ColumnTuple]


class ZipInputDataType5(TypedDict):
    all: Sequence


class ZipInputDataType6(TypedDict):
    files: Sequence[str]


ZipInputDataType = Union[ZipInputDataType5, ZipInputDataType6]


class ColumnDataFormat(TypedDict):
    dataType: ColumnDataType
    isNullable: bool


class ColumnValidationV0(TypedDict):
    allowNull: bool
    formatType: FormatType
    hashWith: NotRequired[Optional[HashingAlgorithm]]
    inRange: NotRequired[Optional[NumericRangeRule]]
    name: NotRequired[Optional[str]]


class ComputationNodeKind4(TypedDict):
    s3Sink: S3SinkComputationNode


class ComputationNodeKind5(TypedDict):
    match: MatchingComputationNode


class ComputationNodeKindV2(ComputationNodeKind4):
    pass


class ComputationNodeKindV222(ComputationNodeKind5):
    pass


class ComputationNodeKindV223(TypedDict):
    post: PostComputationNode


class ComputationNodeKindV6(ComputationNodeKind4):
    pass


class ComputationNodeKindV630(ComputationNodeKind5):
    pass


class ComputationNodeKindV631(ComputationNodeKindV223):
    pass


class ComputationNodeKindV632(TypedDict):
    preview: PreviewComputationNode


class ComputationNodeKindV633(TypedDict):
    importConnector: ImportConnectorNode


class DataLabComputeV0(TypedDict):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification2
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: NotRequired[Optional[HashingAlgorithm]]
    name: str
    numEmbeddings: int
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification2


class DataLabComputeV1(DataLabComputeV0):
    pass


class DataLabComputeV2(DataLabComputeV0):
    pass


class ExportNodeDependency(TypedDict):
    exportType: ExportType
    name: str


class InputDataType6(TypedDict):
    zip: ZipInputDataType


InputDataType = Union[InputDataType5, InputDataType6]


KnownOrUnknownRequirementFlagValue = Optional[RequirementFlagValue]


class LeafNodeKind1(TypedDict):
    raw: RawLeafNode


class LeafNodeKindV2(LeafNodeKind1):
    pass


class ModelEvaluationConfig(TypedDict):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class Participant(TypedDict):
    permissions: Sequence[ParticipantPermission]
    user: str


class RequirementFlag(TypedDict):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOp16(TypedDict):
    has: RequirementFlag


class Requirements(TypedDict):
    optional: Sequence[RequirementFlag]
    required: Sequence[RequirementFlag]


class ScriptingComputationNode(TypedDict):
    additionalScripts: Sequence[Script]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: NotRequired[Optional[float]]
    mainScript: Script
    minimumContainerMemorySize: NotRequired[Optional[int]]
    output: str
    scriptingLanguage: ScriptingLanguage
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class SqlComputationNode(TypedDict):
    dependencies: Sequence[TableMapping]
    privacyFilter: NotRequired[Optional[SqlNodePrivacyFilter]]
    specificationId: str
    statement: str


class SqliteComputationNode(TypedDict):
    dependencies: Sequence[TableMapping]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    sqliteSpecificationId: str
    statement: str
    staticContentSpecificationId: str


class SyntheticNodeColumn(TypedDict):
    dataFormat: ColumnDataFormat
    index: int
    maskType: MaskType
    name: NotRequired[Optional[str]]
    shouldMaskColumn: bool


class TableLeafNodeColumn(TypedDict):
    dataFormat: ColumnDataFormat
    name: str


class TableLeafNodeColumnV2(TypedDict):
    dataFormat: ColumnDataFormat
    name: str
    validation: ColumnValidationV0


class TableValidationV0(TypedDict):
    allowEmpty: NotRequired[Optional[bool]]
    numRows: NotRequired[Optional[NumRowsValidationRule]]
    uniqueness: NotRequired[Optional[UniquenessValidationRule]]


class ValidationNodeV2(TypedDict):
    pythonSpecificationId: str
    staticContentSpecificationId: str
    validation: TableValidationV0


class ComputationNodeKind1(TypedDict):
    sql: SqlComputationNode


class ComputationNodeKind2(TypedDict):
    scripting: ScriptingComputationNode


class ComputationNodeKindV217(ComputationNodeKind1):
    pass


class ComputationNodeKindV218(TypedDict):
    sqlite: SqliteComputationNode


class ComputationNodeKindV219(ComputationNodeKind2):
    pass


class ComputationNodeKindV625(ComputationNodeKind1):
    pass


class ComputationNodeKindV626(ComputationNodeKindV218):
    pass


class ComputationNodeKindV627(ComputationNodeKind2):
    pass


class DataLabCompute(TypedDict):
    v0: DataLabComputeV0


class DataLabCompute18(TypedDict):
    v1: DataLabComputeV1


class DataLabCompute19(TypedDict):
    v2: DataLabComputeV2


DataLabCompute16 = Union[DataLabCompute, DataLabCompute18, DataLabCompute19]


DataLabComputeOrUnknown = Optional[DataLabCompute16]


class DataLabV0(TypedDict):
    compute: DataLabComputeOrUnknown
    features: Sequence[str]
    provides: Requirements


class DatasetSinkInput(TypedDict):
    datasetName: str
    dependency: str
    inputDataType: InputDataType


class ExportConnectorNode(TypedDict):
    credentialsDependency: str
    dependency: ExportNodeDependency
    kind: ExportConnectorKind5
    specificationId: str


class MediaInsightsComputeV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class MediaInsightsComputeV1(MediaInsightsComputeV0):
    pass


class MediaInsightsComputeV2(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: NotRequired[Sequence[str]]
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class MediaInsightsComputeV3(MediaInsightsComputeV2):
    pass


class SyntheticDataComputationNode(TypedDict):
    columns: Sequence[SyntheticNodeColumn]
    dependency: str
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    epsilon: float
    outputOriginalDataStatistics: bool
    staticContentSpecificationId: str
    synthSpecificationId: str


class TableLeafNode(TypedDict):
    columns: Sequence[TableLeafNodeColumn]
    sqlSpecificationId: str


class TableLeafNodeV2(TypedDict):
    columns: Sequence[TableLeafNodeColumnV2]
    validationNode: ValidationNodeV2


class ComputationNodeKind3(TypedDict):
    syntheticData: SyntheticDataComputationNode


ComputationNodeKind = Union[
    ComputationNodeKind1,
    ComputationNodeKind2,
    ComputationNodeKind3,
    ComputationNodeKind4,
    ComputationNodeKind5,
]


class ComputationNodeKindV220(ComputationNodeKind3):
    pass


ComputationNodeKindV216 = Union[
    ComputationNodeKindV217,
    ComputationNodeKindV218,
    ComputationNodeKindV219,
    ComputationNodeKindV220,
    ComputationNodeKindV2,
    ComputationNodeKindV222,
    ComputationNodeKindV223,
]


class ComputationNodeKindV628(ComputationNodeKind3):
    pass


class ComputationNodeKindV634(TypedDict):
    exportConnector: ExportConnectorNode


class ComputationNodeV2(TypedDict):
    kind: ComputationNodeKindV216


class DataLab2(TypedDict):
    v0: DataLabV0


DataLab = DataLab2


class DatasetSinkComputationNode(TypedDict):
    datasetImportId: NotRequired[Optional[str]]
    encryptionKeyDependency: DatasetSinkEncryptionKeyDependency
    input: DatasetSinkInput
    specificationId: str


class LeafNodeKind2(TypedDict):
    table: TableLeafNode


LeafNodeKind = Union[LeafNodeKind1, LeafNodeKind2]


class LeafNodeKindV28(TypedDict):
    table: TableLeafNodeV2


LeafNodeKindV26 = Union[LeafNodeKindV2, LeafNodeKindV28]


class LeafNodeV2(TypedDict):
    isRequired: bool
    kind: LeafNodeKindV26


class MediaInsightsCompute1(TypedDict):
    v0: MediaInsightsComputeV0


class MediaInsightsCompute2(TypedDict):
    v1: MediaInsightsComputeV1


class MediaInsightsCompute3(TypedDict):
    v2: MediaInsightsComputeV2


class MediaInsightsCompute4(TypedDict):
    v3: MediaInsightsComputeV3


MediaInsightsCompute = Union[
    MediaInsightsCompute1,
    MediaInsightsCompute2,
    MediaInsightsCompute3,
    MediaInsightsCompute4,
]


MediaInsightsComputeOrUnknown = Optional[MediaInsightsCompute]


class NodeKindV2(TypedDict):
    leaf: LeafNodeV2


class NodeKindV28(TypedDict):
    computation: ComputationNodeV2


NodeKindV26 = Union[NodeKindV2, NodeKindV28]


class NodeKindV6(NodeKindV2):
    pass


class NodeV2(TypedDict):
    id: str
    kind: NodeKindV26
    name: str


class HighLevelDcr3(TypedDict):
    dataLab: DataLab


class AddComputationCommitV2(TypedDict):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV2


class ComputationNode(TypedDict):
    kind: ComputationNodeKind


class ComputationNodeKindV635(TypedDict):
    datasetSink: DatasetSinkComputationNode


ComputationNodeKindV624 = Union[
    ComputationNodeKindV625,
    ComputationNodeKindV626,
    ComputationNodeKindV627,
    ComputationNodeKindV628,
    ComputationNodeKindV6,
    ComputationNodeKindV630,
    ComputationNodeKindV631,
    ComputationNodeKindV632,
    ComputationNodeKindV633,
    ComputationNodeKindV634,
    ComputationNodeKindV635,
]


class ComputationNodeV6(TypedDict):
    kind: ComputationNodeKindV624


class DataScienceCommitKindV2(TypedDict):
    addComputation: AddComputationCommitV2


DataScienceCommitKindV24 = DataScienceCommitKindV2


class DataScienceCommitV2(TypedDict):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV24
    name: str


class DataScienceCommitV3(DataScienceCommitV2):
    pass


class DataScienceCommitV4(DataScienceCommitV2):
    pass


class DataScienceCommitV5(DataScienceCommitV2):
    pass


class DataScienceDataRoomConfigurationV2(TypedDict):
    dcrSecretIdBase64: NotRequired[Optional[str]]
    description: str
    enableDevelopment: bool
    enablePostWorker: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV3(TypedDict):
    dcrSecretIdBase64: NotRequired[Optional[str]]
    description: str
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV4(DataScienceDataRoomConfigurationV3):
    pass


class DataScienceDataRoomConfigurationV5(TypedDict):
    dcrSecretIdBase64: NotRequired[Optional[str]]
    description: str
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomV21(TypedDict):
    static: DataScienceDataRoomConfigurationV2


class DataScienceDataRoomV31(TypedDict):
    static: DataScienceDataRoomConfigurationV3


class DataScienceDataRoomV43(TypedDict):
    static: DataScienceDataRoomConfigurationV4


class DataScienceDataRoomV53(TypedDict):
    static: DataScienceDataRoomConfigurationV5


class InteractiveDataScienceDataRoomV2(TypedDict):
    commits: Sequence[DataScienceCommitV2]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV2


class InteractiveDataScienceDataRoomV3(TypedDict):
    commits: Sequence[DataScienceCommitV3]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV3


class InteractiveDataScienceDataRoomV4(TypedDict):
    commits: Sequence[DataScienceCommitV4]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV4


class InteractiveDataScienceDataRoomV5(TypedDict):
    commits: Sequence[DataScienceCommitV5]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV5


class LeafNode(TypedDict):
    isRequired: bool
    kind: LeafNodeKind


class NodeKind1(TypedDict):
    leaf: LeafNode


class NodeKind2(TypedDict):
    computation: ComputationNode


NodeKind = Union[NodeKind1, NodeKind2]


class NodeKindV68(TypedDict):
    computation: ComputationNodeV6


NodeKindV66 = Union[NodeKindV6, NodeKindV68]


class NodeV6(TypedDict):
    id: str
    kind: NodeKindV66
    name: str


class AddComputationCommitV6(TypedDict):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV6


class DataScienceCommitKindV6(TypedDict):
    addComputation: AddComputationCommitV6


DataScienceCommitKindV64 = DataScienceCommitKindV6


class DataScienceCommitV6(TypedDict):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV64
    name: str


class DataScienceDataRoomConfigurationV6(TypedDict):
    dcrSecretIdBase64: NotRequired[Optional[str]]
    description: str
    enableAirlock: bool
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV6]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomV22(TypedDict):
    interactive: InteractiveDataScienceDataRoomV2


DataScienceDataRoomV2 = Union[DataScienceDataRoomV21, DataScienceDataRoomV22]


class DataScienceDataRoomV32(TypedDict):
    interactive: InteractiveDataScienceDataRoomV3


DataScienceDataRoomV3 = Union[DataScienceDataRoomV31, DataScienceDataRoomV32]


class DataScienceDataRoomV44(TypedDict):
    interactive: InteractiveDataScienceDataRoomV4


DataScienceDataRoomV4 = Union[DataScienceDataRoomV43, DataScienceDataRoomV44]


class DataScienceDataRoomV54(TypedDict):
    interactive: InteractiveDataScienceDataRoomV5


DataScienceDataRoomV5 = Union[DataScienceDataRoomV53, DataScienceDataRoomV54]


class DataScienceDataRoomV63(TypedDict):
    static: DataScienceDataRoomConfigurationV6


class InteractiveDataScienceDataRoomV6(TypedDict):
    commits: Sequence[DataScienceCommitV6]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV6


class Node(TypedDict):
    id: str
    kind: NodeKind
    name: str


class AddComputationCommit(TypedDict):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: Node


class DataScienceCommitKind1(TypedDict):
    addComputation: AddComputationCommit


DataScienceCommitKind = DataScienceCommitKind1


class DataScienceCommitV0(TypedDict):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKind
    name: str


class DataScienceCommitV1(DataScienceCommitV0):
    pass


class DataScienceDataRoom15(TypedDict):
    v2: DataScienceDataRoomV2


class DataScienceDataRoom16(TypedDict):
    v3: DataScienceDataRoomV3


class DataScienceDataRoom17(TypedDict):
    v4: DataScienceDataRoomV4


class DataScienceDataRoom18(TypedDict):
    v5: DataScienceDataRoomV5


class DataScienceDataRoomConfiguration(TypedDict):
    dcrSecretIdBase64: NotRequired[Optional[str]]
    description: str
    enableDevelopment: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[Node]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomV01(TypedDict):
    static: DataScienceDataRoomConfiguration


class DataScienceDataRoomV16(DataScienceDataRoomV01):
    pass


class DataScienceDataRoomV64(TypedDict):
    interactive: InteractiveDataScienceDataRoomV6


DataScienceDataRoomV6 = Union[DataScienceDataRoomV63, DataScienceDataRoomV64]


class InteractiveDataScienceDataRoomV0(TypedDict):
    commits: Sequence[DataScienceCommitV0]
    initialConfiguration: DataScienceDataRoomConfiguration


class InteractiveDataScienceDataRoomV1(TypedDict):
    commits: Sequence[DataScienceCommitV1]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfiguration


class DataScienceDataRoom19(TypedDict):
    v6: DataScienceDataRoomV6


class DataScienceDataRoomV02(TypedDict):
    interactive: InteractiveDataScienceDataRoomV0


DataScienceDataRoomV0 = Union[DataScienceDataRoomV01, DataScienceDataRoomV02]


class DataScienceDataRoomV17(TypedDict):
    interactive: InteractiveDataScienceDataRoomV1


DataScienceDataRoomV1 = Union[DataScienceDataRoomV16, DataScienceDataRoomV17]


class DataScienceDataRoom13(TypedDict):
    v0: DataScienceDataRoomV0


class DataScienceDataRoom14(TypedDict):
    v1: DataScienceDataRoomV1


DataScienceDataRoom = Union[
    DataScienceDataRoom13,
    DataScienceDataRoom14,
    DataScienceDataRoom15,
    DataScienceDataRoom16,
    DataScienceDataRoom17,
    DataScienceDataRoom18,
    DataScienceDataRoom19,
]


class HighLevelDcr1(TypedDict):
    analytics: DataScienceDataRoom


class HighLevelDcr2(TypedDict):
    media: MediaInsightsDcr


HighLevelDcr = Union[HighLevelDcr1, HighLevelDcr2, HighLevelDcr3]


class ConsumerRequirements(TypedDict):
    optional: Sequence[RequirementFlag]
    required: NotRequired[Optional[RequirementOp]]


class MediaInsightsDcr1(TypedDict):
    v0: MediaInsightsDcrInner


MediaInsightsDcr = MediaInsightsDcr1


class MediaInsightsDcrInner(TypedDict):
    compute: MediaInsightsComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


RequirementOp13 = TypedDict(
    'RequirementOp13',
    {
        'or': Sequence[RequirementOp],
    },
)


RequirementOp14 = TypedDict(
    'RequirementOp14',
    {
        'and': Sequence[RequirementOp],
    },
)


class RequirementOp15(TypedDict):
    exclusiveOr: Sequence[RequirementOp]


RequirementOp = Union[
    RequirementOp13, RequirementOp14, RequirementOp15, RequirementOp16
]

# generated by datamodel-codegen:
#   filename:  data_science_data_room.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class AnalystPermission(TypedDict):
    nodeId: str


class AwsConfig(TypedDict):
    bucket: str
    objectKey: NotRequired[Optional[str]]
    region: str


ColumnDataType = Literal['integer', 'float', 'string']


class ColumnTuple(TypedDict):
    columns: Sequence[int]


class CredentialsDependencyV9(TypedDict):
    user: str


CredentialsDependencyV92 = Union[Literal['splickyDsp'], CredentialsDependencyV9]


class DataOwnerPermission(AnalystPermission):
    pass


class DatasetSinkEncryptionKeyDependency(TypedDict):
    dependency: str
    isKeyHexEncoded: bool


class EnclaveSpecification(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


class ExportConnectorKind(TypedDict):
    aws: AwsConfig


ExportConnectorKind3 = ExportConnectorKind


class ExportConnectorKind2(ExportConnectorKind):
    pass


class ExportConnectorKind26(TypedDict):
    azure: Sequence


class ExportType4(TypedDict):
    raw: Sequence


class ExportType5(TypedDict):
    zipSingleFile: str


class ExportType6(TypedDict):
    zipAllFiles: Sequence


ExportType = Union[ExportType4, ExportType5, ExportType6]


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


class GcsConfig(TypedDict):
    bucket: str
    objectKey: NotRequired[Optional[str]]


HashingAlgorithm = Literal['SHA256_HEX']


class ImportConnectorKind(ExportConnectorKind):
    pass


ImportConnectorKind3 = ImportConnectorKind


class ImportConnectorKind2(ExportConnectorKind):
    pass


class ImportConnectorKind27(ExportConnectorKind26):
    pass


class ImportConnectorKind28(TypedDict):
    gcs: GcsConfig


class ImportConnectorNode(TypedDict):
    credentialsDependency: str
    kind: ImportConnectorKind3
    specificationId: str


class InputDataType3(ExportType4):
    pass


class ManagerPermission(TypedDict):
    pass


MaskType = Literal[
    'genericString',
    'genericNumber',
    'name',
    'address',
    'postcode',
    'phoneNumber',
    'socialSecurityNumber',
    'email',
    'date',
    'timestamp',
    'iban',
]


class MatchingComputationNode(TypedDict):
    config: str
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    output: str
    specificationId: str
    staticContentSpecificationId: str


class NumRowsValidationRule(TypedDict):
    atLeast: NotRequired[Optional[int]]
    atMost: NotRequired[Optional[int]]


class NumericRangeRule(TypedDict):
    greaterThan: NotRequired[Optional[float]]
    greaterThanEquals: NotRequired[Optional[float]]
    lessThan: NotRequired[Optional[float]]
    lessThanEquals: NotRequired[Optional[float]]


class ParticipantPermission1(TypedDict):
    dataOwner: DataOwnerPermission


class ParticipantPermission2(TypedDict):
    analyst: AnalystPermission


class ParticipantPermission3(TypedDict):
    manager: ManagerPermission


ParticipantPermission = Union[
    ParticipantPermission1, ParticipantPermission2, ParticipantPermission3
]


class PostComputationNode(TypedDict):
    dependency: str
    specificationId: str
    useMockBackend: bool


class PreviewComputationNode(TypedDict):
    dependency: str
    quotaBytes: int


class PythonEnvironmentComputationNode(TypedDict):
    extraChunkCacheSizeToAvailableMemoryRatio: NotRequired[Optional[float]]
    minimumContainerMemorySize: NotRequired[Optional[int]]
    requirementsTxtContent: str
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class PythonOptions(TypedDict):
    customVirtualEnvironmentId: NotRequired[Optional[str]]


class RawLeafNode(ManagerPermission):
    pass


S3Provider = Literal['Aws', 'Gcs']


class S3SinkComputationNode(TypedDict):
    credentialsDependencyId: str
    endpoint: str
    region: NotRequired[str]
    s3Provider: NotRequired[S3Provider]
    specificationId: str
    uploadDependencyId: str


class Script(TypedDict):
    content: str
    name: str


ScriptingLanguage = Literal['python', 'r']


class ScriptingLanguageV92(TypedDict):
    python: PythonOptions


ScriptingLanguageV9 = Union[Literal['r'], ScriptingLanguageV92]


class SnowflakeConfig(TypedDict):
    databaseName: str
    schemaName: str
    stageName: str
    tableName: str
    warehouseName: str


class SqlNodePrivacyFilter(TypedDict):
    minimumRowsCount: int


class TableMapping(TypedDict):
    nodeId: str
    tableName: str


class UniquenessValidationRule(TypedDict):
    uniqueKeys: Sequence[ColumnTuple]


class ZipInputDataType3(TypedDict):
    all: Sequence


class ZipInputDataType4(TypedDict):
    files: Sequence[str]


ZipInputDataType = Union[ZipInputDataType3, ZipInputDataType4]


class ColumnDataFormat(TypedDict):
    dataType: ColumnDataType
    isNullable: bool


class ColumnValidationV0(TypedDict):
    allowNull: bool
    formatType: FormatType
    hashWith: NotRequired[Optional[HashingAlgorithm]]
    inRange: NotRequired[Optional[NumericRangeRule]]
    name: NotRequired[Optional[str]]


class ComputationNodeKindV2(TypedDict):
    s3Sink: S3SinkComputationNode


class ComputationNodeKindV214(TypedDict):
    match: MatchingComputationNode


class ComputationNodeKindV215(TypedDict):
    post: PostComputationNode


class ComputationNodeKindV6(ComputationNodeKindV2):
    pass


class ComputationNodeKindV618(ComputationNodeKindV214):
    pass


class ComputationNodeKindV619(ComputationNodeKindV215):
    pass


class ComputationNodeKindV620(TypedDict):
    preview: PreviewComputationNode


class ComputationNodeKindV621(TypedDict):
    importConnector: ImportConnectorNode


class ComputationNodeKindV9(ComputationNodeKindV2):
    pass


class ComputationNodeKindV919(ComputationNodeKindV214):
    pass


class ComputationNodeKindV920(ComputationNodeKindV215):
    pass


class ComputationNodeKindV921(ComputationNodeKindV620):
    pass


class EnvironmentComputationNodeKind2(TypedDict):
    python: PythonEnvironmentComputationNode


EnvironmentComputationNodeKind = EnvironmentComputationNodeKind2


class ExportConnectorKind27(ImportConnectorKind28):
    pass


ExportConnectorKind24 = Union[
    ExportConnectorKind2, ExportConnectorKind26, ExportConnectorKind27
]


class ExportNodeDependency(TypedDict):
    exportType: ExportType
    name: str


class ImportConnectorKind29(TypedDict):
    snowflake: SnowflakeConfig


ImportConnectorKind25 = Union[
    ImportConnectorKind2,
    ImportConnectorKind27,
    ImportConnectorKind28,
    ImportConnectorKind29,
]


class ImportConnectorNodeV9(TypedDict):
    credentialsDependency: str
    kind: ImportConnectorKind25
    specificationId: str


class InputDataType4(TypedDict):
    zip: ZipInputDataType


InputDataType = Union[InputDataType3, InputDataType4]


class LeafNodeKindV2(TypedDict):
    raw: RawLeafNode


class Participant(TypedDict):
    permissions: Sequence[ParticipantPermission]
    user: str


class ScriptingComputationNode(TypedDict):
    additionalScripts: Sequence[Script]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: NotRequired[Optional[float]]
    mainScript: Script
    minimumContainerMemorySize: NotRequired[Optional[int]]
    output: str
    scriptingLanguage: ScriptingLanguage
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class ScriptingComputationNodeV9(TypedDict):
    additionalScripts: Sequence[Script]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: NotRequired[Optional[float]]
    mainScript: Script
    minimumContainerMemorySize: NotRequired[Optional[int]]
    output: str
    scriptingLanguage: ScriptingLanguageV9
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class SqlComputationNode(TypedDict):
    dependencies: Sequence[TableMapping]
    privacyFilter: NotRequired[Optional[SqlNodePrivacyFilter]]
    specificationId: str
    statement: str


class SqliteComputationNode(TypedDict):
    dependencies: Sequence[TableMapping]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    sqliteSpecificationId: str
    statement: str
    staticContentSpecificationId: str


class SyntheticNodeColumn(TypedDict):
    dataFormat: ColumnDataFormat
    index: int
    maskType: MaskType
    name: NotRequired[Optional[str]]
    shouldMaskColumn: bool


class TableLeafNodeColumnV2(TypedDict):
    dataFormat: ColumnDataFormat
    name: str
    validation: ColumnValidationV0


class TableValidationV0(TypedDict):
    allowEmpty: NotRequired[Optional[bool]]
    numRows: NotRequired[Optional[NumRowsValidationRule]]
    uniqueness: NotRequired[Optional[UniquenessValidationRule]]


class ValidationNodeV2(TypedDict):
    dropInvalidRows: NotRequired[Optional[bool]]
    pythonSpecificationId: str
    staticContentSpecificationId: str
    validation: TableValidationV0


class ComputationNodeKindV29(TypedDict):
    sql: SqlComputationNode


class ComputationNodeKindV210(TypedDict):
    sqlite: SqliteComputationNode


class ComputationNodeKindV211(TypedDict):
    scripting: ScriptingComputationNode


class ComputationNodeKindV613(ComputationNodeKindV29):
    pass


class ComputationNodeKindV614(ComputationNodeKindV210):
    pass


class ComputationNodeKindV615(ComputationNodeKindV211):
    pass


class ComputationNodeKindV914(ComputationNodeKindV29):
    pass


class ComputationNodeKindV915(ComputationNodeKindV210):
    pass


class ComputationNodeKindV916(TypedDict):
    scripting: ScriptingComputationNodeV9


class ComputationNodeKindV922(TypedDict):
    importConnector: ImportConnectorNodeV9


class DatasetSinkInput(TypedDict):
    datasetName: str
    dependency: str
    inputDataType: InputDataType


class EnvironmentComputationNode(TypedDict):
    kind: EnvironmentComputationNodeKind


class ExportConnectorNode(TypedDict):
    credentialsDependency: str
    dependency: ExportNodeDependency
    kind: ExportConnectorKind3
    specificationId: str


class ExportConnectorNodeV9(TypedDict):
    credentialsDependency: CredentialsDependencyV92
    dependency: ExportNodeDependency
    kind: ExportConnectorKind24
    specificationId: str


class SyntheticDataComputationNode(TypedDict):
    columns: Sequence[SyntheticNodeColumn]
    dependency: str
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    epsilon: float
    outputOriginalDataStatistics: bool
    staticContentSpecificationId: str
    synthSpecificationId: str


class TableLeafNodeV2(TypedDict):
    columns: Sequence[TableLeafNodeColumnV2]
    validationNode: ValidationNodeV2


class ComputationNodeKindV212(TypedDict):
    syntheticData: SyntheticDataComputationNode


ComputationNodeKindV28 = Union[
    ComputationNodeKindV29,
    ComputationNodeKindV210,
    ComputationNodeKindV211,
    ComputationNodeKindV212,
    ComputationNodeKindV2,
    ComputationNodeKindV214,
    ComputationNodeKindV215,
]


class ComputationNodeKindV616(ComputationNodeKindV212):
    pass


class ComputationNodeKindV622(TypedDict):
    exportConnector: ExportConnectorNode


class ComputationNodeKindV917(ComputationNodeKindV212):
    pass


class ComputationNodeKindV923(TypedDict):
    exportConnector: ExportConnectorNodeV9


class ComputationNodeKindV925(TypedDict):
    environment: EnvironmentComputationNode


class ComputationNodeV2(TypedDict):
    kind: ComputationNodeKindV28


class DatasetSinkComputationNode(TypedDict):
    datasetImportId: NotRequired[Optional[str]]
    encryptionKeyDependency: DatasetSinkEncryptionKeyDependency
    input: DatasetSinkInput
    specificationId: str


class LeafNodeKindV25(TypedDict):
    table: TableLeafNodeV2


LeafNodeKindV23 = Union[LeafNodeKindV2, LeafNodeKindV25]


class LeafNodeV2(TypedDict):
    isRequired: bool
    kind: LeafNodeKindV23


class NodeKindV2(TypedDict):
    leaf: LeafNodeV2


class NodeKindV25(TypedDict):
    computation: ComputationNodeV2


NodeKindV23 = Union[NodeKindV2, NodeKindV25]


class NodeKindV6(NodeKindV2):
    pass


class NodeKindV9(NodeKindV2):
    pass


class NodeV2(TypedDict):
    id: str
    kind: NodeKindV23
    name: str


class AddComputationCommitV2(TypedDict):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV2


class ComputationNodeKindV623(TypedDict):
    datasetSink: DatasetSinkComputationNode


ComputationNodeKindV612 = Union[
    ComputationNodeKindV613,
    ComputationNodeKindV614,
    ComputationNodeKindV615,
    ComputationNodeKindV616,
    ComputationNodeKindV6,
    ComputationNodeKindV618,
    ComputationNodeKindV619,
    ComputationNodeKindV620,
    ComputationNodeKindV621,
    ComputationNodeKindV622,
    ComputationNodeKindV623,
]


class ComputationNodeKindV924(ComputationNodeKindV623):
    pass


ComputationNodeKindV913 = Union[
    ComputationNodeKindV914,
    ComputationNodeKindV915,
    ComputationNodeKindV916,
    ComputationNodeKindV917,
    ComputationNodeKindV9,
    ComputationNodeKindV919,
    ComputationNodeKindV920,
    ComputationNodeKindV921,
    ComputationNodeKindV922,
    ComputationNodeKindV923,
    ComputationNodeKindV924,
    ComputationNodeKindV925,
]


class ComputationNodeV6(TypedDict):
    kind: ComputationNodeKindV612


class ComputationNodeV9(TypedDict):
    kind: ComputationNodeKindV913


class DataScienceCommitKindV2(TypedDict):
    addComputation: AddComputationCommitV2


DataScienceCommitKindV22 = DataScienceCommitKindV2


class DataScienceCommitV4(TypedDict):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV22
    name: str


class DataScienceCommitV5(DataScienceCommitV4):
    pass


class DataScienceDataRoomConfigurationV4(TypedDict):
    dcrSecretIdBase64: NotRequired[Optional[str]]
    description: str
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV5(TypedDict):
    dcrSecretIdBase64: NotRequired[Optional[str]]
    description: str
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomV41(TypedDict):
    static: DataScienceDataRoomConfigurationV4


class DataScienceDataRoomV51(TypedDict):
    static: DataScienceDataRoomConfigurationV5


class InteractiveDataScienceDataRoomV4(TypedDict):
    commits: Sequence[DataScienceCommitV4]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV4


class InteractiveDataScienceDataRoomV5(TypedDict):
    commits: Sequence[DataScienceCommitV5]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV5


class NodeKindV65(TypedDict):
    computation: ComputationNodeV6


NodeKindV63 = Union[NodeKindV6, NodeKindV65]


class NodeKindV95(TypedDict):
    computation: ComputationNodeV9


NodeKindV93 = Union[NodeKindV9, NodeKindV95]


class NodeV6(TypedDict):
    id: str
    kind: NodeKindV63
    name: str


class NodeV9(TypedDict):
    id: str
    kind: NodeKindV93
    name: str


class AddComputationCommitV6(TypedDict):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV6


class AddComputationCommitV9(TypedDict):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV9


class DataScienceCommitKindV6(TypedDict):
    addComputation: AddComputationCommitV6


DataScienceCommitKindV62 = DataScienceCommitKindV6


class DataScienceCommitKindV9(TypedDict):
    addComputation: AddComputationCommitV9


DataScienceCommitKindV92 = DataScienceCommitKindV9


class DataScienceCommitV10(TypedDict):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV92
    name: str


class DataScienceCommitV11(DataScienceCommitV10):
    pass


class DataScienceCommitV12(DataScienceCommitV10):
    pass


class DataScienceCommitV13(DataScienceCommitV10):
    pass


class DataScienceCommitV14(DataScienceCommitV10):
    pass


class DataScienceCommitV15(DataScienceCommitV10):
    pass


class DataScienceCommitV6(TypedDict):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV62
    name: str


class DataScienceCommitV7(DataScienceCommitV6):
    pass


class DataScienceCommitV8(DataScienceCommitV6):
    pass


class DataScienceCommitV9(DataScienceCommitV10):
    pass


class DataScienceDataRoomConfigurationV10(TypedDict):
    dcrSecretIdBase64: NotRequired[Optional[str]]
    description: str
    enableAirlock: bool
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enableForceSparkValidation: NotRequired[bool]
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV9]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV11(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomConfigurationV12(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomConfigurationV13(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomConfigurationV14(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomConfigurationV15(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomConfigurationV6(TypedDict):
    dcrSecretIdBase64: NotRequired[Optional[str]]
    description: str
    enableAirlock: bool
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV6]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV7(DataScienceDataRoomConfigurationV6):
    pass


class DataScienceDataRoomConfigurationV8(TypedDict):
    dcrSecretIdBase64: NotRequired[Optional[str]]
    description: str
    enableAirlock: bool
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enableForceSparkValidation: NotRequired[bool]
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV6]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV9(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomV101(TypedDict):
    static: DataScienceDataRoomConfigurationV10


class DataScienceDataRoomV111(TypedDict):
    static: DataScienceDataRoomConfigurationV11


class DataScienceDataRoomV121(TypedDict):
    static: DataScienceDataRoomConfigurationV12


class DataScienceDataRoomV131(TypedDict):
    static: DataScienceDataRoomConfigurationV13


class DataScienceDataRoomV141(TypedDict):
    static: DataScienceDataRoomConfigurationV14


class DataScienceDataRoomV151(TypedDict):
    static: DataScienceDataRoomConfigurationV15


class DataScienceDataRoomV42(TypedDict):
    interactive: InteractiveDataScienceDataRoomV4


DataScienceDataRoomV4 = Union[DataScienceDataRoomV41, DataScienceDataRoomV42]


class DataScienceDataRoomV52(TypedDict):
    interactive: InteractiveDataScienceDataRoomV5


DataScienceDataRoomV5 = Union[DataScienceDataRoomV51, DataScienceDataRoomV52]


class DataScienceDataRoomV61(TypedDict):
    static: DataScienceDataRoomConfigurationV6


class DataScienceDataRoomV71(TypedDict):
    static: DataScienceDataRoomConfigurationV7


class DataScienceDataRoomV81(TypedDict):
    static: DataScienceDataRoomConfigurationV8


class DataScienceDataRoomV91(TypedDict):
    static: DataScienceDataRoomConfigurationV9


class InteractiveDataScienceDataRoomV10(TypedDict):
    commits: Sequence[DataScienceCommitV10]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV10


class InteractiveDataScienceDataRoomV11(TypedDict):
    commits: Sequence[DataScienceCommitV11]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV11


class InteractiveDataScienceDataRoomV12(TypedDict):
    commits: Sequence[DataScienceCommitV12]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV12


class InteractiveDataScienceDataRoomV13(TypedDict):
    commits: Sequence[DataScienceCommitV13]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV13


class InteractiveDataScienceDataRoomV14(TypedDict):
    commits: Sequence[DataScienceCommitV14]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV14


class InteractiveDataScienceDataRoomV15(TypedDict):
    commits: Sequence[DataScienceCommitV15]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV15


class InteractiveDataScienceDataRoomV6(TypedDict):
    commits: Sequence[DataScienceCommitV6]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV6


class InteractiveDataScienceDataRoomV7(TypedDict):
    commits: Sequence[DataScienceCommitV7]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV7


class InteractiveDataScienceDataRoomV8(TypedDict):
    commits: Sequence[DataScienceCommitV8]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV8


class InteractiveDataScienceDataRoomV9(TypedDict):
    commits: Sequence[DataScienceCommitV9]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV9


class DataScienceDataRoom1(TypedDict):
    v4: DataScienceDataRoomV4


class DataScienceDataRoom2(TypedDict):
    v5: DataScienceDataRoomV5


class DataScienceDataRoomV102(TypedDict):
    interactive: InteractiveDataScienceDataRoomV10


DataScienceDataRoomV10 = Union[DataScienceDataRoomV101, DataScienceDataRoomV102]


class DataScienceDataRoomV112(TypedDict):
    interactive: InteractiveDataScienceDataRoomV11


DataScienceDataRoomV11 = Union[DataScienceDataRoomV111, DataScienceDataRoomV112]


class DataScienceDataRoomV122(TypedDict):
    interactive: InteractiveDataScienceDataRoomV12


DataScienceDataRoomV12 = Union[DataScienceDataRoomV121, DataScienceDataRoomV122]


class DataScienceDataRoomV132(TypedDict):
    interactive: InteractiveDataScienceDataRoomV13


DataScienceDataRoomV13 = Union[DataScienceDataRoomV131, DataScienceDataRoomV132]


class DataScienceDataRoomV142(TypedDict):
    interactive: InteractiveDataScienceDataRoomV14


DataScienceDataRoomV14 = Union[DataScienceDataRoomV141, DataScienceDataRoomV142]


class DataScienceDataRoomV152(TypedDict):
    interactive: InteractiveDataScienceDataRoomV15


DataScienceDataRoomV15 = Union[DataScienceDataRoomV151, DataScienceDataRoomV152]


class DataScienceDataRoomV62(TypedDict):
    interactive: InteractiveDataScienceDataRoomV6


DataScienceDataRoomV6 = Union[DataScienceDataRoomV61, DataScienceDataRoomV62]


class DataScienceDataRoomV72(TypedDict):
    interactive: InteractiveDataScienceDataRoomV7


DataScienceDataRoomV7 = Union[DataScienceDataRoomV71, DataScienceDataRoomV72]


class DataScienceDataRoomV82(TypedDict):
    interactive: InteractiveDataScienceDataRoomV8


DataScienceDataRoomV8 = Union[DataScienceDataRoomV81, DataScienceDataRoomV82]


class DataScienceDataRoomV92(TypedDict):
    interactive: InteractiveDataScienceDataRoomV9


DataScienceDataRoomV9 = Union[DataScienceDataRoomV91, DataScienceDataRoomV92]


class DataScienceDataRoom3(TypedDict):
    v6: DataScienceDataRoomV6


class DataScienceDataRoom4(TypedDict):
    v7: DataScienceDataRoomV7


class DataScienceDataRoom5(TypedDict):
    v8: DataScienceDataRoomV8


class DataScienceDataRoom6(TypedDict):
    v9: DataScienceDataRoomV9


class DataScienceDataRoom7(TypedDict):
    v10: DataScienceDataRoomV10


class DataScienceDataRoom8(TypedDict):
    v11: DataScienceDataRoomV11


class DataScienceDataRoom9(TypedDict):
    v12: DataScienceDataRoomV12


class DataScienceDataRoom10(TypedDict):
    v13: DataScienceDataRoomV13


class DataScienceDataRoom11(TypedDict):
    v14: DataScienceDataRoomV14


class DataScienceDataRoom12(TypedDict):
    v15: DataScienceDataRoomV15


DataScienceDataRoom = Union[
    DataScienceDataRoom1,
    DataScienceDataRoom2,
    DataScienceDataRoom3,
    DataScienceDataRoom4,
    DataScienceDataRoom5,
    DataScienceDataRoom6,
    DataScienceDataRoom7,
    DataScienceDataRoom8,
    DataScienceDataRoom9,
    DataScienceDataRoom10,
    DataScienceDataRoom11,
    DataScienceDataRoom12,
]

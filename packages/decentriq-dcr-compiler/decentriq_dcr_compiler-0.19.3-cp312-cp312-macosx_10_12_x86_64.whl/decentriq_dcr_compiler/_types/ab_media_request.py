# generated by datamodel-codegen:
#   filename:  ab_media_request.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class RetrieveDataRoom(TypedDict):
    dataRoomIdHex: str


class AbMediaRequest2(TypedDict):
    retrieveDataRoom: RetrieveDataRoom


class PublishAudiencesDataset(TypedDict):
    dataRoomIdHex: str
    datasetHashHex: str
    encryptionKeyHex: str
    scopeIdHex: str


class AbMediaRequest3(TypedDict):
    publishAudiencesDataset: PublishAudiencesDataset


class UnpublishAudiencesDataset(RetrieveDataRoom):
    pass


class AbMediaRequest4(TypedDict):
    unpublishAudiencesDataset: UnpublishAudiencesDataset


class PublishMatchingDataset(PublishAudiencesDataset):
    pass


class AbMediaRequest5(TypedDict):
    publishMatchingDataset: PublishMatchingDataset


class UnpublishMatchingDataset(RetrieveDataRoom):
    pass


class AbMediaRequest6(TypedDict):
    unpublishMatchingDataset: UnpublishMatchingDataset


class PublishDemographicsDataset(PublishAudiencesDataset):
    pass


class AbMediaRequest7(TypedDict):
    publishDemographicsDataset: PublishDemographicsDataset


class UnpublishDemographicsDataset(RetrieveDataRoom):
    pass


class AbMediaRequest8(TypedDict):
    unpublishDemographicsDataset: UnpublishDemographicsDataset


class PublishSegmentsDataset(PublishAudiencesDataset):
    pass


class AbMediaRequest9(TypedDict):
    publishSegmentsDataset: PublishSegmentsDataset


class UnpublishSegmentsDataset(RetrieveDataRoom):
    pass


class AbMediaRequest10(TypedDict):
    unpublishSegmentsDataset: UnpublishSegmentsDataset


class PublishEmbeddingsDataset(PublishAudiencesDataset):
    pass


class AbMediaRequest11(TypedDict):
    publishEmbeddingsDataset: PublishEmbeddingsDataset


class UnpublishEmbeddingsDataset(RetrieveDataRoom):
    pass


class AbMediaRequest12(TypedDict):
    unpublishEmbeddingsDataset: UnpublishEmbeddingsDataset


class PublishAudiencesJson(PublishAudiencesDataset):
    pass


class AbMediaRequest13(TypedDict):
    publishAudiencesJson: PublishAudiencesJson


class UnpublishAudiencesJson(RetrieveDataRoom):
    pass


class AbMediaRequest14(TypedDict):
    unpublishAudiencesJson: UnpublishAudiencesJson


class RetrievePublishedDatasets(RetrieveDataRoom):
    pass


class AbMediaRequest15(TypedDict):
    retrievePublishedDatasets: RetrievePublishedDatasets


class ComputeInsights(TypedDict):
    dataRoomIdHex: str
    scopeIdHex: str


class AbMediaRequest16(TypedDict):
    computeInsights: ComputeInsights


class GetMatchingValidationReport(ComputeInsights):
    pass


class AbMediaRequest17(TypedDict):
    getMatchingValidationReport: GetMatchingValidationReport


class GetSegmentsValidationReport(ComputeInsights):
    pass


class AbMediaRequest18(TypedDict):
    getSegmentsValidationReport: GetSegmentsValidationReport


class GetDemographicsValidationReport(ComputeInsights):
    pass


class AbMediaRequest19(TypedDict):
    getDemographicsValidationReport: GetDemographicsValidationReport


class GetAudiencesValidationReport(ComputeInsights):
    pass


class AbMediaRequest20(TypedDict):
    getAudiencesValidationReport: GetAudiencesValidationReport


class ComputeOverlapStatistics(ComputeInsights):
    pass


class AbMediaRequest22(TypedDict):
    computeOverlapStatistics: ComputeOverlapStatistics


class GetAudiencesForPublisher(ComputeInsights):
    pass


class AbMediaRequest27(TypedDict):
    getAudiencesForPublisher: GetAudiencesForPublisher


class GetAudiencesForAdvertiser(ComputeInsights):
    pass


class AbMediaRequest28(TypedDict):
    getAudiencesForAdvertiser: GetAudiencesForAdvertiser


class IngestAudiencesReport(ComputeInsights):
    pass


class AbMediaRequest29(TypedDict):
    ingestAudiencesReport: IngestAudiencesReport


class RetrieveModelQualityReport(ComputeInsights):
    pass


class AbMediaRequest30(TypedDict):
    retrieveModelQualityReport: RetrieveModelQualityReport


class GetDataAttributes(ComputeInsights):
    pass


class AbMediaRequest37(TypedDict):
    getDataAttributes: GetDataAttributes


class PythonEnvReport(ComputeInsights):
    pass


class AbMediaRequest38(TypedDict):
    pythonEnvReport: PythonEnvReport


BooleanOp = Literal['and', 'or']


CombineOperator = Literal['intersect', 'union', 'diff']


class EnclaveSpecificationV0(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


FilterOperator = Literal[
    'contains_any_of', 'contains_none_of', 'contains_all_of', 'empty', 'not_empty'
]


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


ModelEvaluationType = Literal['ROC_CURVE', 'DISTANCE_TO_EMBEDDING', 'JACCARD']


class RequirementFlagValue4(TypedDict):
    type: Literal['SUPPORTED']


class RequirementFlagValue5(TypedDict):
    type: Literal['DATASET']


class RequirementFlagValue6(TypedDict):
    type: Literal['PROPERTY']
    value: str


RequirementFlagValue = Union[
    RequirementFlagValue4, RequirementFlagValue5, RequirementFlagValue6
]


Status = Literal['ready', 'published', 'published_as_intermediate']


class AudienceFilter(TypedDict):
    attribute: str
    operator: FilterOperator
    values: NotRequired[Sequence[str]]


class AudienceFilters(TypedDict):
    boolean_op: BooleanOp
    filters: Sequence[AudienceFilter]


KnownOrUnknownRequirementFlagValue = Optional[RequirementFlagValue]


class ModelEvaluationConfig(TypedDict):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class MutableAudienceData(TypedDict):
    created_at: NotRequired[Optional[str]]
    name: str
    status: Status


class RequirementFlag(TypedDict):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOp8(TypedDict):
    has: RequirementFlag


class AbMediaComputeV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: NotRequired[Sequence[str]]
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class AbMediaComputeV1(AbMediaComputeV0):
    pass


class AbMediaComputeV2(AbMediaComputeV0):
    pass


class AbMediaComputeV3(AbMediaComputeV0):
    pass


class AbMediaComputeV4(AbMediaComputeV0):
    pass


class AbMediaComputeV5(AbMediaComputeV0):
    pass


class AbMediaComputeV6(AbMediaComputeV0):
    pass


class AbMediaComputeV7(AbMediaComputeV0):
    pass


class Audience1(TypedDict):
    audience_size: NotRequired[Optional[int]]
    audience_type: str
    id: str
    kind: Literal['advertiser']
    mutable: NotRequired[Optional[MutableAudienceData]]


class Audience2(TypedDict):
    exclude_seed_audience: NotRequired[Optional[bool]]
    id: str
    kind: Literal['lookalike']
    mutable: NotRequired[Optional[MutableAudienceData]]
    reach: int
    source_ref: str


class AudienceCombinator(TypedDict):
    filters: NotRequired[Optional[AudienceFilters]]
    operator: CombineOperator
    source_ref: str


class AbMediaCompute(TypedDict):
    v0: AbMediaComputeV0


class AbMediaCompute11(TypedDict):
    v1: AbMediaComputeV1


class AbMediaCompute12(TypedDict):
    v2: AbMediaComputeV2


class AbMediaCompute13(TypedDict):
    v3: AbMediaComputeV3


class AbMediaCompute14(TypedDict):
    v4: AbMediaComputeV4


class AbMediaCompute15(TypedDict):
    v5: AbMediaComputeV5


class AbMediaCompute16(TypedDict):
    v6: AbMediaComputeV6


class AbMediaCompute17(TypedDict):
    v7: AbMediaComputeV7


AbMediaCompute9 = Union[
    AbMediaCompute,
    AbMediaCompute11,
    AbMediaCompute12,
    AbMediaCompute13,
    AbMediaCompute14,
    AbMediaCompute15,
    AbMediaCompute16,
    AbMediaCompute17,
]


AbMediaComputeOrUnknown = Optional[AbMediaCompute9]


class Audience3(TypedDict):
    combine: NotRequired[Sequence[AudienceCombinator]]
    filters: NotRequired[Optional[AudienceFilters]]
    id: str
    kind: Literal['rulebased']
    mutable: NotRequired[Optional[MutableAudienceData]]
    source_ref: str


Audience = Union[Audience1, Audience2, Audience3]


class RequestedAudiencePayload(TypedDict):
    audiences: Sequence[Audience]
    target_ref: str


class GetLookalikeAudienceStatistics(TypedDict):
    dataRoomIdHex: str
    generateAudience: RequestedAudiencePayload
    scopeIdHex: str


class AbMediaRequest21(TypedDict):
    getLookalikeAudienceStatistics: GetLookalikeAudienceStatistics


class GetAudienceUserListForPublisher(GetLookalikeAudienceStatistics):
    pass


class AbMediaRequest23(TypedDict):
    getAudienceUserListForPublisher: GetAudienceUserListForPublisher


class GetAudienceUserListForAdvertiser(GetLookalikeAudienceStatistics):
    pass


class AbMediaRequest24(TypedDict):
    getAudienceUserListForAdvertiser: GetAudienceUserListForAdvertiser


class GetAudienceUserListForPublisherLal(TypedDict):
    dataRoomIdHex: str
    generateAudience: RequestedAudiencePayload
    lalAudience: RequestedAudiencePayload
    scopeIdHex: str


class AbMediaRequest25(TypedDict):
    getAudienceUserListForPublisherLal: GetAudienceUserListForPublisherLal


class GetAudienceUserListForAdvertiserLal(GetAudienceUserListForPublisherLal):
    pass


class AbMediaRequest26(TypedDict):
    getAudienceUserListForAdvertiserLal: GetAudienceUserListForAdvertiserLal


class RunCreateAudienceUserList(GetLookalikeAudienceStatistics):
    pass


class AbMediaRequest31(TypedDict):
    runCreateAudienceUserList: RunCreateAudienceUserList


class RunCreateAudienceUserListLal(GetAudienceUserListForPublisherLal):
    pass


class AbMediaRequest32(TypedDict):
    runCreateAudienceUserListLal: RunCreateAudienceUserListLal


class EstimateAudienceSizeForAdvertiser(GetLookalikeAudienceStatistics):
    pass


class AbMediaRequest33(TypedDict):
    estimateAudienceSizeForAdvertiser: EstimateAudienceSizeForAdvertiser


class EstimateAudienceSizeForPublisher(GetLookalikeAudienceStatistics):
    pass


class AbMediaRequest34(TypedDict):
    estimateAudienceSizeForPublisher: EstimateAudienceSizeForPublisher


class EstimateAudienceSizeForAdvertiserLal(GetAudienceUserListForPublisherLal):
    pass


class AbMediaRequest35(TypedDict):
    estimateAudienceSizeForAdvertiserLal: EstimateAudienceSizeForAdvertiserLal


class EstimateAudienceSizeForPublisherLal(GetAudienceUserListForPublisherLal):
    pass


class AbMediaRequest36(TypedDict):
    estimateAudienceSizeForPublisherLal: EstimateAudienceSizeForPublisherLal


class PublishDataRoom(TypedDict):
    dataRoom: AbMediaDcr
    requirePassword: bool
    showOrganizationLogo: bool


class AbMediaRequest1(TypedDict):
    publishDataRoom: PublishDataRoom


AbMediaRequest = Union[
    AbMediaRequest1,
    AbMediaRequest2,
    AbMediaRequest3,
    AbMediaRequest4,
    AbMediaRequest5,
    AbMediaRequest6,
    AbMediaRequest7,
    AbMediaRequest8,
    AbMediaRequest9,
    AbMediaRequest10,
    AbMediaRequest11,
    AbMediaRequest12,
    AbMediaRequest13,
    AbMediaRequest14,
    AbMediaRequest15,
    AbMediaRequest16,
    AbMediaRequest17,
    AbMediaRequest18,
    AbMediaRequest19,
    AbMediaRequest20,
    AbMediaRequest21,
    AbMediaRequest22,
    AbMediaRequest23,
    AbMediaRequest24,
    AbMediaRequest25,
    AbMediaRequest26,
    AbMediaRequest27,
    AbMediaRequest28,
    AbMediaRequest29,
    AbMediaRequest30,
    AbMediaRequest31,
    AbMediaRequest32,
    AbMediaRequest33,
    AbMediaRequest34,
    AbMediaRequest35,
    AbMediaRequest36,
    AbMediaRequest37,
    AbMediaRequest38,
]


class AbMediaDcr2(TypedDict):
    v0: AbMediaDcrInner


AbMediaDcr = AbMediaDcr2


class AbMediaDcrInner(TypedDict):
    compute: AbMediaComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


class ConsumerRequirements(TypedDict):
    optional: Sequence[RequirementFlag]
    required: NotRequired[Optional[RequirementOp]]


RequirementOp5 = TypedDict(
    'RequirementOp5',
    {
        'or': Sequence[RequirementOp],
    },
)


RequirementOp6 = TypedDict(
    'RequirementOp6',
    {
        'and': Sequence[RequirementOp],
    },
)


class RequirementOp7(TypedDict):
    exclusiveOr: Sequence[RequirementOp]


RequirementOp = Union[RequirementOp5, RequirementOp6, RequirementOp7, RequirementOp8]

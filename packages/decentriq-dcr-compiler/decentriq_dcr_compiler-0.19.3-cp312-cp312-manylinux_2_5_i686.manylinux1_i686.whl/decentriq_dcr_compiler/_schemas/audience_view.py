# generated by datamodel-codegen:
#   filename:  audience_view.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, Field, RootModel, conint


class Kind(Enum):
    CUSTOM = 'CUSTOM'


class Kind11(Enum):
    SEED = 'SEED'


class AudienceView2(BaseModel):
    audienceSize: Optional[conint(ge=0)] = None
    audienceType: str
    createdAt: str
    isEmpty: bool
    kind: Kind11


class Kind12(Enum):
    BASE = 'BASE'


class AudienceReference4(BaseModel):
    kind: Kind12


class AudienceReference5(BaseModel):
    id: str
    kind: Kind


class AudienceReference6(BaseModel):
    audienceType: str
    kind: Kind11


class AudienceReference(
    RootModel[Union[AudienceReference4, AudienceReference5, AudienceReference6]]
):
    root: Union[AudienceReference4, AudienceReference5, AudienceReference6]


class BooleanOp(Enum):
    AND = 'AND'
    OR = 'OR'


class CombineOperator(Enum):
    INTERSECT = 'INTERSECT'
    UNION = 'UNION'
    DIFF = 'DIFF'


class Kind15(Enum):
    LOOKALIKE = 'LOOKALIKE'


class CustomAudienceDefinition3(BaseModel):
    excludeSeedAudience: Optional[bool] = None
    kind: Kind15
    reach: conint(ge=0)
    sourceRef: AudienceReference


class Kind16(Enum):
    RULE_BASED = 'RULE_BASED'


class Kind17(Enum):
    REMARKETING = 'REMARKETING'


class FilterOperator(Enum):
    CONTAINS_ANY_OF = 'CONTAINS_ANY_OF'
    CONTAINS_NONE_OF = 'CONTAINS_NONE_OF'
    CONTAINS_ALL_OF = 'CONTAINS_ALL_OF'
    EMPTY = 'EMPTY'
    NOT_EMPTY = 'NOT_EMPTY'


class SeedAudienceReference(BaseModel):
    audienceType: str


class StalenessWarnings(BaseModel):
    missingCustomAudiences: Optional[Sequence[str]] = []
    missingFilterAttributes: Optional[Sequence[str]] = []
    missingFilterValues: Optional[Sequence[str]] = []
    missingSeedAudiences: Optional[Sequence[str]] = []


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class CustomAudienceDefinition5(BaseModel):
    kind: Kind17
    seedAudienceRef: SeedAudienceReference


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition4(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    kind: Kind16
    sourceRef: AudienceReference


class CustomAudienceDefinition(
    RootModel[
        Union[
            CustomAudienceDefinition3,
            CustomAudienceDefinition4,
            CustomAudienceDefinition5,
        ]
    ]
):
    root: Union[
        CustomAudienceDefinition3, CustomAudienceDefinition4, CustomAudienceDefinition5
    ]


class AudienceView1(BaseModel):
    createdAt: str
    createdBy: str
    definition: CustomAudienceDefinition
    doesAudienceDependOnLookalikeAudience: Optional[bool] = False
    id: str
    kind: Kind
    name: str
    sharedWith: Optional[Sequence[str]] = []
    stalenessWarnings: Optional[StalenessWarnings] = None


class AudienceView(RootModel[Union[AudienceView1, AudienceView2]]):
    root: Union[AudienceView1, AudienceView2] = Field(
        ...,
        description='An audience representation that unifies the seed audiences that come from the data and the audiences that are defined by the MDCR users. NOTE: This exists primarily for generating the type definitions used by the clients.',
        title='AudienceView',
    )

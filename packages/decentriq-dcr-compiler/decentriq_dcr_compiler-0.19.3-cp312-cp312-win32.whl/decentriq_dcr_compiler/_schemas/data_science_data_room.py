# generated by datamodel-codegen:
#   filename:  data_science_data_room.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class AnalystPermission(BaseModel):
    nodeId: str


class AwsConfig(BaseModel):
    bucket: str
    objectKey: Optional[str] = None
    region: str


class ColumnDataType(Enum):
    integer = 'integer'
    float = 'float'
    string = 'string'


class ColumnTuple(BaseModel):
    columns: Sequence[conint(ge=0)]


class CredentialsDependencyV9(Enum):
    splickyDsp = 'splickyDsp'


class CredentialsDependencyV95(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    user: str


class CredentialsDependencyV93(
    RootModel[Union[CredentialsDependencyV9, CredentialsDependencyV95]]
):
    root: Union[CredentialsDependencyV9, CredentialsDependencyV95]


class DataOwnerPermission(AnalystPermission):
    pass


class DatasetSinkEncryptionKeyDependency(BaseModel):
    dependency: str
    isKeyHexEncoded: bool


class EnclaveSpecification(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class ExportConnectorKind(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    aws: AwsConfig


class ExportConnectorKind3(RootModel[ExportConnectorKind]):
    root: ExportConnectorKind


class ExportConnectorKind2(ExportConnectorKind):
    pass


class ExportConnectorKind26(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    azure: Sequence = Field(..., max_length=0, min_length=0)


class ExportType4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    raw: Sequence = Field(..., max_length=0, min_length=0)


class ExportType5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    zipSingleFile: str


class ExportType6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    zipAllFiles: Sequence = Field(..., max_length=0, min_length=0)


class ExportType(RootModel[Union[ExportType4, ExportType5, ExportType6]]):
    root: Union[ExportType4, ExportType5, ExportType6]


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class GcsConfig(BaseModel):
    bucket: str
    objectKey: Optional[str] = None


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ImportConnectorKind(ExportConnectorKind):
    pass


class ImportConnectorKind3(RootModel[ImportConnectorKind]):
    root: ImportConnectorKind


class ImportConnectorKind2(ExportConnectorKind):
    pass


class ImportConnectorKind27(ExportConnectorKind26):
    pass


class ImportConnectorKind28(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gcs: GcsConfig


class ImportConnectorNode(BaseModel):
    credentialsDependency: str
    kind: ImportConnectorKind3
    specificationId: str


class InputDataType3(ExportType4):
    pass


class ManagerPermission(BaseModel):
    pass


class MaskType(Enum):
    genericString = 'genericString'
    genericNumber = 'genericNumber'
    name = 'name'
    address = 'address'
    postcode = 'postcode'
    phoneNumber = 'phoneNumber'
    socialSecurityNumber = 'socialSecurityNumber'
    email = 'email'
    date = 'date'
    timestamp = 'timestamp'
    iban = 'iban'


class MatchingComputationNode(BaseModel):
    config: str
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    output: str
    specificationId: str
    staticContentSpecificationId: str


class NumRowsValidationRule(BaseModel):
    atLeast: Optional[conint(ge=0)] = None
    atMost: Optional[conint(ge=0)] = None


class NumericRangeRule(BaseModel):
    greaterThan: Optional[float] = None
    greaterThanEquals: Optional[float] = None
    lessThan: Optional[float] = None
    lessThanEquals: Optional[float] = None


class ParticipantPermission1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataOwner: DataOwnerPermission


class ParticipantPermission2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    analyst: AnalystPermission


class ParticipantPermission3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    manager: ManagerPermission


class ParticipantPermission(
    RootModel[
        Union[ParticipantPermission1, ParticipantPermission2, ParticipantPermission3]
    ]
):
    root: Union[ParticipantPermission1, ParticipantPermission2, ParticipantPermission3]


class PostComputationNode(BaseModel):
    dependency: str
    specificationId: str
    useMockBackend: bool


class PreviewComputationNode(BaseModel):
    dependency: str
    quotaBytes: conint(ge=0)


class PythonEnvironmentComputationNode(BaseModel):
    extraChunkCacheSizeToAvailableMemoryRatio: Optional[float] = None
    minimumContainerMemorySize: Optional[conint(ge=0)] = None
    requirementsTxtContent: str
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class PythonOptions(BaseModel):
    customVirtualEnvironmentId: Optional[str] = None


class RawLeafNode(ManagerPermission):
    pass


class S3Provider(Enum):
    Aws = 'Aws'
    Gcs = 'Gcs'


class S3SinkComputationNode(BaseModel):
    credentialsDependencyId: str
    endpoint: str
    region: Optional[str] = ''
    s3Provider: Optional[S3Provider] = 'Aws'
    specificationId: str
    uploadDependencyId: str


class Script(BaseModel):
    content: str
    name: str


class ScriptingLanguage(Enum):
    python = 'python'
    r = 'r'


class ScriptingLanguageV93(Enum):
    r = 'r'


class ScriptingLanguageV94(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    python: PythonOptions


class ScriptingLanguageV9(RootModel[Union[ScriptingLanguageV93, ScriptingLanguageV94]]):
    root: Union[ScriptingLanguageV93, ScriptingLanguageV94]


class SnowflakeConfig(BaseModel):
    databaseName: str
    schemaName: str
    stageName: str
    tableName: str
    warehouseName: str


class SqlNodePrivacyFilter(BaseModel):
    minimumRowsCount: int


class TableMapping(BaseModel):
    nodeId: str
    tableName: str


class UniquenessValidationRule(BaseModel):
    uniqueKeys: Sequence[ColumnTuple]


class ZipInputDataType3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    all: Sequence = Field(..., max_length=0, min_length=0)


class ZipInputDataType4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    files: Sequence[str]


class ZipInputDataType(RootModel[Union[ZipInputDataType3, ZipInputDataType4]]):
    root: Union[ZipInputDataType3, ZipInputDataType4]


class ColumnDataFormat(BaseModel):
    dataType: ColumnDataType
    isNullable: bool


class ColumnValidationV0(BaseModel):
    allowNull: bool
    formatType: FormatType
    hashWith: Optional[HashingAlgorithm] = None
    inRange: Optional[NumericRangeRule] = None
    name: Optional[str] = None


class ComputationNodeKindV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    s3Sink: S3SinkComputationNode


class ComputationNodeKindV214(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    match: MatchingComputationNode


class ComputationNodeKindV215(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    post: PostComputationNode


class ComputationNodeKindV6(ComputationNodeKindV2):
    pass


class ComputationNodeKindV618(ComputationNodeKindV214):
    pass


class ComputationNodeKindV619(ComputationNodeKindV215):
    pass


class ComputationNodeKindV620(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    preview: PreviewComputationNode


class ComputationNodeKindV621(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    importConnector: ImportConnectorNode


class ComputationNodeKindV9(ComputationNodeKindV2):
    pass


class ComputationNodeKindV919(ComputationNodeKindV214):
    pass


class ComputationNodeKindV920(ComputationNodeKindV215):
    pass


class ComputationNodeKindV921(ComputationNodeKindV620):
    pass


class EnvironmentComputationNodeKind2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    python: PythonEnvironmentComputationNode


class EnvironmentComputationNodeKind(RootModel[EnvironmentComputationNodeKind2]):
    root: EnvironmentComputationNodeKind2


class ExportConnectorKind27(ImportConnectorKind28):
    pass


class ExportConnectorKind24(
    RootModel[Union[ExportConnectorKind2, ExportConnectorKind26, ExportConnectorKind27]]
):
    root: Union[ExportConnectorKind2, ExportConnectorKind26, ExportConnectorKind27]


class ExportNodeDependency(BaseModel):
    exportType: ExportType
    name: str


class ImportConnectorKind29(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    snowflake: SnowflakeConfig


class ImportConnectorKind25(
    RootModel[
        Union[
            ImportConnectorKind2,
            ImportConnectorKind27,
            ImportConnectorKind28,
            ImportConnectorKind29,
        ]
    ]
):
    root: Union[
        ImportConnectorKind2,
        ImportConnectorKind27,
        ImportConnectorKind28,
        ImportConnectorKind29,
    ]


class ImportConnectorNodeV9(BaseModel):
    credentialsDependency: str
    kind: ImportConnectorKind25
    specificationId: str


class InputDataType4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    zip: ZipInputDataType


class InputDataType(RootModel[Union[InputDataType3, InputDataType4]]):
    root: Union[InputDataType3, InputDataType4]


class LeafNodeKindV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    raw: RawLeafNode


class Participant(BaseModel):
    permissions: Sequence[ParticipantPermission]
    user: str


class ScriptingComputationNode(BaseModel):
    additionalScripts: Sequence[Script]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: Optional[float] = None
    mainScript: Script
    minimumContainerMemorySize: Optional[conint(ge=0)] = None
    output: str
    scriptingLanguage: ScriptingLanguage
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class ScriptingComputationNodeV9(BaseModel):
    additionalScripts: Sequence[Script]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: Optional[float] = None
    mainScript: Script
    minimumContainerMemorySize: Optional[conint(ge=0)] = None
    output: str
    scriptingLanguage: ScriptingLanguageV9
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class SqlComputationNode(BaseModel):
    dependencies: Sequence[TableMapping]
    privacyFilter: Optional[SqlNodePrivacyFilter] = None
    specificationId: str
    statement: str


class SqliteComputationNode(BaseModel):
    dependencies: Sequence[TableMapping]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    sqliteSpecificationId: str
    statement: str
    staticContentSpecificationId: str


class SyntheticNodeColumn(BaseModel):
    dataFormat: ColumnDataFormat
    index: int
    maskType: MaskType
    name: Optional[str] = None
    shouldMaskColumn: bool


class TableLeafNodeColumnV2(BaseModel):
    dataFormat: ColumnDataFormat
    name: str
    validation: ColumnValidationV0


class TableValidationV0(BaseModel):
    allowEmpty: Optional[bool] = None
    numRows: Optional[NumRowsValidationRule] = None
    uniqueness: Optional[UniquenessValidationRule] = None


class ValidationNodeV2(BaseModel):
    dropInvalidRows: Optional[bool] = None
    pythonSpecificationId: str
    staticContentSpecificationId: str
    validation: TableValidationV0


class ComputationNodeKindV29(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sql: SqlComputationNode


class ComputationNodeKindV210(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sqlite: SqliteComputationNode


class ComputationNodeKindV211(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scripting: ScriptingComputationNode


class ComputationNodeKindV613(ComputationNodeKindV29):
    pass


class ComputationNodeKindV614(ComputationNodeKindV210):
    pass


class ComputationNodeKindV615(ComputationNodeKindV211):
    pass


class ComputationNodeKindV914(ComputationNodeKindV29):
    pass


class ComputationNodeKindV915(ComputationNodeKindV210):
    pass


class ComputationNodeKindV916(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scripting: ScriptingComputationNodeV9


class ComputationNodeKindV922(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    importConnector: ImportConnectorNodeV9


class DatasetSinkInput(BaseModel):
    datasetName: str
    dependency: str
    inputDataType: InputDataType


class EnvironmentComputationNode(BaseModel):
    kind: EnvironmentComputationNodeKind


class ExportConnectorNode(BaseModel):
    credentialsDependency: str
    dependency: ExportNodeDependency
    kind: ExportConnectorKind3
    specificationId: str


class ExportConnectorNodeV9(BaseModel):
    credentialsDependency: CredentialsDependencyV93
    dependency: ExportNodeDependency
    kind: ExportConnectorKind24
    specificationId: str


class SyntheticDataComputationNode(BaseModel):
    columns: Sequence[SyntheticNodeColumn]
    dependency: str
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    epsilon: float
    outputOriginalDataStatistics: bool
    staticContentSpecificationId: str
    synthSpecificationId: str


class TableLeafNodeV2(BaseModel):
    columns: Sequence[TableLeafNodeColumnV2]
    validationNode: ValidationNodeV2


class ComputationNodeKindV212(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    syntheticData: SyntheticDataComputationNode


class ComputationNodeKindV28(
    RootModel[
        Union[
            ComputationNodeKindV29,
            ComputationNodeKindV210,
            ComputationNodeKindV211,
            ComputationNodeKindV212,
            ComputationNodeKindV2,
            ComputationNodeKindV214,
            ComputationNodeKindV215,
        ]
    ]
):
    root: Union[
        ComputationNodeKindV29,
        ComputationNodeKindV210,
        ComputationNodeKindV211,
        ComputationNodeKindV212,
        ComputationNodeKindV2,
        ComputationNodeKindV214,
        ComputationNodeKindV215,
    ]


class ComputationNodeKindV616(ComputationNodeKindV212):
    pass


class ComputationNodeKindV622(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exportConnector: ExportConnectorNode


class ComputationNodeKindV917(ComputationNodeKindV212):
    pass


class ComputationNodeKindV923(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exportConnector: ExportConnectorNodeV9


class ComputationNodeKindV925(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    environment: EnvironmentComputationNode


class ComputationNodeV2(BaseModel):
    kind: ComputationNodeKindV28


class DatasetSinkComputationNode(BaseModel):
    datasetImportId: Optional[str] = None
    encryptionKeyDependency: DatasetSinkEncryptionKeyDependency
    input: DatasetSinkInput
    specificationId: str


class LeafNodeKindV25(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    table: TableLeafNodeV2


class LeafNodeKindV23(RootModel[Union[LeafNodeKindV2, LeafNodeKindV25]]):
    root: Union[LeafNodeKindV2, LeafNodeKindV25]


class LeafNodeV2(BaseModel):
    isRequired: bool
    kind: LeafNodeKindV23


class NodeKindV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    leaf: LeafNodeV2


class NodeKindV25(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computation: ComputationNodeV2


class NodeKindV23(RootModel[Union[NodeKindV2, NodeKindV25]]):
    root: Union[NodeKindV2, NodeKindV25]


class NodeKindV6(NodeKindV2):
    pass


class NodeKindV9(NodeKindV2):
    pass


class NodeV2(BaseModel):
    id: str
    kind: NodeKindV23
    name: str


class AddComputationCommitV2(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV2


class ComputationNodeKindV623(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetSink: DatasetSinkComputationNode


class ComputationNodeKindV612(
    RootModel[
        Union[
            ComputationNodeKindV613,
            ComputationNodeKindV614,
            ComputationNodeKindV615,
            ComputationNodeKindV616,
            ComputationNodeKindV6,
            ComputationNodeKindV618,
            ComputationNodeKindV619,
            ComputationNodeKindV620,
            ComputationNodeKindV621,
            ComputationNodeKindV622,
            ComputationNodeKindV623,
        ]
    ]
):
    root: Union[
        ComputationNodeKindV613,
        ComputationNodeKindV614,
        ComputationNodeKindV615,
        ComputationNodeKindV616,
        ComputationNodeKindV6,
        ComputationNodeKindV618,
        ComputationNodeKindV619,
        ComputationNodeKindV620,
        ComputationNodeKindV621,
        ComputationNodeKindV622,
        ComputationNodeKindV623,
    ]


class ComputationNodeKindV924(ComputationNodeKindV623):
    pass


class ComputationNodeKindV913(
    RootModel[
        Union[
            ComputationNodeKindV914,
            ComputationNodeKindV915,
            ComputationNodeKindV916,
            ComputationNodeKindV917,
            ComputationNodeKindV9,
            ComputationNodeKindV919,
            ComputationNodeKindV920,
            ComputationNodeKindV921,
            ComputationNodeKindV922,
            ComputationNodeKindV923,
            ComputationNodeKindV924,
            ComputationNodeKindV925,
        ]
    ]
):
    root: Union[
        ComputationNodeKindV914,
        ComputationNodeKindV915,
        ComputationNodeKindV916,
        ComputationNodeKindV917,
        ComputationNodeKindV9,
        ComputationNodeKindV919,
        ComputationNodeKindV920,
        ComputationNodeKindV921,
        ComputationNodeKindV922,
        ComputationNodeKindV923,
        ComputationNodeKindV924,
        ComputationNodeKindV925,
    ]


class ComputationNodeV6(BaseModel):
    kind: ComputationNodeKindV612


class ComputationNodeV9(BaseModel):
    kind: ComputationNodeKindV913


class DataScienceCommitKindV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addComputation: AddComputationCommitV2


class DataScienceCommitKindV22(RootModel[DataScienceCommitKindV2]):
    root: DataScienceCommitKindV2


class DataScienceCommitV4(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV22
    name: str


class DataScienceCommitV5(DataScienceCommitV4):
    pass


class DataScienceDataRoomConfigurationV4(BaseModel):
    dcrSecretIdBase64: Optional[str] = None
    description: str
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV5(BaseModel):
    dcrSecretIdBase64: Optional[str] = None
    description: str
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomV41(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV4


class DataScienceDataRoomV51(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV5


class InteractiveDataScienceDataRoomV4(BaseModel):
    commits: Sequence[DataScienceCommitV4]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV4


class InteractiveDataScienceDataRoomV5(BaseModel):
    commits: Sequence[DataScienceCommitV5]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV5


class NodeKindV65(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computation: ComputationNodeV6


class NodeKindV63(RootModel[Union[NodeKindV6, NodeKindV65]]):
    root: Union[NodeKindV6, NodeKindV65]


class NodeKindV95(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computation: ComputationNodeV9


class NodeKindV93(RootModel[Union[NodeKindV9, NodeKindV95]]):
    root: Union[NodeKindV9, NodeKindV95]


class NodeV6(BaseModel):
    id: str
    kind: NodeKindV63
    name: str


class NodeV9(BaseModel):
    id: str
    kind: NodeKindV93
    name: str


class AddComputationCommitV6(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV6


class AddComputationCommitV9(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV9


class DataScienceCommitKindV6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addComputation: AddComputationCommitV6


class DataScienceCommitKindV62(RootModel[DataScienceCommitKindV6]):
    root: DataScienceCommitKindV6


class DataScienceCommitKindV9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addComputation: AddComputationCommitV9


class DataScienceCommitKindV92(RootModel[DataScienceCommitKindV9]):
    root: DataScienceCommitKindV9


class DataScienceCommitV10(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV92
    name: str


class DataScienceCommitV11(DataScienceCommitV10):
    pass


class DataScienceCommitV12(DataScienceCommitV10):
    pass


class DataScienceCommitV13(DataScienceCommitV10):
    pass


class DataScienceCommitV14(DataScienceCommitV10):
    pass


class DataScienceCommitV15(DataScienceCommitV10):
    pass


class DataScienceCommitV6(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV62
    name: str


class DataScienceCommitV7(DataScienceCommitV6):
    pass


class DataScienceCommitV8(DataScienceCommitV6):
    pass


class DataScienceCommitV9(DataScienceCommitV10):
    pass


class DataScienceDataRoomConfigurationV10(BaseModel):
    dcrSecretIdBase64: Optional[str] = None
    description: str
    enableAirlock: bool
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enableForceSparkValidation: Optional[bool] = False
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV9]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV11(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomConfigurationV12(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomConfigurationV13(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomConfigurationV14(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomConfigurationV15(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomConfigurationV6(BaseModel):
    dcrSecretIdBase64: Optional[str] = None
    description: str
    enableAirlock: bool
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV6]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV7(DataScienceDataRoomConfigurationV6):
    pass


class DataScienceDataRoomConfigurationV8(BaseModel):
    dcrSecretIdBase64: Optional[str] = None
    description: str
    enableAirlock: bool
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enableForceSparkValidation: Optional[bool] = False
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV6]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV9(DataScienceDataRoomConfigurationV10):
    pass


class DataScienceDataRoomV101(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV10


class DataScienceDataRoomV111(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV11


class DataScienceDataRoomV121(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV12


class DataScienceDataRoomV131(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV13


class DataScienceDataRoomV141(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV14


class DataScienceDataRoomV151(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV15


class DataScienceDataRoomV42(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV4


class DataScienceDataRoomV4(
    RootModel[Union[DataScienceDataRoomV41, DataScienceDataRoomV42]]
):
    root: Union[DataScienceDataRoomV41, DataScienceDataRoomV42]


class DataScienceDataRoomV52(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV5


class DataScienceDataRoomV5(
    RootModel[Union[DataScienceDataRoomV51, DataScienceDataRoomV52]]
):
    root: Union[DataScienceDataRoomV51, DataScienceDataRoomV52]


class DataScienceDataRoomV61(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV6


class DataScienceDataRoomV71(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV7


class DataScienceDataRoomV81(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV8


class DataScienceDataRoomV91(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV9


class InteractiveDataScienceDataRoomV10(BaseModel):
    commits: Sequence[DataScienceCommitV10]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV10


class InteractiveDataScienceDataRoomV11(BaseModel):
    commits: Sequence[DataScienceCommitV11]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV11


class InteractiveDataScienceDataRoomV12(BaseModel):
    commits: Sequence[DataScienceCommitV12]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV12


class InteractiveDataScienceDataRoomV13(BaseModel):
    commits: Sequence[DataScienceCommitV13]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV13


class InteractiveDataScienceDataRoomV14(BaseModel):
    commits: Sequence[DataScienceCommitV14]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV14


class InteractiveDataScienceDataRoomV15(BaseModel):
    commits: Sequence[DataScienceCommitV15]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV15


class InteractiveDataScienceDataRoomV6(BaseModel):
    commits: Sequence[DataScienceCommitV6]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV6


class InteractiveDataScienceDataRoomV7(BaseModel):
    commits: Sequence[DataScienceCommitV7]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV7


class InteractiveDataScienceDataRoomV8(BaseModel):
    commits: Sequence[DataScienceCommitV8]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV8


class InteractiveDataScienceDataRoomV9(BaseModel):
    commits: Sequence[DataScienceCommitV9]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV9


class DataScienceDataRoom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v4: DataScienceDataRoomV4


class DataScienceDataRoom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v5: DataScienceDataRoomV5


class DataScienceDataRoomV102(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV10


class DataScienceDataRoomV10(
    RootModel[Union[DataScienceDataRoomV101, DataScienceDataRoomV102]]
):
    root: Union[DataScienceDataRoomV101, DataScienceDataRoomV102]


class DataScienceDataRoomV112(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV11


class DataScienceDataRoomV11(
    RootModel[Union[DataScienceDataRoomV111, DataScienceDataRoomV112]]
):
    root: Union[DataScienceDataRoomV111, DataScienceDataRoomV112]


class DataScienceDataRoomV122(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV12


class DataScienceDataRoomV12(
    RootModel[Union[DataScienceDataRoomV121, DataScienceDataRoomV122]]
):
    root: Union[DataScienceDataRoomV121, DataScienceDataRoomV122]


class DataScienceDataRoomV132(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV13


class DataScienceDataRoomV13(
    RootModel[Union[DataScienceDataRoomV131, DataScienceDataRoomV132]]
):
    root: Union[DataScienceDataRoomV131, DataScienceDataRoomV132]


class DataScienceDataRoomV142(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV14


class DataScienceDataRoomV14(
    RootModel[Union[DataScienceDataRoomV141, DataScienceDataRoomV142]]
):
    root: Union[DataScienceDataRoomV141, DataScienceDataRoomV142]


class DataScienceDataRoomV152(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV15


class DataScienceDataRoomV15(
    RootModel[Union[DataScienceDataRoomV151, DataScienceDataRoomV152]]
):
    root: Union[DataScienceDataRoomV151, DataScienceDataRoomV152]


class DataScienceDataRoomV62(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV6


class DataScienceDataRoomV6(
    RootModel[Union[DataScienceDataRoomV61, DataScienceDataRoomV62]]
):
    root: Union[DataScienceDataRoomV61, DataScienceDataRoomV62]


class DataScienceDataRoomV72(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV7


class DataScienceDataRoomV7(
    RootModel[Union[DataScienceDataRoomV71, DataScienceDataRoomV72]]
):
    root: Union[DataScienceDataRoomV71, DataScienceDataRoomV72]


class DataScienceDataRoomV82(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV8


class DataScienceDataRoomV8(
    RootModel[Union[DataScienceDataRoomV81, DataScienceDataRoomV82]]
):
    root: Union[DataScienceDataRoomV81, DataScienceDataRoomV82]


class DataScienceDataRoomV92(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV9


class DataScienceDataRoomV9(
    RootModel[Union[DataScienceDataRoomV91, DataScienceDataRoomV92]]
):
    root: Union[DataScienceDataRoomV91, DataScienceDataRoomV92]


class DataScienceDataRoom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v6: DataScienceDataRoomV6


class DataScienceDataRoom4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v7: DataScienceDataRoomV7


class DataScienceDataRoom5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v8: DataScienceDataRoomV8


class DataScienceDataRoom6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v9: DataScienceDataRoomV9


class DataScienceDataRoom7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v10: DataScienceDataRoomV10


class DataScienceDataRoom8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v11: DataScienceDataRoomV11


class DataScienceDataRoom9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v12: DataScienceDataRoomV12


class DataScienceDataRoom10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v13: DataScienceDataRoomV13


class DataScienceDataRoom11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v14: DataScienceDataRoomV14


class DataScienceDataRoom12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v15: DataScienceDataRoomV15


class DataScienceDataRoom(
    RootModel[
        Union[
            DataScienceDataRoom1,
            DataScienceDataRoom2,
            DataScienceDataRoom3,
            DataScienceDataRoom4,
            DataScienceDataRoom5,
            DataScienceDataRoom6,
            DataScienceDataRoom7,
            DataScienceDataRoom8,
            DataScienceDataRoom9,
            DataScienceDataRoom10,
            DataScienceDataRoom11,
            DataScienceDataRoom12,
        ]
    ]
):
    root: Union[
        DataScienceDataRoom1,
        DataScienceDataRoom2,
        DataScienceDataRoom3,
        DataScienceDataRoom4,
        DataScienceDataRoom5,
        DataScienceDataRoom6,
        DataScienceDataRoom7,
        DataScienceDataRoom8,
        DataScienceDataRoom9,
        DataScienceDataRoom10,
        DataScienceDataRoom11,
        DataScienceDataRoom12,
    ] = Field(..., title='DataScienceDataRoom')

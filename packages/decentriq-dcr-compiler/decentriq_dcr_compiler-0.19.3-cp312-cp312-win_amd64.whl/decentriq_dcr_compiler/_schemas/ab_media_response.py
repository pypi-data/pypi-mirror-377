# generated by datamodel-codegen:
#   filename:  ab_media_response.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class PublishDataRoom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomId: str


class AbMediaResponse1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishDataRoom: PublishDataRoom


class AbMediaResponse3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishAudiencesDataset: Mapping[str, Any]


class AbMediaResponse4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishAudiencesDataset: Mapping[str, Any]


class AbMediaResponse5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishMatchingDataset: Mapping[str, Any]


class AbMediaResponse6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishMatchingDataset: Mapping[str, Any]


class AbMediaResponse7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishDemographicsDataset: Mapping[str, Any]


class AbMediaResponse8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishDemographicsDataset: Mapping[str, Any]


class AbMediaResponse9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishSegmentsDataset: Mapping[str, Any]


class AbMediaResponse10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishSegmentsDataset: Mapping[str, Any]


class AbMediaResponse11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishEmbeddingsDataset: Mapping[str, Any]


class AbMediaResponse12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishEmbeddingsDataset: Mapping[str, Any]


class AbMediaResponse13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishAudiencesJson: Mapping[str, Any]


class AbMediaResponse14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishAudiencesJson: Mapping[str, Any]


class RetrievePublishedDatasets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    audiencesDatasetHashHex: Optional[str] = None
    demographicsDatasetHashHex: Optional[str] = None
    embeddingsDatasetHashHex: Optional[str] = None
    matchingDatasetHashHex: Optional[str] = None
    segmentsDatasetHashHex: Optional[str] = None


class AbMediaResponse15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrievePublishedDatasets: RetrievePublishedDatasets


class ComputeInsights(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeNodeName: str
    jobIdHex: str


class AbMediaResponse16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeInsights: ComputeInsights


class GetMatchingValidationReport(ComputeInsights):
    pass


class AbMediaResponse17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getMatchingValidationReport: GetMatchingValidationReport


class GetSegmentsValidationReport(ComputeInsights):
    pass


class AbMediaResponse18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getSegmentsValidationReport: GetSegmentsValidationReport


class GetDemographicsValidationReport(ComputeInsights):
    pass


class AbMediaResponse19(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getDemographicsValidationReport: GetDemographicsValidationReport


class GetAudiencesValidationReport(ComputeInsights):
    pass


class AbMediaResponse20(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiencesValidationReport: GetAudiencesValidationReport


class GetLookalikeAudienceStatistics(ComputeInsights):
    pass


class AbMediaResponse21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getLookalikeAudienceStatistics: GetLookalikeAudienceStatistics


class ComputeOverlapStatistics(ComputeInsights):
    pass


class AbMediaResponse22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeOverlapStatistics: ComputeOverlapStatistics


class GetAudienceUserListForPublisher(ComputeInsights):
    pass


class AbMediaResponse23(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserListForPublisher: GetAudienceUserListForPublisher


class GetAudienceUserListForAdvertiser(ComputeInsights):
    pass


class AbMediaResponse24(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserListForAdvertiser: GetAudienceUserListForAdvertiser


class GetAudienceUserListForPublisherLal(ComputeInsights):
    pass


class AbMediaResponse25(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserListForPublisherLal: GetAudienceUserListForPublisherLal


class GetAudienceUserListForAdvertiserLal(ComputeInsights):
    pass


class AbMediaResponse26(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserListForAdvertiserLal: GetAudienceUserListForAdvertiserLal


class GetAudiencesForPublisher(ComputeInsights):
    pass


class AbMediaResponse27(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiencesForPublisher: GetAudiencesForPublisher


class GetAudiencesForAdvertiser(ComputeInsights):
    pass


class AbMediaResponse28(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiencesForAdvertiser: GetAudiencesForAdvertiser


class IngestAudiencesReport(ComputeInsights):
    pass


class AbMediaResponse29(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ingestAudiencesReport: IngestAudiencesReport


class RunCreateAudienceUserList(ComputeInsights):
    pass


class AbMediaResponse30(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    runCreateAudienceUserList: RunCreateAudienceUserList


class RunCreateAudienceUserListLal(ComputeInsights):
    pass


class AbMediaResponse31(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    runCreateAudienceUserListLal: RunCreateAudienceUserListLal


class EstimateAudienceSizeForAdvertiser(ComputeInsights):
    pass


class AbMediaResponse32(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    estimateAudienceSizeForAdvertiser: EstimateAudienceSizeForAdvertiser


class EstimateAudienceSizeForPublisher(ComputeInsights):
    pass


class AbMediaResponse33(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    estimateAudienceSizeForPublisher: EstimateAudienceSizeForPublisher


class EstimateAudienceSizeForAdvertiserLal(ComputeInsights):
    pass


class AbMediaResponse34(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    estimateAudienceSizeForAdvertiserLal: EstimateAudienceSizeForAdvertiserLal


class EstimateAudienceSizeForPublisherLal(ComputeInsights):
    pass


class AbMediaResponse35(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    estimateAudienceSizeForPublisherLal: EstimateAudienceSizeForPublisherLal


class RetrieveModelQualityReport(ComputeInsights):
    pass


class AbMediaResponse36(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveModelQualityReport: RetrieveModelQualityReport


class GetDataAttributes(ComputeInsights):
    pass


class AbMediaResponse37(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getDataAttributes: GetDataAttributes


class PythonEnvReport(ComputeInsights):
    pass


class AbMediaResponse38(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    pythonEnvReport: PythonEnvReport


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class Type(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValue7(BaseModel):
    type: Type


class Type7(Enum):
    DATASET = 'DATASET'


class RequirementFlagValue8(BaseModel):
    type: Type7


class Type8(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValue9(BaseModel):
    type: Type8
    value: str


class RequirementFlagValue(
    RootModel[
        Union[RequirementFlagValue7, RequirementFlagValue8, RequirementFlagValue9]
    ]
):
    root: Union[RequirementFlagValue7, RequirementFlagValue8, RequirementFlagValue9]


class KnownOrUnknownRequirementFlagValue(RootModel[Optional[RequirementFlagValue]]):
    root: Optional[RequirementFlagValue]


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOp12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    has: RequirementFlag


class AbMediaComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: Optional[Sequence[str]] = None
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class AbMediaComputeV1(AbMediaComputeV0):
    pass


class AbMediaComputeV2(AbMediaComputeV0):
    pass


class AbMediaComputeV3(AbMediaComputeV0):
    pass


class AbMediaComputeV4(AbMediaComputeV0):
    pass


class AbMediaComputeV5(AbMediaComputeV0):
    pass


class AbMediaComputeV6(AbMediaComputeV0):
    pass


class AbMediaComputeV7(AbMediaComputeV0):
    pass


class AbMediaCompute(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: AbMediaComputeV0


class AbMediaCompute20(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: AbMediaComputeV1


class AbMediaCompute21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: AbMediaComputeV2


class AbMediaCompute22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: AbMediaComputeV3


class AbMediaCompute23(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v4: AbMediaComputeV4


class AbMediaCompute24(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v5: AbMediaComputeV5


class AbMediaCompute25(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v6: AbMediaComputeV6


class AbMediaCompute26(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v7: AbMediaComputeV7


class AbMediaCompute18(
    RootModel[
        Union[
            AbMediaCompute,
            AbMediaCompute20,
            AbMediaCompute21,
            AbMediaCompute22,
            AbMediaCompute23,
            AbMediaCompute24,
            AbMediaCompute25,
            AbMediaCompute26,
        ]
    ]
):
    root: Union[
        AbMediaCompute,
        AbMediaCompute20,
        AbMediaCompute21,
        AbMediaCompute22,
        AbMediaCompute23,
        AbMediaCompute24,
        AbMediaCompute25,
        AbMediaCompute26,
    ]


class AbMediaComputeOrUnknown(RootModel[Optional[AbMediaCompute18]]):
    root: Optional[AbMediaCompute18]


class RetrieveDataRoom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoom: AbMediaDcr


class AbMediaResponse2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveDataRoom: RetrieveDataRoom


class AbMediaResponse(
    RootModel[
        Union[
            AbMediaResponse1,
            AbMediaResponse2,
            AbMediaResponse3,
            AbMediaResponse4,
            AbMediaResponse5,
            AbMediaResponse6,
            AbMediaResponse7,
            AbMediaResponse8,
            AbMediaResponse9,
            AbMediaResponse10,
            AbMediaResponse11,
            AbMediaResponse12,
            AbMediaResponse13,
            AbMediaResponse14,
            AbMediaResponse15,
            AbMediaResponse16,
            AbMediaResponse17,
            AbMediaResponse18,
            AbMediaResponse19,
            AbMediaResponse20,
            AbMediaResponse21,
            AbMediaResponse22,
            AbMediaResponse23,
            AbMediaResponse24,
            AbMediaResponse25,
            AbMediaResponse26,
            AbMediaResponse27,
            AbMediaResponse28,
            AbMediaResponse29,
            AbMediaResponse30,
            AbMediaResponse31,
            AbMediaResponse32,
            AbMediaResponse33,
            AbMediaResponse34,
            AbMediaResponse35,
            AbMediaResponse36,
            AbMediaResponse37,
            AbMediaResponse38,
        ]
    ]
):
    root: Union[
        AbMediaResponse1,
        AbMediaResponse2,
        AbMediaResponse3,
        AbMediaResponse4,
        AbMediaResponse5,
        AbMediaResponse6,
        AbMediaResponse7,
        AbMediaResponse8,
        AbMediaResponse9,
        AbMediaResponse10,
        AbMediaResponse11,
        AbMediaResponse12,
        AbMediaResponse13,
        AbMediaResponse14,
        AbMediaResponse15,
        AbMediaResponse16,
        AbMediaResponse17,
        AbMediaResponse18,
        AbMediaResponse19,
        AbMediaResponse20,
        AbMediaResponse21,
        AbMediaResponse22,
        AbMediaResponse23,
        AbMediaResponse24,
        AbMediaResponse25,
        AbMediaResponse26,
        AbMediaResponse27,
        AbMediaResponse28,
        AbMediaResponse29,
        AbMediaResponse30,
        AbMediaResponse31,
        AbMediaResponse32,
        AbMediaResponse33,
        AbMediaResponse34,
        AbMediaResponse35,
        AbMediaResponse36,
        AbMediaResponse37,
        AbMediaResponse38,
    ] = Field(..., title='AbMediaResponse')


class AbMediaDcr3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: AbMediaDcrInner


class AbMediaDcr(RootModel[AbMediaDcr3]):
    root: AbMediaDcr3


class AbMediaDcrInner(BaseModel):
    compute: AbMediaComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


class ConsumerRequirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Optional[RequirementOp] = None


class RequirementOp9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    or_: Sequence[RequirementOp] = Field(..., alias='or')


class RequirementOp10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    and_: Sequence[RequirementOp] = Field(..., alias='and')


class RequirementOp11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exclusiveOr: Sequence[RequirementOp]


class RequirementOp(
    RootModel[Union[RequirementOp9, RequirementOp10, RequirementOp11, RequirementOp12]]
):
    root: Union[
        RequirementOp9, RequirementOp10, RequirementOp11, RequirementOp12
    ] = Field(
        ...,
        description='An expression that can be used to check whether a data lab (as a "data provider") provides certain datasets or certain data properties. This was introduced because the system used in the LM DCR didn\'t allow the MediaInsights DCR to express that _either_ a segments or an embeddings dataset is required in case it was configured to enable lookalike modelling.',
    )


RetrieveDataRoom.model_rebuild()
AbMediaDcr3.model_rebuild()
AbMediaDcrInner.model_rebuild()
ConsumerRequirements.model_rebuild()
RequirementOp9.model_rebuild()
RequirementOp10.model_rebuild()
RequirementOp11.model_rebuild()

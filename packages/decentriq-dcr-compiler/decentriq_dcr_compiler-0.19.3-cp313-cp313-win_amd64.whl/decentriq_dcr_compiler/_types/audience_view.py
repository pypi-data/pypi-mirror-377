# generated by datamodel-codegen:
#   filename:  audience_view.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class AudienceView2(TypedDict):
    audienceSize: NotRequired[Optional[int]]
    audienceType: str
    createdAt: str
    isEmpty: bool
    kind: Literal['SEED']


class AudienceReference4(TypedDict):
    kind: Literal['BASE']


class AudienceReference5(TypedDict):
    id: str
    kind: Literal['CUSTOM']


class AudienceReference6(TypedDict):
    audienceType: str
    kind: Literal['SEED']


AudienceReference = Union[AudienceReference4, AudienceReference5, AudienceReference6]


BooleanOp = Literal['AND', 'OR']


CombineOperator = Literal['INTERSECT', 'UNION', 'DIFF']


class CustomAudienceDefinition3(TypedDict):
    excludeSeedAudience: NotRequired[Optional[bool]]
    kind: Literal['LOOKALIKE']
    reach: int
    sourceRef: AudienceReference


FilterOperator = Literal[
    'CONTAINS_ANY_OF', 'CONTAINS_NONE_OF', 'CONTAINS_ALL_OF', 'EMPTY', 'NOT_EMPTY'
]


class SeedAudienceReference(TypedDict):
    audienceType: str


class StalenessWarnings(TypedDict):
    missingCustomAudiences: NotRequired[Sequence[str]]
    missingFilterAttributes: NotRequired[Sequence[str]]
    missingFilterValues: NotRequired[Sequence[str]]
    missingSeedAudiences: NotRequired[Sequence[str]]


class AudienceFilter(TypedDict):
    attribute: str
    operator: FilterOperator
    values: NotRequired[Sequence[str]]


class AudienceFilters(TypedDict):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class CustomAudienceDefinition5(TypedDict):
    kind: Literal['REMARKETING']
    seedAudienceRef: SeedAudienceReference


class AudienceCombinator(TypedDict):
    filters: NotRequired[Optional[AudienceFilters]]
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition4(TypedDict):
    combine: NotRequired[Sequence[AudienceCombinator]]
    filters: NotRequired[Optional[AudienceFilters]]
    kind: Literal['RULE_BASED']
    sourceRef: AudienceReference


CustomAudienceDefinition = Union[
    CustomAudienceDefinition3, CustomAudienceDefinition4, CustomAudienceDefinition5
]


class AudienceView1(TypedDict):
    createdAt: str
    createdBy: str
    definition: CustomAudienceDefinition
    doesAudienceDependOnLookalikeAudience: NotRequired[bool]
    id: str
    kind: Literal['CUSTOM']
    name: str
    sharedWith: NotRequired[Sequence[str]]
    stalenessWarnings: NotRequired[Optional[StalenessWarnings]]


AudienceView = Union[AudienceView1, AudienceView2]

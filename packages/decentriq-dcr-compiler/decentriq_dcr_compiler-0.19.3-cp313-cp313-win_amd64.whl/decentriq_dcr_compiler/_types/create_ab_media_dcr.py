# generated by datamodel-codegen:
#   filename:  create_ab_media_dcr.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class EnclaveSpecificationV0(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


ModelEvaluationType = Literal['ROC_CURVE', 'DISTANCE_TO_EMBEDDING', 'JACCARD']


class ModelEvaluationConfig(TypedDict):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class CreateAbMediaV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: NotRequired[Sequence[str]]
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAdvertiserAudienceDownload: NotRequired[Optional[bool]]
    enableDataPartner: bool
    enableDebugMode: bool
    enableHideAbsoluteValuesFromInsights: bool
    enableInsights: bool
    enableLookalikeAudiences: bool
    enableRateLimitingOnPublishDataset: NotRequired[Optional[bool]]
    enableRemarketing: bool
    enableRuleBasedAudiences: bool
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[Optional[int]]
    rateLimitPublishDataWindowSeconds: NotRequired[Optional[int]]


class CreateAbMediaV1(CreateAbMediaV0):
    pass


class CreateAbMediaV2(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: NotRequired[Sequence[str]]
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAdvertiserAudienceDownload: NotRequired[Optional[bool]]
    enableDataPartner: bool
    enableDebugMode: bool
    enableDropInvalidRows: NotRequired[bool]
    enableHideAbsoluteValuesFromInsights: bool
    enableInsights: bool
    enableLookalikeAudiences: bool
    enableRateLimitingOnPublishDataset: NotRequired[Optional[bool]]
    enableRemarketing: bool
    enableRuleBasedAudiences: bool
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[Optional[int]]
    rateLimitPublishDataWindowSeconds: NotRequired[Optional[int]]


class CreateAbMediaV3(CreateAbMediaV2):
    pass


class CreateAbMediaV4(CreateAbMediaV2):
    pass


class CreateAbMediaV5(CreateAbMediaV2):
    pass


class CreateAbMediaV6(CreateAbMediaV2):
    pass


class CreateAbMediaV7(CreateAbMediaV2):
    pass


class CreateAbMediaDcr1(TypedDict):
    v0: CreateAbMediaV0


class CreateAbMediaDcr2(TypedDict):
    v1: CreateAbMediaV1


class CreateAbMediaDcr3(TypedDict):
    v2: CreateAbMediaV2


class CreateAbMediaDcr4(TypedDict):
    v3: CreateAbMediaV3


class CreateAbMediaDcr5(TypedDict):
    v4: CreateAbMediaV4


class CreateAbMediaDcr6(TypedDict):
    v5: CreateAbMediaV5


class CreateAbMediaDcr7(TypedDict):
    v6: CreateAbMediaV6


class CreateAbMediaDcr8(TypedDict):
    v7: CreateAbMediaV7


CreateAbMediaDcr = Union[
    CreateAbMediaDcr1,
    CreateAbMediaDcr2,
    CreateAbMediaDcr3,
    CreateAbMediaDcr4,
    CreateAbMediaDcr5,
    CreateAbMediaDcr6,
    CreateAbMediaDcr7,
    CreateAbMediaDcr8,
]

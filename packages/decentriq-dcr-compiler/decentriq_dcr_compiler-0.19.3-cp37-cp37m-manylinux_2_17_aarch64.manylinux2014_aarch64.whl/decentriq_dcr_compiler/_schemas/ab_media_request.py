# generated by datamodel-codegen:
#   filename:  ab_media_request.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class RetrieveDataRoom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str


class AbMediaRequest2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveDataRoom: RetrieveDataRoom


class PublishAudiencesDataset(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str
    datasetHashHex: str
    encryptionKeyHex: str
    scopeIdHex: str


class AbMediaRequest3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishAudiencesDataset: PublishAudiencesDataset


class UnpublishAudiencesDataset(RetrieveDataRoom):
    pass


class AbMediaRequest4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishAudiencesDataset: UnpublishAudiencesDataset


class PublishMatchingDataset(PublishAudiencesDataset):
    pass


class AbMediaRequest5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishMatchingDataset: PublishMatchingDataset


class UnpublishMatchingDataset(RetrieveDataRoom):
    pass


class AbMediaRequest6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishMatchingDataset: UnpublishMatchingDataset


class PublishDemographicsDataset(PublishAudiencesDataset):
    pass


class AbMediaRequest7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishDemographicsDataset: PublishDemographicsDataset


class UnpublishDemographicsDataset(RetrieveDataRoom):
    pass


class AbMediaRequest8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishDemographicsDataset: UnpublishDemographicsDataset


class PublishSegmentsDataset(PublishAudiencesDataset):
    pass


class AbMediaRequest9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishSegmentsDataset: PublishSegmentsDataset


class UnpublishSegmentsDataset(RetrieveDataRoom):
    pass


class AbMediaRequest10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishSegmentsDataset: UnpublishSegmentsDataset


class PublishEmbeddingsDataset(PublishAudiencesDataset):
    pass


class AbMediaRequest11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishEmbeddingsDataset: PublishEmbeddingsDataset


class UnpublishEmbeddingsDataset(RetrieveDataRoom):
    pass


class AbMediaRequest12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishEmbeddingsDataset: UnpublishEmbeddingsDataset


class PublishAudiencesJson(PublishAudiencesDataset):
    pass


class AbMediaRequest13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishAudiencesJson: PublishAudiencesJson


class UnpublishAudiencesJson(RetrieveDataRoom):
    pass


class AbMediaRequest14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishAudiencesJson: UnpublishAudiencesJson


class RetrievePublishedDatasets(RetrieveDataRoom):
    pass


class AbMediaRequest15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrievePublishedDatasets: RetrievePublishedDatasets


class ComputeInsights(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str
    scopeIdHex: str


class AbMediaRequest16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeInsights: ComputeInsights


class GetMatchingValidationReport(ComputeInsights):
    pass


class AbMediaRequest17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getMatchingValidationReport: GetMatchingValidationReport


class GetSegmentsValidationReport(ComputeInsights):
    pass


class AbMediaRequest18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getSegmentsValidationReport: GetSegmentsValidationReport


class GetDemographicsValidationReport(ComputeInsights):
    pass


class AbMediaRequest19(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getDemographicsValidationReport: GetDemographicsValidationReport


class GetAudiencesValidationReport(ComputeInsights):
    pass


class AbMediaRequest20(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiencesValidationReport: GetAudiencesValidationReport


class ComputeOverlapStatistics(ComputeInsights):
    pass


class AbMediaRequest22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeOverlapStatistics: ComputeOverlapStatistics


class GetAudiencesForPublisher(ComputeInsights):
    pass


class AbMediaRequest27(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiencesForPublisher: GetAudiencesForPublisher


class GetAudiencesForAdvertiser(ComputeInsights):
    pass


class AbMediaRequest28(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiencesForAdvertiser: GetAudiencesForAdvertiser


class IngestAudiencesReport(ComputeInsights):
    pass


class AbMediaRequest29(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ingestAudiencesReport: IngestAudiencesReport


class RetrieveModelQualityReport(ComputeInsights):
    pass


class AbMediaRequest30(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveModelQualityReport: RetrieveModelQualityReport


class GetDataAttributes(ComputeInsights):
    pass


class AbMediaRequest37(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getDataAttributes: GetDataAttributes


class PythonEnvReport(ComputeInsights):
    pass


class AbMediaRequest38(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    pythonEnvReport: PythonEnvReport


class Kind(Enum):
    advertiser = 'advertiser'


class Kind1(Enum):
    lookalike = 'lookalike'


class Kind2(Enum):
    rulebased = 'rulebased'


class BooleanOp(Enum):
    and_ = 'and'
    or_ = 'or'


class CombineOperator(Enum):
    intersect = 'intersect'
    union = 'union'
    diff = 'diff'


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FilterOperator(Enum):
    contains_any_of = 'contains_any_of'
    contains_none_of = 'contains_none_of'
    contains_all_of = 'contains_all_of'
    empty = 'empty'
    not_empty = 'not_empty'


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class Type(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValue4(BaseModel):
    type: Type


class Type4(Enum):
    DATASET = 'DATASET'


class RequirementFlagValue5(BaseModel):
    type: Type4


class Type5(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValue6(BaseModel):
    type: Type5
    value: str


class RequirementFlagValue(
    RootModel[
        Union[RequirementFlagValue4, RequirementFlagValue5, RequirementFlagValue6]
    ]
):
    root: Union[RequirementFlagValue4, RequirementFlagValue5, RequirementFlagValue6]


class Status(Enum):
    ready = 'ready'
    published = 'published'
    published_as_intermediate = 'published_as_intermediate'


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    boolean_op: BooleanOp
    filters: Sequence[AudienceFilter]


class KnownOrUnknownRequirementFlagValue(RootModel[Optional[RequirementFlagValue]]):
    root: Optional[RequirementFlagValue]


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class MutableAudienceData(BaseModel):
    created_at: Optional[str] = None
    name: str
    status: Status


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOp8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    has: RequirementFlag


class AbMediaComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: Optional[Sequence[str]] = None
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class AbMediaComputeV1(AbMediaComputeV0):
    pass


class AbMediaComputeV2(AbMediaComputeV0):
    pass


class AbMediaComputeV3(AbMediaComputeV0):
    pass


class AbMediaComputeV4(AbMediaComputeV0):
    pass


class AbMediaComputeV5(AbMediaComputeV0):
    pass


class AbMediaComputeV6(AbMediaComputeV0):
    pass


class AbMediaComputeV7(AbMediaComputeV0):
    pass


class Audience1(BaseModel):
    audience_size: Optional[conint(ge=0)] = None
    audience_type: str
    id: str
    kind: Kind
    mutable: Optional[MutableAudienceData] = None


class Audience2(BaseModel):
    exclude_seed_audience: Optional[bool] = None
    id: str
    kind: Kind1
    mutable: Optional[MutableAudienceData] = None
    reach: conint(ge=0)
    source_ref: str


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    source_ref: str


class AbMediaCompute(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: AbMediaComputeV0


class AbMediaCompute11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: AbMediaComputeV1


class AbMediaCompute12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: AbMediaComputeV2


class AbMediaCompute13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: AbMediaComputeV3


class AbMediaCompute14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v4: AbMediaComputeV4


class AbMediaCompute15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v5: AbMediaComputeV5


class AbMediaCompute16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v6: AbMediaComputeV6


class AbMediaCompute17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v7: AbMediaComputeV7


class AbMediaCompute9(
    RootModel[
        Union[
            AbMediaCompute,
            AbMediaCompute11,
            AbMediaCompute12,
            AbMediaCompute13,
            AbMediaCompute14,
            AbMediaCompute15,
            AbMediaCompute16,
            AbMediaCompute17,
        ]
    ]
):
    root: Union[
        AbMediaCompute,
        AbMediaCompute11,
        AbMediaCompute12,
        AbMediaCompute13,
        AbMediaCompute14,
        AbMediaCompute15,
        AbMediaCompute16,
        AbMediaCompute17,
    ]


class AbMediaComputeOrUnknown(RootModel[Optional[AbMediaCompute9]]):
    root: Optional[AbMediaCompute9]


class Audience3(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    id: str
    kind: Kind2
    mutable: Optional[MutableAudienceData] = None
    source_ref: str


class Audience(RootModel[Union[Audience1, Audience2, Audience3]]):
    root: Union[Audience1, Audience2, Audience3]


class RequestedAudiencePayload(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    audiences: Sequence[Audience]
    target_ref: str


class GetLookalikeAudienceStatistics(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str
    generateAudience: RequestedAudiencePayload
    scopeIdHex: str


class AbMediaRequest21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getLookalikeAudienceStatistics: GetLookalikeAudienceStatistics


class GetAudienceUserListForPublisher(GetLookalikeAudienceStatistics):
    pass


class AbMediaRequest23(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserListForPublisher: GetAudienceUserListForPublisher


class GetAudienceUserListForAdvertiser(GetLookalikeAudienceStatistics):
    pass


class AbMediaRequest24(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserListForAdvertiser: GetAudienceUserListForAdvertiser


class GetAudienceUserListForPublisherLal(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str
    generateAudience: RequestedAudiencePayload
    lalAudience: RequestedAudiencePayload
    scopeIdHex: str


class AbMediaRequest25(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserListForPublisherLal: GetAudienceUserListForPublisherLal


class GetAudienceUserListForAdvertiserLal(GetAudienceUserListForPublisherLal):
    pass


class AbMediaRequest26(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserListForAdvertiserLal: GetAudienceUserListForAdvertiserLal


class RunCreateAudienceUserList(GetLookalikeAudienceStatistics):
    pass


class AbMediaRequest31(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    runCreateAudienceUserList: RunCreateAudienceUserList


class RunCreateAudienceUserListLal(GetAudienceUserListForPublisherLal):
    pass


class AbMediaRequest32(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    runCreateAudienceUserListLal: RunCreateAudienceUserListLal


class EstimateAudienceSizeForAdvertiser(GetLookalikeAudienceStatistics):
    pass


class AbMediaRequest33(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    estimateAudienceSizeForAdvertiser: EstimateAudienceSizeForAdvertiser


class EstimateAudienceSizeForPublisher(GetLookalikeAudienceStatistics):
    pass


class AbMediaRequest34(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    estimateAudienceSizeForPublisher: EstimateAudienceSizeForPublisher


class EstimateAudienceSizeForAdvertiserLal(GetAudienceUserListForPublisherLal):
    pass


class AbMediaRequest35(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    estimateAudienceSizeForAdvertiserLal: EstimateAudienceSizeForAdvertiserLal


class EstimateAudienceSizeForPublisherLal(GetAudienceUserListForPublisherLal):
    pass


class AbMediaRequest36(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    estimateAudienceSizeForPublisherLal: EstimateAudienceSizeForPublisherLal


class PublishDataRoom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoom: AbMediaDcr
    requirePassword: bool
    showOrganizationLogo: bool


class AbMediaRequest1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishDataRoom: PublishDataRoom


class AbMediaRequest(
    RootModel[
        Union[
            AbMediaRequest1,
            AbMediaRequest2,
            AbMediaRequest3,
            AbMediaRequest4,
            AbMediaRequest5,
            AbMediaRequest6,
            AbMediaRequest7,
            AbMediaRequest8,
            AbMediaRequest9,
            AbMediaRequest10,
            AbMediaRequest11,
            AbMediaRequest12,
            AbMediaRequest13,
            AbMediaRequest14,
            AbMediaRequest15,
            AbMediaRequest16,
            AbMediaRequest17,
            AbMediaRequest18,
            AbMediaRequest19,
            AbMediaRequest20,
            AbMediaRequest21,
            AbMediaRequest22,
            AbMediaRequest23,
            AbMediaRequest24,
            AbMediaRequest25,
            AbMediaRequest26,
            AbMediaRequest27,
            AbMediaRequest28,
            AbMediaRequest29,
            AbMediaRequest30,
            AbMediaRequest31,
            AbMediaRequest32,
            AbMediaRequest33,
            AbMediaRequest34,
            AbMediaRequest35,
            AbMediaRequest36,
            AbMediaRequest37,
            AbMediaRequest38,
        ]
    ]
):
    root: Union[
        AbMediaRequest1,
        AbMediaRequest2,
        AbMediaRequest3,
        AbMediaRequest4,
        AbMediaRequest5,
        AbMediaRequest6,
        AbMediaRequest7,
        AbMediaRequest8,
        AbMediaRequest9,
        AbMediaRequest10,
        AbMediaRequest11,
        AbMediaRequest12,
        AbMediaRequest13,
        AbMediaRequest14,
        AbMediaRequest15,
        AbMediaRequest16,
        AbMediaRequest17,
        AbMediaRequest18,
        AbMediaRequest19,
        AbMediaRequest20,
        AbMediaRequest21,
        AbMediaRequest22,
        AbMediaRequest23,
        AbMediaRequest24,
        AbMediaRequest25,
        AbMediaRequest26,
        AbMediaRequest27,
        AbMediaRequest28,
        AbMediaRequest29,
        AbMediaRequest30,
        AbMediaRequest31,
        AbMediaRequest32,
        AbMediaRequest33,
        AbMediaRequest34,
        AbMediaRequest35,
        AbMediaRequest36,
        AbMediaRequest37,
        AbMediaRequest38,
    ] = Field(..., title='AbMediaRequest')


class AbMediaDcr2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: AbMediaDcrInner


class AbMediaDcr(RootModel[AbMediaDcr2]):
    root: AbMediaDcr2


class AbMediaDcrInner(BaseModel):
    compute: AbMediaComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


class ConsumerRequirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Optional[RequirementOp] = None


class RequirementOp5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    or_: Sequence[RequirementOp] = Field(..., alias='or')


class RequirementOp6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    and_: Sequence[RequirementOp] = Field(..., alias='and')


class RequirementOp7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exclusiveOr: Sequence[RequirementOp]


class RequirementOp(
    RootModel[Union[RequirementOp5, RequirementOp6, RequirementOp7, RequirementOp8]]
):
    root: Union[RequirementOp5, RequirementOp6, RequirementOp7, RequirementOp8] = Field(
        ...,
        description='An expression that can be used to check whether a data lab (as a "data provider") provides certain datasets or certain data properties. This was introduced because the system used in the LM DCR didn\'t allow the MediaInsights DCR to express that _either_ a segments or an embeddings dataset is required in case it was configured to enable lookalike modelling.',
    )


PublishDataRoom.model_rebuild()
AbMediaDcr2.model_rebuild()
AbMediaDcrInner.model_rebuild()
ConsumerRequirements.model_rebuild()
RequirementOp5.model_rebuild()
RequirementOp6.model_rebuild()
RequirementOp7.model_rebuild()

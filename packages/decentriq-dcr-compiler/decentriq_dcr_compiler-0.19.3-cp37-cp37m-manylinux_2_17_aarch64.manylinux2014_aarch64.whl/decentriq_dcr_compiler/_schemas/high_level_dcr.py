# generated by datamodel-codegen:
#   filename:  high_level_dcr.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class AnalystPermission(BaseModel):
    nodeId: str


class AwsConfig(BaseModel):
    bucket: str
    objectKey: Optional[str] = None
    region: str


class ColumnDataType(Enum):
    integer = 'integer'
    float = 'float'
    string = 'string'


class ColumnTuple(BaseModel):
    columns: Sequence[conint(ge=0)]


class DataOwnerPermission(AnalystPermission):
    pass


class DatasetSinkEncryptionKeyDependency(BaseModel):
    dependency: str
    isKeyHexEncoded: bool


class EnclaveSpecification(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class EnclaveSpecification2(EnclaveSpecification):
    pass


class EnclaveSpecificationV0(EnclaveSpecification):
    pass


class ExportConnectorKind(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    aws: AwsConfig


class ExportConnectorKind5(RootModel[ExportConnectorKind]):
    root: ExportConnectorKind


class ExportType7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    raw: Sequence = Field(..., max_length=0, min_length=0)


class ExportType8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    zipSingleFile: str


class ExportType9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    zipAllFiles: Sequence = Field(..., max_length=0, min_length=0)


class ExportType(RootModel[Union[ExportType7, ExportType8, ExportType9]]):
    root: Union[ExportType7, ExportType8, ExportType9]


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ImportConnectorKind(ExportConnectorKind):
    pass


class ImportConnectorKind5(RootModel[ImportConnectorKind]):
    root: ImportConnectorKind


class ImportConnectorNode(BaseModel):
    credentialsDependency: str
    kind: ImportConnectorKind5
    specificationId: str


class InputDataType5(ExportType7):
    pass


class ManagerPermission(BaseModel):
    pass


class MaskType(Enum):
    genericString = 'genericString'
    genericNumber = 'genericNumber'
    name = 'name'
    address = 'address'
    postcode = 'postcode'
    phoneNumber = 'phoneNumber'
    socialSecurityNumber = 'socialSecurityNumber'
    email = 'email'
    date = 'date'
    timestamp = 'timestamp'
    iban = 'iban'


class MatchingComputationNode(BaseModel):
    config: str
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    output: str
    specificationId: str
    staticContentSpecificationId: str


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class NumRowsValidationRule(BaseModel):
    atLeast: Optional[conint(ge=0)] = None
    atMost: Optional[conint(ge=0)] = None


class NumericRangeRule(BaseModel):
    greaterThan: Optional[float] = None
    greaterThanEquals: Optional[float] = None
    lessThan: Optional[float] = None
    lessThanEquals: Optional[float] = None


class ParticipantPermission4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataOwner: DataOwnerPermission


class ParticipantPermission5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    analyst: AnalystPermission


class ParticipantPermission6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    manager: ManagerPermission


class ParticipantPermission(
    RootModel[
        Union[ParticipantPermission4, ParticipantPermission5, ParticipantPermission6]
    ]
):
    root: Union[ParticipantPermission4, ParticipantPermission5, ParticipantPermission6]


class PostComputationNode(BaseModel):
    dependency: str
    specificationId: str
    useMockBackend: bool


class PreviewComputationNode(BaseModel):
    dependency: str
    quotaBytes: conint(ge=0)


class RawLeafNode(ManagerPermission):
    pass


class Type(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValue13(BaseModel):
    type: Type


class Type13(Enum):
    DATASET = 'DATASET'


class RequirementFlagValue14(BaseModel):
    type: Type13


class Type14(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValue15(BaseModel):
    type: Type14
    value: str


class RequirementFlagValue(
    RootModel[
        Union[RequirementFlagValue13, RequirementFlagValue14, RequirementFlagValue15]
    ]
):
    root: Union[RequirementFlagValue13, RequirementFlagValue14, RequirementFlagValue15]


class S3Provider(Enum):
    Aws = 'Aws'
    Gcs = 'Gcs'


class S3SinkComputationNode(BaseModel):
    credentialsDependencyId: str
    endpoint: str
    region: Optional[str] = ''
    s3Provider: Optional[S3Provider] = 'Aws'
    specificationId: str
    uploadDependencyId: str


class Script(BaseModel):
    content: str
    name: str


class ScriptingLanguage(Enum):
    python = 'python'
    r = 'r'


class SqlNodePrivacyFilter(BaseModel):
    minimumRowsCount: int


class TableMapping(BaseModel):
    nodeId: str
    tableName: str


class UniquenessValidationRule(BaseModel):
    uniqueKeys: Sequence[ColumnTuple]


class ZipInputDataType5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    all: Sequence = Field(..., max_length=0, min_length=0)


class ZipInputDataType6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    files: Sequence[str]


class ZipInputDataType(RootModel[Union[ZipInputDataType5, ZipInputDataType6]]):
    root: Union[ZipInputDataType5, ZipInputDataType6]


class ColumnDataFormat(BaseModel):
    dataType: ColumnDataType
    isNullable: bool


class ColumnValidationV0(BaseModel):
    allowNull: bool
    formatType: FormatType
    hashWith: Optional[HashingAlgorithm] = None
    inRange: Optional[NumericRangeRule] = None
    name: Optional[str] = None


class ComputationNodeKind4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    s3Sink: S3SinkComputationNode


class ComputationNodeKind5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    match: MatchingComputationNode


class ComputationNodeKindV2(ComputationNodeKind4):
    pass


class ComputationNodeKindV222(ComputationNodeKind5):
    pass


class ComputationNodeKindV223(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    post: PostComputationNode


class ComputationNodeKindV6(ComputationNodeKind4):
    pass


class ComputationNodeKindV630(ComputationNodeKind5):
    pass


class ComputationNodeKindV631(ComputationNodeKindV223):
    pass


class ComputationNodeKindV632(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    preview: PreviewComputationNode


class ComputationNodeKindV633(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    importConnector: ImportConnectorNode


class DataLabComputeV0(BaseModel):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification2
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: Optional[HashingAlgorithm] = None
    name: str
    numEmbeddings: conint(ge=0)
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification2


class DataLabComputeV1(DataLabComputeV0):
    pass


class DataLabComputeV2(DataLabComputeV0):
    pass


class ExportNodeDependency(BaseModel):
    exportType: ExportType
    name: str


class InputDataType6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    zip: ZipInputDataType


class InputDataType(RootModel[Union[InputDataType5, InputDataType6]]):
    root: Union[InputDataType5, InputDataType6]


class KnownOrUnknownRequirementFlagValue(RootModel[Optional[RequirementFlagValue]]):
    root: Optional[RequirementFlagValue]


class LeafNodeKind1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    raw: RawLeafNode


class LeafNodeKindV2(LeafNodeKind1):
    pass


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class Participant(BaseModel):
    permissions: Sequence[ParticipantPermission]
    user: str


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOp16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    has: RequirementFlag


class Requirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Sequence[RequirementFlag]


class ScriptingComputationNode(BaseModel):
    additionalScripts: Sequence[Script]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: Optional[float] = None
    mainScript: Script
    minimumContainerMemorySize: Optional[conint(ge=0)] = None
    output: str
    scriptingLanguage: ScriptingLanguage
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class SqlComputationNode(BaseModel):
    dependencies: Sequence[TableMapping]
    privacyFilter: Optional[SqlNodePrivacyFilter] = None
    specificationId: str
    statement: str


class SqliteComputationNode(BaseModel):
    dependencies: Sequence[TableMapping]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    sqliteSpecificationId: str
    statement: str
    staticContentSpecificationId: str


class SyntheticNodeColumn(BaseModel):
    dataFormat: ColumnDataFormat
    index: int
    maskType: MaskType
    name: Optional[str] = None
    shouldMaskColumn: bool


class TableLeafNodeColumn(BaseModel):
    dataFormat: ColumnDataFormat
    name: str


class TableLeafNodeColumnV2(BaseModel):
    dataFormat: ColumnDataFormat
    name: str
    validation: ColumnValidationV0


class TableValidationV0(BaseModel):
    allowEmpty: Optional[bool] = None
    numRows: Optional[NumRowsValidationRule] = None
    uniqueness: Optional[UniquenessValidationRule] = None


class ValidationNodeV2(BaseModel):
    pythonSpecificationId: str
    staticContentSpecificationId: str
    validation: TableValidationV0


class ComputationNodeKind1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sql: SqlComputationNode


class ComputationNodeKind2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scripting: ScriptingComputationNode


class ComputationNodeKindV217(ComputationNodeKind1):
    pass


class ComputationNodeKindV218(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sqlite: SqliteComputationNode


class ComputationNodeKindV219(ComputationNodeKind2):
    pass


class ComputationNodeKindV625(ComputationNodeKind1):
    pass


class ComputationNodeKindV626(ComputationNodeKindV218):
    pass


class ComputationNodeKindV627(ComputationNodeKind2):
    pass


class DataLabCompute(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: DataLabComputeV0


class DataLabCompute18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: DataLabComputeV1


class DataLabCompute19(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: DataLabComputeV2


class DataLabCompute16(
    RootModel[Union[DataLabCompute, DataLabCompute18, DataLabCompute19]]
):
    root: Union[DataLabCompute, DataLabCompute18, DataLabCompute19]


class DataLabComputeOrUnknown(RootModel[Optional[DataLabCompute16]]):
    root: Optional[DataLabCompute16]


class DataLabV0(BaseModel):
    compute: DataLabComputeOrUnknown
    features: Sequence[str]
    provides: Requirements


class DatasetSinkInput(BaseModel):
    datasetName: str
    dependency: str
    inputDataType: InputDataType


class ExportConnectorNode(BaseModel):
    credentialsDependency: str
    dependency: ExportNodeDependency
    kind: ExportConnectorKind5
    specificationId: str


class MediaInsightsComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class MediaInsightsComputeV1(MediaInsightsComputeV0):
    pass


class MediaInsightsComputeV2(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: Optional[Sequence[str]] = None
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class MediaInsightsComputeV3(MediaInsightsComputeV2):
    pass


class SyntheticDataComputationNode(BaseModel):
    columns: Sequence[SyntheticNodeColumn]
    dependency: str
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    epsilon: float
    outputOriginalDataStatistics: bool
    staticContentSpecificationId: str
    synthSpecificationId: str


class TableLeafNode(BaseModel):
    columns: Sequence[TableLeafNodeColumn]
    sqlSpecificationId: str


class TableLeafNodeV2(BaseModel):
    columns: Sequence[TableLeafNodeColumnV2]
    validationNode: ValidationNodeV2


class ComputationNodeKind3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    syntheticData: SyntheticDataComputationNode


class ComputationNodeKind(
    RootModel[
        Union[
            ComputationNodeKind1,
            ComputationNodeKind2,
            ComputationNodeKind3,
            ComputationNodeKind4,
            ComputationNodeKind5,
        ]
    ]
):
    root: Union[
        ComputationNodeKind1,
        ComputationNodeKind2,
        ComputationNodeKind3,
        ComputationNodeKind4,
        ComputationNodeKind5,
    ]


class ComputationNodeKindV220(ComputationNodeKind3):
    pass


class ComputationNodeKindV216(
    RootModel[
        Union[
            ComputationNodeKindV217,
            ComputationNodeKindV218,
            ComputationNodeKindV219,
            ComputationNodeKindV220,
            ComputationNodeKindV2,
            ComputationNodeKindV222,
            ComputationNodeKindV223,
        ]
    ]
):
    root: Union[
        ComputationNodeKindV217,
        ComputationNodeKindV218,
        ComputationNodeKindV219,
        ComputationNodeKindV220,
        ComputationNodeKindV2,
        ComputationNodeKindV222,
        ComputationNodeKindV223,
    ]


class ComputationNodeKindV628(ComputationNodeKind3):
    pass


class ComputationNodeKindV634(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exportConnector: ExportConnectorNode


class ComputationNodeV2(BaseModel):
    kind: ComputationNodeKindV216


class DataLab2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: DataLabV0


class DataLab(RootModel[DataLab2]):
    root: DataLab2


class DatasetSinkComputationNode(BaseModel):
    datasetImportId: Optional[str] = None
    encryptionKeyDependency: DatasetSinkEncryptionKeyDependency
    input: DatasetSinkInput
    specificationId: str


class LeafNodeKind2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    table: TableLeafNode


class LeafNodeKind(RootModel[Union[LeafNodeKind1, LeafNodeKind2]]):
    root: Union[LeafNodeKind1, LeafNodeKind2]


class LeafNodeKindV28(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    table: TableLeafNodeV2


class LeafNodeKindV26(RootModel[Union[LeafNodeKindV2, LeafNodeKindV28]]):
    root: Union[LeafNodeKindV2, LeafNodeKindV28]


class LeafNodeV2(BaseModel):
    isRequired: bool
    kind: LeafNodeKindV26


class MediaInsightsCompute1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: MediaInsightsComputeV0


class MediaInsightsCompute2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: MediaInsightsComputeV1


class MediaInsightsCompute3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: MediaInsightsComputeV2


class MediaInsightsCompute4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: MediaInsightsComputeV3


class MediaInsightsCompute(
    RootModel[
        Union[
            MediaInsightsCompute1,
            MediaInsightsCompute2,
            MediaInsightsCompute3,
            MediaInsightsCompute4,
        ]
    ]
):
    root: Union[
        MediaInsightsCompute1,
        MediaInsightsCompute2,
        MediaInsightsCompute3,
        MediaInsightsCompute4,
    ]


class MediaInsightsComputeOrUnknown(RootModel[Optional[MediaInsightsCompute]]):
    root: Optional[MediaInsightsCompute]


class NodeKindV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    leaf: LeafNodeV2


class NodeKindV28(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computation: ComputationNodeV2


class NodeKindV26(RootModel[Union[NodeKindV2, NodeKindV28]]):
    root: Union[NodeKindV2, NodeKindV28]


class NodeKindV6(NodeKindV2):
    pass


class NodeV2(BaseModel):
    id: str
    kind: NodeKindV26
    name: str


class HighLevelDcr3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataLab: DataLab


class AddComputationCommitV2(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV2


class ComputationNode(BaseModel):
    kind: ComputationNodeKind


class ComputationNodeKindV635(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetSink: DatasetSinkComputationNode


class ComputationNodeKindV624(
    RootModel[
        Union[
            ComputationNodeKindV625,
            ComputationNodeKindV626,
            ComputationNodeKindV627,
            ComputationNodeKindV628,
            ComputationNodeKindV6,
            ComputationNodeKindV630,
            ComputationNodeKindV631,
            ComputationNodeKindV632,
            ComputationNodeKindV633,
            ComputationNodeKindV634,
            ComputationNodeKindV635,
        ]
    ]
):
    root: Union[
        ComputationNodeKindV625,
        ComputationNodeKindV626,
        ComputationNodeKindV627,
        ComputationNodeKindV628,
        ComputationNodeKindV6,
        ComputationNodeKindV630,
        ComputationNodeKindV631,
        ComputationNodeKindV632,
        ComputationNodeKindV633,
        ComputationNodeKindV634,
        ComputationNodeKindV635,
    ]


class ComputationNodeV6(BaseModel):
    kind: ComputationNodeKindV624


class DataScienceCommitKindV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addComputation: AddComputationCommitV2


class DataScienceCommitKindV24(RootModel[DataScienceCommitKindV2]):
    root: DataScienceCommitKindV2


class DataScienceCommitV2(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV24
    name: str


class DataScienceCommitV3(DataScienceCommitV2):
    pass


class DataScienceCommitV4(DataScienceCommitV2):
    pass


class DataScienceCommitV5(DataScienceCommitV2):
    pass


class DataScienceDataRoomConfigurationV2(BaseModel):
    dcrSecretIdBase64: Optional[str] = None
    description: str
    enableDevelopment: bool
    enablePostWorker: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV3(BaseModel):
    dcrSecretIdBase64: Optional[str] = None
    description: str
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV4(DataScienceDataRoomConfigurationV3):
    pass


class DataScienceDataRoomConfigurationV5(BaseModel):
    dcrSecretIdBase64: Optional[str] = None
    description: str
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomV21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV2


class DataScienceDataRoomV31(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV3


class DataScienceDataRoomV43(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV4


class DataScienceDataRoomV53(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV5


class InteractiveDataScienceDataRoomV2(BaseModel):
    commits: Sequence[DataScienceCommitV2]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV2


class InteractiveDataScienceDataRoomV3(BaseModel):
    commits: Sequence[DataScienceCommitV3]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV3


class InteractiveDataScienceDataRoomV4(BaseModel):
    commits: Sequence[DataScienceCommitV4]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV4


class InteractiveDataScienceDataRoomV5(BaseModel):
    commits: Sequence[DataScienceCommitV5]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV5


class LeafNode(BaseModel):
    isRequired: bool
    kind: LeafNodeKind


class NodeKind1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    leaf: LeafNode


class NodeKind2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computation: ComputationNode


class NodeKind(RootModel[Union[NodeKind1, NodeKind2]]):
    root: Union[NodeKind1, NodeKind2]


class NodeKindV68(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computation: ComputationNodeV6


class NodeKindV66(RootModel[Union[NodeKindV6, NodeKindV68]]):
    root: Union[NodeKindV6, NodeKindV68]


class NodeV6(BaseModel):
    id: str
    kind: NodeKindV66
    name: str


class AddComputationCommitV6(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV6


class DataScienceCommitKindV6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addComputation: AddComputationCommitV6


class DataScienceCommitKindV64(RootModel[DataScienceCommitKindV6]):
    root: DataScienceCommitKindV6


class DataScienceCommitV6(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV64
    name: str


class DataScienceDataRoomConfigurationV6(BaseModel):
    dcrSecretIdBase64: Optional[str] = None
    description: str
    enableAirlock: bool
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV6]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomV22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV2


class DataScienceDataRoomV2(
    RootModel[Union[DataScienceDataRoomV21, DataScienceDataRoomV22]]
):
    root: Union[DataScienceDataRoomV21, DataScienceDataRoomV22]


class DataScienceDataRoomV32(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV3


class DataScienceDataRoomV3(
    RootModel[Union[DataScienceDataRoomV31, DataScienceDataRoomV32]]
):
    root: Union[DataScienceDataRoomV31, DataScienceDataRoomV32]


class DataScienceDataRoomV44(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV4


class DataScienceDataRoomV4(
    RootModel[Union[DataScienceDataRoomV43, DataScienceDataRoomV44]]
):
    root: Union[DataScienceDataRoomV43, DataScienceDataRoomV44]


class DataScienceDataRoomV54(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV5


class DataScienceDataRoomV5(
    RootModel[Union[DataScienceDataRoomV53, DataScienceDataRoomV54]]
):
    root: Union[DataScienceDataRoomV53, DataScienceDataRoomV54]


class DataScienceDataRoomV63(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfigurationV6


class InteractiveDataScienceDataRoomV6(BaseModel):
    commits: Sequence[DataScienceCommitV6]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV6


class Node(BaseModel):
    id: str
    kind: NodeKind
    name: str


class AddComputationCommit(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: Node


class DataScienceCommitKind1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addComputation: AddComputationCommit


class DataScienceCommitKind(RootModel[DataScienceCommitKind1]):
    root: DataScienceCommitKind1


class DataScienceCommitV0(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKind
    name: str


class DataScienceCommitV1(DataScienceCommitV0):
    pass


class DataScienceDataRoom15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: DataScienceDataRoomV2


class DataScienceDataRoom16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: DataScienceDataRoomV3


class DataScienceDataRoom17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v4: DataScienceDataRoomV4


class DataScienceDataRoom18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v5: DataScienceDataRoomV5


class DataScienceDataRoomConfiguration(BaseModel):
    dcrSecretIdBase64: Optional[str] = None
    description: str
    enableDevelopment: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[Node]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomV01(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: DataScienceDataRoomConfiguration


class DataScienceDataRoomV16(DataScienceDataRoomV01):
    pass


class DataScienceDataRoomV64(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV6


class DataScienceDataRoomV6(
    RootModel[Union[DataScienceDataRoomV63, DataScienceDataRoomV64]]
):
    root: Union[DataScienceDataRoomV63, DataScienceDataRoomV64]


class InteractiveDataScienceDataRoomV0(BaseModel):
    commits: Sequence[DataScienceCommitV0]
    initialConfiguration: DataScienceDataRoomConfiguration


class InteractiveDataScienceDataRoomV1(BaseModel):
    commits: Sequence[DataScienceCommitV1]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfiguration


class DataScienceDataRoom19(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v6: DataScienceDataRoomV6


class DataScienceDataRoomV02(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV0


class DataScienceDataRoomV0(
    RootModel[Union[DataScienceDataRoomV01, DataScienceDataRoomV02]]
):
    root: Union[DataScienceDataRoomV01, DataScienceDataRoomV02]


class DataScienceDataRoomV17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interactive: InteractiveDataScienceDataRoomV1


class DataScienceDataRoomV1(
    RootModel[Union[DataScienceDataRoomV16, DataScienceDataRoomV17]]
):
    root: Union[DataScienceDataRoomV16, DataScienceDataRoomV17]


class DataScienceDataRoom13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: DataScienceDataRoomV0


class DataScienceDataRoom14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: DataScienceDataRoomV1


class DataScienceDataRoom(
    RootModel[
        Union[
            DataScienceDataRoom13,
            DataScienceDataRoom14,
            DataScienceDataRoom15,
            DataScienceDataRoom16,
            DataScienceDataRoom17,
            DataScienceDataRoom18,
            DataScienceDataRoom19,
        ]
    ]
):
    root: Union[
        DataScienceDataRoom13,
        DataScienceDataRoom14,
        DataScienceDataRoom15,
        DataScienceDataRoom16,
        DataScienceDataRoom17,
        DataScienceDataRoom18,
        DataScienceDataRoom19,
    ]


class HighLevelDcr1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    analytics: DataScienceDataRoom


class HighLevelDcr2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    media: MediaInsightsDcr


class HighLevelDcr(RootModel[Union[HighLevelDcr1, HighLevelDcr2, HighLevelDcr3]]):
    root: Union[HighLevelDcr1, HighLevelDcr2, HighLevelDcr3] = Field(
        ..., title='HighLevelDcr'
    )


class ConsumerRequirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Optional[RequirementOp] = None


class MediaInsightsDcr1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: MediaInsightsDcrInner


class MediaInsightsDcr(RootModel[MediaInsightsDcr1]):
    root: MediaInsightsDcr1


class MediaInsightsDcrInner(BaseModel):
    compute: MediaInsightsComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


class RequirementOp13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    or_: Sequence[RequirementOp] = Field(..., alias='or')


class RequirementOp14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    and_: Sequence[RequirementOp] = Field(..., alias='and')


class RequirementOp15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exclusiveOr: Sequence[RequirementOp]


class RequirementOp(
    RootModel[Union[RequirementOp13, RequirementOp14, RequirementOp15, RequirementOp16]]
):
    root: Union[
        RequirementOp13, RequirementOp14, RequirementOp15, RequirementOp16
    ] = Field(
        ...,
        description='An expression that can be used to check whether a data lab (as a "data provider") provides certain datasets or certain data properties. This was introduced because the system used in the LM DCR didn\'t allow the MediaInsights DCR to express that _either_ a segments or an embeddings dataset is required in case it was configured to enable lookalike modelling.',
    )


HighLevelDcr2.model_rebuild()
ConsumerRequirements.model_rebuild()
MediaInsightsDcr1.model_rebuild()
RequirementOp13.model_rebuild()
RequirementOp14.model_rebuild()
RequirementOp15.model_rebuild()

# generated by datamodel-codegen:
#   filename:  create_data_lab.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class EnclaveSpecification(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class CreateDataLabComputeV0(BaseModel):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification
    hasDemographics: bool
    hasEmbeddings: bool
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: Optional[HashingAlgorithm] = None
    name: str
    numEmbeddings: conint(ge=0)
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification


class CreateDataLabComputeV1(CreateDataLabComputeV0):
    pass


class CreateDataLabComputeV10(BaseModel):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification
    dropInvalidRows: Optional[bool] = True
    forceSparkValidation: Optional[bool] = False
    hasDemographics: bool
    hasEmbeddings: bool
    hasSegments: bool
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: Optional[HashingAlgorithm] = None
    name: str
    numEmbeddings: conint(ge=0)
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification


class CreateDataLabComputeV11(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV12(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV13(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV14(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV2(BaseModel):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification
    hasDemographics: bool
    hasEmbeddings: bool
    hasSegments: bool
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: Optional[HashingAlgorithm] = None
    name: str
    numEmbeddings: conint(ge=0)
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification


class CreateDataLabComputeV3(CreateDataLabComputeV2):
    pass


class CreateDataLabComputeV4(BaseModel):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification
    forceSparkValidation: Optional[bool] = False
    hasDemographics: bool
    hasEmbeddings: bool
    hasSegments: bool
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: Optional[HashingAlgorithm] = None
    name: str
    numEmbeddings: conint(ge=0)
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification


class CreateDataLabComputeV5(CreateDataLabComputeV4):
    pass


class CreateDataLabComputeV6(CreateDataLabComputeV4):
    pass


class CreateDataLabComputeV7(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV8(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV9(CreateDataLabComputeV10):
    pass


class CreateDataLab1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: CreateDataLabComputeV0


class CreateDataLab2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: CreateDataLabComputeV1


class CreateDataLab3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: CreateDataLabComputeV2


class CreateDataLab4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: CreateDataLabComputeV3


class CreateDataLab5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v4: CreateDataLabComputeV4


class CreateDataLab6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v5: CreateDataLabComputeV5


class CreateDataLab7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v6: CreateDataLabComputeV6


class CreateDataLab8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v7: CreateDataLabComputeV7


class CreateDataLab9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v8: CreateDataLabComputeV8


class CreateDataLab10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v9: CreateDataLabComputeV9


class CreateDataLab11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v10: CreateDataLabComputeV10


class CreateDataLab12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v11: CreateDataLabComputeV11


class CreateDataLab13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v12: CreateDataLabComputeV12


class CreateDataLab14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v13: CreateDataLabComputeV13


class CreateDataLab15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v14: CreateDataLabComputeV14


class CreateDataLab(
    RootModel[
        Union[
            CreateDataLab1,
            CreateDataLab2,
            CreateDataLab3,
            CreateDataLab4,
            CreateDataLab5,
            CreateDataLab6,
            CreateDataLab7,
            CreateDataLab8,
            CreateDataLab9,
            CreateDataLab10,
            CreateDataLab11,
            CreateDataLab12,
            CreateDataLab13,
            CreateDataLab14,
            CreateDataLab15,
        ]
    ]
):
    root: Union[
        CreateDataLab1,
        CreateDataLab2,
        CreateDataLab3,
        CreateDataLab4,
        CreateDataLab5,
        CreateDataLab6,
        CreateDataLab7,
        CreateDataLab8,
        CreateDataLab9,
        CreateDataLab10,
        CreateDataLab11,
        CreateDataLab12,
        CreateDataLab13,
        CreateDataLab14,
        CreateDataLab15,
    ] = Field(
        ...,
        description='Arguments for constructing a specific DataLab version.',
        title='CreateDataLab',
    )

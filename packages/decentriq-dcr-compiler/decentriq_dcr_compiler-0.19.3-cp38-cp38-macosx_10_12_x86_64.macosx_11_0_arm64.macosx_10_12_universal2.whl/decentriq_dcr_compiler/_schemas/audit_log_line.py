# generated by datamodel-codegen:
#   filename:  audit_log_line.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, RootModel, conint


class Kind(Enum):
    BASE = 'BASE'


class AudienceReference7(BaseModel):
    kind: Kind


class Kind19(Enum):
    CUSTOM = 'CUSTOM'


class AudienceReference8(BaseModel):
    id: str
    kind: Kind19


class Kind20(Enum):
    SEED = 'SEED'


class AudienceReference9(BaseModel):
    audienceType: str
    kind: Kind20


class AudienceReference(
    RootModel[Union[AudienceReference7, AudienceReference8, AudienceReference9]]
):
    root: Union[AudienceReference7, AudienceReference8, AudienceReference9]


class Kind21(Enum):
    resultEncryptionKeyRetrieved = 'resultEncryptionKeyRetrieved'


class AuditLogDetails1(BaseModel):
    job_id: str
    kind: Kind21
    task_result_hash_hex: str


class Kind22(Enum):
    resultExportedAsDataset = 'resultExportedAsDataset'


class AuditLogDetails2(BaseModel):
    job_id: str
    kind: Kind22
    manifest_hash_hex: str
    task_result_hash_hex: str


class Kind23(Enum):
    dcrCreated = 'dcrCreated'


class Kind24(Enum):
    dcrAction = 'dcrAction'


class BooleanOp(Enum):
    AND = 'AND'
    OR = 'OR'


class CombineOperator(Enum):
    INTERSECT = 'INTERSECT'
    UNION = 'UNION'
    DIFF = 'DIFF'


class Kind25(Enum):
    media = 'media'


class Version(Enum):
    v0 = 'v0'


class Kind26(Enum):
    LOOKALIKE = 'LOOKALIKE'


class CustomAudienceDefinition(BaseModel):
    excludeSeedAudience: Optional[bool] = None
    kind: Kind26
    reach: conint(ge=0)
    sourceRef: AudienceReference


class Kind27(Enum):
    RULE_BASED = 'RULE_BASED'


class Kind28(Enum):
    REMARKETING = 'REMARKETING'


class ProvisionBaseAudiencePolicyIds(BaseModel):
    demographicsPolicyId: Optional[str] = None
    embeddingsPolicyId: Optional[str] = None
    matchingPolicyId: str
    segmentsPolicyId: Optional[str] = None


class DataRoomAction1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind25
    provisionBaseAudiencePolicyIds: ProvisionBaseAudiencePolicyIds


class DataRoomAction2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind25
    deprovisionBaseAudiencePolicyIds: Mapping[str, Any]


class ProvisionSeedAudiencePolicyIds(BaseModel):
    audiencesPolicyId: str


class DataRoomAction3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind25
    provisionSeedAudiencePolicyIds: ProvisionSeedAudiencePolicyIds


class DataRoomAction4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind25
    deprovisionSeedAudiencePolicyIds: Mapping[str, Any]


class DeleteCustomAudience(BaseModel):
    audienceId: str
    forceDeletePrerequisites: bool


class DataRoomAction6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind25
    deleteCustomAudience: DeleteCustomAudience


class GetAudiencePrerequisites(BaseModel):
    audienceId: str


class DataRoomAction7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind25
    getAudiencePrerequisites: GetAudiencePrerequisites


class FilterOperator(Enum):
    CONTAINS_ANY_OF = 'CONTAINS_ANY_OF'
    CONTAINS_NONE_OF = 'CONTAINS_NONE_OF'
    CONTAINS_ALL_OF = 'CONTAINS_ALL_OF'
    EMPTY = 'EMPTY'
    NOT_EMPTY = 'NOT_EMPTY'


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class Permission(Enum):
    VIEW_OVERLAP = 'VIEW_OVERLAP'
    VIEW_INSIGHTS = 'VIEW_INSIGHTS'
    PROVIDE_SEED_AUDIENCE = 'PROVIDE_SEED_AUDIENCE'
    PROVIDE_BASE_AUDIENCE = 'PROVIDE_BASE_AUDIENCE'
    CREATE_CUSTOM_AUDIENCE = 'CREATE_CUSTOM_AUDIENCE'
    EXPORT_AUDIENCE = 'EXPORT_AUDIENCE'
    MODEL_QUALITY = 'MODEL_QUALITY'


class PublishedPolicy(BaseModel):
    leafId: str
    policyId: str
    publishedAt: Optional[str] = None
    publishedByEmail: Optional[str] = None


class SeedAudienceReference(BaseModel):
    audienceType: str


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class CustomAudienceDefinition9(BaseModel):
    kind: Kind28
    seedAudienceRef: SeedAudienceReference


class ParticipantGroup(BaseModel):
    emails: Sequence[str]
    id: str
    organizationId: Optional[str] = None
    permissions: Sequence[Permission]
    role: str


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    sourceRef: AudienceReference


class CreateDataRoom1(BaseModel):
    kind: Kind25
    enableDebugMode: bool
    enableInsights: bool
    enableLookalikeAudiences: bool
    enableRemarketing: bool
    enableRuleBasedAudiences: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    hideAbsoluteValuesFromInsights: bool
    matchingIdFormat: FormatType
    name: str
    participantGroups: Sequence[ParticipantGroup]
    policies: Sequence[PublishedPolicy]
    version: Version


class CreateDataRoom(RootModel[CreateDataRoom1]):
    root: CreateDataRoom1


class CustomAudienceDefinition8(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    kind: Kind27
    sourceRef: AudienceReference


class CustomAudienceDefinition6(
    RootModel[
        Union[
            CustomAudienceDefinition,
            CustomAudienceDefinition8,
            CustomAudienceDefinition9,
        ]
    ]
):
    root: Union[
        CustomAudienceDefinition, CustomAudienceDefinition8, CustomAudienceDefinition9
    ]


class CreateCustomAudience(BaseModel):
    definition: CustomAudienceDefinition6
    name: str
    sharedWith: Sequence[str]


class DataRoomAction5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind25
    createCustomAudience: CreateCustomAudience


class UpdateCustomAudience(BaseModel):
    audienceId: str
    definition: Optional[CustomAudienceDefinition6] = None
    name: Optional[str] = None
    sharedWith: Optional[Sequence[str]] = None


class DataRoomAction8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind25
    updateCustomAudience: UpdateCustomAudience


class DataRoomAction(
    RootModel[
        Union[
            DataRoomAction1,
            DataRoomAction2,
            DataRoomAction3,
            DataRoomAction4,
            DataRoomAction5,
            DataRoomAction6,
            DataRoomAction7,
            DataRoomAction8,
        ]
    ]
):
    root: Union[
        DataRoomAction1,
        DataRoomAction2,
        DataRoomAction3,
        DataRoomAction4,
        DataRoomAction5,
        DataRoomAction6,
        DataRoomAction7,
        DataRoomAction8,
    ]


class AuditLogDetails3(BaseModel):
    create_data_room: CreateDataRoom
    kind: Kind23


class AuditLogDetails4(BaseModel):
    action: DataRoomAction
    kind: Kind24


class AuditLogDetails(
    RootModel[
        Union[AuditLogDetails1, AuditLogDetails2, AuditLogDetails3, AuditLogDetails4]
    ]
):
    root: Union[AuditLogDetails1, AuditLogDetails2, AuditLogDetails3, AuditLogDetails4]


class AuditLogLine(BaseModel):
    details: AuditLogDetails
    timestampMillis: conint(ge=0)
    user: Optional[str] = None

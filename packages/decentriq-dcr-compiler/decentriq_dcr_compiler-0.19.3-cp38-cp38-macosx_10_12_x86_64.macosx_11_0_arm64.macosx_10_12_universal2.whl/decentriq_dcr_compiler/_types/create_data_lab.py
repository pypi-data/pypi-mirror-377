# generated by datamodel-codegen:
#   filename:  create_data_lab.json

from __future__ import annotations

from typing import Optional, Union

from typing_extensions import Literal, NotRequired, TypedDict


class EnclaveSpecification(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


class CreateDataLabComputeV0(TypedDict):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification
    hasDemographics: bool
    hasEmbeddings: bool
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: NotRequired[Optional[HashingAlgorithm]]
    name: str
    numEmbeddings: int
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification


class CreateDataLabComputeV1(CreateDataLabComputeV0):
    pass


class CreateDataLabComputeV10(TypedDict):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification
    dropInvalidRows: NotRequired[bool]
    forceSparkValidation: NotRequired[bool]
    hasDemographics: bool
    hasEmbeddings: bool
    hasSegments: bool
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: NotRequired[Optional[HashingAlgorithm]]
    name: str
    numEmbeddings: int
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification


class CreateDataLabComputeV11(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV12(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV13(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV14(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV2(TypedDict):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification
    hasDemographics: bool
    hasEmbeddings: bool
    hasSegments: bool
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: NotRequired[Optional[HashingAlgorithm]]
    name: str
    numEmbeddings: int
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification


class CreateDataLabComputeV3(CreateDataLabComputeV2):
    pass


class CreateDataLabComputeV4(TypedDict):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification
    forceSparkValidation: NotRequired[bool]
    hasDemographics: bool
    hasEmbeddings: bool
    hasSegments: bool
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: NotRequired[Optional[HashingAlgorithm]]
    name: str
    numEmbeddings: int
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification


class CreateDataLabComputeV5(CreateDataLabComputeV4):
    pass


class CreateDataLabComputeV6(CreateDataLabComputeV4):
    pass


class CreateDataLabComputeV7(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV8(CreateDataLabComputeV10):
    pass


class CreateDataLabComputeV9(CreateDataLabComputeV10):
    pass


class CreateDataLab1(TypedDict):
    v0: CreateDataLabComputeV0


class CreateDataLab2(TypedDict):
    v1: CreateDataLabComputeV1


class CreateDataLab3(TypedDict):
    v2: CreateDataLabComputeV2


class CreateDataLab4(TypedDict):
    v3: CreateDataLabComputeV3


class CreateDataLab5(TypedDict):
    v4: CreateDataLabComputeV4


class CreateDataLab6(TypedDict):
    v5: CreateDataLabComputeV5


class CreateDataLab7(TypedDict):
    v6: CreateDataLabComputeV6


class CreateDataLab8(TypedDict):
    v7: CreateDataLabComputeV7


class CreateDataLab9(TypedDict):
    v8: CreateDataLabComputeV8


class CreateDataLab10(TypedDict):
    v9: CreateDataLabComputeV9


class CreateDataLab11(TypedDict):
    v10: CreateDataLabComputeV10


class CreateDataLab12(TypedDict):
    v11: CreateDataLabComputeV11


class CreateDataLab13(TypedDict):
    v12: CreateDataLabComputeV12


class CreateDataLab14(TypedDict):
    v13: CreateDataLabComputeV13


class CreateDataLab15(TypedDict):
    v14: CreateDataLabComputeV14


CreateDataLab = Union[
    CreateDataLab1,
    CreateDataLab2,
    CreateDataLab3,
    CreateDataLab4,
    CreateDataLab5,
    CreateDataLab6,
    CreateDataLab7,
    CreateDataLab8,
    CreateDataLab9,
    CreateDataLab10,
    CreateDataLab11,
    CreateDataLab12,
    CreateDataLab13,
    CreateDataLab14,
    CreateDataLab15,
]

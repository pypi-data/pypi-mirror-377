# generated by datamodel-codegen:
#   filename:  data_science_commit.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class AwsConfig(TypedDict):
    bucket: str
    objectKey: NotRequired[Optional[str]]
    region: str


ColumnDataType = Literal['integer', 'float', 'string']


class ColumnTuple(TypedDict):
    columns: Sequence[int]


class CredentialsDependencyV91(TypedDict):
    user: str


CredentialsDependencyV9 = Union[Literal['splickyDsp'], CredentialsDependencyV91]


class DatasetSinkEncryptionKeyDependency(TypedDict):
    dependency: str
    isKeyHexEncoded: bool


class EnclaveSpecification(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


class ExportConnectorKind1(TypedDict):
    aws: AwsConfig


ExportConnectorKind = ExportConnectorKind1


class ExportConnectorKind21(ExportConnectorKind1):
    pass


class ExportConnectorKind22(TypedDict):
    azure: Sequence


class ExportType1(TypedDict):
    raw: Sequence


class ExportType2(TypedDict):
    zipSingleFile: str


class ExportType3(TypedDict):
    zipAllFiles: Sequence


ExportType = Union[ExportType1, ExportType2, ExportType3]


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


class GcsConfig(TypedDict):
    bucket: str
    objectKey: NotRequired[Optional[str]]


HashingAlgorithm = Literal['SHA256_HEX']


class ImportConnectorKind1(ExportConnectorKind1):
    pass


ImportConnectorKind = ImportConnectorKind1


class ImportConnectorKind21(ExportConnectorKind1):
    pass


class ImportConnectorKind22(ExportConnectorKind22):
    pass


class ImportConnectorKind23(TypedDict):
    gcs: GcsConfig


class ImportConnectorNode(TypedDict):
    credentialsDependency: str
    kind: ImportConnectorKind
    specificationId: str


class InputDataType1(ExportType1):
    pass


MaskType = Literal[
    'genericString',
    'genericNumber',
    'name',
    'address',
    'postcode',
    'phoneNumber',
    'socialSecurityNumber',
    'email',
    'date',
    'timestamp',
    'iban',
]


class MatchingComputationNode(TypedDict):
    config: str
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    output: str
    specificationId: str
    staticContentSpecificationId: str


class NumRowsValidationRule(TypedDict):
    atLeast: NotRequired[Optional[int]]
    atMost: NotRequired[Optional[int]]


class NumericRangeRule(TypedDict):
    greaterThan: NotRequired[Optional[float]]
    greaterThanEquals: NotRequired[Optional[float]]
    lessThan: NotRequired[Optional[float]]
    lessThanEquals: NotRequired[Optional[float]]


class PostComputationNode(TypedDict):
    dependency: str
    specificationId: str
    useMockBackend: bool


class PreviewComputationNode(TypedDict):
    dependency: str
    quotaBytes: int


class PythonEnvironmentComputationNode(TypedDict):
    extraChunkCacheSizeToAvailableMemoryRatio: NotRequired[Optional[float]]
    minimumContainerMemorySize: NotRequired[Optional[int]]
    requirementsTxtContent: str
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class PythonOptions(TypedDict):
    customVirtualEnvironmentId: NotRequired[Optional[str]]


class RawLeafNode(TypedDict):
    pass


S3Provider = Literal['Aws', 'Gcs']


class S3SinkComputationNode(TypedDict):
    credentialsDependencyId: str
    endpoint: str
    region: NotRequired[str]
    s3Provider: NotRequired[S3Provider]
    specificationId: str
    uploadDependencyId: str


class Script(TypedDict):
    content: str
    name: str


ScriptingLanguage = Literal['python', 'r']


class ScriptingLanguageV91(TypedDict):
    python: PythonOptions


ScriptingLanguageV9 = Union[Literal['r'], ScriptingLanguageV91]


class SnowflakeConfig(TypedDict):
    databaseName: str
    schemaName: str
    stageName: str
    tableName: str
    warehouseName: str


class SqlNodePrivacyFilter(TypedDict):
    minimumRowsCount: int


class TableMapping(TypedDict):
    nodeId: str
    tableName: str


class UniquenessValidationRule(TypedDict):
    uniqueKeys: Sequence[ColumnTuple]


class ZipInputDataType1(TypedDict):
    all: Sequence


class ZipInputDataType2(TypedDict):
    files: Sequence[str]


ZipInputDataType = Union[ZipInputDataType1, ZipInputDataType2]


class ColumnDataFormat(TypedDict):
    dataType: ColumnDataType
    isNullable: bool


class ColumnValidationV0(TypedDict):
    allowNull: bool
    formatType: FormatType
    hashWith: NotRequired[Optional[HashingAlgorithm]]
    inRange: NotRequired[Optional[NumericRangeRule]]
    name: NotRequired[Optional[str]]


class ComputationNodeKindV25(TypedDict):
    s3Sink: S3SinkComputationNode


class ComputationNodeKindV26(TypedDict):
    match: MatchingComputationNode


class ComputationNodeKindV27(TypedDict):
    post: PostComputationNode


class ComputationNodeKindV65(ComputationNodeKindV25):
    pass


class ComputationNodeKindV66(ComputationNodeKindV26):
    pass


class ComputationNodeKindV67(ComputationNodeKindV27):
    pass


class ComputationNodeKindV68(TypedDict):
    preview: PreviewComputationNode


class ComputationNodeKindV69(TypedDict):
    importConnector: ImportConnectorNode


class ComputationNodeKindV95(ComputationNodeKindV25):
    pass


class ComputationNodeKindV96(ComputationNodeKindV26):
    pass


class ComputationNodeKindV97(ComputationNodeKindV27):
    pass


class ComputationNodeKindV98(ComputationNodeKindV68):
    pass


class EnvironmentComputationNodeKind1(TypedDict):
    python: PythonEnvironmentComputationNode


EnvironmentComputationNodeKind = EnvironmentComputationNodeKind1


class ExportConnectorKind23(ImportConnectorKind23):
    pass


ExportConnectorKind2 = Union[
    ExportConnectorKind21, ExportConnectorKind22, ExportConnectorKind23
]


class ExportNodeDependency(TypedDict):
    exportType: ExportType
    name: str


class ImportConnectorKind24(TypedDict):
    snowflake: SnowflakeConfig


ImportConnectorKind2 = Union[
    ImportConnectorKind21,
    ImportConnectorKind22,
    ImportConnectorKind23,
    ImportConnectorKind24,
]


class ImportConnectorNodeV9(TypedDict):
    credentialsDependency: str
    kind: ImportConnectorKind2
    specificationId: str


class InputDataType2(TypedDict):
    zip: ZipInputDataType


InputDataType = Union[InputDataType1, InputDataType2]


class LeafNodeKindV21(TypedDict):
    raw: RawLeafNode


class ScriptingComputationNode(TypedDict):
    additionalScripts: Sequence[Script]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: NotRequired[Optional[float]]
    mainScript: Script
    minimumContainerMemorySize: NotRequired[Optional[int]]
    output: str
    scriptingLanguage: ScriptingLanguage
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class ScriptingComputationNodeV9(TypedDict):
    additionalScripts: Sequence[Script]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: NotRequired[Optional[float]]
    mainScript: Script
    minimumContainerMemorySize: NotRequired[Optional[int]]
    output: str
    scriptingLanguage: ScriptingLanguageV9
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class SqlComputationNode(TypedDict):
    dependencies: Sequence[TableMapping]
    privacyFilter: NotRequired[Optional[SqlNodePrivacyFilter]]
    specificationId: str
    statement: str


class SqliteComputationNode(TypedDict):
    dependencies: Sequence[TableMapping]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    sqliteSpecificationId: str
    statement: str
    staticContentSpecificationId: str


class SyntheticNodeColumn(TypedDict):
    dataFormat: ColumnDataFormat
    index: int
    maskType: MaskType
    name: NotRequired[Optional[str]]
    shouldMaskColumn: bool


class TableLeafNodeColumnV2(TypedDict):
    dataFormat: ColumnDataFormat
    name: str
    validation: ColumnValidationV0


class TableValidationV0(TypedDict):
    allowEmpty: NotRequired[Optional[bool]]
    numRows: NotRequired[Optional[NumRowsValidationRule]]
    uniqueness: NotRequired[Optional[UniquenessValidationRule]]


class ValidationNodeV2(TypedDict):
    dropInvalidRows: NotRequired[Optional[bool]]
    pythonSpecificationId: str
    staticContentSpecificationId: str
    validation: TableValidationV0


class ComputationNodeKindV21(TypedDict):
    sql: SqlComputationNode


class ComputationNodeKindV22(TypedDict):
    sqlite: SqliteComputationNode


class ComputationNodeKindV23(TypedDict):
    scripting: ScriptingComputationNode


class ComputationNodeKindV61(ComputationNodeKindV21):
    pass


class ComputationNodeKindV62(ComputationNodeKindV22):
    pass


class ComputationNodeKindV63(ComputationNodeKindV23):
    pass


class ComputationNodeKindV91(ComputationNodeKindV21):
    pass


class ComputationNodeKindV92(ComputationNodeKindV22):
    pass


class ComputationNodeKindV93(TypedDict):
    scripting: ScriptingComputationNodeV9


class ComputationNodeKindV99(TypedDict):
    importConnector: ImportConnectorNodeV9


class DatasetSinkInput(TypedDict):
    datasetName: str
    dependency: str
    inputDataType: InputDataType


class EnvironmentComputationNode(TypedDict):
    kind: EnvironmentComputationNodeKind


class ExportConnectorNode(TypedDict):
    credentialsDependency: str
    dependency: ExportNodeDependency
    kind: ExportConnectorKind
    specificationId: str


class ExportConnectorNodeV9(TypedDict):
    credentialsDependency: CredentialsDependencyV9
    dependency: ExportNodeDependency
    kind: ExportConnectorKind2
    specificationId: str


class SyntheticDataComputationNode(TypedDict):
    columns: Sequence[SyntheticNodeColumn]
    dependency: str
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    epsilon: float
    outputOriginalDataStatistics: bool
    staticContentSpecificationId: str
    synthSpecificationId: str


class TableLeafNodeV2(TypedDict):
    columns: Sequence[TableLeafNodeColumnV2]
    validationNode: ValidationNodeV2


class ComputationNodeKindV24(TypedDict):
    syntheticData: SyntheticDataComputationNode


ComputationNodeKindV2 = Union[
    ComputationNodeKindV21,
    ComputationNodeKindV22,
    ComputationNodeKindV23,
    ComputationNodeKindV24,
    ComputationNodeKindV25,
    ComputationNodeKindV26,
    ComputationNodeKindV27,
]


class ComputationNodeKindV64(ComputationNodeKindV24):
    pass


class ComputationNodeKindV610(TypedDict):
    exportConnector: ExportConnectorNode


class ComputationNodeKindV94(ComputationNodeKindV24):
    pass


class ComputationNodeKindV910(TypedDict):
    exportConnector: ExportConnectorNodeV9


class ComputationNodeKindV912(TypedDict):
    environment: EnvironmentComputationNode


class ComputationNodeV2(TypedDict):
    kind: ComputationNodeKindV2


class DatasetSinkComputationNode(TypedDict):
    datasetImportId: NotRequired[Optional[str]]
    encryptionKeyDependency: DatasetSinkEncryptionKeyDependency
    input: DatasetSinkInput
    specificationId: str


class LeafNodeKindV22(TypedDict):
    table: TableLeafNodeV2


LeafNodeKindV2 = Union[LeafNodeKindV21, LeafNodeKindV22]


class LeafNodeV2(TypedDict):
    isRequired: bool
    kind: LeafNodeKindV2


class NodeKindV21(TypedDict):
    leaf: LeafNodeV2


class NodeKindV22(TypedDict):
    computation: ComputationNodeV2


NodeKindV2 = Union[NodeKindV21, NodeKindV22]


class NodeKindV61(NodeKindV21):
    pass


class NodeKindV91(NodeKindV21):
    pass


class NodeV2(TypedDict):
    id: str
    kind: NodeKindV2
    name: str


class AddComputationCommitV2(TypedDict):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV2


class ComputationNodeKindV611(TypedDict):
    datasetSink: DatasetSinkComputationNode


ComputationNodeKindV6 = Union[
    ComputationNodeKindV61,
    ComputationNodeKindV62,
    ComputationNodeKindV63,
    ComputationNodeKindV64,
    ComputationNodeKindV65,
    ComputationNodeKindV66,
    ComputationNodeKindV67,
    ComputationNodeKindV68,
    ComputationNodeKindV69,
    ComputationNodeKindV610,
    ComputationNodeKindV611,
]


class ComputationNodeKindV911(ComputationNodeKindV611):
    pass


ComputationNodeKindV9 = Union[
    ComputationNodeKindV91,
    ComputationNodeKindV92,
    ComputationNodeKindV93,
    ComputationNodeKindV94,
    ComputationNodeKindV95,
    ComputationNodeKindV96,
    ComputationNodeKindV97,
    ComputationNodeKindV98,
    ComputationNodeKindV99,
    ComputationNodeKindV910,
    ComputationNodeKindV911,
    ComputationNodeKindV912,
]


class ComputationNodeV6(TypedDict):
    kind: ComputationNodeKindV6


class ComputationNodeV9(TypedDict):
    kind: ComputationNodeKindV9


class DataScienceCommitKindV21(TypedDict):
    addComputation: AddComputationCommitV2


DataScienceCommitKindV2 = DataScienceCommitKindV21


class DataScienceCommitV4(TypedDict):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV2
    name: str


class DataScienceCommitV5(DataScienceCommitV4):
    pass


class NodeKindV62(TypedDict):
    computation: ComputationNodeV6


NodeKindV6 = Union[NodeKindV61, NodeKindV62]


class NodeKindV92(TypedDict):
    computation: ComputationNodeV9


NodeKindV9 = Union[NodeKindV91, NodeKindV92]


class NodeV6(TypedDict):
    id: str
    kind: NodeKindV6
    name: str


class NodeV9(TypedDict):
    id: str
    kind: NodeKindV9
    name: str


class DataScienceCommit1(TypedDict):
    v4: DataScienceCommitV4


class DataScienceCommit2(TypedDict):
    v5: DataScienceCommitV5


class AddComputationCommitV6(TypedDict):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV6


class AddComputationCommitV9(TypedDict):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV9


class DataScienceCommitKindV61(TypedDict):
    addComputation: AddComputationCommitV6


DataScienceCommitKindV6 = DataScienceCommitKindV61


class DataScienceCommitKindV91(TypedDict):
    addComputation: AddComputationCommitV9


DataScienceCommitKindV9 = DataScienceCommitKindV91


class DataScienceCommitV10(TypedDict):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV9
    name: str


class DataScienceCommitV11(DataScienceCommitV10):
    pass


class DataScienceCommitV12(DataScienceCommitV10):
    pass


class DataScienceCommitV13(DataScienceCommitV10):
    pass


class DataScienceCommitV14(DataScienceCommitV10):
    pass


class DataScienceCommitV15(DataScienceCommitV10):
    pass


class DataScienceCommitV6(TypedDict):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV6
    name: str


class DataScienceCommitV7(DataScienceCommitV6):
    pass


class DataScienceCommitV8(DataScienceCommitV6):
    pass


class DataScienceCommitV9(DataScienceCommitV10):
    pass


class DataScienceCommit3(TypedDict):
    v6: DataScienceCommitV6


class DataScienceCommit4(TypedDict):
    v7: DataScienceCommitV7


class DataScienceCommit5(TypedDict):
    v8: DataScienceCommitV8


class DataScienceCommit6(TypedDict):
    v9: DataScienceCommitV9


class DataScienceCommit7(TypedDict):
    v10: DataScienceCommitV10


class DataScienceCommit8(TypedDict):
    v11: DataScienceCommitV11


class DataScienceCommit9(TypedDict):
    v12: DataScienceCommitV12


class DataScienceCommit10(TypedDict):
    v13: DataScienceCommitV13


class DataScienceCommit11(TypedDict):
    v14: DataScienceCommitV14


class DataScienceCommit12(TypedDict):
    v15: DataScienceCommitV15


DataScienceCommit = Union[
    DataScienceCommit1,
    DataScienceCommit2,
    DataScienceCommit3,
    DataScienceCommit4,
    DataScienceCommit5,
    DataScienceCommit6,
    DataScienceCommit7,
    DataScienceCommit8,
    DataScienceCommit9,
    DataScienceCommit10,
    DataScienceCommit11,
    DataScienceCommit12,
]

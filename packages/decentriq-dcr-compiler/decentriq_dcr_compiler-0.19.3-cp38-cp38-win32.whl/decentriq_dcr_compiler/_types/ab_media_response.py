# generated by datamodel-codegen:
#   filename:  ab_media_response.json

from __future__ import annotations

from typing import Any, Mapping, Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class PublishDataRoom(TypedDict):
    dataRoomId: str


class AbMediaResponse1(TypedDict):
    publishDataRoom: PublishDataRoom


class AbMediaResponse3(TypedDict):
    publishAudiencesDataset: Mapping[str, Any]


class AbMediaResponse4(TypedDict):
    unpublishAudiencesDataset: Mapping[str, Any]


class AbMediaResponse5(TypedDict):
    publishMatchingDataset: Mapping[str, Any]


class AbMediaResponse6(TypedDict):
    unpublishMatchingDataset: Mapping[str, Any]


class AbMediaResponse7(TypedDict):
    publishDemographicsDataset: Mapping[str, Any]


class AbMediaResponse8(TypedDict):
    unpublishDemographicsDataset: Mapping[str, Any]


class AbMediaResponse9(TypedDict):
    publishSegmentsDataset: Mapping[str, Any]


class AbMediaResponse10(TypedDict):
    unpublishSegmentsDataset: Mapping[str, Any]


class AbMediaResponse11(TypedDict):
    publishEmbeddingsDataset: Mapping[str, Any]


class AbMediaResponse12(TypedDict):
    unpublishEmbeddingsDataset: Mapping[str, Any]


class AbMediaResponse13(TypedDict):
    publishAudiencesJson: Mapping[str, Any]


class AbMediaResponse14(TypedDict):
    unpublishAudiencesJson: Mapping[str, Any]


class RetrievePublishedDatasets(TypedDict):
    audiencesDatasetHashHex: NotRequired[Optional[str]]
    demographicsDatasetHashHex: NotRequired[Optional[str]]
    embeddingsDatasetHashHex: NotRequired[Optional[str]]
    matchingDatasetHashHex: NotRequired[Optional[str]]
    segmentsDatasetHashHex: NotRequired[Optional[str]]


class AbMediaResponse15(TypedDict):
    retrievePublishedDatasets: RetrievePublishedDatasets


class ComputeInsights(TypedDict):
    computeNodeName: str
    jobIdHex: str


class AbMediaResponse16(TypedDict):
    computeInsights: ComputeInsights


class GetMatchingValidationReport(ComputeInsights):
    pass


class AbMediaResponse17(TypedDict):
    getMatchingValidationReport: GetMatchingValidationReport


class GetSegmentsValidationReport(ComputeInsights):
    pass


class AbMediaResponse18(TypedDict):
    getSegmentsValidationReport: GetSegmentsValidationReport


class GetDemographicsValidationReport(ComputeInsights):
    pass


class AbMediaResponse19(TypedDict):
    getDemographicsValidationReport: GetDemographicsValidationReport


class GetAudiencesValidationReport(ComputeInsights):
    pass


class AbMediaResponse20(TypedDict):
    getAudiencesValidationReport: GetAudiencesValidationReport


class GetLookalikeAudienceStatistics(ComputeInsights):
    pass


class AbMediaResponse21(TypedDict):
    getLookalikeAudienceStatistics: GetLookalikeAudienceStatistics


class ComputeOverlapStatistics(ComputeInsights):
    pass


class AbMediaResponse22(TypedDict):
    computeOverlapStatistics: ComputeOverlapStatistics


class GetAudienceUserListForPublisher(ComputeInsights):
    pass


class AbMediaResponse23(TypedDict):
    getAudienceUserListForPublisher: GetAudienceUserListForPublisher


class GetAudienceUserListForAdvertiser(ComputeInsights):
    pass


class AbMediaResponse24(TypedDict):
    getAudienceUserListForAdvertiser: GetAudienceUserListForAdvertiser


class GetAudienceUserListForPublisherLal(ComputeInsights):
    pass


class AbMediaResponse25(TypedDict):
    getAudienceUserListForPublisherLal: GetAudienceUserListForPublisherLal


class GetAudienceUserListForAdvertiserLal(ComputeInsights):
    pass


class AbMediaResponse26(TypedDict):
    getAudienceUserListForAdvertiserLal: GetAudienceUserListForAdvertiserLal


class GetAudiencesForPublisher(ComputeInsights):
    pass


class AbMediaResponse27(TypedDict):
    getAudiencesForPublisher: GetAudiencesForPublisher


class GetAudiencesForAdvertiser(ComputeInsights):
    pass


class AbMediaResponse28(TypedDict):
    getAudiencesForAdvertiser: GetAudiencesForAdvertiser


class IngestAudiencesReport(ComputeInsights):
    pass


class AbMediaResponse29(TypedDict):
    ingestAudiencesReport: IngestAudiencesReport


class RunCreateAudienceUserList(ComputeInsights):
    pass


class AbMediaResponse30(TypedDict):
    runCreateAudienceUserList: RunCreateAudienceUserList


class RunCreateAudienceUserListLal(ComputeInsights):
    pass


class AbMediaResponse31(TypedDict):
    runCreateAudienceUserListLal: RunCreateAudienceUserListLal


class EstimateAudienceSizeForAdvertiser(ComputeInsights):
    pass


class AbMediaResponse32(TypedDict):
    estimateAudienceSizeForAdvertiser: EstimateAudienceSizeForAdvertiser


class EstimateAudienceSizeForPublisher(ComputeInsights):
    pass


class AbMediaResponse33(TypedDict):
    estimateAudienceSizeForPublisher: EstimateAudienceSizeForPublisher


class EstimateAudienceSizeForAdvertiserLal(ComputeInsights):
    pass


class AbMediaResponse34(TypedDict):
    estimateAudienceSizeForAdvertiserLal: EstimateAudienceSizeForAdvertiserLal


class EstimateAudienceSizeForPublisherLal(ComputeInsights):
    pass


class AbMediaResponse35(TypedDict):
    estimateAudienceSizeForPublisherLal: EstimateAudienceSizeForPublisherLal


class RetrieveModelQualityReport(ComputeInsights):
    pass


class AbMediaResponse36(TypedDict):
    retrieveModelQualityReport: RetrieveModelQualityReport


class GetDataAttributes(ComputeInsights):
    pass


class AbMediaResponse37(TypedDict):
    getDataAttributes: GetDataAttributes


class PythonEnvReport(ComputeInsights):
    pass


class AbMediaResponse38(TypedDict):
    pythonEnvReport: PythonEnvReport


class EnclaveSpecificationV0(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


ModelEvaluationType = Literal['ROC_CURVE', 'DISTANCE_TO_EMBEDDING', 'JACCARD']


class RequirementFlagValue7(TypedDict):
    type: Literal['SUPPORTED']


class RequirementFlagValue8(TypedDict):
    type: Literal['DATASET']


class RequirementFlagValue9(TypedDict):
    type: Literal['PROPERTY']
    value: str


RequirementFlagValue = Union[
    RequirementFlagValue7, RequirementFlagValue8, RequirementFlagValue9
]


KnownOrUnknownRequirementFlagValue = Optional[RequirementFlagValue]


class ModelEvaluationConfig(TypedDict):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(TypedDict):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOp12(TypedDict):
    has: RequirementFlag


class AbMediaComputeV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: NotRequired[Sequence[str]]
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class AbMediaComputeV1(AbMediaComputeV0):
    pass


class AbMediaComputeV2(AbMediaComputeV0):
    pass


class AbMediaComputeV3(AbMediaComputeV0):
    pass


class AbMediaComputeV4(AbMediaComputeV0):
    pass


class AbMediaComputeV5(AbMediaComputeV0):
    pass


class AbMediaComputeV6(AbMediaComputeV0):
    pass


class AbMediaComputeV7(AbMediaComputeV0):
    pass


class AbMediaCompute(TypedDict):
    v0: AbMediaComputeV0


class AbMediaCompute20(TypedDict):
    v1: AbMediaComputeV1


class AbMediaCompute21(TypedDict):
    v2: AbMediaComputeV2


class AbMediaCompute22(TypedDict):
    v3: AbMediaComputeV3


class AbMediaCompute23(TypedDict):
    v4: AbMediaComputeV4


class AbMediaCompute24(TypedDict):
    v5: AbMediaComputeV5


class AbMediaCompute25(TypedDict):
    v6: AbMediaComputeV6


class AbMediaCompute26(TypedDict):
    v7: AbMediaComputeV7


AbMediaCompute18 = Union[
    AbMediaCompute,
    AbMediaCompute20,
    AbMediaCompute21,
    AbMediaCompute22,
    AbMediaCompute23,
    AbMediaCompute24,
    AbMediaCompute25,
    AbMediaCompute26,
]


AbMediaComputeOrUnknown = Optional[AbMediaCompute18]


class RetrieveDataRoom(TypedDict):
    dataRoom: AbMediaDcr


class AbMediaResponse2(TypedDict):
    retrieveDataRoom: RetrieveDataRoom


AbMediaResponse = Union[
    AbMediaResponse1,
    AbMediaResponse2,
    AbMediaResponse3,
    AbMediaResponse4,
    AbMediaResponse5,
    AbMediaResponse6,
    AbMediaResponse7,
    AbMediaResponse8,
    AbMediaResponse9,
    AbMediaResponse10,
    AbMediaResponse11,
    AbMediaResponse12,
    AbMediaResponse13,
    AbMediaResponse14,
    AbMediaResponse15,
    AbMediaResponse16,
    AbMediaResponse17,
    AbMediaResponse18,
    AbMediaResponse19,
    AbMediaResponse20,
    AbMediaResponse21,
    AbMediaResponse22,
    AbMediaResponse23,
    AbMediaResponse24,
    AbMediaResponse25,
    AbMediaResponse26,
    AbMediaResponse27,
    AbMediaResponse28,
    AbMediaResponse29,
    AbMediaResponse30,
    AbMediaResponse31,
    AbMediaResponse32,
    AbMediaResponse33,
    AbMediaResponse34,
    AbMediaResponse35,
    AbMediaResponse36,
    AbMediaResponse37,
    AbMediaResponse38,
]


class AbMediaDcr3(TypedDict):
    v0: AbMediaDcrInner


AbMediaDcr = AbMediaDcr3


class AbMediaDcrInner(TypedDict):
    compute: AbMediaComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


class ConsumerRequirements(TypedDict):
    optional: Sequence[RequirementFlag]
    required: NotRequired[Optional[RequirementOp]]


RequirementOp9 = TypedDict(
    'RequirementOp9',
    {
        'or': Sequence[RequirementOp],
    },
)


RequirementOp10 = TypedDict(
    'RequirementOp10',
    {
        'and': Sequence[RequirementOp],
    },
)


class RequirementOp11(TypedDict):
    exclusiveOr: Sequence[RequirementOp]


RequirementOp = Union[RequirementOp9, RequirementOp10, RequirementOp11, RequirementOp12]

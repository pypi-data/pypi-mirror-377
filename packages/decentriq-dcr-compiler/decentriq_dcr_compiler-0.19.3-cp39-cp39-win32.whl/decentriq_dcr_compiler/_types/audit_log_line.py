# generated by datamodel-codegen:
#   filename:  audit_log_line.json

from __future__ import annotations

from typing import Any, Mapping, Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class AudienceReference7(TypedDict):
    kind: Literal['BASE']


class AudienceReference8(TypedDict):
    id: str
    kind: Literal['CUSTOM']


class AudienceReference9(TypedDict):
    audienceType: str
    kind: Literal['SEED']


AudienceReference = Union[AudienceReference7, AudienceReference8, AudienceReference9]


class AuditLogDetails1(TypedDict):
    job_id: str
    kind: Literal['resultEncryptionKeyRetrieved']
    task_result_hash_hex: str


class AuditLogDetails2(TypedDict):
    job_id: str
    kind: Literal['resultExportedAsDataset']
    manifest_hash_hex: str
    task_result_hash_hex: str


BooleanOp = Literal['AND', 'OR']


CombineOperator = Literal['INTERSECT', 'UNION', 'DIFF']


class CustomAudienceDefinition(TypedDict):
    excludeSeedAudience: NotRequired[Optional[bool]]
    kind: Literal['LOOKALIKE']
    reach: int
    sourceRef: AudienceReference


class ProvisionBaseAudiencePolicyIds(TypedDict):
    demographicsPolicyId: NotRequired[Optional[str]]
    embeddingsPolicyId: NotRequired[Optional[str]]
    matchingPolicyId: str
    segmentsPolicyId: NotRequired[Optional[str]]


class DataRoomAction1(TypedDict):
    kind: Literal['media']
    provisionBaseAudiencePolicyIds: ProvisionBaseAudiencePolicyIds


class DataRoomAction2(TypedDict):
    kind: Literal['media']
    deprovisionBaseAudiencePolicyIds: Mapping[str, Any]


class ProvisionSeedAudiencePolicyIds(TypedDict):
    audiencesPolicyId: str


class DataRoomAction3(TypedDict):
    kind: Literal['media']
    provisionSeedAudiencePolicyIds: ProvisionSeedAudiencePolicyIds


class DataRoomAction4(TypedDict):
    kind: Literal['media']
    deprovisionSeedAudiencePolicyIds: Mapping[str, Any]


class DeleteCustomAudience(TypedDict):
    audienceId: str
    forceDeletePrerequisites: bool


class DataRoomAction6(TypedDict):
    kind: Literal['media']
    deleteCustomAudience: DeleteCustomAudience


class GetAudiencePrerequisites(TypedDict):
    audienceId: str


class DataRoomAction7(TypedDict):
    kind: Literal['media']
    getAudiencePrerequisites: GetAudiencePrerequisites


FilterOperator = Literal[
    'CONTAINS_ANY_OF', 'CONTAINS_NONE_OF', 'CONTAINS_ALL_OF', 'EMPTY', 'NOT_EMPTY'
]


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


Permission = Literal[
    'VIEW_OVERLAP',
    'VIEW_INSIGHTS',
    'PROVIDE_SEED_AUDIENCE',
    'PROVIDE_BASE_AUDIENCE',
    'CREATE_CUSTOM_AUDIENCE',
    'EXPORT_AUDIENCE',
    'MODEL_QUALITY',
]


class PublishedPolicy(TypedDict):
    leafId: str
    policyId: str
    publishedAt: NotRequired[Optional[str]]
    publishedByEmail: NotRequired[Optional[str]]


class SeedAudienceReference(TypedDict):
    audienceType: str


class AudienceFilter(TypedDict):
    attribute: str
    operator: FilterOperator
    values: NotRequired[Sequence[str]]


class AudienceFilters(TypedDict):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class CustomAudienceDefinition9(TypedDict):
    kind: Literal['REMARKETING']
    seedAudienceRef: SeedAudienceReference


class ParticipantGroup(TypedDict):
    emails: Sequence[str]
    id: str
    organizationId: NotRequired[Optional[str]]
    permissions: Sequence[Permission]
    role: str


class AudienceCombinator(TypedDict):
    filters: NotRequired[Optional[AudienceFilters]]
    operator: CombineOperator
    sourceRef: AudienceReference


class CreateDataRoom1(TypedDict):
    kind: Literal['media']
    enableDebugMode: bool
    enableInsights: bool
    enableLookalikeAudiences: bool
    enableRemarketing: bool
    enableRuleBasedAudiences: bool
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    hideAbsoluteValuesFromInsights: bool
    matchingIdFormat: FormatType
    name: str
    participantGroups: Sequence[ParticipantGroup]
    policies: Sequence[PublishedPolicy]
    version: Literal['v0']


CreateDataRoom = CreateDataRoom1


class CustomAudienceDefinition8(TypedDict):
    combine: NotRequired[Sequence[AudienceCombinator]]
    filters: NotRequired[Optional[AudienceFilters]]
    kind: Literal['RULE_BASED']
    sourceRef: AudienceReference


CustomAudienceDefinition6 = Union[
    CustomAudienceDefinition, CustomAudienceDefinition8, CustomAudienceDefinition9
]


class CreateCustomAudience(TypedDict):
    definition: CustomAudienceDefinition6
    name: str
    sharedWith: Sequence[str]


class DataRoomAction5(TypedDict):
    kind: Literal['media']
    createCustomAudience: CreateCustomAudience


class UpdateCustomAudience(TypedDict):
    audienceId: str
    definition: NotRequired[Optional[CustomAudienceDefinition6]]
    name: NotRequired[Optional[str]]
    sharedWith: NotRequired[Sequence[str]]


class DataRoomAction8(TypedDict):
    kind: Literal['media']
    updateCustomAudience: UpdateCustomAudience


DataRoomAction = Union[
    DataRoomAction1,
    DataRoomAction2,
    DataRoomAction3,
    DataRoomAction4,
    DataRoomAction5,
    DataRoomAction6,
    DataRoomAction7,
    DataRoomAction8,
]


class AuditLogDetails3(TypedDict):
    create_data_room: CreateDataRoom
    kind: Literal['dcrCreated']


class AuditLogDetails4(TypedDict):
    action: DataRoomAction
    kind: Literal['dcrAction']


AuditLogDetails = Union[
    AuditLogDetails1, AuditLogDetails2, AuditLogDetails3, AuditLogDetails4
]


class AuditLogLine(TypedDict):
    details: AuditLogDetails
    timestampMillis: int
    user: NotRequired[Optional[str]]

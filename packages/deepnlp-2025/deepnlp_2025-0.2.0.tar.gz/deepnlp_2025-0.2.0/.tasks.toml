[tool.poe.tasks.format]
cmd = "ruff format src/"
help = "format code with ruff"

[tool.poe.tasks.format-fix]
cmd = "ruff check --fix src/"
help = "format and fix code with ruff"

[tool.poe.tasks.lint]
cmd = "ruff check src/"
help = "check code style with ruff"

[tool.poe.tasks.lint-mypy]
cmd = "mypy --config-file pyproject.toml src/"
help = "check types with mypy"

[tool.poe.tasks.lint-mypy-reports]
cmd = "mypy --config-file pyproject.toml src/ --html-report ./tests/mypy-report"
help = "generate an HTML report of the type (mypy) checker"

[tool.poe.tasks.lint-deptry]
cmd = "deptry ."
help = "check for obsolete dependencies"

[tool.poe.tasks.check]
sequence = ["lint", "lint-mypy", "lint-deptry"]
help = "run all code quality checks (lint, type check, dependency check)"

[tool.poe.tasks.tests]
cmd = "pytest --doctest-modules"
help = "run tests with pytest"

[tool.poe.tasks.tests-cov]
cmd = "pytest --cov=src --cov-report=xml"
help = "run tests with pytest and generate a coverage report"

[tool.poe.tasks.tests-cov-fail]
shell = "pytest --cov=src --cov-report=xml --cov-fail-under=50 --junitxml=tests/pytest.xml | tee tests/pytest-coverage.txt"
help = "run tests with pytest and generate a coverage report, fail if coverage is below 50%"

[tool.poe.tasks.clean-cov]
cmd = "rm -rf .coverage* tests/htmlcov tests/pytest.xml tests/pytest-coverage.txt"
help = "remove coverage reports"

[tool.poe.tasks.clean-pycache]
cmd = "find . -type d -name __pycache__ -exec rm -rf {} +"
help = "remove __pycache__ directories"

[tool.poe.tasks.clean-build]
cmd = "rm -rf build dist *.egg-info"
help = "remove build/python artifacts"

[tool.poe.tasks.clean-docs]
cmd = "rm -rf book/_build docs/_build _site"
help = "remove documentation artifacts"

[tool.poe.tasks.clean]
sequence = ["clean-cov", "clean-pycache", "clean-build", "clean-docs"]
help = "remove build artifacts and coverage reports"

[tool.poe.tasks.run]
cmd = "deepnlp2025"
help = "run the main program"

[tool.poe.tasks.build]
shell = "uv build"
help = "build the package using hatchling"

[tool.poe.tasks.install-ghp-import]
cmd = "pipx install ghp-import"
help = "install ghp-import"

[tool.poe.tasks.install-jupyter-book-pipx]
shell = """
  pipx install jupyter-book
  pipx inject jupyter-book $(awk '{if(!/^ *#/ && NF) print}' book/requirements.txt)
"""
help = "install jupyter-book with pipx"

[tool.poe.tasks.install-jupyter-book]
shell = """
  pip install -r book/requirements.txt
"""
help = "install jupyter-book"

[tool.poe.tasks.book-build]
cmd = "bash book/_scripts/build.sh"
help = "build the book"

[tool.poe.tasks.book-build-all]
cmd = "bash book/_scripts/build.sh --all"
help = "build the book with all outputs"

[tool.poe.tasks.book-publish]
cmd = "ghp-import -n -p -f book/_build/html"
help = "publish the book"

[tool.poe.tasks.sync]
cmd = "uv sync"
help = "sync dependencies"

[tool.poe.tasks.sync-all]
cmd = "uv sync --all-extras"
help = "sync dependencies with all extras"

[tool.poe.tasks.lock]
cmd = "uv lock"
help = "lock dependencies"

[tool.poe.tasks.lock-upgrade]
cmd = "uv lock --upgrade"
help = "upgrade and lock dependencies"

# Legacy compatibility tasks
[tool.poe.tasks.install]
cmd = "uv sync"
help = "install dependencies (alias for sync)"

[tool.poe.tasks.install-dev]
cmd = "uv sync --all-extras"
help = "install dev dependencies (alias for sync-all)"

[tool.poe.tasks.update]
cmd = "uv lock --upgrade"
help = "update dependencies (alias for lock-upgrade)"

[tool.poe.tasks.codecov-validate]
cmd = "curl -X POST --data-binary @codecov.yml https://codecov.io/validate"
help = "Validate codecov.yml"

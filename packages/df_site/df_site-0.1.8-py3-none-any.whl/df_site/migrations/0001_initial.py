# Generated by Django 5.1 on 2024-08-22 17:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AlertRibbon",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        choices=[
                            ("info", "Info"),
                            ("success", "Success"),
                            ("warning", "Warning"),
                            ("danger", "Danger"),
                            ("primary", "Primary"),
                            ("secondary", "Secondary"),
                            ("dark", "Dark"),
                            ("light", "Light"),
                            ("tricolor", "Tricolor"),
                        ],
                        db_index=True,
                        default="info",
                        max_length=10,
                        verbose_name="Color",
                    ),
                ),
                ("message", models.TextField(verbose_name="Message")),
                ("url", models.URLField(blank=True, null=True, verbose_name="URL")),
                (
                    "summary",
                    models.CharField(blank=True, default="", max_length=100, verbose_name="Summary"),
                ),
                (
                    "start_date",
                    models.DateTimeField(blank=True, db_index=True, null=True, verbose_name="Start date"),
                ),
                (
                    "end_date",
                    models.DateTimeField(blank=True, db_index=True, null=True, verbose_name="End date"),
                ),
                (
                    "is_active",
                    models.BooleanField(db_index=True, default=True, verbose_name="Is active"),
                ),
                (
                    "position",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Top left"),
                            (1, "Bottom left"),
                            (2, "Top right"),
                            (3, "Bottom right"),
                            (4, "Top center"),
                            (5, "Bottom center"),
                        ],
                        db_index=True,
                        default=2,
                        verbose_name="Position",
                    ),
                ),
            ],
            options={
                "verbose_name": "Alert ribbon",
                "verbose_name_plural": "Alert ribbons",
                "ordering": ("-start_date",),
            },
        ),
        migrations.CreateModel(
            name="PreferencesUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined"),
                ),
                (
                    "color_theme",
                    models.CharField(
                        choices=[
                            ("auto", "Auto"),
                            ("light", "Light"),
                            ("dark", "Dark"),
                        ],
                        db_index=True,
                        default="auto",
                        max_length=10,
                        verbose_name="Color theme",
                    ),
                ),
                (
                    "display_online",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        verbose_name="Display online status",
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        verbose_name="Receive notifications by email",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

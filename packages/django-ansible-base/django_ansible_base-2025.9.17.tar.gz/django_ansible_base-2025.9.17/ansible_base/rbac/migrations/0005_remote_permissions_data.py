# Generated by Django 4.2.23 on 2025-06-30 12:48

import logging

from django.db import migrations


logger = logging.getLogger(__name__)


def create_types_if_needed(apps, schema_editor):
    """Before we can migrate to the new DABContentType, entries in that table must be created.

    This method runs what is ordinarily the post_migrate logic, but in the migration case here.
    Only needed in the upgrade case, otherwise better to run at true post-migrate.
    """
    permission_cls = apps.get_model('dab_rbac', 'DABPermission')
    rd_cls = apps.get_model('dab_rbac', 'RoleDefinition')
    if permission_cls.objects.exists() or rd_cls.objects.exists():
        logger.info('Running DABContentType creation script as part of 0005 migration')
        from ansible_base.rbac.management.create_types import create_DAB_contenttypes

        create_DAB_contenttypes(apps=apps)


def migrate_content_type(apps, schema_editor):
    ct_cls = apps.get_model('dab_rbac', 'DABContentType')
    ct_cls.objects.clear_cache()
    for model_name in ('dabpermission', 'objectrole', 'roledefinition', 'roleuserassignment', 'roleteamassignment'):
        cls = apps.get_model('dab_rbac', model_name)
        update_ct = 0
        for obj in cls.objects.all():
            old_ct = obj.content_type
            if old_ct:
                try:
                    # NOTE: could give duplicate normally, but that is impossible in migration path
                    obj.new_content_type = ct_cls.objects.get_by_natural_key(old_ct.app_label, old_ct.model)
                except Exception as e:
                    raise RuntimeError(
                        f"Failed to get new content type for a {model_name} pk={obj.pk}, obj={obj.__dict__}"
                    ) from e
                obj.save()
                update_ct += 1
        if update_ct:
            logger.info(f'Updated content_type reference to new model for {model_name} for {update_ct} entries')
    for model_name in ('roleevaluation', 'roleevaluationuuid'):
        cls = apps.get_model('dab_rbac', model_name)
        cls.objects.all().delete()

    # DABPermission model had api_slug added in last migration
    # if records existed before this point, it needs to be filled in
    mod_ct = 0
    permission_cls = apps.get_model('dab_rbac', 'DABPermission')
    for permission in permission_cls.objects.all():
        permission.api_slug = f'{permission.new_content_type.service}.{permission.codename}'
        permission.save()
        mod_ct += 1
    if mod_ct:
        logger.info(f'Set new field DABPermission.api_slug for {mod_ct} existing permissions')


class Migration(migrations.Migration):

    dependencies = [
        ('dab_rbac', '0004_remote_permissions_additions'),
    ]

    operations = [
        migrations.RunPython(create_types_if_needed, migrations.RunPython.noop),
        migrations.RunPython(migrate_content_type, migrations.RunPython.noop),
    ]

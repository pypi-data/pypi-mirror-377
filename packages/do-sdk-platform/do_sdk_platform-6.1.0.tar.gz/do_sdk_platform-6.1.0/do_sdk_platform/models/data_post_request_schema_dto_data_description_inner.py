# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from do_sdk_platform.models.data_post_request_schema_dto_data_description_inner_array_type import DataPostRequestSchemaDtoDataDescriptionInnerArrayType
from do_sdk_platform.models.data_post_request_schema_dto_data_description_inner_options import DataPostRequestSchemaDtoDataDescriptionInnerOptions
from do_sdk_platform.models.data_post_request_schema_dto_data_description_inner_type import DataPostRequestSchemaDtoDataDescriptionInnerType
from do_sdk_platform.models.data_post_request_schema_dto_data_description_inner_validate import DataPostRequestSchemaDtoDataDescriptionInnerValidate
from typing import Optional, Set
from typing_extensions import Self

class DataPostRequestSchemaDtoDataDescriptionInner(BaseModel):
    """
    DataPostRequestSchemaDtoDataDescriptionInner
    """ # noqa: E501
    type: DataPostRequestSchemaDtoDataDescriptionInnerType
    var_field: StrictStr = Field(alias="field")
    primary: Optional[StrictBool] = None
    label: StrictStr
    properties: Optional[List[Any]] = None
    array_type: Optional[DataPostRequestSchemaDtoDataDescriptionInnerArrayType] = Field(default=None, alias="arrayType")
    convert: Optional[StrictBool] = None
    format: Optional[StrictStr] = None
    options: Optional[DataPostRequestSchemaDtoDataDescriptionInnerOptions] = None
    use_default: Optional[StrictBool] = Field(default=None, alias="useDefault")
    required: Optional[StrictBool] = None
    validate: Optional[DataPostRequestSchemaDtoDataDescriptionInnerValidate] = None
    __properties: ClassVar[List[str]] = ["type", "field", "primary", "label", "properties", "arrayType", "convert", "format", "options", "useDefault", "required", "validate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataPostRequestSchemaDtoDataDescriptionInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of array_type
        if self.array_type:
            _dict['arrayType'] = self.array_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validate
        if self.validate:
            _dict['validate'] = self.validate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataPostRequestSchemaDtoDataDescriptionInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": DataPostRequestSchemaDtoDataDescriptionInnerType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "field": obj.get("field"),
            "primary": obj.get("primary"),
            "label": obj.get("label"),
            "properties": obj.get("properties"),
            "arrayType": DataPostRequestSchemaDtoDataDescriptionInnerArrayType.from_dict(obj["arrayType"]) if obj.get("arrayType") is not None else None,
            "convert": obj.get("convert"),
            "format": obj.get("format"),
            "options": DataPostRequestSchemaDtoDataDescriptionInnerOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "useDefault": obj.get("useDefault"),
            "required": obj.get("required"),
            "validate": DataPostRequestSchemaDtoDataDescriptionInnerValidate.from_dict(obj["validate"]) if obj.get("validate") is not None else None
        })
        return _obj



[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "edwh-odoo-plugin"
dynamic = ["version"]
description = 'Odoo (search) support plugin for EDWH tooling.'
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = ["edwh"]
authors = [
    { name = "Remco Boerma", email = "remco.b@educationwarehouse.nl" },
    { name = "Robin van der Noord", email = "robin.vdn@educationwarehouse.nl" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "edwh",
    "openerp-proxy",
    "python-dotenv",
    "markdown2",
]

[project.optional-dependencies]
dev = [
    "hatch",
    "python-semantic-release<8",
    "black",
]

[project.urls]
Documentation = "https://github.com/educationwarehouse/odoo#readme"
Issues = "https://github.com/educationwarehouse/odoo/issues"
Source = "https://github.com/educationwarehouse/odoo"

# https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/#using-package-metadata
[project.entry-points."edwh.tasks"]
# namespace: (edwh demo.command)
odoo = "edwh_odoo_plugin.odoo_plugin"

[tool.hatch.version]
path = "src/edwh_odoo_plugin/__about__.py"

[tool.semantic_release]
branch = "main"
version_variable = "src/edwh_odoo_plugin/__about__.py:__version__"
change_log = "CHANGELOG.md"
upload_to_repository = false
upload_to_release = false
build_command = "hatch build"

parser_angular_minor_types = "feat,minor"
parser_angular_patch_types = "fix,perf,refactor,build,chore,patch"


[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=6.5",
    "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black>=23.1.0",
    "mypy>=1.0.0",
    "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/edwh_odoo_plugin tests}"
style = [
    "ruff {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.black]
target-version = ["py311"]
line-length = 120
skip-string-normalization = false

[tool.ruff]
target-version = "py311"
line-length = 120
[tool.ruff.lint]
select = [
    "F", # pyflake error
    "E", # pycodestyle error
    "W", # pycodestyle warning
    "Q", # quotes
    "A", # builtins
    # "C4", # comprehensions - NO: doesn't allow dict()
    # "RET", # return - NO: annoying
    "SIM", # simplify
    "ARG", # unused arguments
    # "COM", # comma's - NO: annoying
    # "PTH", # use pathlib - NO: annoying
    "RUF", # ruff rules
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    "RUF013", # implicit Optional
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["edwh_odoo_plugin"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["edwh_odoo_plugin", "tests"]
branch = true
parallel = true
omit = [
    "src/edwh_odoo_plugin/__about__.py",
]

[tool.coverage.paths]
edwh_odoo_plugin = ["src/edwh_odoo_plugin", "*/edwh-odoo-plugin/src/edwh_odoo_plugin"]
tests = ["tests", "*/edwh-odoo-plugin/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

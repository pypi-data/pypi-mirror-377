PROJECT_NAME =

ENV = dev
# dev (en developpement -> active le hot reload)
# prod (en production)

DATABASE = sqlite
# modifiable
# les autres variable DATABASE sont optionels pour sqlite


DATABASE_NAME =
# database.db sera créé et utilisé dans le cas de sqlite

DATABASE_USERNAME =


DATABASE_PASSWORD =


DATABASE_CONNECTOR =
# ex : mysql ou mysql+mysqlconnector , à installer comme dépendance mysqlclient / mysql-connector-python

IS_ASYNC_ENV = False
# True/False pour utiliser l'asynchrone de sqlalchemy ou non

DATABASE_ASYNC_CONNECTOR =
# renseigner le connecteur asynchrone
# ex : aiosqlite (dépendance déjà installée)
# ex : asyncpg (pour postgresql) ou aiomysql(pour mysql)


DATABASE_SERVER =
# ex : localhost:3306

ALGORITHM =
# Optionel , il sera choisi au hasard si non renseigné parmis HS256 , HS384 et HS512


SECRET_KEY =
# Optionel , sera générer au hasard
# ALGORITHM doit être renseigné si SECRET_KEY est renseigné

## La commande generate_secret_key peut être utilisée pour générer une clé secrète

REFRESH_TOKEN_EXPIRATION =
# Optionel  par default 24 heures , valeur en milliseconds


ACCESS_TOKEN_EXPIRATION =
# Optionel par default 1 heures , valeur en milliseconds

TEMP_TOKEN_EXPIRATION =
# Optionel par default 2 minutes , valeur en milliseconds

USER_MAX_ATTEMPT_LOGIN =
# Optionel , le nombre de connexion maximale avant verouillage du compte utilisateur

SEEDERS_LOGS=${PROJECT_NAME}/settings/seeders/log/seeders.log
# Le chemin du fichier de log pour les seeders

ISSUER =
# Optionel , l'émetteur du token JWT (c'est à dire l'application qui a généré le token)

AUDIENCE =
# Optionel , l'audience du token JWT (c'est à dire le destinataire du token)

Metadata-Version: 2.3
Name: eta-mistral
Version: 0.0.4
Summary: Pinch based optimization for placement of decentral energy converters.
License: BSD-2-Clause License
Keywords: optimization,graph based modeling,networks
Author: Technical University of Darmstadt, Institute for Production Management, Technology and Machine Tools (PTW)
Author-email: m.frank@ptw.tu-darmstadt.de
Requires-Python: >=3.11,<3.14
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Manufacturing
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: BSD License
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Dist: backports-datetime-fromisoformat (==2.0.0)
Requires-Dist: bokeh (>=3.7.3,<4.0.0)
Requires-Dist: colorama (>=0.4.6,<0.5.0)
Requires-Dist: dash (>=3.0.4,<4.0.0)
Requires-Dist: dash-bootstrap-components (>=2.0.3,<3.0.0)
Requires-Dist: fmpy (>=0.3.23,<0.4.0)
Requires-Dist: igraph (>=0.11.8,<0.12.0)
Requires-Dist: matplotlib (>=3.10.3,<4.0.0)
Requires-Dist: networkx (>=3.5,<4.0)
Requires-Dist: numpy (>=2.2.6,<3.0.0)
Requires-Dist: openpyxl (>=3.1.5,<4.0.0)
Requires-Dist: pandas (>=2.2.3,<3.0.0)
Requires-Dist: pyomo (>=6.9.2,<7.0.0)
Requires-Dist: pyqtgraph (>=0.13.7,<0.14.0)
Requires-Dist: pyside6 (>=6.9.1,<7.0.0)
Requires-Dist: pywin32 (>=310,<311)
Requires-Dist: stable_baselines3 (>=2.1,<3.0)
Project-URL: Homepage, https://www.ptw.tu-darmstadt.de
Description-Content-Type: text/markdown

# ETA MISTRAL

This repository represents the software implementation of the MISTRAL method. It provides a CLI to configure the optimization in the backend and a web interface for plotting. Here also the graph representation of th modelled system is visible.

## Usage

Following the cli this approach is applied: ![flow diagram](./docs/images/flow_chart_mistral_method.png)

## Development

For the development an overview of the modules is provided: ![module overview](./docs/images/modul_overview_mistral.png)


### Installation
To install the project along with its development dependencies, execute the following command:

    poetry install

Followed by

    poetry run pre-commit install

After this you are ready to perform the first commits to the repository.

Pre-commit ensures that the repository accepts your commit, automatically fixes some code styling problems and provides some hints for better coding.

### Adding dependencies

Adding dependencies to the project can be done via

    poetry add <package-name>@latest

## Important Note for the CLI Application

Do not forget to close (ctrl + C) the dash server when exiting the application.


{{- if .Values.logging.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fedzk.fullname" . }}-logging-config
  labels:
    {{- include "fedzk.labels" . | nindent 4 }}
    app.kubernetes.io/component: logging
data:
  # Logging configuration
  logging.yml: |
    version: 1
    disable_existing_loggers: false

    formatters:
      json:
        class: fedzk.logging.structured_logger.FEDzkJSONFormatter
        service_name: "{{ include "fedzk.fullname" . }}"

      security:
        class: fedzk.logging.security_compliance.FEDzkSecurityFormatter
        service_name: "{{ include "fedzk.fullname" . }}"

    handlers:
      console:
        class: logging.StreamHandler
        level: {{ .Values.logging.level | upper }}
        formatter: json
        stream: ext://sys.stdout

      security:
        class: logging.StreamHandler
        level: WARNING
        formatter: security
        stream: ext://sys.stderr

      {{- if .Values.logging.file.enabled }}
      file:
        class: logging.handlers.RotatingFileHandler
        level: {{ .Values.logging.level | upper }}
        formatter: json
        filename: {{ .Values.logging.file.path | default "/var/log/fedzk/app.log" }}
        maxBytes: {{ .Values.logging.file.maxSize | default 10485760 }}
        backupCount: {{ .Values.logging.file.backupCount | default 5 }}
      {{- end }}

    loggers:
      fedzk:
        level: {{ .Values.logging.level | upper }}
        handlers: [console, security{{- if .Values.logging.file.enabled }}, file{{- end }}]
        propagate: no

      fedzk.security:
        level: WARNING
        handlers: [security{{- if .Values.logging.file.enabled }}, file{{- end }}]
        propagate: no

      fedzk.audit:
        level: INFO
        handlers: [console{{- if .Values.logging.file.enabled }}, file{{- end }}]
        propagate: no

    root:
      level: {{ .Values.logging.level | upper }}
      handlers: [console, security{{- if .Values.logging.file.enabled }}, file{{- end }}]

  # Log aggregation configuration
  logstash.yml: |
    input {
      kubernetes {
        host => "https://kubernetes.default.svc"
        ca_file => "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        token => "#{File.read('/var/run/secrets/kubernetes.io/serviceaccount/token')}"
        namespace_name => "{{ .Release.Namespace }}"

        # Filter for FEDzk pods
        label_selector => "app.kubernetes.io/name=fedzk"

        # Parse JSON logs
        codec => json
      }
    }

    filter {
      # Add Kubernetes metadata
      kubernetes {
        default_hostname => "unknown"
        default_namespace => "{{ .Release.Namespace }}"
      }

      # Parse timestamp
      date {
        match => ["@timestamp", "ISO8601"]
        target => "@timestamp"
      }

      # Add service identification
      if [kubernetes][labels][app_kubernetes_io/name] == "fedzk" {
        mutate {
          add_field => {
            "service" => "fedzk"
            "component" => "%{[kubernetes][labels][app_kubernetes_io/component]}"
          }
        }
      }

      # Security event tagging
      if [security_event] {
        mutate {
          add_tag => ["security"]
          add_field => {
            "security_severity" => "%{[severity]}"
            "compliance_required" => "%{[compliance_required]}"
          }
        }
      }

      # Audit event tagging
      if [audit_event] {
        mutate {
          add_tag => ["audit"]
          add_field => {
            "audit_action" => "%{[action]}"
            "audit_resource" => "%{[resource]}"
          }
        }
      }
    }

    output {
      {{- if .Values.logging.elasticsearch.enabled }}
      elasticsearch {
        hosts => ["{{ .Values.logging.elasticsearch.host }}:{{ .Values.logging.elasticsearch.port }}"]
        index => "fedzk-logs-%{+YYYY.MM.dd}"
        user => "{{ .Values.logging.elasticsearch.username }}"
        password => "{{ .Values.logging.elasticsearch.password }}"
        ssl => {{ .Values.logging.elasticsearch.ssl | default true }}
        cacert => "/etc/ssl/certs/ca-certificates.crt"
      }
      {{- else }}
      stdout {
        codec => json
      }
      {{- end }}
    }

  # Fluent Bit configuration
  fluent-bit.yml: |
    [SERVICE]
        Flush         5
        Log_Level     info
        Daemon        off

    [INPUT]
        Name              tail
        Path              /var/log/containers/*fedzk*.log
        Parser            docker
        Tag               fedzk.*
        Refresh_Interval  5

    [FILTER]
        Name                kubernetes
        Match               fedzk.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token

    [FILTER]
        Name                parser
        Match               fedzk.*
        Key_Name            log
        Parser              json
        Reserve_Data        On

    [OUTPUT]
        Name  stdout
        Match *
        Format json_lines

  # Filebeat configuration
  filebeat.yml: |
    filebeat.inputs:
    - type: container
      paths:
        - "/var/log/containers/*fedzk*.log"
      processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}
            matchers:
            - logs_path:
                logs_path: "/var/log/containers/"

    processors:
      - decode_json_fields:
          fields: ["message"]
          target: "json"
          overwrite_keys: true
      - drop_fields:
          fields: ["agent", "ecs", "host", "input", "log"]

    output:
      {{- if .Values.logging.elasticsearch.enabled }}
      elasticsearch:
        hosts: ["{{ .Values.logging.elasticsearch.host }}:{{ .Values.logging.elasticsearch.port }}"]
        index: "fedzk-logs-%{+yyyy.MM.dd}"
        username: "{{ .Values.logging.elasticsearch.username }}"
        password: "{{ .Values.logging.elasticsearch.password }}"
        ssl:
          enabled: {{ .Values.logging.elasticsearch.ssl | default true }}
          certificate_authorities: ["/etc/ssl/certs/ca-certificates.crt"]
      {{- else }}
      console:
        pretty: true
      {{- end }}
---
{{- end }}

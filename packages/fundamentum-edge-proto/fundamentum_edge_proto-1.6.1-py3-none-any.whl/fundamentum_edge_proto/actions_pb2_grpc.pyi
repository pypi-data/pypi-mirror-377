"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
from . import actions_pb2
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing
_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):
    ...

class ActionsStub:
    """Fundamentum Edge's actions service."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None:
        ...
    Subscribe: grpc.UnaryStreamMultiCallable[google.protobuf.empty_pb2.Empty, actions_pb2.ActionRequest]
    'Subscribe to actions stream.'
    UpdateStatus: grpc.UnaryUnaryMultiCallable[actions_pb2.ActionResponse, google.protobuf.empty_pb2.Empty]
    'Update the status of an action.'

class ActionsAsyncStub:
    """Fundamentum Edge's actions service."""
    Subscribe: grpc.aio.UnaryStreamMultiCallable[google.protobuf.empty_pb2.Empty, actions_pb2.ActionRequest]
    'Subscribe to actions stream.'
    UpdateStatus: grpc.aio.UnaryUnaryMultiCallable[actions_pb2.ActionResponse, google.protobuf.empty_pb2.Empty]
    'Update the status of an action.'

class ActionsServicer(metaclass=abc.ABCMeta):
    """Fundamentum Edge's actions service."""

    @abc.abstractmethod
    def Subscribe(self, request: google.protobuf.empty_pb2.Empty, context: _ServicerContext) -> typing.Union[collections.abc.Iterator[actions_pb2.ActionRequest], collections.abc.AsyncIterator[actions_pb2.ActionRequest]]:
        """Subscribe to actions stream."""

    @abc.abstractmethod
    def UpdateStatus(self, request: actions_pb2.ActionResponse, context: _ServicerContext) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Update the status of an action."""

def add_ActionsServicer_to_server(servicer: ActionsServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None:
    ...
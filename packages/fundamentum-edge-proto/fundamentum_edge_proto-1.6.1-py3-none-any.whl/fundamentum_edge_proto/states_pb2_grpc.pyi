"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
from . import states_pb2
import typing
_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):
    ...

class StatesEventStub:
    """Fundamentum Edge's states event service."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None:
        ...
    PublishJson: grpc.UnaryUnaryMultiCallable[states_pb2.StateJsonData, google.protobuf.empty_pb2.Empty]
    "Publishes device-specific JSON data to the `state` topic.\n    Can be used to send state of a device's sub-devices.\n    "

class StatesEventAsyncStub:
    """Fundamentum Edge's states event service."""
    PublishJson: grpc.aio.UnaryUnaryMultiCallable[states_pb2.StateJsonData, google.protobuf.empty_pb2.Empty]
    "Publishes device-specific JSON data to the `state` topic.\n    Can be used to send state of a device's sub-devices.\n    "

class StatesEventServicer(metaclass=abc.ABCMeta):
    """Fundamentum Edge's states event service."""

    @abc.abstractmethod
    def PublishJson(self, request: states_pb2.StateJsonData, context: _ServicerContext) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Publishes device-specific JSON data to the `state` topic.
        Can be used to send state of a device's sub-devices.
        """

def add_StatesEventServicer_to_server(servicer: StatesEventServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None:
    ...
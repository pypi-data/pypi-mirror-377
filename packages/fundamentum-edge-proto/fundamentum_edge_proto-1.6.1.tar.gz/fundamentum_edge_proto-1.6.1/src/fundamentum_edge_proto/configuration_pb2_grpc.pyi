"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
from . import configuration_pb2
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing
_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):
    ...

class ConfigurationStub:
    """Fundamentum Edge's configuration service."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None:
        ...
    Get: grpc.UnaryUnaryMultiCallable[google.protobuf.empty_pb2.Empty, configuration_pb2.ConfigData]
    "Get the device's current configuration."
    UpdateStream: grpc.UnaryStreamMultiCallable[google.protobuf.empty_pb2.Empty, configuration_pb2.UpdateData]
    'Subscribe to configuration updates.'

class ConfigurationAsyncStub:
    """Fundamentum Edge's configuration service."""
    Get: grpc.aio.UnaryUnaryMultiCallable[google.protobuf.empty_pb2.Empty, configuration_pb2.ConfigData]
    "Get the device's current configuration."
    UpdateStream: grpc.aio.UnaryStreamMultiCallable[google.protobuf.empty_pb2.Empty, configuration_pb2.UpdateData]
    'Subscribe to configuration updates.'

class ConfigurationServicer(metaclass=abc.ABCMeta):
    """Fundamentum Edge's configuration service."""

    @abc.abstractmethod
    def Get(self, request: google.protobuf.empty_pb2.Empty, context: _ServicerContext) -> typing.Union[configuration_pb2.ConfigData, collections.abc.Awaitable[configuration_pb2.ConfigData]]:
        """Get the device's current configuration."""

    @abc.abstractmethod
    def UpdateStream(self, request: google.protobuf.empty_pb2.Empty, context: _ServicerContext) -> typing.Union[collections.abc.Iterator[configuration_pb2.UpdateData], collections.abc.AsyncIterator[configuration_pb2.UpdateData]]:
        """Subscribe to configuration updates."""

def add_ConfigurationServicer_to_server(servicer: ConfigurationServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None:
    ...
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import grpc
import grpc.aio
from . import provisioning_pb2
import typing
_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):
    ...

class ProvisioningStub:
    """Fundamentum Edge's provisioning service."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None:
        ...
    Provision: grpc.UnaryUnaryMultiCallable[provisioning_pb2.ProvisionRequest, provisioning_pb2.ProvisionResponse]
    'Provision this device against cloud-side.\n\n    On successful provisioning, amongst other things, the edge daemon will be\n    granted MQTT connectivity to the cloud-side broker thus enabling more\n    features.\n    '
    RegisterShelfDevice: grpc.UnaryUnaryMultiCallable[provisioning_pb2.RegisterShelfRequest, provisioning_pb2.RegisterShelfResponse]
    'Register this device as a shelf device against cloud-side.\n\n    Once registered as a shelf device, Edge will periodically check with Fundamentum\n    if the device has been assigned to a registry. Until then, the device is not fully\n    provisionned to Fundamentum and most functionnalities will not be available.\n    '

class ProvisioningAsyncStub:
    """Fundamentum Edge's provisioning service."""
    Provision: grpc.aio.UnaryUnaryMultiCallable[provisioning_pb2.ProvisionRequest, provisioning_pb2.ProvisionResponse]
    'Provision this device against cloud-side.\n\n    On successful provisioning, amongst other things, the edge daemon will be\n    granted MQTT connectivity to the cloud-side broker thus enabling more\n    features.\n    '
    RegisterShelfDevice: grpc.aio.UnaryUnaryMultiCallable[provisioning_pb2.RegisterShelfRequest, provisioning_pb2.RegisterShelfResponse]
    'Register this device as a shelf device against cloud-side.\n\n    Once registered as a shelf device, Edge will periodically check with Fundamentum\n    if the device has been assigned to a registry. Until then, the device is not fully\n    provisionned to Fundamentum and most functionnalities will not be available.\n    '

class ProvisioningServicer(metaclass=abc.ABCMeta):
    """Fundamentum Edge's provisioning service."""

    @abc.abstractmethod
    def Provision(self, request: provisioning_pb2.ProvisionRequest, context: _ServicerContext) -> typing.Union[provisioning_pb2.ProvisionResponse, collections.abc.Awaitable[provisioning_pb2.ProvisionResponse]]:
        """Provision this device against cloud-side.

        On successful provisioning, amongst other things, the edge daemon will be
        granted MQTT connectivity to the cloud-side broker thus enabling more
        features.
        """

    @abc.abstractmethod
    def RegisterShelfDevice(self, request: provisioning_pb2.RegisterShelfRequest, context: _ServicerContext) -> typing.Union[provisioning_pb2.RegisterShelfResponse, collections.abc.Awaitable[provisioning_pb2.RegisterShelfResponse]]:
        """Register this device as a shelf device against cloud-side.

        Once registered as a shelf device, Edge will periodically check with Fundamentum
        if the device has been assigned to a registry. Until then, the device is not fully
        provisionned to Fundamentum and most functionnalities will not be available.
        """

def add_ProvisioningServicer_to_server(servicer: ProvisioningServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None:
    ...
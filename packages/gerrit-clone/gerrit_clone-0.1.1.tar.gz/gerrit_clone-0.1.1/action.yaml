---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 Matthew Watkins <mwatkins@linuxfoundation.org>

name: "ðŸ”„ Gerrit Clone Action"
description: >
  Bulk clone repositories from Gerrit servers with multi-threading and
  retry logic
author: "Matthew Watkins <mwatkins@linuxfoundation.org>"

inputs:
  host:
    description: "Gerrit server hostname"
    required: true
  port:
    description: "Gerrit SSH port"
    required: false
    default: "29418"
  ssh-user:
    description: "SSH username for clone operations"
    required: false
  ssh-private-key:
    description: "SSH private key content for authentication"
    required: false
  path-prefix:
    description: "Base directory for clone hierarchy"
    required: false
    default: "."
  skip-archived:
    description: "Skip archived/read-only repositories"
    required: false
    default: "true"
  threads:
    description: "Number of concurrent clone threads"
    required: false
  depth:
    description: "Create shallow clone with given depth"
    required: false
  branch:
    description: "Clone specific branch instead of default"
    required: false
  strict-host:
    description: "SSH strict host key checking"
    required: false
    default: "true"
  clone-timeout:
    description: "Timeout per clone operation in seconds"
    required: false
    default: "600"
  retry-attempts:
    description: "Maximum retry attempts per repository"
    required: false
    default: "3"
  retry-base-delay:
    description: "Base delay for retry backoff in seconds"
    required: false
    default: "2.0"

outputs:
  manifest-path:
    description: "Path to the generated clone manifest file"
    value: ${{ steps.clone.outputs.manifest-path }}
  success-count:
    description: "Number of successfully cloned repositories"
    value: ${{ steps.clone.outputs.success-count }}
  failure-count:
    description: "Number of failed clone attempts"
    value: ${{ steps.clone.outputs.failure-count }}
  total-count:
    description: "Total number of repositories processed"
    value: ${{ steps.clone.outputs.total-count }}

runs:
  using: "composite"
  steps:
    - name: "Validate inputs"
      shell: bash
      run: |
        if [ -z "${{ inputs.host }}" ]; then
          echo "::error::host input is required"
          exit 1
        fi
        echo "Gerrit host: ${{ inputs.host }}"

    - name: "Setup SSH authentication"
      shell: bash
      run: |
        if [ -n "${{ inputs.ssh-private-key }}" ]; then
          echo "Setting up SSH agent with private key"

          # Start SSH agent and add key (never touches disk)
          echo "Starting SSH agent..."

          # Clean up any existing socket first
          if [ -S "$SSH_AUTH_SOCK" ]; then
            echo "Cleaning up existing SSH agent socket..."
            rm -f "$SSH_AUTH_SOCK"
          fi

          ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null || {
            echo "Failed to start SSH agent"
            exit 1
          }

          echo "Adding private key to SSH agent..."
          echo "${{ inputs.ssh-private-key }}" | ssh-add - || {
            echo "Failed to add private key to SSH agent"
            exit 1
          }

          echo "SSH agent setup complete, keys loaded:"
          ssh-add -l

          # Setup known_hosts to avoid prompts
          echo "Setting up known_hosts for ${{ inputs.host }}..."
          mkdir -p ~/.ssh

          # Try to scan SSH host keys with proper port and timeout
          PORT="${{ inputs.port }}"
          if [ -z "$PORT" ]; then
            PORT="29418"
          fi

          echo "Scanning SSH keys for ${{ inputs.host }}:$PORT..."
          if timeout 30 ssh-keyscan -H -p "$PORT" \
            "${{ inputs.host }}" >> ~/.ssh/known_hosts 2>&1; then
            echo "Successfully added ${{ inputs.host }} to known_hosts"
          else
            echo "Warning: Could not scan SSH keys for ${{ inputs.host }}:$PORT"
            echo "Continuing with strict host checking disabled"
          fi
        else
          echo "No SSH private key provided, using default SSH setup"
        fi
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent_${{ github.run_id }}.sock

    - name: "Install and setup gerrit-clone CLI"
      shell: bash
      run: |
        # Check if gerrit-clone is already installed (from workflow setup)
        if command -v gerrit-clone &> /dev/null; then
          echo "gerrit-clone CLI is already available"
          gerrit-clone --version
        else
          echo "Installing gerrit-clone CLI..."
          # Install uv if not available
          if ! command -v uv &> /dev/null; then
            echo "Installing uv..."
            curl -LsSf https://astral.sh/uv/install.sh | sh
            export PATH="$HOME/.cargo/bin:$PATH"
          fi

          # Try to install from local source (for testing)
          if [ -f "pyproject.toml" ]; then
            echo "Installing from local source..."
            uv pip install --system -e .
          else
            # Install from PyPI (for production)
            echo "Installing from PyPI..."
            uv pip install --system gerrit-clone
          fi

          # Verify installation
          gerrit-clone --version
        fi

    - name: "Clone repositories"
      id: clone
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent_${{ github.run_id }}.sock
      run: |

        # Debug SSH agent status
        echo "Checking SSH agent status..."
        if [ -n "$SSH_AUTH_SOCK" ]; then
          echo "SSH_AUTH_SOCK is set to: $SSH_AUTH_SOCK"
          if ssh-add -l >/dev/null 2>&1; then
            echo "SSH keys are available:"
            ssh-add -l
          else
            echo "Warning: SSH agent running but no keys loaded"
          fi
        else
          echo "SSH_AUTH_SOCK not set - using default SSH behavior"
        fi

        # Test SSH connection if using SSH authentication
        if [ -n "${{ inputs.ssh-user }}" ] && \
          [ -n "${{ inputs.ssh-private-key }}" ]; then
          echo "Testing SSH connection to ${{ inputs.host }}..."
          PORT="${{ inputs.port }}"
          if [ -z "$PORT" ]; then
            PORT="29418"
          fi

          if timeout 10 ssh -o BatchMode=yes -o ConnectTimeout=5 \
              -p "$PORT" "${{ inputs.ssh-user }}@${{ inputs.host }}" \
              gerrit version >/dev/null 2>&1; then
            echo "SSH connection test successful"
          else
            echo "Warning: SSH connection test failed, but continuing..."
          fi
        fi

        # Build gerrit-clone command (use pre-installed CLI)
        cmd="gerrit-clone clone"
        cmd="$cmd --host '${{ inputs.host }}'"
        cmd="$cmd --port '${{ inputs.port }}'"

        if [ -n "${{ inputs.ssh-user }}" ]; then
          cmd="$cmd --ssh-user '${{ inputs.ssh-user }}'"
        fi

        # SSH private key is handled by SSH agent setup step above

        cmd="$cmd --path-prefix '${{ inputs.path-prefix }}'"

        if [ "${{ inputs.skip-archived }}" = "true" ]; then
          cmd="$cmd --skip-archived"
        else
          cmd="$cmd --include-archived"
        fi

        if [ -n "${{ inputs.threads }}" ]; then
          cmd="$cmd --threads '${{ inputs.threads }}'"
        fi

        if [ -n "${{ inputs.depth }}" ]; then
          cmd="$cmd --depth '${{ inputs.depth }}'"
        fi

        if [ -n "${{ inputs.branch }}" ]; then
          cmd="$cmd --branch '${{ inputs.branch }}'"
        fi

        if [ "${{ inputs.strict-host }}" = "true" ]; then
          cmd="$cmd --strict-host"
        else
          cmd="$cmd --accept-unknown-host"
        fi

        cmd="$cmd --clone-timeout '${{ inputs.clone-timeout }}'"
        cmd="$cmd --retry-attempts '${{ inputs.retry-attempts }}'"
        cmd="$cmd --retry-base-delay '${{ inputs.retry-base-delay }}'"

        echo "Executing: $cmd"

        # Execute the command
        eval "$cmd"
        exit_code=$?

        # Set outputs from manifest file
        manifest_path="${{ inputs.path-prefix }}/clone-manifest.json"
        if [ -f "$manifest_path" ]; then
          echo "manifest-path=$manifest_path" >> "$GITHUB_OUTPUT"

          # Extract counts from manifest JSON
          success_count=$(jq -r '.succeeded // 0' "$manifest_path")
          failure_count=$(jq -r '.failed // 0' "$manifest_path")
          total_count=$(jq -r '.total // 0' "$manifest_path")

          echo "success-count=$success_count" >> "$GITHUB_OUTPUT"
          echo "failure-count=$failure_count" >> "$GITHUB_OUTPUT"
          echo "total-count=$total_count" >> "$GITHUB_OUTPUT"

          # Add to job summary
          echo "## Gerrit Clone Results" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Total repositories:** $total_count" >> \
            "$GITHUB_STEP_SUMMARY"
          echo "- **Successfully cloned:** $success_count" >> \
            "$GITHUB_STEP_SUMMARY"
          echo "- **Failed:** $failure_count" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Manifest:** \`$manifest_path\`" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "manifest-path=" >> "$GITHUB_OUTPUT"
          echo "success-count=0" >> "$GITHUB_OUTPUT"
          echo "failure-count=0" >> "$GITHUB_OUTPUT"
          echo "total-count=0" >> "$GITHUB_OUTPUT"
        fi

        exit $exit_code

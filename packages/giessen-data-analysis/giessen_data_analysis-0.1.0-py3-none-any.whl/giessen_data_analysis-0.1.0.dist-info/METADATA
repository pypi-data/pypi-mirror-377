Metadata-Version: 2.4
Name: giessen-data-analysis
Version: 0.1.0
Summary: Code for basic analysis of the Giessen RV pulmonary pressure trace data
Author-email: Maximilian Balmus <mbalmus@turing.ac.uk>
License: Apache-2.0
Project-URL: Homepage, https://github.com/MaxBalmus/GiessenDataAnalysis
Project-URL: Bug Reports, https://github.com/MaxBalmus/GiessenDataAnalysis/issues
Project-URL: Source, https://github.com/MaxBalmus/GiessenDataAnalysis
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: scipy
Requires-Dist: pandas
Requires-Dist: matplotlib
Requires-Dist: ipykernel
Requires-Dist: scikit-learn
Dynamic: license-file

# GiessenDataAnalysis
Code for basic analysis of the Giessen RV pulmonary pressure trace data.


## Installation
Clone the repository:
```shell
git clone git@github.com:MaxBalmus/GiessenDataAnalysis.git
```
If no environment exists, create a new one:
```shell
python -m venv myenv
```
Then install the packege with pip:

```shell
pip install .
```

## Getting started
Instatiate the analysis class using the target csv file path as input:
```python 
ag = analyseGiessen('data/file.csv')
```
Interogate the percentage of data that is covered by an error code:
```python
ag.report_error_percentage()
```
Compute the 1st and 2nd derivatives of the pressure pulse:
```python
ag.compute_derivatives()
```
Results can be found in ```ag.df``` DataFrame.

We can compute pulse values of interest (e.g. systolic, diastolic pressures):
```python
ag.compute_point_of_interest()
```
with the results available in ```ag.points_df``` DataFrame.

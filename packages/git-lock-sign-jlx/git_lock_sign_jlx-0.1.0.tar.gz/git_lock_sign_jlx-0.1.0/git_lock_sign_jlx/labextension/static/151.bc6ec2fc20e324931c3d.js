"use strict";(self.webpackChunkgit_lock_sign_jlx=self.webpackChunkgit_lock_sign_jlx||[]).push([[151],{151:(e,i,s)=>{s.r(i),s.d(i,{SessionManager:()=>n});var t=s(256);class n{constructor(e,i){this._isInitializing=!1,this._overlayWidget=null,this._serviceManager=e,this._fileBrowser=i}_showOverlay(e){if(this._overlayWidget)return;if(this._overlayWidget=new t.Widget,this._overlayWidget.addClass("session-sync-overlay-widget"),this._overlayWidget.id="session-sync-overlay",!document.querySelector("#session-sync-animations")){const e=document.createElement("style");e.id="session-sync-animations",e.textContent="\n        @keyframes sessionSyncRotate {\n          100% { transform: rotate(360deg); }\n        }\n        @keyframes sessionSyncDash {\n          0% { stroke-dasharray: 1, 150; stroke-dashoffset: 0; }\n          50% { stroke-dasharray: 90, 150; stroke-dashoffset: -35; }\n          100% { stroke-dasharray: 90, 150; stroke-dashoffset: -124; }\n        }\n        @keyframes sessionSyncProgress {\n          0% { transform: translateX(-100%); }\n          50% { transform: translateX(0%); }\n          100% { transform: translateX(100%); }\n        }\n      ",document.head.appendChild(e)}const i=`\n      <div class="session-sync-overlay" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 10000; display: flex; align-items: center; justify-content: center; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;">\n        <div class="session-sync-backdrop" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.6); backdrop-filter: blur(3px);"></div>\n        <div class="session-sync-modal" style="position: relative; background: white; border: 1px solid #ddd; border-radius: 8px; padding: 32px; min-width: 400px; max-width: 500px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);">\n          <div class="session-sync-content" style="text-align: center;">\n            <div class="session-sync-spinner" style="margin-bottom: 24px; display: flex; justify-content: center;">\n              <svg class="session-sync-spinner-svg" width="40" height="40" viewBox="0 0 50 50" style="animation: sessionSyncRotate 1.2s linear infinite;">\n                <circle\n                  class="session-sync-spinner-path"\n                  cx="25" cy="25" r="20"\n                  fill="none" stroke="#2196f3" stroke-width="3"\n                  stroke-linecap="round" stroke-dasharray="31.416" stroke-dashoffset="31.416"\n                  style="animation: sessionSyncDash 1.5s ease-in-out infinite;"\n                />\n              </svg>\n            </div>\n            <div class="session-sync-message">\n              <h3 style="margin: 0 0 8px 0; font-size: 18px; font-weight: 600; color: #333;">Initializing Workspace</h3>\n              <p class="session-sync-status" style="margin: 0 0 16px 0; font-size: 14px; color: #666; line-height: 1.4;">${e||"Syncing workspace with remote repository..."}</p>\n              <div class="session-sync-details" style="display: flex; flex-direction: column; gap: 6px; margin-bottom: 20px;">\n                <span style="font-size: 12px; color: #888; text-align: left; padding-left: 8px;">• Setting up git repository</span>\n                <span style="font-size: 12px; color: #888; text-align: left; padding-left: 8px;">• Connecting to remote server</span>\n                <span style="font-size: 12px; color: #888; text-align: left; padding-left: 8px;">• Syncing files from remote</span>\n              </div>\n            </div>\n            <div class="session-sync-progress" style="margin-top: 20px;">\n              <div class="session-sync-progress-bar" style="width: 100%; height: 4px; background: #eee; border-radius: 2px; overflow: hidden;">\n                <div class="session-sync-progress-fill" style="height: 100%; background: linear-gradient(90deg, #2196f3 0%, #1976d2 100%); border-radius: 2px; animation: sessionSyncProgress 2s ease-in-out infinite;"></div>\n              </div>\n            </div>\n            \n\n          </div>\n        </div>\n      </div>\n    `;this._overlayWidget.node.innerHTML=i,t.Widget.attach(this._overlayWidget,document.body)}_hideOverlay(){this._overlayWidget&&(t.Widget.detach(this._overlayWidget),this._overlayWidget.dispose(),this._overlayWidget=null)}_updateOverlayMessage(e){if(this._overlayWidget){const i=this._overlayWidget.node.querySelector(".session-sync-status");i&&(i.textContent=e)}}async initializeSession(){if(this._isInitializing)return{success:!1,error:"Session initialization already in progress"};this._isInitializing=!0;try{let e;this._showOverlay("Initializing workspace session..."),this._updateOverlayMessage("Determining workspace directory..."),await this._delay(500);try{const{gitLockSignAPI:i}=await Promise.resolve().then(s.bind(s,446)),t=await i.getWorkingDirectory();e=t.success&&t.working_directory?t.working_directory:"."}catch(i){console.warn("⚠️ Could not determine workspace dynamically, using current directory fallback"),e="."}this._updateOverlayMessage("Setting up git repository and connecting to remote..."),await this._delay(500);const{gitLockSignAPI:i}=await Promise.resolve().then(s.bind(s,446)),t=await this._checkWorkSubdirectoryNavigation(e);this._refreshFileBrowser().catch(e=>{});const n=await i.initializeSession(e);if(n.success){this._updateOverlayMessage("Session initialization completed successfully!"),await this._delay(1e3),console.log("✅ Workspace session initialized successfully"),t&&(this._updateOverlayMessage("Navigating to work directory..."),await this._navigateToWorkDirectory(e),await this._delay(500)),this._updateOverlayMessage("Refreshing file browser...");try{await this._refreshFileBrowser(),this._updateOverlayMessage("Ensuring files are visible..."),await this._delay(800),await this._refreshFileBrowser(),this._updateOverlayMessage("Files updated successfully!"),await this._delay(1200)}catch(e){console.warn("⚠️ File browser refresh had issues:",e),this._updateOverlayMessage("Sync completed - refreshing files...");try{await this._refreshFileBrowser()}catch(e){}await this._delay(1e3)}}else this._updateOverlayMessage("Session initialization completed with warnings"),await this._delay(1e3),console.warn("⚠️ Session initialization completed with warnings:",n.error);return n}catch(e){return this._updateOverlayMessage("Session initialization failed"),await this._delay(1e3),console.error("❌ Session initialization error:",e),{success:!1,error:`Session initialization failed: ${e}`}}finally{this._isInitializing=!1,this._hideOverlay(),setTimeout(async()=>{try{await this._refreshFileBrowser(),setTimeout(async()=>{try{await this._refreshFileBrowser()}catch(e){}},1e3)}catch(e){}},500)}}async validateSync(e){try{this._showOverlay("Validating sync operation...");const{gitLockSignAPI:i}=await Promise.resolve().then(s.bind(s,446)),t=await i.validateSync(e);return t.success?(this._updateOverlayMessage("Sync validation completed successfully!"),await this._delay(1e3),console.log("✅ Sync validation completed successfully"),(t.warnings.length>0||t.critical_issues.length>0)&&(this._updateOverlayMessage(`Validation completed with ${t.warnings.length} warnings and ${t.critical_issues.length} critical issues`),await this._delay(2e3))):(this._updateOverlayMessage("Sync validation failed"),await this._delay(1e3),console.error("❌ Sync validation failed:",t.error)),t}catch(e){return this._updateOverlayMessage("Sync validation failed"),await this._delay(1e3),console.error("❌ Sync validation error:",e),{success:!1,error:`Sync validation failed: ${e}`,warnings:[],critical_issues:[],recommendations:[]}}finally{this._hideOverlay()}}get isInitializing(){return this._isInitializing}async _delay(e){return new Promise(i=>setTimeout(i,e))}async _refreshFileBrowser(){let e=!1;for(let i=1;i<=3;i++)try{await this._fileBrowser.model.refresh(),e=!0;break}catch(e){i<3&&await this._delay(200*i)}if(!e)try{await this._serviceManager.contents.get(".",{content:!0}),e=!0}catch(e){}}async _checkWorkSubdirectoryNavigation(e){try{console.log("🔍 [SESSION-MANAGER] Checking if work subdirectory navigation is needed...");const{gitLockSignAPI:i}=await Promise.resolve().then(s.bind(s,446)),t=await i.getWorkingDirectory();if(t.success&&t.working_directory){const i=t.working_directory,s=i.endsWith("/work")&&i.startsWith(e);return console.log(`📁 [SESSION-MANAGER] Base workspace: ${e}`),console.log(`📁 [SESSION-MANAGER] Working directory: ${i}`),console.log(`🔍 [SESSION-MANAGER] Work subdirectory navigation needed: ${s}`),s}return console.log("⚠️ [SESSION-MANAGER] Could not determine working directory, skipping navigation"),!1}catch(e){return console.warn("⚠️ [SESSION-MANAGER] Error checking work subdirectory navigation:",e),!1}}async _navigateToWorkDirectory(e){try{console.log("🚀 [SESSION-MANAGER] Navigating to work subdirectory...");const e="work";console.log(`📁 [SESSION-MANAGER] Navigating file browser to: ${e}`),await this._fileBrowser.model.cd(e),console.log("✅ [SESSION-MANAGER] Successfully navigated to work directory"),await this._fileBrowser.model.refresh(),console.log("✅ [SESSION-MANAGER] File browser refreshed in work directory")}catch(e){console.error("❌ [SESSION-MANAGER] Failed to navigate to work directory:",e);try{console.log("🔄 [SESSION-MANAGER] Attempting alternative navigation method..."),"directory"===(await this._serviceManager.contents.get("work",{content:!0})).type&&(await this._fileBrowser.model.cd("work"),console.log("✅ [SESSION-MANAGER] Alternative navigation successful"))}catch(e){console.error("❌ [SESSION-MANAGER] Alternative navigation also failed:",e)}}}dispose(){this._hideOverlay(),this._isInitializing=!1}}}}]);
#!/usr/bin/env python3
"""
Direct wiki setup script that updates the GitHub wiki repository.
This script clones the wiki repository and updates it with local content.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
import tempfile
import argparse


def run_command(cmd, cwd=None, check=True):
    """Run a shell command and return the result."""
    try:
        result = subprocess.run(
            cmd, shell=True, cwd=cwd, check=check,
            capture_output=True, text=True
        )
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.CalledProcessError as e:
        return False, e.stdout, e.stderr


def check_prerequisites():
    """Check if all prerequisites are met."""
    print("🔍 Checking prerequisites...")
    
    # Check if git is available
    success, _, _ = run_command("git --version", check=False)
    if not success:
        print("❌ Git is not installed or not in PATH")
        return False
    
    # Check if we're in the right directory
    if not Path("wiki").exists():
        print("❌ Wiki directory not found. Make sure you're in the repository root.")
        return False
    
    # Check if there are wiki files
    wiki_files = list(Path("wiki").glob("*.md"))
    if not wiki_files:
        print("❌ No wiki files found in wiki/ directory")
        return False
    
    print(f"✅ Found {len(wiki_files)} wiki files")
    return True


def setup_git_config():
    """Set up git configuration for the script."""
    print("⚙️ Setting up git configuration...")
    
    # Check if git is already configured
    success, stdout, _ = run_command("git config user.name", check=False)
    if not success or not stdout.strip():
        run_command('git config user.name "Gopnik Wiki Setup"')
        run_command('git config user.email "wiki@gopnik.ai"')
        print("✅ Git configuration set up")
    else:
        print(f"✅ Using existing git config: {stdout.strip()}")


def clone_wiki_repo(wiki_url, temp_dir):
    """Clone the wiki repository."""
    print(f"📥 Cloning wiki repository...")
    
    success, stdout, stderr = run_command(
        f"git clone {wiki_url} {temp_dir}",
        check=False
    )
    
    if not success:
        print("❌ Failed to clone wiki repository")
        print(f"Error: {stderr}")
        print("\n💡 This usually means:")
        print("   1. Wiki is not enabled in repository settings")
        print("   2. You don't have write access to the repository")
        print("   3. You need to authenticate with GitHub")
        print("\n🔧 To fix:")
        print("   1. Go to https://github.com/happy2234/gopnik/settings")
        print("   2. Enable 'Wikis' in the Features section")
        print("   3. Make sure you have write access")
        print("   4. Authenticate with: gh auth login")
        return False
    
    print("✅ Wiki repository cloned successfully")
    return True


def copy_wiki_content(source_dir, target_dir):
    """Copy wiki content from source to target directory."""
    print("📝 Copying wiki content...")
    
    source_path = Path(source_dir)
    target_path = Path(target_dir)
    
    copied_files = []
    
    for md_file in source_path.glob("*.md"):
        target_file = target_path / md_file.name
        
        # Copy the file
        shutil.copy2(md_file, target_file)
        copied_files.append(md_file.name)
        print(f"   ✅ Copied {md_file.name}")
    
    return copied_files


def commit_and_push_changes(wiki_dir, copied_files):
    """Commit and push changes to the wiki repository."""
    print("📤 Committing and pushing changes...")
    
    # Check if there are any changes
    success, stdout, _ = run_command("git status --porcelain", cwd=wiki_dir, check=False)
    if not stdout.strip():
        print("ℹ️  No changes to commit (wiki is already up to date)")
        return True
    
    # Add all changes
    success, _, stderr = run_command("git add .", cwd=wiki_dir, check=False)
    if not success:
        print(f"❌ Failed to add files: {stderr}")
        return False
    
    # Create commit message
    commit_message = f"""📚 Update wiki content from main repository

Updated pages:
{chr(10).join(f'- {file}' for file in copied_files)}

Auto-generated by direct wiki setup script
Timestamp: {subprocess.check_output(['date', '-u']).decode().strip()}"""
    
    # Commit changes
    success, _, stderr = run_command(
        f'git commit -m "{commit_message}"',
        cwd=wiki_dir,
        check=False
    )
    if not success:
        print(f"❌ Failed to commit changes: {stderr}")
        return False
    
    # Push changes
    success, _, stderr = run_command("git push origin master", cwd=wiki_dir, check=False)
    if not success:
        print(f"❌ Failed to push changes: {stderr}")
        print("\n💡 This might be due to:")
        print("   1. Authentication issues")
        print("   2. Network connectivity")
        print("   3. Repository permissions")
        return False
    
    print("✅ Changes pushed successfully")
    return True


def verify_wiki_setup(repo_url):
    """Verify that the wiki is set up correctly."""
    print("🔍 Verifying wiki setup...")
    
    wiki_url = f"{repo_url}/wiki"
    
    # Try to check if wiki is accessible (basic check)
    success, _, _ = run_command(f"curl -s -o /dev/null -w '%{{http_code}}' {wiki_url}", check=False)
    
    print(f"📖 Wiki should be available at: {wiki_url}")
    print("✅ Setup verification complete")
    
    return True


def main():
    """Main function to orchestrate wiki setup."""
    parser = argparse.ArgumentParser(description="Set up GitHub Wiki for Gopnik")
    parser.add_argument("--repo-url", default="https://github.com/happy2234/gopnik", 
                       help="Repository URL")
    parser.add_argument("--force", action="store_true", 
                       help="Force update even if files exist")
    parser.add_argument("--dry-run", action="store_true",
                       help="Show what would be done without making changes")
    
    args = parser.parse_args()
    
    repo_url = args.repo_url
    wiki_url = f"{repo_url}.wiki.git"
    
    print("🚀 Gopnik Wiki Setup")
    print("===================")
    print(f"Repository: {repo_url}")
    print(f"Wiki URL: {wiki_url}")
    print("")
    
    # Check prerequisites
    if not check_prerequisites():
        sys.exit(1)
    
    # Set up git configuration
    setup_git_config()
    
    # Create temporary directory for wiki repository
    with tempfile.TemporaryDirectory(prefix="gopnik_wiki_") as temp_dir:
        wiki_dir = Path(temp_dir) / "wiki"
        
        # Clone wiki repository
        if not clone_wiki_repo(wiki_url, wiki_dir):
            print("\n🤖 Alternative: Use GitHub Actions workflow")
            print("   1. Enable Wiki in repository settings")
            print("   2. Go to Actions → 'Setup GitHub Wiki' → 'Run workflow'")
            sys.exit(1)
        
        if args.dry_run:
            print("🔍 Dry run mode - showing what would be copied:")
            for md_file in Path("wiki").glob("*.md"):
                print(f"   - {md_file.name}")
            print("\nRun without --dry-run to actually update the wiki")
            return
        
        # Copy wiki content
        copied_files = copy_wiki_content("wiki", wiki_dir)
        
        if not copied_files:
            print("⚠️  No files were copied")
            return
        
        # Commit and push changes
        if commit_and_push_changes(wiki_dir, copied_files):
            print("\n🎉 Wiki setup completed successfully!")
            print(f"📖 Visit your wiki at: {repo_url}/wiki")
            print("\n📚 Available pages:")
            for file in copied_files:
                page_name = file.replace('.md', '').replace('-', ' ')
                print(f"   - {page_name}")
        else:
            print("\n❌ Wiki setup failed during commit/push")
            sys.exit(1)
    
    # Verify setup
    verify_wiki_setup(repo_url)


if __name__ == "__main__":
    main()
cmake_minimum_required(VERSION 3.16)
project(grapa_example)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set default build type to Release if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Force Release mode for Windows to match the static library
if(WIN32)
    set(CMAKE_BUILD_TYPE Release)
    set(CMAKE_CONFIGURATION_TYPES Release)
endif()

# Platform detection
if(WIN32)
    # Windows detection
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64" OR CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "AMD64")
        set(GRAPA_PLATFORM_DIR "win-amd64")
    else()
        set(GRAPA_PLATFORM_DIR "win-amd64")  # Default to AMD64 for now
    endif()
    set(GRAPA_STATIC_LIB "grapa_static.lib")
elseif(APPLE)
    # macOS detection
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64" OR CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "arm64")
        set(GRAPA_PLATFORM_DIR "mac-arm64")
    else()
        set(GRAPA_PLATFORM_DIR "mac-amd64")
    endif()
    set(GRAPA_STATIC_LIB "libgrapa_static.a")
else()
    # Linux/AWS detection
    if(EXISTS "/etc/system-release")
        file(READ "/etc/system-release" system_release)
        if(system_release MATCHES "Amazon Linux")
            if(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64" OR CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "aarch64")
                set(GRAPA_PLATFORM_DIR "aws-arm64")
            else()
                set(GRAPA_PLATFORM_DIR "aws-amd64")
            endif()
        else()
            if(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64" OR CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "aarch64")
                set(GRAPA_PLATFORM_DIR "linux-arm64")
            else()
                set(GRAPA_PLATFORM_DIR "linux-amd64")
            endif()
        endif()
    else()
        if(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64" OR CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "aarch64")
            set(GRAPA_PLATFORM_DIR "linux-arm64")
        else()
            set(GRAPA_PLATFORM_DIR "linux-amd64")
        endif()
    endif()
    set(GRAPA_STATIC_LIB "libgrapa_static.a")
endif()

# Set compiler flags to match build.py exactly
if(WIN32)
    # Windows flags - add PCRE2_STATIC and proper include paths
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUTF8PROC_STATIC -DPCRE2_STATIC -std:c++17 /wd4996")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUTF8PROC_STATIC -DPCRE2_STATIC -O3 /wd4996")
    
    # Add Visual Studio and Windows SDK include paths to match VS project
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
    
    # Set Windows-specific compiler definitions to match Visual Studio project
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-DNDEBUG)
    add_definitions(-D_CONSOLE)
    add_definitions(-DUTF8PROC_STATIC)
    add_definitions(-DPCRE2_STATIC)
    
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    # Linux flags
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUTF8PROC_STATIC -DPCRE2_STATIC -std=c++17 -O3 -pthread -DFLTK_USE_X11 -static-libgcc")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUTF8PROC_STATIC -DPCRE2_STATIC -O3 -pthread -DFLTK_USE_X11")
    
    # Add include directories for Linux
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
elseif(APPLE)
    # macOS flags
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUTF8PROC_STATIC -DPCRE2_STATIC -std=c++17 -O3 -pthread")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUTF8PROC_STATIC -DPCRE2_STATIC -O3 -pthread")
    
    # Add include directories for macOS
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
endif()

# Set output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

# Print configuration info
message(STATUS "Platform: ${CMAKE_SYSTEM_NAME}")
message(STATUS "Processor: ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "Grapa library: platforms/${GRAPA_PLATFORM_DIR}/${GRAPA_STATIC_LIB}")
message(STATUS "Output directory: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")

# Platform-specific dependency checks
if(WIN32)
    # Check for Visual Studio (MSVC) compiler
    if(NOT CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(FATAL_ERROR 
            "❌ VISUAL STUDIO COMPILER REQUIRED\n"
            "This project requires Visual Studio (MSVC) compiler for Windows builds.\n"
            "Please install Visual Studio 2022 or Build Tools for Visual Studio 2022.\n"
            "Download from: https://visualstudio.microsoft.com/downloads/\n"
            "Current compiler: ${CMAKE_CXX_COMPILER_ID}")
    endif()
    
    # Check for Grapa static library
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/platforms/${GRAPA_PLATFORM_DIR}/${GRAPA_STATIC_LIB}")
        message(FATAL_ERROR 
            "❌ GRAPA STATIC LIBRARY NOT FOUND\n"
            "Required file: platforms/${GRAPA_PLATFORM_DIR}/${GRAPA_STATIC_LIB}\n"
            "Please ensure you have the complete Grapa distribution with pre-built libraries.")
    endif()
    
    # Check for Windows SDK
    if(NOT EXISTS "C:/Program Files (x86)/Windows Kits/10/Include")
        message(WARNING 
            "⚠️  WINDOWS SDK NOT FOUND\n"
            "Windows SDK not detected at: C:/Program Files (x86)/Windows Kits/10/Include\n"
            "Compilation may fail. Please install Windows 10/11 SDK with Visual Studio.")
    endif()
    
    # Check for required third-party libraries
    set(REQUIRED_LIBS 
        "lib/${GRAPA_PLATFORM_DIR}/fltk.lib"
        "lib/${GRAPA_PLATFORM_DIR}/libssl.lib"
        "lib/${GRAPA_PLATFORM_DIR}/libcrypto.lib"
        "lib/${GRAPA_PLATFORM_DIR}/pcre2-8-static.lib"
    )
    
    foreach(LIB ${REQUIRED_LIBS})
        if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${LIB}")
            message(FATAL_ERROR 
                "❌ REQUIRED LIBRARY NOT FOUND\n"
                "Missing: ${LIB}\n"
                "Please ensure you have the complete Grapa distribution with all third-party libraries.")
        endif()
    endforeach()
    
    message(STATUS "✅ Windows dependencies validated successfully")
    
elseif(APPLE)
    # Check for Xcode Command Line Tools on macOS
    execute_process(
        COMMAND xcode-select -p
        OUTPUT_VARIABLE XCODE_PATH
        ERROR_QUIET
    )
    
    if(NOT XCODE_PATH)
        message(FATAL_ERROR 
            "❌ XCODE COMMAND LINE TOOLS REQUIRED\n"
            "Please install Xcode Command Line Tools:\n"
            "  xcode-select --install")
    endif()
    
    # Check for Grapa static library
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/platforms/${GRAPA_PLATFORM_DIR}/${GRAPA_STATIC_LIB}")
        message(FATAL_ERROR 
            "❌ GRAPA STATIC LIBRARY NOT FOUND\n"
            "Required file: platforms/${GRAPA_PLATFORM_DIR}/${GRAPA_STATIC_LIB}\n"
            "Please ensure you have the complete Grapa distribution with pre-built libraries.")
    endif()
    
    message(STATUS "✅ macOS dependencies validated successfully")
    
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    # Check for required development packages on Linux
    find_library(SSL_LIB ssl)
    find_library(CRYPTO_LIB crypto)
    find_library(X11_LIB X11)
    
    if(NOT SSL_LIB)
        message(FATAL_ERROR 
            "❌ OPENSSL LIBRARY NOT FOUND\n"
            "Please install OpenSSL development package:\n"
            "  Ubuntu/Debian: sudo apt-get install libssl-dev\n"
            "  CentOS/RHEL:   sudo yum install openssl-devel")
    endif()
    
    if(NOT CRYPTO_LIB)
        message(FATAL_ERROR 
            "❌ OPENSSL CRYPTO LIBRARY NOT FOUND\n"
            "Please install OpenSSL development package:\n"
            "  Ubuntu/Debian: sudo apt-get install libssl-dev\n"
            "  CentOS/RHEL:   sudo yum install openssl-devel")
    endif()
    
    if(NOT X11_LIB)
        message(FATAL_ERROR 
            "❌ X11 LIBRARY NOT FOUND\n"
            "Please install X11 development package:\n"
            "  Ubuntu/Debian: sudo apt-get install libx11-dev\n"
            "  CentOS/RHEL:   sudo yum install libX11-devel")
    endif()
    
    # Check for Grapa static library
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/platforms/${GRAPA_PLATFORM_DIR}/${GRAPA_STATIC_LIB}")
        message(FATAL_ERROR 
            "❌ GRAPA STATIC LIBRARY NOT FOUND\n"
            "Required file: platforms/${GRAPA_PLATFORM_DIR}/${GRAPA_STATIC_LIB}\n"
            "Please ensure you have the complete Grapa distribution with pre-built libraries.")
    endif()
    
    message(STATUS "✅ Linux dependencies validated successfully")
endif()

# Create executable
add_executable(grapa_example main.cpp)

# Set include directories
target_include_directories(grapa_example PRIVATE include)

# Link against Grapa static library and all required 3rd party libraries
if(WIN32)
	target_link_libraries(grapa_example 
		${CMAKE_CURRENT_SOURCE_DIR}/platforms/${GRAPA_PLATFORM_DIR}/${GRAPA_STATIC_LIB}
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/blst.lib
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/fltk.lib
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/fltk_forms.lib
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/fltk_gl.lib
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/fltk_images.lib
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/fltk_jpeg.lib
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/fltk_png.lib
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/fltk_z.lib
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libcrypto.lib
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libssl.lib
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/pcre2-8-static.lib
		# Windows system libraries
		gdiplus.lib
		ComCtl32.lib
		crypt32.lib
	)
else()
	target_link_libraries(grapa_example 
		${CMAKE_CURRENT_SOURCE_DIR}/platforms/${GRAPA_PLATFORM_DIR}/${GRAPA_STATIC_LIB}
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libfltk.a
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libfltk_gl.a
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libfltk_png.a
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libfltk_z.a
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libfltk_images.a
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libfltk_forms.a
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libfltk_jpeg.a
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libssl.a
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libcrypto.a
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libblst.a
		${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}/libpcre2-8.a
	)
endif()

# Platform-specific settings
if(APPLE)
    # macOS settings
    set_target_properties(grapa_example PROPERTIES
        BUILD_WITH_INSTALL_RPATH TRUE
        INSTALL_RPATH "@executable_path"
    )
    
    # Link against macOS system frameworks that FLTK requires
    target_link_libraries(grapa_example 
        "-framework CoreGraphics"
        "-framework CoreFoundation"
        "-framework AppKit"
        "-framework IOKit"
        "-framework ScreenCaptureKit"
        "-framework CoreText"
        "-framework QuartzCore"
        "-framework Carbon"
        "-framework ApplicationServices"
        "-framework Security"
        "-framework SystemConfiguration"
    )
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    # Linux settings
    set_target_properties(grapa_example PROPERTIES
        BUILD_WITH_INSTALL_RPATH TRUE
        INSTALL_RPATH "$ORIGIN"
        SKIP_BUILD_RPATH FALSE
    )
    # Also set the RPATH during build
    set_target_properties(grapa_example PROPERTIES
        BUILD_RPATH "$ORIGIN"
    )
    # Force the RPATH to be set
    set_target_properties(grapa_example PROPERTIES
        LINK_FLAGS "-Wl,-rpath,\$ORIGIN"
    )
    
    # Link against X11 system libraries that FLTK requires on Linux
    target_link_libraries(grapa_example 
        "-lX11"
        "-lXfixes"
        "-lXft"
        "-lXext"
        "-lXrender"
        "-lXinerama"
        "-lfontconfig"
        "-lXcursor"
        "-ldl"
        "-lm"
    )
elseif(WIN32)
    # Windows settings
    set_target_properties(grapa_example PROPERTIES
        BUILD_WITH_INSTALL_RPATH TRUE
        INSTALL_RPATH "$ORIGIN"
    )

endif()

# Copy 3rd party static libraries to build directory
add_custom_command(TARGET grapa_example POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_CURRENT_SOURCE_DIR}/lib/${GRAPA_PLATFORM_DIR}
        ${CMAKE_CURRENT_BINARY_DIR}/lib
    COMMENT "Copying 3rd party libraries to build directory"
)


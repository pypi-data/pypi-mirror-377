# Generated by ariadne-codegen
# Source: codegen/indexer_status/queries

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import Health
from .mixins import LatestBlockMixin


class SubgraphStatus(BaseModel):
    indexing_statuses: List["SubgraphStatusIndexingStatuses"] = Field(
        alias="indexingStatuses"
    )


class SubgraphStatusIndexingStatuses(BaseModel, LatestBlockMixin):
    subgraph: str
    health: Health
    entity_count: int = Field(alias="entityCount")
    fatal_error: Optional["SubgraphStatusIndexingStatusesFatalError"] = Field(
        alias="fatalError"
    )
    chains: List["SubgraphStatusIndexingStatusesChains"]


class SubgraphStatusIndexingStatusesFatalError(BaseModel):
    message: str
    deterministic: bool


class SubgraphStatusIndexingStatusesChains(BaseModel):
    typename__: Literal["ChainIndexingStatus", "EthereumIndexingStatus"] = Field(
        alias="__typename"
    )
    network: str
    chain_head_block: Optional["SubgraphStatusIndexingStatusesChainsChainHeadBlock"] = (
        Field(alias="chainHeadBlock")
    )
    latest_block: Optional["SubgraphStatusIndexingStatusesChainsLatestBlock"] = Field(
        alias="latestBlock"
    )


class SubgraphStatusIndexingStatusesChainsChainHeadBlock(BaseModel):
    hash: Any
    number: int


class SubgraphStatusIndexingStatusesChainsLatestBlock(BaseModel):
    hash: Any
    number: int


SubgraphStatus.model_rebuild()
SubgraphStatusIndexingStatuses.model_rebuild()
SubgraphStatusIndexingStatusesChains.model_rebuild()

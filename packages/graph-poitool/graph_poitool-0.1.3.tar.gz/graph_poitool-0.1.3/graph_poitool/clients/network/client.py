# Generated by ariadne-codegen
# Source: codegen/network_subgraph/queries

from typing import Any, Dict, List, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .indexer import Indexer, IndexerIndexer
from .manifest import Manifest, ManifestSubgraphDeploymentManifest
from .subgraph_allocations import SubgraphAllocations, SubgraphAllocationsAllocations


def gql(q: str) -> str:
    return q


class NetworkClient(BaseClient):
    def indexer(self, indexer_id: str, **kwargs: Any) -> Optional[IndexerIndexer]:
        query = gql(
            """
            query Indexer($indexer_id: ID!) {
              indexer(id: $indexer_id) {
                id
                url
              }
            }
            """
        )
        variables: Dict[str, object] = {"indexer_id": indexer_id}
        response = self.execute(
            query=query, operation_name="Indexer", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Indexer.model_validate(data).indexer

    def manifest(
        self, deployment_id: str, **kwargs: Any
    ) -> Optional[ManifestSubgraphDeploymentManifest]:
        query = gql(
            """
            query Manifest($deployment_id: ID!) {
              subgraphDeploymentManifest(id: $deployment_id) {
                startBlock
                network
              }
            }
            """
        )
        variables: Dict[str, object] = {"deployment_id": deployment_id}
        response = self.execute(
            query=query, operation_name="Manifest", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Manifest.model_validate(data).subgraph_deployment_manifest

    def subgraph_allocations(
        self, deployment_id: Union[Optional[str], UnsetType] = UNSET, **kwargs: Any
    ) -> List[SubgraphAllocationsAllocations]:
        query = gql(
            """
            query SubgraphAllocations($deployment_id: String = "") {
              allocations(
                where: {status: Active, subgraphDeployment_: {ipfsHash: $deployment_id}}
              ) {
                id
                indexer {
                  id
                  url
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"deployment_id": deployment_id}
        response = self.execute(
            query=query,
            operation_name="SubgraphAllocations",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SubgraphAllocations.model_validate(data).allocations

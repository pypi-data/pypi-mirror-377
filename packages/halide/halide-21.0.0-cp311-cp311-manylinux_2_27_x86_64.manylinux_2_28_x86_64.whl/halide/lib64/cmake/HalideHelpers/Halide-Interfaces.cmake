# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 3.1.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "3.1.0")
   message(FATAL_ERROR "CMake >= 3.1.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 3.1.0...3.31)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS Halide::Adams2019 Halide::Li2018 Halide::Mullapudi2016 Halide::Anderson2021 Halide::Runtime Halide::Tools Halide::ImageIO Halide::RunGenMain Halide::ThreadPool Halide::GenRT Halide::adams2019_retrain_cost_model Halide::adams2019_weightsdir_to_weightsfile Halide::anderson2021_retrain_cost_model Halide::anderson2021_weightsdir_to_weightsfile Halide::featurization_to_sample Halide::get_host_target)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target Halide::Adams2019
add_library(Halide::Adams2019 MODULE IMPORTED)

# Create imported target Halide::Li2018
add_library(Halide::Li2018 MODULE IMPORTED)

# Create imported target Halide::Mullapudi2016
add_library(Halide::Mullapudi2016 MODULE IMPORTED)

# Create imported target Halide::Anderson2021
add_library(Halide::Anderson2021 MODULE IMPORTED)

# Create imported target Halide::Runtime
add_library(Halide::Runtime INTERFACE IMPORTED)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(Halide::Runtime
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include"
      FILES "${_IMPORT_PREFIX}/include/HalideBuffer.h" "${_IMPORT_PREFIX}/include/HalidePyTorchCudaHelpers.h" "${_IMPORT_PREFIX}/include/HalidePyTorchHelpers.h" "${_IMPORT_PREFIX}/include/HalideRuntime.h" "${_IMPORT_PREFIX}/include/HalideRuntimeCuda.h" "${_IMPORT_PREFIX}/include/HalideRuntimeD3D12Compute.h" "${_IMPORT_PREFIX}/include/HalideRuntimeHexagonDma.h" "${_IMPORT_PREFIX}/include/HalideRuntimeHexagonHost.h" "${_IMPORT_PREFIX}/include/HalideRuntimeMetal.h" "${_IMPORT_PREFIX}/include/HalideRuntimeOpenCL.h" "${_IMPORT_PREFIX}/include/HalideRuntimeQurt.h" "${_IMPORT_PREFIX}/include/HalideRuntimeVulkan.h" "${_IMPORT_PREFIX}/include/HalideRuntimeWebGPU.h"
  )
else()
  set_property(TARGET Halide::Runtime
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include"
  )
endif()

# Create imported target Halide::Tools
add_library(Halide::Tools INTERFACE IMPORTED)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(Halide::Tools
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/share/tools"
      FILES "${_IMPORT_PREFIX}/share/tools/halide_benchmark.h" "${_IMPORT_PREFIX}/share/tools/halide_image.h" "${_IMPORT_PREFIX}/share/tools/halide_image_info.h" "${_IMPORT_PREFIX}/share/tools/halide_malloc_trace.h" "${_IMPORT_PREFIX}/share/tools/halide_trace_config.h"
  )
else()
  set_property(TARGET Halide::Tools
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/share/tools"
  )
endif()

# Create imported target Halide::ImageIO
add_library(Halide::ImageIO INTERFACE IMPORTED)

set_target_properties(Halide::ImageIO PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "\$<\$<NOT:\$<TARGET_EXISTS:PNG::PNG>>:HALIDE_NO_PNG>;\$<\$<NOT:\$<TARGET_EXISTS:JPEG::JPEG>>:HALIDE_NO_JPEG>"
  INTERFACE_LINK_LIBRARIES "Halide::Runtime;\$<TARGET_NAME_IF_EXISTS:PNG::PNG>;\$<TARGET_NAME_IF_EXISTS:JPEG::JPEG>"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(Halide::ImageIO
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/share/tools"
      FILES "${_IMPORT_PREFIX}/share/tools/halide_image_io.h"
  )
else()
  set_property(TARGET Halide::ImageIO
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/share/tools"
  )
endif()

# Create imported target Halide::RunGenMain
add_library(Halide::RunGenMain INTERFACE IMPORTED)

set_target_properties(Halide::RunGenMain PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_LINK_LIBRARIES "Halide::Runtime;Halide::ImageIO;Halide::Tools"
  INTERFACE_SOURCES "${_IMPORT_PREFIX}/share/tools/RunGenMain.cpp"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(Halide::RunGenMain
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/share/tools"
      FILES "${_IMPORT_PREFIX}/share/tools/RunGen.h"
  )
else()
  set_property(TARGET Halide::RunGenMain
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/share/tools"
  )
endif()

# Create imported target Halide::ThreadPool
add_library(Halide::ThreadPool INTERFACE IMPORTED)

set_target_properties(Halide::ThreadPool PROPERTIES
  INTERFACE_LINK_LIBRARIES "Threads::Threads"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(Halide::ThreadPool
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/share/tools"
      FILES "${_IMPORT_PREFIX}/share/tools/halide_thread_pool.h"
  )
else()
  set_property(TARGET Halide::ThreadPool
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/share/tools"
  )
endif()

# Create imported target Halide::GenRT
add_executable(Halide::GenRT IMPORTED)

# Create imported target Halide::adams2019_retrain_cost_model
add_executable(Halide::adams2019_retrain_cost_model IMPORTED)

# Create imported target Halide::adams2019_weightsdir_to_weightsfile
add_executable(Halide::adams2019_weightsdir_to_weightsfile IMPORTED)

# Create imported target Halide::anderson2021_retrain_cost_model
add_executable(Halide::anderson2021_retrain_cost_model IMPORTED)

# Create imported target Halide::anderson2021_weightsdir_to_weightsfile
add_executable(Halide::anderson2021_weightsdir_to_weightsfile IMPORTED)

# Create imported target Halide::featurization_to_sample
add_executable(Halide::featurization_to_sample IMPORTED)

# Create imported target Halide::get_host_target
add_executable(Halide::get_host_target IMPORTED)

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/Halide-Interfaces-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  if(CMAKE_VERSION VERSION_LESS "3.28"
      OR NOT DEFINED _cmake_import_check_xcframework_for_${_cmake_target}
      OR NOT IS_DIRECTORY "${_cmake_import_check_xcframework_for_${_cmake_target}}")
    foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
      if(NOT EXISTS "${_cmake_file}")
        message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
      endif()
    endforeach()
  endif()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)

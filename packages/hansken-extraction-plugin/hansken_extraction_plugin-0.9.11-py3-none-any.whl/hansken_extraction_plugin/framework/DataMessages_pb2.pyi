"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
UPDATE NOTICE

If you make changes to the proto definitions (add, update, delete)s, please
also update VersionUtil.java and apiversion.properties as described in the
projects README.md
"""

import builtins
import collections.abc
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import hansken_extraction_plugin.framework.PrimitiveMessages_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _RpcPluginType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _RpcPluginTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RpcPluginType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ExtractionPlugin: _RpcPluginType.ValueType  # 0
    MetaExtractionPlugin: _RpcPluginType.ValueType  # 1
    DeferredExtractionPlugin: _RpcPluginType.ValueType  # 2
    DeferredMetaExtractionPlugin: _RpcPluginType.ValueType  # 3

class RpcPluginType(_RpcPluginType, metaclass=_RpcPluginTypeEnumTypeWrapper):
    """*
    This proto file contains message definitions which represent domain objects, such
    as a trace, a property of a trace, an author, etc...

    *
    The type of the plugin. Used to determine on the client (Hansken) side
    which type of plugin we are dealing with.
    """

ExtractionPlugin: RpcPluginType.ValueType  # 0
MetaExtractionPlugin: RpcPluginType.ValueType  # 1
DeferredExtractionPlugin: RpcPluginType.ValueType  # 2
DeferredMetaExtractionPlugin: RpcPluginType.ValueType  # 3
global___RpcPluginType = RpcPluginType

class _RpcMaturity:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _RpcMaturityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RpcMaturity.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ProofOfConcept: _RpcMaturity.ValueType  # 0
    ReadyForTest: _RpcMaturity.ValueType  # 1
    ProductionReady: _RpcMaturity.ValueType  # 2

class RpcMaturity(_RpcMaturity, metaclass=_RpcMaturityEnumTypeWrapper):
    """*
    Value to indicate the maturity level of a plugin.
    """

ProofOfConcept: RpcMaturity.ValueType  # 0
ReadyForTest: RpcMaturity.ValueType  # 1
ProductionReady: RpcMaturity.ValueType  # 2
global___RpcMaturity = RpcMaturity

@typing.final
class RpcPluginInfo(google.protobuf.message.Message):
    """*
    Message that is used to describe the extraction plugin,
    used as reply in the the info() call.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    APIVERSION_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    AUTHOR_FIELD_NUMBER: builtins.int
    MATURITY_FIELD_NUMBER: builtins.int
    MATCHER_FIELD_NUMBER: builtins.int
    WEBPAGEURL_FIELD_NUMBER: builtins.int
    DEFERREDITERATIONS_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    LICENSE_FIELD_NUMBER: builtins.int
    RESOURCES_FIELD_NUMBER: builtins.int
    TRANSFORMERS_FIELD_NUMBER: builtins.int
    MODEL_FIELD_NUMBER: builtins.int
    type: global___RpcPluginType.ValueType
    apiVersion: builtins.str
    name: builtins.str
    """*
    The name of the plugin.
    @deprecated since version 0.3.1: use id instead.
    """
    version: builtins.str
    description: builtins.str
    maturity: global___RpcMaturity.ValueType
    matcher: builtins.str
    """*
    A Matcher specifies which traces can be processed by an extraction plugin.
    A Matcher is written in HQL-Lite syntax.
    """
    webpageUrl: builtins.str
    """* URL to a webpage that belongs to this plugin. This can also be a link to a webpage of the git repository of the remote plugin."""
    deferredIterations: builtins.int
    """*
    When using a deferred extraction plugin, this number indicates the maximum number of iterations the process step is deferred.
    This value should be between 1 and 20. It is ignored for other types of extraction plugins.
    """
    license: builtins.str
    """*
    The licence name of the plugin. For example 'Apache License 2.0'.
    """
    model: builtins.str
    """*
    Model used by the plugin.
    """
    @property
    def author(self) -> global___RpcAuthor: ...
    @property
    def id(self) -> global___RpcPluginIdentifier: ...
    @property
    def resources(self) -> global___RpcPluginResources: ...
    @property
    def transformers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RpcTransformer]:
        """*
        Available transformers.
        """

    def __init__(
        self,
        *,
        type: global___RpcPluginType.ValueType = ...,
        apiVersion: builtins.str = ...,
        name: builtins.str = ...,
        version: builtins.str = ...,
        description: builtins.str = ...,
        author: global___RpcAuthor | None = ...,
        maturity: global___RpcMaturity.ValueType = ...,
        matcher: builtins.str = ...,
        webpageUrl: builtins.str = ...,
        deferredIterations: builtins.int = ...,
        id: global___RpcPluginIdentifier | None = ...,
        license: builtins.str = ...,
        resources: global___RpcPluginResources | None = ...,
        transformers: collections.abc.Iterable[global___RpcTransformer] | None = ...,
        model: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["author", b"author", "id", b"id", "resources", b"resources"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["apiVersion", b"apiVersion", "author", b"author", "deferredIterations", b"deferredIterations", "description", b"description", "id", b"id", "license", b"license", "matcher", b"matcher", "maturity", b"maturity", "model", b"model", "name", b"name", "resources", b"resources", "transformers", b"transformers", "type", b"type", "version", b"version", "webpageUrl", b"webpageUrl"]) -> None: ...

global___RpcPluginInfo = RpcPluginInfo

@typing.final
class RpcPluginIdentifier(google.protobuf.message.Message):
    """*
    Message to describe the identifier of a plugin. A plugin identifier must be unique and consists of domain/category/name.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DOMAIN_FIELD_NUMBER: builtins.int
    CATEGORY_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    domain: builtins.str
    category: builtins.str
    name: builtins.str
    def __init__(
        self,
        *,
        domain: builtins.str = ...,
        category: builtins.str = ...,
        name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["category", b"category", "domain", b"domain", "name", b"name"]) -> None: ...

global___RpcPluginIdentifier = RpcPluginIdentifier

@typing.final
class RpcAuthor(google.protobuf.message.Message):
    """*
    Message that is used to describe the author of a plugin.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    EMAIL_FIELD_NUMBER: builtins.int
    ORGANISATION_FIELD_NUMBER: builtins.int
    name: builtins.str
    email: builtins.str
    organisation: builtins.str
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        email: builtins.str = ...,
        organisation: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["email", b"email", "name", b"name", "organisation", b"organisation"]) -> None: ...

global___RpcAuthor = RpcAuthor

@typing.final
class RpcPluginResources(google.protobuf.message.Message):
    """*
    Message that is used to describe the amount of resources a plugin is allowed to use.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAXCPU_FIELD_NUMBER: builtins.int
    MAXMEMORY_FIELD_NUMBER: builtins.int
    MAXWORKERS_FIELD_NUMBER: builtins.int
    maxCpu: builtins.float
    maxMemory: builtins.int
    maxWorkers: builtins.int
    def __init__(
        self,
        *,
        maxCpu: builtins.float = ...,
        maxMemory: builtins.int = ...,
        maxWorkers: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["maxCpu", b"maxCpu", "maxMemory", b"maxMemory", "maxWorkers", b"maxWorkers"]) -> None: ...

global___RpcPluginResources = RpcPluginResources

@typing.final
class RpcTraceProperty(google.protobuf.message.Message):
    """*
    The name and value of a property.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def value(self) -> google.protobuf.any_pb2.Any: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        value: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "value", b"value"]) -> None: ...

global___RpcTraceProperty = RpcTraceProperty

@typing.final
class RpcTracelet(google.protobuf.message.Message):
    """*
    The base name of the Tracelet and its properties.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def properties(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RpcTraceProperty]: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        properties: collections.abc.Iterable[global___RpcTraceProperty] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "properties", b"properties"]) -> None: ...

global___RpcTracelet = RpcTracelet

@typing.final
class RpcTrace(google.protobuf.message.Message):
    """*
    A description of a trace, containing the set of types and properties of that trace. It also
    contains an id. This is a String consisting of numbers separated with a dash,
    each consecutive numbers representing a level deeper in the trace tree.

    For example, if this trace has an id of {@code '0-0-1-2'}, the parent of this
    trace has an id of {@code '0-0-1'} and the root trace has an id of {@code '0'}.
    It is only used internally in order to verify that we are operating on the correct trace.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    TYPES_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    TRACELETS_FIELD_NUMBER: builtins.int
    TRANSFORMATIONS_FIELD_NUMBER: builtins.int
    id: builtins.str
    @property
    def types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def properties(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RpcTraceProperty]: ...
    @property
    def tracelets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RpcTracelet]: ...
    @property
    def transformations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RpcDataStreamTransformation]: ...
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        types: collections.abc.Iterable[builtins.str] | None = ...,
        properties: collections.abc.Iterable[global___RpcTraceProperty] | None = ...,
        tracelets: collections.abc.Iterable[global___RpcTracelet] | None = ...,
        transformations: collections.abc.Iterable[global___RpcDataStreamTransformation] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "properties", b"properties", "tracelets", b"tracelets", "transformations", b"transformations", "types", b"types"]) -> None: ...

global___RpcTrace = RpcTrace

@typing.final
class RpcDataStreamTransformation(google.protobuf.message.Message):
    """*
    A message containing an ordered list of Transformations that will be appended to the hierarchy of transformations
    of a trace, for a certain dataType.

    The first transformation in the list will be the parent of the second transformation and so forth.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATATYPE_FIELD_NUMBER: builtins.int
    TRANSFORMATIONS_FIELD_NUMBER: builtins.int
    dataType: builtins.str
    @property
    def transformations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RpcTransformation]: ...
    def __init__(
        self,
        *,
        dataType: builtins.str = ...,
        transformations: collections.abc.Iterable[global___RpcTransformation] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["dataType", b"dataType", "transformations", b"transformations"]) -> None: ...

global___RpcDataStreamTransformation = RpcDataStreamTransformation

@typing.final
class RpcSearchTrace(google.protobuf.message.Message):
    """*
    A description of a searched trace belonging to a deferred plugin. It contains an id. This is a
    String consisting of numbers separated with a dash, each consecutive numbers representing a level
    deeper in the trace tree. It also contains a set of types and a set of contexts.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    TYPES_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    id: builtins.str
    @property
    def types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def properties(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RpcTraceProperty]: ...
    @property
    def data(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RpcRandomAccessDataMeta]: ...
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        types: collections.abc.Iterable[builtins.str] | None = ...,
        properties: collections.abc.Iterable[global___RpcTraceProperty] | None = ...,
        data: collections.abc.Iterable[global___RpcRandomAccessDataMeta] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "id", b"id", "properties", b"properties", "types", b"types"]) -> None: ...

global___RpcSearchTrace = RpcSearchTrace

@typing.final
class RpcDataContext(google.protobuf.message.Message):
    """*
    A description of the data context which contains information of the data
    stream of a Trace that is currently being processed.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATATYPE_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    dataType: builtins.str
    @property
    def data(self) -> global___RpcRandomAccessDataMeta: ...
    def __init__(
        self,
        *,
        dataType: builtins.str = ...,
        data: global___RpcRandomAccessDataMeta | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "dataType", b"dataType"]) -> None: ...

global___RpcDataContext = RpcDataContext

@typing.final
class RpcRandomAccessDataMeta(google.protobuf.message.Message):
    """*
    A description of a data sequence from which can be read, see RpcCallMessages#Read.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    FIRSTBYTES_FIELD_NUMBER: builtins.int
    type: builtins.str
    size: builtins.int
    firstBytes: builtins.bytes
    def __init__(
        self,
        *,
        type: builtins.str = ...,
        size: builtins.int = ...,
        firstBytes: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["firstBytes", b"firstBytes", "size", b"size", "type", b"type"]) -> None: ...

global___RpcRandomAccessDataMeta = RpcRandomAccessDataMeta

@typing.final
class RpcTransformation(google.protobuf.message.Message):
    """*
    Message containing one of several types of Transformations, like a super-class. Currently only
    RpcRangedTransformation is supported.

    Transformations are pointers to actual raw data. They describe how data can be obtained by reading on certain
    positions, using decryption, or combinations of these. The benefit of using Transformations is that they take up
    less space than the actual data.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RANGEDTRANSFORMATION_FIELD_NUMBER: builtins.int
    @property
    def rangedTransformation(self) -> global___RpcRangedTransformation: ...
    def __init__(
        self,
        *,
        rangedTransformation: global___RpcRangedTransformation | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["rangedTransformation", b"rangedTransformation", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["rangedTransformation", b"rangedTransformation", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["rangedTransformation"] | None: ...

global___RpcTransformation = RpcTransformation

@typing.final
class RpcRangedTransformation(google.protobuf.message.Message):
    """*
    Ranged Transformation, describes a list of ranges of bytes.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RANGES_FIELD_NUMBER: builtins.int
    @property
    def ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RpcRange]: ...
    def __init__(
        self,
        *,
        ranges: collections.abc.Iterable[global___RpcRange] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["ranges", b"ranges"]) -> None: ...

global___RpcRangedTransformation = RpcRangedTransformation

@typing.final
class RpcRange(google.protobuf.message.Message):
    """*
    Ranged Transformation, describes a range of bytes.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OFFSET_FIELD_NUMBER: builtins.int
    LENGTH_FIELD_NUMBER: builtins.int
    offset: builtins.int
    length: builtins.int
    def __init__(
        self,
        *,
        offset: builtins.int = ...,
        length: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["length", b"length", "offset", b"offset"]) -> None: ...

global___RpcRange = RpcRange

@typing.final
class RpcTransformerArgument(google.protobuf.message.Message):
    """*
    An argument or return value of a Transformer.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BOOLEAN_FIELD_NUMBER: builtins.int
    BYTES_FIELD_NUMBER: builtins.int
    INTEGER_FIELD_NUMBER: builtins.int
    REAL_FIELD_NUMBER: builtins.int
    STRING_FIELD_NUMBER: builtins.int
    VECTOR_FIELD_NUMBER: builtins.int
    LATLONG_FIELD_NUMBER: builtins.int
    DATETIME_FIELD_NUMBER: builtins.int
    LIST_FIELD_NUMBER: builtins.int
    MAP_FIELD_NUMBER: builtins.int
    @property
    def boolean(self) -> hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcBoolean: ...
    @property
    def bytes(self) -> hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcBytes: ...
    @property
    def integer(self) -> hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcLong: ...
    @property
    def real(self) -> hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcDouble: ...
    @property
    def string(self) -> hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcString: ...
    @property
    def vector(self) -> hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcVector: ...
    @property
    def latLong(self) -> hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcLatLong: ...
    @property
    def datetime(self) -> hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcZonedDateTime: ...
    @property
    def list(self) -> hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcList: ...
    @property
    def map(self) -> hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcMap: ...
    def __init__(
        self,
        *,
        boolean: hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcBoolean | None = ...,
        bytes: hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcBytes | None = ...,
        integer: hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcLong | None = ...,
        real: hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcDouble | None = ...,
        string: hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcString | None = ...,
        vector: hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcVector | None = ...,
        latLong: hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcLatLong | None = ...,
        datetime: hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcZonedDateTime | None = ...,
        list: hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcList | None = ...,
        map: hansken_extraction_plugin.framework.PrimitiveMessages_pb2.RpcMap | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["boolean", b"boolean", "bytes", b"bytes", "datetime", b"datetime", "integer", b"integer", "latLong", b"latLong", "list", b"list", "map", b"map", "real", b"real", "string", b"string", "type", b"type", "vector", b"vector"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["boolean", b"boolean", "bytes", b"bytes", "datetime", b"datetime", "integer", b"integer", "latLong", b"latLong", "list", b"list", "map", b"map", "real", b"real", "string", b"string", "type", b"type", "vector", b"vector"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["boolean", "bytes", "integer", "real", "string", "vector", "latLong", "datetime", "list", "map"] | None: ...

global___RpcTransformerArgument = RpcTransformerArgument

@typing.final
class RpcTransformer(google.protobuf.message.Message):
    """*
    Description of a transformer that a plugin offers.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    METHODNAME_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    RETURNTYPE_FIELD_NUMBER: builtins.int
    methodName: builtins.str
    returnType: builtins.str
    @property
    def parameters(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """Specified as a (name, type) tuple"""

    def __init__(
        self,
        *,
        methodName: builtins.str = ...,
        parameters: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        returnType: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["methodName", b"methodName", "parameters", b"parameters", "returnType", b"returnType"]) -> None: ...

global___RpcTransformer = RpcTransformer

@typing.final
class RpcTransformerRequest(google.protobuf.message.Message):
    """*
    A request to invoke a transformer.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class NamedArgumentsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___RpcTransformerArgument: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___RpcTransformerArgument | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    METHODNAME_FIELD_NUMBER: builtins.int
    NAMEDARGUMENTS_FIELD_NUMBER: builtins.int
    methodName: builtins.str
    @property
    def namedArguments(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___RpcTransformerArgument]: ...
    def __init__(
        self,
        *,
        methodName: builtins.str = ...,
        namedArguments: collections.abc.Mapping[builtins.str, global___RpcTransformerArgument] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["methodName", b"methodName", "namedArguments", b"namedArguments"]) -> None: ...

global___RpcTransformerRequest = RpcTransformerRequest

@typing.final
class RpcTransformerResponse(google.protobuf.message.Message):
    """*
    The response of a transformer request.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSE_FIELD_NUMBER: builtins.int
    @property
    def response(self) -> global___RpcTransformerArgument: ...
    def __init__(
        self,
        *,
        response: global___RpcTransformerArgument | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["response", b"response"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["response", b"response"]) -> None: ...

global___RpcTransformerResponse = RpcTransformerResponse

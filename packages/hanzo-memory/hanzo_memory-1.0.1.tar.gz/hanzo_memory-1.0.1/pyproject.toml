[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hanzo-memory"
version = "1.0.1"
description = "AI memory service with FastAPI and MCP support"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "BSD"}
authors = [
    {name = "Hanzo Industries Inc.", email = "dev@hanzo.ai"}
]
keywords = ["ai", "memory", "mcp", "fastapi", "embeddings"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.9.0",
    "pydantic-settings>=2.6.0",
    "fastembed>=0.4.0",
    "litellm>=1.56.0",
    "httpx>=0.28.0",
    "python-multipart>=0.0.12",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.0",
    "redis>=5.2.0",
    "orjson>=3.10.0",
    "mcp>=1.2.0",
    "structlog>=24.4.0",
    "rich>=13.7.1",
    "tiktoken>=0.8.0",
    "tenacity>=9.0.0",
    "aiocache>=0.12.0",
    "numpy>=1.26.0",
    "scikit-learn>=1.5.0",
    "polars>=1.15.0",
    "chromadb>=0.5.0",  # Alternative vector DB that works on macOS
    "lancedb>=0.8.0",  # Modern embedded vector database with native macOS support
    "sentence-transformers>=5.0.0",  # For LanceDB embeddings
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "pre-commit>=4.0.0",
    "ipython>=8.29.0",
    "ipdb>=0.13.0",
    "twine>=4.0.0",
]

test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "faker>=30.0.0",
    "factory-boy>=3.3.0",
    "respx>=0.21.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
]

[project.scripts]
hanzo-memory = "hanzo_memory.cli:main"
hanzo-memory-server = "hanzo_memory.server:run"
hanzo-memory-mcp = "hanzo_memory.mcp.server:main"

[project.urls]
Homepage = "https://github.com/hanzoai/memory"
Documentation = "https://docs.hanzo.ai/memory"
Repository = "https://github.com/hanzoai/memory"
Issues = "https://github.com/hanzoai/memory/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["hanzo_memory*"]

[tool.setuptools.package-data]
hanzo_memory = ["py.typed"]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true


[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/hanzo_memory"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
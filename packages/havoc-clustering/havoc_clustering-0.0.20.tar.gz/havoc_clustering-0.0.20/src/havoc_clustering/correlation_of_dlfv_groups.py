import os
import numpy as np
import pandas as pd
import itertools
from scipy.stats import pearsonr
import seaborn as sns
import matplotlib.pyplot as plt
import glob
import pathlib
from collections import OrderedDict
import json

from havoc_clustering.general_utility import unique_colors


# Pearson coeffcient clustermap of color groups within the csv for the desired k value.
# There will be 1 colortrack denoting the cluster colors
# You may specify the folder containing the cluster_info_df csv's generated by HAVOC
def create_correlation_clustermap_single_slide(dir, target_k=9):
    for fp in glob.glob(os.path.join(dir, f'*_cluster_info_df.csv')):
        slide_name = pathlib.Path(fp).stem.split('_cluster_info_df')[0]

        df = pd.read_csv(fp)

        colors = list(df[f'Cluster_color_name_{target_k}'].unique())

        df_corr = pd.DataFrame(np.zeros((len(colors), len(colors))))
        df_corr.columns = colors
        df_corr.index = colors

        for (c1, c2) in itertools.combinations(colors, 2):
            df1 = df[df[f'Cluster_color_name_{target_k}'] == c1]
            df2 = df[df[f'Cluster_color_name_{target_k}'] == c2]
            dlfv_df1 = df1[[str(x) for x in range(1, 513)]].values
            dlfv_df2 = df2[[str(x) for x in range(1, 513)]].values

            r_coeff = pearsonr(
                dlfv_df1.mean(axis=0), dlfv_df2.mean(axis=0)
            )

            df_corr[c1][c2] = r_coeff[0]
            df_corr[c2][c1] = r_coeff[0]

        for c in colors:
            df_corr[c][c] = 1

        plt.close('all')
        g = sns.clustermap(df_corr, annot=True, cmap="Blues", row_colors=colors, yticklabels=False, xticklabels=False)
        # plt.show()
        plt.savefig(os.path.join(dir, f'{slide_name}_k{target_k}_corr_clustermap.jpg'), dpi=300)


# Pearson coeffcient clustermap of color groups within all the csv's for the desired k value.
# There will be 2 colortracks denoting the slide & cluster color
# You may specify the folder containing the cluster_info_df csv's generated by HAVOC
def create_correlation_clustermap_multi_slide(dir, target_k=9):
    # choose color for a slide
    color_gen = unique_colors.next_color_generator(scaled=True, mode='rgb')
    group_to_color_rgb = {}
    group_to_color_rgb_name = {}
    for fp in glob.glob(os.path.join(dir, f'*_cluster_info_df.csv')):
        slide_name = pathlib.Path(fp).stem.split('_cluster_info_df')[0]
        color_ = next(color_gen)
        group_to_color_rgb[slide_name] = color_['val']
        group_to_color_rgb_name[slide_name] = color_['name']

    print('Found the following slides: ' + str(list(group_to_color_rgb)))

    df_mapping = OrderedDict()
    df_mapping_english_keys = []
    for fp in glob.glob(os.path.join(dir, f'*_cluster_info_df.csv')):
        slide_name = pathlib.Path(fp).stem.split('_cluster_info_df')[0]
        df = pd.read_csv(fp)
        for color, rows in df.groupby(f'Cluster_color_name_{target_k}'):
            df_mapping[
                (group_to_color_rgb[slide_name], unique_colors.SCALED_RGB_COLORS[color])
            ] = rows[[str(x) for x in range(1, 512 + 1)]].mean().values
            # the above mapping has keys as rgb values to work directly with the colortrack. this is human readable
            # version. ie so we can use in df_corr labels to get extracted ordering
            df_mapping_english_keys.append((pathlib.Path(fp).stem, color))

    df_corr = pd.DataFrame(np.zeros((len(df_mapping), len(df_mapping))))
    df_corr.columns = df_mapping.keys()
    df_corr.index = df_mapping.keys()

    for color, dlfv in df_mapping.items():
        for color_comp, dlfv_comp in df_mapping.items():
            if color != color_comp:
                r_coeff = pearsonr(dlfv, dlfv_comp)

                df_corr[color][color_comp] = r_coeff[0]
                df_corr[color_comp][color] = r_coeff[0]

    for c in df_mapping.keys():
        df_corr[c][c] = 1

    # change to human readable labels. same order as df_mapping.keys() due to ordereddict
    df_corr.columns = df_mapping_english_keys
    df_corr.index = df_mapping_english_keys

    # NOTE: REQUIRED! sets up the required format
    colors = pd.DataFrame(df_mapping.keys())
    colors = [colors[i] for i in colors.columns]

    g = sns.clustermap(df_corr.values, cmap="Blues", row_colors=colors, yticklabels=False, xticklabels=False)

    # plt.show()
    plt.savefig(os.path.join(dir, f'multi_slide_k{target_k}_corr_clustermap.jpg'), dpi=300)

    g.data2d.to_csv(os.path.join(dir, f'multi_slide_k{target_k}_r_values_df.csv'), index=False)

    with open(os.path.join(dir, f'multi_slide_k{target_k}_colortrack_mapping_SLIDE.json'), 'w') as f:
        json.dump(group_to_color_rgb_name, f, indent=4)

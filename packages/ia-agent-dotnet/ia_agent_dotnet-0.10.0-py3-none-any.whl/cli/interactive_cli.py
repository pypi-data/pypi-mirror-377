"""
CLI Interactivo Persistente para el sistema de agentes
IA Agent para Generaci√≥n de Pruebas Unitarias .NET

Inspirado en Gemini CLI y Claude Code - mantiene el agente en memoria
para evitar recargas costosas de dependencias.
"""

import os
import sys
import time
import signal
from typing import Dict, List, Any, Optional, Callable
from pathlib import Path
import threading
import asyncio

# Agregar el directorio src al path para imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.syntax import Syntax
from rich.table import Table
from rich.live import Live
from rich.spinner import Spinner
from rich.text import Text
from rich.align import Align

# Imports de agentes y herramientas
from agents.analysis_agent import analysis_agent
from agents.generation_agent import generation_agent
from agents.validation_agent import validation_agent
from agents.optimization_agent import optimization_agent
from agents.coordinator_agent import coordinator_agent
from tools.file_tools import file_manager
from tools.dotnet_tools import dotnet_manager, project_discovery, ProjectInfo, ProjectType
from utils.config import get_config
from utils.logging import get_logger, setup_logging

# Importar los nuevos m√≥dulos de verificaci√≥n
from utils.version_checker import check_version_update
from utils.config_validator import ConfigValidator

logger = get_logger("interactive-cli")
console = Console()


class InteractiveCLI:
    """CLI Interactivo que mantiene el agente en memoria"""
    
    def __init__(self):
        self.console = console
        self.logger = logger
        self.is_initialized = False
        self.is_running = True
        
        # Estado de la sesi√≥n
        self.current_project_path = None
        self.current_project_info = None
        self.current_session_id = None
        self.analysis_completed = False  # Nueva variable para rastrear an√°lisis
        
        # Inicializar validador de configuraci√≥n
        self.config_validator = ConfigValidator()
        self.config_valid = False
        
        # Agentes (se inicializan despu√©s)
        self.agents = {}
        self.config = None
        
        # Comandos disponibles
        self.commands = {
            'help': self._cmd_help,
            'status': self._cmd_status,
            'discover': self._cmd_discover,
            'select': self._cmd_select,
            'analyze': self._cmd_analyze,
            'generate': self._cmd_generate,
            'validate': self._cmd_validate,
            'optimize': self._cmd_optimize,
            'run': self._cmd_run,
            'config': self._cmd_config,
            'clear': self._cmd_clear,
            'exit': self._cmd_exit,
            'quit': self._cmd_exit
        }
        
        # Configurar manejo de se√±ales para cierre limpio
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """Maneja se√±ales de cierre del sistema"""
        self.console.print("\n[yellow]üîÑ Cerrando sesi√≥n de manera segura...[/yellow]")
        self.is_running = False
        sys.exit(0)
    
    async def initialize(self):
        """Inicializa el sistema de agentes (carga inicial)"""
        if self.is_initialized:
            return
        
        self.console.print(Panel.fit(
            "[bold blue]üöÄ IA Agent .NET - Inicializando Sistema[/bold blue]\n"
            "[dim]Cargando dependencias y agentes...[/dim]",
            border_style="blue"
        ))
        
        # Mostrar spinner de carga
        with Live(Spinner("dots", text="Cargando agentes..."), console=self.console, refresh_per_second=10) as live:
            try:
                # Verificar versi√≥n actualizada
                live.update(Spinner("dots", text="Verificando versi√≥n actualizada..."))
                check_version_update()
                await asyncio.sleep(0.5)
                
                # Cargar configuraci√≥n
                self.config = get_config()
                live.update(Spinner("dots", text="Cargando configuraci√≥n..."))
                await asyncio.sleep(0.5)
                
                # Verificar configuraci√≥n de API
                live.update(Spinner("dots", text="Verificando configuraci√≥n de IA..."))
                config_status = self.config_validator.check_api_configuration()
                self.config_valid = config_status["config_valid"]
                self.config_validator.show_config_status(config_status)
                await asyncio.sleep(0.5)
                
                # Inicializar agentes
                live.update(Spinner("dots", text="Inicializando agentes de an√°lisis..."))
                self.agents = {
                    'analysis': analysis_agent,
                    'generation': generation_agent,
                    'validation': validation_agent,
                    'optimization': optimization_agent,
                    'coordinator': coordinator_agent
                }
                await asyncio.sleep(0.5)
                
                # Verificar herramientas .NET
                live.update(Spinner("dots", text="Verificando herramientas .NET..."))
                dotnet_available = await self._check_dotnet_availability()
                await asyncio.sleep(0.5)
                
                # Generar ID de sesi√≥n
                self.current_session_id = f"session_{int(time.time())}"
                
                self.is_initialized = True
                
                # Mostrar mensaje de √©xito
                live.update(Text("‚úÖ Sistema inicializado correctamente", style="green"))
                await asyncio.sleep(1)
                
            except Exception as e:
                live.update(Text(f"‚ùå Error durante la inicializaci√≥n: {e}", style="red"))
                await asyncio.sleep(2)
                raise
    
    async def _check_dotnet_availability(self) -> bool:
        """Verifica si .NET est√° disponible"""
        try:
            result = await dotnet_manager.check_dotnet_installation()
            return result.get('installed', False)
        except Exception:
            return False
    
    def show_welcome(self):
        """Muestra el mensaje de bienvenida"""
        welcome_text = """[bold blue]ü§ñ IA Agent .NET - CLI Interactivo[/bold blue]
[dim]Sistema de generaci√≥n autom√°tica de pruebas unitarias para proyectos .NET[/dim]

[bold green]Comandos disponibles:[/bold green]
[cyan]discover[/cyan] - Descubrir proyectos .NET  [cyan]select <n>[/cyan] - Seleccionar proyecto  [cyan]analyze[/cyan] - Analizar proyecto
[cyan]generate[/cyan] - Generar pruebas unitarias  [cyan]validate[/cyan] - Validar pruebas  [cyan]optimize[/cyan] - Optimizar pruebas
[cyan]run[/cyan] - Ejecutar flujo completo  [cyan]config[/cyan] - Configurar IA  [cyan]status[/cyan] - Estado actual
[cyan]help[/cyan] - Ayuda  [cyan]clear[/cyan] - Limpiar pantalla  [cyan]exit[/cyan] - Salir

[dim]Escribe un comando o 'help' para m√°s informaci√≥n[/dim]"""
        
        self.console.print(Panel(welcome_text, border_style="blue", padding=(0, 1)))
    
    async def run(self):
        """Ejecuta el CLI interactivo principal"""
        try:
            # Inicializar sistema
            await self.initialize()
            
            # Mostrar bienvenida
            self.show_welcome()
            
            # Bucle principal
            while self.is_running:
                try:
                    # Obtener comando del usuario
                    command_input = Prompt.ask(
                        "\n[bold cyan]ia-agent[/bold cyan]",
                        default="help"
                    ).strip()
                    
                    if not command_input:
                        continue
                    
                    # Procesar comando
                    await self._process_command(command_input)
                    
                except KeyboardInterrupt:
                    self.console.print("\n[yellow]Usa 'exit' para salir del sistema[/yellow]")
                except Exception as e:
                    self.console.print(f"[red]‚ùå Error: {e}[/red]")
                    self.logger.error(f"Error en comando: {e}")
        
        except Exception as e:
            self.console.print(f"[red]‚ùå Error cr√≠tico: {e}[/red]")
            self.logger.error(f"Error cr√≠tico en CLI: {e}")
        finally:
            self._cleanup()
    
    async def _process_command(self, command_input: str):
        """Procesa un comando del usuario"""
        parts = command_input.split()
        command = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        if command in self.commands:
            try:
                await self.commands[command](args)
            except Exception as e:
                self.console.print(f"[red]‚ùå Error ejecutando comando '{command}': {e}[/red]")
        else:
            self.console.print(f"[yellow]‚ö†Ô∏è  Comando desconocido: '{command}'[/yellow]")
            self.console.print("[dim]Escribe 'help' para ver comandos disponibles[/dim]")
    
    # ==================== COMANDOS ====================
    
    async def _cmd_help(self, args: List[str]):
        """Muestra ayuda detallada"""
        help_text = """
[bold blue]üìö Comandos del IA Agent .NET[/bold blue]

[bold green]üîç Descubrimiento de Proyectos:[/bold green]
  [cyan]discover[/cyan]           - Buscar proyectos .NET en directorio actual
  [cyan]select <n√∫mero>[/cyan]    - Seleccionar proyecto por n√∫mero de la lista

[bold green]üß† An√°lisis y Generaci√≥n:[/bold green]
  [cyan]analyze[/cyan]            - Analizar proyecto seleccionado (requerido antes de generate)
  [cyan]generate[/cyan]           - Generar pruebas unitarias (requiere analyze previo)
  [cyan]validate[/cyan]           - Validar pruebas generadas
  [cyan]optimize[/cyan]           - Optimizar pruebas existentes

[bold green]üöÄ Flujos Completos:[/bold green]
  [cyan]run[/cyan]                - Ejecutar flujo completo (an√°lisis ‚Üí generaci√≥n ‚Üí validaci√≥n)

[bold green]‚öôÔ∏è  Configuraci√≥n:[/bold green]
  [cyan]config[/cyan]             - Configurar proveedor de IA (DeepSeek, Gemini, OpenAI)
  [cyan]status[/cyan]             - Mostrar estado actual del sistema

[bold green]üõ†Ô∏è  Utilidades:[/bold green]
  [cyan]clear[/cyan]              - Limpiar pantalla
  [cyan]help[/cyan]               - Mostrar esta ayuda
  [cyan]exit[/cyan]               - Salir del sistema

[dim]Ejemplos:[/dim]
  [cyan]discover[/cyan]           # Buscar proyectos
  [cyan]select 1[/cyan]           # Seleccionar primer proyecto
  [cyan]analyze[/cyan]            # Analizar c√≥digo (requerido)
  [cyan]generate[/cyan]           # Generar pruebas unitarias
  [cyan]run[/cyan]                # Generar pruebas completas (incluye analyze)
        """
        
        self.console.print(Panel(help_text, border_style="green", padding=(1, 2)))
    
    async def _cmd_status(self, args: List[str]):
        """Muestra el estado actual del sistema"""
        status_table = Table(title="üìä Estado del Sistema", show_header=True, header_style="bold blue")
        status_table.add_column("Componente", style="cyan")
        status_table.add_column("Estado", style="green")
        status_table.add_column("Detalles", style="dim")
        
        # Estado de inicializaci√≥n
        status_table.add_row(
            "Sistema",
            "‚úÖ Inicializado" if self.is_initialized else "‚ùå No inicializado",
            f"Sesi√≥n: {self.current_session_id}" if self.current_session_id else "Sin sesi√≥n"
        )
        
        # Estado de proyecto
        if self.current_project_path:
            analysis_status = "‚úÖ Analizado" if self.analysis_completed else "‚ö†Ô∏è  Sin analizar"
            status_table.add_row(
                "Proyecto",
                "‚úÖ Seleccionado",
                f"Ruta: {self.current_project_path}"
            )
            status_table.add_row(
                "An√°lisis",
                analysis_status,
                "C√≥digo en memoria" if self.analysis_completed else "Ejecuta 'analyze' primero"
            )
        else:
            status_table.add_row(
                "Proyecto",
                "‚ö†Ô∏è  No seleccionado",
                "Usa 'discover' y 'select' para elegir un proyecto"
            )
        
        # Estado de configuraci√≥n
        if self.config:
            status_table.add_row(
                "Configuraci√≥n",
                "‚úÖ Cargada",
                f"Proveedor: {getattr(self.config, 'ai_provider', 'No configurado')}"
            )
        else:
            status_table.add_row(
                "Configuraci√≥n",
                "‚ùå No cargada",
                "Error en carga de configuraci√≥n"
            )
        
        # Estado de agentes
        agents_status = "‚úÖ Disponibles" if self.agents else "‚ùå No disponibles"
        agents_count = len(self.agents) if self.agents else 0
        status_table.add_row(
            "Agentes",
            agents_status,
            f"{agents_count} agentes cargados"
        )
        
        self.console.print(status_table)
    
    async def _cmd_discover(self, args: List[str]):
        """Descubre proyectos .NET en el directorio actual (excluye proyectos de pruebas)"""
        try:
            self.console.print("üîç Descubriendo proyectos .NET...")
            
            # Descubrir proyectos (excluyendo proyectos de pruebas por defecto)
            projects = project_discovery.discover_projects(".", exclude_test_projects=True)
            
            if not projects:
                self.console.print("‚ùå No se encontraron proyectos .NET en el directorio actual")
                self.console.print("üí° Aseg√∫rate de estar en un directorio que contenga archivos .csproj o .sln")
                self.console.print("‚ÑπÔ∏è  Los proyectos de pruebas unitarias se excluyen autom√°ticamente")
                return
            
            # Mostrar proyectos encontrados
            self._display_projects(projects)
            
            # Guardar proyectos para selecci√≥n
            self._available_projects = projects
            
        except Exception as e:
            self.console.print(f"‚ùå Error al descubrir proyectos: {e}")
    
    def _check_ai_required(self, command_name: str) -> bool:
        """Verificar si un comando requiere IA y mostrar advertencia si no est√° configurada"""
        if not self.config_valid:
            self.console.print(f"‚ùå [bold red]Comando '{command_name}' requiere configuraci√≥n de IA[/bold red]")
            self.console.print("üí° Ejecuta 'config' para configurar tu API key")
            self.console.print("üîß Comandos disponibles sin IA: discover, select, status, help, clear, exit")
            return False
        return True
    
    def _reload_config(self):
        """Recargar configuraci√≥n despu√©s de cambios"""
        try:
            # Recargar configuraci√≥n global
            from config.global_config import global_config_manager
            global_config_manager._load_config()
            
            # Verificar configuraci√≥n de API
            config_status = self.config_validator.check_api_configuration()
            self.config_valid = config_status["config_valid"]
            
            if self.config_valid:
                self.console.print("‚úÖ Configuraci√≥n recargada correctamente", style="green")
            else:
                self.console.print("‚ö†Ô∏è Configuraci√≥n recargada, pero a√∫n no est√° completa", style="yellow")
                
        except Exception as e:
            self.console.print(f"‚ùå Error al recargar configuraci√≥n: {e}", style="red")
    
    def _display_projects(self, projects: List[ProjectInfo]):
        """Muestra los proyectos en una tabla"""
        table = Table(title="üìÅ Proyectos .NET Encontrados", show_header=True, header_style="bold blue")
        table.add_column("#", style="cyan", width=3)
        table.add_column("Nombre", style="green")
        table.add_column("Tipo", style="yellow")
        table.add_column("Framework", style="magenta")
        table.add_column("Ruta", style="dim")
        
        for i, project in enumerate(projects, 1):
            table.add_row(
                str(i),
                project.name,
                project.project_type.value if project.project_type else "Desconocido",
                project.target_framework or "N/A",
                project.path
            )
        
        self.console.print(table)
        self.console.print(f"\n[dim]Usa 'select <n√∫mero>' para elegir un proyecto[/dim]")
    
    async def _cmd_select(self, args: List[str]):
        """Selecciona un proyecto por n√∫mero"""
        if not args:
            self.console.print("‚ùå Debes especificar un n√∫mero de proyecto")
            self.console.print("üí° Ejemplo: select 1")
            return
        
        try:
            project_number = int(args[0])
            
            if not hasattr(self, '_available_projects') or not self._available_projects:
                self.console.print("‚ùå No hay proyectos disponibles. Ejecuta 'discover' primero")
                return
            
            if project_number < 1 or project_number > len(self._available_projects):
                self.console.print(f"‚ùå N√∫mero inv√°lido. Debe estar entre 1 y {len(self._available_projects)}")
                return
            
            # Seleccionar proyecto
            selected_project = self._available_projects[project_number - 1]
            self.current_project_path = selected_project.path
            self.current_project_info = selected_project
            
            # Resetear an√°lisis al cambiar de proyecto
            self.analysis_completed = False
            
            self.console.print(f"‚úÖ Proyecto seleccionado: [bold green]{selected_project.name}[/bold green]")
            self.console.print(f"üìÅ Ruta: [dim]{selected_project.path}[/dim]")
            self.console.print(f"üéØ Framework: [cyan]{selected_project.target_framework}[/cyan]")
            self.console.print("üí° [dim]Ejecuta 'analyze' para actualizar el c√≥digo en memoria[/dim]")
            
        except ValueError:
            self.console.print("‚ùå El n√∫mero debe ser un entero v√°lido")
        except Exception as e:
            self.console.print(f"‚ùå Error al seleccionar proyecto: {e}")
    
    async def _cmd_analyze(self, args: List[str]):
        """Analiza el proyecto seleccionado"""
        if not self.current_project_path:
            self.console.print("‚ùå No hay proyecto seleccionado")
            self.console.print("üí° Usa 'discover' y 'select' para elegir un proyecto")
            return
        
        # Verificar configuraci√≥n de API
        if not self._check_ai_required("analyze"):
            return
        
        try:
            self.console.print(f"üß† Analizando proyecto: [bold]{self.current_project_info.name}[/bold]")
            
            # Leer c√≥digo del proyecto para an√°lisis
            code_content = await self._read_project_code()
            
            # Ejecutar an√°lisis
            with Live(Spinner("dots", text="Analizando c√≥digo..."), console=self.console) as live:
                result = self.agents['analysis'].analyze_code(code_content)
                live.update(Text("‚úÖ An√°lisis completado", style="green"))
            
            # Mostrar resultados
            self._display_analysis_results(result)
            
            # Marcar que el an√°lisis se complet√≥
            self.analysis_completed = True
            self.console.print("\n‚úÖ [bold green]An√°lisis completado - C√≥digo actualizado en memoria[/bold green]")
            
        except Exception as e:
            self.console.print(f"‚ùå Error durante el an√°lisis: {e}")
    
    async def _read_project_code(self) -> str:
        """Lee el c√≥digo del proyecto seleccionado"""
        try:
            code_files = []
            project_path = Path(self.current_project_path)
            
            # Buscar archivos .cs
            for cs_file in project_path.rglob("*.cs"):
                try:
                    content = cs_file.read_text(encoding='utf-8')
                    code_files.append(f"// {cs_file.name}\n{content}\n")
                except Exception as e:
                    self.logger.warning(f"No se pudo leer {cs_file}: {e}")
            
            return "\n".join(code_files) if code_files else "// No se encontraron archivos .cs"
            
        except Exception as e:
            self.logger.error(f"Error leyendo c√≥digo del proyecto: {e}")
            return "// Error leyendo c√≥digo del proyecto"
    
    def _display_analysis_results(self, result: Any):
        """Muestra los resultados del an√°lisis"""
        if not result:
            self.console.print("‚ö†Ô∏è  No se obtuvieron resultados del an√°lisis")
            return
        
        # Si el resultado es un diccionario con m√©tricas espec√≠ficas
        if isinstance(result, dict) and any(key in result for key in ['classes_found', 'methods_found', 'complexity_score']):
            # Crear tabla de resultados
            table = Table(title="üìä Resultados del An√°lisis", show_header=True, header_style="bold green")
            table.add_column("M√©trica", style="cyan")
            table.add_column("Valor", style="green")
            
            # Agregar m√©tricas principales
            if 'classes_found' in result:
                table.add_row("Clases encontradas", str(result['classes_found']))
            if 'methods_found' in result:
                table.add_row("M√©todos encontrados", str(result['methods_found']))
            if 'complexity_score' in result:
                table.add_row("Puntuaci√≥n de complejidad", str(result['complexity_score']))
            
            self.console.print(table)
        else:
            # Si el resultado es texto del agente, extraer informaci√≥n y mostrar resumen
            result_text = str(result)
            
            # Extraer m√©tricas del texto del agente
            metrics = self._extract_metrics_from_analysis(result_text)
            
            # Crear tabla de resultados
            table = Table(title="üìä Resultados del An√°lisis", show_header=True, header_style="bold green")
            table.add_column("M√©trica", style="cyan")
            table.add_column("Valor", style="green")
            
            # Agregar m√©tricas extra√≠das
            for metric, value in metrics.items():
                table.add_row(metric, value)
            
            self.console.print(table)
            
            # Mostrar resumen detallado
            self.console.print("\nüìã [bold]Resumen Detallado:[/bold]")
            self.console.print(Panel(result_text, title="An√°lisis Completo", border_style="blue"))
    
    def _extract_metrics_from_analysis(self, analysis_text: str) -> Dict[str, str]:
        """Extrae m√©tricas del texto de an√°lisis del agente"""
        import re
        metrics = {}
        
        # Contar controladores - buscar diferentes patrones
        controller_count = 0
        
        # Patr√≥n 1: **Nombre**: `WeatherController`
        controller_matches1 = re.findall(r'\*\*Nombre\*\*: `([^`]*Controller[^`]*)`', analysis_text)
        controller_count += len(controller_matches1)
        
        # Patr√≥n 2: **Clase:** `WeatherController`
        controller_matches2 = re.findall(r'\*\*Clase\*\*: `([^`]*Controller[^`]*)`', analysis_text)
        controller_count += len(controller_matches2)
        
        # Patr√≥n 3: Buscar por texto "Controlador"
        if "Controlador" in analysis_text or "Controller" in analysis_text:
            controller_count = max(controller_count, 1)
        
        if controller_count > 0:
            metrics["Controladores encontrados"] = str(controller_count)
        
        # Contar modelos - buscar diferentes patrones
        model_count = 0
        
        # Patr√≥n 1: **Nombre**: `WeatherForecast`
        model_matches1 = re.findall(r'\*\*Nombre\*\*: `([^`]+)`', analysis_text)
        model_count += len([m for m in model_matches1 if any(keyword in m for keyword in ['Model', 'Forecast', 'DTO', 'Entity'])])
        
        # Patr√≥n 2: **Clase:** `WeatherForecast`
        model_matches2 = re.findall(r'\*\*Clase\*\*: `([^`]+)`', analysis_text)
        model_count += len([m for m in model_matches2 if any(keyword in m for keyword in ['Model', 'Forecast', 'DTO', 'Entity'])])
        
        # Patr√≥n 3: Buscar por texto "Modelo"
        if "Modelo" in analysis_text or "Model" in analysis_text:
            model_count = max(model_count, 1)
        
        if model_count > 0:
            metrics["Modelos encontrados"] = str(model_count)
        
        # Contar servicios
        service_count = 0
        
        # Patr√≥n 1: **Nombre**: `CalculatorService`
        service_matches1 = re.findall(r'\*\*Nombre\*\*: `([^`]*Service[^`]*)`', analysis_text)
        service_count += len(service_matches1)
        
        # Patr√≥n 2: **Clase:** `CalculatorService`
        service_matches2 = re.findall(r'\*\*Clase\*\*: `([^`]*Service[^`]*)`', analysis_text)
        service_count += len(service_matches2)
        
        # Patr√≥n 3: Buscar por texto "Servicio"
        if "Servicio" in analysis_text or "Service" in analysis_text:
            service_count = max(service_count, 1)
        
        if service_count > 0:
            metrics["Servicios encontrados"] = str(service_count)
        
        # Contar m√©todos HTTP
        http_methods = (analysis_text.count("[HttpGet") + 
                       analysis_text.count("[HttpPost") + 
                       analysis_text.count("[HttpPut") + 
                       analysis_text.count("[HttpDelete"))
        if http_methods > 0:
            metrics["M√©todos HTTP encontrados"] = str(http_methods)
        
        # Contar m√©todos totales - buscar diferentes patrones
        method_count = 0
        
        # Patr√≥n 1: **`Get()`**
        method_matches1 = re.findall(r'\*\*`([^`]+)`\*\*', analysis_text)
        method_count += len(method_matches1)
        
        # Patr√≥n 2: **`Get()`** (con diferentes formatos)
        method_matches2 = re.findall(r'\*\*`([^`]*\([^`]*\)[^`]*)`\*\*', analysis_text)
        method_count += len(method_matches2)
        
        if method_count > 0:
            metrics["M√©todos analizados"] = str(method_count)
        
        # Contar namespaces
        namespace_matches = re.findall(r'\*\*Namespace\*\*: `([^`]+)`', analysis_text)
        if namespace_matches:
            metrics["Namespaces encontrados"] = str(len(set(namespace_matches)))
        
        # Si no se encontraron m√©tricas espec√≠ficas, mostrar informaci√≥n general
        if not metrics:
            metrics["Estado"] = "An√°lisis completado"
            metrics["Tipo de resultado"] = "An√°lisis detallado de c√≥digo"
            metrics["Longitud del an√°lisis"] = f"{len(analysis_text)} caracteres"
        
        return metrics
    
    async def _cmd_generate(self, args: List[str]):
        """Genera suite completa de pruebas unitarias con validaciones"""
        if not self.current_project_path:
            self.console.print("‚ùå No hay proyecto seleccionado")
            return
        
        # Verificar que se haya ejecutado analyze primero
        if not self.analysis_completed:
            self.console.print("‚ùå [bold red]Debes ejecutar 'analyze' primero para actualizar el c√≥digo en memoria[/bold red]")
            self.console.print("üí° El comando 'analyze' mantiene el c√≥digo actualizado en memoria para la generaci√≥n")
            self.console.print("üîß Ejecuta: [cyan]analyze[/cyan] y luego [cyan]generate[/cyan]")
            return
        
        # Verificar configuraci√≥n de API
        if not self._check_ai_required("generate"):
            return
        
        try:
            self.console.print(f"‚ö° Generando suite completa de pruebas para: [bold]{self.current_project_info.name}[/bold]")
            self.console.print("üìã Este proceso incluye:")
            self.console.print("   1. ‚úÖ Validaci√≥n de compilaci√≥n")
            self.console.print("   2. ü§ñ An√°lisis con IA")
            self.console.print("   3. üìÅ Creaci√≥n de proyecto de pruebas")
            self.console.print("   4. üß™ Generaci√≥n de pruebas (objetivo: 80% cobertura)")
            self.console.print("   5. üíæ Guardado de archivos")
            
            # Usar el nuevo m√©todo comprehensivo
            with Live(Spinner("dots", text="Generando suite completa de pruebas..."), console=self.console) as live:
                result = self.agents['generation'].generate_comprehensive_test_suite(
                    self.current_project_path, 
                    "xunit"
                )
                live.update(Text("‚úÖ Suite de pruebas generada", style="green"))
            
            # Mostrar resultados detallados
            if result["success"]:
                self._display_generation_results(result)
            else:
                self._display_generation_error(result)
            
        except Exception as e:
            self.console.print(f"‚ùå Error durante la generaci√≥n: {e}")
    
    def _display_generation_results(self, result: Dict[str, Any]):
        """Mostrar resultados de la generaci√≥n comprehensiva"""
        summary = result.get("summary", {})
        
        # Panel principal de √©xito
        coverage_total = summary.get('coverage_percentage', 0)
        covered_methods = summary.get('covered_methods', 0)
        total_methods = summary.get('total_methods', 0)
        newly_covered = summary.get('newly_covered_methods', 0)
        
        # Informaci√≥n adicional sobre procesamiento limitado
        limited_info = ""
        if summary.get('limited_processing', False):
            total_found = summary.get('total_methods_found', total_methods)
            limited_info = f"\n   ‚Ä¢ M√©todos encontrados: [dim]{total_found}[/dim] (procesados: {total_methods})"
        
        success_panel = Panel(
            f"[bold green]‚úÖ {result['message']}[/bold green]\n\n"
            f"üìä [bold]Resumen:[/bold]\n"
            f"   ‚Ä¢ Proyecto: [cyan]{summary.get('project_path', 'N/A')}[/cyan]\n"
            f"   ‚Ä¢ Proyecto de pruebas: [cyan]{summary.get('test_project_path', 'N/A')}[/cyan]\n"
            f"   ‚Ä¢ Framework: [yellow]{summary.get('test_framework', 'N/A')}[/yellow]\n"
            f"   ‚Ä¢ Cobertura generada: [bold green]{coverage_total}%[/bold green]\n"
            f"   ‚Ä¢ M√©todos cubiertos: [green]{covered_methods}[/green]/{total_methods}\n"
            f"   ‚Ä¢ M√©todos procesados: [yellow]{newly_covered}[/yellow]\n"
            f"   ‚Ä¢ Archivos generados: [blue]{summary.get('generated_test_files', 0)}[/blue]{limited_info}",
            title="üéâ Suite de Pruebas Generada Exitosamente",
            border_style="green"
        )
        self.console.print(success_panel)
        
        # Mostrar informaci√≥n del proyecto de pruebas
        test_project = result.get("test_project", {})
        if test_project.get("success"):
            if test_project.get("existing"):
                self.console.print(f"\nüìÅ [bold]Proyecto de pruebas:[/bold] [yellow]Usando existente[/yellow]")
            else:
                self.console.print(f"\nüìÅ [bold]Proyecto de pruebas:[/bold] [green]Creado nuevo[/green]")
            self.console.print(f"   ‚Ä¢ Ruta: [cyan]{test_project.get('test_project_path', 'N/A')}[/cyan]")
        
        # Mostrar archivos guardados
        file_saving = result.get("file_saving", {})
        if file_saving.get("success") and file_saving.get("saved_files"):
            self.console.print("\nüìÅ [bold]Archivos de prueba:[/bold]")
            
            # Mostrar archivos nuevos
            new_files = file_saving.get("new_files", [])
            if new_files:
                self.console.print("   [green]Archivos creados:[/green]")
                for file_name in new_files:
                    self.console.print(f"   ‚Ä¢ [green]‚úÖ {file_name}[/green]")
            
            # Mostrar archivos actualizados
            updated_files = file_saving.get("updated_files", [])
            if updated_files:
                self.console.print("   [yellow]Archivos actualizados:[/yellow]")
                for file_name in updated_files:
                    self.console.print(f"   ‚Ä¢ [yellow]üîÑ {file_name}[/yellow]")
            
            # Mostrar total
            total_files = file_saving.get("total_files", 0)
            self.console.print(f"\n   [bold]Total de archivos procesados: {total_files}[/bold]")
        
        # Mostrar an√°lisis de IA si est√° disponible
        ai_analysis = result.get("ai_analysis", {})
        if ai_analysis.get("success") and ai_analysis.get("analysis"):
            analysis = ai_analysis["analysis"]
            if analysis:
                self.console.print(f"\nü§ñ [bold]An√°lisis de IA:[/bold]")
                if "project_structure" in analysis:
                    structure = analysis["project_structure"]
                    self.console.print(f"   ‚Ä¢ Controladores: [cyan]{len(structure.get('controllers', []))}[/cyan]")
                    self.console.print(f"   ‚Ä¢ Servicios: [cyan]{len(structure.get('services', []))}[/cyan]")
                    self.console.print(f"   ‚Ä¢ Modelos: [cyan]{len(structure.get('models', []))}[/cyan]")
        
        # Mostrar informaci√≥n sobre documentaci√≥n t√©cnica si fue generada
        if ai_analysis.get("technical_docs_saved"):
            self.console.print(f"\nüìö [bold]Documentaci√≥n T√©cnica:[/bold]")
            self.console.print(f"   ‚Ä¢ [green]‚úÖ Generada autom√°ticamente[/green]")
            self.console.print(f"   ‚Ä¢ [cyan]Ubicaci√≥n:[/cyan] [dim]Docs/[/dim]")
            self.console.print(f"   ‚Ä¢ [yellow]Incluye:[/yellow] An√°lisis detallado, diagramas Mermaid, documentaci√≥n de m√©todos")
            self.console.print(f"   ‚Ä¢ [blue]Formato:[/blue] Markdown con diagramas renderizables")
        
        # Verificar si se alcanz√≥ el objetivo de cobertura
        if coverage_total >= 80:
            self.console.print(f"\nüéØ [bold green]¬°Objetivo de cobertura alcanzado! ({coverage_total}% >= 80%)[/bold green]")
        else:
            self.console.print(f"\n‚ö†Ô∏è  [bold yellow]Cobertura por debajo del objetivo: {coverage_total}% < 80%[/bold yellow]")
            if coverage_existing > 0:
                self.console.print(f"üìä [dim]Cobertura existente: {coverage_existing}%, Nueva: {coverage_new}%[/dim]")
            self.console.print("üí° Considera revisar el c√≥digo para identificar m√©todos adicionales que necesiten pruebas")
    
    def _display_generation_error(self, result: Dict[str, Any]):
        """Mostrar errores de la generaci√≥n"""
        step = result.get("step", "unknown")
        message = result.get("message", "Error desconocido")
        error = result.get("error", "")
        
        error_panel = Panel(
            f"[bold red]‚ùå {message}[/bold red]\n\n"
            f"üîç [bold]Paso fallido:[/bold] [yellow]{step}[/yellow]\n"
            f"üìù [bold]Detalles:[/bold] [dim]{error}[/dim]",
            title="Error en Generaci√≥n de Pruebas",
            border_style="red"
        )
        self.console.print(error_panel)
        
        # Sugerencias seg√∫n el paso fallido
        if step == "compilation_validation":
            self.console.print("\nüí° [bold]Sugerencias:[/bold]")
            self.console.print("   ‚Ä¢ Verifica que el proyecto compile correctamente")
            self.console.print("   ‚Ä¢ Ejecuta 'dotnet build' manualmente para ver errores")
            self.console.print("   ‚Ä¢ Corrige errores de compilaci√≥n antes de continuar")
        elif step == "ai_analysis":
            self.console.print("\nüí° [bold]Sugerencias:[/bold]")
            self.console.print("   ‚Ä¢ Verifica que la API key est√© configurada correctamente")
            self.console.print("   ‚Ä¢ Aseg√∫rate de que el proyecto tenga archivos .cs v√°lidos")
            self.console.print("   ‚Ä¢ Intenta ejecutar 'config' para reconfigurar la IA")
        elif step == "test_project_creation":
            self.console.print("\nüí° [bold]Sugerencias:[/bold]")
            self.console.print("   ‚Ä¢ Verifica que .NET SDK est√© instalado")
            self.console.print("   ‚Ä¢ Aseg√∫rate de tener permisos de escritura en el directorio")
            self.console.print("   ‚Ä¢ Verifica que no exista ya un proyecto de pruebas")
    
    async def _cmd_validate(self, args: List[str]):
        """Valida las pruebas generadas usando memoria"""
        if not self.current_project_path:
            self.console.print("‚ùå No hay proyecto seleccionado")
            return
        
        # Verificar configuraci√≥n de API
        if not self._check_ai_required("validate"):
            return
        
        try:
            self.console.print("üîç Validando pruebas generadas usando memoria...")
            
            # Leer c√≥digo del proyecto (incluyendo archivos de prueba si existen)
            code_content = await self._read_project_code_with_tests()
            
            with Live(Spinner("dots", text="Validando c√≥digo y pruebas..."), console=self.console) as live:
                result = self.agents['validation'].validate_code(code_content)
                live.update(Text("‚úÖ Validaci√≥n completada", style="green"))
            
            # Mostrar resultado
            if result:
                self.console.print(Panel(result, title="Resultado de Validaci√≥n", border_style="yellow"))
            else:
                self.console.print("‚ö†Ô∏è  No se obtuvieron resultados de validaci√≥n")
            
        except Exception as e:
            self.console.print(f"‚ùå Error durante la validaci√≥n: {e}")
    
    async def _read_project_code_with_tests(self) -> str:
        """Lee el c√≥digo del proyecto incluyendo archivos de prueba"""
        try:
            code_files = []
            project_path = Path(self.current_project_path)
            
            # Buscar archivos .cs en el proyecto principal
            for cs_file in project_path.rglob("*.cs"):
                try:
                    content = cs_file.read_text(encoding='utf-8')
                    code_files.append(f"// {cs_file.name}\n{content}\n")
                except Exception as e:
                    self.logger.warning(f"No se pudo leer {cs_file}: {e}")
            
            # Buscar archivos de prueba en proyectos relacionados
            parent_dir = project_path.parent
            for test_project in parent_dir.rglob("*Tests"):
                if test_project.is_dir() and test_project != project_path:
                    for test_file in test_project.rglob("*.cs"):
                        try:
                            content = test_file.read_text(encoding='utf-8')
                            code_files.append(f"// {test_file.name} (PRUEBA)\n{content}\n")
                        except Exception as e:
                            self.logger.warning(f"No se pudo leer archivo de prueba {test_file}: {e}")
            
            return "\n".join(code_files) if code_files else "// No se encontraron archivos .cs"
            
        except Exception as e:
            self.logger.error(f"Error leyendo c√≥digo del proyecto con pruebas: {e}")
            return "// Error leyendo c√≥digo del proyecto"
    
    def _display_validation_results(self, result: Dict[str, Any]):
        """Muestra los resultados de la validaci√≥n"""
        if not result:
            self.console.print("‚ö†Ô∏è  No se obtuvieron resultados de la validaci√≥n")
            return
        
        table = Table(title="‚úÖ Resultados de Validaci√≥n", show_header=True, header_style="bold green")
        table.add_column("Prueba", style="cyan")
        table.add_column("Estado", style="green")
        table.add_column("Detalles", style="dim")
        
        if 'tests_passed' in result:
            table.add_row("Pruebas ejecutadas", "‚úÖ Exitosas", str(result['tests_passed']))
        if 'tests_failed' in result:
            table.add_row("Pruebas fallidas", "‚ùå Fallidas", str(result['tests_failed']))
        
        self.console.print(table)
    
    async def _cmd_optimize(self, args: List[str]):
        """Optimiza las pruebas existentes"""
        if not self.current_project_path:
            self.console.print("‚ùå No hay proyecto seleccionado")
            return
        
        # Verificar configuraci√≥n de API
        if not self._check_ai_required("optimize"):
            return
        
        try:
            self.console.print("‚ö° Optimizando pruebas...")
            
            # Leer c√≥digo del proyecto
            code_content = await self._read_project_code()
            
            with Live(Spinner("dots", text="Optimizando pruebas..."), console=self.console) as live:
                result = self.agents['optimization'].optimize_code(code_content)
                live.update(Text("‚úÖ Optimizaci√≥n completada", style="green"))
            
            # Mostrar resultado
            if result:
                syntax = Syntax(result, "csharp", theme="monokai", line_numbers=True)
                self.console.print(Panel(syntax, title="C√≥digo Optimizado", border_style="magenta"))
            else:
                self.console.print("‚ö†Ô∏è  No se pudo optimizar el c√≥digo")
            
        except Exception as e:
            self.console.print(f"‚ùå Error durante la optimizaci√≥n: {e}")
    
    async def _cmd_run(self, args: List[str]):
        """Ejecuta el flujo completo"""
        if not self.current_project_path:
            self.console.print("‚ùå No hay proyecto seleccionado")
            self.console.print("üí° Usa 'discover' y 'select' para elegir un proyecto")
            return
        
        # Verificar configuraci√≥n de API
        if not self._check_ai_required("run"):
            return
        
        try:
            self.console.print(f"üöÄ Ejecutando flujo completo para: [bold]{self.current_project_info.name}[/bold]")
            
            # Flujo completo: an√°lisis ‚Üí generaci√≥n ‚Üí validaci√≥n
            steps = [
                ("üß† An√°lisis", self._cmd_analyze),
                ("‚ö° Generaci√≥n", self._cmd_generate),
                ("üîç Validaci√≥n", self._cmd_validate)
            ]
            
            for step_name, step_func in steps:
                self.console.print(f"\n{step_name}...")
                await step_func([])
                await asyncio.sleep(1)  # Pausa entre pasos
            
            self.console.print("\nüéâ ¬°Flujo completo ejecutado exitosamente!")
            
        except Exception as e:
            self.console.print(f"‚ùå Error durante el flujo completo: {e}")
    
    async def _cmd_config(self, args: List[str]):
        """Configura el proveedor de IA"""
        self.console.print("‚öôÔ∏è  [bold]Configuraci√≥n de proveedor de IA[/bold]")
        self.console.print()
        
        # Mostrar estado actual
        config_status = self.config_validator.check_api_configuration()
        if config_status["config_valid"]:
            provider_name = {
                "deepseek": "DeepSeek",
                "gemini": "Google Gemini",
                "openai": "OpenAI"
            }.get(config_status["provider"], config_status["provider"])
            
            self.console.print(f"‚úÖ [green]Configuraci√≥n actual:[/green] {provider_name}")
            self.console.print()
            
            if Confirm.ask("¬øDeseas reconfigurar?"):
                self._run_config_tool()
            else:
                self.console.print("Configuraci√≥n mantenida.")
        else:
            self.console.print("‚ùå [red]No hay configuraci√≥n v√°lida[/red]")
            self.console.print()
            self.console.print("üí° [bold]Para configurar tu proveedor de IA:[/bold]")
            self.console.print("   1. Selecciona tu proveedor (DeepSeek, Gemini, OpenAI)")
            self.console.print("   2. Ingresa tu API key")
            self.console.print()
            
            if Confirm.ask("¬øDeseas abrir la configuraci√≥n ahora?"):
                self._run_config_tool()
    
    def _run_config_tool(self):
        """Ejecuta la herramienta de configuraci√≥n"""
        try:
            import subprocess
            import sys
            
            self.console.print("üîÑ Abriendo herramienta de configuraci√≥n...")
            
            # Usar la ruta correcta del m√≥dulo
            result = subprocess.run([sys.executable, "-m", "src.cli.config_cli"], 
                                  capture_output=False, text=True)
            
            if result.returncode == 0:
                self.console.print("‚úÖ Configuraci√≥n completada")
                # Recargar configuraci√≥n
                self._reload_config()
            else:
                self.console.print("‚ùå Error en la configuraci√≥n")
                
        except Exception as e:
            self.console.print(f"‚ùå Error al ejecutar configuraci√≥n: {e}")
            self.console.print("üí° Ejecuta manualmente: [cyan]ia-agent-config[/cyan]")
    
    async def _cmd_clear(self, args: List[str]):
        """Limpia la pantalla"""
        self.console.clear()
        self.show_welcome()
    
    async def _cmd_exit(self, args: List[str]):
        """Sale del sistema"""
        self.console.print("üëã ¬°Hasta luego!")
        self.is_running = False
    
    def _cleanup(self):
        """Limpia recursos al salir"""
        self.console.print("[dim]Limpiando recursos...[/dim]")
        # Aqu√≠ se pueden agregar tareas de limpieza si es necesario


# Funci√≥n principal as√≠ncrona para ejecutar el CLI interactivo
async def async_main():
    """Funci√≥n principal as√≠ncrona del CLI interactivo"""
    try:
        # Configurar logging
        setup_logging("INFO")
        
        # Crear y ejecutar CLI
        cli = InteractiveCLI()
        await cli.run()
        
    except KeyboardInterrupt:
        console.print("\n[yellow]üëã Sesi√≥n interrumpida por el usuario[/yellow]")
    except Exception as e:
        console.print(f"[red]‚ùå Error cr√≠tico: {e}[/red]")
        logger.error(f"Error cr√≠tico en CLI interactivo: {e}")


# Funci√≥n principal s√≠ncrona para el entry point
def main():
    """Funci√≥n principal s√≠ncrona del CLI interactivo"""
    try:
        asyncio.run(async_main())
    except KeyboardInterrupt:
        print("\n¬°Hasta luego!")
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
CLI de configuraci√≥n para IA Agent
IA Agent para Generaci√≥n de Pruebas Unitarias .NET
"""

import os
import sys
from pathlib import Path
from typing import Optional, Dict, Any

# Agregar el directorio src al path para imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.panel import Panel
from rich.table import Table
from rich.text import Text

from utils.logging import get_logger
from config.global_config import global_config_manager, GlobalConfig

console = Console()
logger = get_logger("config-cli")


class ConfigCLI:
    """CLI para configuraci√≥n de API keys y proveedores"""
    
    def __init__(self):
        self.config_manager = global_config_manager
        self.providers = {
            "1": {
                "name": "DeepSeek",
                "key": "DEEPSEEK_API_KEY",
                "model": "deepseek-coder",
                "provider": "deepseek",
                "description": "Especializado en programaci√≥n, m√°s econ√≥mico",
                "url": "https://platform.deepseek.com/"
            },
            "2": {
                "name": "Gemini Flash",
                "key": "GEMINI_API_KEY", 
                "model": "gemini-2.5-flash",
                "provider": "gemini",
                "description": "Google AI 2.5, r√°pido y eficiente para an√°lisis general",
                "url": "https://makersuite.google.com/app/apikey"
            },
            "3": {
                "name": "Gemini Pro",
                "key": "GEMINI_API_KEY", 
                "model": "gemini-2.5-pro",
                "provider": "gemini",
                "description": "Google AI 2.5 Pro, m√°s potente para tareas complejas",
                "url": "https://makersuite.google.com/app/apikey"
            },
            "4": {
                "name": "OpenAI",
                "key": "OPENAI_API_KEY",
                "model": "gpt-4",
                "provider": "openai",
                "description": "Est√°ndar de la industria, m√°s caro",
                "url": "https://platform.openai.com/api-keys"
            }
        }
    
    def show_welcome(self):
        """Mostrar mensaje de bienvenida"""
        welcome_text = Text()
        welcome_text.append("üîß ", style="bold blue")
        welcome_text.append("Configuraci√≥n de IA Agent", style="bold")
        welcome_text.append("\n\nConfigura tu proveedor de IA y API key para comenzar a usar el sistema.")
        
        console.print(Panel(welcome_text, title="IA Agent - Configuraci√≥n", border_style="blue"))
    
    def show_providers(self):
        """Mostrar proveedores disponibles"""
        table = Table(title="ü§ñ Proveedores de IA Disponibles")
        table.add_column("ID", style="cyan", no_wrap=True)
        table.add_column("Proveedor", style="magenta")
        table.add_column("Modelo", style="green")
        table.add_column("Descripci√≥n", style="white")
        
        for provider_id, provider in self.providers.items():
            table.add_row(
                provider_id,
                provider["name"],
                provider["model"],
                provider["description"]
            )
        
        console.print(table)
        console.print()
    
    def get_provider_choice(self) -> str:
        """Obtener elecci√≥n del proveedor"""
        while True:
            choice = Prompt.ask(
                "Selecciona un proveedor (1-4)",
                choices=["1", "2", "3", "4"],
                default="1"
            )
            
            if choice in self.providers:
                return choice
            
            console.print("‚ùå Opci√≥n inv√°lida. Por favor selecciona 1, 2 o 3.", style="red")
    
    def get_api_key(self, provider_name: str) -> str:
        """Obtener API key del usuario"""
        console.print(f"\nüîë Configuraci√≥n de API Key para {provider_name}")
        console.print("üí° Tu API key se guardar√° globalmente para todos tus proyectos")
        
        while True:
            api_key = Prompt.ask(
                f"Ingresa tu API key de {provider_name}",
                password=True
            )
            
            if api_key and len(api_key) > 10:
                return api_key
            
            console.print("‚ùå API key inv√°lida. Debe tener al menos 10 caracteres.", style="red")
    
    def show_provider_info(self, provider_id: str):
        """Mostrar informaci√≥n del proveedor seleccionado"""
        provider = self.providers[provider_id]
        
        info_text = Text()
        info_text.append(f"Proveedor: ", style="bold")
        info_text.append(f"{provider['name']}\n", style="cyan")
        info_text.append(f"Modelo: ", style="bold")
        info_text.append(f"{provider['model']}\n", style="green")
        info_text.append(f"Descripci√≥n: ", style="bold")
        info_text.append(f"{provider['description']}\n\n", style="white")
        info_text.append("Para obtener tu API key, visita:\n", style="bold")
        info_text.append(f"{provider['url']}", style="blue underline")
        
        console.print(Panel(info_text, title=f"üìã Informaci√≥n de {provider['name']}", border_style="green"))
    
    def save_config(self, provider_id: str, api_key: str):
        """Guardar configuraci√≥n globalmente"""
        provider = self.providers[provider_id]
        
        # Actualizar configuraci√≥n global
        success = self.config_manager.update_config(
            **{provider["key"].lower(): api_key},
            ai_provider=provider["provider"],
            ai_model=provider["model"],
            ai_temperature=0.1,
            ai_max_tokens=4000
        )
        
        if success:
            config_info = self.config_manager.get_config_info()
            console.print(f"‚úÖ Configuraci√≥n guardada globalmente en: {config_info['config_file']}", style="green")
        else:
            console.print("‚ùå Error al guardar configuraci√≥n global", style="red")
    
    def test_configuration(self, provider_id: str, api_key: str) -> bool:
        """Probar la configuraci√≥n"""
        provider = self.providers[provider_id]
        
        console.print(f"\nüß™ Probando configuraci√≥n de {provider['name']}...")
        
        try:
            # Importar y probar el proveedor
            if provider_id == "1":  # DeepSeek
                from ai.llm_manager import DeepSeekLLM
                llm = DeepSeekLLM(api_key=api_key, model=provider["model"])
                response = llm.invoke("Hola, ¬øpuedes responder con 'OK'?")
                if "OK" in response.content or "ok" in response.content.lower():
                    return True
                    
            elif provider_id == "2":  # Gemini
                from ai.llm_manager import GeminiLLM
                llm = GeminiLLM(api_key=api_key, model=provider["model"])
                response = llm.invoke("Hola, ¬øpuedes responder con 'OK'?")
                if "OK" in response.content or "ok" in response.content.lower():
                    return True
                    
            elif provider_id == "3":  # OpenAI
                from langchain_openai import ChatOpenAI
                llm = ChatOpenAI(api_key=api_key, model=provider["model"])
                response = llm.invoke("Hola, ¬øpuedes responder con 'OK'?")
                if "OK" in response.content or "ok" in response.content.lower():
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"Error al probar configuraci√≥n: {e}")
            return False
    
    def show_success(self, provider_name: str):
        """Mostrar mensaje de √©xito"""
        success_text = Text()
        success_text.append("üéâ ", style="bold green")
        success_text.append("¬°Configuraci√≥n completada exitosamente!\n\n", style="bold green")
        success_text.append(f"Proveedor: ", style="bold")
        success_text.append(f"{provider_name}\n", style="cyan")
        success_text.append("Estado: ", style="bold")
        success_text.append("‚úÖ Configurado y funcionando\n\n", style="green")
        success_text.append("Ahora puedes usar el sistema en cualquier proyecto:\n", style="bold")
        success_text.append("‚Ä¢ ia-agent --help\n", style="blue")
        success_text.append("‚Ä¢ ia-agent analyze --project ./mi-proyecto\n", style="blue")
        success_text.append("‚Ä¢ ia-agent generate --file ./Controllers/UserController.cs\n\n", style="blue")
        success_text.append("üí° La configuraci√≥n es global y se aplica a todos tus proyectos", style="yellow")
        
        console.print(Panel(success_text, title="‚úÖ Configuraci√≥n Exitosa", border_style="green"))
    
    def show_current_config(self):
        """Mostrar configuraci√≥n actual"""
        config_info = self.config_manager.get_config_info()
        
        config_text = Text()
        config_text.append("üìä ", style="bold blue")
        config_text.append("Configuraci√≥n Actual de IA Agent\n\n", style="bold blue")
        config_text.append("Archivo de configuraci√≥n: ", style="bold")
        config_text.append(f"{config_info['config_file']}\n", style="cyan")
        config_text.append("Proveedor: ", style="bold")
        config_text.append(f"{config_info['ai_provider']}\n", style="green")
        config_text.append("Modelo: ", style="bold")
        config_text.append(f"{config_info['ai_model']}\n", style="green")
        config_text.append("Estado: ", style="bold")
        config_text.append("‚úÖ Configurado\n" if config_info['is_configured'] else "‚ùå No configurado\n", 
                          style="green" if config_info['is_configured'] else "red")
        
        console.print(Panel(config_text, title="üîß Configuraci√≥n Actual", border_style="blue"))
    
    def run(self):
        """Ejecutar CLI de configuraci√≥n"""
        try:
            self.show_welcome()
            self.show_providers()
            
            # Verificar si ya existe configuraci√≥n global
            if self.config_manager.is_configured():
                config_info = self.config_manager.get_config_info()
                console.print(f"Ya existe configuraci√≥n global para {config_info['ai_provider']}")
                if not Confirm.ask("¬øDeseas reconfigurar?"):
                    console.print("Configuraci√≥n cancelada.", style="yellow")
                    return
            
            # Obtener elecci√≥n del proveedor
            provider_id = self.get_provider_choice()
            provider = self.providers[provider_id]
            
            # Mostrar informaci√≥n del proveedor
            self.show_provider_info(provider_id)
            
            # Obtener API key
            api_key = self.get_api_key(provider["name"])
            
            # Probar configuraci√≥n
            if Confirm.ask("¬øDeseas probar la configuraci√≥n antes de guardar?"):
                if self.test_configuration(provider_id, api_key):
                    console.print("‚úÖ Configuraci√≥n probada exitosamente!", style="green")
                else:
                    console.print("‚ùå Error en la configuraci√≥n. Verifica tu API key.", style="red")
                    if not Confirm.ask("¬øDeseas continuar de todos modos?"):
                        console.print("Configuraci√≥n cancelada.", style="yellow")
                        return
            
            # Guardar configuraci√≥n
            self.save_config(provider_id, api_key)
            
            # Mostrar √©xito
            self.show_success(provider["name"])
            
        except KeyboardInterrupt:
            console.print("\n\nConfiguraci√≥n cancelada por el usuario.", style="yellow")
        except Exception as e:
            logger.error(f"Error en configuraci√≥n: {e}")
            console.print(f"‚ùå Error: {e}", style="red")


def main():
    """Funci√≥n principal"""
    import sys
    
    cli = ConfigCLI()
    
    # Verificar argumentos de l√≠nea de comandos
    if len(sys.argv) > 1:
        if sys.argv[1] == "--status" or sys.argv[1] == "-s":
            cli.show_current_config()
            return
        elif sys.argv[1] == "--help" or sys.argv[1] == "-h":
            help_text = Text()
            help_text.append("üîß ", style="bold blue")
            help_text.append("IA Agent - Configuraci√≥n\n\n", style="bold blue")
            help_text.append("Uso:\n", style="bold")
            help_text.append("  ia-agent-config          Configurar el agente interactivamente\n", style="white")
            help_text.append("  ia-agent-config --status Mostrar configuraci√≥n actual\n", style="white")
            help_text.append("  ia-agent-config --help   Mostrar esta ayuda\n\n", style="white")
            help_text.append("La configuraci√≥n se guarda globalmente y se aplica a todos tus proyectos.", style="yellow")
            console.print(Panel(help_text, title="Ayuda", border_style="blue"))
            return
    
    # Ejecutar configuraci√≥n interactiva
    cli.run()


if __name__ == "__main__":
    main()

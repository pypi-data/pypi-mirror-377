# coding: utf-8

"""
    Invoicetronic API

    The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

    The version of the OpenAPI document: 1
    Contact: info@invoicetronic.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from invoicetronic_sdk.models.event import Event

from invoicetronic_sdk.api_client import ApiClient, RequestSerialized
from invoicetronic_sdk.api_response import ApiResponse
from invoicetronic_sdk.rest import RESTResponseType


class LogApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def log_get(
        self,
        company_id: Annotated[Optional[StrictInt], Field(description="Company id")] = None,
        endpoint: Optional[StrictStr] = None,
        method: Optional[StrictStr] = None,
        api_verion: Annotated[Optional[StrictInt], Field(description="Api version")] = None,
        status_code: Annotated[Optional[StrictInt], Field(description="Response status code")] = None,
        date_created_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        date_created_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Items per page. Cannot be greater than 200.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by field. Prefix with '-' for descending order.")] = None,
        query: Optional[StrictStr] = None,
        success: Optional[StrictBool] = None,
        date_time_from: Annotated[Optional[datetime], Field(description="Date and time of the event")] = None,
        date_time_to: Annotated[Optional[datetime], Field(description="Date and time of the event")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Event]:
        """List events

        Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.

        :param company_id: Company id
        :type company_id: int
        :param endpoint:
        :type endpoint: str
        :param method:
        :type method: str
        :param api_verion: Api version
        :type api_verion: int
        :param status_code: Response status code
        :type status_code: int
        :param date_created_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_created_from: datetime
        :param date_created_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_created_to: datetime
        :param page: Page number.
        :type page: int
        :param page_size: Items per page. Cannot be greater than 200.
        :type page_size: int
        :param sort: Sort by field. Prefix with '-' for descending order.
        :type sort: str
        :param query:
        :type query: str
        :param success:
        :type success: bool
        :param date_time_from: Date and time of the event
        :type date_time_from: datetime
        :param date_time_to: Date and time of the event
        :type date_time_to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._log_get_serialize(
            company_id=company_id,
            endpoint=endpoint,
            method=method,
            api_verion=api_verion,
            status_code=status_code,
            date_created_from=date_created_from,
            date_created_to=date_created_to,
            page=page,
            page_size=page_size,
            sort=sort,
            query=query,
            success=success,
            date_time_from=date_time_from,
            date_time_to=date_time_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Event]",
            '404': None,
            '400': "ProblemHttpResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def log_get_with_http_info(
        self,
        company_id: Annotated[Optional[StrictInt], Field(description="Company id")] = None,
        endpoint: Optional[StrictStr] = None,
        method: Optional[StrictStr] = None,
        api_verion: Annotated[Optional[StrictInt], Field(description="Api version")] = None,
        status_code: Annotated[Optional[StrictInt], Field(description="Response status code")] = None,
        date_created_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        date_created_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Items per page. Cannot be greater than 200.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by field. Prefix with '-' for descending order.")] = None,
        query: Optional[StrictStr] = None,
        success: Optional[StrictBool] = None,
        date_time_from: Annotated[Optional[datetime], Field(description="Date and time of the event")] = None,
        date_time_to: Annotated[Optional[datetime], Field(description="Date and time of the event")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Event]]:
        """List events

        Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.

        :param company_id: Company id
        :type company_id: int
        :param endpoint:
        :type endpoint: str
        :param method:
        :type method: str
        :param api_verion: Api version
        :type api_verion: int
        :param status_code: Response status code
        :type status_code: int
        :param date_created_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_created_from: datetime
        :param date_created_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_created_to: datetime
        :param page: Page number.
        :type page: int
        :param page_size: Items per page. Cannot be greater than 200.
        :type page_size: int
        :param sort: Sort by field. Prefix with '-' for descending order.
        :type sort: str
        :param query:
        :type query: str
        :param success:
        :type success: bool
        :param date_time_from: Date and time of the event
        :type date_time_from: datetime
        :param date_time_to: Date and time of the event
        :type date_time_to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._log_get_serialize(
            company_id=company_id,
            endpoint=endpoint,
            method=method,
            api_verion=api_verion,
            status_code=status_code,
            date_created_from=date_created_from,
            date_created_to=date_created_to,
            page=page,
            page_size=page_size,
            sort=sort,
            query=query,
            success=success,
            date_time_from=date_time_from,
            date_time_to=date_time_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Event]",
            '404': None,
            '400': "ProblemHttpResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def log_get_without_preload_content(
        self,
        company_id: Annotated[Optional[StrictInt], Field(description="Company id")] = None,
        endpoint: Optional[StrictStr] = None,
        method: Optional[StrictStr] = None,
        api_verion: Annotated[Optional[StrictInt], Field(description="Api version")] = None,
        status_code: Annotated[Optional[StrictInt], Field(description="Response status code")] = None,
        date_created_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        date_created_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Items per page. Cannot be greater than 200.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by field. Prefix with '-' for descending order.")] = None,
        query: Optional[StrictStr] = None,
        success: Optional[StrictBool] = None,
        date_time_from: Annotated[Optional[datetime], Field(description="Date and time of the event")] = None,
        date_time_to: Annotated[Optional[datetime], Field(description="Date and time of the event")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List events

        Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.

        :param company_id: Company id
        :type company_id: int
        :param endpoint:
        :type endpoint: str
        :param method:
        :type method: str
        :param api_verion: Api version
        :type api_verion: int
        :param status_code: Response status code
        :type status_code: int
        :param date_created_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_created_from: datetime
        :param date_created_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_created_to: datetime
        :param page: Page number.
        :type page: int
        :param page_size: Items per page. Cannot be greater than 200.
        :type page_size: int
        :param sort: Sort by field. Prefix with '-' for descending order.
        :type sort: str
        :param query:
        :type query: str
        :param success:
        :type success: bool
        :param date_time_from: Date and time of the event
        :type date_time_from: datetime
        :param date_time_to: Date and time of the event
        :type date_time_to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._log_get_serialize(
            company_id=company_id,
            endpoint=endpoint,
            method=method,
            api_verion=api_verion,
            status_code=status_code,
            date_created_from=date_created_from,
            date_created_to=date_created_to,
            page=page,
            page_size=page_size,
            sort=sort,
            query=query,
            success=success,
            date_time_from=date_time_from,
            date_time_to=date_time_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Event]",
            '404': None,
            '400': "ProblemHttpResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _log_get_serialize(
        self,
        company_id,
        endpoint,
        method,
        api_verion,
        status_code,
        date_created_from,
        date_created_to,
        page,
        page_size,
        sort,
        query,
        success,
        date_time_from,
        date_time_to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if company_id is not None:
            
            _query_params.append(('company_id', company_id))
            
        if endpoint is not None:
            
            _query_params.append(('endpoint', endpoint))
            
        if method is not None:
            
            _query_params.append(('method', method))
            
        if api_verion is not None:
            
            _query_params.append(('api_verion', api_verion))
            
        if status_code is not None:
            
            _query_params.append(('status_code', status_code))
            
        if date_created_from is not None:
            if isinstance(date_created_from, datetime):
                _query_params.append(
                    (
                        'date_created_from',
                        date_created_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date_created_from', date_created_from))
            
        if date_created_to is not None:
            if isinstance(date_created_to, datetime):
                _query_params.append(
                    (
                        'date_created_to',
                        date_created_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date_created_to', date_created_to))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if success is not None:
            
            _query_params.append(('success', success))
            
        if date_time_from is not None:
            if isinstance(date_time_from, datetime):
                _query_params.append(
                    (
                        'date_time_from',
                        date_time_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date_time_from', date_time_from))
            
        if date_time_to is not None:
            if isinstance(date_time_to, datetime):
                _query_params.append(
                    (
                        'date_time_to',
                        date_time_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date_time_to', date_time_to))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/log',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def log_id_get(
        self,
        id: Annotated[StrictInt, Field(description="Item id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Event:
        """Get an event by id

        Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.

        :param id: Item id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._log_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Event",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def log_id_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Item id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Event]:
        """Get an event by id

        Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.

        :param id: Item id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._log_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Event",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def log_id_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Item id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an event by id

        Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.

        :param id: Item id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._log_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Event",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _log_id_get_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/log/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



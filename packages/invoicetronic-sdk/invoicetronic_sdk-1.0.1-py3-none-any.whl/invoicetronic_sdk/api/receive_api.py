# coding: utf-8

"""
    Invoicetronic API

    The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

    The version of the OpenAPI document: 1
    Contact: info@invoicetronic.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from invoicetronic_sdk.models.receive import Receive

from invoicetronic_sdk.api_client import ApiClient, RequestSerialized
from invoicetronic_sdk.api_response import ApiResponse
from invoicetronic_sdk.rest import RESTResponseType


class ReceiveApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def receive_get(
        self,
        company_id: Annotated[Optional[StrictInt], Field(description="Company id")] = None,
        identifier: Annotated[Optional[StrictStr], Field(description="SDI identifier.")] = None,
        unread: Annotated[Optional[StrictBool], Field(description="Unread items only.")] = None,
        committente: Annotated[Optional[StrictStr], Field(description="Vat number or fiscal code.")] = None,
        prestatore: Annotated[Optional[StrictStr], Field(description="Vat number or fiscal code.")] = None,
        file_name: Annotated[Optional[StrictStr], Field(description="File name.")] = None,
        last_update_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        last_update_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        date_sent_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        date_sent_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        document_date_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        document_date_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        document_number: Annotated[Optional[StrictStr], Field(description="Document number.")] = None,
        include_payload: Annotated[Optional[StrictBool], Field(description="Include payload in the response. Defaults to false.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Items per page. Cannot be greater than 200.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by field. Prefix with '-' for descending order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Receive]:
        """List incoming invoices

        Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.

        :param company_id: Company id
        :type company_id: int
        :param identifier: SDI identifier.
        :type identifier: str
        :param unread: Unread items only.
        :type unread: bool
        :param committente: Vat number or fiscal code.
        :type committente: str
        :param prestatore: Vat number or fiscal code.
        :type prestatore: str
        :param file_name: File name.
        :type file_name: str
        :param last_update_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type last_update_from: datetime
        :param last_update_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type last_update_to: datetime
        :param date_sent_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_sent_from: datetime
        :param date_sent_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_sent_to: datetime
        :param document_date_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type document_date_from: datetime
        :param document_date_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type document_date_to: datetime
        :param document_number: Document number.
        :type document_number: str
        :param include_payload: Include payload in the response. Defaults to false.
        :type include_payload: bool
        :param page: Page number.
        :type page: int
        :param page_size: Items per page. Cannot be greater than 200.
        :type page_size: int
        :param sort: Sort by field. Prefix with '-' for descending order.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._receive_get_serialize(
            company_id=company_id,
            identifier=identifier,
            unread=unread,
            committente=committente,
            prestatore=prestatore,
            file_name=file_name,
            last_update_from=last_update_from,
            last_update_to=last_update_to,
            date_sent_from=date_sent_from,
            date_sent_to=date_sent_to,
            document_date_from=document_date_from,
            document_date_to=document_date_to,
            document_number=document_number,
            include_payload=include_payload,
            page=page,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Receive]",
            '404': None,
            '400': "ProblemHttpResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def receive_get_with_http_info(
        self,
        company_id: Annotated[Optional[StrictInt], Field(description="Company id")] = None,
        identifier: Annotated[Optional[StrictStr], Field(description="SDI identifier.")] = None,
        unread: Annotated[Optional[StrictBool], Field(description="Unread items only.")] = None,
        committente: Annotated[Optional[StrictStr], Field(description="Vat number or fiscal code.")] = None,
        prestatore: Annotated[Optional[StrictStr], Field(description="Vat number or fiscal code.")] = None,
        file_name: Annotated[Optional[StrictStr], Field(description="File name.")] = None,
        last_update_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        last_update_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        date_sent_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        date_sent_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        document_date_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        document_date_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        document_number: Annotated[Optional[StrictStr], Field(description="Document number.")] = None,
        include_payload: Annotated[Optional[StrictBool], Field(description="Include payload in the response. Defaults to false.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Items per page. Cannot be greater than 200.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by field. Prefix with '-' for descending order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Receive]]:
        """List incoming invoices

        Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.

        :param company_id: Company id
        :type company_id: int
        :param identifier: SDI identifier.
        :type identifier: str
        :param unread: Unread items only.
        :type unread: bool
        :param committente: Vat number or fiscal code.
        :type committente: str
        :param prestatore: Vat number or fiscal code.
        :type prestatore: str
        :param file_name: File name.
        :type file_name: str
        :param last_update_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type last_update_from: datetime
        :param last_update_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type last_update_to: datetime
        :param date_sent_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_sent_from: datetime
        :param date_sent_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_sent_to: datetime
        :param document_date_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type document_date_from: datetime
        :param document_date_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type document_date_to: datetime
        :param document_number: Document number.
        :type document_number: str
        :param include_payload: Include payload in the response. Defaults to false.
        :type include_payload: bool
        :param page: Page number.
        :type page: int
        :param page_size: Items per page. Cannot be greater than 200.
        :type page_size: int
        :param sort: Sort by field. Prefix with '-' for descending order.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._receive_get_serialize(
            company_id=company_id,
            identifier=identifier,
            unread=unread,
            committente=committente,
            prestatore=prestatore,
            file_name=file_name,
            last_update_from=last_update_from,
            last_update_to=last_update_to,
            date_sent_from=date_sent_from,
            date_sent_to=date_sent_to,
            document_date_from=document_date_from,
            document_date_to=document_date_to,
            document_number=document_number,
            include_payload=include_payload,
            page=page,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Receive]",
            '404': None,
            '400': "ProblemHttpResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def receive_get_without_preload_content(
        self,
        company_id: Annotated[Optional[StrictInt], Field(description="Company id")] = None,
        identifier: Annotated[Optional[StrictStr], Field(description="SDI identifier.")] = None,
        unread: Annotated[Optional[StrictBool], Field(description="Unread items only.")] = None,
        committente: Annotated[Optional[StrictStr], Field(description="Vat number or fiscal code.")] = None,
        prestatore: Annotated[Optional[StrictStr], Field(description="Vat number or fiscal code.")] = None,
        file_name: Annotated[Optional[StrictStr], Field(description="File name.")] = None,
        last_update_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        last_update_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        date_sent_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        date_sent_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        document_date_from: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        document_date_to: Annotated[Optional[datetime], Field(description="UTC ISO 8601 (2024-11-29T12:34:56Z)")] = None,
        document_number: Annotated[Optional[StrictStr], Field(description="Document number.")] = None,
        include_payload: Annotated[Optional[StrictBool], Field(description="Include payload in the response. Defaults to false.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Items per page. Cannot be greater than 200.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by field. Prefix with '-' for descending order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List incoming invoices

        Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.

        :param company_id: Company id
        :type company_id: int
        :param identifier: SDI identifier.
        :type identifier: str
        :param unread: Unread items only.
        :type unread: bool
        :param committente: Vat number or fiscal code.
        :type committente: str
        :param prestatore: Vat number or fiscal code.
        :type prestatore: str
        :param file_name: File name.
        :type file_name: str
        :param last_update_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type last_update_from: datetime
        :param last_update_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type last_update_to: datetime
        :param date_sent_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_sent_from: datetime
        :param date_sent_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type date_sent_to: datetime
        :param document_date_from: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type document_date_from: datetime
        :param document_date_to: UTC ISO 8601 (2024-11-29T12:34:56Z)
        :type document_date_to: datetime
        :param document_number: Document number.
        :type document_number: str
        :param include_payload: Include payload in the response. Defaults to false.
        :type include_payload: bool
        :param page: Page number.
        :type page: int
        :param page_size: Items per page. Cannot be greater than 200.
        :type page_size: int
        :param sort: Sort by field. Prefix with '-' for descending order.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._receive_get_serialize(
            company_id=company_id,
            identifier=identifier,
            unread=unread,
            committente=committente,
            prestatore=prestatore,
            file_name=file_name,
            last_update_from=last_update_from,
            last_update_to=last_update_to,
            date_sent_from=date_sent_from,
            date_sent_to=date_sent_to,
            document_date_from=document_date_from,
            document_date_to=document_date_to,
            document_number=document_number,
            include_payload=include_payload,
            page=page,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Receive]",
            '404': None,
            '400': "ProblemHttpResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _receive_get_serialize(
        self,
        company_id,
        identifier,
        unread,
        committente,
        prestatore,
        file_name,
        last_update_from,
        last_update_to,
        date_sent_from,
        date_sent_to,
        document_date_from,
        document_date_to,
        document_number,
        include_payload,
        page,
        page_size,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if company_id is not None:
            
            _query_params.append(('company_id', company_id))
            
        if identifier is not None:
            
            _query_params.append(('identifier', identifier))
            
        if unread is not None:
            
            _query_params.append(('unread', unread))
            
        if committente is not None:
            
            _query_params.append(('committente', committente))
            
        if prestatore is not None:
            
            _query_params.append(('prestatore', prestatore))
            
        if file_name is not None:
            
            _query_params.append(('file_name', file_name))
            
        if last_update_from is not None:
            if isinstance(last_update_from, datetime):
                _query_params.append(
                    (
                        'last_update_from',
                        last_update_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('last_update_from', last_update_from))
            
        if last_update_to is not None:
            if isinstance(last_update_to, datetime):
                _query_params.append(
                    (
                        'last_update_to',
                        last_update_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('last_update_to', last_update_to))
            
        if date_sent_from is not None:
            if isinstance(date_sent_from, datetime):
                _query_params.append(
                    (
                        'date_sent_from',
                        date_sent_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date_sent_from', date_sent_from))
            
        if date_sent_to is not None:
            if isinstance(date_sent_to, datetime):
                _query_params.append(
                    (
                        'date_sent_to',
                        date_sent_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date_sent_to', date_sent_to))
            
        if document_date_from is not None:
            if isinstance(document_date_from, datetime):
                _query_params.append(
                    (
                        'document_date_from',
                        document_date_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('document_date_from', document_date_from))
            
        if document_date_to is not None:
            if isinstance(document_date_to, datetime):
                _query_params.append(
                    (
                        'document_date_to',
                        document_date_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('document_date_to', document_date_to))
            
        if document_number is not None:
            
            _query_params.append(('document_number', document_number))
            
        if include_payload is not None:
            
            _query_params.append(('include_payload', include_payload))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/receive',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def receive_id_delete(
        self,
        id: Annotated[StrictInt, Field(description="Item id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Receive:
        """Delete an incoming invoice by id

        Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.

        :param id: Item id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._receive_id_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Receive",
            '422': "ProblemHttpResult",
            '400': "ProblemHttpResult",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def receive_id_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Item id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Receive]:
        """Delete an incoming invoice by id

        Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.

        :param id: Item id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._receive_id_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Receive",
            '422': "ProblemHttpResult",
            '400': "ProblemHttpResult",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def receive_id_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Item id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an incoming invoice by id

        Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.

        :param id: Item id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._receive_id_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Receive",
            '422': "ProblemHttpResult",
            '400': "ProblemHttpResult",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _receive_id_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/receive/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def receive_id_get(
        self,
        id: Annotated[StrictInt, Field(description="Item id")],
        include_payload: Annotated[Optional[StrictBool], Field(description="Include payload in the response. Defaults to false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Receive:
        """Get an incoming invoice by id

        Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.

        :param id: Item id (required)
        :type id: int
        :param include_payload: Include payload in the response. Defaults to false.
        :type include_payload: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._receive_id_get_serialize(
            id=id,
            include_payload=include_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Receive",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def receive_id_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Item id")],
        include_payload: Annotated[Optional[StrictBool], Field(description="Include payload in the response. Defaults to false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Receive]:
        """Get an incoming invoice by id

        Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.

        :param id: Item id (required)
        :type id: int
        :param include_payload: Include payload in the response. Defaults to false.
        :type include_payload: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._receive_id_get_serialize(
            id=id,
            include_payload=include_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Receive",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def receive_id_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Item id")],
        include_payload: Annotated[Optional[StrictBool], Field(description="Include payload in the response. Defaults to false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an incoming invoice by id

        Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.

        :param id: Item id (required)
        :type id: int
        :param include_payload: Include payload in the response. Defaults to false.
        :type include_payload: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._receive_id_get_serialize(
            id=id,
            include_payload=include_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Receive",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _receive_id_get_serialize(
        self,
        id,
        include_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if include_payload is not None:
            
            _query_params.append(('include_payload', include_payload))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/receive/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



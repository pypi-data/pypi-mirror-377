# coding: utf-8

"""
    Invoicetronic API

    The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

    The version of the OpenAPI document: 1
    Contact: info@invoicetronic.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from invoicetronic_sdk.models.contatti import Contatti
from invoicetronic_sdk.models.dati_anagrafici_cedente_prestatore import DatiAnagraficiCedentePrestatore
from invoicetronic_sdk.models.iscrizione_rea import IscrizioneREA
from invoicetronic_sdk.models.sede_cedente_prestatore import SedeCedentePrestatore
from invoicetronic_sdk.models.stabile_organizzazione import StabileOrganizzazione
from typing import Optional, Set
from typing_extensions import Self

class CedentePrestatore(BaseModel):
    """
    CedentePrestatore
    """ # noqa: E501
    dati_anagrafici: Optional[DatiAnagraficiCedentePrestatore] = None
    sede: Optional[SedeCedentePrestatore] = None
    stabile_organizzazione: Optional[StabileOrganizzazione] = None
    iscrizione_rea: Optional[IscrizioneREA] = None
    contatti: Optional[Contatti] = None
    riferimento_amministrazione: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["dati_anagrafici", "sede", "stabile_organizzazione", "iscrizione_rea", "contatti", "riferimento_amministrazione"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CedentePrestatore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dati_anagrafici
        if self.dati_anagrafici:
            _dict['dati_anagrafici'] = self.dati_anagrafici.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sede
        if self.sede:
            _dict['sede'] = self.sede.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stabile_organizzazione
        if self.stabile_organizzazione:
            _dict['stabile_organizzazione'] = self.stabile_organizzazione.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iscrizione_rea
        if self.iscrizione_rea:
            _dict['iscrizione_rea'] = self.iscrizione_rea.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contatti
        if self.contatti:
            _dict['contatti'] = self.contatti.to_dict()
        # set to None if riferimento_amministrazione (nullable) is None
        # and model_fields_set contains the field
        if self.riferimento_amministrazione is None and "riferimento_amministrazione" in self.model_fields_set:
            _dict['riferimento_amministrazione'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CedentePrestatore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dati_anagrafici": DatiAnagraficiCedentePrestatore.from_dict(obj["dati_anagrafici"]) if obj.get("dati_anagrafici") is not None else None,
            "sede": SedeCedentePrestatore.from_dict(obj["sede"]) if obj.get("sede") is not None else None,
            "stabile_organizzazione": StabileOrganizzazione.from_dict(obj["stabile_organizzazione"]) if obj.get("stabile_organizzazione") is not None else None,
            "iscrizione_rea": IscrizioneREA.from_dict(obj["iscrizione_rea"]) if obj.get("iscrizione_rea") is not None else None,
            "contatti": Contatti.from_dict(obj["contatti"]) if obj.get("contatti") is not None else None,
            "riferimento_amministrazione": obj.get("riferimento_amministrazione")
        })
        return _obj



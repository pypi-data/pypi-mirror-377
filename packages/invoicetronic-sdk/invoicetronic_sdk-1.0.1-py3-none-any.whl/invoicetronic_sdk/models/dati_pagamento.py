# coding: utf-8

"""
    Invoicetronic API

    The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

    The version of the OpenAPI document: 1
    Contact: info@invoicetronic.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from invoicetronic_sdk.models.dettaglio_pagamento import DettaglioPagamento
from typing import Optional, Set
from typing_extensions import Self

class DatiPagamento(BaseModel):
    """
    DatiPagamento
    """ # noqa: E501
    condizioni_pagamento: Optional[StrictStr] = None
    dettaglio_pagamento: Optional[List[DettaglioPagamento]] = None
    __properties: ClassVar[List[str]] = ["condizioni_pagamento", "dettaglio_pagamento"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatiPagamento from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dettaglio_pagamento (list)
        _items = []
        if self.dettaglio_pagamento:
            for _item_dettaglio_pagamento in self.dettaglio_pagamento:
                if _item_dettaglio_pagamento:
                    _items.append(_item_dettaglio_pagamento.to_dict())
            _dict['dettaglio_pagamento'] = _items
        # set to None if condizioni_pagamento (nullable) is None
        # and model_fields_set contains the field
        if self.condizioni_pagamento is None and "condizioni_pagamento" in self.model_fields_set:
            _dict['condizioni_pagamento'] = None

        # set to None if dettaglio_pagamento (nullable) is None
        # and model_fields_set contains the field
        if self.dettaglio_pagamento is None and "dettaglio_pagamento" in self.model_fields_set:
            _dict['dettaglio_pagamento'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatiPagamento from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "condizioni_pagamento": obj.get("condizioni_pagamento"),
            "dettaglio_pagamento": [DettaglioPagamento.from_dict(_item) for _item in obj["dettaglio_pagamento"]] if obj.get("dettaglio_pagamento") is not None else None
        })
        return _obj



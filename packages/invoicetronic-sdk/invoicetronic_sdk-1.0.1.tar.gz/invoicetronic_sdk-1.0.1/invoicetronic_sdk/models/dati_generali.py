# coding: utf-8

"""
    Invoicetronic API

    The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

    The version of the OpenAPI document: 1
    Contact: info@invoicetronic.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from invoicetronic_sdk.models.dati_contratto import DatiContratto
from invoicetronic_sdk.models.dati_convenzione import DatiConvenzione
from invoicetronic_sdk.models.dati_ddt import DatiDDT
from invoicetronic_sdk.models.dati_fatture_collegate import DatiFattureCollegate
from invoicetronic_sdk.models.dati_generali_documento import DatiGeneraliDocumento
from invoicetronic_sdk.models.dati_ordine_acquisto import DatiOrdineAcquisto
from invoicetronic_sdk.models.dati_ricezione import DatiRicezione
from invoicetronic_sdk.models.dati_sal import DatiSAL
from invoicetronic_sdk.models.dati_trasporto import DatiTrasporto
from invoicetronic_sdk.models.fattura_principale import FatturaPrincipale
from typing import Optional, Set
from typing_extensions import Self

class DatiGenerali(BaseModel):
    """
    DatiGenerali
    """ # noqa: E501
    dati_generali_documento: Optional[DatiGeneraliDocumento] = None
    dati_ordine_acquisto: Optional[List[DatiOrdineAcquisto]] = None
    dati_contratto: Optional[List[DatiContratto]] = None
    dati_convenzione: Optional[List[DatiConvenzione]] = None
    dati_ricezione: Optional[List[DatiRicezione]] = None
    dati_fatture_collegate: Optional[List[DatiFattureCollegate]] = None
    dati_sal: Optional[List[DatiSAL]] = None
    dati_ddt: Optional[List[DatiDDT]] = None
    dati_trasporto: Optional[DatiTrasporto] = None
    fattura_principale: Optional[FatturaPrincipale] = None
    __properties: ClassVar[List[str]] = ["dati_generali_documento", "dati_ordine_acquisto", "dati_contratto", "dati_convenzione", "dati_ricezione", "dati_fatture_collegate", "dati_sal", "dati_ddt", "dati_trasporto", "fattura_principale"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatiGenerali from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dati_generali_documento
        if self.dati_generali_documento:
            _dict['dati_generali_documento'] = self.dati_generali_documento.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dati_ordine_acquisto (list)
        _items = []
        if self.dati_ordine_acquisto:
            for _item_dati_ordine_acquisto in self.dati_ordine_acquisto:
                if _item_dati_ordine_acquisto:
                    _items.append(_item_dati_ordine_acquisto.to_dict())
            _dict['dati_ordine_acquisto'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dati_contratto (list)
        _items = []
        if self.dati_contratto:
            for _item_dati_contratto in self.dati_contratto:
                if _item_dati_contratto:
                    _items.append(_item_dati_contratto.to_dict())
            _dict['dati_contratto'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dati_convenzione (list)
        _items = []
        if self.dati_convenzione:
            for _item_dati_convenzione in self.dati_convenzione:
                if _item_dati_convenzione:
                    _items.append(_item_dati_convenzione.to_dict())
            _dict['dati_convenzione'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dati_ricezione (list)
        _items = []
        if self.dati_ricezione:
            for _item_dati_ricezione in self.dati_ricezione:
                if _item_dati_ricezione:
                    _items.append(_item_dati_ricezione.to_dict())
            _dict['dati_ricezione'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dati_fatture_collegate (list)
        _items = []
        if self.dati_fatture_collegate:
            for _item_dati_fatture_collegate in self.dati_fatture_collegate:
                if _item_dati_fatture_collegate:
                    _items.append(_item_dati_fatture_collegate.to_dict())
            _dict['dati_fatture_collegate'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dati_sal (list)
        _items = []
        if self.dati_sal:
            for _item_dati_sal in self.dati_sal:
                if _item_dati_sal:
                    _items.append(_item_dati_sal.to_dict())
            _dict['dati_sal'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dati_ddt (list)
        _items = []
        if self.dati_ddt:
            for _item_dati_ddt in self.dati_ddt:
                if _item_dati_ddt:
                    _items.append(_item_dati_ddt.to_dict())
            _dict['dati_ddt'] = _items
        # override the default output from pydantic by calling `to_dict()` of dati_trasporto
        if self.dati_trasporto:
            _dict['dati_trasporto'] = self.dati_trasporto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fattura_principale
        if self.fattura_principale:
            _dict['fattura_principale'] = self.fattura_principale.to_dict()
        # set to None if dati_ordine_acquisto (nullable) is None
        # and model_fields_set contains the field
        if self.dati_ordine_acquisto is None and "dati_ordine_acquisto" in self.model_fields_set:
            _dict['dati_ordine_acquisto'] = None

        # set to None if dati_contratto (nullable) is None
        # and model_fields_set contains the field
        if self.dati_contratto is None and "dati_contratto" in self.model_fields_set:
            _dict['dati_contratto'] = None

        # set to None if dati_convenzione (nullable) is None
        # and model_fields_set contains the field
        if self.dati_convenzione is None and "dati_convenzione" in self.model_fields_set:
            _dict['dati_convenzione'] = None

        # set to None if dati_ricezione (nullable) is None
        # and model_fields_set contains the field
        if self.dati_ricezione is None and "dati_ricezione" in self.model_fields_set:
            _dict['dati_ricezione'] = None

        # set to None if dati_fatture_collegate (nullable) is None
        # and model_fields_set contains the field
        if self.dati_fatture_collegate is None and "dati_fatture_collegate" in self.model_fields_set:
            _dict['dati_fatture_collegate'] = None

        # set to None if dati_sal (nullable) is None
        # and model_fields_set contains the field
        if self.dati_sal is None and "dati_sal" in self.model_fields_set:
            _dict['dati_sal'] = None

        # set to None if dati_ddt (nullable) is None
        # and model_fields_set contains the field
        if self.dati_ddt is None and "dati_ddt" in self.model_fields_set:
            _dict['dati_ddt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatiGenerali from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dati_generali_documento": DatiGeneraliDocumento.from_dict(obj["dati_generali_documento"]) if obj.get("dati_generali_documento") is not None else None,
            "dati_ordine_acquisto": [DatiOrdineAcquisto.from_dict(_item) for _item in obj["dati_ordine_acquisto"]] if obj.get("dati_ordine_acquisto") is not None else None,
            "dati_contratto": [DatiContratto.from_dict(_item) for _item in obj["dati_contratto"]] if obj.get("dati_contratto") is not None else None,
            "dati_convenzione": [DatiConvenzione.from_dict(_item) for _item in obj["dati_convenzione"]] if obj.get("dati_convenzione") is not None else None,
            "dati_ricezione": [DatiRicezione.from_dict(_item) for _item in obj["dati_ricezione"]] if obj.get("dati_ricezione") is not None else None,
            "dati_fatture_collegate": [DatiFattureCollegate.from_dict(_item) for _item in obj["dati_fatture_collegate"]] if obj.get("dati_fatture_collegate") is not None else None,
            "dati_sal": [DatiSAL.from_dict(_item) for _item in obj["dati_sal"]] if obj.get("dati_sal") is not None else None,
            "dati_ddt": [DatiDDT.from_dict(_item) for _item in obj["dati_ddt"]] if obj.get("dati_ddt") is not None else None,
            "dati_trasporto": DatiTrasporto.from_dict(obj["dati_trasporto"]) if obj.get("dati_trasporto") is not None else None,
            "fattura_principale": FatturaPrincipale.from_dict(obj["fattura_principale"]) if obj.get("fattura_principale") is not None else None
        })
        return _obj



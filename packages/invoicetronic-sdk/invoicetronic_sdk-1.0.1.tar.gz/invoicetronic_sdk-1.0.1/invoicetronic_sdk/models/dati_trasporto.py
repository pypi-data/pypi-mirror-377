# coding: utf-8

"""
    Invoicetronic API

    The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

    The version of the OpenAPI document: 1
    Contact: info@invoicetronic.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from invoicetronic_sdk.models.dati_anagrafici_vettore import DatiAnagraficiVettore
from invoicetronic_sdk.models.indirizzo_resa import IndirizzoResa
from typing import Optional, Set
from typing_extensions import Self

class DatiTrasporto(BaseModel):
    """
    DatiTrasporto
    """ # noqa: E501
    dati_anagrafici_vettore: Optional[DatiAnagraficiVettore] = None
    mezzo_trasporto: Optional[StrictStr] = None
    causale_trasporto: Optional[StrictStr] = None
    numero_colli: Optional[StrictInt] = None
    descrizione: Optional[StrictStr] = None
    unita_misura_peso: Optional[StrictStr] = None
    peso_lordo: Optional[Union[StrictFloat, StrictInt]] = None
    peso_netto: Optional[Union[StrictFloat, StrictInt]] = None
    data_ora_ritiro: Optional[datetime] = None
    data_inizio_trasporto: Optional[datetime] = None
    tipo_resa: Optional[StrictStr] = None
    indirizzo_resa: Optional[IndirizzoResa] = None
    data_ora_consegna: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["dati_anagrafici_vettore", "mezzo_trasporto", "causale_trasporto", "numero_colli", "descrizione", "unita_misura_peso", "peso_lordo", "peso_netto", "data_ora_ritiro", "data_inizio_trasporto", "tipo_resa", "indirizzo_resa", "data_ora_consegna"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatiTrasporto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dati_anagrafici_vettore
        if self.dati_anagrafici_vettore:
            _dict['dati_anagrafici_vettore'] = self.dati_anagrafici_vettore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indirizzo_resa
        if self.indirizzo_resa:
            _dict['indirizzo_resa'] = self.indirizzo_resa.to_dict()
        # set to None if mezzo_trasporto (nullable) is None
        # and model_fields_set contains the field
        if self.mezzo_trasporto is None and "mezzo_trasporto" in self.model_fields_set:
            _dict['mezzo_trasporto'] = None

        # set to None if causale_trasporto (nullable) is None
        # and model_fields_set contains the field
        if self.causale_trasporto is None and "causale_trasporto" in self.model_fields_set:
            _dict['causale_trasporto'] = None

        # set to None if numero_colli (nullable) is None
        # and model_fields_set contains the field
        if self.numero_colli is None and "numero_colli" in self.model_fields_set:
            _dict['numero_colli'] = None

        # set to None if descrizione (nullable) is None
        # and model_fields_set contains the field
        if self.descrizione is None and "descrizione" in self.model_fields_set:
            _dict['descrizione'] = None

        # set to None if unita_misura_peso (nullable) is None
        # and model_fields_set contains the field
        if self.unita_misura_peso is None and "unita_misura_peso" in self.model_fields_set:
            _dict['unita_misura_peso'] = None

        # set to None if peso_lordo (nullable) is None
        # and model_fields_set contains the field
        if self.peso_lordo is None and "peso_lordo" in self.model_fields_set:
            _dict['peso_lordo'] = None

        # set to None if peso_netto (nullable) is None
        # and model_fields_set contains the field
        if self.peso_netto is None and "peso_netto" in self.model_fields_set:
            _dict['peso_netto'] = None

        # set to None if data_ora_ritiro (nullable) is None
        # and model_fields_set contains the field
        if self.data_ora_ritiro is None and "data_ora_ritiro" in self.model_fields_set:
            _dict['data_ora_ritiro'] = None

        # set to None if data_inizio_trasporto (nullable) is None
        # and model_fields_set contains the field
        if self.data_inizio_trasporto is None and "data_inizio_trasporto" in self.model_fields_set:
            _dict['data_inizio_trasporto'] = None

        # set to None if tipo_resa (nullable) is None
        # and model_fields_set contains the field
        if self.tipo_resa is None and "tipo_resa" in self.model_fields_set:
            _dict['tipo_resa'] = None

        # set to None if data_ora_consegna (nullable) is None
        # and model_fields_set contains the field
        if self.data_ora_consegna is None and "data_ora_consegna" in self.model_fields_set:
            _dict['data_ora_consegna'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatiTrasporto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dati_anagrafici_vettore": DatiAnagraficiVettore.from_dict(obj["dati_anagrafici_vettore"]) if obj.get("dati_anagrafici_vettore") is not None else None,
            "mezzo_trasporto": obj.get("mezzo_trasporto"),
            "causale_trasporto": obj.get("causale_trasporto"),
            "numero_colli": obj.get("numero_colli"),
            "descrizione": obj.get("descrizione"),
            "unita_misura_peso": obj.get("unita_misura_peso"),
            "peso_lordo": obj.get("peso_lordo"),
            "peso_netto": obj.get("peso_netto"),
            "data_ora_ritiro": obj.get("data_ora_ritiro"),
            "data_inizio_trasporto": obj.get("data_inizio_trasporto"),
            "tipo_resa": obj.get("tipo_resa"),
            "indirizzo_resa": IndirizzoResa.from_dict(obj["indirizzo_resa"]) if obj.get("indirizzo_resa") is not None else None,
            "data_ora_consegna": obj.get("data_ora_consegna")
        })
        return _obj



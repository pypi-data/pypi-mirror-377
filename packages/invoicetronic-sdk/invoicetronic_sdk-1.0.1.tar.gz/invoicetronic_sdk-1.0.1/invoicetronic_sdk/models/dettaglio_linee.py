# coding: utf-8

"""
    Invoicetronic API

    The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

    The version of the OpenAPI document: 1
    Contact: info@invoicetronic.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from invoicetronic_sdk.models.altri_dati_gestionali import AltriDatiGestionali
from invoicetronic_sdk.models.codice_articolo import CodiceArticolo
from invoicetronic_sdk.models.sconto_maggiorazione import ScontoMaggiorazione
from typing import Optional, Set
from typing_extensions import Self

class DettaglioLinee(BaseModel):
    """
    DettaglioLinee
    """ # noqa: E501
    numero_linea: Optional[StrictInt] = None
    tipo_cessione_prestazione: Optional[StrictStr] = None
    codice_articolo: Optional[List[CodiceArticolo]] = None
    descrizione: Optional[StrictStr] = None
    quantita: Optional[Union[StrictFloat, StrictInt]] = None
    unita_misura: Optional[StrictStr] = None
    data_inizio_periodo: Optional[datetime] = None
    data_fine_periodo: Optional[datetime] = None
    prezzo_unitario: Optional[Union[StrictFloat, StrictInt]] = None
    sconto_maggiorazione: Optional[List[ScontoMaggiorazione]] = None
    prezzo_totale: Optional[Union[StrictFloat, StrictInt]] = None
    aliquota_iva: Optional[Union[StrictFloat, StrictInt]] = None
    ritenuta: Optional[StrictStr] = None
    natura: Optional[StrictStr] = None
    riferimento_amministrazione: Optional[StrictStr] = None
    altri_dati_gestionali: Optional[List[AltriDatiGestionali]] = None
    __properties: ClassVar[List[str]] = ["numero_linea", "tipo_cessione_prestazione", "codice_articolo", "descrizione", "quantita", "unita_misura", "data_inizio_periodo", "data_fine_periodo", "prezzo_unitario", "sconto_maggiorazione", "prezzo_totale", "aliquota_iva", "ritenuta", "natura", "riferimento_amministrazione", "altri_dati_gestionali"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DettaglioLinee from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in codice_articolo (list)
        _items = []
        if self.codice_articolo:
            for _item_codice_articolo in self.codice_articolo:
                if _item_codice_articolo:
                    _items.append(_item_codice_articolo.to_dict())
            _dict['codice_articolo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sconto_maggiorazione (list)
        _items = []
        if self.sconto_maggiorazione:
            for _item_sconto_maggiorazione in self.sconto_maggiorazione:
                if _item_sconto_maggiorazione:
                    _items.append(_item_sconto_maggiorazione.to_dict())
            _dict['sconto_maggiorazione'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in altri_dati_gestionali (list)
        _items = []
        if self.altri_dati_gestionali:
            for _item_altri_dati_gestionali in self.altri_dati_gestionali:
                if _item_altri_dati_gestionali:
                    _items.append(_item_altri_dati_gestionali.to_dict())
            _dict['altri_dati_gestionali'] = _items
        # set to None if tipo_cessione_prestazione (nullable) is None
        # and model_fields_set contains the field
        if self.tipo_cessione_prestazione is None and "tipo_cessione_prestazione" in self.model_fields_set:
            _dict['tipo_cessione_prestazione'] = None

        # set to None if codice_articolo (nullable) is None
        # and model_fields_set contains the field
        if self.codice_articolo is None and "codice_articolo" in self.model_fields_set:
            _dict['codice_articolo'] = None

        # set to None if descrizione (nullable) is None
        # and model_fields_set contains the field
        if self.descrizione is None and "descrizione" in self.model_fields_set:
            _dict['descrizione'] = None

        # set to None if quantita (nullable) is None
        # and model_fields_set contains the field
        if self.quantita is None and "quantita" in self.model_fields_set:
            _dict['quantita'] = None

        # set to None if unita_misura (nullable) is None
        # and model_fields_set contains the field
        if self.unita_misura is None and "unita_misura" in self.model_fields_set:
            _dict['unita_misura'] = None

        # set to None if data_inizio_periodo (nullable) is None
        # and model_fields_set contains the field
        if self.data_inizio_periodo is None and "data_inizio_periodo" in self.model_fields_set:
            _dict['data_inizio_periodo'] = None

        # set to None if data_fine_periodo (nullable) is None
        # and model_fields_set contains the field
        if self.data_fine_periodo is None and "data_fine_periodo" in self.model_fields_set:
            _dict['data_fine_periodo'] = None

        # set to None if sconto_maggiorazione (nullable) is None
        # and model_fields_set contains the field
        if self.sconto_maggiorazione is None and "sconto_maggiorazione" in self.model_fields_set:
            _dict['sconto_maggiorazione'] = None

        # set to None if ritenuta (nullable) is None
        # and model_fields_set contains the field
        if self.ritenuta is None and "ritenuta" in self.model_fields_set:
            _dict['ritenuta'] = None

        # set to None if natura (nullable) is None
        # and model_fields_set contains the field
        if self.natura is None and "natura" in self.model_fields_set:
            _dict['natura'] = None

        # set to None if riferimento_amministrazione (nullable) is None
        # and model_fields_set contains the field
        if self.riferimento_amministrazione is None and "riferimento_amministrazione" in self.model_fields_set:
            _dict['riferimento_amministrazione'] = None

        # set to None if altri_dati_gestionali (nullable) is None
        # and model_fields_set contains the field
        if self.altri_dati_gestionali is None and "altri_dati_gestionali" in self.model_fields_set:
            _dict['altri_dati_gestionali'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DettaglioLinee from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numero_linea": obj.get("numero_linea"),
            "tipo_cessione_prestazione": obj.get("tipo_cessione_prestazione"),
            "codice_articolo": [CodiceArticolo.from_dict(_item) for _item in obj["codice_articolo"]] if obj.get("codice_articolo") is not None else None,
            "descrizione": obj.get("descrizione"),
            "quantita": obj.get("quantita"),
            "unita_misura": obj.get("unita_misura"),
            "data_inizio_periodo": obj.get("data_inizio_periodo"),
            "data_fine_periodo": obj.get("data_fine_periodo"),
            "prezzo_unitario": obj.get("prezzo_unitario"),
            "sconto_maggiorazione": [ScontoMaggiorazione.from_dict(_item) for _item in obj["sconto_maggiorazione"]] if obj.get("sconto_maggiorazione") is not None else None,
            "prezzo_totale": obj.get("prezzo_totale"),
            "aliquota_iva": obj.get("aliquota_iva"),
            "ritenuta": obj.get("ritenuta"),
            "natura": obj.get("natura"),
            "riferimento_amministrazione": obj.get("riferimento_amministrazione"),
            "altri_dati_gestionali": [AltriDatiGestionali.from_dict(_item) for _item in obj["altri_dati_gestionali"]] if obj.get("altri_dati_gestionali") is not None else None
        })
        return _obj



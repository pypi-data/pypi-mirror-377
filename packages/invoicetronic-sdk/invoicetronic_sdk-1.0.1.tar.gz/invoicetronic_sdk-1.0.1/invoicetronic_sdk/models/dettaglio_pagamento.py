# coding: utf-8

"""
    Invoicetronic API

    The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

    The version of the OpenAPI document: 1
    Contact: info@invoicetronic.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DettaglioPagamento(BaseModel):
    """
    DettaglioPagamento
    """ # noqa: E501
    beneficiario: Optional[StrictStr] = None
    modalita_pagamento: Optional[StrictStr] = None
    data_riferimento_termini_pagamento: Optional[datetime] = None
    giorni_termini_pagamento: Optional[StrictInt] = None
    data_scadenza_pagamento: Optional[datetime] = None
    importo_pagamento: Optional[Union[StrictFloat, StrictInt]] = None
    cod_ufficio_postale: Optional[StrictStr] = None
    cognome_quietanzante: Optional[StrictStr] = None
    nome_quietanzante: Optional[StrictStr] = None
    cf_quietanzante: Optional[StrictStr] = None
    titolo_quietanzante: Optional[StrictStr] = None
    istituto_finanziario: Optional[StrictStr] = None
    iban: Optional[StrictStr] = None
    abi: Optional[StrictStr] = None
    cab: Optional[StrictStr] = None
    bic: Optional[StrictStr] = None
    sconto_pagamento_anticipato: Optional[Union[StrictFloat, StrictInt]] = None
    data_limite_pagamento_anticipato: Optional[datetime] = None
    penalita_pagamenti_ritardati: Optional[Union[StrictFloat, StrictInt]] = None
    data_decorrenza_penale: Optional[datetime] = None
    codice_pagamento: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["beneficiario", "modalita_pagamento", "data_riferimento_termini_pagamento", "giorni_termini_pagamento", "data_scadenza_pagamento", "importo_pagamento", "cod_ufficio_postale", "cognome_quietanzante", "nome_quietanzante", "cf_quietanzante", "titolo_quietanzante", "istituto_finanziario", "iban", "abi", "cab", "bic", "sconto_pagamento_anticipato", "data_limite_pagamento_anticipato", "penalita_pagamenti_ritardati", "data_decorrenza_penale", "codice_pagamento"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DettaglioPagamento from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if beneficiario (nullable) is None
        # and model_fields_set contains the field
        if self.beneficiario is None and "beneficiario" in self.model_fields_set:
            _dict['beneficiario'] = None

        # set to None if modalita_pagamento (nullable) is None
        # and model_fields_set contains the field
        if self.modalita_pagamento is None and "modalita_pagamento" in self.model_fields_set:
            _dict['modalita_pagamento'] = None

        # set to None if data_riferimento_termini_pagamento (nullable) is None
        # and model_fields_set contains the field
        if self.data_riferimento_termini_pagamento is None and "data_riferimento_termini_pagamento" in self.model_fields_set:
            _dict['data_riferimento_termini_pagamento'] = None

        # set to None if giorni_termini_pagamento (nullable) is None
        # and model_fields_set contains the field
        if self.giorni_termini_pagamento is None and "giorni_termini_pagamento" in self.model_fields_set:
            _dict['giorni_termini_pagamento'] = None

        # set to None if data_scadenza_pagamento (nullable) is None
        # and model_fields_set contains the field
        if self.data_scadenza_pagamento is None and "data_scadenza_pagamento" in self.model_fields_set:
            _dict['data_scadenza_pagamento'] = None

        # set to None if cod_ufficio_postale (nullable) is None
        # and model_fields_set contains the field
        if self.cod_ufficio_postale is None and "cod_ufficio_postale" in self.model_fields_set:
            _dict['cod_ufficio_postale'] = None

        # set to None if cognome_quietanzante (nullable) is None
        # and model_fields_set contains the field
        if self.cognome_quietanzante is None and "cognome_quietanzante" in self.model_fields_set:
            _dict['cognome_quietanzante'] = None

        # set to None if nome_quietanzante (nullable) is None
        # and model_fields_set contains the field
        if self.nome_quietanzante is None and "nome_quietanzante" in self.model_fields_set:
            _dict['nome_quietanzante'] = None

        # set to None if cf_quietanzante (nullable) is None
        # and model_fields_set contains the field
        if self.cf_quietanzante is None and "cf_quietanzante" in self.model_fields_set:
            _dict['cf_quietanzante'] = None

        # set to None if titolo_quietanzante (nullable) is None
        # and model_fields_set contains the field
        if self.titolo_quietanzante is None and "titolo_quietanzante" in self.model_fields_set:
            _dict['titolo_quietanzante'] = None

        # set to None if istituto_finanziario (nullable) is None
        # and model_fields_set contains the field
        if self.istituto_finanziario is None and "istituto_finanziario" in self.model_fields_set:
            _dict['istituto_finanziario'] = None

        # set to None if iban (nullable) is None
        # and model_fields_set contains the field
        if self.iban is None and "iban" in self.model_fields_set:
            _dict['iban'] = None

        # set to None if abi (nullable) is None
        # and model_fields_set contains the field
        if self.abi is None and "abi" in self.model_fields_set:
            _dict['abi'] = None

        # set to None if cab (nullable) is None
        # and model_fields_set contains the field
        if self.cab is None and "cab" in self.model_fields_set:
            _dict['cab'] = None

        # set to None if bic (nullable) is None
        # and model_fields_set contains the field
        if self.bic is None and "bic" in self.model_fields_set:
            _dict['bic'] = None

        # set to None if sconto_pagamento_anticipato (nullable) is None
        # and model_fields_set contains the field
        if self.sconto_pagamento_anticipato is None and "sconto_pagamento_anticipato" in self.model_fields_set:
            _dict['sconto_pagamento_anticipato'] = None

        # set to None if data_limite_pagamento_anticipato (nullable) is None
        # and model_fields_set contains the field
        if self.data_limite_pagamento_anticipato is None and "data_limite_pagamento_anticipato" in self.model_fields_set:
            _dict['data_limite_pagamento_anticipato'] = None

        # set to None if penalita_pagamenti_ritardati (nullable) is None
        # and model_fields_set contains the field
        if self.penalita_pagamenti_ritardati is None and "penalita_pagamenti_ritardati" in self.model_fields_set:
            _dict['penalita_pagamenti_ritardati'] = None

        # set to None if data_decorrenza_penale (nullable) is None
        # and model_fields_set contains the field
        if self.data_decorrenza_penale is None and "data_decorrenza_penale" in self.model_fields_set:
            _dict['data_decorrenza_penale'] = None

        # set to None if codice_pagamento (nullable) is None
        # and model_fields_set contains the field
        if self.codice_pagamento is None and "codice_pagamento" in self.model_fields_set:
            _dict['codice_pagamento'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DettaglioPagamento from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "beneficiario": obj.get("beneficiario"),
            "modalita_pagamento": obj.get("modalita_pagamento"),
            "data_riferimento_termini_pagamento": obj.get("data_riferimento_termini_pagamento"),
            "giorni_termini_pagamento": obj.get("giorni_termini_pagamento"),
            "data_scadenza_pagamento": obj.get("data_scadenza_pagamento"),
            "importo_pagamento": obj.get("importo_pagamento"),
            "cod_ufficio_postale": obj.get("cod_ufficio_postale"),
            "cognome_quietanzante": obj.get("cognome_quietanzante"),
            "nome_quietanzante": obj.get("nome_quietanzante"),
            "cf_quietanzante": obj.get("cf_quietanzante"),
            "titolo_quietanzante": obj.get("titolo_quietanzante"),
            "istituto_finanziario": obj.get("istituto_finanziario"),
            "iban": obj.get("iban"),
            "abi": obj.get("abi"),
            "cab": obj.get("cab"),
            "bic": obj.get("bic"),
            "sconto_pagamento_anticipato": obj.get("sconto_pagamento_anticipato"),
            "data_limite_pagamento_anticipato": obj.get("data_limite_pagamento_anticipato"),
            "penalita_pagamenti_ritardati": obj.get("penalita_pagamenti_ritardati"),
            "data_decorrenza_penale": obj.get("data_decorrenza_penale"),
            "codice_pagamento": obj.get("codice_pagamento")
        })
        return _obj



# coding: utf-8

"""
    Invoicetronic API

    The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

    The version of the OpenAPI document: 1
    Contact: info@invoicetronic.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from invoicetronic_sdk.models.fattura_elettronica_header import FatturaElettronicaHeader

class TestFatturaElettronicaHeader(unittest.TestCase):
    """FatturaElettronicaHeader unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FatturaElettronicaHeader:
        """Test FatturaElettronicaHeader
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FatturaElettronicaHeader`
        """
        model = FatturaElettronicaHeader()
        if include_optional:
            return FatturaElettronicaHeader(
                dati_trasmissione = invoicetronic_sdk.models.dati_trasmissione.DatiTrasmissione(
                    id_trasmittente = invoicetronic_sdk.models.id_trasmittente.IdTrasmittente(
                        id_paese = '', 
                        id_codice = '', ), 
                    progressivo_invio = '', 
                    formato_trasmissione = '', 
                    codice_destinatario = '', 
                    contatti_trasmittente = invoicetronic_sdk.models.contatti_trasmittente.ContattiTrasmittente(
                        telefono = '', 
                        email = '', ), 
                    pec_destinatario = '', ),
                cedente_prestatore = invoicetronic_sdk.models.cedente_prestatore.CedentePrestatore(
                    dati_anagrafici = invoicetronic_sdk.models.dati_anagrafici_cedente_prestatore.DatiAnagraficiCedentePrestatore(
                        id_fiscale_iva = invoicetronic_sdk.models.id_fiscale_iva.IdFiscaleIVA(
                            id_paese = '', 
                            id_codice = '', ), 
                        codice_fiscale = '', 
                        anagrafica = invoicetronic_sdk.models.anagrafica.Anagrafica(
                            denominazione = '', 
                            nome = '', 
                            cognome = '', 
                            titolo = '', 
                            cod_eori = '', ), 
                        albo_professionale = '', 
                        provincia_albo = '', 
                        numero_iscrizione_albo = '', 
                        data_iscrizione_albo = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        regime_fiscale = '', ), 
                    sede = invoicetronic_sdk.models.sede_cedente_prestatore.SedeCedentePrestatore(
                        indirizzo = '', 
                        numero_civico = '', 
                        cap = '', 
                        comune = '', 
                        provincia = '', 
                        nazione = 'IT', ), 
                    stabile_organizzazione = invoicetronic_sdk.models.stabile_organizzazione.StabileOrganizzazione(
                        indirizzo = '', 
                        numero_civico = '', 
                        cap = '', 
                        comune = '', 
                        provincia = '', 
                        nazione = 'IT', ), 
                    iscrizione_rea = invoicetronic_sdk.models.iscrizione_rea.IscrizioneREA(
                        ufficio = '', 
                        numero_rea = '', 
                        capitale_sociale = 1.337, 
                        socio_unico = '', 
                        stato_liquidazione = '', ), 
                    contatti = invoicetronic_sdk.models.contatti.Contatti(
                        telefono = '', 
                        fax = '', 
                        email = '', ), 
                    riferimento_amministrazione = '', ),
                rappresentante_fiscale = invoicetronic_sdk.models.rappresentante_fiscale.RappresentanteFiscale(
                    dati_anagrafici = invoicetronic_sdk.models.dati_anagrafici.DatiAnagrafici(
                        id_fiscale_iva = invoicetronic_sdk.models.id_fiscale_iva.IdFiscaleIVA(
                            id_paese = '', 
                            id_codice = '', ), 
                        codice_fiscale = '', 
                        anagrafica = invoicetronic_sdk.models.anagrafica.Anagrafica(
                            denominazione = '', 
                            nome = '', 
                            cognome = '', 
                            titolo = '', 
                            cod_eori = '', ), ), ),
                cessionario_committente = invoicetronic_sdk.models.cessionario_committente.CessionarioCommittente(
                    dati_anagrafici = invoicetronic_sdk.models.dati_anagrafici_cessionario_committente.DatiAnagraficiCessionarioCommittente(
                        id_fiscale_iva = invoicetronic_sdk.models.id_fiscale_iva.IdFiscaleIVA(
                            id_paese = '', 
                            id_codice = '', ), 
                        codice_fiscale = '', 
                        anagrafica = invoicetronic_sdk.models.anagrafica.Anagrafica(
                            denominazione = '', 
                            nome = '', 
                            cognome = '', 
                            titolo = '', 
                            cod_eori = '', ), ), 
                    sede = invoicetronic_sdk.models.sede_cessionario_committente.SedeCessionarioCommittente(
                        indirizzo = '', 
                        numero_civico = '', 
                        cap = '', 
                        comune = '', 
                        provincia = '', 
                        nazione = 'IT', ), 
                    stabile_organizzazione = invoicetronic_sdk.models.stabile_organizzazione.StabileOrganizzazione(
                        indirizzo = '', 
                        numero_civico = '', 
                        cap = '', 
                        comune = '', 
                        provincia = '', 
                        nazione = 'IT', ), 
                    rappresentante_fiscale = invoicetronic_sdk.models.rappresentante_fiscale_cessionario_committente.RappresentanteFiscaleCessionarioCommittente(
                        denominazione = '', 
                        nome = '', 
                        cognome = '', ), ),
                terzo_intermediario_o_soggetto_emittente = invoicetronic_sdk.models.terzo_intermediario_o_soggetto_emittente.TerzoIntermediarioOSoggettoEmittente(
                    dati_anagrafici = invoicetronic_sdk.models.dati_anagrafici.DatiAnagrafici(
                        id_fiscale_iva = invoicetronic_sdk.models.id_fiscale_iva.IdFiscaleIVA(
                            id_paese = '', 
                            id_codice = '', ), 
                        codice_fiscale = '', 
                        anagrafica = invoicetronic_sdk.models.anagrafica.Anagrafica(
                            denominazione = '', 
                            nome = '', 
                            cognome = '', 
                            titolo = '', 
                            cod_eori = '', ), ), ),
                soggetto_emittente = ''
            )
        else:
            return FatturaElettronicaHeader(
        )
        """

    def testFatturaElettronicaHeader(self):
        """Test FatturaElettronicaHeader"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

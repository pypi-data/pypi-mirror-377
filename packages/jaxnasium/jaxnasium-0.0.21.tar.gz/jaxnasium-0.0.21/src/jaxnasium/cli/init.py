import argparse
import importlib.resources as pkg_resources
import shutil
import subprocess
from pathlib import Path

import jaxnasium

# ANSI color codes
CYAN = "\033[96m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
BOLD = "\033[1m"
RESET = "\033[0m"
LIGHT_GRAY = "\033[37m"


def colored_input(prompt, default=""):
    """Display a colored input prompt with default value."""
    default_display = f" ({LIGHT_GRAY}{default}{RESET})" if default else ""
    user_input = input(
        f"{CYAN}{BOLD}?{RESET} {prompt}{YELLOW}{default_display}{RESET}: "
    ).strip()
    return user_input if user_input else default


def yes_no_prompt(question, default="y"):
    """Ask a yes/no question with colored output."""
    options = "(Y/n)" if default.lower() == "y" else "(y/N)"
    while True:
        response = colored_input(f"{question} {options}")
        if not response:
            return default.lower() == "y"
        if response.lower() in ["y", "yes"]:
            return True
        elif response.lower() in ["n", "no"]:
            return False
        print(f"{YELLOW}Please answer with 'y' or 'n'.{RESET}")


def update_project_dependencies(toml_path):
    if toml_path.exists():
        with toml_path.open("r") as file:
            lines = file.readlines()

        # Modify the dependencies line
        for i, line in enumerate(lines):
            # Find the line with "requires-python =" and set to minimum Jymkit version
            if line.strip().startswith("requires-python ="):
                lines[i] = 'requires-python = ">=3.11"\n'

            if line.strip().startswith("dependencies ="):
                # Extract the existing dependencies list
                if "[]" in line:
                    dependencies = []
                else:
                    dependencies = eval(line.split("=", 1)[1].strip())

                # Add jaxnasium with the required version
                dependencies.append(f"jaxnasium[algs]>={jaxnasium.__version__}")
                lines[i] = f"dependencies = {dependencies}\n"

            # Check for the line 'build-backend = "uv_build"'
            if line.strip().startswith("build-backend ="):
                if "uv_build" in line:
                    # Add a line below line 'module-root = ""' to ensure no src dir is expected
                    lines.insert(i + 1, "\n[tool.uv.build-backend]\nmodule-root = ''\n")
                    break  # Break after, as this will kill the ordering

        # Write the updated lines back to the file
        with toml_path.open("w") as file:
            file.writelines(lines)


def update_init_file(src_path, import_env):
    """
    Clear the project __init__.py file (or create one if it does not exist)
    Fill it with "from projectname import ExampleEnv".
    """
    init_file_path = src_path / "__init__.py"
    with init_file_path.open("w") as file:
        file.write("# This file is auto-generated by jaxnasium\n")
        if import_env:
            file.write(f"from .{src_path.name}Env import ExampleEnv\n")


def main():
    # Parse the project name argument
    parser = argparse.ArgumentParser(description="Initialize a new jaxnasium project.")
    parser.add_argument("projectname", help="The path to the new project directory.")
    parser.add_argument(
        "-y",
        "--yes",
        action="store_true",
        help="Automatically answer 'yes' to all prompts.",
    )
    args = parser.parse_args()
    projectname = args.projectname

    print(f"\n{BOLD}ðŸš€ Jaxnasium {jaxnasium.__version__}")

    # print(
    #     f"\n{BOLD}ðŸš€ Setting up your new jaxnasium project: {projectname if projectname else ''}{RESET}\n"
    # )

    # if not args.projectname:
    #     # Get environment name
    #     projectname = colored_input(
    #         "What would you like to name your environment class?", "exampleName"
    #     )
    #     print(f"\n{BOLD}ðŸš€ Setting up: {projectname}{RESET}\n")

    build_environment_template = args.yes or yes_no_prompt(
        "Would you like to include a environment template?", default="y"
    )
    include_algorithm_source = args.yes or yes_no_prompt(
        "Instead of importing, would you like to copy the algorithm source code into your project?",
        default="n",
    )

    # Display summary of choices
    print(f"\n{BOLD}ðŸ“‹ Project configuration summary:{RESET}")
    print(f"  â€¢ Project name: {projectname}")
    print(
        f"  â€¢ Include environment template: {'Yes' if build_environment_template else 'No'}"
    )
    print(
        f"  â€¢ Copy algorithm source code: {'Yes' if include_algorithm_source else 'No'}"
    )

    # Confirm setup
    if not args.yes:
        if not yes_no_prompt("\nDo you want to proceed with this configuration?"):
            print("Setup cancelled.")
            return

    # Determine the command to run
    command = (
        ["uv", "init", "--package", projectname]
        if shutil.which("uv")
        else ["pipx", "run", "uv", "init", "--package", projectname]
    )
    subprocess.run(command, check=True)

    # Path to the pyproject.toml file
    project_path = Path(projectname).resolve()
    pyproject_file = project_path / "pyproject.toml"
    src_path = project_path / "src" / project_path.name.lower()

    # move the current path folder outside of the src folder and delete the src folder
    if src_path.exists():
        shutil.move(src_path, project_path / project_path.name.lower())
        if (project_path / "src").exists():
            shutil.rmtree(project_path / "src")
        src_path = project_path / project_path.name.lower()

    # Update the dependencies in pyproject.toml
    update_project_dependencies(pyproject_file)

    update_init_file(src_path, build_environment_template)

    # Copy over the required files.
    if build_environment_template:
        with pkg_resources.path(
            "jaxnasium.cli.resources", "env_template.py"
        ) as template_path:
            shutil.copy(template_path, src_path / f"{project_path.name}Env.py")

    if include_algorithm_source:
        with pkg_resources.path("jaxnasium", "algorithms") as template_path:
            # ignore the "utils" folder in "algorithms"
            ignored = ["utils", "_algorithm.py"]
            shutil.copytree(
                template_path,
                src_path / "algorithms",
                dirs_exist_ok=True,
                ignore=shutil.ignore_patterns(*ignored),
            )

    with pkg_resources.path(
        "jaxnasium.cli.resources", "train_template.py"
    ) as template_path:
        shutil.copy(template_path, project_path / "train_example.py")

        with open(template_path, "r") as file:
            lines = file.readlines()
        for i, line in enumerate(lines):
            if line.strip().startswith("# from <PROJECTNAME>"):
                if build_environment_template:
                    lines[i] = f"from {project_path.name} import ExampleEnv\n"
                else:
                    lines[i] = "from jaxnasium.envs import CartPole\n"
            if line.strip().startswith("env = ExampleEnv()"):
                indent = line[: len(line) - len(line.lstrip())]
                if not build_environment_template:
                    lines[i] = f"{indent}env = CartPole()\n"

            if include_algorithm_source:
                if line.strip().startswith("from jaxnasium.algorithms"):
                    # Replace the line with the correct import statement
                    lines[i] = f"from {project_path.name}.algorithms import PPO\n"
        with open(project_path / "train_example.py", "w") as file:
            file.writelines(lines)


if __name__ == "__main__":
    main()

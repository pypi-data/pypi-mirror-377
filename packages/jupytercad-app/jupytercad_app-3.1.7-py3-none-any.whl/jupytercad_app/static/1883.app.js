"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[1883,4264],{61883:(e,n,a)=>{a.r(n),a.d(n,{default:()=>l});var r,t=a(18504),o=a(56128),i=a(40488),d=a(90182);!function(e){e.handleLink="rendermime:handle-local-link"}(r||(r={}));const l={id:"@jupyterlab/rendermime-extension:plugin",description:"Provides the render mime registry.",optional:[o.IDocumentManager,i.ILatexTypesetter,t.ISanitizer,i.IMarkdownParser,d.ITranslator],provides:i.IRenderMimeRegistry,activate:function(e,n,a,t,o,l){const c=(null!=l?l:d.nullTranslator).load("jupyterlab");return n&&e.commands.addCommand(r.handleLink,{label:c.__("Handle Local Link"),execute:a=>{const r=a.path,t=a.id,o=a.scope||"server";if(r)return"kernel"===o?e.commands.hasCommand(s)?e.commands.execute(s,{path:r}):void console.warn("Cannot open kernel file: debugger sources provider not available"):n.services.contents.get(r,{content:!1}).then(()=>{const e=n.registry.defaultRenderedWidgetFactory(r),a=n.openOrReveal(r,e.name);a&&t&&a.setFragment(t)})}}),new i.RenderMimeRegistry({initialFactories:i.standardRendererFactories,linkHandler:n?{handleLink:(n,a,t)=>{"A"===n.tagName&&n.hasAttribute("download")||e.commandLinker.connectNode(n,r.handleLink,{path:a,id:t})},handlePath:(n,a,t,o)=>{e.commandLinker.connectNode(n,r.handleLink,{path:a,id:o,scope:t})}}:void 0,latexTypesetter:null!=a?a:void 0,markdownParser:null!=o?o:void 0,translator:null!=l?l:void 0,sanitizer:null!=t?t:void 0})},autoStart:!0},s="debugger:open-source"}}]);
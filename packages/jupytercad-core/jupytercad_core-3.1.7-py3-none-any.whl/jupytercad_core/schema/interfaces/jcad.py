# generated by datamodel-codegen:
#   filename:  jcad.json
#   timestamp: 2025-09-18T11:39:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class Parts(Enum):
    Part__Any = 'Part::Any'
    Part__Box = 'Part::Box'
    Part__Cylinder = 'Part::Cylinder'
    Part__Sphere = 'Part::Sphere'
    Part__Cone = 'Part::Cone'
    Part__Torus = 'Part::Torus'
    Part__Cut = 'Part::Cut'
    Part__MultiFuse = 'Part::MultiFuse'
    Part__MultiCommon = 'Part::MultiCommon'
    Part__Extrusion = 'Part::Extrusion'
    Part__Chamfer = 'Part::Chamfer'
    Part__Fillet = 'Part::Fillet'
    Sketcher__SketchObject = 'Sketcher::SketchObject'
    Post__Operator = 'Post::Operator'


class ShapeMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    shapeFormat: Optional[str] = None
    workerId: Optional[str] = None
    mass: Optional[float] = None
    centerOfMass: Optional[List[float]] = None
    matrixOfInertia: Optional[List[List[float]]] = None


class JcadObject(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    visible: bool
    shape: Optional[Parts] = None
    parameters: Optional[Dict[str, Any]] = None
    shapeMetadata: Optional[ShapeMetadata] = None
    operators: Optional[List[Dict[str, Any]]] = None
    dependencies: Optional[List[str]] = None


class JcadModel(RootModel[List[JcadObject]]):
    root: List[JcadObject] = Field(..., title='IJCadModel')


class JcadOptions(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class IJCadContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    schemaVersion: Optional[str] = '3.0.0'
    objects: JcadModel
    options: Optional[JcadOptions] = None
    metadata: Optional[Dict[constr(pattern=r'^.*$'), str]] = None
    outputs: Optional[Dict[constr(pattern=r'^.*$'), str]] = None

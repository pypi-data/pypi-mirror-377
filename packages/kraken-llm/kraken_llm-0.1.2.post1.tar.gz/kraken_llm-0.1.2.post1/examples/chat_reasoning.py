#!/usr/bin/env python3
"""
–ß–∞—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º reasoning –º–æ–¥–µ–ª–∏ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Ç–æ–∫–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º
"""
import asyncio
import sys
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()
sys.path.insert(0, str(Path(__file__).parent / "src"))

from kraken_llm import create_reasoning_client, create_streaming_client, LLMConfig, ReasoningConfig

async def main():
    print("ü§ñ Kraken Reasoning Chat")
    print("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: REASONING_MODEL ‚Üí fallback CHAT_MODEL")
    print("–†–µ–∂–∏–º: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥\n")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ reasoning –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è; –µ—Å–ª–∏ –Ω–µ—Ç endpoint ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º reasoning
    r_endpoint = os.getenv('REASONING_ENDPOINT') or os.getenv('LLM_REASONING_ENDPOINT')
    r_token = (os.getenv('REASONING_TOKEN') or os.getenv('LLM_REASONING_TOKEN') or
               os.getenv('LLM_REASONING_API_KEY') or os.getenv('REASONING_API_KEY') or
               os.getenv('LLM_API_KEY') or os.getenv('LLM_TOKEN'))
    r_model = (os.getenv('REASONING_MODEL') or os.getenv('LLM_REASONING_MODEL') or
               os.getenv('LLM_MODEL') or 'thinking')
    reasoning_config = None
    if r_endpoint:
        reasoning_config = LLMConfig(
            endpoint=r_endpoint,
            api_key=r_token,
            model=r_model
        )
    
    chat_config = LLMConfig()  # –ë–∞–∑–æ–≤–∞—è –∏–∑ .env
    
    print(f"üß† Reasoning: {r_model} | {r_endpoint or '‚Äî'}")
    print(f"üí¨ Chat: {chat_config.model} | {chat_config.endpoint}\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
    reasoning_client = None
    chat_client = None
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å reasoning –∫–ª–∏–µ–Ω—Ç
        if reasoning_config is not None:
            reasoning_client = create_reasoning_client(
                config=reasoning_config,
                reasoning_config=ReasoningConfig(
                    model_type="native_thinking",
                    enable_thinking=True,
                    expose_thinking=True
                )
            )
            await reasoning_client.__aenter__()
            print("‚úÖ Reasoning –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤")
        
        # –ë–∞–∑–æ–≤—ã–π chat –∫–ª–∏–µ–Ω—Ç
        chat_client = create_streaming_client(config=chat_config)
        await chat_client.__aenter__()
        print("‚úÖ Chat –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤\n")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                user_input = input("üë§ ").strip()
                if user_input.lower() in ['exit', 'q', 'quit']:
                    break
                if not user_input:
                    continue
                
                print()
                reasoning_used = False
                
                # –ü–†–ò–û–†–ò–¢–ï–¢ 1: Reasoning –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
                if reasoning_client:
                    try:
                        print("üß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è (reasoning –º–æ–¥–µ–ª—å):")
                        print("‚îÄ" * 50)
                        print("üí≠ ", end="", flush=True)
                        
                        # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                        reasoning_content = ""
                        chunk_count = 0
                        
                        async for chunk in reasoning_client.chat_completion_stream([
                            {"role": "user", "content": f"–ü–æ–¥—É–º–∞–π –ø–æ—à–∞–≥–æ–≤–æ –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {user_input}"}
                        ], max_tokens=400):
                            print(chunk, end="", flush=True)
                            reasoning_content += chunk
                            chunk_count += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
                        reasoning_quality_ok = (
                            len(reasoning_content.strip()) > 50 and  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
                            chunk_count > 5 and  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ chunks
                            any(word in reasoning_content.lower() for word in [
                                '–ø–æ—Ç–æ–º—É —á—Ç–æ', '–ø–æ—Å–∫–æ–ª—å–∫—É', '—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ', '—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º',
                                '–≤–æ-–ø–µ—Ä–≤—ã—Ö', '–≤–æ-–≤—Ç–æ—Ä—ã—Ö', '—Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º', '–∞–Ω–∞–ª–∏–∑', '—à–∞–≥'
                            ])  # –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
                        )
                        
                        if reasoning_quality_ok:
                            print("\n" + "‚îÄ" * 50)
                            reasoning_used = True
                        else:
                            print(f"\n‚ö†Ô∏è –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ (–¥–ª–∏–Ω–∞: {len(reasoning_content)}, chunks: {chunk_count})")
                            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å...")
                            reasoning_used = False
                        
                    except Exception as e:
                        print(f"\n‚ùå Reasoning –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                        print("üîÑ Fallback –Ω–∞ chat –º–æ–¥–µ–ª—å...")
                        reasoning_used = False
                
                # –ï—Å–ª–∏ reasoning –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                if not reasoning_used:
                    print("üß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è (chat –º–æ–¥–µ–ª—å):")
                    print("‚îÄ" * 50)
                    print("üí≠ [–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å...]")
                    print("‚îÄ" * 50)
                
                # –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢: –í—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ chat –º–æ–¥–µ–ª—å
                print("ü§ñ ", end="", flush=True)
                async for chunk in chat_client.chat_completion_stream([
                    {"role": "user", "content": user_input}
                ], max_tokens=8192):
                    print(chunk, end="", flush=True)
                
                print("\n")
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"\n‚ùå {e}\n")
    
    finally:
        if reasoning_client:
            await reasoning_client.__aexit__(None, None, None)
        if chat_client:
            await chat_client.__aexit__(None, None, None)

if __name__ == "__main__":
    asyncio.run(main())
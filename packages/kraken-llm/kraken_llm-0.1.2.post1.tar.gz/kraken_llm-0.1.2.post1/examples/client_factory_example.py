#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ Kraken LLM —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
–∏ –∏—Ö –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.
"""

import asyncio
import os
from dotenv import load_dotenv
from kraken_llm import (
    create_client,
    create_standard_client,
    create_streaming_client,
    create_structured_client,
    create_reasoning_client,
    create_multimodal_client,
    create_adaptive_client,
    create_asr_client,
    create_embeddings_client,
    LLMConfig,
    ClientFactory
)
from pydantic import BaseModel

load_dotenv()

class PersonInfo(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ structured output."""
    name: str
    age: int
    occupation: str


async def demo_client_factory():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ Kraken LLM")
    print("=" * 50)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    config = LLMConfig(
        endpoint="http://localhost:8080",
        api_key="demo_key",
        model="demo_model",
        temperature=0.7
    )

    print("\n1. üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:")
    available_types = ClientFactory.get_available_client_types()
    for client_type, client_class in available_types.items():
        print(f"   ‚Ä¢ {client_type}: {client_class.__name__}")

    print("\n2. üè≠ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É:")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients = {
        "standard": create_standard_client(config),
        "streaming": create_streaming_client(config),
        "structured": create_structured_client(config),
        "reasoning": create_reasoning_client(config),
        "multimodal": create_multimodal_client(config),
        "adaptive": create_adaptive_client(config),
        "asr": create_asr_client(config),
        "embeddings": create_embeddings_client(config),
    }

    for client_type, client in clients.items():
        print(f"   ‚úÖ {client_type}: {client.__class__.__name__}")
        print(f"      Endpoint: {client.config.endpoint}")
        print(f"      Model: {client.config.model}")
        print(f"      Temperature: {client.config.temperature}")

    print("\n3. üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞:")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    auto_clients = [
        ("structured", {"response_model": PersonInfo}),
        ("streaming", {"stream": True}),
        ("reasoning", {"reasoning_mode": True}),
        ("multimodal", {"media_input": True}),
        ("asr", {"audio_file": "test.wav"}),
        ("embeddings", {"embeddings": True}),
        ("adaptive", {}),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ]

    for expected_type, params in auto_clients:
        client = create_client(config=config, **params)
        actual_type = client.__class__.__name__
        print(f"   üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        print(f"      –û–∂–∏–¥–∞–µ–º—ã–π: {expected_type} ‚Üí –ü–æ–ª—É—á–µ–Ω: {actual_type}")

    print("\n4. ‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    custom_client = create_client(
        client_type="standard",
        endpoint="http://custom-server:8080",
        model="custom-model",
        temperature=0.9,
        max_tokens=2000
    )

    print(f"   üìù –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {custom_client.__class__.__name__}")
    print(f"      Endpoint: {custom_client.config.endpoint}")
    print(f"      Model: {custom_client.config.model}")
    print(f"      Temperature: {custom_client.config.temperature}")
    print(f"      Max tokens: {custom_client.config.max_tokens}")

    print("\n5. üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞:")

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    class CustomDemoClient(clients["standard"].__class__):
        """–ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–µ–º–æ-–∫–ª–∏–µ–Ω—Ç."""
        pass

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
    ClientFactory.register_client_type("demo", CustomDemoClient)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞
    demo_client = create_client("demo", config)
    print(f"   üé® –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø: {demo_client.__class__.__name__}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    updated_types = ClientFactory.get_available_client_types()
    print(f"   üìä –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(updated_types)}")

    print("\n6. üîÑ –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤:")

    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    client1 = create_client("standard", endpoint="http://server1:8080", model="model1")
    client2 = create_client("streaming", endpoint="http://server2:8080", model="model2")

    print(f"   üñ•Ô∏è  –ö–ª–∏–µ–Ω—Ç 1: {client1.config.endpoint} / {client1.config.model}")
    print(f"   üñ•Ô∏è  –ö–ª–∏–µ–Ω—Ç 2: {client2.config.endpoint} / {client2.config.model}")
    print(f"   ‚úÖ –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {client1.config is not client2.config}")

    print("\n7. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients) + len(auto_clients) + 3}")
    print(f"   ‚Ä¢ –¢–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(updated_types)}")
    print(f"   ‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤: 1")

    print("\n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def demo_simple_usage():
    """–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    print("\nüéØ –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("-" * 30)

    # –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = create_client()
    print(f"–°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç: {client.__class__.__name__}")

    # –° –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    client_with_params = create_client(
        endpoint=os.getenv("LLM_ENDPOINT"),
        api_key=os.getenv("LLM_TOKEN"),
        model=os.getenv("LLM_MODEL"),
        temperature=0.8
    )
    print(f"–ö–ª–∏–µ–Ω—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {client_with_params.config.model}")


if __name__ == "__main__":
    print("üî• Kraken LLM Framework - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("=" * 60)

    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(demo_client_factory())

    # –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    demo_simple_usage()

    print("\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –∏ API –∫–ª—é—á")
    print("2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—à–∏–±–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º")

#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π workflow —Å UniversalLLMClient

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã:
1. –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥–µ–ª–∏
2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
"""

import asyncio
import json
import sys
from pathlib import Path
from typing import List, Dict, Any
from pydantic import BaseModel

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Kraken LLM
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

# –ò–º–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
from model_capabilities_analyzer import ModelCapabilitiesAnalyzer

# –ò–º–ø–æ—Ä—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
from kraken_llm import (
    create_universal_client_from_report,
    UniversalCapability,
    LLMConfig
)
from kraken_llm.tools import register_function, register_tool


# –ú–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class ProjectTask(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    title: str
    description: str
    priority: int  # 1-5
    estimated_hours: float
    tags: List[str] = []
    completed: bool = False


class WeatherReport(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–≥–æ–¥–µ"""
    city: str
    temperature: int
    condition: str
    humidity: int
    wind_speed: float


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ function/tool calling
@register_function(description="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ")
def get_weather(city: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"""
    # –°–∏–º—É–ª—è—Ü–∏—è API –ø–æ–≥–æ–¥—ã
    weather_data = {
        "–ú–æ—Å–∫–≤–∞": {"temp": 15, "condition": "–æ–±–ª–∞—á–Ω–æ", "humidity": 70, "wind": 5.2},
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": {"temp": 12, "condition": "–¥–æ–∂–¥—å", "humidity": 85, "wind": 7.1},
        "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": {"temp": 8, "condition": "—Å–Ω–µ–≥", "humidity": 90, "wind": 3.5},
    }
    
    data = weather_data.get(city, {"temp": 20, "condition": "—Å–æ–ª–Ω–µ—á–Ω–æ", "humidity": 60, "wind": 2.0})
    return {
        "city": city,
        "temperature": data["temp"],
        "condition": data["condition"],
        "humidity": data["humidity"],
        "wind_speed": data["wind"]
    }


@register_tool(description="–í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–µ–∫—Ç–∞")
def calculate_project_time(tasks: List[Dict[str, Any]]) -> Dict[str, float]:
    """–í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
    total_hours = sum(task.get("estimated_hours", 0) for task in tasks)
    completed_hours = sum(
        task.get("estimated_hours", 0) 
        for task in tasks 
        if task.get("completed", False)
    )
    
    return {
        "total_hours": total_hours,
        "completed_hours": completed_hours,
        "remaining_hours": total_hours - completed_hours,
        "completion_percentage": (completed_hours / total_hours * 100) if total_hours > 0 else 0
    }


async def step1_analyze_capabilities():
    """–®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥–µ–ª–∏"""
    print("üîç –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥–µ–ª–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ModelCapabilitiesAnalyzer()
    
    if not analyzer.model_configs:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–æ–¥–µ–ª–µ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        mock_report = {
            "metadata": {
                "timestamp": "2024-12-14T12:00:00",
                "execution_time": 45.2,
                "success_rate": 85.5
            },
            "model_summaries": {
                "demo_model": {
                    "confirmed_capabilities": [
                        {"capability": "chat_completion", "success_rate": 1.0, "avg_response_time": 1.2},
                        {"capability": "streaming", "success_rate": 0.95, "avg_response_time": 0.8},
                        {"capability": "structured_output_native", "success_rate": 0.9, "avg_response_time": 1.5},
                        {"capability": "function_calling", "success_rate": 0.8, "avg_response_time": 2.1},
                        {"capability": "tool_calling", "success_rate": 0.75, "avg_response_time": 2.3},
                        {"capability": "reasoning_cot", "success_rate": 0.7, "avg_response_time": 3.2},
                        {"capability": "embeddings", "success_rate": 0.85, "avg_response_time": 0.9},
                    ],
                    "recommended_clients": [
                        {"client": "StandardLLMClient", "success_rate": 0.95},
                        {"client": "StreamingLLMClient", "success_rate": 0.92},
                        {"client": "StructuredLLMClient", "success_rate": 0.88},
                    ],
                    "recommendations": [
                        "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
                        "üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å StandardLLMClient",
                        "‚ö° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç streaming –¥–ª—è real-time –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
                        "üìã Structured output —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ",
                        "üõ†Ô∏è Function calling —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                    ]
                }
            },
            "general_recommendations": [
                "üéØ –û—Ç–ª–∏—á–Ω–∞—è –æ–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Kraken LLM",
                "üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UniversalLLMClient –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–∏–±–∫–æ—Å—Ç–∏",
                "‚ö° –í–∫–ª—é—á–∏—Ç–µ streaming –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX",
                "üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ function calling –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
            ]
        }
        
        return mock_report
    
    else:
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(analyzer.model_configs)} –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
        report = await analyzer.analyze_all_models(quick_mode=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        filename = analyzer.save_report(report, "json")
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
        return report


async def step2_create_optimal_client(capabilities_report: Dict[str, Any]):
    """–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\nüöÄ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    client = create_universal_client_from_report(
        capabilities_report, 
        model_name="demo_model"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
    )
    
    print(f"–°–æ–∑–¥–∞–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:")
    capabilities = client.get_available_capabilities()
    for cap in capabilities:
        print(f"  ‚úÖ {cap}")
    
    return client


async def step3_test_basic_capabilities(client):
    """–®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüí¨ –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("=" * 60)
    
    # –ë–∞–∑–æ–≤—ã–π chat completion
    print("–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ chat completion:")
    try:
        response = await client.chat_completion([
            {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏."},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–æ–≥–∏ –º–Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º."}
        ], max_tokens=100)
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç: {response}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # Streaming (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if UniversalCapability.STREAMING in client.universal_config.capabilities:
        print("\n–¢–µ—Å—Ç streaming:")
        try:
            print("Streaming –æ—Ç–≤–µ—Ç: ", end="", flush=True)
            async for chunk in client.chat_completion_stream([
                {"role": "user", "content": "–ü–µ—Ä–µ—á–∏—Å–ª–∏ 3 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"}
            ]):
                print(chunk, end="", flush=True)
            print()
        except Exception as e:
            print(f"‚ùå Streaming –æ—à–∏–±–∫–∞: {e}")


async def step4_test_structured_output(client):
    """–®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ structured output"""
    print("\nüìã –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ structured output")
    print("=" * 60)
    
    if UniversalCapability.STRUCTURED_OUTPUT not in client.universal_config.capabilities:
        print("‚ö†Ô∏è Structured output –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
        task = await client.chat_completion_structured([
            {"role": "system", "content": "–°–æ–∑–¥–∞–≤–∞–π –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ."},
            {"role": "user", "content": "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—Å–æ–∫–∏–π, –ø—Ä–∏–º–µ—Ä–Ω–æ 20 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã."}
        ], response_model=ProjectTask)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}")
        print(f"   –í—Ä–µ–º—è: {task.estimated_hours} —á–∞—Å–æ–≤")
        print(f"   –¢–µ–≥–∏: {task.tags}")
        
        return task
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ structured output: {e}")
        return None


async def step5_test_function_calling(client):
    """–®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ function calling"""
    print("\nüîß –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ function calling")
    print("=" * 60)
    
    if UniversalCapability.FUNCTION_CALLING not in client.universal_config.capabilities:
        print("‚ö†Ô∏è Function calling –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    client.register_function("get_weather", get_weather, "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ")
    
    try:
        response = await client.chat_completion([
            {"role": "system", "content": "–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."},
            {"role": "user", "content": "–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ? –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é get_weather."}
        ], functions=[{
            "name": "get_weather",
            "description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ",
            "parameters": {
                "type": "object",
                "properties": {
                    "city": {"type": "string", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"}
                },
                "required": ["city"]
            }
        }], max_tokens=200)
        
        print(f"‚úÖ Function calling –æ—Ç–≤–µ—Ç: {response}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ function calling: {e}")


async def step6_test_reasoning(client):
    """–®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reasoning"""
    print("\nüß† –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reasoning")
    print("=" * 60)
    
    if UniversalCapability.REASONING not in client.universal_config.capabilities:
        print("‚ö†Ô∏è Reasoning –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    try:
        response = await client.reasoning_completion([
            {"role": "user", "content": """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ—à–∞–≥–æ–≤–æ:
            
            –£ –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç —Å 5 –∑–∞–¥–∞—á–∞–º–∏:
            1. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (8 —á–∞—Å–æ–≤) - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            2. –î–∏–∑–∞–π–Ω (12 —á–∞—Å–æ–≤) - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ  
            3. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (40 —á–∞—Å–æ–≤) - –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ 60%)
            4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (16 —á–∞—Å–æ–≤) - –Ω–µ –Ω–∞—á–∞—Ç–æ
            5. –î–µ–ø–ª–æ–π (4 —á–∞—Å–æ–≤) - –Ω–µ –Ω–∞—á–∞—Ç–æ
            
            –í–æ–ø—Ä–æ—Å—ã:
            1. –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ?
            2. –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å?
            3. –ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω?
            4. –ö–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é?
            """}
        ], problem_type="analysis")
        
        print(f"‚úÖ Reasoning –∞–Ω–∞–ª–∏–∑:")
        print(response)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ reasoning: {e}")


async def step7_test_embeddings(client):
    """–®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ embeddings"""
    print("\nüîç –®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ embeddings")
    print("=" * 60)
    
    if UniversalCapability.EMBEDDINGS not in client.universal_config.capabilities:
        print("‚ö†Ô∏è Embeddings –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    try:
        # –¢–µ–∫—Å—Ç—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        project_docs = [
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É API",
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å–∏—Å—Ç–µ–º—ã",
            "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "–ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–µ–ø–ª–æ—é"
        ]
        
        embeddings = await client.get_embeddings(project_docs)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(embeddings)} –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π")
        
        # –ü–æ–∏—Å–∫ –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if UniversalCapability.SIMILARITY_SEARCH in client.universal_config.capabilities:
            results = await client.similarity_search(
                query_text="–∫–∞–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                candidate_texts=project_docs,
                top_k=2
            )
            
            print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É:")
            for i, result in enumerate(results[:2], 1):
                print(f"   {i}. {result}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ embeddings: {e}")


async def step8_comprehensive_example(client):
    """–®–∞–≥ 8: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\nüéØ –®–∞–≥ 8: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º")
    print("=" * 60)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ structured output
        tasks = []
        
        if UniversalCapability.STRUCTURED_OUTPUT in client.universal_config.capabilities:
            task_descriptions = [
                "–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å REST API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", 
                "–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD –ø–∞–π–ø–ª–∞–π–Ω",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            ]
            
            for desc in task_descriptions:
                try:
                    task = await client.chat_completion_structured([
                        {"role": "system", "content": "–°–æ–∑–¥–∞–≤–∞–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."},
                        {"role": "user", "content": f"–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: {desc}. –û—Ü–µ–Ω–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç 1 –¥–æ 5 –∏ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö."}
                    ], response_model=ProjectTask)
                    
                    tasks.append(task)
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {desc}")
        
        if tasks:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞:")
            total_hours = 0
            for i, task in enumerate(tasks, 1):
                print(f"   {i}. {task.title} ({task.estimated_hours}—á, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {task.priority})")
                total_hours += task.estimated_hours
            
            print(f"\nüìä –û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–µ–∫—Ç–∞: {total_hours} —á–∞—Å–æ–≤")
        
        # 2. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ reasoning
        if UniversalCapability.REASONING in client.universal_config.capabilities and tasks:
            analysis = await client.reasoning_completion([
                {"role": "user", "content": f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–µ–∫—Ç —Å –∑–∞–¥–∞—á–∞–º–∏:
                {[f"{t.title} ({t.estimated_hours}—á, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {t.priority})" for t in tasks]}
                
                –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
                1. –ü–æ—Ä—è–¥–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
                2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤
                3. –†–∏—Å–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞
                4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
                """}
            ], problem_type="project_analysis")
            
            print(f"\nüß† –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:")
            print(analysis)
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        if UniversalCapability.FUNCTION_CALLING in client.universal_config.capabilities:
            weather_response = await client.chat_completion([
                {"role": "system", "content": "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."},
                {"role": "user", "content": "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã."}
            ], functions=[{
                "name": "get_weather",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É",
                "parameters": {
                    "type": "object",
                    "properties": {"city": {"type": "string"}},
                    "required": ["city"]
                }
            }])
            
            print(f"\nüå§Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {weather_response}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ: {e}")


async def step9_performance_monitoring(client):
    """–®–∞–≥ 9: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüìà –®–∞–≥ 9: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    info = client.get_client_info()
    print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:")
    print(f"   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {len(info['capabilities'])}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {info['active_clients']}")
    print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {info['config']}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
    test_results = await client.test_capabilities()
    
    working_capabilities = []
    failed_capabilities = []
    
    for capability, result in test_results.items():
        if result:
            working_capabilities.append(capability)
            print(f"   ‚úÖ {capability}")
        else:
            failed_capabilities.append(capability)
            print(f"   ‚ùå {capability}")
    
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –†–∞–±–æ—Ç–∞—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {len(working_capabilities)}")
    print(f"   –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {len(failed_capabilities)}")
    print(f"   –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(working_capabilities) / len(test_results) * 100:.1f}%")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª–Ω—ã–π workflow"""
    print("üéØ Kraken LLM Universal Client - –ü–æ–ª–Ω—ã–π Workflow")
    print("=" * 80)
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: –∞–Ω–∞–ª–∏–∑ ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
    print()
    
    try:
        # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        capabilities_report = await step1_analyze_capabilities()
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client = await step2_create_optimal_client(capabilities_report)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        async with client:
            # –®–∞–≥ 3: –ë–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            await step3_test_basic_capabilities(client)
            
            # –®–∞–≥ 4: Structured output
            await step4_test_structured_output(client)
            
            # –®–∞–≥ 5: Function calling
            await step5_test_function_calling(client)
            
            # –®–∞–≥ 6: Reasoning
            await step6_test_reasoning(client)
            
            # –®–∞–≥ 7: Embeddings
            await step7_test_embeddings(client)
            
            # –®–∞–≥ 8: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä
            await step8_comprehensive_example(client)
            
            # –®–∞–≥ 9: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await step9_performance_monitoring(client)
        
        print("\n" + "=" * 80)
        print("üéâ –ü–æ–ª–Ω—ã–π workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö –º–æ–¥–µ–ª–µ–π")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ model_capabilities_analyzer.py –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        print("4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ UniversalLLMClient –≤ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
    except KeyboardInterrupt:
        print("\n‚ùå Workflow –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ workflow: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å UniversalLLMClient

–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Kraken LLM
–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM API —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ .env —Ñ–∞–π–ª–∞.
"""

import asyncio
import sys
import os
from pathlib import Path
from pydantic import BaseModel
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Kraken LLM
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from kraken_llm import (
    create_basic_client,
    create_advanced_client,
    create_universal_client,
    UniversalCapability,
    LLMConfig
)


class SimpleTask(BaseModel):
    """–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏"""
    title: str
    priority: int
    completed: bool = False


async def quick_start_basic():
    """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç - –ë–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not os.getenv('LLM_ENDPOINT'):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM_ENDPOINT –≤ .env —Ñ–∞–π–ª–µ")
        print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª –ø–æ –ø—Ä–∏–º–µ—Ä—É .env.example")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config = LLMConfig()
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {config.endpoint}")
    print(f"üìù –ú–æ–¥–µ–ª—å: {config.model}")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ chat + streaming)
    try:
        async with create_basic_client(config=config) as client:
            # –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç
            print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —á–∞—Ç...")
            response = await client.chat_completion([
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ - –∫–∞–∫ –¥–µ–ª–∞?"}
            ], max_tokens=50)
            print(f"–û—Ç–≤–µ—Ç: {response}")
            
            # Streaming
            print("\nüåä –¢–µ—Å—Ç–∏—Ä—É–µ–º streaming...")
            print("–û—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º: ", end="")
            async for chunk in client.chat_completion_stream([
                {"role": "user", "content": "–°—á–∏—Ç–∞–π –æ—Ç 1 –¥–æ 5, –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"}
            ], max_tokens=30):
                print(chunk, end="", flush=True)
            print("\n")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞")


async def quick_start_advanced():
    """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    print("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    print("-" * 50)
    
    if not os.getenv('LLM_ENDPOINT'):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    config = LLMConfig()
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {config.endpoint}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∏–µ–Ω—Ç
    try:
        async with create_advanced_client(config=config) as client:
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {client.get_available_capabilities()}")
            
            # Structured output —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
            try:
                print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º structured output (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback)...")
                task = await client.chat_completion_structured([
                    {"role": "system", "content": "–°–æ–∑–¥–∞–≤–∞–π –∑–∞–¥–∞—á–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ."},
                    {"role": "user", "content": "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"}
                ], response_model=SimpleTask, max_tokens=100)
                
                print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}")
                print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}")
                print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {task.completed}")
                
            except Exception as e:
                print(f"‚ùå Structured output –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   - –ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                print("   - –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ outlines")
                print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –æ—Ç–≤–µ—Ç–∞")
            
            # Function calling
            print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º function calling...")
            
            def get_current_time():
                """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
                from datetime import datetime
                return datetime.now().strftime("%H:%M:%S")
            
            client.register_function(
                name="get_current_time",
                function=get_current_time,
                description="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"
            )
            
            try:
                response = await client.chat_completion([
                    {"role": "user", "content": "–°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏?"}
                ], max_tokens=50)
                print(f"‚úÖ Function calling: {response}")
            except Exception as e:
                print(f"‚ùå Function calling –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # Reasoning
            print("\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º reasoning...")
            try:
                response = await client.reasoning_completion([
                    {"role": "user", "content": "–†–µ—à–∏ –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É: 15 + 27 = ?"}
                ], max_tokens=100)
                print(f"‚úÖ Reasoning: {response}")
            except Exception as e:
                print(f"‚ùå Reasoning –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞")


async def quick_start_custom():
    """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("‚öôÔ∏è –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç - –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("-" * 50)
    
    if not os.getenv('LLM_ENDPOINT'):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    config = LLMConfig()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    capabilities = {
        UniversalCapability.CHAT_COMPLETION,
        UniversalCapability.STREAMING,
        UniversalCapability.STRUCTURED_OUTPUT,
    }
    
    try:
        async with create_universal_client(
            config=config, 
            capabilities=capabilities
        ) as client:
            print(f"üéØ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {client.get_available_capabilities()}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")
            test_results = await client.test_capabilities()
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            for capability, result in test_results.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"  {status} {capability}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def quick_start_from_analyzer():
    """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üìä –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç - –ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
    print("-" * 50)
    
    if not os.getenv('LLM_ENDPOINT'):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥–µ–ª–∏
    print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥–µ–ª–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        sys.path.insert(0, str(Path(__file__).parent.parent))
        from model_capabilities_analyzer import ModelCapabilitiesAnalyzer
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
        analyzer = ModelCapabilitiesAnalyzer()
        print("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)...")
        
        capabilities_report = await analyzer.analyze_all_models(quick_mode=True)
        
        if not capabilities_report.get('model_summaries'):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        from kraken_llm import create_universal_client_from_report
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ –æ—Ç—á–µ—Ç–∞
        model_name = next(iter(capabilities_report['model_summaries'].keys()))
        print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
        
        async with create_universal_client_from_report(
            capabilities_report, 
            model_name=model_name
        ) as client:
            print(f"üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞: {client.get_available_capabilities()}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            response = await client.chat_completion([
                {"role": "user", "content": "–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥–µ–ª–∏"}
            ], max_tokens=50)
            print(f"‚úÖ –û—Ç–≤–µ—Ç: {response}")
            
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ model_capabilities_analyzer.py –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ Kraken LLM Universal Client - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
    print("=" * 60)
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        await quick_start_basic()
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏  
        await quick_start_advanced()
        
        # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        await quick_start_custom()
        
        # –ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        await quick_start_from_analyzer()
        
        print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ (—Å–º. .env.example)")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ python3 model_capabilities_analyzer.py –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_universal_client_from_report() —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        print("4. –ò–∑—É—á–∏—Ç–µ universal_client_example.py –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
        print("\nüîß –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        if os.getenv('LLM_ENDPOINT'):
            print(f"   Endpoint: {os.getenv('LLM_ENDPOINT')}")
            print(f"   Model: {os.getenv('LLM_MODEL', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
        else:
            print("   ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
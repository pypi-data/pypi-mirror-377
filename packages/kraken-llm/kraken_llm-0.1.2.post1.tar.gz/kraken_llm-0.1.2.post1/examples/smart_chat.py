#!/usr/bin/env python3
"""
–£–º–Ω—ã–π —á–∞—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
"""
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()
#sys.path.insert(0, str(Path(__file__).parent / "src"))

from kraken_llm import (
    create_reasoning_client,
    create_streaming_client,
    LLMConfig,
    ReasoningConfig,
)


def analyze_reasoning_quality(content: str, chunk_count: int) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
    content_clean = content.strip()

    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    min_length = len(content_clean) > 50
    min_chunks = chunk_count > 5

    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    reasoning_keywords = [
        "–ø–æ—Ç–æ–º—É —á—Ç–æ",
        "–ø–æ—Å–∫–æ–ª—å–∫—É",
        "—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ",
        "—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º",
        "–≤–æ-–ø–µ—Ä–≤—ã—Ö",
        "–≤–æ-–≤—Ç–æ—Ä—ã—Ö",
        "—Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º",
        "–∞–Ω–∞–ª–∏–∑",
        "—à–∞–≥",
        "—Å–Ω–∞—á–∞–ª–∞",
        "–∑–∞—Ç–µ–º",
        "–¥–∞–ª–µ–µ",
        "–∏—Ç–∞–∫",
        "–∑–Ω–∞—á–∏—Ç",
        "–ø–æ—ç—Ç–æ–º—É",
    ]

    has_reasoning_words = any(
        word in content_clean.lower() for word in reasoning_keywords
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–µ—Å—Ç—å –ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    sentences = content_clean.split(".")
    has_structure = len(sentences) > 2 and any(len(s.strip()) > 20 for s in sentences)

    quality_score = sum([min_length, min_chunks, has_reasoning_words, has_structure])

    return {
        "is_good": quality_score >= 2,  # –ú–∏–Ω–∏–º—É–º 2 –∏–∑ 4 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        "score": quality_score,
        "length": len(content_clean),
        "chunks": chunk_count,
        "has_keywords": has_reasoning_words,
        "has_structure": has_structure,
    }


async def main():
    print("üß† Smart Reasoning Chat")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π")
    print("‚îÄ" * 60)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è reasoning –∏–∑ .env (LLM_REASONING_*), —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º fallback –Ω–∞ LLM_*
    reasoning_config = LLMConfig(
        endpoint=(
            os.getenv("LLM_REASONING_ENDPOINT")
            or os.getenv("REASONING_ENDPOINT")
            or os.getenv("LLM_ENDPOINT")
        ),
        api_key=(
            os.getenv("LLM_REASONING_TOKEN")
            or os.getenv("LLM_REASONING_API_KEY")
            or os.getenv("REASONING_TOKEN")
            or os.getenv("LLM_TOKEN")
        ),
        model=(
            os.getenv("LLM_REASONING_MODEL")
            or os.getenv("REASONING_MODEL")
            or os.getenv("LLM_MODEL")
            or "thinking"
        ),
    )

    chat_config = LLMConfig()

    print(f"üß† Reasoning: {reasoning_config.model} | {reasoning_config.endpoint}")
    print(f"üí¨ Chat: {chat_config.model} | {chat_config.endpoint}")
    print()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    reasoning_client = None
    chat_client = None

    try:
        if reasoning_config.endpoint:
            reasoning_client = create_reasoning_client(
                config=reasoning_config,
                reasoning_config=ReasoningConfig(
                    model_type="native_thinking",
                    enable_thinking=True,
                    expose_thinking=True,
                ),
            )
            await reasoning_client.__aenter__()
            print("‚úÖ Reasoning –º–æ–¥–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

        chat_client = create_streaming_client(config=chat_config)
        await chat_client.__aenter__()
        print("‚úÖ Chat –º–æ–¥–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        print("\nüí° –í–≤–µ–¥–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")

        while True:
            try:
                user_input = input("üë§ ").strip()
                if user_input.lower() in ["q", "quit", "exit", "–π"]:
                    break
                if not user_input:
                    continue

                print()
                reasoning_success = False

                # –®–∞–≥ 1: –ü—Ä–æ–±—É–µ–º reasoning –º–æ–¥–µ–ª—å
                if reasoning_client:
                    try:
                        print("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ reasoning –º–æ–¥–µ–ª—å...")
                        print("‚îÄ" * 50)
                        print("üí≠ ", end="", flush=True)

                        reasoning_content = ""
                        chunk_count = 0

                        async for chunk in reasoning_client.chat_completion_stream(
                            [
                                {
                                    "role": "user",
                                    "content": f"–ü–æ–¥—É–º–∞–π –ø–æ—à–∞–≥–æ–≤–æ –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å—É: {user_input}",
                                }
                            ],
                            max_tokens=2500,
                        ):
                            print(chunk, end="", flush=True)
                            reasoning_content += chunk
                            chunk_count += 1

                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                        quality = analyze_reasoning_quality(
                            reasoning_content, chunk_count
                        )

                        if quality["is_good"]:
                            print(
                                f"\n‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è (score: {quality['score']}/4)"
                            )
                            print("‚îÄ" * 50)
                            reasoning_success = True
                        else:
                            print(f"\n‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π:")
                            print(
                                f"   –î–ª–∏–Ω–∞: {quality['length']} | Chunks: {quality['chunks']}"
                            )
                            print(
                                f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {quality['has_keywords']} | –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {quality['has_structure']}"
                            )
                            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ chat –º–æ–¥–µ–ª—å...")

                    except Exception as e:
                        print(f"\n‚ùå –û—à–∏–±–∫–∞ reasoning –º–æ–¥–µ–ª–∏: {e}")
                        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ chat –º–æ–¥–µ–ª—å...")

                # –®–∞–≥ 2: Fallback –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ chat –º–æ–¥–µ–ª—å
                if not reasoning_success:
                    print("\nüß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ chat –º–æ–¥–µ–ª—å:")
                    print("‚îÄ" * 50)
                    print("üí≠ ", end="", flush=True)

                    async for chunk in chat_client.chat_completion_stream(
                        [
                            {
                                "role": "user",
                                "content": f"–ü–æ–¥—É–º–∞–π –ø–æ—à–∞–≥–æ–≤–æ –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å—É: {user_input}",
                            }
                        ],
                        max_tokens=3000,
                    ):
                        print(chunk, end="", flush=True)

                    print("\n" + "‚îÄ" * 50)

                # –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                print("ü§ñ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ", end="", flush=True)
                async for chunk in chat_client.chat_completion_stream(
                    [{"role": "user", "content": user_input}], max_tokens=4000
                ):
                    print(chunk, end="", flush=True)

                print("\n")

            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}\n")

    finally:
        if reasoning_client:
            await reasoning_client.__aexit__(None, None, None)
        if chat_client:
            await chat_client.__aexit__(None, None, None)

    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == "__main__":
    asyncio.run(main())

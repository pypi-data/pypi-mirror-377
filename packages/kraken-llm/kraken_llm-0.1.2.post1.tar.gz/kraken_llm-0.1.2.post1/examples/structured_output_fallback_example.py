#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Structured Output —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ UniversalLLMClient –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É:
1. –ù–∞—Ç–∏–≤–Ω—ã–π structured output (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
2. Outlines —Ä–µ–∂–∏–º (fallback)
3. –û–±—ã—á–Ω—ã–π chat completion —Å JSON –ø–∞—Ä—Å–∏–Ω–≥–æ–º (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π fallback)
"""

import asyncio
import sys
from pathlib import Path
from typing import List, Optional
from pydantic import BaseModel, Field

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Kraken LLM
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from kraken_llm import create_advanced_client, LLMConfig
from kraken_llm.client.universal import UniversalLLMClient, UniversalClientConfig, UniversalCapability


# –ú–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class Task(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏"""
    title: str = Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    description: str = Field(description="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    priority: int = Field(description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç 1 –¥–æ 5", ge=1, le=5)
    estimated_hours: float = Field(description="–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö")
    tags: List[str] = Field(default=[], description="–¢–µ–≥–∏ –∑–∞–¥–∞—á–∏")
    completed: bool = Field(default=False, description="–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")


class ProjectPlan(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–ª–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_name: str = Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    description: str = Field(description="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    tasks: List[Task] = Field(description="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    total_hours: float = Field(description="–û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–µ–∫—Ç–∞")
    deadline: Optional[str] = Field(default=None, description="–î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞")


class UserProfile(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name: str = Field(description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    age: int = Field(description="–í–æ–∑—Ä–∞—Å—Ç", ge=0, le=150)
    email: str = Field(description="Email –∞–¥—Ä–µ—Å")
    skills: List[str] = Field(description="–ù–∞–≤—ã–∫–∏ –∏ —É–º–µ–Ω–∏—è")
    experience_years: int = Field(description="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö", ge=0)
    is_active: bool = Field(default=True, description="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")


async def demo_simple_structured_output():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ structured output"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ structured output")
    print("=" * 60)
    
    async with create_advanced_client() as client:
        try:
            print("–°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É...")
            task = await client.chat_completion_structured([
                {"role": "system", "content": "–°–æ–∑–¥–∞–≤–∞–π –∑–∞–¥–∞—á–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ."},
                {"role": "user", "content": "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –Ω–∞–ø–∏—Å–∞—Ç—å unit —Ç–µ—Å—Ç—ã –¥–ª—è API. –≠—Ç–æ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞."}
            ], response_model=Task)
            
            print("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
            print(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}")
            print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}")
            print(f"   ‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}/5")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {task.estimated_hours} —á–∞—Å–æ–≤")
            print(f"   üè∑Ô∏è –¢–µ–≥–∏: {task.tags}")
            print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {task.completed}")
            
            return task
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return None


async def demo_complex_structured_output():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ structured output"""
    print("\nüèóÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ structured output")
    print("=" * 60)
    
    async with create_advanced_client() as client:
        try:
            print("–°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏...")
            project = await client.chat_completion_structured([
                {"role": "system", "content": "–°–æ–∑–¥–∞–≤–∞–π –ø–ª–∞–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ."},
                {"role": "user", "content": """
                –°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏" —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏:
                1. –î–∏–∑–∞–π–Ω UI/UX (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4, 16 —á–∞—Å–æ–≤)
                2. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ backend API (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5, 40 —á–∞—Å–æ–≤) 
                3. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ frontend (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4, 32 —á–∞—Å–æ–≤)
                4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3, 20 —á–∞—Å–æ–≤)
                5. –î–µ–ø–ª–æ–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2, 8 —á–∞—Å–æ–≤)
                
                –î–µ–¥–ª–∞–π–Ω: 2024-03-01
                """}
            ], response_model=ProjectPlan)
            
            print("‚úÖ –ü–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
            print(f"   üöÄ –ü—Ä–æ–µ–∫—Ç: {project.project_name}")
            print(f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {project.description}")
            print(f"   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {project.total_hours} —á–∞—Å–æ–≤")
            print(f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {project.deadline}")
            print(f"   üìã –ó–∞–¥–∞—á–∏ ({len(project.tasks)}):")
            
            for i, task in enumerate(project.tasks, 1):
                print(f"      {i}. {task.title} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {task.priority}, {task.estimated_hours}—á)")
            
            return project
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None


async def demo_user_profile_extraction():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print("\nüë§ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("=" * 60)
    
    async with create_advanced_client() as client:
        try:
            print("–ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞...")
            
            user_text = """
            –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞, –º–Ω–µ 28 –ª–µ—Ç. –†–∞–±–æ—Ç–∞—é Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —É–∂–µ 5 –ª–µ—Ç.
            –ú–æ–π email: anna.petrova@example.com. –ó–Ω–∞—é Python, Django, PostgreSQL, Docker, 
            Kubernetes. –¢–∞–∫–∂–µ –∏–∑—É—á–∞—é –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ data science. –ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É—é 
            –≤ open source –ø—Ä–æ–µ–∫—Ç–∞—Ö.
            """
            
            profile = await client.chat_completion_structured([
                {"role": "system", "content": "–ò–∑–≤–ª–µ–∫–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."},
                {"role": "user", "content": f"–ò–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞:\n\n{user_text}"}
            ], response_model=UserProfile)
            
            print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–≤–ª–µ—á–µ–Ω:")
            print(f"   üë§ –ò–º—è: {profile.name}")
            print(f"   üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.age} –ª–µ—Ç")
            print(f"   üìß Email: {profile.email}")
            print(f"   üíº –û–ø—ã—Ç: {profile.experience_years} –ª–µ—Ç")
            print(f"   üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {', '.join(profile.skills)}")
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {profile.is_active}")
            
            return profile
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return None


async def demo_fallback_behavior():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤"""
    print("\nüîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Ç–æ–ª—å–∫–æ structured output –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
    config = UniversalClientConfig(
        capabilities={
            UniversalCapability.CHAT_COMPLETION,
            UniversalCapability.STRUCTURED_OUTPUT
        }
    )
    
    async with UniversalLLMClient(LLMConfig(), config) as client:
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ fallback...")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ (–¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å)
        try:
            print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏:")
            task = await client.chat_completion_structured([
                {"role": "user", "content": "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å email"}
            ], response_model=Task)
            
            print(f"   ‚úÖ –£—Å–ø–µ—Ö: {task.title}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å fallback)
        try:
            print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–π –º–æ–¥–µ–ª–∏:")
            project = await client.chat_completion_structured([
                {"role": "user", "content": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç —Å 2 –∑–∞–¥–∞—á–∞–º–∏"}
            ], response_model=ProjectPlan)
            
            print(f"   ‚úÖ –£—Å–ø–µ—Ö: {project.project_name} —Å {len(project.tasks)} –∑–∞–¥–∞—á–∞–º–∏")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ fallback
        info = client.get_client_info()
        print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:")
        print(f"   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {info['capabilities']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {info['active_clients']}")


async def demo_performance_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
    print("\n‚ö° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    import time
    
    async with create_advanced_client() as client:
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á...")
        
        times = []
        for i in range(3):
            start_time = time.time()
            
            try:
                task = await client.chat_completion_structured([
                    {"role": "user", "content": f"–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –Ω–æ–º–µ—Ä {i+1}: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"}
                ], response_model=Task)
                
                elapsed = time.time() - start_time
                times.append(elapsed)
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {elapsed:.2f}s - {task.title}")
                
            except Exception as e:
                elapsed = time.time() - start_time
                times.append(elapsed)
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {elapsed:.2f}s - –û—à–∏–±–∫–∞: {str(e)[:50]}...")
        
        if times:
            avg_time = sum(times) / len(times)
            print(f"\nüìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}s")
            print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω: {min(times):.2f}s - {max(times):.2f}s")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ Structured Output —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º Fallback")
    print("=" * 80)
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ structured output")
    print()
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π structured output
        task = await demo_simple_structured_output()
        
        # –°–ª–æ–∂–Ω—ã–π structured output
        project = await demo_complex_structured_output()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        profile = await demo_user_profile_extraction()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è fallback
        await demo_fallback_behavior()
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await demo_performance_comparison()
        
        print("\n" + "=" * 80)
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = [task, project, profile]
        successful = sum(1 for r in results if r is not None)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {successful}/{len(results)}")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successful/len(results)*100:.1f}%")
        
        print(f"\nüí° –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
        print(f"   üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback –Ω–∞ Outlines —Ä–µ–∂–∏–º")
        print(f"   üõ°Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π fallback —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π chat completion")
        print(f"   üìù –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print(f"   ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
    except KeyboardInterrupt:
        print("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
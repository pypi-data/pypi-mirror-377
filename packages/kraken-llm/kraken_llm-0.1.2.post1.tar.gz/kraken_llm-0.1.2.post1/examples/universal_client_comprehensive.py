#!/usr/bin/env python3
"""
Comprehensive Universal Client Example

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π UniversalLLMClient —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ fallback.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM API —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ .env —Ñ–∞–π–ª–∞.
"""

import asyncio
import sys
import os
from pathlib import Path
from pydantic import BaseModel
from typing import List, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Kraken LLM
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from kraken_llm import (
    create_universal_client,
    create_basic_client,
    create_advanced_client,
    create_full_client,
    create_universal_client_from_report,
    UniversalCapability,
    UniversalClientConfig,
    LLMConfig
)


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class Task(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏"""
    title: str
    description: str
    priority: int
    estimated_hours: float
    tags: List[str] = []
    completed: bool = False


class ProjectPlan(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–ª–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    name: str
    description: str
    tasks: List[Task]
    total_hours: float
    deadline: str


class WeatherInfo(BaseModel):
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ"""
    city: str
    temperature: int
    condition: str
    humidity: int
    wind_speed: float


async def demo_basic_universal_client():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üîß –ë–∞–∑–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
    print("-" * 50)
    
    if not os.getenv('LLM_ENDPOINT'):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM_ENDPOINT –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    config = LLMConfig()
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {config.endpoint}")
    print(f"üìù –ú–æ–¥–µ–ª—å: {config.model}")
    
    try:
        async with create_basic_client(config=config) as client:
            print(f"üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {client.get_available_capabilities()}")
            
            # –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç
            print("\nüí¨ –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç:")
            response = await client.chat_completion([
                {"role": "user", "content": "–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"}
            ], max_tokens=150)
            print(f"–û—Ç–≤–µ—Ç: {response[:200]}...")
            
            # Streaming
            print("\nüåä Streaming –æ—Ç–≤–µ—Ç:")
            async for chunk in client.chat_completion_stream([
                {"role": "user", "content": "–ü–µ—Ä–µ—á–∏—Å–ª–∏ 3 –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Python"}
            ], max_tokens=100):
                print(chunk, end="", flush=True)
            print("\n")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞")


async def demo_advanced_universal_client():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    print("‚ö° –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
    print("-" * 50)
    
    async with create_advanced_client() as client:
        print(f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {client.get_available_capabilities()}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        test_results = await client.test_capabilities()
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for capability, result in test_results.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"  {status} {capability}")
        
        # Structured output —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ structured output...")
        try:
            task = await client.chat_completion_structured([
                {"role": "system", "content": "–°–æ–∑–¥–∞–≤–∞–π –∑–∞–¥–∞—á–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ."},
                {"role": "user", "content": "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"}
            ], response_model=Task)
            
            print("‚úÖ Structured output —É—Å–ø–µ—à–Ω–æ:")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}")
            print(f"   –ß–∞—Å—ã: {task.estimated_hours}")
            print(f"   –¢–µ–≥–∏: {task.tags}")
            
        except Exception as e:
            print(f"‚ùå Structured output –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Function calling
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ function calling...")
        
        def get_weather(city: str) -> str:
            """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ"""
            return f"–í –≥–æ—Ä–æ–¥–µ {city}: —Å–æ–ª–Ω–µ—á–Ω–æ, +22¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å 60%, –≤–µ—Ç–µ—Ä 5 –º/—Å"
        
        client.register_function(
            name="get_weather",
            function=get_weather,
            description="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ",
            parameters={
                "type": "object",
                "properties": {
                    "city": {"type": "string", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"}
                },
                "required": ["city"]
            }
        )
        
        try:
            response = await client.chat_completion([
                {"role": "user", "content": "–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?"}
            ])
            print(f"‚úÖ Function calling: {response}")
        except Exception as e:
            print(f"‚ùå Function calling –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Reasoning
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reasoning...")
        try:
            response = await client.reasoning_completion([
                {"role": "user", "content": "–†–µ—à–∏ –∑–∞–¥–∞—á—É: –£ –ê–Ω–Ω—ã –±—ã–ª–æ 15 —è–±–ª–æ–∫, –æ–Ω–∞ –¥–∞–ª–∞ 3 —è–±–ª–æ–∫–∞ –ë–æ—Ä–∏—Å—É –∏ 5 —è–±–ª–æ–∫ –í–µ—Ä–µ. –°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å —É –ê–Ω–Ω—ã?"}
            ], problem_type="math")
            print(f"‚úÖ Reasoning: {response}")
        except Exception as e:
            print(f"‚ùå Reasoning –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


async def demo_custom_configuration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("‚öôÔ∏è –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
    print("-" * 50)
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    capabilities = {
        UniversalCapability.CHAT_COMPLETION,
        UniversalCapability.STREAMING,
        UniversalCapability.STRUCTURED_OUTPUT,
        UniversalCapability.FUNCTION_CALLING,
        UniversalCapability.REASONING
    }
    
    # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM
    config = LLMConfig(
        temperature=0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        max_tokens=1500,
        stream=False
    )
    
    async with create_universal_client(
        config=config,
        capabilities=capabilities,
        auto_fallback=True,
        prefer_streaming=False
    ) as client:
        
        print(f"–ö–∞—Å—Ç–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {client.get_available_capabilities()}")
        print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {client.get_client_info()}")
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å structured output
        try:
            project = await client.chat_completion_structured([
                {"role": "system", "content": "–°–æ–∑–¥–∞–≤–∞–π –ø–ª–∞–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."},
                {"role": "user", "content": """
                –°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.
                –í–∫–ª—é—á–∏ 4-5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –æ—Ü–µ–Ω–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏.
                """}
            ], response_model=ProjectPlan)
            
            print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π structured output:")
            print(f"   –ü—Ä–æ–µ–∫—Ç: {project.name}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {project.description}")
            print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {project.total_hours} —á–∞—Å–æ–≤")
            print(f"   –î–µ–¥–ª–∞–π–Ω: {project.deadline}")
            print(f"   –ó–∞–¥–∞—á–∏ ({len(project.tasks)}):")
            for i, task in enumerate(project.tasks, 1):
                print(f"     {i}. {task.title} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}, {task.estimated_hours}—á)")
                
        except Exception as e:
            print(f"‚ùå –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π structured output –Ω–µ —É–¥–∞–ª—Å—è: {e}")


async def demo_fallback_mechanisms():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ fallback"""
    print("üîÑ –ú–µ—Ö–∞–Ω–∏–∑–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ fallback")
    print("-" * 50)
    
    async with create_advanced_client() as client:
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è fallback –¥–ª—è structured output
        print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –¥–ª—è structured output...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class SimpleResponse(BaseModel):
            answer: str
            confidence: float
            reasoning: str
        
        try:
            # –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã fallback
            response = await client.chat_completion_structured([
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ."},
                {"role": "user", "content": "–û—Ü–µ–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è –∑–∞–≤—Ç—Ä–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –∏ –æ–±—ä—è—Å–Ω–∏ —Å–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"}
            ], response_model=SimpleResponse)
            
            print("‚úÖ Fallback structured output —É—Å–ø–µ—à–Ω–æ:")
            print(f"   –û—Ç–≤–µ—Ç: {response.answer}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence}")
            print(f"   –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {response.reasoning}")
            
        except Exception as e:
            print(f"‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã fallback –Ω–µ —É–¥–∞–ª–∏—Å—å: {e}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
        
        # –ï—Å–ª–∏ reasoning –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–±—ã—á–Ω—ã–π chat
        try:
            response = await client.reasoning_completion([
                {"role": "user", "content": "–û–±—ä—è—Å–Ω–∏ –ø–æ—à–∞–≥–æ–≤–æ –∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –æ–º–ª–µ—Ç"}
            ])
            print(f"‚úÖ Reasoning (–∏–ª–∏ fallback): {response[:150]}...")
        except Exception as e:
            print(f"‚ùå Reasoning fallback –Ω–µ —É–¥–∞–ª—Å—è: {e}")


async def demo_from_capabilities_report():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("-" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ model_capabilities_analyzer.py)
    mock_report = {
        "model_summaries": {
            "test_model": {
                "confirmed_capabilities": [
                    {"capability": "chat_completion", "success_rate": 1.0},
                    {"capability": "streaming", "success_rate": 0.95},
                    {"capability": "structured_output_native", "success_rate": 0.8},
                    {"capability": "function_calling", "success_rate": 0.9},
                    {"capability": "reasoning_cot", "success_rate": 0.7},
                ],
                "failed_capabilities": [
                    {"capability": "multimodal_vision", "error": "Not supported"},
                    {"capability": "asr_stt", "error": "Endpoint not available"},
                ]
            }
        },
        "general_recommendations": [
            "–ú–æ–¥–µ–ª—å —Ö–æ—Ä–æ—à–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
            "Structured output —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ",
            "Function calling —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
        ]
    }
    
    try:
        async with create_universal_client_from_report(
            mock_report, 
            model_name="test_model"
        ) as client:
            
            print(f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞: {client.get_available_capabilities()}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            response = await client.chat_completion([
                {"role": "user", "content": "–¢–µ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"}
            ])
            print(f"‚úÖ Chat completion: {response[:100]}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º structured output (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –∞–Ω–∞–ª–∏–∑–µ)
            if "structured_output" in client.get_available_capabilities():
                try:
                    weather = await client.chat_completion_structured([
                        {"role": "user", "content": "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞"}
                    ], response_model=WeatherInfo)
                    
                    print("‚úÖ Structured output –∏–∑ –∞–Ω–∞–ª–∏–∑–∞:")
                    print(f"   –ì–æ—Ä–æ–¥: {weather.city}")
                    print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.temperature}¬∞C")
                    print(f"   –£—Å–ª–æ–≤–∏—è: {weather.condition}")
                    
                except Exception as e:
                    print(f"‚ùå Structured output –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            
    except Exception as e:
        print(f"‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –æ—Ç—á–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")


async def demo_performance_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
    print("‚ö° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤")
    print("-" * 50)
    
    import time
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        {"role": "user", "content": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏"}
    ]
    
    # –ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
    start_time = time.time()
    async with create_basic_client() as client:
        response1 = await client.chat_completion(test_messages)
    basic_time = time.time() - start_time
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∏–µ–Ω—Ç
    start_time = time.time()
    async with create_advanced_client() as client:
        response2 = await client.chat_completion(test_messages)
    advanced_time = time.time() - start_time
    
    # –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    start_time = time.time()
    async with create_full_client() as client:
        response3 = await client.chat_completion(test_messages)
    full_time = time.time() - start_time
    
    print(f"–ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: {basic_time:.3f}s")
    print(f"–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∏–µ–Ω—Ç: {advanced_time:.3f}s")
    print(f"–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {full_time:.3f}s")
    
    print(f"\n–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤:")
    print(f"–ë–∞–∑–æ–≤—ã–π: {len(response1)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π: {len(response2)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π: {len(response3)} —Å–∏–º–≤–æ–ª–æ–≤")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ Kraken LLM Universal Client - Comprehensive Demo")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not os.getenv('LLM_ENDPOINT'):
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª –ø–æ –ø—Ä–∏–º–µ—Ä—É .env.example")
        print("   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("   LLM_ENDPOINT=http://your-llm-server:port")
        print("   LLM_TOKEN=your-api-token")
        print("   LLM_MODEL=your-model-name")
        return
    
    print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:")
    print(f"   Endpoint: {os.getenv('LLM_ENDPOINT')}")
    print(f"   Model: {os.getenv('LLM_MODEL', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
    print()
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        await demo_basic_universal_client()
        print()
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        await demo_advanced_universal_client()
        print()
        
        # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        await demo_custom_configuration()
        print()
        
        # –ú–µ—Ö–∞–Ω–∏–∑–º—ã fallback
        await demo_fallback_mechanisms()
        print()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        await demo_from_capabilities_report()
        print()
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await demo_performance_comparison()
        
        print("\n" + "=" * 70)
        print("‚úÖ Comprehensive demo –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüí° –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ UniversalLLMClient:")
        print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback –¥–ª—è structured output")
        print("2. –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        print("3. –ì–∏–±–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        print("4. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ–ª–∏")
        print("5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        print("6. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
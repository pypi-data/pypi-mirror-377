#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è UniversalLLMClient

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Kraken LLM, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç
–≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –µ–¥–∏–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
"""

import asyncio
import sys
from pathlib import Path
from typing import List
from pydantic import BaseModel
from dotenv import load_dotenv

load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Kraken LLM
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from kraken_llm.config.settings import LLMConfig
from kraken_llm.client.universal import (
    UniversalLLMClient,
    UniversalClientConfig,
    UniversalCapability,
    create_universal_client,
    create_universal_client_from_report,
    create_basic_client,
    create_advanced_client,
    create_full_client
)
from kraken_llm.tools import register_function, register_tool


# –ú–æ–¥–µ–ª–∏ –¥–ª—è structured output
class TaskResponse(BaseModel):
    task: str
    priority: int
    estimated_time: str
    tags: List[str] = []


class WeatherInfo(BaseModel):
    city: str
    temperature: int
    condition: str
    humidity: int


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ function/tool calling
@register_function(description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ")
def get_weather(city: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ"""
    return f"–í –≥–æ—Ä–æ–¥–µ {city}: —Å–æ–ª–Ω–µ—á–Ω–æ, +22¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å 65%"


@register_tool(description="–í—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É —á–∏—Å–µ–ª")
def calculate_sum(a: int, b: int) -> int:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª"""
    return a + b


async def demo_basic_usage(config: LLMConfig):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è UniversalLLMClient")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    async with create_basic_client(config) as client:
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {client.get_available_capabilities()}")
        print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {client.get_active_clients()}")
        
        # –ë–∞–∑–æ–≤—ã–π chat completion
        response = await client.chat_completion([
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
        ], max_tokens=50)
        
        print(f"–û—Ç–≤–µ—Ç: {response}")
        
        # Streaming (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if UniversalCapability.STREAMING in client.universal_config.capabilities:
            print("\nStreaming –æ—Ç–≤–µ—Ç:")
            async for chunk in client.chat_completion_stream([
                {"role": "user", "content": "–°—á–∏—Ç–∞–π –æ—Ç 1 –¥–æ 5"}
            ]):
                print(chunk, end="", flush=True)
            print()


async def demo_advanced_usage(config: LLMConfig):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\nüöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    async with create_advanced_client(config) as client:
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {client.get_available_capabilities()}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        client.register_function("get_weather", get_weather, "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É")
        client.register_tool("calculate_sum", calculate_sum, "–í—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É")
        
        # Structured output
        if UniversalCapability.STRUCTURED_OUTPUT in client.universal_config.capabilities:
            try:
                task = await client.chat_completion_structured([
                    {"role": "user", "content": "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É"}
                ], response_model=TaskResponse)
                
                print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {task}")
            except Exception as e:
                print(f"Structured output –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Function calling
        if UniversalCapability.FUNCTION_CALLING in client.universal_config.capabilities:
            try:
                response = await client.chat_completion([
                    {"role": "user", "content": "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?"}
                ], functions=[{
                    "name": "get_weather",
                    "description": "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É",
                    "parameters": {
                        "type": "object",
                        "properties": {"city": {"type": "string"}},
                        "required": ["city"]
                    }
                }])
                
                print(f"Function calling –æ—Ç–≤–µ—Ç: {response}")
            except Exception as e:
                print(f"Function calling –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Reasoning
        if UniversalCapability.REASONING in client.universal_config.capabilities:
            try:
                response = await client.reasoning_completion([
                    {"role": "user", "content": "–†–µ—à–∏ –∑–∞–¥–∞—á—É: 15 + 27 = ?"}
                ], problem_type="math")
                
                print(f"Reasoning –æ—Ç–≤–µ—Ç: {response}")
            except Exception as e:
                print(f"Reasoning –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


async def demo_custom_configuration(config: LLMConfig):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    custom_capabilities = {
        UniversalCapability.CHAT_COMPLETION,
        UniversalCapability.STREAMING,
        UniversalCapability.STRUCTURED_OUTPUT,
        UniversalCapability.EMBEDDINGS,
    }
    
    universal_config = UniversalClientConfig(
        capabilities=custom_capabilities,
        prefer_streaming=True,
        auto_fallback=True
    )
    
    async with UniversalLLMClient(config, universal_config) as client:
        print(f"–ö–∞—Å—Ç–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {client.get_available_capabilities()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        test_results = await client.test_capabilities()
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for capability, result in test_results.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"  {status} {capability}")
        
        # Embeddings (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if UniversalCapability.EMBEDDINGS in client.universal_config.capabilities:
            try:
                embeddings = await client.get_embeddings([
                    "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    "–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                ])
                print(f"Embeddings –ø–æ–ª—É—á–µ–Ω—ã: {type(embeddings)}")
            except Exception as e:
                print(f"Embeddings –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")


async def demo_from_capabilities_report(config: LLMConfig):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
    print("=" * 60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    mock_report = {
        "model_summaries": {
            "test_model": {
                "confirmed_capabilities": [
                    {"capability": "chat_completion", "success_rate": 1.0},
                    {"capability": "streaming", "success_rate": 0.9},
                    {"capability": "structured_output_native", "success_rate": 0.8},
                    {"capability": "function_calling", "success_rate": 0.7},
                ]
            }
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞
    async with create_universal_client_from_report(mock_report, config=config, model_name="test_model") as client:
        print(f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞: {client.get_available_capabilities()}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
        info = client.get_client_info()
        print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:")
        for key, value in info.items():
            print(f"  {key}: {value}")


async def demo_convenience_functions(config: LLMConfig):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–¥–æ–±–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è"""
    print("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–¥–æ–±–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è")
    print("=" * 60)
    
    # –ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
    print("–ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:")
    async with create_basic_client(config) as client:
        capabilities = client.get_available_capabilities()
        print(f"  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {capabilities}")
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∏–µ–Ω—Ç
    print("\n–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∏–µ–Ω—Ç:")
    async with create_advanced_client(config) as client:
        capabilities = client.get_available_capabilities()
        print(f"  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {capabilities}")
    
    # –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    print("\n–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:")
    try:
        async with create_full_client(config) as client:
            capabilities = client.get_available_capabilities()
            print(f"  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {capabilities}")
    except Exception as e:
        print(f"  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {e}")
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ create_universal_client
    print("\n–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:")
    custom_caps = {
        UniversalCapability.CHAT_COMPLETION,
        UniversalCapability.STRUCTURED_OUTPUT
    }
    
    async with create_universal_client(config=config, capabilities=custom_caps) as client:
        capabilities = client.get_available_capabilities()
        print(f"  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {capabilities}")


async def demo_error_handling(config: LLMConfig):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\n‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    print("=" * 60)
    
    # –ö–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å –±–∞–∑–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    basic_config = UniversalClientConfig(
        capabilities={UniversalCapability.CHAT_COMPLETION},
        auto_fallback=False
    )
    
    async with UniversalLLMClient(config, basic_config) as client:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
        try:
            await client.chat_completion_structured([
                {"role": "user", "content": "–¢–µ—Å—Ç"}
            ], response_model=TaskResponse)
        except Exception as e:
            print(f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ structured output: {e}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å embeddings
        try:
            await client.get_embeddings(["—Ç–µ—Å—Ç"])
        except Exception as e:
            print(f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ embeddings: {e}")
        
        # –ë–∞–∑–æ–≤—ã–π chat completion –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
        try:
            response = await client.chat_completion([
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}
            ], max_tokens=10)
            print(f"–ë–∞–∑–æ–≤—ã–π chat completion —Ä–∞–±–æ—Ç–∞–µ—Ç: {bool(response)}")
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ chat completion: {e}")


async def demo_performance_comparison(config: LLMConfig):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    import time
    
    messages = [{"role": "user", "content": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"}]
    
    # –¢–µ—Å—Ç —Å –±–∞–∑–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
    start_time = time.time()
    async with create_basic_client(config) as client:
        response1 = await client.chat_completion(messages, max_tokens=50)
    basic_time = time.time() - start_time
    
    # –¢–µ—Å—Ç —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
    start_time = time.time()
    async with create_advanced_client(config) as client:
        response2 = await client.chat_completion(messages, max_tokens=50)
    advanced_time = time.time() - start_time
    
    print(f"–ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: {basic_time:.3f}s")
    print(f"–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∏–µ–Ω—Ç: {advanced_time:.3f}s")
    print(f"–†–∞–∑–Ω–∏—Ü–∞: {abs(advanced_time - basic_time):.3f}s")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("üöÄ Kraken LLM Universal Client Examples")
    print("=" * 80)
    
    try:
        config = LLMConfig()
        
        # –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        await demo_basic_usage(config)
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        await demo_advanced_usage(config)
        
        # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        await demo_custom_configuration(config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        await demo_from_capabilities_report(config)
        
        # –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await demo_convenience_functions(config)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        await demo_error_handling(config)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await demo_performance_comparison(config)
        
        print("\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞

–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UniversalLLMClient
–≤ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É Kraken LLM.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.
"""

import sys
import os
import asyncio
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Kraken LLM
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))


def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")

    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        from kraken_llm import (
            UniversalLLMClient,
            UniversalClientConfig,
            UniversalCapability,
            create_universal_client,
            create_universal_client_from_report,
            create_basic_client,
            create_advanced_client,
            create_full_client
        )
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")

        # –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏
        from kraken_llm.client.factory import ClientFactory
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —Ñ–∞–±—Ä–∏–∫–∏ —É—Å–ø–µ—à–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–±—Ä–∏–∫–µ
        available_types = ClientFactory.get_available_client_types()
        assert 'universal' in available_types, "Universal client –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–±—Ä–∏–∫–µ"
        print("‚úÖ Universal client –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–±—Ä–∏–∫–µ")

        return True

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_client_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤...")

    try:
        from kraken_llm import (
            create_universal_client,
            create_basic_client,
            create_advanced_client,
            UniversalCapability
        )

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        basic_client = create_basic_client()
        assert basic_client is not None
        print("‚úÖ –ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        advanced_client = create_advanced_client()
        assert advanced_client is not None
        print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        capabilities = {
            UniversalCapability.CHAT_COMPLETION,
            UniversalCapability.STREAMING
        }
        custom_client = create_universal_client(capabilities=capabilities)
        assert custom_client is not None
        print("‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False


def test_capabilities():
    """–¢–µ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")

    try:
        from kraken_llm import UniversalCapability, create_basic_client

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        capabilities = list(UniversalCapability)
        assert len(capabilities) > 0
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(capabilities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client = create_basic_client()
        available_caps = client.get_available_capabilities()
        assert isinstance(available_caps, list)
        assert len(available_caps) > 0
        print(f"‚úÖ –ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏–º–µ–µ—Ç {len(available_caps)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        return False


def test_factory_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–±—Ä–∏–∫–æ–π"""
    print("\nüè≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–±—Ä–∏–∫–æ–π...")

    try:
        from kraken_llm.client.factory import ClientFactory, create_client

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        client = ClientFactory.create_client(client_type='universal')
        assert client is not None
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É —É—Å–ø–µ—à–Ω–æ")

        # –¢–µ—Å—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        auto_client = create_client()  # –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å adaptive –∏–ª–∏ universal
        assert auto_client is not None
        print("‚úÖ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤
        types = ClientFactory.get_available_client_types()
        expected_types = ['standard', 'streaming', 'structured', 'universal']
        for expected_type in expected_types:
            assert expected_type in types, f"–¢–∏–ø {expected_type} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print(f"‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã: {len(types)}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–±—Ä–∏–∫–æ–π: {e}")
        return False


async def test_real_connection():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LLM API"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

    if not os.getenv('LLM_ENDPOINT'):
        print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return True

    try:
        from kraken_llm import create_basic_client, LLMConfig

        config = LLMConfig()
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {config.endpoint}")
        print(f"üìù –ú–æ–¥–µ–ª—å: {config.model}")

        async with create_basic_client(config=config) as client:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            response = await client.chat_completion([
                {"role": "user", "content": "–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: OK"}
            ], max_tokens=10)

            assert response is not None
            assert len(response.strip()) > 0
            print(f"‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.strip()}")

            return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UniversalLLMClient")
    print("=" * 50)

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    sync_tests = [
        test_imports,
        test_client_creation,
        test_capabilities,
        test_factory_integration
    ]

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async_tests = [
        test_real_connection
    ]

    passed = 0
    total = len(sync_tests) + len(async_tests)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    for test in sync_tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    for test in async_tests:
        try:
            if await test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")

    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)

#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ completion API —Å prompt + –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
"""

import asyncio
import os
import aiohttp
import json
from dotenv import load_dotenv

load_dotenv()

async def test_hybrid_completion():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ completion API"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ì–û COMPLETION API")
    print("=" * 60)
    
    base_url = os.getenv("COMPLETION_ENDPOINT").rstrip('/')
    token = os.getenv("COMPLETION_TOKEN")
    model = os.getenv("COMPLETION_MODEL")
    
    url = f"{base_url}/v1/completions"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã payload
    test_cases = [
        {
            "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OpenAI —Ñ–æ—Ä–º–∞—Ç",
            "payload": {
                "model": model,
                "prompt": "def hello_world():\n    print(",
                "max_tokens": 20,
                "temperature": 0.7
            }
        },
        {
            "name": "–ì–∏–±—Ä–∏–¥–Ω—ã–π: prompt + language + segments",
            "payload": {
                "model": model,
                "prompt": "def power_two_numbers(a: int, b: int): result = ",
                "language": "python",
                "segments": {
                    "prefix": "def power_two_numbers(a: int, b: int): result = "
                },
                "max_tokens": 20,
                "temperature": 0.7
            }
        },
        {
            "name": "–¢–æ–ª—å–∫–æ prompt –∏–∑ segments",
            "payload": {
                "model": model,
                "prompt": "#456456sdsds544\ndef power_two_numbers(a: int, b: int): result = ",
                "max_tokens": 20,
                "temperature": 0.7
            }
        },
        {
            "name": "Prompt + –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è",
            "payload": {
                "model": model,
                "prompt": "def calculate(x, y):\n    return ",
                "language": "python",
                "max_tokens": 20,
                "temperature": 0.2
            }
        },
        {
            "name": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π payload",
            "payload": {
                "prompt": "Hello, world!",
                "max_tokens": 10
            }
        }
    ]
    
    successful_cases = []
    
    for test_case in test_cases:
        print(f"\n--- {test_case['name']} ---")
        print(f"Payload: {json.dumps(test_case['payload'], indent=2)}")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=test_case['payload'], headers=headers, timeout=15) as response:
                    status = response.status
                    content_type = response.headers.get('content-type', '')
                    
                    print(f"–°—Ç–∞—Ç—É—Å: {status}, Content-Type: {content_type}")
                    
                    if status == 200:
                        try:
                            result = await response.json()
                            print(f"‚úÖ –£–°–ü–ï–•!")
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                            if 'choices' in result and result['choices']:
                                choice = result['choices'][0]
                                if 'text' in choice:
                                    completion_text = choice['text']
                                    print(f"–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: '{completion_text}'")
                                elif 'message' in choice and 'content' in choice['message']:
                                    completion_text = choice['message']['content']
                                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{completion_text}'")
                                else:
                                    print(f"–í—ã–±–æ—Ä: {choice}")
                            else:
                                print(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                            
                            successful_cases.append(test_case['name'])
                            
                        except Exception as parse_error:
                            text = await response.text()
                            print(f"‚úÖ –£–°–ü–ï–• (–Ω–µ JSON): {text[:200]}...")
                            successful_cases.append(test_case['name'])
                    else:
                        text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ {status}: {text}")
                        
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
    
    return successful_cases

async def test_streaming_completion():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ streaming completion"""
    print("\nüåä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï STREAMING COMPLETION")
    print("=" * 50)
    
    base_url = os.getenv("COMPLETION_ENDPOINT").rstrip('/')
    token = os.getenv("COMPLETION_TOKEN")
    model = os.getenv("COMPLETION_MODEL")
    
    url = f"{base_url}/v1/completions"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": model,
        "prompt": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return ",
        "max_tokens": 50,
        "temperature": 0.3,
        "stream": True
    }
    
    print(f"Streaming payload: {json.dumps(payload, indent=2)}")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers, timeout=30) as response:
                status = response.status
                
                print(f"–°—Ç–∞—Ç—É—Å: {status}")
                
                if status == 200:
                    print("‚úÖ Streaming –æ—Ç–≤–µ—Ç:")
                    
                    full_text = ""
                    async for line in response.content:
                        line_str = line.decode('utf-8').strip()
                        if line_str:
                            print(f"   Chunk: {line_str}")
                            
                            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SSE
                            if line_str.startswith('data: '):
                                data_str = line_str[6:]
                                if data_str != '[DONE]':
                                    try:
                                        data = json.loads(data_str)
                                        if 'choices' in data and data['choices']:
                                            choice = data['choices'][0]
                                            if 'text' in choice:
                                                full_text += choice['text']
                                    except:
                                        pass
                    
                    if full_text:
                        print(f"‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: '{full_text}'")
                        return True
                else:
                    text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ {status}: {text}")
                    
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
    
    return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        successful_cases = await test_hybrid_completion()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º streaming
        streaming_works = await test_streaming_completion()
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        if successful_cases:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: {len(successful_cases)}")
            for case in successful_cases:
                print(f"   ‚Ä¢ {case}")
        else:
            print("‚ùå –ù–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        if streaming_works:
            print("‚úÖ Streaming –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            print("‚ùå Streaming –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        if successful_cases:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CompletionLLMClient")
            print("2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–π—Ç–µ –ø–æ–ª–µ 'prompt'")
            print("3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π")
        else:
            print("\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç completion API")
            print("3. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π endpoint")
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Outlines –¥–ª—è structured output.

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å StructuredLLMClient
—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π Outlines, –≤–∫–ª—é—á–∞—è –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ edge cases.
"""

import asyncio
import json
import os
from typing import List, Optional, Union
from pydantic import BaseModel, Field

from kraken_llm.client.structured import StructuredLLMClient
from kraken_llm.config.settings import LLMConfig
from kraken_llm.structured.validator import validate_structured_response

from dotenv import load_dotenv

load_dotenv()


class Address(BaseModel):
    """–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    street: str = Field(..., description="–£–ª–∏—Ü–∞ –∏ –¥–æ–º")
    city: str = Field(..., description="–ì–æ—Ä–æ–¥")
    postal_code: str = Field(..., description="–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å")
    country: str = Field(default="–†–æ—Å—Å–∏—è", description="–°—Ç—Ä–∞–Ω–∞")


class Contact(BaseModel):
    """–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."""
    email: Optional[str] = Field(None, description="Email –∞–¥—Ä–µ—Å")
    phone: Optional[str] = Field(None, description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    website: Optional[str] = Field(None, description="–í–µ–±-—Å–∞–π—Ç")


class Person(BaseModel):
    """–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ."""
    name: str = Field(..., description="–ü–æ–ª–Ω–æ–µ –∏–º—è")
    age: int = Field(..., ge=0, le=150, description="–í–æ–∑—Ä–∞—Å—Ç")
    address: Address = Field(..., description="–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")
    contact: Contact = Field(..., description="–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    skills: List[str] = Field(default_factory=list, description="–ù–∞–≤—ã–∫–∏")
    is_active: bool = Field(True, description="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏")


class Company(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏."""
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    industry: str = Field(..., description="–û—Ç—Ä–∞—Å–ª—å")
    employees: List[Person] = Field(..., description="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    headquarters: Address = Field(..., description="–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å")
    revenue: Optional[float] = Field(None, ge=0, description="–í—ã—Ä—É—á–∫–∞")


class AnalysisResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö."""
    summary: str = Field(..., description="–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ")
    score: float = Field(..., ge=0.0, le=10.0, description="–û—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 10")
    categories: List[str] = Field(..., description="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    recommendations: List[str] = Field(..., description="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    metadata: dict = Field(default_factory=dict,
                           description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


async def test_comprehensive_structured_output():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç structured output —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏."""
    print("üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç structured output...")

    config = LLMConfig(
        endpoint=os.getenv("LLM_ENDPOINT"),
        api_key=os.getenv("LLM_TOKEN"),
        model=os.getenv("LLM_MODEL"),
        temperature=0.2,
        max_tokens=2000,
    )

    async with StructuredLLMClient(config) as client:

        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å Address...")
        try:
            schema = Address.model_json_schema()
            compatible = client.validator.validate_schema_compatibility(
                Address)

            print(f"   ‚úÖ –°—Ö–µ–º–∞: {len(schema.get('properties', {}))} –ø–æ–ª–µ–π")
            print(f"   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatible['is_compatible']}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 2: –í–ª–æ–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å Person...")
        try:
            schema = Person.model_json_schema()
            compatible = client.validator.validate_schema_compatibility(Person)

            print(f"   ‚úÖ –°—Ö–µ–º–∞: {len(schema.get('properties', {}))} –ø–æ–ª–µ–π")
            print(f"   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatible['is_compatible']}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            properties = schema.get('properties', {})
            if 'address' in properties:
                print(f"   ‚úÖ –í–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Address –Ω–∞–π–¥–µ–Ω")
            if 'contact' in properties:
                print(f"   ‚úÖ –í–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Contact –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 3: –°–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å —Å –º–∞—Å—Å–∏–≤–∞–º–∏
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—É—é –º–æ–¥–µ–ª—å Company...")
        try:
            schema = Company.model_json_schema()
            compatible = client.validator.validate_schema_compatibility(
                Company)

            print(f"   ‚úÖ –°—Ö–µ–º–∞: {len(schema.get('properties', {}))} –ø–æ–ª–µ–π")
            print(f"   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatible['is_compatible']}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤—ã
            properties = schema.get('properties', {})
            if 'employees' in properties:
                employees_schema = properties['employees']
                if employees_schema.get('type') == 'array':
                    print(f"   ‚úÖ –ú–∞—Å—Å–∏–≤ employees –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 4: –ú–æ–¥–µ–ª—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å AnalysisResult...")
        try:
            schema = AnalysisResult.model_json_schema()
            compatible = client.validator.validate_schema_compatibility(
                AnalysisResult)

            print(f"   ‚úÖ –°—Ö–µ–º–∞: {len(schema.get('properties', {}))} –ø–æ–ª–µ–π")
            print(f"   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatible['is_compatible']}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            properties = schema.get('properties', {})
            if 'score' in properties:
                score_schema = properties['score']
                if 'minimum' in score_schema and 'maximum' in score_schema:
                    print(
                        f"   ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è score: {score_schema['minimum']}-{score_schema['maximum']}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_validator_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º...")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        # –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        {
            "data": {
                "street": "–¢–≤–µ—Ä—Å–∫–∞—è 1",
                "city": "–ú–æ—Å–∫–≤–∞",
                "postal_code": "101000",
                "country": "–†–æ—Å—Å–∏—è"
            },
            "model": Address,
            "should_pass": True
        },

        # –î–∞–Ω–Ω—ã–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        {
            "data": {
                "street": "–ù–µ–≤—Å–∫–∏–π 1",
                "city": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                "postal_code": "190000"
                # country –±—É–¥–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
            },
            "model": Address,
            "should_pass": True
        },

        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        {
            "data": {
                "city": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
                "postal_code": "620000"
                # –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç street
            },
            "model": Address,
            "should_pass": False
        }
    ]

    for i, test_case in enumerate(test_cases, 1):
        try:
            result = await validate_structured_response(
                test_case["data"],
                test_case["model"]
            )

            if test_case["should_pass"]:
                print(f"   ‚úÖ –¢–µ—Å—Ç {i}: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            else:
                print(
                    f"   ‚ö†Ô∏è  –¢–µ—Å—Ç {i}: –æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞")

        except Exception as e:
            if not test_case["should_pass"]:
                print(
                    f"   ‚úÖ –¢–µ—Å—Ç {i}: –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - {type(e).__name__}")
            else:
                print(f"   ‚ùå –¢–µ—Å—Ç {i}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")


async def test_outlines_chat_formats():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Outlines Chat."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã Outlines Chat...")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º outlines –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Chat –æ–±—ä–µ–∫—Ç–æ–≤
    try:
        from outlines.inputs import Chat

        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        test_formats = [
            # –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥
            {
                "name": "–ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥",
                "messages": [
                    {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}
                ]
            },

            # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –¥–∏–∞–ª–æ–≥
            {
                "name": "–° —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                "messages": [
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"},
                    {"role": "user", "content": "–°–æ–∑–¥–∞–π –∞–¥—Ä–µ—Å"}
                ]
            },

            # –ú–Ω–æ–≥–æ—Ö–æ–¥–æ–≤–æ–π –¥–∏–∞–ª–æ–≥
            {
                "name": "–ú–Ω–æ–≥–æ—Ö–æ–¥–æ–≤–æ–π –¥–∏–∞–ª–æ–≥",
                "messages": [
                    {"role": "system", "content": "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"},
                    {"role": "user", "content": "–ú–Ω–µ –Ω—É–∂–µ–Ω –∞–¥—Ä–µ—Å –≤ –ú–æ—Å–∫–≤–µ"},
                    {"role": "assistant", "content": "–•–æ—Ä–æ—à–æ, —Å–æ–∑–¥–∞–º –∞–¥—Ä–µ—Å –≤ –ú–æ—Å–∫–≤–µ"},
                    {"role": "user", "content": "–°–¥–µ–ª–∞–π –µ–≥–æ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏"}
                ]
            }
        ]

        for test_format in test_formats:
            try:
                # –°–æ–∑–¥–∞–µ–º Chat –æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é
                chat = Chat(test_format["messages"])
                print(
                    f"   ‚úÖ {test_format['name']}: Chat —Å–æ–∑–¥–∞–Ω —Å {len(test_format['messages'])} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
                print(f"      –¢–∏–ø: {type(chat)}")

            except Exception as e:
                print(f"   ‚ùå {test_format['name']}: –æ—à–∏–±–∫–∞ - {e}")

    except ImportError:
        print("   ‚ö†Ô∏è  Outlines –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ Chat")


async def test_schema_complexity():
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º –¥–ª—è Outlines."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å—Ö–µ–º...")

    from kraken_llm.structured.validator import StructuredOutputValidator
    validator = StructuredOutputValidator()

    models_to_test = [
        ("Address (–ø—Ä–æ—Å—Ç–∞—è)", Address),
        ("Contact (—Å Optional)", Contact),
        ("Person (–≤–ª–æ–∂–µ–Ω–Ω–∞—è)", Person),
        ("Company (–º–∞—Å—Å–∏–≤—ã + –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å)", Company),
        ("AnalysisResult (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)", AnalysisResult),
    ]

    for model_name, model_class in models_to_test:
        try:
            compatibility = validator.validate_schema_compatibility(
                model_class)

            print(f"   üìä {model_name}:")
            print(
                f"      –°–æ–≤–º–µ—Å—Ç–∏–º–∞: {'‚úÖ' if compatibility['is_compatible'] else '‚ùå'}")

            if compatibility['issues']:
                print(f"      –ü—Ä–æ–±–ª–µ–º—ã: {len(compatibility['issues'])}")
                for issue in compatibility['issues'][:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    print(f"        ‚Ä¢ {issue}")

            if compatibility['warnings']:
                print(
                    f"      –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(compatibility['warnings'])}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                for warning in compatibility['warnings'][:2]:
                    print(f"        ‚ö†Ô∏è  {warning}")

            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä
            try:
                example = validator.create_example_instance(model_class)
                print(f"      –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω: ‚úÖ")
            except Exception as e:
                print(f"      –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω: ‚ùå ({type(e).__name__})")

        except Exception as e:
            print(f"   ‚ùå {model_name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")


async def test_performance_metrics():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")

    import time

    config = LLMConfig(
        endpoint=os.getenv("LLM_ENDPOINT"),
        api_key=os.getenv("LLM_TOKEN"),
        model=os.getenv("LLM_MODEL"),
    )

    async with StructuredLLMClient(config) as client:

        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º
        start_time = time.time()
        schemas = []
        for model in [Address, Contact, Person, Company, AnalysisResult]:
            schema = model.model_json_schema()
            schemas.append(schema)
        schema_time = time.time() - start_time

        print(f"   üìà –°–æ–∑–¥–∞–Ω–∏–µ {len(schemas)} —Å—Ö–µ–º: {schema_time:.3f}s")

        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        start_time = time.time()
        compatibility_results = []
        for model in [Address, Contact, Person, Company, AnalysisResult]:
            compatible = client.validator.validate_schema_compatibility(model)
            compatibility_results.append(compatible)
        compatibility_time = time.time() - start_time

        print(
            f"   üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(compatibility_results)} —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–µ–π: {compatibility_time:.3f}s")

        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π
        start_time = time.time()
        examples = []
        for model in [Address, Contact, Person, Company, AnalysisResult]:
            try:
                example = client.validator.create_example_instance(model)
                examples.append(example)
            except Exception as e:
                print(
                    f"      ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–ª—è {model.__name__}: {e}")
        examples_time = time.time() - start_time

        print(f"   üìà –°–æ–∑–¥–∞–Ω–∏–µ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤: {examples_time:.3f}s")

        # –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        total_time = schema_time + compatibility_time + examples_time
        print(f"   üéØ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}s")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Outlines")
    print("=" * 80)

    try:
        await test_comprehensive_structured_output()
        await test_validator_integration()
        await test_outlines_chat_formats()
        await test_schema_complexity()
        await test_performance_metrics()

        print("\n" + "=" * 80)
        print("üéâ –í–°–ï –§–ò–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")

        print("\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Outlines –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
        print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ Pydantic –º–æ–¥–µ–ª–µ–π")
        print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        print("   ‚úÖ Streaming –∏ non-streaming —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
        print("   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ö–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–ª–æ–∂–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ streaming –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        print("   ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ ValidationError –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())

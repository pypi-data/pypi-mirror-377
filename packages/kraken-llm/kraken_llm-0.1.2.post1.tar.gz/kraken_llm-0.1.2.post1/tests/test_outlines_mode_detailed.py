#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è outlines_so_mode –≤ StructuredLLMClient.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã.
"""

import asyncio
import os
import time
from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field

from kraken_llm.config.settings import LLMConfig
from kraken_llm.client.structured import StructuredLLMClient

from dotenv import load_dotenv

load_dotenv()

# –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
class SimpleModel(BaseModel):
    """–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å"""
    name: str = Field(..., description="–ò–º—è")
    value: int = Field(..., description="–ó–Ω–∞—á–µ–Ω–∏–µ")


class ComplexModel(BaseModel):
    """–°–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    id: int = Field(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    tags: List[str] = Field(..., description="–¢–µ–≥–∏")
    metadata: Dict[str, Any] = Field(..., description="–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    is_active: bool = Field(..., description="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")


class NestedModel(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    user: SimpleModel = Field(..., description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    settings: Dict[str, str] = Field(..., description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    scores: List[float] = Field(..., description="–û—Ü–µ–Ω–∫–∏")


async def test_outlines_mode_configuration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ Outlines"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ outlines_so_mode...")
    
    results = []
    
    # –¢–µ—Å—Ç 1: –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        config_default = LLMConfig(
            endpoint=os.getenv("LLM_ENDPOINT"),
            api_key=os.getenv("LLM_TOKEN"),
            model=os.getenv("LLM_MODEL")
        )
        client_default = StructuredLLMClient(config_default)
        
        print(f"   üìù –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config_default.outlines_so_mode}")
        results.append(("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", True, f"outlines_so_mode = {config_default.outlines_so_mode}"))
        
    except Exception as e:
        results.append(("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", False, str(e)))
    
    # –¢–µ—Å—Ç 2: –Ø–≤–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ Outlines
    try:
        config_disabled = LLMConfig(
            endpoint=os.getenv("LLM_ENDPOINT"),
            api_key=os.getenv("LLM_TOKEN"),
            model=os.getenv("LLM_MODEL")            
        )
        config_disabled.outlines_so_mode = False
        client_disabled = StructuredLLMClient(config_disabled)
        
        print(f"   üìù –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {config_disabled.outlines_so_mode}")
        results.append(("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Outlines", True, f"outlines_so_mode = {config_disabled.outlines_so_mode}"))
        
    except Exception as e:
        results.append(("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Outlines", False, str(e)))
    
    # –¢–µ—Å—Ç 3: –Ø–≤–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ Outlines
    try:
        config_enabled = LLMConfig(
            endpoint=os.getenv("LLM_ENDPOINT"),
            api_key=os.getenv("LLM_TOKEN"),
            model=os.getenv("LLM_MODEL")
        )
        config_enabled.outlines_so_mode = True
        client_enabled = StructuredLLMClient(config_enabled)
        
        print(f"   üìù –í–∫–ª—é—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {config_enabled.outlines_so_mode}")
        results.append(("–í–∫–ª—é—á–µ–Ω–∏–µ Outlines", True, f"outlines_so_mode = {config_enabled.outlines_so_mode}"))
        
    except Exception as e:
        results.append(("–í–∫–ª—é—á–µ–Ω–∏–µ Outlines", False, str(e)))
    
    return results


async def test_simple_model_both_modes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö...")
    
    results = []
    
    messages = [{
        "role": "user",
        "content": """
–°–æ–∑–¥–∞–π JSON –æ–±—ä–µ–∫—Ç:
{"name": "–¢–µ—Å—Ç", "value": 42}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""
    }]
    
    # –¢–µ—Å—Ç –±–µ–∑ Outlines
    try:
        config_no_outlines = LLMConfig(
            endpoint=os.getenv("LLM_ENDPOINT"),
            api_key=os.getenv("LLM_TOKEN"),
            model=os.getenv("LLM_MODEL")
        )
        config_no_outlines.outlines_so_mode = False
        client_no_outlines = StructuredLLMClient(config_no_outlines)
        
        start_time = time.time()
        result_no_outlines = await client_no_outlines.chat_completion_structured(
            messages=messages,
            response_model=SimpleModel,
            max_tokens=100,
            temperature=0.1
        )
        no_outlines_time = time.time() - start_time
        
        if isinstance(result_no_outlines, SimpleModel):
            results.append((
                "–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ Outlines",
                True,
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_no_outlines.name}={result_no_outlines.value}, –≤—Ä–µ–º—è: {no_outlines_time:.2f}—Å"
            ))
        else:
            results.append((
                "–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ Outlines",
                False,
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(result_no_outlines)}"
            ))
            
    except Exception as e:
        results.append(("–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ Outlines", False, str(e)))
    
    # –¢–µ—Å—Ç —Å Outlines
    try:
        config_with_outlines = LLMConfig(
            endpoint=os.getenv("LLM_ENDPOINT"),
            api_key=os.getenv("LLM_TOKEN"),
            model=os.getenv("LLM_MODEL")
        )
        config_with_outlines.outlines_so_mode = True
        client_with_outlines = StructuredLLMClient(config_with_outlines)
        
        start_time = time.time()
        result_with_outlines = await client_with_outlines.chat_completion_structured(
            messages=messages,
            response_model=SimpleModel,
            max_tokens=100,
            temperature=0.1
        )
        with_outlines_time = time.time() - start_time
        
        if isinstance(result_with_outlines, SimpleModel):
            results.append((
                "–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å —Å Outlines",
                True,
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_with_outlines.name}={result_with_outlines.value}, –≤—Ä–µ–º—è: {with_outlines_time:.2f}—Å"
            ))
        else:
            results.append((
                "–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å —Å Outlines",
                False,
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(result_with_outlines)}"
            ))
            
    except Exception as e:
        results.append(("–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å —Å Outlines", False, str(e)))
    
    return results


async def test_complex_model_both_modes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö"""
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö...")
    
    results = []
    
    messages = [{
        "role": "user",
        "content": """
–°–æ–∑–¥–∞–π JSON –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ç–∞—Ç—å–∏:
{
  "id": 123,
  "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è",
  "tags": ["—Ç–µ—Å—Ç", "–ø—Ä–∏–º–µ—Ä"],
  "metadata": {"author": "–ê–≤—Ç–æ—Ä", "category": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"},
  "is_active": true
}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON.
"""
    }]
    
    # –¢–µ—Å—Ç –±–µ–∑ Outlines
    try:
        config_no_outlines = LLMConfig(
            endpoint=os.getenv("LLM_ENDPOINT"),
            api_key=os.getenv("LLM_TOKEN"),
            model=os.getenv("LLM_MODEL")
        )
        config_no_outlines.outlines_so_mode = False
        client_no_outlines = StructuredLLMClient(config_no_outlines)
        
        start_time = time.time()
        result_no_outlines = await client_no_outlines.chat_completion_structured(
            messages=messages,
            response_model=ComplexModel,
            max_tokens=200,
            temperature=0.1
        )
        no_outlines_time = time.time() - start_time
        
        if isinstance(result_no_outlines, ComplexModel):
            results.append((
                "–°–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ Outlines",
                True,
                f"ID: {result_no_outlines.id}, —Ç–µ–≥–∏: {len(result_no_outlines.tags)}, –≤—Ä–µ–º—è: {no_outlines_time:.2f}—Å"
            ))
        else:
            results.append((
                "–°–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ Outlines",
                False,
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(result_no_outlines)}"
            ))
            
    except Exception as e:
        results.append(("–°–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ Outlines", False, str(e)))
    
    # –¢–µ—Å—Ç —Å Outlines
    try:
        config_with_outlines = LLMConfig(
            endpoint=os.getenv("LLM_ENDPOINT"),
            api_key=os.getenv("LLM_TOKEN"),
            model=os.getenv("LLM_MODEL")
        )
        config_with_outlines.outlines_so_mode = True
        client_with_outlines = StructuredLLMClient(config_with_outlines)
        
        start_time = time.time()
        result_with_outlines = await client_with_outlines.chat_completion_structured(
            messages=messages,
            response_model=ComplexModel,
            max_tokens=200,
            temperature=0.1
        )
        with_outlines_time = time.time() - start_time
        
        if isinstance(result_with_outlines, ComplexModel):
            results.append((
                "–°–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å —Å Outlines",
                True,
                f"ID: {result_with_outlines.id}, —Ç–µ–≥–∏: {len(result_with_outlines.tags)}, –≤—Ä–µ–º—è: {with_outlines_time:.2f}—Å"
            ))
        else:
            results.append((
                "–°–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å —Å Outlines",
                False,
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(result_with_outlines)}"
            ))
            
    except Exception as e:
        results.append(("–°–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å —Å Outlines", False, str(e)))
    
    return results


async def test_error_handling_both_modes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö"""
    print("\nüö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö...")
    
    results = []
    
    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    messages = [{
        "role": "user",
        "content": "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ –∫–æ—Ç–æ–≤"
    }]
    
    # –¢–µ—Å—Ç –±–µ–∑ Outlines
    try:
        config_no_outlines = LLMConfig(
            endpoint=os.getenv("LLM_ENDPOINT"),
            api_key=os.getenv("LLM_TOKEN"),
            model=os.getenv("LLM_MODEL")
        )
        config_no_outlines.outlines_so_mode = False
        client_no_outlines = StructuredLLMClient(config_no_outlines)
        
        result = await client_no_outlines.chat_completion_structured(
            messages=messages,
            response_model=SimpleModel,
            max_tokens=100,
            temperature=0.1
        )
        
        results.append((
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ Outlines",
            False,
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}"
        ))
        
    except Exception as e:
        error_type = type(e).__name__
        if "ValidationError" in error_type or "JSON" in str(e):
            results.append((
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ Outlines",
                True,
                f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {error_type}"
            ))
        else:
            results.append((
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ Outlines",
                False,
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_type}: {str(e)[:100]}"
            ))
    
    # –¢–µ—Å—Ç —Å Outlines
    try:
        config_with_outlines = LLMConfig(
            endpoint=os.getenv("LLM_ENDPOINT"),
            api_key=os.getenv("LLM_TOKEN"),
            model=os.getenv("LLM_MODEL")
        )
        config_with_outlines.outlines_so_mode = True
        client_with_outlines = StructuredLLMClient(config_with_outlines)
        
        result = await client_with_outlines.chat_completion_structured(
            messages=messages,
            response_model=SimpleModel,
            max_tokens=100,
            temperature=0.1
        )
        
        results.append((
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å Outlines",
            False,
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}"
        ))
        
    except Exception as e:
        error_type = type(e).__name__
        if "ValidationError" in error_type or "JSON" in str(e):
            results.append((
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å Outlines",
                True,
                f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {error_type}"
            ))
        else:
            results.append((
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å Outlines",
                False,
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_type}: {str(e)[:100]}"
            ))
    
    return results


async def test_performance_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–æ–≤"""
    print("\n‚ö° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–æ–≤...")
    
    results = []
    
    messages = [{
        "role": "user",
        "content": """
–°–æ–∑–¥–∞–π JSON: {"name": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "value": 100}
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON.
"""
    }]
    
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    no_outlines_times = []
    with_outlines_times = []
    
    for i in range(3):  # 3 —Ç–µ—Å—Ç–∞ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        # –ë–µ–∑ Outlines
        try:
            config_no_outlines = LLMConfig(
                endpoint=os.getenv("LLM_ENDPOINT"),
                api_key=os.getenv("LLM_TOKEN"),
                model=os.getenv("LLM_MODEL")
            )
            config_no_outlines.outlines_so_mode = False
            client_no_outlines = StructuredLLMClient(config_no_outlines)
            
            start_time = time.time()
            await client_no_outlines.chat_completion_structured(
                messages=messages,
                response_model=SimpleModel,
                max_tokens=100,
                temperature=0.1
            )
            no_outlines_times.append(time.time() - start_time)
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±–µ–∑ Outlines #{i+1}: {e}")
        
        # –° Outlines
        try:
            config_with_outlines = LLMConfig(
                endpoint=os.getenv("LLM_ENDPOINT"),
                api_key=os.getenv("LLM_TOKEN"),
                model=os.getenv("LLM_MODEL")
            )
            config_with_outlines.outlines_so_mode = True
            client_with_outlines = StructuredLLMClient(config_with_outlines)
            
            start_time = time.time()
            await client_with_outlines.chat_completion_structured(
                messages=messages,
                response_model=SimpleModel,
                max_tokens=100,
                temperature=0.1
            )
            with_outlines_times.append(time.time() - start_time)
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å Outlines #{i+1}: {e}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if no_outlines_times and with_outlines_times:
        avg_no_outlines = sum(no_outlines_times) / len(no_outlines_times)
        avg_with_outlines = sum(with_outlines_times) / len(with_outlines_times)
        
        difference = abs(avg_with_outlines - avg_no_outlines)
        faster_mode = "–±–µ–∑ Outlines" if avg_no_outlines < avg_with_outlines else "—Å Outlines"
        
        results.append((
            "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            True,
            f"–ë–µ–∑ Outlines: {avg_no_outlines:.2f}—Å, —Å Outlines: {avg_with_outlines:.2f}—Å, –±—ã—Å—Ç—Ä–µ–µ: {faster_mode} –Ω–∞ {difference:.2f}—Å"
        ))
    else:
        results.append((
            "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            False,
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
        ))
    
    return results


def print_results(test_name: str, results: List[tuple]):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {test_name}")
    print("-" * 60)
    
    success_count = 0
    total_count = len(results)
    
    for name, success, details in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {name}")
        if details:
            print(f"   üìù {details}")
        if success:
            success_count += 1
    
    success_rate = (success_count / total_count * 100) if total_count > 0 else 0
    print(f"\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_count}/{total_count} ({success_rate:.1f}%)")
    
    return success_count, total_count


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–Ø OUTLINES_SO_MODE")
    print("=" * 80)
    print("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è outlines_so_mode")
    print("üîß –í–∫–ª—é—á–∞–µ—Ç: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç—ã–µ/—Å–ª–æ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏, –æ—à–∏–±–∫–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    print("=" * 80)
    
    total_success = 0
    total_tests = 0
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_results = await test_outlines_mode_configuration()
    success, tests = print_results("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è outlines_so_mode", config_results)
    total_success += success
    total_tests += tests
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –º–æ–¥–µ–ª–µ–π
    simple_results = await test_simple_model_both_modes()
    success, tests = print_results("–ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö", simple_results)
    total_success += success
    total_tests += tests
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    complex_results = await test_complex_model_both_modes()
    success, tests = print_results("–°–ª–æ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö", complex_results)
    total_success += success
    total_tests += tests
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    error_results = await test_error_handling_both_modes()
    success, tests = print_results("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö", error_results)
    total_success += success
    total_tests += tests
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    perf_results = await test_performance_comparison()
    success, tests = print_results("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", perf_results)
    total_success += success
    total_tests += tests
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –î–ï–¢–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*80}")
    print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {total_success}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {total_tests - total_success}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(total_success/total_tests*100):.1f}%")
    
    if total_success == total_tests:
        print(f"\nüéâ –ü–†–ï–í–û–°–•–û–î–ù–û! –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å outlines_so_mode —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
        print(f"‚úÖ –í—Å–µ —Ä–µ–∂–∏–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö")
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
    elif total_success >= total_tests * 0.8:
        print(f"\nüëç –•–û–†–û–®–û! –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å outlines_so_mode —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        print(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
    else:
        print(f"\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê! –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å outlines_so_mode –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")
        print(f"üõ†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
    
    print(f"\nüéØ –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ê–°–ü–ï–ö–¢–´:")
    print(f"- ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    print(f"- ‚úÖ –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏")
    print(f"- ‚úÖ –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏")
    print(f"- ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
    print(f"- ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print(f"- ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏")
    
    print(f"\nüèÅ –î–ï–¢–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")


if __name__ == "__main__":
    asyncio.run(main())
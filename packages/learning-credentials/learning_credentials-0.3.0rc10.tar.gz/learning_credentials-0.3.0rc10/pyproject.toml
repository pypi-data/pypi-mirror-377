[project]
name = "learning-credentials"
version = "0.3.0-rc10"
description = "A pluggable service for preparing Open edX credentials."
dynamic = ["readme"]
requires-python = ">=3.11"
license = "AGPL-3.0-or-later"
license-files = ["LICENSE.txt"]
authors = [{ name = "OpenCraft", email = "help@opencraft.com" }]
keywords = ["Python", "edx", "credentials", "django"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "django",  # Web application framework
    "django-model-utils",  # Provides TimeStampedModel abstract base class
    "edx-api-doc-tools",  # A toolkit for documenting REST APIs that are created with DRF
    "edx-django-utils",  # Open edX Django utilities (e.g., plugin infrastructure)
    "edx-opaque-keys",  # Create and introspect Course and XBlock identities
    "celery",  # Distributed task queue
    "django-celery-beat",  # Periodic task scheduler
    "django_reverse_admin",  # Provides reverse inlines in the admin interface
    "djangorestframework",  # RESTful API framework
    "django-object-actions",  # Provides actions on objects in the admin interface
    # TODO: Extract these to a plugin.
    "pypdf",  # PDF manipulation library
    "reportlab",  # PDF generation library
    "openedx-completion-aggregator",  # Completion aggregation service
    "edx_ace",  # Messaging library
    "learning-paths-plugin>=0.3.4",  # Learning Paths support
]

[project.urls]
Homepage = "https://github.com/open-craft/learning-credentials"
Repository = "https://github.com/open-craft/learning-credentials"
Documentation = "https://learning-credentials.readthedocs.io/"

[project.entry-points."lms.djangoapp"]
learning_credentials = "learning_credentials.apps:LearningCredentialsConfig"

[tool.setuptools.packages.find]
include = ["learning_credentials", "learning_credentials.*"]
exclude = ["*tests"]

[tool.setuptools.package-data]
learning_credentials = ["templates/**/*", "conf/locale/**/*"]

[tool.setuptools.dynamic]
readme = { file = ["README.rst", "CHANGELOG.rst"], content-type = "text/x-rst" }

[dependency-groups]
test = [
    "pytest-cov",
    "django-coverage-plugin",
    "pytest-django",
    "code-annotations",
    "dj-inmemorystorage",
    "factory-boy",
]
django42 = ["django>=4.2,<5.0"]
django52 = ["django>=5.2,<5.3"]
ci = ["tox", "tox-uv"]
quality = ["ruff", "yamllint"]
doc = ["Sphinx", "doc8", "sphinx-book-theme", "twine"]
dev = [
    { include-group = "test" },
    { include-group = "ci" },
    { include-group = "quality" },
    { include-group = "doc" },
    "diff-cover",
    "edx-i18n-tools",
    "ty",  # Type checker.
    "django-types",  # Type stubs for Django.
    # External dev constraints (DO NOT REMOVE THIS LINE)
    "Django<5.0",
]

[tool.uv]
constraint-dependencies = [
    # External constraints (DO NOT REMOVE THIS LINE)
    "elasticsearch<7.14.0",
    "pip<24.3",
]
conflicts = [
    [
      { group = "django42" },
      { group = "django52" },
      { group = "dev" },
    ],
]

[tool.coverage.run]
include = ['learning_credentials/**']
omit = ['*/migrations/*', 'tests/*']
plugins = ['django_coverage_plugin']

[tool.ruff]
line-length = 120
exclude = ['migrations', 'docs', 'manage.py']
target-version = 'py311'

[tool.ruff.lint]
select = [
    'F',    # Pyflakes
    'E',    # Pycodestyle (errors)
    'W',    # Pycodestyle (warnings)
    'C90',  # mccabe
    'I',    # isort
    'N',    # pep8-naming
    'D',    # pydocstyle
    'UP',   # pyupgrade
    'YTT',  # flake8-2020
    'ANN',  # flake8-annotations
    'ASYNC',# flake8-async
    'S',    # flake8-bandit
    'BLE',  # flake8-blind-except
    'FBT',  # flake8-boolean-trap
    'B',    # flake8-bugbear
    'A',    # flake8-builtins
    'COM',  # flake8-commas
    'C4',   # flake8-comprehensions
    'DTZ',  # flake8-datetimez
    'T10',  # flake8-debugger
    'DJ',   # flake8-django
    'EM',   # flake8-errmsg
    'EXE',  # flake8-executable
    'FA',   # flake8-future-annotations
    'ISC',  # flake8-implicit-str-concat
    'ICN',  # flake8-import-conventions
    'LOG',  # flake8-logging
    'G',    # flake8-logging-format
    'INP',  # flake8-no-pep420
    'PIE',  # flake8-pie
    'T20',  # flake8-print
    'PYI',  # flake8-pyi
    'PT',   # flake8-pytest-style
    'Q',    # flake8-quotes
    'RSE',  # flake8-raise
    'RET',  # flake8-return
    'SLF',  # flake8-self
    'SLOT', # flake8-slots
    'SIM',  # flake8-simplify
    'TID',  # flake8-tidy-imports
    'TC',   # flake8-type-checking
    'INT',  # flake8-gettext
    'ARG',  # flake8-unused-arguments
    'PTH',  # flake8-use-pathlib
    'TD',   # flake8-todos
    'ERA',  # eradicate
    'PD',   # pandas-vet
    'PGH',  # pygrep-hooks
    'PL',   # Pylint
    'TRY',  # tryceratops
    'FLY',  # flynt
    'NPY',  # NumPy-specific rules
    'AIR',  # Airflow
    'PERF', # Perflint
    'FURB', # refurb
    # TODO: Enable preview.
    # 'DOC',  # pydoclint
    'RUF',  # Ruff-specific rules
]
ignore = [
    'ANN002', # missing-type-args
    'ANN003', # missing-type-kwargs
    'ANN204', # missing-return-type-special-method
    'D203',   # one-blank-line-before-class
    'D212',   # multi-line-summary-first-line (incompatible with D213)
    'Q000',   # bad-quotes-inline-string
    'TD002',  # missing-t\odo-author
    'TD003',  # missing-t\odo-link
    'TRY003', # raise-vanilla-args
    'COM812'  # missing-trailing-comma (incompatible with ruff formatter)
]

[tool.ruff.lint.per-file-ignores]
'tests/*' = [
    'S101',    # assert
    'INP001',  # implicit-namespace-package
    'SLF001',  # private-member-access
    'RUF018',  # assignment-in-assert
    'ARG002',  # unused-method-argument
    'PLR0913', # too-many-arguments
]

[tool.ruff.lint.flake8-annotations]
suppress-none-returning = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
allow-magic-value-types = ['int', 'str']

[tool.ruff.lint.flake8-type-checking]
# Add quotes around type annotations, if doing so would allow
# an import to be moved into a type-checking block.
quote-annotations = true

[tool.ruff.format]
quote-style = "preserve"

[tool.pytest.ini_options]
filterwarnings = [
    # https://github.com/openedx/completion/pull/259
    "ignore:'index_together' is deprecated:django.utils.deprecation.RemovedInDjango51Warning",
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    "ignore:Deprecated call to `pkg_resources.declare_namespace.*sphinxcontrib:DeprecationWarning",
    "ignore:'cgi' is deprecated:DeprecationWarning",
]
DJANGO_SETTINGS_MODULE = "test_settings"
addopts = "--cov learning_credentials --cov tests --cov-report term-missing --cov-report xml"
norecursedirs = ".* docs requirements site-packages"

[tool.ty.rules]
unresolved-attribute = "warn"

[[tool.ty.overrides]]
include = ["learning_credentials/settings/*.py"]

[tool.ty.overrides.rules]
unresolved-attribute = "ignore"

[[tool.ty.overrides]]
include = ["learning_credentials/compat.py"]

[tool.ty.overrides.rules]
unresolved-import = "ignore"

[[tool.ty.overrides]]
include = ["tests/**", "test_utils/**"]

[tool.ty.overrides.rules]
possibly-unbound-attribute = "ignore"
unresolved-attribute = "ignore"

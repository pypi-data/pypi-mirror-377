# coding: utf-8

"""
    Inventory

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from legit_api_client.models.customer_facing_dependency_dto import CustomerFacingDependencyDto
from legit_api_client.models.dependency_category import DependencyCategory
from legit_api_client.models.package_source import PackageSource
from legit_api_client.models.package_type import PackageType
from legit_api_client.models.programming_language import ProgrammingLanguage

from legit_api_client.api_client import ApiClient, RequestSerialized
from legit_api_client.api_response import ApiResponse
from legit_api_client.rest import RESTResponseType


class DependenciesV2Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_dependencies_v2(
        self,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified ids")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Filter dependencies that their name contains the given string")] = None,
        package_types: Annotated[Optional[List[PackageType]], Field(description="Filter dependencies by the specified package types")] = None,
        license_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified license ids")] = None,
        package_categories: Annotated[Optional[List[DependencyCategory]], Field(description="Filter dependencies by the specified categories")] = None,
        programming_languages: Annotated[Optional[List[ProgrammingLanguage]], Field(description="Filter dependencies by the specified programming languages")] = None,
        source_scanners: Annotated[Optional[List[PackageSource]], Field(description="Filter dependencies by the specified source scanners")] = None,
        repository_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified repository ids")] = None,
        product_unit_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified product unit ids")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Token from previous request (leave empty for first request)")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Number of items to return (1-100)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[CustomerFacingDependencyDto]:
        """Get dependencies

        Get dependencies matching the query params filters. 

        :param ids: Filter dependencies by the specified ids
        :type ids: List[str]
        :param name: Filter dependencies that their name contains the given string
        :type name: str
        :param package_types: Filter dependencies by the specified package types
        :type package_types: List[PackageType]
        :param license_ids: Filter dependencies by the specified license ids
        :type license_ids: List[str]
        :param package_categories: Filter dependencies by the specified categories
        :type package_categories: List[DependencyCategory]
        :param programming_languages: Filter dependencies by the specified programming languages
        :type programming_languages: List[ProgrammingLanguage]
        :param source_scanners: Filter dependencies by the specified source scanners
        :type source_scanners: List[PackageSource]
        :param repository_ids: Filter dependencies by the specified repository ids
        :type repository_ids: List[str]
        :param product_unit_ids: Filter dependencies by the specified product unit ids
        :type product_unit_ids: List[str]
        :param token: Token from previous request (leave empty for first request)
        :type token: str
        :param limit: Number of items to return (1-100)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dependencies_v2_serialize(
            ids=ids,
            name=name,
            package_types=package_types,
            license_ids=license_ids,
            package_categories=package_categories,
            programming_languages=programming_languages,
            source_scanners=source_scanners,
            repository_ids=repository_ids,
            product_unit_ids=product_unit_ids,
            token=token,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CustomerFacingDependencyDto]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dependencies_v2_with_http_info(
        self,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified ids")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Filter dependencies that their name contains the given string")] = None,
        package_types: Annotated[Optional[List[PackageType]], Field(description="Filter dependencies by the specified package types")] = None,
        license_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified license ids")] = None,
        package_categories: Annotated[Optional[List[DependencyCategory]], Field(description="Filter dependencies by the specified categories")] = None,
        programming_languages: Annotated[Optional[List[ProgrammingLanguage]], Field(description="Filter dependencies by the specified programming languages")] = None,
        source_scanners: Annotated[Optional[List[PackageSource]], Field(description="Filter dependencies by the specified source scanners")] = None,
        repository_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified repository ids")] = None,
        product_unit_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified product unit ids")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Token from previous request (leave empty for first request)")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Number of items to return (1-100)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[CustomerFacingDependencyDto]]:
        """Get dependencies

        Get dependencies matching the query params filters. 

        :param ids: Filter dependencies by the specified ids
        :type ids: List[str]
        :param name: Filter dependencies that their name contains the given string
        :type name: str
        :param package_types: Filter dependencies by the specified package types
        :type package_types: List[PackageType]
        :param license_ids: Filter dependencies by the specified license ids
        :type license_ids: List[str]
        :param package_categories: Filter dependencies by the specified categories
        :type package_categories: List[DependencyCategory]
        :param programming_languages: Filter dependencies by the specified programming languages
        :type programming_languages: List[ProgrammingLanguage]
        :param source_scanners: Filter dependencies by the specified source scanners
        :type source_scanners: List[PackageSource]
        :param repository_ids: Filter dependencies by the specified repository ids
        :type repository_ids: List[str]
        :param product_unit_ids: Filter dependencies by the specified product unit ids
        :type product_unit_ids: List[str]
        :param token: Token from previous request (leave empty for first request)
        :type token: str
        :param limit: Number of items to return (1-100)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dependencies_v2_serialize(
            ids=ids,
            name=name,
            package_types=package_types,
            license_ids=license_ids,
            package_categories=package_categories,
            programming_languages=programming_languages,
            source_scanners=source_scanners,
            repository_ids=repository_ids,
            product_unit_ids=product_unit_ids,
            token=token,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CustomerFacingDependencyDto]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dependencies_v2_without_preload_content(
        self,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified ids")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Filter dependencies that their name contains the given string")] = None,
        package_types: Annotated[Optional[List[PackageType]], Field(description="Filter dependencies by the specified package types")] = None,
        license_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified license ids")] = None,
        package_categories: Annotated[Optional[List[DependencyCategory]], Field(description="Filter dependencies by the specified categories")] = None,
        programming_languages: Annotated[Optional[List[ProgrammingLanguage]], Field(description="Filter dependencies by the specified programming languages")] = None,
        source_scanners: Annotated[Optional[List[PackageSource]], Field(description="Filter dependencies by the specified source scanners")] = None,
        repository_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified repository ids")] = None,
        product_unit_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter dependencies by the specified product unit ids")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Token from previous request (leave empty for first request)")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Number of items to return (1-100)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get dependencies

        Get dependencies matching the query params filters. 

        :param ids: Filter dependencies by the specified ids
        :type ids: List[str]
        :param name: Filter dependencies that their name contains the given string
        :type name: str
        :param package_types: Filter dependencies by the specified package types
        :type package_types: List[PackageType]
        :param license_ids: Filter dependencies by the specified license ids
        :type license_ids: List[str]
        :param package_categories: Filter dependencies by the specified categories
        :type package_categories: List[DependencyCategory]
        :param programming_languages: Filter dependencies by the specified programming languages
        :type programming_languages: List[ProgrammingLanguage]
        :param source_scanners: Filter dependencies by the specified source scanners
        :type source_scanners: List[PackageSource]
        :param repository_ids: Filter dependencies by the specified repository ids
        :type repository_ids: List[str]
        :param product_unit_ids: Filter dependencies by the specified product unit ids
        :type product_unit_ids: List[str]
        :param token: Token from previous request (leave empty for first request)
        :type token: str
        :param limit: Number of items to return (1-100)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dependencies_v2_serialize(
            ids=ids,
            name=name,
            package_types=package_types,
            license_ids=license_ids,
            package_categories=package_categories,
            programming_languages=programming_languages,
            source_scanners=source_scanners,
            repository_ids=repository_ids,
            product_unit_ids=product_unit_ids,
            token=token,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CustomerFacingDependencyDto]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dependencies_v2_serialize(
        self,
        ids,
        name,
        package_types,
        license_ids,
        package_categories,
        programming_languages,
        source_scanners,
        repository_ids,
        product_unit_ids,
        token,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'ids': 'multi',
            'packageTypes': 'multi',
            'licenseIds': 'multi',
            'packageCategories': 'multi',
            'programmingLanguages': 'multi',
            'sourceScanners': 'multi',
            'repositoryIds': 'multi',
            'productUnitIds': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if package_types is not None:
            
            _query_params.append(('packageTypes', package_types))
            
        if license_ids is not None:
            
            _query_params.append(('licenseIds', license_ids))
            
        if package_categories is not None:
            
            _query_params.append(('packageCategories', package_categories))
            
        if programming_languages is not None:
            
            _query_params.append(('programmingLanguages', programming_languages))
            
        if source_scanners is not None:
            
            _query_params.append(('sourceScanners', source_scanners))
            
        if repository_ids is not None:
            
            _query_params.append(('repositoryIds', repository_ids))
            
        if product_unit_ids is not None:
            
            _query_params.append(('productUnitIds', product_unit_ids))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2.0/dependencies',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "linearator"
version = "1.4.0"
authors = [
    {name = "Adil Alizada", email = "adilalizade13@gmail.com"},
]
description = "A comprehensive CLI tool for Linear issue management with advanced search, bulk operations, and team collaboration features"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Software Development :: Bug Tracking", 
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Typing :: Typed",
]
keywords = [
    "linear", 
    "cli", 
    "issue-tracker", 
    "project-management", 
    "workflow",
    "automation",
    "graphql",
    "api-client",
    "team-collaboration",
    "bulk-operations"
]

dependencies = [
    "click>=8.1.0",
    "gql[aiohttp]>=3.4.0",
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0",
    "keyring>=24.0.0",
    "cryptography>=41.0.0",
    "rich>=13.0.0",
    "python-dotenv>=1.0.0",
    "pyjwt>=2.8.0",
    "httpx>=0.24.0",
    "tomli>=2.0.1;python_version<'3.11'",
    "tomli-w>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "types-requests>=2.31.0",
    "pre-commit>=3.3.0",
    "responses>=0.23.0",
    "aioresponses>=0.7.4",
    "bandit>=1.7.5",
    "safety>=2.0.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "responses>=0.23.0",
    "aioresponses>=0.7.4",
]

[project.urls]
"Homepage" = "https://github.com/AdiKsOnDev/linearator"
"Repository" = "https://github.com/AdiKsOnDev/linearator.git"
"Bug Reports" = "https://github.com/AdiKsOnDev/linearator/issues"
"Feature Requests" = "https://github.com/AdiKsOnDev/linearator/issues/"
"Discussions" = "https://github.com/AdiKsOnDev/linearator/discussions"
"Changelog" = "https://github.com/AdiKsOnDev/linearator/blob/main/CHANGELOG.md"
"Release Notes" = "https://github.com/AdiKsOnDev/linearator/releases"

[project.scripts]
linear = "linear_cli.cli.app:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]


[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by ruff formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "gql.*",
    "keyring.*",
    "aioresponses.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/linear_cli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "keyring: marks tests that require keyring backend (skip in CI)",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "src/linear_cli/__main__.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

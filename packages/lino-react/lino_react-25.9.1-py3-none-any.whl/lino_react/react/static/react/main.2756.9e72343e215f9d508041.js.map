{"version":3,"file":"main.2756.9e72343e215f9d508041.js","mappings":"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","sources":["webpack://lino_react/./lino_react/react/components/LinoComponentUtils.jsx"],"sourcesContent":["export const name = \"LinoComponentUtils\";\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { RegisterImportPool, getExReady, Component, DataContextType } from \"./Base\";\n\nimport * as constants from \"./constants\";\n\n\nlet ex; const exModulePromises = ex = {\n    classNames: import(/* webpackChunkName: \"classNames_LinoComponentUtils\" */\"classnames\"),\n    prDropdown: import(/* webpackChunkName: \"prDropdown_LinoComponentUtils\" */\"primereact/dropdown\"),\n    prInputText: import(/* webpackChunkName: \"prInputText_LinoComponentUtils\" */\"primereact/inputtext\"),\n    queryString: import(/* webpackChunkName: \"queryString_LinoComponentUtils\" */\"query-string\"),\n    u: import(/* webpackChunkName: \"LinoUtils_LinoComponentUtils\" */\"./LinoUtils\"),\n};RegisterImportPool(ex);\n\n\nexport function maintainTableWidth(elem, count) {\n    let ctx;\n    if (elem !== undefined) ctx = elem\n    else ctx = this;\n    let keys = Object.keys(ctx.flexs),\n        fo_conditional = count !== undefined ? keys.length === count : keys.length > 1;\n    if (fo_conditional) {\n        keys.forEach(key => {\n            var tbl = document.getElementById(key)\n                .getElementsByClassName('p-datatable');\n            if (tbl.length === 1) {\n                tbl = tbl[0]\n                let width = tbl.getBoundingClientRect().width / document\n                    .getElementsByClassName('layout-topbar')[0]\n                    .getBoundingClientRect().width;\n                if (width > ctx.flexs[key]) {\n                    Array.from(tbl.querySelectorAll(\n                        '.p-datatable table')).forEach(el => {\n                            if (Array.from(el.classList).join(' ')\n                                .includes('p-datatable')) el.style\n                                    .setProperty('table-layout', 'auto');\n                        });\n                }\n            }\n        });\n    }\n}\n\n\nexport const Labeled = ({\n    actions = [], label, elem, children,\n    hide_label = false, isFilled = false,\n}) => {\n    const localEx = getExReady(ex, ['classNames']);\n    label = label || elem.label;\n    return !localEx.ready ? null : <React.Fragment>\n        {!hide_label && label && <React.Fragment>\n            <label\n                className={localEx.classNames.default(\n                    \"l-label\", \"l-span-clickable\",\n                    {\"l-label--unfilled\": !isFilled},\n                )}\n                title={Object.assign({}, elem.value || {}).quicktip\n                    || elem.help_text}>\n                    {label}\n                    {actions.map((action, i) => <React.Fragment key={i}>\n                        &nbsp;|&nbsp;\n                        {\n                            // <span\n                            //     className=\"l-span-clickable\"\n                            //     onClick={e => action.run(e)}>\n                            //     {action.label}</span>\n                        }\n                        <span dangerouslySetInnerHTML={{__html: action}} />\n                    </React.Fragment>)}:</label>\n            <br/>\n        </React.Fragment>}\n        {children}\n    </React.Fragment>\n}\n\n\nLabeled.propTypes = {\n    actions: PropTypes.array,\n    label: PropTypes.string,\n    elem: PropTypes.object.isRequired,\n    hide_label: PropTypes.bool,\n    isFilled: PropTypes.bool,\n    children: PropTypes.element.isRequired,\n}\n\n\nexport class ABCComponent {\n    static getValueByName({name, props, context}) {\n        if (props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_PARAMS)\n            return context.param_values[name];\n        return props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? context.rows[props.column.rowIndex][name]\n            : props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_CARDS\n                ? context[name] : context.data[name];\n    }\n}\n\n\nexport class LeafComponentBase extends Component {\n    static requiredModules = [\"classNames\"];\n    static iPool = ex;\n    static contextType = DataContextType;\n    static propTypesFromLinoLayout = {\n        column: PropTypes.object,\n        editing_mode: PropTypes.bool,\n        hide_label: PropTypes.bool,\n        [constants.URL_PARAM_WINDOW_TYPE]: PropTypes.oneOf([\n            constants.WINDOW_TYPE_TABLE,\n            constants.WINDOW_TYPE_DETAIL,\n            constants.WINDOW_TYPE_CARDS,\n            constants.WINDOW_TYPE_GALLERIA,\n            constants.WINDOW_TYPE_INSERT,\n            constants.WINDOW_TYPE_PARAMS,\n            constants.WINDOW_TYPE_UNKNOWN,\n        ]),\n        tabIndex: PropTypes.number.isRequired,\n    }\n\n    static propTypes = {\n        ...LeafComponentBase.propTypesFromLinoLayout,\n        elem: PropTypes.object.isRequired,\n        urlParams: PropTypes.object.isRequired,\n    }\n\n    static defaultProps = {\n        editing_mode: false,\n        hide_label: false,\n        [constants.URL_PARAM_WINDOW_TYPE]: constants.WINDOW_TYPE_UNKNOWN,\n    }\n\n    constructor(props, context) {\n        super(props, context);\n        this.wrapperClasses = []\n        this.dataKey = props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? props.elem.fields_index : props.elem.name;\n        this.upController = props.urlParams.controller;\n        this.c = props.urlParams.controller;\n\n        this.filled = this.filled.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.getValueByName = this.getValueByName.bind(this);\n        this.innerHTML = this.innerHTML.bind(this);\n        this.setLeafRef = this.setLeafRef.bind(this);\n    }\n\n    filled = () => (![\"\", null, undefined].includes(this.getValue()));\n\n    getValueByName(name) {\n        return ABCComponent.getValueByName({\n            name: name, props: this.props, context: this.context});\n    }\n\n    getValue() {\n        return this.getValueByName(this.dataKey);\n    }\n\n    innerHTML(dangerous, style={}) {\n        let v = this.getValue() || \"\\u00a0\";\n        if (v instanceof Object) v = JSON.stringify(v);\n        if (dangerous) {\n            return <div style={style} dangerouslySetInnerHTML={{__html: v}}/>\n        } else {\n            return <div style={style}>{v}</div>\n        }\n    }\n\n    setLeafRef({input=false, type=\"\"} = {}) {\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL ||\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_INSERT\n        ) {\n            this.upController.dataContext.setLeafRef({\n                name: type === 'slave' ? this.actorID\n                    : this.props.elem.name, ref: this, input: input, type: type});\n            const {controller} = this.props.urlParams;\n            controller.onLeafMount();\n        }\n    }\n}\n\n\nexport class LeafComponentDelayedValue extends LeafComponentBase {\n    static requiredModules = [\"queryString\"].concat(LeafComponentBase.requiredModules);\n    static propTypes = {\n        ...LeafComponentBase.propTypes,\n        hasOwnContext: PropTypes.bool.isRequired\n    }\n    static defaultProps = {\n        ...LeafComponentBase.defaultProps,\n        hasOwnContext: false\n    }\n    constructor(props, context) {\n        super(props, context);\n        const masterRelate = {}\n        if (!props.hasOwnContext) Object.assign(masterRelate,\n            this.upController.actionHandler.masterRelateForSlave());\n        this.state = {\n            ...this.state, value: null, data_url: null, ...masterRelate}\n        this.actorID = props.elem.actor_id || (props.elem.name.includes('.')\n            ? props.elem.name : `${props.urlParams.packId}.${props.elem.name}`);\n\n        this.delayed = props.elem.delayed_value;\n\n        this.shouldComponentUpdate = this.shouldComponentUpdate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    onReady() {\n        let val = super.getValue();\n        if (this.delayed) {\n            if (!this.props.hasOwnContext) this.setLeafRef({type: 'slave'});\n            this.upController.globals.panels[this.actorID] = this;\n            if (val !== null) this.getData(val.delayed_value_url)\n            else this.setState({value: \"\\u00a0\", data_url: undefined});\n        } else {\n            this.setState({value: val});\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState, context) {\n        const val = super.getValue();\n        let update;\n        if (!this.delayed) update = this.state.value !== nextState.value\n        // state.value is null when fetch in progress otherwise state.value is \"\\u00a0\"\n        else update = this.state.value !== nextState.value || (this.state.value !== null &&\n            (val || {}).delayed_value_url !== this.state.data_url);\n        return update;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const val = super.getValue();\n        if (this.delayed) {\n            if (this.state.data_url !== (val || {}).delayed_value_url) {\n                this.setState({value: null});\n                if (val !== null) this.update()\n                else this.setState({value: \"\\u00a0\", data_url: undefined});\n            }\n        } else this.setState({value: val});\n    }\n\n    componentWillUnmount() {\n        delete this.upController.globals.panels[this.actorID];\n    }\n\n    getValue() {\n        return this.state.value;\n    }\n\n    getData(data_url) {\n        this.upController.actionHandler.silentFetch({\n            // path: `${data_url}?${this.ex.queryString.default.stringify(this.upController.actionHandler.commonParams())}`\n            path: `${data_url}?${this.ex.queryString.default.stringify(this.upController.actionHandler.getParams())}`\n        }).then((data) => {\n            this.setState({value: data.data, buttons: data.buttons, data_url: data_url});\n        });\n    }\n\n    liveUpdate = (params) => {\n        if (params.mk === null ||\n            (params.mk === this.state.mk && params.mt === this.state.mt)\n        ) this.update();\n    }\n\n    update() {\n        this.getData(super.getValue().delayed_value_url);\n    }\n}\n\n\nexport class LeafComponentInput extends LeafComponentBase {\n    static requiredModules = [\"prInputText\", \"u\"].concat(LeafComponentBase.requiredModules);\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            ...this.state,\n            textSelected: false\n        }\n\n        this.styleClasses = [\n            \"disabled-input\",\n            \"l-card\",\n            \"unsaved-modification\",\n        ]\n\n        this.disabled = this.disabled.bind(this);\n        this.filled = this.filled.bind(this);\n        this.focus = this.focus.bind(this);\n        this.getCellStyleClasses = this.getCellStyleClasses.bind(this);\n        this.getLinoInput = this.getLinoInput.bind(this);\n        this.onChangeUpdate = this.onChangeUpdate.bind(this);\n        this.onInputRef = this.onInputRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onRef = this.onRef.bind(this);\n        this.setCellStyle = this.setCellStyle.bind(this);\n        this.submit = this.submit.bind(this);\n        this.tabIndexMatch = this.tabIndexMatch.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    async prepare() {\n        this.inputState = {\n            inputComponent: this.ex.prInputText.InputText,\n            inputOnly: false,\n            inputProps: {},\n            onChangeUpdateAssert: (event) => (true),\n            postOnChange: (event) => (null),\n        }\n        this.setLeafRef({input: true});\n    }\n\n    disabled() {\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_CARDS)\n            return true;\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_PARAMS)\n            return false;\n        if (!this.props.elem.editable) return true;\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n            let row = this.context.rows[this.props.column.rowIndex],\n                last_item = row[row.length - 1];\n\n            // No meta, assume not disabled;\n            if (!last_item || !last_item.meta || last_item.phantom) return false;\n            // disable_editing set to true;\n            if (row[row.length - 2]) return true;\n            // check name in the disabled_fields meta;\n            return row[row.length - 3][this.props.elem.name] || false;\n        } else {\n            if (this.context.data.disable_editing) return true;\n            return this.context.data.disabled_fields[this.props.elem.name] || false;\n        }\n    }\n\n    /**\n     * Find HTML input element\n     */\n    findHTMLInputElement(ref) {\n        if (!ref) return ref;\n        if (ref.focusInput) ref = ref.focusInput\n        else if (ref.inputRef) ref = ref.inputRef.current\n        else if (ref.hasOwnProperty('getInput')) ref = ref.getInput();\n        return ref;\n    }\n\n    select(input) {\n        const _select = (_input) => {\n            this.state.textSelected = true;\n            _input.select();\n        }\n        if (input.select) {_select(input); return}\n        if (this.container) input = this.container.getElementsByTagName('input')[0];\n        if (input && input.select) _select(input);\n    }\n\n    focus() {\n        let ref = this.findHTMLInputElement(this.inputEl), input;\n        if (ref && !this.focusSet) {\n            if (ref.focus) {\n                ref.focus()\n            } else if (ref.click) {\n                ref.click();\n            }\n            this.focusSet = true\n            this.select(ref);\n        }\n    }\n\n    getCellStyleClasses() {\n        let styleClasses = [];\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n            if (this.context.modifiedRows[this.props.column.rowIndex].includes(\n                this.props.elem.fields_index\n            )) {\n                styleClasses.push(\"unsaved-modification\");\n            }\n        } else {\n            styleClasses.push('l-card');\n            if (this.props[constants.URL_PARAM_WINDOW_TYPE] !== constants.WINDOW_TYPE_CARDS) {\n                if (this.disabled()) styleClasses.push(\"disabled-input\")\n                else if (this.context.modified.includes(this.props.elem.name))\n                    styleClasses.push(\"unsaved-modification\");\n            }\n        }\n        return styleClasses;\n    }\n\n    getLinoInput() {\n        return <this.inputState.inputComponent\n            // autoFocus={this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE ? true : undefined}\n            onChange={(e) => {\n                if (!this.inputState.onChangeUpdateAssert(e)) return;\n                this.onChangeUpdate(e);\n                this.inputState.postOnChange(e);\n            }}\n            ref={this.onInputRef}\n            style={{width: \"100%\"}}\n            tabIndex={this.props.tabIndex}\n            value={this.getValue() || \"\"}\n            {...this.inputState.inputProps}/>;\n    }\n\n    onChangeUpdate(e) {\n        this.update({[this.dataKey]: e.target.value});\n        this.setState({});\n    }\n\n    onInputRef(ref) {\n        if (ref) {\n            if (ref != this.inputEl) this.focusDone = false;\n            this.inputEl = ref;\n            if (!this.focusDone) {\n                let htmlInput = this.findHTMLInputElement(ref);\n                if (document.activeElement === htmlInput) return;\n                if (this.tabIndexMatch()) this.focus();\n                this.focusDone = true\n            }\n        }\n    }\n\n    onKeyDown(event) {\n        if (event.code === \"Escape\" &&\n        this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL &&\n        this.props.editing_mode) {\n            this.ex.u.toggleEditingMode(this.props.urlParams);\n        }\n    }\n\n    onRef(ref) {\n        const onClick = () => {\n            this.container.onclick = (event) => {\n                if (!this.disabled()) {\n                    Object.assign(this.upController.globals, {\n                        currentInputRowIndex: Object.assign({rowIndex: 0}, this.props.column).rowIndex,\n                        currentInputTabIndex: this.props.tabIndex,\n                        currentInputWindowType: this.props[constants.URL_PARAM_WINDOW_TYPE],\n                        currentInputAHRefName: this.upController.actionHandler.refName,\n                    });\n                    if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL) {\n                        if (!this.props.editing_mode)\n                            this.upController.history.replaceState({editing_mode: true})\n                        else {\n                            if (this.state.textSelected) this.setState({textSelected: false})\n                            else this.select(this.findHTMLInputElement(this.inputEl));\n                        }\n                    }\n                }\n            }\n        }\n        if (ref) {\n            this.container = ref;\n            if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n                this.container = ref.closest(\"td\");\n                onClick();\n            }\n            else if (\n                this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL ||\n                this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_INSERT\n            ) onClick();\n        }\n        this.setCellStyle(this.container);\n    }\n\n    setCellStyle(ref) {\n        if (ref) {\n            let classes = this.getCellStyleClasses();\n            this.styleClasses.forEach(item => {ref.classList.remove(item)});\n            classes.forEach(item => {ref.classList.add(item)});\n        }\n    }\n\n    submit() {\n        this.upController.actionHandler.submit({\n            cellInfo: {rowIndex: this.props.column.rowIndex}});\n    }\n\n    tabIndexMatch() {\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE &&\n            this.props.column.rowIndex !== this.upController.globals.currentInputRowIndex\n        ) return false;\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === this.upController.globals.currentInputWindowType &&\n            this.upController.actionHandler.refName === this.upController.globals.currentInputAHRefName &&\n            this.props.tabIndex === this.upController.globals.currentInputTabIndex\n        ) return true;\n        return false;\n    }\n\n    update(values) {\n        this.upController.actionHandler.update({\n            values: values, elem: this.props.elem, col: this.props.column,\n            windowType: this.props[constants.URL_PARAM_WINDOW_TYPE]});\n    }\n\n    render(hide_label=this.props.hide_label) {\n        if (!this.state.ready) return null;\n        if (this.container) this.setCellStyle(this.container);\n        return <Labeled {...this.props}\n            actions={(this.context.field_actions || {})[this.props.elem.name] || []}\n            hide_label={hide_label}\n            elem={this.props.elem} isFilled={this.filled()}>\n            <div\n                className={this.ex.classNames.default(this.wrapperClasses)}\n                onKeyDown={this.onKeyDown}\n                ref={this.onRef}>\n                    {this.inputState.inputOnly ? this.getLinoInput() :\n                        this.props.editing_mode && !this.disabled() ?\n                            this.getLinoInput() : this.innerHTML()}\n            </div>\n        </Labeled>\n    }\n}\n\n\nexport class LeafComponentInputChoices extends LeafComponentInput {\n    static requiredModules = [\"prDropdown\"].concat(LeafComponentInput.requiredModules);\n    constructor(props, context) {\n        super(props, context);\n        this.wrapperClasses.push(\"l-ChoiceListFieldElement\");\n        this.state = {\n            ...this.state,\n            hidden_value: null\n        }\n\n        this.dataKeyHidden = props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? props.elem.fields_index_hidden\n            : props.elem.name + \"Hidden\";\n\n        this.getLinoInput = this.getLinoInput.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.innerHTML = this.innerHTML.bind(this);\n    }\n\n    onKeyDown = (e) => {\n        super.onKeyDown(e);\n        if (e.key === \"Enter\" && this.inputEl.getOverlay()) e.stopPropagation();\n    }\n\n    getValue() {\n        return {\n            text: super.getValue(),\n            value: this.getValueByName(this.dataKeyHidden)};\n    }\n\n    getLinoInput() {\n        return <this.ex.prDropdown.Dropdown\n            // appendTo={this.inputEl ? this.findHTMLInputElement(this.inputEl) : window.App.topDiv}\n            autoFocus={true}\n            itemTemplate={(item) => {\n                return <div dangerouslySetInnerHTML={{__html: item.text}}/>\n            }}\n            onChange={(e) => {\n                if (e.originalEvent.ctrlKey || e.originalEvent.altKey) return;\n                this.update({[this.dataKey]: e.value || null,  // have null instead of undefined\n                    [this.dataKeyHidden]: e.value || null});\n                this.setState({});\n            }}\n            optionLabel=\"text\"\n            options={this.options}\n            // panelStyle={{zIndex: \"99999\"}}\n            // ref={this.onInputRef}\n            showClear={this.props.elem.field_options.allowBlank}\n            style={{width: \"100%\"}}\n            tabIndex={this.props.tabIndex}\n            value={this.getValue().value}\n            valueTemplate={(item, options) => {\n                if (item) return <div dangerouslySetInnerHTML={{__html: item.text}}/>\n                return <div>&nbsp;</div>;\n            }}/>\n    }\n\n    innerHTML() {\n        let v = super.getValue() || \"\\u00a0\";\n        // return <div style={{whiteSpace: \"nowrap\"}}>{v}</div>\n        return <div /* style={{whiteSpace: \"nowrap\"}} */ dangerouslySetInnerHTML={{__html: v}}/>\n    }\n}\n"],"names":["ex","name","classNames","prDropdown","prInputText","queryString","u","maintainTableWidth","elem","count","ctx","undefined","this","keys","Object","flexs","length","forEach","key","tbl","document","getElementById","getElementsByClassName","getBoundingClientRect","width","Array","from","querySelectorAll","el","classList","join","includes","style","setProperty","RegisterImportPool","Labeled","_ref","_ref$actions","actions","label","children","_ref$hide_label","hide_label","_ref$isFilled","isFilled","localEx","getExReady","ready","React","className","title","assign","value","quicktip","help_text","map","action","i","dangerouslySetInnerHTML","__html","propTypes","PropTypes","isRequired","ABCComponent","_createClass","_classCallCheck","_ref2","props","context","constants","param_values","rows","column","rowIndex","data","LeafComponentBase","_Component","_this","_callSuper","filled","getValue","wrapperClasses","dataKey","fields_index","upController","urlParams","controller","c","bind","getValueByName","innerHTML","setLeafRef","_inherits","dangerous","arguments","v","JSON","stringify","_ref3","_ref3$input","input","_ref3$type","type","dataContext","actorID","ref","onLeafMount","Component","requiredModules","iPool","contextType","DataContextType","propTypesFromLinoLayout","_defineProperty","editing_mode","_objectSpread","defaultProps","LeafComponentDelayedValue","_LeafComponentBase","_this2","liveUpdate","params","mk","state","mt","update","masterRelate","hasOwnContext","actionHandler","masterRelateForSlave","data_url","actor_id","concat","packId","delayed","delayed_value","shouldComponentUpdate","getData","val","_superPropGet","globals","panels","delayed_value_url","setState","nextProps","nextState","prevProps","prevState","_this3","silentFetch","path","getParams","then","buttons","LeafComponentInput","_LeafComponentBase2","_this4","textSelected","styleClasses","disabled","focus","getCellStyleClasses","getLinoInput","onChangeUpdate","onInputRef","onKeyDown","onRef","setCellStyle","submit","tabIndexMatch","_prepare","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","inputState","inputComponent","InputText","inputOnly","inputProps","onChangeUpdateAssert","event","postOnChange","stop","apply","editable","row","last_item","meta","phantom","disable_editing","disabled_fields","focusInput","inputRef","current","hasOwnProperty","getInput","_this5","_select","_input","select","container","getElementsByTagName","findHTMLInputElement","inputEl","focusSet","click","modifiedRows","push","modified","_this6","_extends","onChange","e","tabIndex","target","focusDone","htmlInput","activeElement","code","toggleEditingMode","_this7","onClick","onclick","currentInputRowIndex","currentInputTabIndex","currentInputWindowType","currentInputAHRefName","refName","history","replaceState","closest","classes","item","remove","add","cellInfo","values","col","windowType","field_actions","LeafComponentInputChoices","_LeafComponentInput","_this8","getOverlay","stopPropagation","hidden_value","dataKeyHidden","fields_index_hidden","text","_this9","Dropdown","autoFocus","itemTemplate","originalEvent","ctrlKey","altKey","optionLabel","options","showClear","field_options","allowBlank","valueTemplate"],"sourceRoot":""}
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
  "black>=24.10.0",
  "codespell>=2.3.0",
  "fire>=0.7.0",
  "ipykernel>=6.29.5",
  "isort>=5.13.2",
  "mypy>=1.14.1",
  "pre-commit>=4.1.0",
  "pylint>=3.3.3",
  "pytest>=8.3.4",
  "pytest-asyncio>=0.25.2",
  "pytest-cov>=6.0.0",
  "pytest-mock>=3.14.0",
  "ruff>=0.9.2"
]

[project]
name = "llm-agents-from-scratch"
version = "0.0.10"
description = "Build an LLM agent, equipped with MCP, from scratch."
license = "Apache-2.0"
readme = "README.md"
authors = [
  {name = "Andrei Fajardo", email = "andrei@nerdai.io"}
]
requires-python = ">=3.10"
dependencies = [
  "asyncio>=3.4.3",
  "colorama>=0.4.6",
  "jsonschema>=4.24.0",
  "mcp[cli]>=1.9.4",
  "ollama>=0.5.1",
  "pydantic>=2.11.7"
]

[tool.coverage.run]
omit = [
  "src/llm_agents_from_scratch/logger.py"
]

[tool.ruff]
line-length = 80

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = [
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "COM", # flake8-commas
  "C4", # flake8-comprehensions
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "ICN", # flake8-import-conventions
  "Q", # flake8-quotes
  "RSE", # flake8-raise
  "D", # pydocstyle
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
  "W", # pycodestyle
  "N", # pep8-naming
  "ERA", # eradicate
  "PL", # pylint
  "D213" # Multiline Docstrings start on newline
]
ignore = [
  "A002" # Ignore variable `input` is shadowing a Python builtin in function
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"tests/**/*.py" = ["D"]
"docs/notebooks/**/*.ipynb" = ["E501"]

[tool.ruff.lint.pydocstyle]
convention = "google" # Ensures Google style

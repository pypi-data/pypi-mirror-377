[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-server-gelato"
version = "0.1.0"
description = "MCP server for Gelato print-on-demand API"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Maksim Madzar", email = "madzarmaksim@gmail.com"},
]
maintainers = [
    {name = "Maksim Madzar", email = "madzarmaksim@gmail.com"},
]
license = {text = "MIT"}
keywords = ["mcp", "gelato", "printing", "api", "model-context-protocol"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Printing",
]
dependencies = [
    "httpx>=0.28.1",
    "mcp[cli]>=1.13.1",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/madzarmaksim/mcp-server-gelato"
Documentation = "https://github.com/madzarmaksim/mcp-server-gelato#readme"
Repository = "https://github.com/madzarmaksim/mcp-server-gelato.git"
"Bug Tracker" = "https://github.com/madzarmaksim/mcp-server-gelato/issues"

[project.scripts]
mcp-server-gelato = "src.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project.optional-dependencies]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q"
testpaths = [
    "test",
]
asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "src/__init__.py",
    "src/*/__init__.py",
    "test/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
test = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-mock>=3.15.0",
]

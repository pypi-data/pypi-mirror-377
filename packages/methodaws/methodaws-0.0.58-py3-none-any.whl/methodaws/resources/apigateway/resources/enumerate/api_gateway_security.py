# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .authorization_type import AuthorizationType
from .security_policy import SecurityPolicy
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class ApiGatewaySecurity(UniversalBaseModel):
    has_waf_integration: bool = pydantic.Field(alias="hasWafIntegration")
    has_cloud_watch_logging: bool = pydantic.Field(alias="hasCloudWatchLogging")
    has_throttling: bool = pydantic.Field(alias="hasThrottling")
    open_endpoints: int = pydantic.Field(alias="openEndpoints")
    high_risk_routes: typing.List[str] = pydantic.Field(alias="highRiskRoutes")
    security_score: float = pydantic.Field(alias="securityScore")
    authentication_methods: typing.List[AuthorizationType] = pydantic.Field(alias="authenticationMethods")
    tls_versions: typing.List[SecurityPolicy] = pydantic.Field(alias="tlsVersions")
    cors_configured: bool = pydantic.Field(alias="corsConfigured")
    api_keys_required: bool = pydantic.Field(alias="apiKeysRequired")

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow

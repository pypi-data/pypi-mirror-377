Metadata-Version: 2.4
Name: mi4-conventional-commits-lib
Version: 0.0.16
Summary: A conventional commits validation library
Home-page: https://github.com/Mi4-Conventional-Commits-Lib/Mi4-Conventional-Commits-Lib
Author: MI4
Author-email: tom.bedino@mi4.fr
Project-URL: Bug Reports, https://github.com/Mi4-Conventional-Commits-Lib/Mi4-Conventional-Commits-Lib/issues
Project-URL: Source, https://github.com/Mi4-Conventional-Commits-Lib/Mi4-Conventional-Commits-Lib
Project-URL: Documentation, https://github.com/Mi4-Conventional-Commits-Lib/Mi4-Conventional-Commits-Lib#readme
Keywords: conventional-commits,validation,git,commit-message
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Version Control
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: project-url
Dynamic: requires-python
Dynamic: summary

# mi4-conventional-commits-lib

A Python library for validating conventional commits.

## Installation

```bash
pip install .
```

## Usage

```python
from mi4_conventional_commits_lib import parseCommit, isCommitValid, buildCommit, getCommitTypes

# Validate a commit
result = validateCommit("feat: new feature (#123)")
print(result)  # True

# Parse a commit
parsed = parseCommit("fix(auth)!: fix bug (#456)")
print(parsed)  # {'type': 'fix', 'scope': 'auth', ...}

# Build a commit
commit_obj = {
    "type": "feat",
    "scope": "api",
    "breakChange": True,
    "description": "new API",
    "issue": 789
}
built = buildCommit(commit_obj)
print(built)  # "feat(api)!: new API (#789)"
```

## Available Functions

- `parseCommit`: parseCommit function
- `isCommitValid`: isCommitValid function
- `buildCommit`: buildCommit function
- `getCommitTypes`: getCommitTypes function

## License

MIT License

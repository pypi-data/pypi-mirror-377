/* This file is automatically generated from "mitsuba.conf" using the script
   "resources/configure.py". Please do not attempt to change it manually,
   as any changes will be overwritten. The main purpose of this file is to
   helper various macros to instantiate multiple variants of Mitsuba. */

#pragma once

#include <mitsuba/core/fwd.h>
#include <drjit/jit.h>
#include <drjit/autodiff.h>

/// List of enabled Mitsuba variants
#define MI_VARIANTS                                                             \
    "scalar_rgb\n"                                                              \
    "scalar_spectral\n"                                                         \
    "scalar_spectral_polarized\n"                                               \
    "llvm_ad_rgb\n"                                                             \
    "llvm_ad_mono\n"                                                            \
    "llvm_ad_mono_polarized\n"                                                  \
    "llvm_ad_spectral\n"                                                        \
    "llvm_ad_spectral_polarized\n"                                              \
    "cuda_ad_rgb\n"                                                             \
    "cuda_ad_mono\n"                                                            \
    "cuda_ad_mono_polarized\n"                                                  \
    "cuda_ad_spectral\n"                                                        \
    "cuda_ad_spectral_polarized\n"                                              \

/// Default variant to be used by the "mitsuba" executable
#define MI_DEFAULT_VARIANT "scalar_rgb"                                         \

/// Declare that a "struct" template is to be imported and not instantiated
#define MI_EXTERN_STRUCT(Name)                                                  \
    MI_EXTERN_LIB template struct Name<float, Color<float, 3>>;                 \
    MI_EXTERN_LIB template struct Name<float, Spectrum<float, 4>>;              \
    MI_EXTERN_LIB template struct Name<float, MuellerMatrix<Spectrum<float, 4>>>; \
    MI_EXTERN_LIB template struct Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 3>>; \
    MI_EXTERN_LIB template struct Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>; \
    MI_EXTERN_LIB template struct Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>>; \
    MI_EXTERN_LIB template struct Name<dr::DiffArray<JitBackend::LLVM, float>, Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>; \
    MI_EXTERN_LIB template struct Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>>; \
    MI_EXTERN_LIB template struct Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 3>>; \
    MI_EXTERN_LIB template struct Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>; \
    MI_EXTERN_LIB template struct Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>>; \
    MI_EXTERN_LIB template struct Name<dr::DiffArray<JitBackend::CUDA, float>, Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>; \
    MI_EXTERN_LIB template struct Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>>; \

/// Declare that a "class" template is to be imported and not instantiated
#define MI_EXTERN_CLASS(Name, ...)                                              \
    MI_EXTERN_LIB template class Name<float, Color<float, 3>>;                  \
    MI_EXTERN_LIB template class Name<float, Spectrum<float, 4>>;               \
    MI_EXTERN_LIB template class Name<float, MuellerMatrix<Spectrum<float, 4>>>; \
    MI_EXTERN_LIB template class Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 3>>; \
    MI_EXTERN_LIB template class Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>; \
    MI_EXTERN_LIB template class Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>>; \
    MI_EXTERN_LIB template class Name<dr::DiffArray<JitBackend::LLVM, float>, Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>; \
    MI_EXTERN_LIB template class Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>>; \
    MI_EXTERN_LIB template class Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 3>>; \
    MI_EXTERN_LIB template class Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>; \
    MI_EXTERN_LIB template class Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>>; \
    MI_EXTERN_LIB template class Name<dr::DiffArray<JitBackend::CUDA, float>, Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>; \
    MI_EXTERN_LIB template class Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>>; \

/// Explicitly instantiate all variants of a "struct" template
#define MI_INSTANTIATE_STRUCT(Name)                                             \
    template struct Name<float, Color<float, 3>>;                               \
    template struct Name<float, Spectrum<float, 4>>;                            \
    template struct Name<float, MuellerMatrix<Spectrum<float, 4>>>;             \
    template struct Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 3>>; \
    template struct Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>; \
    template struct Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>>; \
    template struct Name<dr::DiffArray<JitBackend::LLVM, float>, Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>; \
    template struct Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>>; \
    template struct Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 3>>; \
    template struct Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>; \
    template struct Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>>; \
    template struct Name<dr::DiffArray<JitBackend::CUDA, float>, Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>; \
    template struct Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>>; \

/// Explicitly instantiate all variants of a "class" template
#define MI_INSTANTIATE_CLASS(Name, ...)                                         \
    template class Name<float, Color<float, 3>>;                                \
    template class Name<float, Spectrum<float, 4>>;                             \
    template class Name<float, MuellerMatrix<Spectrum<float, 4>>>;              \
    template class Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 3>>; \
    template class Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>; \
    template class Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>>; \
    template class Name<dr::DiffArray<JitBackend::LLVM, float>, Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>; \
    template class Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>>; \
    template class Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 3>>; \
    template class Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>; \
    template class Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>>; \
    template class Name<dr::DiffArray<JitBackend::CUDA, float>, Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>; \
    template class Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>>; \

/// Call the variant function "func" for a specific variant "variant"
#define MI_INVOKE_VARIANT(variant, func, ...)                                   \
    [&]() {                                                                     \
        if (variant == "scalar_rgb")                                            \
            return func<float, Color<float, 3>>(__VA_ARGS__);                   \
        else if (variant == "scalar_spectral")                                  \
            return func<float, Spectrum<float, 4>>(__VA_ARGS__);                \
        else if (variant == "scalar_spectral_polarized")                        \
            return func<float, MuellerMatrix<Spectrum<float, 4>>>(__VA_ARGS__); \
        else if (variant == "llvm_ad_rgb")                                      \
            return func<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 3>>(__VA_ARGS__); \
        else if (variant == "llvm_ad_mono")                                     \
            return func<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>(__VA_ARGS__); \
        else if (variant == "llvm_ad_mono_polarized")                           \
            return func<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>>(__VA_ARGS__); \
        else if (variant == "llvm_ad_spectral")                                 \
            return func<dr::DiffArray<JitBackend::LLVM, float>, Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>(__VA_ARGS__); \
        else if (variant == "llvm_ad_spectral_polarized")                       \
            return func<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>>(__VA_ARGS__); \
        else if (variant == "cuda_ad_rgb")                                      \
            return func<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 3>>(__VA_ARGS__); \
        else if (variant == "cuda_ad_mono")                                     \
            return func<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>(__VA_ARGS__); \
        else if (variant == "cuda_ad_mono_polarized")                           \
            return func<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>>(__VA_ARGS__); \
        else if (variant == "cuda_ad_spectral")                                 \
            return func<dr::DiffArray<JitBackend::CUDA, float>, Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>(__VA_ARGS__); \
        else if (variant == "cuda_ad_spectral_polarized")                       \
            return func<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>>(__VA_ARGS__); \
        else                                                                    \
            Throw("Unsupported variant: \"%s\". Must be one of scalar_rgb, scalar_spectral, scalar_spectral_polarized, llvm_ad_rgb, llvm_ad_mono, llvm_ad_mono_polarized, llvm_ad_spectral, llvm_ad_spectral_polarized, cuda_ad_rgb, cuda_ad_mono, cuda_ad_mono_polarized, cuda_ad_spectral, cuda_ad_spectral_polarized!", variant); \
    }()                                                                         \

/// Register a plugin with the plugin manager
#define MI_REGISTER_PLUGIN(cb, id, Name)                                        \
    cb(id, "scalar_rgb", Name<float, Color<float, 3>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<float, Color<float, 3>>(p); }); \
    cb(id, "scalar_spectral", Name<float, Spectrum<float, 4>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<float, Spectrum<float, 4>>(p); }); \
    cb(id, "scalar_spectral_polarized", Name<float, MuellerMatrix<Spectrum<float, 4>>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<float, MuellerMatrix<Spectrum<float, 4>>>(p); }); \
    cb(id, "llvm_ad_rgb", Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 3>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 3>>(p); }); \
    cb(id, "llvm_ad_mono", Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>(p); }); \
    cb(id, "llvm_ad_mono_polarized", Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>>(p); }); \
    cb(id, "llvm_ad_spectral", Name<dr::DiffArray<JitBackend::LLVM, float>, Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<dr::DiffArray<JitBackend::LLVM, float>, Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>(p); }); \
    cb(id, "llvm_ad_spectral_polarized", Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>>(p); }); \
    cb(id, "cuda_ad_rgb", Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 3>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 3>>(p); }); \
    cb(id, "cuda_ad_mono", Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>(p); }); \
    cb(id, "cuda_ad_mono_polarized", Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>>(p); }); \
    cb(id, "cuda_ad_spectral", Name<dr::DiffArray<JitBackend::CUDA, float>, Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<dr::DiffArray<JitBackend::CUDA, float>, Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>(p); }); \
    cb(id, "cuda_ad_spectral_polarized", Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>>::Type, [](void *, const Properties &p) -> ref<Object> { return new Name<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>>(p); }); \

/// Partial template overloads to infer the name of a variant at compile time
#define MI_VARIANT_TEMPLATE()                                                   \
    template <> struct variant<float, Color<float, 3>> {                        \
        static constexpr const char *name = "scalar_rgb";                       \
    };                                                                          \
    template <> struct variant<float, Spectrum<float, 4>> {                     \
        static constexpr const char *name = "scalar_spectral";                  \
    };                                                                          \
    template <> struct variant<float, MuellerMatrix<Spectrum<float, 4>>> {      \
        static constexpr const char *name = "scalar_spectral_polarized";        \
    };                                                                          \
    template <> struct variant<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 3>> { \
        static constexpr const char *name = "llvm_ad_rgb";                      \
    };                                                                          \
    template <> struct variant<dr::DiffArray<JitBackend::LLVM, float>, Color<dr::DiffArray<JitBackend::LLVM, float>, 1>> { \
        static constexpr const char *name = "llvm_ad_mono";                     \
    };                                                                          \
    template <> struct variant<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::LLVM, float>, 1>>> { \
        static constexpr const char *name = "llvm_ad_mono_polarized";           \
    };                                                                          \
    template <> struct variant<dr::DiffArray<JitBackend::LLVM, float>, Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>> { \
        static constexpr const char *name = "llvm_ad_spectral";                 \
    };                                                                          \
    template <> struct variant<dr::DiffArray<JitBackend::LLVM, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::LLVM, float>, 4>>> { \
        static constexpr const char *name = "llvm_ad_spectral_polarized";       \
    };                                                                          \
    template <> struct variant<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 3>> { \
        static constexpr const char *name = "cuda_ad_rgb";                      \
    };                                                                          \
    template <> struct variant<dr::DiffArray<JitBackend::CUDA, float>, Color<dr::DiffArray<JitBackend::CUDA, float>, 1>> { \
        static constexpr const char *name = "cuda_ad_mono";                     \
    };                                                                          \
    template <> struct variant<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Color<dr::DiffArray<JitBackend::CUDA, float>, 1>>> { \
        static constexpr const char *name = "cuda_ad_mono_polarized";           \
    };                                                                          \
    template <> struct variant<dr::DiffArray<JitBackend::CUDA, float>, Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>> { \
        static constexpr const char *name = "cuda_ad_spectral";                 \
    };                                                                          \
    template <> struct variant<dr::DiffArray<JitBackend::CUDA, float>, MuellerMatrix<Spectrum<dr::DiffArray<JitBackend::CUDA, float>, 4>>> { \
        static constexpr const char *name = "cuda_ad_spectral_polarized";       \
    };                                                                          \


# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ... import core
from .types.jobs_create_request_priority import JobsCreateRequestPriority
from ...core.request_options import RequestOptions
from ...types.api_job_response import ApiJobResponse
from ...core.unchecked_base_model import construct_type
from ...errors.bad_request_error import BadRequestError
from ...errors.forbidden_error import ForbiddenError
from ...errors.internal_server_error import InternalServerError
from ...errors.service_unavailable_error import ServiceUnavailableError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from .types.jobs_create_with_project_id_request_priority import JobsCreateWithProjectIdRequestPriority
from ...types.dub_job_status_response import DubJobStatusResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class JobsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        target_locales: typing.List[str],
        file: typing.Optional[core.File] = OMIT,
        file_url: typing.Optional[str] = OMIT,
        source_locale: typing.Optional[str] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        file_name: typing.Optional[str] = OMIT,
        priority: typing.Optional[JobsCreateRequestPriority] = OMIT,
        webhook_secret: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiJobResponse:
        """
        Parameters
        ----------
        target_locales : typing.List[str]
            List of target locales

        file : typing.Optional[core.File]
            See core.File for more documentation

        file_url : typing.Optional[str]

        source_locale : typing.Optional[str]
            Source locale

        webhook_url : typing.Optional[str]

        file_name : typing.Optional[str]

        priority : typing.Optional[JobsCreateRequestPriority]
            Priority of the job. Allowed values: LOW, NORMAL, HIGH

        webhook_secret : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiJobResponse
            Ok

        Examples
        --------
        from murf import Murf

        client = Murf(
            api_key="YOUR_API_KEY",
        )
        client.dubbing.jobs.create(
            target_locales=["target_locales"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/murfdub/jobs/create",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            data={
                "file_url": file_url,
                "source_locale": source_locale,
                "target_locales": target_locales,
                "webhook_url": webhook_url,
                "file_name": file_name,
                "priority": priority,
                "webhook_secret": webhook_secret,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiJobResponse,
                    construct_type(
                        type_=ApiJobResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_with_project_id(
        self,
        *,
        project_id: str,
        file: typing.Optional[core.File] = OMIT,
        file_url: typing.Optional[str] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        file_name: typing.Optional[str] = OMIT,
        priority: typing.Optional[JobsCreateWithProjectIdRequestPriority] = OMIT,
        webhook_secret: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiJobResponse:
        """
        Parameters
        ----------
        project_id : str
            Your Project Id

        file : typing.Optional[core.File]
            See core.File for more documentation

        file_url : typing.Optional[str]

        webhook_url : typing.Optional[str]

        file_name : typing.Optional[str]

        priority : typing.Optional[JobsCreateWithProjectIdRequestPriority]
            Priority of the job. Allowed values: LOW, NORMAL, HIGH

        webhook_secret : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiJobResponse
            Ok

        Examples
        --------
        from murf import Murf

        client = Murf(
            api_key="YOUR_API_KEY",
        )
        client.dubbing.jobs.create_with_project_id(
            project_id="project_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/murfdub/jobs/create-with-project-id",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            data={
                "file_url": file_url,
                "project_id": project_id,
                "webhook_url": webhook_url,
                "file_name": file_name,
                "priority": priority,
                "webhook_secret": webhook_secret,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiJobResponse,
                    construct_type(
                        type_=ApiJobResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_status(
        self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DubJobStatusResponse:
        """
        Parameters
        ----------
        job_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DubJobStatusResponse
            Ok

        Examples
        --------
        from murf import Murf

        client = Murf(
            api_key="YOUR_API_KEY",
        )
        client.dubbing.jobs.get_status(
            job_id="job_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/murfdub/jobs/{jsonable_encoder(job_id)}/status",
            base_url=self._client_wrapper.get_environment().base,
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DubJobStatusResponse,
                    construct_type(
                        type_=DubJobStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncJobsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        target_locales: typing.List[str],
        file: typing.Optional[core.File] = OMIT,
        file_url: typing.Optional[str] = OMIT,
        source_locale: typing.Optional[str] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        file_name: typing.Optional[str] = OMIT,
        priority: typing.Optional[JobsCreateRequestPriority] = OMIT,
        webhook_secret: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiJobResponse:
        """
        Parameters
        ----------
        target_locales : typing.List[str]
            List of target locales

        file : typing.Optional[core.File]
            See core.File for more documentation

        file_url : typing.Optional[str]

        source_locale : typing.Optional[str]
            Source locale

        webhook_url : typing.Optional[str]

        file_name : typing.Optional[str]

        priority : typing.Optional[JobsCreateRequestPriority]
            Priority of the job. Allowed values: LOW, NORMAL, HIGH

        webhook_secret : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiJobResponse
            Ok

        Examples
        --------
        import asyncio

        from murf import AsyncMurf

        client = AsyncMurf(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dubbing.jobs.create(
                target_locales=["target_locales"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/murfdub/jobs/create",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            data={
                "file_url": file_url,
                "source_locale": source_locale,
                "target_locales": target_locales,
                "webhook_url": webhook_url,
                "file_name": file_name,
                "priority": priority,
                "webhook_secret": webhook_secret,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiJobResponse,
                    construct_type(
                        type_=ApiJobResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_with_project_id(
        self,
        *,
        project_id: str,
        file: typing.Optional[core.File] = OMIT,
        file_url: typing.Optional[str] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        file_name: typing.Optional[str] = OMIT,
        priority: typing.Optional[JobsCreateWithProjectIdRequestPriority] = OMIT,
        webhook_secret: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiJobResponse:
        """
        Parameters
        ----------
        project_id : str
            Your Project Id

        file : typing.Optional[core.File]
            See core.File for more documentation

        file_url : typing.Optional[str]

        webhook_url : typing.Optional[str]

        file_name : typing.Optional[str]

        priority : typing.Optional[JobsCreateWithProjectIdRequestPriority]
            Priority of the job. Allowed values: LOW, NORMAL, HIGH

        webhook_secret : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiJobResponse
            Ok

        Examples
        --------
        import asyncio

        from murf import AsyncMurf

        client = AsyncMurf(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dubbing.jobs.create_with_project_id(
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/murfdub/jobs/create-with-project-id",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            data={
                "file_url": file_url,
                "project_id": project_id,
                "webhook_url": webhook_url,
                "file_name": file_name,
                "priority": priority,
                "webhook_secret": webhook_secret,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiJobResponse,
                    construct_type(
                        type_=ApiJobResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_status(
        self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DubJobStatusResponse:
        """
        Parameters
        ----------
        job_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DubJobStatusResponse
            Ok

        Examples
        --------
        import asyncio

        from murf import AsyncMurf

        client = AsyncMurf(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dubbing.jobs.get_status(
                job_id="job_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/murfdub/jobs/{jsonable_encoder(job_id)}/status",
            base_url=self._client_wrapper.get_environment().base,
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DubJobStatusResponse,
                    construct_type(
                        type_=DubJobStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from .types.api_create_project_request_dubbing_type import ApiCreateProjectRequestDubbingType
from ...core.request_options import RequestOptions
from ...types.api_project_response import ApiProjectResponse
from ...core.unchecked_base_model import construct_type
from ...errors.bad_request_error import BadRequestError
from ...errors.forbidden_error import ForbiddenError
from ...errors.internal_server_error import InternalServerError
from ...errors.service_unavailable_error import ServiceUnavailableError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...types.group_api_project_response import GroupApiProjectResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProjectsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        name: str,
        dubbing_type: ApiCreateProjectRequestDubbingType,
        target_locales: typing.Sequence[str],
        source_locale: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiProjectResponse:
        """
        Parameters
        ----------
        name : str
            Your Project Name

        dubbing_type : ApiCreateProjectRequestDubbingType

        target_locales : typing.Sequence[str]
            List of target locales

        source_locale : typing.Optional[str]
            Source Locale

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiProjectResponse
            Ok

        Examples
        --------
        from murf import Murf

        client = Murf(
            api_key="YOUR_API_KEY",
        )
        client.dubbing.projects.create(
            name="name",
            dubbing_type="AUTOMATED",
            target_locales=["target_locales"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/murfdub/projects/create",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            json={
                "name": name,
                "source_locale": source_locale,
                "dubbing_type": dubbing_type,
                "description": description,
                "target_locales": target_locales,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiProjectResponse,
                    construct_type(
                        type_=ApiProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        next: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GroupApiProjectResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[int]
            Number of Projects in response

        next : typing.Optional[str]
            Next Page Iterator

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GroupApiProjectResponse
            Ok

        Examples
        --------
        from murf import Murf

        client = Murf(
            api_key="YOUR_API_KEY",
        )
        client.dubbing.projects.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/murfdub/projects/list",
            base_url=self._client_wrapper.get_environment().base,
            method="GET",
            params={
                "limit": limit,
                "next": next,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GroupApiProjectResponse,
                    construct_type(
                        type_=GroupApiProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        project_id: str,
        *,
        target_locales: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiProjectResponse:
        """
        Parameters
        ----------
        project_id : str

        target_locales : typing.Sequence[str]
            List of target locales

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiProjectResponse
            Ok

        Examples
        --------
        from murf import Murf

        client = Murf(
            api_key="YOUR_API_KEY",
        )
        client.dubbing.projects.update(
            project_id="project_id",
            target_locales=["target_locales"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/murfdub/projects/{jsonable_encoder(project_id)}/update",
            base_url=self._client_wrapper.get_environment().base,
            method="PUT",
            json={
                "target_locales": target_locales,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiProjectResponse,
                    construct_type(
                        type_=ApiProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProjectsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        name: str,
        dubbing_type: ApiCreateProjectRequestDubbingType,
        target_locales: typing.Sequence[str],
        source_locale: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiProjectResponse:
        """
        Parameters
        ----------
        name : str
            Your Project Name

        dubbing_type : ApiCreateProjectRequestDubbingType

        target_locales : typing.Sequence[str]
            List of target locales

        source_locale : typing.Optional[str]
            Source Locale

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiProjectResponse
            Ok

        Examples
        --------
        import asyncio

        from murf import AsyncMurf

        client = AsyncMurf(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dubbing.projects.create(
                name="name",
                dubbing_type="AUTOMATED",
                target_locales=["target_locales"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/murfdub/projects/create",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            json={
                "name": name,
                "source_locale": source_locale,
                "dubbing_type": dubbing_type,
                "description": description,
                "target_locales": target_locales,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiProjectResponse,
                    construct_type(
                        type_=ApiProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        next: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GroupApiProjectResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[int]
            Number of Projects in response

        next : typing.Optional[str]
            Next Page Iterator

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GroupApiProjectResponse
            Ok

        Examples
        --------
        import asyncio

        from murf import AsyncMurf

        client = AsyncMurf(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dubbing.projects.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/murfdub/projects/list",
            base_url=self._client_wrapper.get_environment().base,
            method="GET",
            params={
                "limit": limit,
                "next": next,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GroupApiProjectResponse,
                    construct_type(
                        type_=GroupApiProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        project_id: str,
        *,
        target_locales: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiProjectResponse:
        """
        Parameters
        ----------
        project_id : str

        target_locales : typing.Sequence[str]
            List of target locales

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiProjectResponse
            Ok

        Examples
        --------
        import asyncio

        from murf import AsyncMurf

        client = AsyncMurf(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dubbing.projects.update(
                project_id="project_id",
                target_locales=["target_locales"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/murfdub/projects/{jsonable_encoder(project_id)}/update",
            base_url=self._client_wrapper.get_environment().base,
            method="PUT",
            json={
                "target_locales": target_locales,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiProjectResponse,
                    construct_type(
                        type_=ApiProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

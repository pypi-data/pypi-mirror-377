# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.pronunciation_detail import PronunciationDetail
from ..core.request_options import RequestOptions
from ..types.generate_speech_response import GenerateSpeechResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..errors.bad_request_error import BadRequestError
from ..errors.payment_required_error import PaymentRequiredError
from ..errors.forbidden_error import ForbiddenError
from ..errors.internal_server_error import InternalServerError
from ..errors.service_unavailable_error import ServiceUnavailableError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.api_voice import ApiVoice
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TextToSpeechClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def generate(
        self,
        *,
        text: str,
        voice_id: str,
        audio_duration: typing.Optional[float] = OMIT,
        channel_type: typing.Optional[str] = OMIT,
        encode_as_base_64: typing.Optional[bool] = OMIT,
        format: typing.Optional[str] = OMIT,
        model_version: typing.Optional[typing.Literal["GEN2"]] = OMIT,
        multi_native_locale: typing.Optional[str] = OMIT,
        pitch: typing.Optional[int] = OMIT,
        pronunciation_dictionary: typing.Optional[typing.Dict[str, PronunciationDetail]] = OMIT,
        rate: typing.Optional[int] = OMIT,
        sample_rate: typing.Optional[float] = OMIT,
        style: typing.Optional[str] = OMIT,
        variation: typing.Optional[int] = OMIT,
        word_durations_as_original_text: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateSpeechResponse:
        """
        Returns a url to the generated audio file along with other associated properties.

        Parameters
        ----------
        text : str
            The text that is to be synthesised. e.g. 'Hello there [pause 1s] friend'

        voice_id : str
            Use the GET /v1/speech/voices API to find supported voiceIds. You can use either the voiceId (e.g. en-US-natalie) or just the voice actor's name (e.g. natalie).

        audio_duration : typing.Optional[float]
            This parameter allows specifying the duration (in seconds) for the generated audio. If the value is 0, this parameter will be ignored. Only available for Gen2 model.

        channel_type : typing.Optional[str]
            Valid values: STEREO, MONO

        encode_as_base_64 : typing.Optional[bool]
            Set to true to receive audio in response as a Base64 encoded string instead of a url. This enables zero retention of audio data on Murf's servers.

        format : typing.Optional[str]
            Format of the generated audio file. Valid values: MP3, WAV, FLAC, ALAW, ULAW, PCM, OGG

        model_version : typing.Optional[typing.Literal["GEN2"]]
            Valid values: GEN2. Audio will be generated using the new and advanced GEN2 model. Outputs from GEN2 sound more natural and high-quality compared to earlier models.

        multi_native_locale : typing.Optional[str]
            Specifies the language for the generated audio, enabling a voice to speak in multiple languages natively. Only available in the Gen2 model.
            Valid values: "en-US", "en-UK", "es-ES", etc. Use the GET /v1/speech/voices endpoint to retrieve the list of available voices and languages.

        pitch : typing.Optional[int]
            Pitch of the voiceover

        pronunciation_dictionary : typing.Optional[typing.Dict[str, PronunciationDetail]]
            An object used to define custom pronunciations.

             Example 1: {"live":{"type": "IPA", "pronunciation": "laÉªv"}}.

             Example 2: {"2022":{"type": "SAY_AS", "pronunciation": "twenty twenty two"}}

        rate : typing.Optional[int]
            Speed of the voiceover

        sample_rate : typing.Optional[float]
            Valid values are 8000, 24000, 44100, 48000

        style : typing.Optional[str]
            The voice style to be used for voiceover generation.

        variation : typing.Optional[int]
            Higher values will add more variation in terms of Pause, Pitch, and Speed to the voice. Only available for Gen2 model.

        word_durations_as_original_text : typing.Optional[bool]
            If set to true, the word durations in response will return words as the original input text. (English only)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateSpeechResponse
            Ok

        Examples
        --------
        from murf import Murf

        client = Murf(
            api_key="YOUR_API_KEY",
        )
        client.text_to_speech.generate(
            text="Hello, world!",
            voice_id="en-US-natalie",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/speech/generate",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            json={
                "audioDuration": audio_duration,
                "channelType": channel_type,
                "encodeAsBase64": encode_as_base_64,
                "format": format,
                "modelVersion": model_version,
                "multiNativeLocale": multi_native_locale,
                "pitch": pitch,
                "pronunciationDictionary": convert_and_respect_annotation_metadata(
                    object_=pronunciation_dictionary,
                    annotation=typing.Dict[str, PronunciationDetail],
                    direction="write",
                ),
                "rate": rate,
                "sampleRate": sample_rate,
                "style": style,
                "text": text,
                "variation": variation,
                "voiceId": voice_id,
                "wordDurationsAsOriginalText": word_durations_as_original_text,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GenerateSpeechResponse,
                    construct_type(
                        type_=GenerateSpeechResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def stream(
        self,
        *,
        text: str,
        voice_id: str,
        channel_type: typing.Optional[str] = OMIT,
        format: typing.Optional[str] = OMIT,
        multi_native_locale: typing.Optional[str] = OMIT,
        pitch: typing.Optional[int] = OMIT,
        pronunciation_dictionary: typing.Optional[typing.Dict[str, PronunciationDetail]] = OMIT,
        rate: typing.Optional[int] = OMIT,
        sample_rate: typing.Optional[float] = OMIT,
        style: typing.Optional[str] = OMIT,
        variation: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[bytes]:
        """
        Returns a streaming output of generated audio

        Parameters
        ----------
        text : str
            The text that is to be synthesised. e.g. 'Hello there [pause 1s] friend'

        voice_id : str
            Use the GET /v1/speech/voices API to find supported voiceIds. You can use either the voiceId (e.g. en-US-natalie) or just the voice actor's name (e.g. natalie).

        channel_type : typing.Optional[str]
            Valid values: STEREO, MONO

        format : typing.Optional[str]
            Format of the generated audio file. Valid values: MP3, WAV, PCM

        multi_native_locale : typing.Optional[str]
            Specifies the language for the generated audio, enabling a voice to speak in multiple languages natively. Only available in the Gen2 model.
            Valid values: "en-US", "en-UK", "es-ES", etc. Use the GET /v1/speech/voices endpoint to retrieve the list of available voices and languages.

        pitch : typing.Optional[int]
            Pitch of the voiceover

        pronunciation_dictionary : typing.Optional[typing.Dict[str, PronunciationDetail]]
            An object used to define custom pronunciations.

             Example 1: {"live":{"type": "IPA", "pronunciation": "laÉªv"}}.

             Example 2: {"2022":{"type": "SAY_AS", "pronunciation": "twenty twenty two"}}

        rate : typing.Optional[int]
            Speed of the voiceover

        sample_rate : typing.Optional[float]
            Valid values are 8000, 24000, 44100, 48000

        style : typing.Optional[str]
            The voice style to be used for voiceover generation.

        variation : typing.Optional[int]
            Higher values will add more variation in terms of Pause, Pitch, and Speed to the voice. Only available for Gen2 model.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Yields
        ------
        typing.Iterator[bytes]
            Ok

        Examples
        --------
        from murf import Murf

        client = Murf(
            api_key="YOUR_API_KEY",
        )
        client.text_to_speech.stream()
        """
        with self._client_wrapper.httpx_client.stream(
            "v1/speech/stream",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            json={
                "channelType": channel_type,
                "format": format,
                "multiNativeLocale": multi_native_locale,
                "pitch": pitch,
                "pronunciationDictionary": convert_and_respect_annotation_metadata(
                    object_=pronunciation_dictionary,
                    annotation=typing.Dict[str, PronunciationDetail],
                    direction="write",
                ),
                "rate": rate,
                "sampleRate": sample_rate,
                "style": style,
                "text": text,
                "variation": variation,
                "voiceId": voice_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _chunk_size = request_options.get("chunk_size", None) if request_options is not None else None
                    for _chunk in _response.iter_bytes(chunk_size=_chunk_size):
                        yield _chunk
                    return
                _response.read()
                if _response.status_code == 400:
                    raise BadRequestError(
                        typing.cast(
                            typing.Optional[typing.Any],
                            construct_type(
                                type_=typing.Optional[typing.Any],  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                if _response.status_code == 402:
                    raise PaymentRequiredError(
                        typing.cast(
                            typing.Optional[typing.Any],
                            construct_type(
                                type_=typing.Optional[typing.Any],  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                if _response.status_code == 403:
                    raise ForbiddenError(
                        typing.cast(
                            typing.Optional[typing.Any],
                            construct_type(
                                type_=typing.Optional[typing.Any],  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                if _response.status_code == 500:
                    raise InternalServerError(
                        typing.cast(
                            typing.Optional[typing.Any],
                            construct_type(
                                type_=typing.Optional[typing.Any],  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                if _response.status_code == 503:
                    raise ServiceUnavailableError(
                        typing.cast(
                            typing.Optional[typing.Any],
                            construct_type(
                                type_=typing.Optional[typing.Any],  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_voices(
        self, *, token: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ApiVoice]:
        """
        Returns a list of available voices for speech synthesis

        Parameters
        ----------
        token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApiVoice]
            Ok

        Examples
        --------
        from murf import Murf

        client = Murf(
            api_key="YOUR_API_KEY",
        )
        client.text_to_speech.get_voices()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/speech/voices",
            base_url=self._client_wrapper.get_environment().base,
            method="GET",
            headers={
                "token": str(token) if token is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ApiVoice],
                    construct_type(
                        type_=typing.List[ApiVoice],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTextToSpeechClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def generate(
        self,
        *,
        text: str,
        voice_id: str,
        audio_duration: typing.Optional[float] = OMIT,
        channel_type: typing.Optional[str] = OMIT,
        encode_as_base_64: typing.Optional[bool] = OMIT,
        format: typing.Optional[str] = OMIT,
        model_version: typing.Optional[typing.Literal["GEN2"]] = OMIT,
        multi_native_locale: typing.Optional[str] = OMIT,
        pitch: typing.Optional[int] = OMIT,
        pronunciation_dictionary: typing.Optional[typing.Dict[str, PronunciationDetail]] = OMIT,
        rate: typing.Optional[int] = OMIT,
        sample_rate: typing.Optional[float] = OMIT,
        style: typing.Optional[str] = OMIT,
        variation: typing.Optional[int] = OMIT,
        word_durations_as_original_text: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateSpeechResponse:
        """
        Returns a url to the generated audio file along with other associated properties.

        Parameters
        ----------
        text : str
            The text that is to be synthesised. e.g. 'Hello there [pause 1s] friend'

        voice_id : str
            Use the GET /v1/speech/voices API to find supported voiceIds. You can use either the voiceId (e.g. en-US-natalie) or just the voice actor's name (e.g. natalie).

        audio_duration : typing.Optional[float]
            This parameter allows specifying the duration (in seconds) for the generated audio. If the value is 0, this parameter will be ignored. Only available for Gen2 model.

        channel_type : typing.Optional[str]
            Valid values: STEREO, MONO

        encode_as_base_64 : typing.Optional[bool]
            Set to true to receive audio in response as a Base64 encoded string instead of a url. This enables zero retention of audio data on Murf's servers.

        format : typing.Optional[str]
            Format of the generated audio file. Valid values: MP3, WAV, FLAC, ALAW, ULAW, PCM, OGG

        model_version : typing.Optional[typing.Literal["GEN2"]]
            Valid values: GEN2. Audio will be generated using the new and advanced GEN2 model. Outputs from GEN2 sound more natural and high-quality compared to earlier models.

        multi_native_locale : typing.Optional[str]
            Specifies the language for the generated audio, enabling a voice to speak in multiple languages natively. Only available in the Gen2 model.
            Valid values: "en-US", "en-UK", "es-ES", etc. Use the GET /v1/speech/voices endpoint to retrieve the list of available voices and languages.

        pitch : typing.Optional[int]
            Pitch of the voiceover

        pronunciation_dictionary : typing.Optional[typing.Dict[str, PronunciationDetail]]
            An object used to define custom pronunciations.

             Example 1: {"live":{"type": "IPA", "pronunciation": "laÉªv"}}.

             Example 2: {"2022":{"type": "SAY_AS", "pronunciation": "twenty twenty two"}}

        rate : typing.Optional[int]
            Speed of the voiceover

        sample_rate : typing.Optional[float]
            Valid values are 8000, 24000, 44100, 48000

        style : typing.Optional[str]
            The voice style to be used for voiceover generation.

        variation : typing.Optional[int]
            Higher values will add more variation in terms of Pause, Pitch, and Speed to the voice. Only available for Gen2 model.

        word_durations_as_original_text : typing.Optional[bool]
            If set to true, the word durations in response will return words as the original input text. (English only)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateSpeechResponse
            Ok

        Examples
        --------
        import asyncio

        from murf import AsyncMurf

        client = AsyncMurf(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.text_to_speech.generate(
                text="Hello, world!",
                voice_id="en-US-natalie",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/speech/generate",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            json={
                "audioDuration": audio_duration,
                "channelType": channel_type,
                "encodeAsBase64": encode_as_base_64,
                "format": format,
                "modelVersion": model_version,
                "multiNativeLocale": multi_native_locale,
                "pitch": pitch,
                "pronunciationDictionary": convert_and_respect_annotation_metadata(
                    object_=pronunciation_dictionary,
                    annotation=typing.Dict[str, PronunciationDetail],
                    direction="write",
                ),
                "rate": rate,
                "sampleRate": sample_rate,
                "style": style,
                "text": text,
                "variation": variation,
                "voiceId": voice_id,
                "wordDurationsAsOriginalText": word_durations_as_original_text,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GenerateSpeechResponse,
                    construct_type(
                        type_=GenerateSpeechResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def stream(
        self,
        *,
        text: str,
        voice_id: str,
        channel_type: typing.Optional[str] = OMIT,
        format: typing.Optional[str] = OMIT,
        multi_native_locale: typing.Optional[str] = OMIT,
        pitch: typing.Optional[int] = OMIT,
        pronunciation_dictionary: typing.Optional[typing.Dict[str, PronunciationDetail]] = OMIT,
        rate: typing.Optional[int] = OMIT,
        sample_rate: typing.Optional[float] = OMIT,
        style: typing.Optional[str] = OMIT,
        variation: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[bytes]:
        """
        Returns a streaming output of generated audio

        Parameters
        ----------
        text : str
            The text that is to be synthesised. e.g. 'Hello there [pause 1s] friend'

        voice_id : str
            Use the GET /v1/speech/voices API to find supported voiceIds. You can use either the voiceId (e.g. en-US-natalie) or just the voice actor's name (e.g. natalie).

        channel_type : typing.Optional[str]
            Valid values: STEREO, MONO

        format : typing.Optional[str]
            Format of the generated audio file. Valid values: MP3, WAV, PCM

        multi_native_locale : typing.Optional[str]
            Specifies the language for the generated audio, enabling a voice to speak in multiple languages natively. Only available in the Gen2 model.
            Valid values: "en-US", "en-UK", "es-ES", etc. Use the GET /v1/speech/voices endpoint to retrieve the list of available voices and languages.

        pitch : typing.Optional[int]
            Pitch of the voiceover

        pronunciation_dictionary : typing.Optional[typing.Dict[str, PronunciationDetail]]
            An object used to define custom pronunciations.

             Example 1: {"live":{"type": "IPA", "pronunciation": "laÉªv"}}.

             Example 2: {"2022":{"type": "SAY_AS", "pronunciation": "twenty twenty two"}}

        rate : typing.Optional[int]
            Speed of the voiceover

        sample_rate : typing.Optional[float]
            Valid values are 8000, 24000, 44100, 48000

        style : typing.Optional[str]
            The voice style to be used for voiceover generation.

        variation : typing.Optional[int]
            Higher values will add more variation in terms of Pause, Pitch, and Speed to the voice. Only available for Gen2 model.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Yields
        ------
        typing.AsyncIterator[bytes]
            Ok

        Examples
        --------
        import asyncio

        from murf import AsyncMurf

        client = AsyncMurf(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.text_to_speech.stream()


        asyncio.run(main())
        """
        async with self._client_wrapper.httpx_client.stream(
            "v1/speech/stream",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            json={
                "channelType": channel_type,
                "format": format,
                "multiNativeLocale": multi_native_locale,
                "pitch": pitch,
                "pronunciationDictionary": convert_and_respect_annotation_metadata(
                    object_=pronunciation_dictionary,
                    annotation=typing.Dict[str, PronunciationDetail],
                    direction="write",
                ),
                "rate": rate,
                "sampleRate": sample_rate,
                "style": style,
                "text": text,
                "variation": variation,
                "voiceId": voice_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _chunk_size = request_options.get("chunk_size", None) if request_options is not None else None
                    async for _chunk in _response.aiter_bytes(chunk_size=_chunk_size):
                        yield _chunk
                    return
                await _response.aread()
                if _response.status_code == 400:
                    raise BadRequestError(
                        typing.cast(
                            typing.Optional[typing.Any],
                            construct_type(
                                type_=typing.Optional[typing.Any],  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                if _response.status_code == 402:
                    raise PaymentRequiredError(
                        typing.cast(
                            typing.Optional[typing.Any],
                            construct_type(
                                type_=typing.Optional[typing.Any],  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                if _response.status_code == 403:
                    raise ForbiddenError(
                        typing.cast(
                            typing.Optional[typing.Any],
                            construct_type(
                                type_=typing.Optional[typing.Any],  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                if _response.status_code == 500:
                    raise InternalServerError(
                        typing.cast(
                            typing.Optional[typing.Any],
                            construct_type(
                                type_=typing.Optional[typing.Any],  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                if _response.status_code == 503:
                    raise ServiceUnavailableError(
                        typing.cast(
                            typing.Optional[typing.Any],
                            construct_type(
                                type_=typing.Optional[typing.Any],  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_voices(
        self, *, token: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ApiVoice]:
        """
        Returns a list of available voices for speech synthesis

        Parameters
        ----------
        token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApiVoice]
            Ok

        Examples
        --------
        import asyncio

        from murf import AsyncMurf

        client = AsyncMurf(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.text_to_speech.get_voices()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/speech/voices",
            base_url=self._client_wrapper.get_environment().base,
            method="GET",
            headers={
                "token": str(token) if token is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ApiVoice],
                    construct_type(
                        type_=typing.List[ApiVoice],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

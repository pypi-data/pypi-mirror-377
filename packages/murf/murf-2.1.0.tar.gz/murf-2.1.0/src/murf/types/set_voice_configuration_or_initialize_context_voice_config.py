# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .set_voice_configuration_or_initialize_context_voice_config_pronunciation_dictionary_value import (
    SetVoiceConfigurationOrInitializeContextVoiceConfigPronunciationDictionaryValue,
)
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class SetVoiceConfigurationOrInitializeContextVoiceConfig(UncheckedBaseModel):
    voice_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Voice ID to use for TTS. Defaults to "en-US-daniel"
    """

    style: typing.Optional[str] = pydantic.Field(default=None)
    """
    The style of speech (optional)
    """

    rate: typing.Optional[int] = pydantic.Field(default=None)
    """
    Speech rate (optional)
    """

    pitch: typing.Optional[int] = pydantic.Field(default=None)
    """
    Speech pitch (optional)
    """

    pronunciation_dictionary: typing.Optional[
        typing.Dict[str, SetVoiceConfigurationOrInitializeContextVoiceConfigPronunciationDictionaryValue]
    ] = pydantic.Field(default=None)
    """
    A map of words to their pronunciation details. Example 1: {"live":{"type": "IPA", "pronunciation": "laÉªv"}}.
    """

    variation: typing.Optional[int] = pydantic.Field(default=None)
    """
    Higher values will add more variation in terms of Pause, Pitch, and Speed to the voice. Only available for Gen2 model.
    """

    multi_native_locale: typing.Optional[str] = pydantic.Field(default=None)
    """
    Specifies the language for the generated audio, enabling a voice to speak in multiple languages natively. Only available in the Gen2 model. Valid values: "en-US", "en-UK", "es-ES", etc. Use the GET /v1/speed/voices endpoint to retrieve the list of available voices and languages.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

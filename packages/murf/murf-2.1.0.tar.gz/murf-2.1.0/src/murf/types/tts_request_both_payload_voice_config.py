# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
import typing
from .tts_request_both_payload_voice_config_pronunciation_dictionary import (
    TtsRequestBothPayloadVoiceConfigPronunciationDictionary,
)
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class TtsRequestBothPayloadVoiceConfig(UncheckedBaseModel):
    voice_id: typing_extensions.Annotated[str, FieldMetadata(alias="voiceId")] = pydantic.Field()
    """
    Voice ID to use for TTS
    """

    style: typing.Optional[str] = pydantic.Field(default=None)
    """
    The style of speech (optional)
    """

    rate: typing.Optional[int] = pydantic.Field(default=None)
    """
    Speech rate (optional)
    """

    pitch: typing.Optional[int] = pydantic.Field(default=None)
    """
    Speech pitch (optional)
    """

    pronunciation_dictionary: typing.Optional[TtsRequestBothPayloadVoiceConfigPronunciationDictionary] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .. import core
from ..core.request_options import RequestOptions
from ..types.speech_to_speech_response import SpeechToSpeechResponse
from ..core.unchecked_base_model import construct_type
from ..errors.bad_request_error import BadRequestError
from ..errors.payment_required_error import PaymentRequiredError
from ..errors.forbidden_error import ForbiddenError
from ..errors.internal_server_error import InternalServerError
from ..errors.service_unavailable_error import ServiceUnavailableError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VoiceChangerClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def convert(
        self,
        *,
        voice_id: str,
        audio_duration: typing.Optional[float] = OMIT,
        channel_type: typing.Optional[str] = OMIT,
        encode_output_as_base_64: typing.Optional[bool] = OMIT,
        file: typing.Optional[core.File] = OMIT,
        file_url: typing.Optional[str] = OMIT,
        format: typing.Optional[str] = OMIT,
        multi_native_locale: typing.Optional[str] = OMIT,
        pitch: typing.Optional[int] = OMIT,
        pronunciation_dictionary: typing.Optional[str] = OMIT,
        rate: typing.Optional[int] = OMIT,
        retain_accent: typing.Optional[bool] = OMIT,
        retain_prosody: typing.Optional[bool] = OMIT,
        return_transcription: typing.Optional[bool] = OMIT,
        sample_rate: typing.Optional[float] = OMIT,
        style: typing.Optional[str] = OMIT,
        transcription: typing.Optional[str] = OMIT,
        variation: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SpeechToSpeechResponse:
        """
        Returns a url to the generated audio file along with other associated properties.

        Parameters
        ----------
        voice_id : str
            Use the GET /v1/speech/voices API to find supported voiceIds. You can use either the voiceId (e.g. en-US-natalie) or just the voice actor's name (e.g. natalie).

        audio_duration : typing.Optional[float]
            This parameter allows specifying the duration (in seconds) for the generated audio. If the value is 0, this parameter will be ignored. Only available for Gen2 model.

        channel_type : typing.Optional[str]
            Valid values: STEREO, MONO

        encode_output_as_base_64 : typing.Optional[bool]
            Set to true to receive audio in response as a Base64 encoded string along with a url.

        file : typing.Optional[core.File]
            See core.File for more documentation

        file_url : typing.Optional[str]

        format : typing.Optional[str]
            Format of the generated audio file. Valid values: MP3, WAV, FLAC, ALAW, ULAW

        multi_native_locale : typing.Optional[str]
            Specifies the language for the generated audio, enabling a voice to speak in multiple languages natively. Only available in the Gen2 model.
            Valid values: "en-US", "en-UK", "es-ES", etc.

            Use the GET /v1/speech/voices endpoint to retrieve the list of available voices and languages.

        pitch : typing.Optional[int]
            Pitch of the voiceover

        pronunciation_dictionary : typing.Optional[str]
            A JSON string that defines custom pronunciations for specific words or phrases. Each key is a word or phrase, and its value is an object with `type` and `pronunciation`.

            Example 1: '{"live": {"type": "IPA", "pronunciation": "laÉªv"}}'

            Example 2: '{"2022": {"type": "SAY_AS", "pronunciation": "twenty twenty two"}}'

        rate : typing.Optional[int]
            Speed of the voiceover

        retain_accent : typing.Optional[bool]
            Set to true to retain the original accent of the speaker during voice generation.

        retain_prosody : typing.Optional[bool]
            Indicates whether to retain the original prosody (intonation, rhythm, and stress) of the input voice in the generated output.

        return_transcription : typing.Optional[bool]
            Set to true to include a textual transcription of the generated audio in the response.

        sample_rate : typing.Optional[float]
            Valid values are 8000, 24000, 44100, 48000

        style : typing.Optional[str]
            The voice style to be used for voiceover generation.

        transcription : typing.Optional[str]
            This parameter allows specifying a transcription of the audio clip, which will then be used as input for the voice changer

        variation : typing.Optional[int]
            Higher values will add more variation in terms of Pause, Pitch, and Speed to the voice. Only available for Gen2 model.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpeechToSpeechResponse
            Ok

        Examples
        --------
        from murf import Murf

        client = Murf(
            api_key="YOUR_API_KEY",
        )
        client.voice_changer.convert(
            voice_id="voice_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/voice-changer/convert",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            data={
                "audio_duration": audio_duration,
                "channel_type": channel_type,
                "encode_output_as_base64": encode_output_as_base_64,
                "file_url": file_url,
                "format": format,
                "multi_native_locale": multi_native_locale,
                "pitch": pitch,
                "pronunciation_dictionary": pronunciation_dictionary,
                "rate": rate,
                "retain_accent": retain_accent,
                "retain_prosody": retain_prosody,
                "return_transcription": return_transcription,
                "sample_rate": sample_rate,
                "style": style,
                "transcription": transcription,
                "variation": variation,
                "voice_id": voice_id,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SpeechToSpeechResponse,
                    construct_type(
                        type_=SpeechToSpeechResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncVoiceChangerClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def convert(
        self,
        *,
        voice_id: str,
        audio_duration: typing.Optional[float] = OMIT,
        channel_type: typing.Optional[str] = OMIT,
        encode_output_as_base_64: typing.Optional[bool] = OMIT,
        file: typing.Optional[core.File] = OMIT,
        file_url: typing.Optional[str] = OMIT,
        format: typing.Optional[str] = OMIT,
        multi_native_locale: typing.Optional[str] = OMIT,
        pitch: typing.Optional[int] = OMIT,
        pronunciation_dictionary: typing.Optional[str] = OMIT,
        rate: typing.Optional[int] = OMIT,
        retain_accent: typing.Optional[bool] = OMIT,
        retain_prosody: typing.Optional[bool] = OMIT,
        return_transcription: typing.Optional[bool] = OMIT,
        sample_rate: typing.Optional[float] = OMIT,
        style: typing.Optional[str] = OMIT,
        transcription: typing.Optional[str] = OMIT,
        variation: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SpeechToSpeechResponse:
        """
        Returns a url to the generated audio file along with other associated properties.

        Parameters
        ----------
        voice_id : str
            Use the GET /v1/speech/voices API to find supported voiceIds. You can use either the voiceId (e.g. en-US-natalie) or just the voice actor's name (e.g. natalie).

        audio_duration : typing.Optional[float]
            This parameter allows specifying the duration (in seconds) for the generated audio. If the value is 0, this parameter will be ignored. Only available for Gen2 model.

        channel_type : typing.Optional[str]
            Valid values: STEREO, MONO

        encode_output_as_base_64 : typing.Optional[bool]
            Set to true to receive audio in response as a Base64 encoded string along with a url.

        file : typing.Optional[core.File]
            See core.File for more documentation

        file_url : typing.Optional[str]

        format : typing.Optional[str]
            Format of the generated audio file. Valid values: MP3, WAV, FLAC, ALAW, ULAW

        multi_native_locale : typing.Optional[str]
            Specifies the language for the generated audio, enabling a voice to speak in multiple languages natively. Only available in the Gen2 model.
            Valid values: "en-US", "en-UK", "es-ES", etc.

            Use the GET /v1/speech/voices endpoint to retrieve the list of available voices and languages.

        pitch : typing.Optional[int]
            Pitch of the voiceover

        pronunciation_dictionary : typing.Optional[str]
            A JSON string that defines custom pronunciations for specific words or phrases. Each key is a word or phrase, and its value is an object with `type` and `pronunciation`.

            Example 1: '{"live": {"type": "IPA", "pronunciation": "laÉªv"}}'

            Example 2: '{"2022": {"type": "SAY_AS", "pronunciation": "twenty twenty two"}}'

        rate : typing.Optional[int]
            Speed of the voiceover

        retain_accent : typing.Optional[bool]
            Set to true to retain the original accent of the speaker during voice generation.

        retain_prosody : typing.Optional[bool]
            Indicates whether to retain the original prosody (intonation, rhythm, and stress) of the input voice in the generated output.

        return_transcription : typing.Optional[bool]
            Set to true to include a textual transcription of the generated audio in the response.

        sample_rate : typing.Optional[float]
            Valid values are 8000, 24000, 44100, 48000

        style : typing.Optional[str]
            The voice style to be used for voiceover generation.

        transcription : typing.Optional[str]
            This parameter allows specifying a transcription of the audio clip, which will then be used as input for the voice changer

        variation : typing.Optional[int]
            Higher values will add more variation in terms of Pause, Pitch, and Speed to the voice. Only available for Gen2 model.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpeechToSpeechResponse
            Ok

        Examples
        --------
        import asyncio

        from murf import AsyncMurf

        client = AsyncMurf(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.voice_changer.convert(
                voice_id="voice_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/voice-changer/convert",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            data={
                "audio_duration": audio_duration,
                "channel_type": channel_type,
                "encode_output_as_base64": encode_output_as_base_64,
                "file_url": file_url,
                "format": format,
                "multi_native_locale": multi_native_locale,
                "pitch": pitch,
                "pronunciation_dictionary": pronunciation_dictionary,
                "rate": rate,
                "retain_accent": retain_accent,
                "retain_prosody": retain_prosody,
                "return_transcription": return_transcription,
                "sample_rate": sample_rate,
                "style": style,
                "transcription": transcription,
                "variation": variation,
                "voice_id": voice_id,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SpeechToSpeechResponse,
                    construct_type(
                        type_=SpeechToSpeechResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

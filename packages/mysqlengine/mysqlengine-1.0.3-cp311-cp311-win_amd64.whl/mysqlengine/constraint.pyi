from typing_extensions import Self
from typing import Any, Iterator, Literal
from sqlcycli.charset import Charset
from sqlcycli.aio.pool import Pool
from sqlcycli.sqlfunc import SQLFunction
from mysqlengine.table import Table
from mysqlengine.column import Column
from mysqlengine.element import Element, Elements, Metadata, Logs

# Constraint -------------------------------------------------------------------------------------------------
class Constraint(Element):
    def __init__(
        self,
        el_type: Literal["UNIQUE KEY", "PRIMARY KEY", "FOREIGN KEY", "CHECK"],
    ): ...
    # Property
    @property
    def symbol(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def db_name(self) -> str: ...
    @property
    def tb_name(self) -> str: ...
    @property
    def tb_qualified_name(self) -> str: ...
    @property
    def enforced(self) -> bool: ...
    # Sync
    def Initialize(self, force: bool = False) -> Logs: ...
    def Add(self) -> Logs: ...
    def Exists(self) -> bool: ...
    def Drop(self) -> Logs: ...
    def Alter(self, *args, **kwargs) -> Logs: ...
    def ShowMetadata(self) -> ConstraintMetadata: ...
    def ShowConstraintSymbols(self) -> tuple[str]: ...
    def SyncFromRemote(self) -> Logs: ...
    def SyncToRemote(self) -> Logs: ...
    # Async
    async def aioInitialize(self, force: bool = False) -> Logs: ...
    async def aioAdd(self) -> Logs: ...
    async def aioExists(self) -> bool: ...
    async def aioDrop(self) -> Logs: ...
    async def aioAlter(self, *args, **kwargs) -> Logs: ...
    async def aioShowMetadata(self) -> ConstraintMetadata: ...
    async def aioShowConstraintSymbols(self) -> tuple[str]: ...
    async def aioSyncFromRemote(self) -> Logs: ...
    async def aioSyncToRemote(self) -> Logs: ...
    # Setter
    def setup(
        self,
        tb_name: str,
        db_name: str,
        charset: str | Charset,
        collate: str | None,
        pool: Pool,
    ) -> bool: ...
    def set_name(self, name: str): ...
    # Copy
    def copy(self) -> Self: ...

class UniqueKey(Constraint):
    def __init__(
        self,
        *columns: str,
        index_type: Literal["BTREE", "HASH"] | None = None,
        comment: str | None = None,
        visible: bool = True,
    ): ...
    # Property
    @property
    def columns(self) -> tuple[str]: ...
    @property
    def index_type(self) -> str | None: ...
    @property
    def comment(self) -> str | None: ...
    @property
    def visible(self) -> bool: ...
    # Sync
    def Alter(
        self,
        columns: str | Column | list | tuple | None = None,
        index_type: Literal["BTREE", "HASH"] | None = None,
        comment: str | None = None,
        visible: bool | None = None,
    ) -> Logs: ...
    def SetVisible(self, visible: bool) -> Logs: ...
    # Async
    async def aioAlter(
        self,
        columns: str | Column | list | tuple | None = None,
        index_type: Literal["BTREE", "HASH"] | None = None,
        comment: str | None = None,
        visible: bool | None = None,
    ) -> Logs: ...
    async def aioSetVisible(self, visible: bool) -> Logs: ...

class PrimaryKey(UniqueKey):
    def __init__(
        self,
        *columns: str,
        index_type: Literal["BTREE", "HASH"] | None = None,
        comment: str | None = None,
    ): ...
    # Property
    @property
    def columns(self) -> tuple[str]: ...
    @property
    def visible(self) -> bool: ...
    # Sync
    def Alter(
        self,
        columns: str | Column | list | tuple | None = None,
        index_type: Literal["BTREE", "HASH"] | None = None,
        comment: str | None = None,
    ) -> Logs: ...
    def SetVisible(self, visible: bool) -> Logs: ...
    # Async
    async def aioAlter(
        self,
        columns: str | Column | list | tuple | None = None,
        index_type: Literal["BTREE", "HASH"] | None = None,
        comment: str | None = None,
    ) -> Logs: ...
    async def aioSetVisible(self, visible: bool) -> Logs: ...

class ForeignKey(Constraint):
    def __init__(
        self,
        columns: str | tuple[str] | list[str],
        reference_table: str,
        reference_columns: str | tuple[str] | list[str],
        on_delete: (
            Literal["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"] | None
        ) = None,
        on_update: (
            Literal["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"] | None
        ) = None,
    ): ...
    # Property
    @property
    def columns(self) -> tuple[str]: ...
    @property
    def reference_table(self) -> str: ...
    @property
    def reference_columns(self) -> tuple[str]: ...
    @property
    def on_delete(self) -> str | None: ...
    @property
    def on_update(self) -> str | None: ...
    # Sync
    def Alter(
        self,
        columns: str | Column | list | tuple | None = None,
        reference_table: str | Table | None = None,
        reference_columns: str | Column | list | tuple | None = None,
        on_delete: (
            Literal["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"] | None
        ) = None,
        on_update: (
            Literal["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"] | None
        ) = None,
    ) -> Logs: ...
    # Async
    async def aioAlter(
        self,
        columns: str | Column | list | tuple | None = None,
        reference_table: str | Table | None = None,
        reference_columns: str | Column | list | tuple | None = None,
        on_delete: (
            Literal["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"] | None
        ) = None,
        on_update: (
            Literal["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"] | None
        ) = None,
    ) -> Logs: ...

class Check(Constraint):
    def __init__(self, expression: str | SQLFunction, enforced: bool = True): ...
    # Property
    @property
    def expression(self) -> tuple[str]: ...
    # Sync
    def Alter(
        self,
        expression: str | SQLFunction | None = None,
        enforced: bool | None = None,
    ) -> Logs: ...
    def SetEnforced(self, enforced: bool) -> Logs: ...
    # Async
    async def aioAlter(
        self,
        expression: str | SQLFunction | None = None,
        enforced: bool | None = None,
    ) -> Logs: ...
    async def aioSetEnforced(self, enforced: bool) -> Logs: ...

# Constraints ------------------------------------------------------------------------------------------------
class Constraints(Elements):
    def __init__(self, *constraints: Constraint): ...
    # Property
    @property
    def symbols(self) -> tuple[str]: ...
    @property
    def elements(self) -> tuple[Constraint]: ...
    # Collection
    def search_name(
        self,
        *names: str | Constraint,
        exact: bool = True,
    ) -> Constraints: ...
    def search_type(
        self,
        *types: str | type | Constraint,
        exact: bool = True,
    ) -> Constraints: ...
    def filter(self, *elements: str | Constraint | Constraints) -> Constraints: ...
    def issubset(self, *elements: str | Constraint | Constraints) -> bool: ...
    def add(self, element: Constraint) -> bool: ...
    def remove(self, element: str | Constraint) -> bool: ...
    # Setter
    def setup(
        self,
        tb_name: str,
        db_name: str,
        charset: str | Charset,
        collate: str | None,
        pool: Pool,
    ) -> bool: ...
    # Accessors
    def values(self) -> tuple[Constraint]: ...
    def items(self) -> tuple[tuple[str, Constraint]]: ...
    def get(self, key: str | Constraint, default: Any = None) -> Constraint | Any: ...
    # Copy
    def copy(self) -> Self: ...
    # Special Methods
    def __getitem__(self, key: str | Constraint) -> Constraint: ...
    def __contains__(self, key: str | Constraint) -> bool: ...
    def __iter__(self) -> Iterator[Constraint]: ...

# Metadata ---------------------------------------------------------------------------------------------------
class ConstraintMetadata(Metadata):
    def __init__(self, meta: dict, size: int): ...
    # Property
    @property
    def catelog_name(self) -> str: ...
    @property
    def db_name(self) -> str: ...
    @property
    def tb_name(self) -> str: ...
    @property
    def constraint_name(self) -> str: ...
    @property
    def constraint_type(self) -> str: ...
    @property
    def enforced(self) -> bool: ...
    @property
    def engine_attribute(self) -> str | None: ...
    @property
    def secondary_engine_attribute(self) -> str | None: ...
    # . Unique/Primary Key
    @property
    def index_type(self) -> str: ...
    @property
    def unique(self) -> bool: ...
    @property
    def comment(self) -> str | None: ...
    @property
    def visible(self) -> bool: ...
    @property
    def columns(self) -> tuple[str]: ...
    # . Foreign Key
    @property
    def reference_table(self) -> str: ...
    @property
    def reference_columns(self) -> tuple[str]: ...
    @property
    def unique_constraint(self) -> str: ...
    @property
    def on_delete(self) -> str: ...
    @property
    def on_update(self) -> str: ...
    # . Check
    @property
    def expression(self) -> str: ...

class UniPriKeyMetadata(ConstraintMetadata):
    def __init__(self, meta: tuple[dict]): ...

class ForeignKeyMetadata(ConstraintMetadata):
    def __init__(self, meta: tuple[dict]): ...

class CheckMetadata(ConstraintMetadata):
    def __init__(self, meta: dict): ...

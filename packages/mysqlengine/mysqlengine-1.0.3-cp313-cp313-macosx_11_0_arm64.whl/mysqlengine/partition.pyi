from typing import Any, Iterator
from typing_extensions import Self
from sqlcycli.charset import Charset
from sqlcycli.aio.pool import Pool
from sqlcycli.sqlfunc import SQLFunction
from mysqlengine.element import Element, Elements, Metadata, Logs

# Partitioning -----------------------------------------------------------------------------------------------
class Partitioning(Element):
    def __init__(self, *expressions: str | SQLFunction): ...
    # Property
    @property
    def db_name(self) -> str: ...
    @property
    def tb_name(self) -> str: ...
    @property
    def tb_qualified_name(self) -> str: ...
    @property
    def partitioning_method(self) -> str | None: ...
    @property
    def partitioning_expression(self) -> str: ...
    @property
    def subpartitioning_method(self) -> str | None: ...
    @property
    def subpartitioning_expression(self) -> str | None: ...
    @property
    def partitions(self) -> Partitions: ...
    # Configure
    def by_range(self, *partitions: Partition, columns: bool = False) -> Self: ...
    def by_list(self, *partitions: Partition, columns: bool = False) -> Self: ...
    def by_hash(self, partitions: int, linear: bool = False) -> Self: ...
    def by_key(self, partitions: int, linear: bool = False) -> Self: ...
    def subpartition_by_hash(
        self,
        subpartitions: int,
        *expressions: str | SQLFunction,
        linear: bool = False,
    ) -> Self: ...
    def subpartition_by_key(
        self,
        subpartitions: int,
        *expressions: str | SQLFunction,
        linear: bool = False,
    ) -> Self: ...
    # Sync
    def Initialize(self, force: bool = False) -> Logs: ...
    def Create(self) -> Logs: ...
    def Exists(self) -> bool: ...
    def Remove(self) -> Logs: ...
    def ShowMetadata(self) -> PartitioningMetadata: ...
    def ShowPartitionNames(self) -> tuple[str]: ...
    def ShowPartitionRows(self) -> dict[str, int]: ...
    def ShowSubpartitionNames(self) -> tuple[str]: ...
    def ShowSubpartitionRows(self) -> dict[str, int]: ...
    def SyncFromRemote(self) -> Logs: ...
    def SyncToRemote(self) -> Logs: ...
    def AddPartition(self, *partitions: int | Partition) -> Logs: ...
    def ExistsPartition(self, partition: str | Partition) -> bool: ...
    def TruncatePartition(self, *partitions: str | Partition) -> Logs: ...
    def DropPartition(self, *partitions: str | Partition) -> Logs: ...
    def EmptyPartition(self, partition: str | Partition) -> bool: ...
    def ReorganizePartition(
        self,
        old_partitions: str | Partition | list | tuple,
        *new_partitions: Partition,
    ) -> Logs: ...
    def CoalescePartition(self, num: int) -> Logs: ...
    def RebuildPartition(self, *partitions: str | Partition) -> Logs: ...
    def AnalyzePartition(self, *partitions: str | Partition) -> tuple[dict]: ...
    def CheckPartition(self, *partitions: str | Partition) -> tuple[dict]: ...
    def OptimizePartition(self, *partitions: str | Partition) -> tuple[dict]: ...
    def RepairPartition(self, *partitions: str | Partition) -> tuple[dict]: ...
    # Async
    async def aioInitialize(self, force: bool = False) -> Logs: ...
    async def aioCreate(self) -> Logs: ...
    async def aioExists(self) -> bool: ...
    async def aioRemove(self) -> Logs: ...
    async def aioShowMetadata(self) -> PartitioningMetadata: ...
    async def aioShowPartitionNames(self) -> tuple[str]: ...
    async def aioShowPartitionRows(self) -> dict[str, int]: ...
    async def aioShowSubpartitionNames(self) -> tuple[str]: ...
    async def aioShowSubpartitionRows(self) -> dict[str, int]: ...
    async def aioSyncFromRemote(self) -> Logs: ...
    async def aioSyncToRemote(self) -> Logs: ...
    async def aioAddPartition(self, *partitions: int | Partition) -> Logs: ...
    async def aioExistsPartition(self, partition: str | Partition) -> bool: ...
    async def aioTruncatePartition(self, *partitions: str | Partition) -> Logs: ...
    async def aioDropPartition(self, *partitions: str | Partition) -> Logs: ...
    async def aioEmptyPartition(self, partition: str | Partition) -> bool: ...
    async def aioReorganizePartition(
        self,
        old_partitions: str | Partition | list | tuple,
        *new_partitions: Partition,
    ) -> Logs: ...
    async def aioCoalescePartition(self, num: int) -> Logs: ...
    async def aioRebuildPartition(self, *partitions: str | Partition) -> Logs: ...
    async def aioAnalyzePartition(
        self, *partitions: str | Partition
    ) -> tuple[dict]: ...
    async def aioCheckPartition(self, *partitions: str | Partition) -> tuple[dict]: ...
    async def aioOptimizePartition(
        self, *partitions: str | Partition
    ) -> tuple[dict]: ...
    async def aioRepairPartition(self, *partitions: str | Partition) -> tuple[dict]: ...
    # Setter
    def setup(
        self,
        tb_name: str,
        db_name: str,
        charset: str | Charset,
        collate: str | None,
        pool: Pool,
    ) -> bool: ...
    # Copy
    def copy(self) -> Self: ...
    # Special Methods
    def __getitem__(self, col: str | Partition) -> Partition: ...
    def __contains__(self, col: str | Partition) -> bool: ...
    def __iter__(self) -> Iterator[Partition]: ...

# Partition --------------------------------------------------------------------------------------------------
class Partition(Element):
    def __init__(self, name: str, *values: Any, comment: str | None = None): ...
    # Property
    @property
    def name(self) -> str: ...
    @property
    def values(self) -> Any | None: ...
    @property
    def comment(self) -> str | None: ...
    @property
    def position(self) -> int | None: ...
    @property
    def partitioning_method(self) -> str | None: ...
    @property
    def subpartitioning_method(self) -> str | None: ...
    @property
    def subpartitions(self) -> Partitions | None: ...
    @property
    def is_subpartition(self) -> bool: ...
    # Setter
    def setup(
        self,
        tb_name: str,
        db_name: str,
        charset: str | Charset,
        collate: str | None,
        pool: Pool,
    ) -> bool: ...
    # Copy
    def copy(self) -> Self: ...

# Partitions -------------------------------------------------------------------------------------------------
class Partitions(Elements):
    def __init__(self, *partitions: Partition): ...
    # Property
    @property
    def partitioning_method(self) -> str | None: ...
    @property
    def subpartitioning_method(self) -> str | None: ...
    # Property
    @property
    def elements(self) -> tuple[Partition]: ...
    # Collection
    def search_name(
        self,
        *names: str | Partition,
        exact: bool = True,
    ) -> Partitions: ...
    def search_type(
        self,
        *types: str | type | Partition,
        exact: bool = True,
    ) -> Partitions: ...
    def filter(self, *elements: str | Partition | Partitions) -> Partitions: ...
    def issubset(self, *elements: str | Partition | Partitions) -> bool: ...
    def add(self, element: Partition) -> bool: ...
    def remove(self, element: str | Partition) -> bool: ...
    # Setter
    def setup(
        self,
        tb_name: str,
        db_name: str,
        charset: str | Charset,
        collate: str | None,
        pool: Pool,
    ) -> bool: ...
    # Accessors
    def values(self) -> tuple[Partition]: ...
    def items(self) -> tuple[tuple[str, Partition]]: ...
    def get(self, key: str | Partition, default: Any = None) -> Partition | Any: ...
    # Copy
    def copy(self) -> Self: ...
    # Special Methods
    def __getitem__(self, key: str | Partition) -> Partition: ...
    def __contains__(self, key: str | Partition) -> bool: ...
    def __iter__(self) -> Iterator[Partition]: ...

# Metadata ---------------------------------------------------------------------------------------------------
class PartitioningMetadata(Metadata):
    def __init__(self, meta: tuple[dict]): ...
    # Property -----------------------------------------------------------------------------
    @property
    def catelog_name(self) -> str: ...
    @property
    def db_name(self) -> str: ...
    @property
    def tb_name(self) -> str: ...
    @property
    def partitioning_method(self) -> str: ...
    @property
    def partitioning_expression(self) -> str: ...
    @property
    def subpartitioning_method(self) -> str | None: ...
    @property
    def subpartitioning_expression(self) -> str | None: ...
    @property
    def partitions(self) -> list[dict]: ...
    @property
    def partition_names(self) -> tuple[str]: ...
    @property
    def partition_count(self) -> int: ...
    @property
    def subpartition_names(self) -> tuple[str]: ...
    @property
    def subpartition_count(self) -> int: ...

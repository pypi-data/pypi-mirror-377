from typing_extensions import Self
from typing import Any, Iterator, Literal
from sqlcycli.charset import Charset
from sqlcycli.aio.pool import Pool
from mysqlengine.column import Column
from mysqlengine.element import Element, Elements, Metadata, Logs

# Index ------------------------------------------------------------------------------------------------------
class Index(Element):
    def __init__(
        self,
        *columns: str,
        index_type: Literal["BTREE", "HASH"] | None = None,
        comment: str | None = None,
        visible: bool = True,
    ): ...
    # Property
    @property
    def name(self) -> str: ...
    @property
    def db_name(self) -> str: ...
    @property
    def tb_name(self) -> str: ...
    @property
    def tb_qualified_name(self) -> str: ...
    @property
    def columns(self) -> tuple[str]: ...
    @property
    def index_type(self) -> Literal["BTREE", "HASH"] | None: ...
    @property
    def comment(self) -> str | None: ...
    @property
    def visible(self) -> bool: ...
    # Sync
    def Initialize(self, force: bool = False) -> Logs: ...
    def Add(self) -> Logs: ...
    def Exists(self) -> bool: ...
    def Drop(self) -> Logs: ...
    def Alter(
        self,
        columns: str | Column | list | tuple | None = None,
        index_type: Literal["BTREE", "HASH"] | None = None,
        comment: str | None = None,
        visible: bool | None = None,
    ) -> Logs: ...
    def SetVisible(self, visible: bool) -> Logs: ...
    def ShowMetadata(self) -> IndexMetadata: ...
    def ShowIndexNames(self) -> tuple[str]: ...
    def SyncFromRemote(self) -> Logs: ...
    def SyncToRemote(self) -> Logs: ...
    # Async
    async def aioInitialize(self, force: bool = False) -> Logs: ...
    async def aioAdd(self) -> Logs: ...
    async def aioExists(self) -> bool: ...
    async def aioDrop(self) -> Logs: ...
    async def aioAlter(
        self,
        columns: str | Column | list | tuple | None = None,
        index_type: Literal["BTREE", "HASH"] | None = None,
        comment: str | None = None,
        visible: bool | None = None,
    ) -> Logs: ...
    async def aioSetVisible(self, visible: bool) -> Logs: ...
    async def aioShowMetadata(self) -> IndexMetadata: ...
    async def aioShowIndexNames(self) -> tuple[str]: ...
    async def aioSyncFromRemote(self) -> Logs: ...
    async def aioSyncToRemote(self) -> Logs: ...
    # Setter
    def setup(
        self,
        tb_name: str,
        db_name: str,
        charset: str | Charset,
        collate: str | None,
        pool: Pool,
    ) -> bool: ...
    def set_name(self, name: str): ...
    # Copy
    def copy(self) -> Self: ...

class FullTextIndex(Index):
    def __init__(
        self,
        *columns: str,
        parser: str | None = None,
        comment: str | None = None,
        visible: bool = True,
    ): ...
    # Property
    @property
    def parser(self) -> str | None: ...
    # Sync
    def Alter(
        self,
        columns: str | Column | list | tuple | None = None,
        parser: str | None = None,
        comment: str | None = None,
        visible: bool | None = None,
    ) -> Logs: ...
    # Async
    async def aioAlter(
        self,
        columns: str | Column | list | tuple | None = None,
        parser: str | None = None,
        comment: str | None = None,
        visible: bool | None = None,
    ) -> Logs: ...

# Indexes ----------------------------------------------------------------------------------------------------
class Indexes(Elements):
    def __init__(self, *indexes: Index): ...
    # Property
    @property
    def elements(self) -> tuple[Index]: ...
    # Collection
    def search_name(
        self,
        *names: str | Index,
        exact: bool = True,
    ) -> Indexes: ...
    def search_type(
        self,
        *types: str | type | Index,
        exact: bool = True,
    ) -> Indexes: ...
    def filter(self, *elements: str | Index | Indexes) -> Indexes: ...
    def issubset(self, *elements: str | Index | Indexes) -> bool: ...
    def add(self, element: Index) -> bool: ...
    def remove(self, element: str | Index) -> bool: ...
    # Setter
    def setup(
        self,
        tb_name: str,
        db_name: str,
        charset: str | Charset,
        collate: str | None,
        pool: Pool,
    ) -> bool: ...
    # Accessors
    def values(self) -> tuple[Index]: ...
    def items(self) -> tuple[tuple[str, Index]]: ...
    def get(self, key: str | Index, default: Any = None) -> Index | Any: ...
    # Copy
    def copy(self) -> Self: ...
    # Special Methods
    def __getitem__(self, key: str | Index) -> Index: ...
    def __contains__(self, key: str | Index) -> bool: ...
    def __iter__(self) -> Iterator[Index]: ...

# Metadata ---------------------------------------------------------------------------------------------------
class IndexMetadata(Metadata):
    def __init__(self, meta: tuple[dict]): ...
    # Property
    @property
    def catelog_name(self) -> str: ...
    @property
    def db_name(self) -> str: ...
    @property
    def tb_name(self) -> str: ...
    @property
    def index_name(self) -> str: ...
    @property
    def index_type(self) -> str: ...
    @property
    def unique(self) -> bool: ...
    @property
    def comment(self) -> str | None: ...
    @property
    def visible(self) -> bool: ...
    @property
    def columns(self) -> tuple[str]: ...
    @property
    def parser(self) -> str | None: ...

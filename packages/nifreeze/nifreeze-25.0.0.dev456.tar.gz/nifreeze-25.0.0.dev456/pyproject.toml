[build-system]
requires = ["hatchling", "hatch-vcs", "nipreps-versions"]
build-backend = "hatchling.build"


[project]
name = "nifreeze"
description = "A flexible framework for volume-to-volume artifact estimation and correction across multiple 4D neuroimaging modalities (diffusion MRI, functional MRI, and PET)."
readme = "README.rst"
authors = [{name = "The NiPreps Developers", email = "nipreps@gmail.com"}]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Image Recognition",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
license = "Apache-2.0"
requires-python = ">=3.10"
dependencies = [
  "attrs",
  "dipy>=1.5.0",
  "joblib",
  "nipype>=1.5.1,<2.0",
  "nitransforms>=22.0.0,<24",
  "nireports",
  "numpy>=1.21.3",
  "nest-asyncio>=1.5.1",
  "scikit-image>=0.15.0",
  "scikit-learn>=1.3.0",
  "scipy>=1.8.0",
  "typing-extensions>=4.12",
]
dynamic = ["version"]

[project.urls]
Documentation = "https://www.nipreps.org/nifreeze"
Home = "https://github.com/nipreps/nifreeze"
NiPreps = "https://www.nipreps.org/"

[project.optional-dependencies]
doc = [
  "attrs>=20.1.0",
  "furo>=2024.01.29",
  "matplotlib>=2.2.0",
  "nbsphinx",
  "packaging",
  "pydot>=1.2.3",
  "pydotplus",
  "sphinx>=4.5,<8",
  "sphinx-argparse",
  "sphinx-rtd-theme",
  "sphinxcontrib-apidoc",
  "sphinxcontrib-napoleon",
  "sphinxcontrib-versioning",
  "sphinx-argparse",
  "sphinxcontrib-bibtex",
]
dev = [
  "ruff",
  "pre-commit",
  "pre-commit-hooks",
]
plotting = ["nilearn"]
resmon = ["psutil>=5.4"]
test = [
  "coverage",
  "ipykernel",
  "mriqc-learn",
  "pytest>=4.4",
  "pytest-cov",
  "pytest-env",
  "pytest-xdist>=1.28"
]
types = [
  "pandas-stubs",
  "types-setuptools",
  "scipy-stubs",
  "types-attrs",
  "types-PyYAML",
  "types-tqdm",
  "pytest",
]
notebooks = [
  "jupyter",
  "nbclient",
  "nbmake",
  "mriqc-learn",
  "nipreps-synthstrip",
]
antsopt = [
  "ConfigSpace",
  "nipreps",
  "scikit-image",
  "smac",
]
benchmark = [
  "asv",
  "pyperf",
  "virtualenv==20.30",
]

# Aliases
docs = ["nifreeze[doc]"]
tests = ["nifreeze[test]"]
all = ["nifreeze[antsopt,benchmark,dev,doc,notebooks,plotting,resmon,test,types]"]

[project.scripts]
nifreeze = "nifreeze.cli.run:main"

#
# Hatch configurations
#

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
exclude = [".git_archival.txt"]  # No longer needed in sdist

[tool.hatch.build.targets.wheel]
packages = ["src/nifreeze"]
# exclude = [
#   "nifreeze/tests/data",  # Large test data directory
# ]

[tool.hatch.version]
validate-bump = true
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "nipreps-calver"
local_scheme = "no-local-version"

[tool.hatch.build.hooks.vcs]
version-file = "src/nifreeze/_version.py"

#
# Developer tool configurations
#

[[tool.mypy.overrides]]
module = [
  "nipype.*",
  "nilearn.*",
  "nireports.*",
  "nitransforms.*",
  "seaborn",
  "dipy.*",
  "smac.*",
  "joblib",
  "h5py",
  "ConfigSpace",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 99
target-version = "py310"
exclude = [
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".tox",
  ".venv",
  "venv",
  "_build",
  "build",
  "dist",
]

[tool.ruff.lint]
select = [
  "F",
  "E",
  "C",
  "W",
  "B",
  "I",
  "ICN",
]
ignore = [
  "E203"
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.extend-per-file-ignores]
"*/__init__.py" = ["F401"]
".maint/update_authors.py" = ["C901"]
"docs/conf.py" = ["E265", "E402"]
"/^\\s*\\.\\. _.*?: http/" = ["E501"]

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"nibabel" = "nb"

[tool.ruff.lint.isort]
known-first-party=["nifreeze"]

[tool.pytest.ini_options]
pythonpath = "src/ test/"
norecursedirs = [".*", "_*"]
addopts = "-v --doctest-modules"
doctest_optionflags = "ALLOW_UNICODE NORMALIZE_WHITESPACE ELLIPSIS"
env = "PYTHONHASHSEED=0"
markers = [
  "random_gtab_data: Custom marker for random gtab data tests",
  "random_dwi_data: Custom marker for random dwi data tests",
  "random_uniform_ndim_data: Custom marker for random multi-dimensional data tests",
  "random_uniform_spatial_data: Custom marker for random spatial data tests",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  # DIPY
  "ignore:Updating b0_threshold to.*:UserWarning",
  # scikit-learn
  "ignore:The optimal value found for dimension.*:sklearn.exceptions.ConvergenceWarning",
]

[tool.coverage.run]
branch = true
parallel = true
concurrency = ["multiprocessing"]
omit = [
  "*/tests/*",
  "*/testing/*",
  "*/viz/*",
  "*/__init__.py",
  "*/conftest.py",
  "src/nifreeze/_version.py"
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  "raise NotImplementedError",
  "warnings\\.warn",
]

[tool.codespell]
# nd - import scipy.ndimage as nd
# mapp, reson -- Mapp. and Reson. abbreviations in citation
ignore-words-list = "nd,mapp,reson"
skip = """
./.git,*.pdf,*.svg,*.min.js,*.ipynb"""

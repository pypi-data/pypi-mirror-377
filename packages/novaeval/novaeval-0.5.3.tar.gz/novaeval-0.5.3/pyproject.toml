[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "novaeval"
version = "0.5.3"
description = "A comprehensive, open-source LLM evaluation framework for testing and benchmarking AI models"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Noveum AI", email = "team@noveum.ai"},
]
maintainers = [
    {name = "Noveum AI", email = "team@noveum.ai"},
]
keywords = [
    "llm", "evaluation", "ai", "machine-learning", "benchmarking",
    "testing", "rag", "agents", "conversational-ai", "g-eval"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.5.0",
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pyyaml>=6.0",
    "jinja2>=3.1.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "datasets>=2.14.0",
    "openai>=1.3.0",
    "anthropic>=0.8.0",
    "tiktoken>=0.5.0",
    "sentence-transformers>=2.2.0",
    "tqdm>=4.66.0",
    "click>=8.1.0",
    "requests>=2.31.0",
    "google-genai>=0.1.0",
    "ijson>=3.4.0",
    "noveum-trace>=0.3.5",
    "python-dotenv>=1.0.0",
    "ollama>=0.5.3",
    "transformers>=4.20.0",
    "scikit-learn>=1.0.0",
    "plotly>=5.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "typing_extensions>=4.7.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "coverage>=7.3.0",
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "commitizen>=3.12.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.2",
]
azure = [
    "azure-ai-inference>=1.0.0; python_version<'3.11'",
]
aws = [
    "boto3>=1.34.0",
]
gcp = [
    "google-cloud-aiplatform>=1.38.0",
]
api = [
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.25.0",
    "python-dotenv>=1.0.0",
    "python-multipart>=0.0.6",
    "pydantic-settings>=2.0.0",
    "prometheus_client>=0.17.0",
]
all = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "typing_extensions>=4.7.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "coverage>=7.3.0",
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "commitizen>=3.12.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.2",
    "azure-ai-inference>=1.0.0; python_version<'3.11'",
    "boto3>=1.34.0",
    "google-cloud-aiplatform>=1.38.0",
]

[project.urls]
Homepage = "https://github.com/Noveum/NovaEval"
Documentation = "https://novaeval.readthedocs.io"
Repository = "https://github.com/Noveum/NovaEval"
"Bug Tracker" = "https://github.com/Noveum/NovaEval/issues"
Changelog = "https://github.com/Noveum/NovaEval/blob/main/CHANGELOG.md"

[project.scripts]
novaeval = "novaeval.cli:main"

[project.entry-points."novaeval.datasets"]
mmlu = "novaeval.datasets.mmlu:MMLUDataset"
huggingface = "novaeval.datasets.huggingface:HuggingFaceDataset"
custom = "novaeval.datasets.custom:CustomDataset"

[project.entry-points."novaeval.models"]
openai = "novaeval.models.openai:OpenAIModel"
anthropic = "novaeval.models.anthropic:AnthropicModel"
azure_openai = "novaeval.models.azure_openai:AzureOpenAIModel"
gemini = "novaeval.models.gemini:GeminiModel"
ollama = "novaeval.models.ollama:OllamaModel"

[project.entry-points."novaeval.scorers"]
accuracy = "novaeval.scorers.accuracy:AccuracyScorer"
exact_match = "novaeval.scorers.accuracy:ExactMatchScorer"
f1 = "novaeval.scorers.accuracy:F1Scorer"
g_eval = "novaeval.scorers.g_eval:GEvalScorer"
conversational = "novaeval.scorers.conversational:ConversationalMetricsScorer"
panel_judge = "novaeval.scorers.panel_judge:PanelOfJudgesScorer"
answer_relevancy = "novaeval.scorers.rag:AnswerRelevancyScorer"
faithfulness = "novaeval.scorers.rag:FaithfulnessScorer"
contextual_precision = "novaeval.scorers.rag:ContextualPrecisionScorer"
contextual_recall = "novaeval.scorers.rag:ContextualRecallScorer"
ragas = "novaeval.scorers.rag:RAGASScorer"

[tool.setuptools.packages.find]
where = ["src", "."]
include = ["novaeval*", "app*"]

[tool.setuptools.package-data]
novaeval = ["py.typed", "*.yaml", "*.json", "templates/*.j2"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["novaeval"]
known_third_party = ["pytest", "pydantic", "httpx", "typer", "rich"]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise exceptions with raise ... from err (not critical)
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "PERF203",  # try-except within a loop incurs performance overhead
    "PERF102",  # when using only values of dict use values() method
    "RUF012",  # mutable class attributes should be annotated with ClassVar
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "S101"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
mypy_path = "stubs"
check_untyped_defs = true
disallow_any_generics = false  # Allow generic types without parameters for now
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = false  # Don't warn about returning Any
warn_unreachable = false  # Don't warn about unreachable code
warn_unused_configs = true
warn_unused_ignores = false  # Don't warn about unused ignore comments

# Disable specific error codes for non-critical issues
disable_error_code = ["import-untyped", "type-arg"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "asyncio: Async tests that require asyncio support",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/novaeval"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"



# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version_scheme = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true
tag_format = "v$major.$minor.$patch$prerelease"
bump_message = "bump: version $current_version → $new_version"
changelog_file = "CHANGELOG.md"
changelog_format = "CHANGELOG.md"
changelog_merge_prerelease = true
version_files = [
    "src/novaeval/__init__.py",
    "Dockerfile",
    "src/novaeval/integrations/noveum.py"
]
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[tool.commitizen.customize]
message_template = "{{change_type}}{{scope}}: {{message}}"
example = "feature: add hat wobble"
schema = "<type>(<scope>): <subject>"
schema_pattern = "^(build|ci|docs|feat|fix|perf|refactor|style|test|chore)(\\(.+\\))?!?: .+$"
info_path = "cz_info.txt"
info = """
This is a customized info for commitizen.

Types:
  build: Changes that affect the build system or external dependencies
  ci: Changes to CI configuration files and scripts
  docs: Documentation only changes
  feat: A new feature
  fix: A bug fix
  perf: A code change that improves performance
  refactor: A code change that neither fixes a bug nor adds a feature
  style: Changes that do not affect the meaning of the code (white-space, formatting, etc)
  test: Adding missing tests or correcting existing tests
  chore: Changes to the build process or auxiliary tools and libraries

Breaking changes:
  Add ! after the type/scope to indicate a breaking change
  Example: feat!: remove deprecated API endpoints
"""

[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
choices = [
    {value = "feat", name = "feat: ✨ A new feature"},
    {value = "fix", name = "fix: 🐛 A bug fix"},
    {value = "docs", name = "docs: 📚 Documentation only changes"},
    {value = "style", name = "style: 💎 Changes that do not affect the meaning of the code"},
    {value = "refactor", name = "refactor: 📦 A code change that neither fixes a bug nor adds a feature"},
    {value = "perf", name = "perf: 🚀 A code change that improves performance"},
    {value = "test", name = "test: 🚨 Adding missing tests or correcting existing tests"},
    {value = "build", name = "build: 🛠 Changes that affect the build system or external dependencies"},
    {value = "ci", name = "ci: ⚙️ Changes to CI configuration files and scripts"},
    {value = "chore", name = "chore: ♻️ Changes to the build process or auxiliary tools and libraries"},
]
message = "Select the type of change that you're committing:"

[[tool.commitizen.customize.questions]]
type = "input"
name = "scope"
message = "What is the scope of this change? (class or file name): (press [enter] to skip)"

[[tool.commitizen.customize.questions]]
type = "input"
name = "message"
message = "Write a short and imperative summary of the code changes: (lower case and no period)"

[[tool.commitizen.customize.questions]]
type = "confirm"
name = "is_breaking_change"
message = "Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer"
default = false

[[tool.commitizen.customize.questions]]
type = "input"
name = "breaking_change_desc"
message = "Describe the breaking change:"
filter = "lambda x: x.strip()"
when = "{{ cookiecutter.is_breaking_change }}"

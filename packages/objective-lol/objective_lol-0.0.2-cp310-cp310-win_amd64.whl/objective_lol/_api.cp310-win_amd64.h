/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/bjia56/objective-lol/python/build/lib.win-amd64-cpython-310/objective_lol */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "api.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern __declspec(dllexport) void DecRef(long long int handle);

// IncRef increments the reference count for the specified handle.
//
extern __declspec(dllexport) void IncRef(long long int handle);

// NumHandles returns the number of handles currently in use.
//
extern __declspec(dllexport) GoInt NumHandles();

// --- wrapping slice: []bool ---
//
extern __declspec(dllexport) long long int Slice_bool_CTor();
extern __declspec(dllexport) GoInt Slice_bool_len(long long int handle);
extern __declspec(dllexport) char Slice_bool_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_bool_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_bool_set(long long int handle, GoInt _idx, char _vl);
extern __declspec(dllexport) void Slice_bool_append(long long int handle, char _vl);

// --- wrapping slice: []byte ---
//
extern __declspec(dllexport) long long int Slice_byte_CTor();
extern __declspec(dllexport) GoInt Slice_byte_len(long long int handle);
extern __declspec(dllexport) char Slice_byte_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_byte_set(long long int handle, GoInt _idx, char _vl);
extern __declspec(dllexport) void Slice_byte_append(long long int handle, char _vl);
extern __declspec(dllexport) long long int Slice_byte_from_bytes(PyObject* o);
extern __declspec(dllexport) PyObject* Slice_byte_to_bytes(long long int handle);

// --- wrapping slice: []error ---
//
extern __declspec(dllexport) long long int Slice_error_CTor();
extern __declspec(dllexport) GoInt Slice_error_len(long long int handle);
extern __declspec(dllexport) char* Slice_error_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_error_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_error_set(long long int handle, GoInt _idx, char* _vl);
extern __declspec(dllexport) void Slice_error_append(long long int handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern __declspec(dllexport) long long int Slice_float32_CTor();
extern __declspec(dllexport) GoInt Slice_float32_len(long long int handle);
extern __declspec(dllexport) float Slice_float32_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_float32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_float32_set(long long int handle, GoInt _idx, float _vl);
extern __declspec(dllexport) void Slice_float32_append(long long int handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern __declspec(dllexport) long long int Slice_float64_CTor();
extern __declspec(dllexport) GoInt Slice_float64_len(long long int handle);
extern __declspec(dllexport) double Slice_float64_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_float64_set(long long int handle, GoInt _idx, double _vl);
extern __declspec(dllexport) void Slice_float64_append(long long int handle, double _vl);

// --- wrapping slice: []int ---
//
extern __declspec(dllexport) long long int Slice_int_CTor();
extern __declspec(dllexport) GoInt Slice_int_len(long long int handle);
extern __declspec(dllexport) long long int Slice_int_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_int_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_int_set(long long int handle, GoInt _idx, long long int _vl);
extern __declspec(dllexport) void Slice_int_append(long long int handle, long long int _vl);

// --- wrapping slice: []int16 ---
//
extern __declspec(dllexport) long long int Slice_int16_CTor();
extern __declspec(dllexport) GoInt Slice_int16_len(long long int handle);
extern __declspec(dllexport) short int Slice_int16_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_int16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_int16_set(long long int handle, GoInt _idx, short int _vl);
extern __declspec(dllexport) void Slice_int16_append(long long int handle, short int _vl);

// --- wrapping slice: []int32 ---
//
extern __declspec(dllexport) long long int Slice_int32_CTor();
extern __declspec(dllexport) GoInt Slice_int32_len(long long int handle);
extern __declspec(dllexport) long int Slice_int32_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_int32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_int32_set(long long int handle, GoInt _idx, long int _vl);
extern __declspec(dllexport) void Slice_int32_append(long long int handle, long int _vl);

// --- wrapping slice: []int64 ---
//
extern __declspec(dllexport) long long int Slice_int64_CTor();
extern __declspec(dllexport) GoInt Slice_int64_len(long long int handle);
extern __declspec(dllexport) long long int Slice_int64_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_int64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_int64_set(long long int handle, GoInt _idx, long long int _vl);
extern __declspec(dllexport) void Slice_int64_append(long long int handle, long long int _vl);

// --- wrapping slice: []int8 ---
//
extern __declspec(dllexport) long long int Slice_int8_CTor();
extern __declspec(dllexport) GoInt Slice_int8_len(long long int handle);
extern __declspec(dllexport) char Slice_int8_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_int8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_int8_set(long long int handle, GoInt _idx, char _vl);
extern __declspec(dllexport) void Slice_int8_append(long long int handle, char _vl);

// --- wrapping slice: []rune ---
//
extern __declspec(dllexport) long long int Slice_rune_CTor();
extern __declspec(dllexport) GoInt Slice_rune_len(long long int handle);
extern __declspec(dllexport) long int Slice_rune_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_rune_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_rune_set(long long int handle, GoInt _idx, long int _vl);
extern __declspec(dllexport) void Slice_rune_append(long long int handle, long int _vl);

// --- wrapping slice: []string ---
//
extern __declspec(dllexport) long long int Slice_string_CTor();
extern __declspec(dllexport) GoInt Slice_string_len(long long int handle);
extern __declspec(dllexport) char* Slice_string_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_string_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_string_set(long long int handle, GoInt _idx, char* _vl);
extern __declspec(dllexport) void Slice_string_append(long long int handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern __declspec(dllexport) long long int Slice_uint_CTor();
extern __declspec(dllexport) GoInt Slice_uint_len(long long int handle);
extern __declspec(dllexport) long long unsigned int Slice_uint_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_uint_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_uint_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern __declspec(dllexport) void Slice_uint_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint16 ---
//
extern __declspec(dllexport) long long int Slice_uint16_CTor();
extern __declspec(dllexport) GoInt Slice_uint16_len(long long int handle);
extern __declspec(dllexport) short unsigned int Slice_uint16_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_uint16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_uint16_set(long long int handle, GoInt _idx, short unsigned int _vl);
extern __declspec(dllexport) void Slice_uint16_append(long long int handle, short unsigned int _vl);

// --- wrapping slice: []uint32 ---
//
extern __declspec(dllexport) long long int Slice_uint32_CTor();
extern __declspec(dllexport) GoInt Slice_uint32_len(long long int handle);
extern __declspec(dllexport) long unsigned int Slice_uint32_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_uint32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_uint32_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern __declspec(dllexport) void Slice_uint32_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []uint64 ---
//
extern __declspec(dllexport) long long int Slice_uint64_CTor();
extern __declspec(dllexport) GoInt Slice_uint64_len(long long int handle);
extern __declspec(dllexport) long long unsigned int Slice_uint64_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_uint64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_uint64_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern __declspec(dllexport) void Slice_uint64_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint8 ---
//
extern __declspec(dllexport) long long int Slice_uint8_CTor();
extern __declspec(dllexport) GoInt Slice_uint8_len(long long int handle);
extern __declspec(dllexport) unsigned char Slice_uint8_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_uint8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_uint8_set(long long int handle, GoInt _idx, unsigned char _vl);
extern __declspec(dllexport) void Slice_uint8_append(long long int handle, unsigned char _vl);

// --- wrapping slice: []api.GoValue ---
//
extern __declspec(dllexport) long long int Slice_api_GoValue_CTor();
extern __declspec(dllexport) GoInt Slice_api_GoValue_len(long long int handle);
extern __declspec(dllexport) long long int Slice_api_GoValue_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_api_GoValue_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_api_GoValue_set(long long int handle, GoInt _idx, long long int _vl);
extern __declspec(dllexport) void Slice_api_GoValue_append(long long int handle, long long int _vl);

// --- wrapping slice: []environment.Parameter ---
//
extern __declspec(dllexport) long long int Slice_environment_Parameter_CTor();
extern __declspec(dllexport) GoInt Slice_environment_Parameter_len(long long int handle);
extern __declspec(dllexport) long long int Slice_environment_Parameter_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_environment_Parameter_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_environment_Parameter_set(long long int handle, GoInt _idx, long long int _vl);
extern __declspec(dllexport) void Slice_environment_Parameter_append(long long int handle, long long int _vl);

// --- wrapping slice: []environment.Value ---
//
extern __declspec(dllexport) long long int Slice_environment_Value_CTor();
extern __declspec(dllexport) GoInt Slice_environment_Value_len(long long int handle);
extern __declspec(dllexport) long long int Slice_environment_Value_elem(long long int handle, GoInt _idx);
extern __declspec(dllexport) long long int Slice_environment_Value_subslice(long long int handle, GoInt _st, GoInt _ed);
extern __declspec(dllexport) void Slice_environment_Value_set(long long int handle, GoInt _idx, long long int _vl);
extern __declspec(dllexport) void Slice_environment_Value_append(long long int handle, long long int _vl);

// --- wrapping map: map[string]*api.ClassMethod ---
//
extern __declspec(dllexport) long long int Map_string_Ptr_api_ClassMethod_CTor();
extern __declspec(dllexport) GoInt Map_string_Ptr_api_ClassMethod_len(long long int handle);
extern __declspec(dllexport) long long int Map_string_Ptr_api_ClassMethod_elem(long long int handle, char* _ky);
extern __declspec(dllexport) char Map_string_Ptr_api_ClassMethod_contains(long long int handle, char* _ky);
extern __declspec(dllexport) void Map_string_Ptr_api_ClassMethod_set(long long int handle, char* _ky, long long int _vl);
extern __declspec(dllexport) void Map_string_Ptr_api_ClassMethod_delete(long long int handle, char* _ky);
extern __declspec(dllexport) long long int Map_string_Ptr_api_ClassMethod_keys(long long int handle);

// --- wrapping map: map[string]*api.ClassVariable ---
//
extern __declspec(dllexport) long long int Map_string_Ptr_api_ClassVariable_CTor();
extern __declspec(dllexport) GoInt Map_string_Ptr_api_ClassVariable_len(long long int handle);
extern __declspec(dllexport) long long int Map_string_Ptr_api_ClassVariable_elem(long long int handle, char* _ky);
extern __declspec(dllexport) char Map_string_Ptr_api_ClassVariable_contains(long long int handle, char* _ky);
extern __declspec(dllexport) void Map_string_Ptr_api_ClassVariable_set(long long int handle, char* _ky, long long int _vl);
extern __declspec(dllexport) void Map_string_Ptr_api_ClassVariable_delete(long long int handle, char* _ky);
extern __declspec(dllexport) long long int Map_string_Ptr_api_ClassVariable_keys(long long int handle);

// --- wrapping map: map[string]*environment.Class ---
//
extern __declspec(dllexport) long long int Map_string_Ptr_environment_Class_CTor();
extern __declspec(dllexport) GoInt Map_string_Ptr_environment_Class_len(long long int handle);
extern __declspec(dllexport) long long int Map_string_Ptr_environment_Class_elem(long long int handle, char* _ky);
extern __declspec(dllexport) char Map_string_Ptr_environment_Class_contains(long long int handle, char* _ky);
extern __declspec(dllexport) void Map_string_Ptr_environment_Class_set(long long int handle, char* _ky, long long int _vl);
extern __declspec(dllexport) void Map_string_Ptr_environment_Class_delete(long long int handle, char* _ky);
extern __declspec(dllexport) long long int Map_string_Ptr_environment_Class_keys(long long int handle);

// --- wrapping map: map[string]*environment.Function ---
//
extern __declspec(dllexport) long long int Map_string_Ptr_environment_Function_CTor();
extern __declspec(dllexport) GoInt Map_string_Ptr_environment_Function_len(long long int handle);
extern __declspec(dllexport) long long int Map_string_Ptr_environment_Function_elem(long long int handle, char* _ky);
extern __declspec(dllexport) char Map_string_Ptr_environment_Function_contains(long long int handle, char* _ky);
extern __declspec(dllexport) void Map_string_Ptr_environment_Function_set(long long int handle, char* _ky, long long int _vl);
extern __declspec(dllexport) void Map_string_Ptr_environment_Function_delete(long long int handle, char* _ky);
extern __declspec(dllexport) long long int Map_string_Ptr_environment_Function_keys(long long int handle);

// --- wrapping map: map[string]*environment.MemberVariable ---
//
extern __declspec(dllexport) long long int Map_string_Ptr_environment_MemberVariable_CTor();
extern __declspec(dllexport) GoInt Map_string_Ptr_environment_MemberVariable_len(long long int handle);
extern __declspec(dllexport) long long int Map_string_Ptr_environment_MemberVariable_elem(long long int handle, char* _ky);
extern __declspec(dllexport) char Map_string_Ptr_environment_MemberVariable_contains(long long int handle, char* _ky);
extern __declspec(dllexport) void Map_string_Ptr_environment_MemberVariable_set(long long int handle, char* _ky, long long int _vl);
extern __declspec(dllexport) void Map_string_Ptr_environment_MemberVariable_delete(long long int handle, char* _ky);
extern __declspec(dllexport) long long int Map_string_Ptr_environment_MemberVariable_keys(long long int handle);

// --- wrapping map: map[string]*environment.Variable ---
//
extern __declspec(dllexport) long long int Map_string_Ptr_environment_Variable_CTor();
extern __declspec(dllexport) GoInt Map_string_Ptr_environment_Variable_len(long long int handle);
extern __declspec(dllexport) long long int Map_string_Ptr_environment_Variable_elem(long long int handle, char* _ky);
extern __declspec(dllexport) char Map_string_Ptr_environment_Variable_contains(long long int handle, char* _ky);
extern __declspec(dllexport) void Map_string_Ptr_environment_Variable_set(long long int handle, char* _ky, long long int _vl);
extern __declspec(dllexport) void Map_string_Ptr_environment_Variable_delete(long long int handle, char* _ky);
extern __declspec(dllexport) long long int Map_string_Ptr_environment_Variable_keys(long long int handle);

// --- wrapping map: map[string]api.GoValue ---
//
extern __declspec(dllexport) long long int Map_string_api_GoValue_CTor();
extern __declspec(dllexport) GoInt Map_string_api_GoValue_len(long long int handle);
extern __declspec(dllexport) long long int Map_string_api_GoValue_elem(long long int handle, char* _ky);
extern __declspec(dllexport) char Map_string_api_GoValue_contains(long long int handle, char* _ky);
extern __declspec(dllexport) void Map_string_api_GoValue_set(long long int handle, char* _ky, long long int _vl);
extern __declspec(dllexport) void Map_string_api_GoValue_delete(long long int handle, char* _ky);
extern __declspec(dllexport) long long int Map_string_api_GoValue_keys(long long int handle);

// --- wrapping struct: api.ClassDefinition ---
//
extern __declspec(dllexport) long long int api_ClassDefinition_CTor();
extern __declspec(dllexport) char* api_ClassDefinition_Name_Get(long long int handle);
extern __declspec(dllexport) void api_ClassDefinition_Name_Set(long long int handle, char* val);
extern __declspec(dllexport) long long int api_ClassDefinition_PublicVariables_Get(long long int handle);
extern __declspec(dllexport) void api_ClassDefinition_PublicVariables_Set(long long int handle, long long int val);
extern __declspec(dllexport) long long int api_ClassDefinition_PrivateVariables_Get(long long int handle);
extern __declspec(dllexport) void api_ClassDefinition_PrivateVariables_Set(long long int handle, long long int val);
extern __declspec(dllexport) long long int api_ClassDefinition_SharedVariables_Get(long long int handle);
extern __declspec(dllexport) void api_ClassDefinition_SharedVariables_Set(long long int handle, long long int val);
extern __declspec(dllexport) long long int api_ClassDefinition_PublicMethods_Get(long long int handle);
extern __declspec(dllexport) void api_ClassDefinition_PublicMethods_Set(long long int handle, long long int val);
extern __declspec(dllexport) long long int api_ClassDefinition_PrivateMethods_Get(long long int handle);
extern __declspec(dllexport) void api_ClassDefinition_PrivateMethods_Set(long long int handle, long long int val);
extern __declspec(dllexport) long long int api_ClassDefinition_UnknownFunctionHandler_Get(long long int handle);
extern __declspec(dllexport) void api_ClassDefinition_UnknownFunctionHandler_Set(long long int handle, long long int val);

// --- wrapping struct: api.ClassMethod ---
//
extern __declspec(dllexport) long long int api_ClassMethod_CTor();
extern __declspec(dllexport) char* api_ClassMethod_Name_Get(long long int handle);
extern __declspec(dllexport) void api_ClassMethod_Name_Set(long long int handle, char* val);
extern __declspec(dllexport) long long int api_ClassMethod_Argc_Get(long long int handle);
extern __declspec(dllexport) void api_ClassMethod_Argc_Set(long long int handle, long long int val);

// --- wrapping struct: api.ClassVariable ---
//
extern __declspec(dllexport) long long int api_ClassVariable_CTor();
extern __declspec(dllexport) char* api_ClassVariable_Name_Get(long long int handle);
extern __declspec(dllexport) void api_ClassVariable_Name_Set(long long int handle, char* val);
extern __declspec(dllexport) long long int api_ClassVariable_Value_Get(long long int handle);
extern __declspec(dllexport) void api_ClassVariable_Value_Set(long long int handle, long long int val);
extern __declspec(dllexport) char api_ClassVariable_Locked_Get(long long int handle);
extern __declspec(dllexport) void api_ClassVariable_Locked_Set(long long int handle, char val);

// --- wrapping struct: api.ExecutionResult ---
//
extern __declspec(dllexport) long long int api_ExecutionResult_CTor();
extern __declspec(dllexport) long long int api_ExecutionResult_Value_Get(long long int handle);
extern __declspec(dllexport) void api_ExecutionResult_Value_Set(long long int handle, long long int val);
extern __declspec(dllexport) long long int api_ExecutionResult_RawValue_Get(long long int handle);
extern __declspec(dllexport) void api_ExecutionResult_RawValue_Set(long long int handle, long long int val);
extern __declspec(dllexport) char* api_ExecutionResult_Output_Get(long long int handle);
extern __declspec(dllexport) void api_ExecutionResult_Output_Set(long long int handle, char* val);

// --- wrapping struct: api.VM ---
//
extern __declspec(dllexport) long long int api_VM_CTor();
extern __declspec(dllexport) long long int api_VM_GetCompatibilityShim(long long int _handle);
extern __declspec(dllexport) long long int api_VM_Execute(long long int _handle, char* code);
extern __declspec(dllexport) long long int api_VM_ExecuteWithContext(long long int _handle, long long int ctx, char* code);
extern __declspec(dllexport) long long int api_VM_NewObjectInstance(long long int _handle, char* className);
extern __declspec(dllexport) long long int api_VM_Call(long long int _handle, char* functionName, long long int args);
extern __declspec(dllexport) long long int api_VM_CallMethod(long long int _handle, long long int object, char* methodName, long long int args);
extern __declspec(dllexport) char* api_VM_DefineVariable(long long int _handle, char* name, long long int value, char constant);
extern __declspec(dllexport) char* api_VM_SetVariable(long long int _handle, char* variableName, long long int value);
extern __declspec(dllexport) long long int api_VM_GetVariable(long long int _handle, char* variableName);
extern __declspec(dllexport) char* api_VM_DefineClass(long long int _handle, long long int classDef);

// --- wrapping struct: api.GoValue ---
//
extern __declspec(dllexport) long long int api_GoValue_CTor();
extern __declspec(dllexport) char* api_GoValue_ID(long long int _handle);
extern __declspec(dllexport) long long int api_GoValue_MarshalJSON(long long int _handle);
extern __declspec(dllexport) char* api_GoValue_Type(long long int _handle);
extern __declspec(dllexport) long long int api_GoValue_Int(long long int _handle);
extern __declspec(dllexport) double api_GoValue_Float(long long int _handle);
extern __declspec(dllexport) char* api_GoValue_String(long long int _handle);
extern __declspec(dllexport) char api_GoValue_Bool(long long int _handle);
extern __declspec(dllexport) long long int api_GoValue_Slice(long long int _handle);
extern __declspec(dllexport) long long int api_GoValue_Map(long long int _handle);
extern __declspec(dllexport) long long int api_GoValue_Object(long long int _handle);

// --- wrapping struct: api.SourceLocation ---
//
extern __declspec(dllexport) long long int api_SourceLocation_CTor();
extern __declspec(dllexport) char* api_SourceLocation_Filename_Get(long long int handle);
extern __declspec(dllexport) void api_SourceLocation_Filename_Set(long long int handle, char* val);
extern __declspec(dllexport) long long int api_SourceLocation_Line_Get(long long int handle);
extern __declspec(dllexport) void api_SourceLocation_Line_Set(long long int handle, long long int val);
extern __declspec(dllexport) long long int api_SourceLocation_Column_Get(long long int handle);
extern __declspec(dllexport) void api_SourceLocation_Column_Set(long long int handle, long long int val);

// --- wrapping struct: api.UnknownFunctionHandler ---
//
extern __declspec(dllexport) long long int api_UnknownFunctionHandler_CTor();

// --- wrapping struct: api.VMCompatibilityShim ---
//
extern __declspec(dllexport) long long int api_VMCompatibilityShim_CTor();
extern __declspec(dllexport) char* api_VMCompatibilityShim_DefineFunction(long long int _handle, char* id, char* name, long long int argc, PyObject* function);
extern __declspec(dllexport) long long int api_VMCompatibilityShim_BuildNewClassVariableWithGetter(long long int _handle, long long int variable, char* getterID, PyObject* getter);
extern __declspec(dllexport) long long int api_VMCompatibilityShim_BuildNewClassVariableWithSetter(long long int _handle, long long int variable, char* setterID, PyObject* setter);
extern __declspec(dllexport) long long int api_VMCompatibilityShim_BuildNewClassMethod(long long int _handle, long long int method, char* id, PyObject* function);
extern __declspec(dllexport) long long int api_VMCompatibilityShim_BuildNewUnknownFunctionHandler(long long int _handle, char* id, PyObject* function);
extern __declspec(dllexport) char api_VMCompatibilityShim_IsClassDefined(long long int _handle, char* name);
extern __declspec(dllexport) long long int api_VMCompatibilityShim_LookupObject(long long int _handle, char* id);
extern __declspec(dllexport) long long int api_VMCompatibilityShim_GetObjectMRO(long long int _handle, char* id);
extern __declspec(dllexport) long long int api_VMCompatibilityShim_GetObjectImmediateFunctions(long long int _handle, char* id);
extern __declspec(dllexport) long long int api_VMCompatibilityShim_GetObjectImmediateVariables(long long int _handle, char* id);
extern __declspec(dllexport) char* api_VMCompatibilityShim_AddVariableToObject(long long int _handle, char* id, long long int variable);

// --- wrapping struct: api.VMConfig ---
//
extern __declspec(dllexport) long long int api_VMConfig_CTor();
extern __declspec(dllexport) long long int api_VMConfig_Stdout_Get(long long int handle);
extern __declspec(dllexport) void api_VMConfig_Stdout_Set(long long int handle, long long int val);
extern __declspec(dllexport) long long int api_VMConfig_Stdin_Get(long long int handle);
extern __declspec(dllexport) void api_VMConfig_Stdin_Set(long long int handle, long long int val);
extern __declspec(dllexport) long long int api_VMConfig_Timeout_Get(long long int handle);
extern __declspec(dllexport) void api_VMConfig_Timeout_Set(long long int handle, long long int val);
extern __declspec(dllexport) char* api_VMConfig_WorkingDirectory_Get(long long int handle);
extern __declspec(dllexport) void api_VMConfig_WorkingDirectory_Set(long long int handle, char* val);
extern __declspec(dllexport) char* api_VMConfig_Validate(long long int _handle);

// --- wrapping struct: api.VMError ---
//
extern __declspec(dllexport) long long int api_VMError_CTor();
extern __declspec(dllexport) char* api_VMError_Type_Get(long long int handle);
extern __declspec(dllexport) void api_VMError_Type_Set(long long int handle, char* val);
extern __declspec(dllexport) char* api_VMError_Message_Get(long long int handle);
extern __declspec(dllexport) void api_VMError_Message_Set(long long int handle, char* val);
extern __declspec(dllexport) long long int api_VMError_Source_Get(long long int handle);
extern __declspec(dllexport) void api_VMError_Source_Set(long long int handle, long long int val);
extern __declspec(dllexport) long long int api_VMError_Duration_Get(long long int handle);
extern __declspec(dllexport) void api_VMError_Duration_Set(long long int handle, long long int val);
extern __declspec(dllexport) char* api_VMError_Error(long long int _handle);
extern __declspec(dllexport) char* api_VMError_Unwrap(long long int _handle);
extern __declspec(dllexport) char api_VMError_IsCompileError(long long int _handle);
extern __declspec(dllexport) char api_VMError_IsRuntimeError(long long int _handle);
extern __declspec(dllexport) char api_VMError_IsTimeoutError(long long int _handle);
extern __declspec(dllexport) char api_VMError_IsConversionError(long long int _handle);
extern __declspec(dllexport) char api_VMError_IsConfigError(long long int _handle);
extern __declspec(dllexport) long long int api_NewClassDefinition();
extern __declspec(dllexport) long long int api_NewVM(long long int config);
extern __declspec(dllexport) long long int api_WrapInt(long long int value);
extern __declspec(dllexport) long long int api_WrapObject(long long int value);
extern __declspec(dllexport) long long int api_WrapAny(char* value);
extern __declspec(dllexport) long long int api_WrapBool(char value);
extern __declspec(dllexport) long long int api_ToGoValue(long long int val);
extern __declspec(dllexport) long long int api_WrapFloat(double value);
extern __declspec(dllexport) long long int api_WrapString(char* value);
extern __declspec(dllexport) long long int api_DefaultConfig();
extern __declspec(dllexport) long long int api_NewCompileError(char* message, long long int source);
extern __declspec(dllexport) long long int api_NewConfigError(char* message, char* wrapped);
extern __declspec(dllexport) long long int api_NewTimeoutError(long long int duration);
extern __declspec(dllexport) long long int api_NewConversionError(char* message, char* wrapped);
extern __declspec(dllexport) long long int api_NewRuntimeError(char* message, long long int source);
extern __declspec(dllexport) long long int api_ConvertArguments(long long int args);
extern __declspec(dllexport) long long int api_LookupObject(char* id);
extern __declspec(dllexport) long long int api_FromGoValue(long long int val);

#ifdef __cplusplus
}
#endif

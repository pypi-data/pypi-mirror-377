name: pk_interface
version: Nov2024
purpose: "Calculates power spectra using halo model. "
url: ""
interface: pk_interface.py
attribution: [Andrej Dvornik, Marika Asgari, Maria-Cristina Fortuna]
rules:
    "If you use this module then please cite the papers below"
cite:
    - ""

assumptions:
    - ""

explanation: |
  This module has two modes: response and direct
  If in direct mode it will directly calculate the power spectra
  If in response mode it will calcualte the reponse of the hm to different power spectra with respect to P_mm
  and multiply that to an input P_mm to estimate the desired power, for example:
  res_gg = P^hm_gg/P^hm_mm
  res_gm = P^hm_gm/P^hm_mm
  Then uses these in combination with input matter power spectra, P_mm, to create 3D power for P_gg and P_gm
  P_gg = res_gg P_mm
  P_gm = res_gm P_mm

  The following exaplains how P^hm_xy are calculated.
  Calculates 3D power spectra using the halo model approach:
  See section 2 of https://arxiv.org/pdf/2303.08752.pdf for details

  P_uv = P^2h_uv + P^1h_uv  (1)
  P^1h_uv (k) = int_0^infty dM Wu(M, k) Wv(M, k) n(M)  (2)
  P^2h_uv (k) = int_0^infty int_0^infty dM1 dM2 Phh(M1, M2, k) Wu(M1, k) Wv(M2, k) n(M1) n(M2)  (3)

  Wx are the profile of the fields, u and v, showing how they fit into haloes.
  n(M) is the halo mass function, quantifying the number of haloes of each mass, M.
  Integrals are taken over halo mass.

  The halo-halo power spectrum can be written as,
  Phh(M1,M2,k) = b(M1) b(M2) P^lin_mm(k) (1 + beta_nl(M1,M2,k)) (4)

  In the vanilla halo model the 2-halo term is usually simplified by assuming that haloes are linearly biased with respect to matter.
  This sets beta_nl to zero and effectively decouples the integrals in (3). Here we allow for both options to be calculated.
  If you want the option with beta_nl the beta_nl modules has to be run before this module.

  We truncate the 1-halo term so that it doesn't dominate at large scales.

  Linear matter power spectrum needs to be provided as well. The halo_model_ingredients and hod modules (for everything but mm)
  need to be run before this.

  Current power spectra that we predict are
  mm: matter-matter
  gg: galaxy-galaxy
  gm: galaxy-matter

  II: intrinsic-intrinsic alignments
  gI: galaxy-intrinsic alignment
  mI: matter-intrinsic alignment

# List of parameters that can go in the params.ini file in the section for this module
params:
      p_mm:
          meaning: "if True calculates matter-matter power spectrum. If you want the non-linear matter power spectrum not to be calculated using halo model, use CAMB with the desired non-linear model before this module and set p_mm = False."
          type: bool
          default: False
      p_gm:
          meaning: "if True calculates matter-galaxy power spectrum."
          type: bool
          default: False
      p_gg:
          meaning: "if True calculates galaxy-galaxy power spectrum."
          type: bool
          default: False
      p_II:
          meaning: "if True calculates intrinsic-intrinsic power spectrum."
          type: bool
          default: False
      p_mI:
          meaning: "if True calculates matter-intrinsic power spectrum."
          type: bool
          default: False
      p_gI:
          meaning: "if True calculates galaxy-intrinsic power spectrum."
          type: bool
          default: False
      response:
          meaning: "if True uses the response method to calculate power spectra, if False calculates power spectra directly. See the explanation section for details."
          type: bool
          default: False
      fortuna:
          meaning: "if True any p_*I calculated will use the Fortuna et al. 2021 methodology."
          type: bool
          default: False
      bnl:
          meaning: "if True uses the beyond linear halo bias formalism of Mead & Verde 2020. If fortuna is True this is not used for p_*I."
          type: bool
          default: False
      point_mass:
          meaning: "Include the point mass correction in the P_gm"
          type: bool
          default: False
      dewiggle:
          meaning: "Apply dewiggling to the P_lin as described in Mead et al. 2020, Crocce & Scoccimarro 2006"
          type: bool
          default: False
      poisson_type:
          meaning: "Choose from scalar and power_law."
          type: str
          default: ''
      one_halo_ktrunc_ia:
          meaning: "This is the k (h/Mpc) scale used to truncate the 1-halo term to avoid the halo exclusion problem. Only use for p_*I. If set to None, no truncation is applied."
          type: real or None
          default: 4.0
      two_halo_ktrunc_ia:
          meaning: "This is the k (h/Mpc) scale used to truncate the NLA 2-halo term at small scales to avoid double-counting of the 1-halo term. Only use for p_*I and if fortuna is True. If set to None, no truncation is applied."
          type: real or None
          default: 6.0
      one_halo_ktrunc:
          meaning: "This is the k (h/Mpc) scale used to truncate the 1-halo at very large scales. If set to None, no truncation is applied."
          type: real or None
          default: 0.1
      two_halo_ktrunc:
          meaning: "This is the k (h/Mpc) scale used to truncate the 2-halo at smaller scales. If set to None, no truncation is applied."
          type: real or None
          default: 2.0
      hod_section_name:
          meaning: "Section name for hod parameters. This should match the section name for an hod module that is run before this module."
          type: str
          default:
      output_suffix:
          meaning: "Suffix to append on the resulting power spectra section name"
          type: str
          default: ''
      use_mead2020_corrections:
          meaning: "Choose from mead2020, mead2020_feedback, fit_feedback and None. If not None or fit_feedback sets the ingredients to match Mead+ 2021, HMCode2020 paper. fit_feedback uses input HOD to apply baryonic feedback to the P_mm, linking the P_mm to P_gg and P_gm in a self-consistent way"
          type: str
          default: None
inputs:
    hmf:
        dndlnmh:
          meaning: The differential mass function in terms of natural log of m, len=len(m) [units \(h^3 Mpc^{-3}\)] dn(m)/ dln m eq1 of 1306.6721
          type: real 1D
        m_h:
          meaning: Halo masses in M_sun h^-1
          type: real 1D
        z:
          meaning: redshift
          type: real 1D
        sigma8_z:
          meaning:
          type: real 1D
        neff:
          meaning:
          type: real 1D
    halobias:
        b_hb:
          meaning:
          type: real 1D
        m_h:
          meaning: Halo masses in M_sun h^-1
          type: real 1D
        z:
          meaning: redshift
          type: real 1D
    fourier_nfw_profile:
        ukm:
          meaning: Fourier transform of the normalised matter halo profile (centrals) as a functions of redshift, k and mass
          type: real 1D
        uksat:
          meaning: Fourier transform of the normalised halo profile for satellites as a functions of redshift, k and mass
          type: real 1D
        z:
          type: real 1D
          meaning: redshift
        k_h:
          meaning: Wavenumbers k of samples in Mpc/h.
          type: real 1D
        m_h:
          type: real 1D
          meaning: halo masses, in M_sun h^-1
    matter_power_lin:
        z:
            meaning: Redshifts of samples.
            type: real 1d
        k_h:
            meaning: Wavenumbers k of samples in Mpc/h.
            type: real 1d
        p_k:
            meaning: Linear power spectrum at samples in (Mpc/h)^-3.
            type: real 2d
    matter_power_nl:
        z:
            meaning: Redshifts of samples.
            type: real 1d
        k_h:
            meaning: Wavenumbers k of samples in Mpc/h.
            type: real 1d
        p_k:
            meaning: Non-linear power spectrum at samples in (Mpc/h)^-3.
            type: real 2d
    growth_parameters:
        z:
          meaning: Redshift samples of d_z
          type: real 1D
          default:
        d_z:
          meaning: Growth factor D(z)
          type: real 1D
          default:
    bnl:
        beta_interp:
          meaning:
          type: real ND
    density:
        mean_density0:
          meaning: Mean density of universe at z=0, [Msun h^2 / Mpc**3]
          type: real
    cosmological_parameters:
        fnu:
          meaning:
          type: real
        omega_c:
          meaning:
          type: real
        omega_m:
          meaning:
          type: real
        omega_b:
          meaning:
          type: real
    halo_model_parameters:
        logT_AGN:
          meaning:
          type: real
        m_b:
          meaning:
          type: real
    hod_section_name:
        nbins:
          meaning: number of observable-redshift bins
          type: int
        mass{_i}:
          meaning:
          type: real 1D
        z{_i}:
          meaning:
          type: real 1D
        n_cen{_i}:
          meaning:
          type: real 2D
        n_sat{_i}:
          meaning:
          type: real 2D
        number_density_cen{_i}:
          meaning:
          type: real 2D
        number_density_sat{_i}:
          meaning:
          type: real 2D
        central_fraction{_i}:
          meaning:
          type: real 1D
        satellite_fraction{_i}:
          meaning:
          type: real 1D
        average_halo_mass{_i}:
          meaning:
          type: real 1D
        f_star{_i}:
          meaning:
          type: real 1D
        mass_extended:
          meaning:
          type: real 1D
        z_extended:
          meaning:
          type: real 1D
        f_star_extended:
          meaning:
          type: real 1D
    ia_large_scale_alignment{_suffix}:
        alignment_gi:
          meaning:
          type:
    wkm:
        w_km_{jz}{_suffix_i}:
          meaning:
          type:
        k_h_{jz}{_suffix_i}:
          meaning:
          type:
        mass_{jz}{_suffix_i}:
          meaning:
          type:
    ia_small_scale_alignment{_suffix}:
        instance:
          meaning:
          type: str
        beta_sat:
          meaning:
          type:
        M_pivot:
          meaning:
          type:
    ia_large_scale_alignment{_suffix}:
        instance:
          meaning:
          type: str
        beta_sat:
          meaning:
          type:
        M_pivot:
          meaning:
          type:
    pk_parameters:
        poisson:
          meaning:
          type: real
        M_0:
          meaning:
          type: real
        slope:
          meaning:
          type: real
        linear_fraction_fortuna:
          meaning: if linear_fraction_fortuna is t_eff then pk_eff = (1.-t_eff)*pnl + t_eff*plin
          type: real
outputs:
    matter_power_nl:
        p_k_1h:
          meaning:
          type: real 2D
        p_k_2h:
          meaning:
          type: real 2D
        p_k:
          meaning:
          type: real 2D
        k_h:
          meaning:
          type: real 1D
        z:
          meaning:
          type: real 1D
    galaxy_power{_suffix_i}:
        p_k_1h:
          meaning:
          type: real 2D
        p_k_2h:
          meaning:
          type: real 2D
        p_k:
          meaning:
          type: real 2D
        k_h:
          meaning:
          type: real 1D
        z:
          meaning:
          type: real 1D
    matter_galaxy_power{_suffix_i}:
        p_k_1h:
          meaning:
          type: real 2D
        p_k_2h:
          meaning:
          type: real 2D
        p_k:
          meaning:
          type: real 2D
        k_h:
          meaning:
          type: real 1D
        z:
          meaning:
          type: real 1D
    galaxy_linear_bias{_suffix_i}:
        bg_linear:
          meaning:
          type:
        k_h:
          meaning:
          type: real 1D
        z:
          meaning:
          type: real 1D
    galaxy_matter_linear_bias{_suffix_i}:
        bgm_linear:
          meaning:
          type:
        k_h:
          meaning:
          type: real 1D
        z:
          meaning:
          type: real 1D
    intrinsic_power{_suffix_i}:
        p_k_1h:
          meaning:
          type: real 2D
        p_k_2h:
          meaning:
          type: real 2D
        p_k:
          meaning:
          type: real 2D
        k_h:
          meaning:
          type: real 1D
        z:
          meaning:
          type: real 1D
    galaxy_intrinsic_power{_suffix_i}:
        p_k_1h:
          meaning:
          type: real 2D
        p_k_2h:
          meaning:
          type: real 2D
        p_k:
          meaning:
          type: real 2D
        k_h:
          meaning:
          type: real 1D
        z:
          meaning:
          type: real 1D
    matter_intrinsic_power{_suffix_i}:
        p_k_1h:
          meaning:
          type: real 2D
        p_k_2h:
          meaning:
          type: real 2D
        p_k:
          meaning:
          type: real 2D
        k_h:
          meaning:
          type: real 1D
        z:
          meaning:
          type: real 1D

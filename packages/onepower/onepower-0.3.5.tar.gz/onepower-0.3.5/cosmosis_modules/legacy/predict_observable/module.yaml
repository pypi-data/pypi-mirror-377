name: predict_observable
version: Nov2024
purpose: "Calculates halo occupation distribution for central and satellite galaxies based on conditional observable functions"
url: ""
interface: predict_observable.py
attribution: [Andrej Dvornik, Marika Asgari, Maria-Cristina Fortuna]
rules:
    "If you use this module then please cite the papers below"
cite:
    - ""

assumptions:
    - ""

explanation: |
  This module combines tomographic / stellar mass bins of the individually calculated observables
  It produces the theoretical prediction for the observable for the full survey.
  The number of bins and the mass range can be different to what is calculated in the hod_interface.py module.

# List of parameters that can go in the params.ini file in the section for this module
params:
    input_section_name:
        meaning: Input section name to get the observable values from (this is and optional output of the hod section)
        type: str
        default: stellar_mass_function
    output_section_name:
        meaning: Output section name to save the observable values to
        type: str
        default: obs_out
    correct_cosmo:
        meaning: To correct for fixed imput cosmology at which observable function was estiamted
        tyle: bool
        default: False
    suffixes:
        meaning: (optional) if given read from input. Otherwise set ot median.
              This determines if the observable_function is a function of redshift or
              only estimated at the median redshift of the sample.
        type: int 1D or str
        default: med
    sample:
        meaning: (optional) if suffixes are given, look for the redshift distribution
                  of the observables in this section. This is something that was probably read from
                  a data file.
        type: str
        default:
    log10_obs_min:
        meaning: log10 of the minimum value{s} for the observable. For stellar mass function, these are given in log10 M_sun/h^2.
        type: real
        default:
    log_10_obs_max:
        meaning: log10 of the maximum value{s} for the observable. For stellar mass function, these are given in log10 M_sun/h^2.
        type: real
        default:
    zmin:
        meaning: minimum redshift value{s} for the observable.
        type: real
        default:
    zmax:
        meaning: maximum redshift value{s} for the observable.
        type: real
        default:
    n_obs:
        meaning: Number of observables to calculate the obervable function for.
        type: int
        default:
    edges:
        meaning: If True assumes that the log10_obs_min and log_10_obs_max are the bin edges and there are nbins linear bins
                between them (log bins between obs_min and obs_max).
                If suffixes are given nbins = len(suffixes). Otherwise it is nbins=1.
                Note that if using stellar masses as your observable log10_obs_min and log_10_obs_max
                are given in log10 M_sun/h^2.
        type: bool
        default: False
    weighted_binning:
        meaning: If True does weighted binning on SMF.
                The weights are either 1 if no file is given (this is equivalent to integrating over the observable bin).
                If obs_dist_file is given then the weights are taken from that file.
                If weighted_binning is True then we also need the edges to be True, so that we know the edges of the bins.
        type: bool
        default: False
    obs_dist_file:
        meaning: If obs_dist_file name is given then the weights are taken from that file. This should be a text file with 2 columns.
                column 1 should be log10 observable and column 2 the weight (e.g. number of galaxies for the given value in column 1).
        type: str
        default: ""
    cosmo_kwargs:
        meaning: A string of a dictionary of input cosmology values
        type: str
        default: "{'H0':70.0, 'Om0':0.3, 'Ode0':0.7}"
    astropy_cosmology_class:
        meaning: A astropy cosmology class which was used to calculate input cosmology at
        type: str
        default: "LambdaCDM"
inputs:
    input_section_name:
        obs_val_{i}:
            meaning: The value of the observable for bin {i}. This is taken from the HOD-pbservable output section.
                     i can be an integer or med (median). These are rebinned to match the data.
            type: real 1D
        obs_func_{i}:
            meaning: The value of the observable function for bin {i}. This is taken from the HOD-pbservable output section.
                     i can be an integer or med (median). These are rebinned to match the data.
            type: real 1D (no redshift rependence) or 2D if z_bin_{i} exists
        z_bin_{i}:
            meaning: redshift distribution of the galaxies in the observable-redshift bin {i}. This will be read if it exists.
                    If the median redshift is used to get the observable function then it is not used. If it exists then the
                    observable function is defined as the weighted average of the observable function over redshift
                    \int dz n(z) x (observable function).
            type: real 1D
    sample:
        z:
          meaning: Redshift values in the input sample corresponding to the galaxies in the observable-redshift bins.
                    This should be read using a read_nz module.
          type: real 1D
        bin_{i}:
          meaning: Redshift distribution of the galaxies in the observable-redshift bins. The number of bins should be
                  This should be read using a read_nz module.
          type: real 1D
outputs:
    output_section_name:
        bin_{i}:
          meaning: The value of observable function, for the observable-redshift bin {i}, i can be an integer or med (median)
          type: real 1D
        obs_{i}:
          meaning: The value of observable, for the observable-redshift bin {i}, i can be an integer or med (median)
          type: real 1D
        nbin:
          meaning: Number of observable-redshift bins, it is 1 if suffixes is not given
          type: int
        sample:
          meaning: The sample name for the redshift distribution of the observables, this is only saved if suffixes are given.
          type: str

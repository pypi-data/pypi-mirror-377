# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openroadpy
else:
    import _openroadpy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openroadpy.delete_SwigPyIterator

    def value(self):
        return _openroadpy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openroadpy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openroadpy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openroadpy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openroadpy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openroadpy.SwigPyIterator_copy(self)

    def next(self):
        return _openroadpy.SwigPyIterator_next(self)

    def __next__(self):
        return _openroadpy.SwigPyIterator___next__(self)

    def previous(self):
        return _openroadpy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openroadpy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openroadpy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openroadpy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openroadpy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openroadpy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openroadpy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openroadpy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openroadpy:
_openroadpy.SwigPyIterator_swigregister(SwigPyIterator)
class Corners(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.Corners_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.Corners___nonzero__(self)

    def __bool__(self):
        return _openroadpy.Corners___bool__(self)

    def __len__(self):
        return _openroadpy.Corners___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.Corners___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.Corners___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.Corners___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.Corners___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.Corners___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.Corners___setitem__(self, *args)

    def pop(self):
        return _openroadpy.Corners_pop(self)

    def append(self, x):
        return _openroadpy.Corners_append(self, x)

    def empty(self):
        return _openroadpy.Corners_empty(self)

    def size(self):
        return _openroadpy.Corners_size(self)

    def swap(self, v):
        return _openroadpy.Corners_swap(self, v)

    def begin(self):
        return _openroadpy.Corners_begin(self)

    def end(self):
        return _openroadpy.Corners_end(self)

    def rbegin(self):
        return _openroadpy.Corners_rbegin(self)

    def rend(self):
        return _openroadpy.Corners_rend(self)

    def clear(self):
        return _openroadpy.Corners_clear(self)

    def get_allocator(self):
        return _openroadpy.Corners_get_allocator(self)

    def pop_back(self):
        return _openroadpy.Corners_pop_back(self)

    def erase(self, *args):
        return _openroadpy.Corners_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.Corners_swiginit(self, _openroadpy.new_Corners(*args))

    def push_back(self, x):
        return _openroadpy.Corners_push_back(self, x)

    def front(self):
        return _openroadpy.Corners_front(self)

    def back(self):
        return _openroadpy.Corners_back(self)

    def assign(self, n, x):
        return _openroadpy.Corners_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.Corners_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.Corners_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.Corners_reserve(self, n)

    def capacity(self):
        return _openroadpy.Corners_capacity(self)
    __swig_destroy__ = _openroadpy.delete_Corners

# Register Corners in _openroadpy:
_openroadpy.Corners_swigregister(Corners)
class MTerms(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.MTerms_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.MTerms___nonzero__(self)

    def __bool__(self):
        return _openroadpy.MTerms___bool__(self)

    def __len__(self):
        return _openroadpy.MTerms___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.MTerms___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.MTerms___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.MTerms___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.MTerms___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.MTerms___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.MTerms___setitem__(self, *args)

    def pop(self):
        return _openroadpy.MTerms_pop(self)

    def append(self, x):
        return _openroadpy.MTerms_append(self, x)

    def empty(self):
        return _openroadpy.MTerms_empty(self)

    def size(self):
        return _openroadpy.MTerms_size(self)

    def swap(self, v):
        return _openroadpy.MTerms_swap(self, v)

    def begin(self):
        return _openroadpy.MTerms_begin(self)

    def end(self):
        return _openroadpy.MTerms_end(self)

    def rbegin(self):
        return _openroadpy.MTerms_rbegin(self)

    def rend(self):
        return _openroadpy.MTerms_rend(self)

    def clear(self):
        return _openroadpy.MTerms_clear(self)

    def get_allocator(self):
        return _openroadpy.MTerms_get_allocator(self)

    def pop_back(self):
        return _openroadpy.MTerms_pop_back(self)

    def erase(self, *args):
        return _openroadpy.MTerms_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.MTerms_swiginit(self, _openroadpy.new_MTerms(*args))

    def push_back(self, x):
        return _openroadpy.MTerms_push_back(self, x)

    def front(self):
        return _openroadpy.MTerms_front(self)

    def back(self):
        return _openroadpy.MTerms_back(self)

    def assign(self, n, x):
        return _openroadpy.MTerms_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.MTerms_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.MTerms_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.MTerms_reserve(self, n)

    def capacity(self):
        return _openroadpy.MTerms_capacity(self)
    __swig_destroy__ = _openroadpy.delete_MTerms

# Register MTerms in _openroadpy:
_openroadpy.MTerms_swigregister(MTerms)
class Masters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.Masters_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.Masters___nonzero__(self)

    def __bool__(self):
        return _openroadpy.Masters___bool__(self)

    def __len__(self):
        return _openroadpy.Masters___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.Masters___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.Masters___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.Masters___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.Masters___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.Masters___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.Masters___setitem__(self, *args)

    def pop(self):
        return _openroadpy.Masters_pop(self)

    def append(self, x):
        return _openroadpy.Masters_append(self, x)

    def empty(self):
        return _openroadpy.Masters_empty(self)

    def size(self):
        return _openroadpy.Masters_size(self)

    def swap(self, v):
        return _openroadpy.Masters_swap(self, v)

    def begin(self):
        return _openroadpy.Masters_begin(self)

    def end(self):
        return _openroadpy.Masters_end(self)

    def rbegin(self):
        return _openroadpy.Masters_rbegin(self)

    def rend(self):
        return _openroadpy.Masters_rend(self)

    def clear(self):
        return _openroadpy.Masters_clear(self)

    def get_allocator(self):
        return _openroadpy.Masters_get_allocator(self)

    def pop_back(self):
        return _openroadpy.Masters_pop_back(self)

    def erase(self, *args):
        return _openroadpy.Masters_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.Masters_swiginit(self, _openroadpy.new_Masters(*args))

    def push_back(self, x):
        return _openroadpy.Masters_push_back(self, x)

    def front(self):
        return _openroadpy.Masters_front(self)

    def back(self):
        return _openroadpy.Masters_back(self)

    def assign(self, n, x):
        return _openroadpy.Masters_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.Masters_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.Masters_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.Masters_reserve(self, n)

    def capacity(self):
        return _openroadpy.Masters_capacity(self)
    __swig_destroy__ = _openroadpy.delete_Masters

# Register Masters in _openroadpy:
_openroadpy.Masters_swigregister(Masters)
class Tech(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, interp=None, log_filename=None, metrics_filename=None):
        _openroadpy.Tech_swiginit(self, _openroadpy.new_Tech(interp, log_filename, metrics_filename))
    __swig_destroy__ = _openroadpy.delete_Tech

    def readLef(self, file_name):
        return _openroadpy.Tech_readLef(self, file_name)

    def readLiberty(self, file_name):
        return _openroadpy.Tech_readLiberty(self, file_name)

    def getDB(self):
        return _openroadpy.Tech_getDB(self)

    def getTech(self):
        return _openroadpy.Tech_getTech(self)

    def getSta(self):
        return _openroadpy.Tech_getSta(self)

    def nominalProcess(self):
        return _openroadpy.Tech_nominalProcess(self)

    def nominalVoltage(self):
        return _openroadpy.Tech_nominalVoltage(self)

    def nominalTemperature(self):
        return _openroadpy.Tech_nominalTemperature(self)

    def timeScale(self):
        return _openroadpy.Tech_timeScale(self)

    def resistanceScale(self):
        return _openroadpy.Tech_resistanceScale(self)

    def capacitanceScale(self):
        return _openroadpy.Tech_capacitanceScale(self)

    def voltageScale(self):
        return _openroadpy.Tech_voltageScale(self)

    def currentScale(self):
        return _openroadpy.Tech_currentScale(self)

    def powerScale(self):
        return _openroadpy.Tech_powerScale(self)

    def distanceScale(self):
        return _openroadpy.Tech_distanceScale(self)

# Register Tech in _openroadpy:
_openroadpy.Tech_swigregister(Tech)
class Design(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, tech):
        _openroadpy.Design_swiginit(self, _openroadpy.new_Design(tech))

    def readVerilog(self, file_name):
        return _openroadpy.Design_readVerilog(self, file_name)

    def readDef(self, file_name, continue_on_errors=False, floorplan_init=False, incremental=False):
        return _openroadpy.Design_readDef(self, file_name, continue_on_errors, floorplan_init, incremental)

    def link(self, design_name):
        return _openroadpy.Design_link(self, design_name)

    def readDb(self, *args):
        return _openroadpy.Design_readDb(self, *args)

    def writeDb(self, *args):
        return _openroadpy.Design_writeDb(self, *args)

    def writeDef(self, file_name):
        return _openroadpy.Design_writeDef(self, file_name)

    def getBlock(self):
        return _openroadpy.Design_getBlock(self)

    def getLogger(self):
        return _openroadpy.Design_getLogger(self)

    def micronToDBU(self, coord):
        return _openroadpy.Design_micronToDBU(self, coord)

    def evalTclString(self, cmd):
        return _openroadpy.Design_evalTclString(self, cmd)

    def getTech(self):
        return _openroadpy.Design_getTech(self)

    def isSequential(self, master):
        return _openroadpy.Design_isSequential(self, master)

    def isBuffer(self, master):
        return _openroadpy.Design_isBuffer(self, master)

    def isInverter(self, master):
        return _openroadpy.Design_isInverter(self, master)

    def isInSupply(self, pin):
        return _openroadpy.Design_isInSupply(self, pin)

    def getITermName(self, pin):
        return _openroadpy.Design_getITermName(self, pin)

    def isInClock(self, *args):
        return _openroadpy.Design_isInClock(self, *args)

    def getNetRoutedLength(self, net):
        return _openroadpy.Design_getNetRoutedLength(self, net)

    def getAntennaChecker(self):
        return _openroadpy.Design_getAntennaChecker(self)

    def getClockGating(self):
        return _openroadpy.Design_getClockGating(self)

    def getTritonCts(self):
        return _openroadpy.Design_getTritonCts(self)

    def getDft(self):
        return _openroadpy.Design_getDft(self)

    def getOpendp(self):
        return _openroadpy.Design_getOpendp(self)

    def getExample(self):
        return _openroadpy.Design_getExample(self)

    def getTritonRoute(self):
        return _openroadpy.Design_getTritonRoute(self)

    def getFinale(self):
        return _openroadpy.Design_getFinale(self)

    def getReplace(self):
        return _openroadpy.Design_getReplace(self)

    def getGlobalRouter(self):
        return _openroadpy.Design_getGlobalRouter(self)

    def getFloorplan(self):
        return _openroadpy.Design_getFloorplan(self)

    def getMacroPlacer(self):
        return _openroadpy.Design_getMacroPlacer(self)

    def getDb(self):
        return _openroadpy.Design_getDb(self)

    def getICeWall(self):
        return _openroadpy.Design_getICeWall(self)

    def getPartitionMgr(self):
        return _openroadpy.Design_getPartitionMgr(self)

    def getPdnGen(self):
        return _openroadpy.Design_getPdnGen(self)

    def getIOPlacer(self):
        return _openroadpy.Design_getIOPlacer(self)

    def getPDNSim(self):
        return _openroadpy.Design_getPDNSim(self)

    def getOpenRCX(self):
        return _openroadpy.Design_getOpenRCX(self)

    def getRestructure(self):
        return _openroadpy.Design_getRestructure(self)

    def getResizer(self):
        return _openroadpy.Design_getResizer(self)

    def getSteinerTreeBuilder(self):
        return _openroadpy.Design_getSteinerTreeBuilder(self)

    def getTapcell(self):
        return _openroadpy.Design_getTapcell(self)

    def getOpenRoad(self):
        return _openroadpy.Design_getOpenRoad(self)

    @staticmethod
    def createDetachedDb():
        return _openroadpy.Design_createDetachedDb()
    __swig_destroy__ = _openroadpy.delete_Design

# Register Design in _openroadpy:
_openroadpy.Design_swigregister(Design)

def Design_createDetachedDb():
    return _openroadpy.Design_createDetachedDb()

class Timing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, design):
        _openroadpy.Timing_swiginit(self, _openroadpy.new_Timing(design))
    Rise = _openroadpy.Timing_Rise
    Fall = _openroadpy.Timing_Fall
    Min = _openroadpy.Timing_Min
    Max = _openroadpy.Timing_Max

    def findClocksMatching(self, pattern, regexp, nocase):
        return _openroadpy.Timing_findClocksMatching(self, pattern, regexp, nocase)

    def getPinArrival(self, *args):
        return _openroadpy.Timing_getPinArrival(self, *args)

    def isTimeInf(self, time):
        return _openroadpy.Timing_isTimeInf(self, time)

    def getPinSlew(self, *args):
        return _openroadpy.Timing_getPinSlew(self, *args)

    def getPinSlack(self, *args):
        return _openroadpy.Timing_getPinSlack(self, *args)

    def isEndpoint(self, *args):
        return _openroadpy.Timing_isEndpoint(self, *args)

    def getNetCap(self, net, corner, minmax):
        return _openroadpy.Timing_getNetCap(self, net, corner, minmax)

    def getPortCap(self, pin, corner, minmax):
        return _openroadpy.Timing_getPortCap(self, pin, corner, minmax)

    def getMaxCapLimit(self, pin):
        return _openroadpy.Timing_getMaxCapLimit(self, pin)

    def getMaxSlewLimit(self, pin):
        return _openroadpy.Timing_getMaxSlewLimit(self, pin)

    def staticPower(self, inst, corner):
        return _openroadpy.Timing_staticPower(self, inst, corner)

    def dynamicPower(self, inst, corner):
        return _openroadpy.Timing_dynamicPower(self, inst, corner)

    def getTimingFanoutFrom(self, input):
        return _openroadpy.Timing_getTimingFanoutFrom(self, input)

    def getCorners(self):
        return _openroadpy.Timing_getCorners(self)

    def cmdCorner(self):
        return _openroadpy.Timing_cmdCorner(self)

    def findCorner(self, name):
        return _openroadpy.Timing_findCorner(self, name)

    def makeEquivCells(self):
        return _openroadpy.Timing_makeEquivCells(self)

    def equivCells(self, master):
        return _openroadpy.Timing_equivCells(self, master)
    __swig_destroy__ = _openroadpy.delete_Timing

# Register Timing in _openroadpy:
_openroadpy.Timing_swigregister(Timing)
class Replace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.Replace_swiginit(self, _openroadpy.new_Replace())
    __swig_destroy__ = _openroadpy.delete_Replace

    def init(self, odb, sta, resizer, router, logger):
        return _openroadpy.Replace_init(self, odb, sta, resizer, router, logger)

    def reset(self):
        return _openroadpy.Replace_reset(self)

    def doIncrementalPlace(self, threads):
        return _openroadpy.Replace_doIncrementalPlace(self, threads)

    def doInitialPlace(self, threads):
        return _openroadpy.Replace_doInitialPlace(self, threads)

    def runMBFF(self, max_sz, alpha, beta, threads, num_paths):
        return _openroadpy.Replace_runMBFF(self, max_sz, alpha, beta, threads, num_paths)

    def addPlacementCluster(self, cluster):
        return _openroadpy.Replace_addPlacementCluster(self, cluster)

    def doNesterovPlace(self, threads, start_iter=0):
        return _openroadpy.Replace_doNesterovPlace(self, threads, start_iter)

    def setInitialPlaceMaxIter(self, iter):
        return _openroadpy.Replace_setInitialPlaceMaxIter(self, iter)

    def setInitialPlaceMinDiffLength(self, length):
        return _openroadpy.Replace_setInitialPlaceMinDiffLength(self, length)

    def setInitialPlaceMaxSolverIter(self, iter):
        return _openroadpy.Replace_setInitialPlaceMaxSolverIter(self, iter)

    def setInitialPlaceMaxFanout(self, fanout):
        return _openroadpy.Replace_setInitialPlaceMaxFanout(self, fanout)

    def setInitialPlaceNetWeightScale(self, scale):
        return _openroadpy.Replace_setInitialPlaceNetWeightScale(self, scale)

    def setNesterovPlaceMaxIter(self, iter):
        return _openroadpy.Replace_setNesterovPlaceMaxIter(self, iter)

    def setBinGridCnt(self, binGridCntX, binGridCntY):
        return _openroadpy.Replace_setBinGridCnt(self, binGridCntX, binGridCntY)

    def setTargetDensity(self, density):
        return _openroadpy.Replace_setTargetDensity(self, density)

    def setUniformTargetDensityMode(self, mode):
        return _openroadpy.Replace_setUniformTargetDensityMode(self, mode)

    def setTargetOverflow(self, overflow):
        return _openroadpy.Replace_setTargetOverflow(self, overflow)

    def setInitDensityPenalityFactor(self, penaltyFactor):
        return _openroadpy.Replace_setInitDensityPenalityFactor(self, penaltyFactor)

    def setInitWireLengthCoef(self, coef):
        return _openroadpy.Replace_setInitWireLengthCoef(self, coef)

    def setMinPhiCoef(self, minPhiCoef):
        return _openroadpy.Replace_setMinPhiCoef(self, minPhiCoef)

    def setMaxPhiCoef(self, maxPhiCoef):
        return _openroadpy.Replace_setMaxPhiCoef(self, maxPhiCoef)

    def getUniformTargetDensity(self, threads):
        return _openroadpy.Replace_getUniformTargetDensity(self, threads)

    def setReferenceHpwl(self, refHpwl):
        return _openroadpy.Replace_setReferenceHpwl(self, refHpwl)

    def setPadLeft(self, padding):
        return _openroadpy.Replace_setPadLeft(self, padding)

    def setPadRight(self, padding):
        return _openroadpy.Replace_setPadRight(self, padding)

    def setTimingDrivenMode(self, mode):
        return _openroadpy.Replace_setTimingDrivenMode(self, mode)

    def setSkipIoMode(self, mode):
        return _openroadpy.Replace_setSkipIoMode(self, mode)

    def setDisableRevertIfDiverge(self, mode):
        return _openroadpy.Replace_setDisableRevertIfDiverge(self, mode)

    def setRoutabilityDrivenMode(self, mode):
        return _openroadpy.Replace_setRoutabilityDrivenMode(self, mode)

    def setRoutabilityUseGrt(self, mode):
        return _openroadpy.Replace_setRoutabilityUseGrt(self, mode)

    def setRoutabilityCheckOverflow(self, overflow):
        return _openroadpy.Replace_setRoutabilityCheckOverflow(self, overflow)

    def setRoutabilityMaxDensity(self, density):
        return _openroadpy.Replace_setRoutabilityMaxDensity(self, density)

    def setRoutabilityMaxInflationIter(self, iter):
        return _openroadpy.Replace_setRoutabilityMaxInflationIter(self, iter)

    def setRoutabilityTargetRcMetric(self, rc):
        return _openroadpy.Replace_setRoutabilityTargetRcMetric(self, rc)

    def setRoutabilityInflationRatioCoef(self, coef):
        return _openroadpy.Replace_setRoutabilityInflationRatioCoef(self, coef)

    def setRoutabilityMaxInflationRatio(self, ratio):
        return _openroadpy.Replace_setRoutabilityMaxInflationRatio(self, ratio)

    def setRoutabilityRcCoefficients(self, k1, k2, k3, k4):
        return _openroadpy.Replace_setRoutabilityRcCoefficients(self, k1, k2, k3, k4)

    def setEnableRoutingCongestion(self, mode):
        return _openroadpy.Replace_setEnableRoutingCongestion(self, mode)

    def addTimingNetWeightOverflow(self, overflow):
        return _openroadpy.Replace_addTimingNetWeightOverflow(self, overflow)

    def setTimingNetWeightMax(self, max):
        return _openroadpy.Replace_setTimingNetWeightMax(self, max)

    def setKeepResizeBelowOverflow(self, overflow):
        return _openroadpy.Replace_setKeepResizeBelowOverflow(self, overflow)

    def setDebug(self, pause_iterations, update_iterations, draw_bins, initial, inst, start_iter, generate_images, images_path):
        return _openroadpy.Replace_setDebug(self, pause_iterations, update_iterations, draw_bins, initial, inst, start_iter, generate_images, images_path)

# Register Replace in _openroadpy:
_openroadpy.Replace_swigregister(Replace)
class site_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.site_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.site_list___nonzero__(self)

    def __bool__(self):
        return _openroadpy.site_list___bool__(self)

    def __len__(self):
        return _openroadpy.site_list___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.site_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.site_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.site_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.site_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.site_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.site_list___setitem__(self, *args)

    def pop(self):
        return _openroadpy.site_list_pop(self)

    def append(self, x):
        return _openroadpy.site_list_append(self, x)

    def empty(self):
        return _openroadpy.site_list_empty(self)

    def size(self):
        return _openroadpy.site_list_size(self)

    def swap(self, v):
        return _openroadpy.site_list_swap(self, v)

    def begin(self):
        return _openroadpy.site_list_begin(self)

    def end(self):
        return _openroadpy.site_list_end(self)

    def rbegin(self):
        return _openroadpy.site_list_rbegin(self)

    def rend(self):
        return _openroadpy.site_list_rend(self)

    def clear(self):
        return _openroadpy.site_list_clear(self)

    def get_allocator(self):
        return _openroadpy.site_list_get_allocator(self)

    def pop_back(self):
        return _openroadpy.site_list_pop_back(self)

    def erase(self, *args):
        return _openroadpy.site_list_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.site_list_swiginit(self, _openroadpy.new_site_list(*args))

    def push_back(self, x):
        return _openroadpy.site_list_push_back(self, x)

    def front(self):
        return _openroadpy.site_list_front(self)

    def back(self):
        return _openroadpy.site_list_back(self)

    def assign(self, n, x):
        return _openroadpy.site_list_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.site_list_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.site_list_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.site_list_reserve(self, n)

    def capacity(self):
        return _openroadpy.site_list_capacity(self)
    __swig_destroy__ = _openroadpy.delete_site_list

# Register site_list in _openroadpy:
_openroadpy.site_list_swigregister(site_list)
cvar = _openroadpy.cvar
format_label_int = cvar.format_label_int
format_label_float = cvar.format_label_float
format_label_um2 = cvar.format_label_um2
format_label_percent = cvar.format_label_percent
format_label_um2_with_delta = cvar.format_label_um2_with_delta

class site_set(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.site_set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.site_set___nonzero__(self)

    def __bool__(self):
        return _openroadpy.site_set___bool__(self)

    def __len__(self):
        return _openroadpy.site_set___len__(self)

    def append(self, x):
        return _openroadpy.site_set_append(self, x)

    def __contains__(self, x):
        return _openroadpy.site_set___contains__(self, x)

    def __getitem__(self, i):
        return _openroadpy.site_set___getitem__(self, i)

    def add(self, x):
        return _openroadpy.site_set_add(self, x)

    def discard(self, x):
        return _openroadpy.site_set_discard(self, x)

    def __init__(self, *args):
        _openroadpy.site_set_swiginit(self, _openroadpy.new_site_set(*args))

    def empty(self):
        return _openroadpy.site_set_empty(self)

    def size(self):
        return _openroadpy.site_set_size(self)

    def clear(self):
        return _openroadpy.site_set_clear(self)

    def swap(self, v):
        return _openroadpy.site_set_swap(self, v)

    def count(self, x):
        return _openroadpy.site_set_count(self, x)

    def begin(self):
        return _openroadpy.site_set_begin(self)

    def end(self):
        return _openroadpy.site_set_end(self)

    def rbegin(self):
        return _openroadpy.site_set_rbegin(self)

    def rend(self):
        return _openroadpy.site_set_rend(self)

    def erase(self, *args):
        return _openroadpy.site_set_erase(self, *args)

    def find(self, x):
        return _openroadpy.site_set_find(self, x)

    def lower_bound(self, x):
        return _openroadpy.site_set_lower_bound(self, x)

    def upper_bound(self, x):
        return _openroadpy.site_set_upper_bound(self, x)

    def equal_range(self, x):
        return _openroadpy.site_set_equal_range(self, x)

    def insert(self, __x):
        return _openroadpy.site_set_insert(self, __x)
    __swig_destroy__ = _openroadpy.delete_site_set

# Register site_set in _openroadpy:
_openroadpy.site_set_swigregister(site_set)
RowParity_NONE = _openroadpy.RowParity_NONE
RowParity_EVEN = _openroadpy.RowParity_EVEN
RowParity_ODD = _openroadpy.RowParity_ODD
class InitFloorplan(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def makePolygonDie(self, polygon):
        return _openroadpy.InitFloorplan_makePolygonDie(self, polygon)

    def __init__(self, *args):
        _openroadpy.InitFloorplan_swiginit(self, _openroadpy.new_InitFloorplan(*args))

    def initFloorplan(self, *args):
        return _openroadpy.InitFloorplan_initFloorplan(self, *args)

    def insertTiecells(self, *args):
        return _openroadpy.InitFloorplan_insertTiecells(self, *args)

    def makeDie(self, die):
        return _openroadpy.InitFloorplan_makeDie(self, die)

    def makeDieUtilization(self, utilization, aspect_ratio, core_space_bottom, core_space_top, core_space_left, core_space_right):
        return _openroadpy.InitFloorplan_makeDieUtilization(self, utilization, aspect_ratio, core_space_bottom, core_space_top, core_space_left, core_space_right)

    def makeRowsWithSpacing(self, *args):
        return _openroadpy.InitFloorplan_makeRowsWithSpacing(self, *args)

    def makeRows(self, *args):
        return _openroadpy.InitFloorplan_makeRows(self, *args)

    def makePolygonRows(self, *args):
        return _openroadpy.InitFloorplan_makePolygonRows(self, *args)

    def makeTracks(self, *args):
        return _openroadpy.InitFloorplan_makeTracks(self, *args)

    def makeTracksNonUniform(self, layer, x_offset, x_pitch, y_offset, y_pitch, first_last_pitch):
        return _openroadpy.InitFloorplan_makeTracksNonUniform(self, layer, x_offset, x_pitch, y_offset, y_pitch, first_last_pitch)

    def findSite(self, site_name):
        return _openroadpy.InitFloorplan_findSite(self, site_name)
    __swig_destroy__ = _openroadpy.delete_InitFloorplan

# Register InitFloorplan in _openroadpy:
_openroadpy.InitFloorplan_swigregister(InitFloorplan)
class ViolationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.ViolationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.ViolationVector___nonzero__(self)

    def __bool__(self):
        return _openroadpy.ViolationVector___bool__(self)

    def __len__(self):
        return _openroadpy.ViolationVector___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.ViolationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.ViolationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.ViolationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.ViolationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.ViolationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.ViolationVector___setitem__(self, *args)

    def pop(self):
        return _openroadpy.ViolationVector_pop(self)

    def append(self, x):
        return _openroadpy.ViolationVector_append(self, x)

    def empty(self):
        return _openroadpy.ViolationVector_empty(self)

    def size(self):
        return _openroadpy.ViolationVector_size(self)

    def swap(self, v):
        return _openroadpy.ViolationVector_swap(self, v)

    def begin(self):
        return _openroadpy.ViolationVector_begin(self)

    def end(self):
        return _openroadpy.ViolationVector_end(self)

    def rbegin(self):
        return _openroadpy.ViolationVector_rbegin(self)

    def rend(self):
        return _openroadpy.ViolationVector_rend(self)

    def clear(self):
        return _openroadpy.ViolationVector_clear(self)

    def get_allocator(self):
        return _openroadpy.ViolationVector_get_allocator(self)

    def pop_back(self):
        return _openroadpy.ViolationVector_pop_back(self)

    def erase(self, *args):
        return _openroadpy.ViolationVector_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.ViolationVector_swiginit(self, _openroadpy.new_ViolationVector(*args))

    def push_back(self, x):
        return _openroadpy.ViolationVector_push_back(self, x)

    def front(self):
        return _openroadpy.ViolationVector_front(self)

    def back(self):
        return _openroadpy.ViolationVector_back(self)

    def assign(self, n, x):
        return _openroadpy.ViolationVector_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.ViolationVector_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.ViolationVector_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.ViolationVector_reserve(self, n)

    def capacity(self):
        return _openroadpy.ViolationVector_capacity(self)
    __swig_destroy__ = _openroadpy.delete_ViolationVector

# Register ViolationVector in _openroadpy:
_openroadpy.ViolationVector_swigregister(ViolationVector)
import src.odb.odb
class NodeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PAR = property(_openroadpy.NodeInfo_PAR_get, _openroadpy.NodeInfo_PAR_set)
    PSR = property(_openroadpy.NodeInfo_PSR_get, _openroadpy.NodeInfo_PSR_set)
    diff_PAR = property(_openroadpy.NodeInfo_diff_PAR_get, _openroadpy.NodeInfo_diff_PAR_set)
    diff_PSR = property(_openroadpy.NodeInfo_diff_PSR_get, _openroadpy.NodeInfo_diff_PSR_set)
    area = property(_openroadpy.NodeInfo_area_get, _openroadpy.NodeInfo_area_set)
    side_area = property(_openroadpy.NodeInfo_side_area_get, _openroadpy.NodeInfo_side_area_set)
    iterm_gate_area = property(_openroadpy.NodeInfo_iterm_gate_area_get, _openroadpy.NodeInfo_iterm_gate_area_set)
    iterm_diff_area = property(_openroadpy.NodeInfo_iterm_diff_area_get, _openroadpy.NodeInfo_iterm_diff_area_set)
    CAR = property(_openroadpy.NodeInfo_CAR_get, _openroadpy.NodeInfo_CAR_set)
    CSR = property(_openroadpy.NodeInfo_CSR_get, _openroadpy.NodeInfo_CSR_set)
    diff_CAR = property(_openroadpy.NodeInfo_diff_CAR_get, _openroadpy.NodeInfo_diff_CAR_set)
    diff_CSR = property(_openroadpy.NodeInfo_diff_CSR_get, _openroadpy.NodeInfo_diff_CSR_set)
    excess_ratio_PAR = property(_openroadpy.NodeInfo_excess_ratio_PAR_get, _openroadpy.NodeInfo_excess_ratio_PAR_set)
    excess_ratio_PSR = property(_openroadpy.NodeInfo_excess_ratio_PSR_get, _openroadpy.NodeInfo_excess_ratio_PSR_set)
    iterms = property(_openroadpy.NodeInfo_iterms_get, _openroadpy.NodeInfo_iterms_set)

    def __iadd__(self, a):
        return _openroadpy.NodeInfo___iadd__(self, a)

    def __init__(self):
        _openroadpy.NodeInfo_swiginit(self, _openroadpy.new_NodeInfo())
    __swig_destroy__ = _openroadpy.delete_NodeInfo

# Register NodeInfo in _openroadpy:
_openroadpy.NodeInfo_swigregister(NodeInfo)
class ViolationReport(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    violated = property(_openroadpy.ViolationReport_violated_get, _openroadpy.ViolationReport_violated_set)
    report = property(_openroadpy.ViolationReport_report_get, _openroadpy.ViolationReport_report_set)

    def __init__(self):
        _openroadpy.ViolationReport_swiginit(self, _openroadpy.new_ViolationReport())
    __swig_destroy__ = _openroadpy.delete_ViolationReport

# Register ViolationReport in _openroadpy:
_openroadpy.ViolationReport_swigregister(ViolationReport)
class Violation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    routing_level = property(_openroadpy.Violation_routing_level_get, _openroadpy.Violation_routing_level_set)
    gates = property(_openroadpy.Violation_gates_get, _openroadpy.Violation_gates_set)
    diode_count_per_gate = property(_openroadpy.Violation_diode_count_per_gate_get, _openroadpy.Violation_diode_count_per_gate_set)
    excess_ratio = property(_openroadpy.Violation_excess_ratio_get, _openroadpy.Violation_excess_ratio_set)

    def __init__(self):
        _openroadpy.Violation_swiginit(self, _openroadpy.new_Violation())
    __swig_destroy__ = _openroadpy.delete_Violation

# Register Violation in _openroadpy:
_openroadpy.Violation_swigregister(Violation)
class AntennaChecker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.AntennaChecker_swiginit(self, _openroadpy.new_AntennaChecker())
    __swig_destroy__ = _openroadpy.delete_AntennaChecker

    def init(self, db, logger):
        return _openroadpy.AntennaChecker_init(self, db, logger)

    def checkAntennas(self, net=None, num_threads=1, verbose=False):
        return _openroadpy.AntennaChecker_checkAntennas(self, net, num_threads, verbose)

    def antennaViolationCount(self):
        return _openroadpy.AntennaChecker_antennaViolationCount(self)

    def getAntennaViolations(self, net, diode_mterm, ratio_margin):
        return _openroadpy.AntennaChecker_getAntennaViolations(self, net, diode_mterm, ratio_margin)

    def initAntennaRules(self):
        return _openroadpy.AntennaChecker_initAntennaRules(self)

    def setReportFileName(self, file_name):
        return _openroadpy.AntennaChecker_setReportFileName(self, file_name)

    def makeNetWiresFromGuides(self, nets):
        return _openroadpy.AntennaChecker_makeNetWiresFromGuides(self, nets)

# Register AntennaChecker in _openroadpy:
_openroadpy.AntennaChecker_swigregister(AntennaChecker)
class CtsOptions(src.odb.odb.dbBlockCallBackObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NdrStrategy_NONE = _openroadpy.CtsOptions_NdrStrategy_NONE
    NdrStrategy_ROOT_ONLY = _openroadpy.CtsOptions_NdrStrategy_ROOT_ONLY
    NdrStrategy_HALF = _openroadpy.CtsOptions_NdrStrategy_HALF
    NdrStrategy_FULL = _openroadpy.CtsOptions_NdrStrategy_FULL
    MasterType_DUMMY = _openroadpy.CtsOptions_MasterType_DUMMY
    MasterType_TREE = _openroadpy.CtsOptions_MasterType_TREE

    def __init__(self, logger, sttBuildder):
        _openroadpy.CtsOptions_swiginit(self, _openroadpy.new_CtsOptions(logger, sttBuildder))

    def setClockNets(self, clockNets):
        return _openroadpy.CtsOptions_setClockNets(self, clockNets)

    def getClockNets(self):
        return _openroadpy.CtsOptions_getClockNets(self)

    def setRootBuffer(self, buffer):
        return _openroadpy.CtsOptions_setRootBuffer(self, buffer)

    def getRootBuffer(self):
        return _openroadpy.CtsOptions_getRootBuffer(self)

    def setBufferList(self, buffers):
        return _openroadpy.CtsOptions_setBufferList(self, buffers)

    def getBufferList(self):
        return _openroadpy.CtsOptions_getBufferList(self)

    def setDbUnits(self, units):
        return _openroadpy.CtsOptions_setDbUnits(self, units)

    def getDbUnits(self):
        return _openroadpy.CtsOptions_getDbUnits(self)

    def setWireSegmentUnit(self, wireSegmentUnit):
        return _openroadpy.CtsOptions_setWireSegmentUnit(self, wireSegmentUnit)

    def getWireSegmentUnit(self):
        return _openroadpy.CtsOptions_getWireSegmentUnit(self)

    def setPlotSolution(self, plot):
        return _openroadpy.CtsOptions_setPlotSolution(self, plot)

    def getPlotSolution(self):
        return _openroadpy.CtsOptions_getPlotSolution(self)

    def setSinkClustering(self, enable):
        return _openroadpy.CtsOptions_setSinkClustering(self, enable)

    def getSinkClustering(self):
        return _openroadpy.CtsOptions_getSinkClustering(self)

    def setSinkClusteringUseMaxCap(self, useMaxCap):
        return _openroadpy.CtsOptions_setSinkClusteringUseMaxCap(self, useMaxCap)

    def getSinkClusteringUseMaxCap(self):
        return _openroadpy.CtsOptions_getSinkClusteringUseMaxCap(self)

    def setNumMaxLeafSinks(self, numSinks):
        return _openroadpy.CtsOptions_setNumMaxLeafSinks(self, numSinks)

    def getNumMaxLeafSinks(self):
        return _openroadpy.CtsOptions_getNumMaxLeafSinks(self)

    def setMaxSlew(self, slew):
        return _openroadpy.CtsOptions_setMaxSlew(self, slew)

    def getMaxSlew(self):
        return _openroadpy.CtsOptions_getMaxSlew(self)

    def setMaxCharSlew(self, slew):
        return _openroadpy.CtsOptions_setMaxCharSlew(self, slew)

    def getMaxCharSlew(self):
        return _openroadpy.CtsOptions_getMaxCharSlew(self)

    def setMaxCharCap(self, cap):
        return _openroadpy.CtsOptions_setMaxCharCap(self, cap)

    def getMaxCharCap(self):
        return _openroadpy.CtsOptions_getMaxCharCap(self)

    def setCharWirelengthIterations(self, wirelengthIterations):
        return _openroadpy.CtsOptions_setCharWirelengthIterations(self, wirelengthIterations)

    def getCharWirelengthIterations(self):
        return _openroadpy.CtsOptions_getCharWirelengthIterations(self)

    def setCapSteps(self, steps):
        return _openroadpy.CtsOptions_setCapSteps(self, steps)

    def getCapSteps(self):
        return _openroadpy.CtsOptions_getCapSteps(self)

    def setSlewSteps(self, steps):
        return _openroadpy.CtsOptions_setSlewSteps(self, steps)

    def getSlewSteps(self):
        return _openroadpy.CtsOptions_getSlewSteps(self)

    def setClockTreeMaxDepth(self, depth):
        return _openroadpy.CtsOptions_setClockTreeMaxDepth(self, depth)

    def getClockTreeMaxDepth(self):
        return _openroadpy.CtsOptions_getClockTreeMaxDepth(self)

    def setEnableFakeLutEntries(self, enable):
        return _openroadpy.CtsOptions_setEnableFakeLutEntries(self, enable)

    def isFakeLutEntriesEnabled(self):
        return _openroadpy.CtsOptions_isFakeLutEntriesEnabled(self)

    def setForceBuffersOnLeafLevel(self, force):
        return _openroadpy.CtsOptions_setForceBuffersOnLeafLevel(self, force)

    def forceBuffersOnLeafLevel(self):
        return _openroadpy.CtsOptions_forceBuffersOnLeafLevel(self)

    def setBufDistRatio(self, ratio):
        return _openroadpy.CtsOptions_setBufDistRatio(self, ratio)

    def getBufDistRatio(self):
        return _openroadpy.CtsOptions_getBufDistRatio(self)

    def setClockNetsObjs(self, nets):
        return _openroadpy.CtsOptions_setClockNetsObjs(self, nets)

    def getClockNetsObjs(self):
        return _openroadpy.CtsOptions_getClockNetsObjs(self)

    def setMetricsFile(self, metricFile):
        return _openroadpy.CtsOptions_setMetricsFile(self, metricFile)

    def getMetricsFile(self):
        return _openroadpy.CtsOptions_getMetricsFile(self)

    def setNumClockRoots(self, roots):
        return _openroadpy.CtsOptions_setNumClockRoots(self, roots)

    def getNumClockRoots(self):
        return _openroadpy.CtsOptions_getNumClockRoots(self)

    def setNumClockSubnets(self, nets):
        return _openroadpy.CtsOptions_setNumClockSubnets(self, nets)

    def getNumClockSubnets(self):
        return _openroadpy.CtsOptions_getNumClockSubnets(self)

    def setNumBuffersInserted(self, buffers):
        return _openroadpy.CtsOptions_setNumBuffersInserted(self, buffers)

    def getNumBuffersInserted(self):
        return _openroadpy.CtsOptions_getNumBuffersInserted(self)

    def setNumSinks(self, sinks):
        return _openroadpy.CtsOptions_setNumSinks(self, sinks)

    def getNumSinks(self):
        return _openroadpy.CtsOptions_getNumSinks(self)

    def setTreeBuffer(self, buffer):
        return _openroadpy.CtsOptions_setTreeBuffer(self, buffer)

    def getTreeBuffer(self):
        return _openroadpy.CtsOptions_getTreeBuffer(self)

    def getClusteringPower(self):
        return _openroadpy.CtsOptions_getClusteringPower(self)

    def setClusteringPower(self, power):
        return _openroadpy.CtsOptions_setClusteringPower(self, power)

    def getClusteringCapacity(self):
        return _openroadpy.CtsOptions_getClusteringCapacity(self)

    def setClusteringCapacity(self, capacity):
        return _openroadpy.CtsOptions_setClusteringCapacity(self, capacity)

    def setMaxFanout(self, maxFanout):
        return _openroadpy.CtsOptions_setMaxFanout(self, maxFanout)

    def getMaxFanout(self):
        return _openroadpy.CtsOptions_getMaxFanout(self)

    def getBufferDistance(self):
        return _openroadpy.CtsOptions_getBufferDistance(self)

    def setBufferDistance(self, distance_dbu):
        return _openroadpy.CtsOptions_setBufferDistance(self, distance_dbu)

    def getVertexBufferDistance(self):
        return _openroadpy.CtsOptions_getVertexBufferDistance(self)

    def setVertexBufferDistance(self, distance_dbu):
        return _openroadpy.CtsOptions_setVertexBufferDistance(self, distance_dbu)

    def isVertexBuffersEnabled(self):
        return _openroadpy.CtsOptions_isVertexBuffersEnabled(self)

    def setVertexBuffersEnabled(self, enable):
        return _openroadpy.CtsOptions_setVertexBuffersEnabled(self, enable)

    def isSimpleSegmentEnabled(self):
        return _openroadpy.CtsOptions_isSimpleSegmentEnabled(self)

    def setSimpleSegmentsEnabled(self, enable):
        return _openroadpy.CtsOptions_setSimpleSegmentsEnabled(self, enable)

    def getMaxDiameter(self):
        return _openroadpy.CtsOptions_getMaxDiameter(self)

    def setMaxDiameter(self, distance):
        return _openroadpy.CtsOptions_setMaxDiameter(self, distance)

    def isMaxDiameterSet(self):
        return _openroadpy.CtsOptions_isMaxDiameterSet(self)

    def getSinkClusteringDiameters(self):
        return _openroadpy.CtsOptions_getSinkClusteringDiameters(self)

    def getSinkClusteringSize(self):
        return _openroadpy.CtsOptions_getSinkClusteringSize(self)

    def setSinkClusteringSize(self, size):
        return _openroadpy.CtsOptions_setSinkClusteringSize(self, size)

    def isSinkClusteringSizeSet(self):
        return _openroadpy.CtsOptions_isSinkClusteringSizeSet(self)

    def getSinkClusteringSizes(self):
        return _openroadpy.CtsOptions_getSinkClusteringSizes(self)

    def limitSinkClusteringSizes(self, limit):
        return _openroadpy.CtsOptions_limitSinkClusteringSizes(self, limit)

    def getSinkClusteringLevels(self):
        return _openroadpy.CtsOptions_getSinkClusteringLevels(self)

    def setSinkClusteringLevels(self, levels):
        return _openroadpy.CtsOptions_setSinkClusteringLevels(self, levels)

    def getMacroMaxDiameter(self):
        return _openroadpy.CtsOptions_getMacroMaxDiameter(self)

    def setMacroMaxDiameter(self, distance):
        return _openroadpy.CtsOptions_setMacroMaxDiameter(self, distance)

    def isMacroMaxDiameterSet(self):
        return _openroadpy.CtsOptions_isMacroMaxDiameterSet(self)

    def getMacroSinkClusteringSize(self):
        return _openroadpy.CtsOptions_getMacroSinkClusteringSize(self)

    def setMacroClusteringSize(self, size):
        return _openroadpy.CtsOptions_setMacroClusteringSize(self, size)

    def isMacroSinkClusteringSizeSet(self):
        return _openroadpy.CtsOptions_isMacroSinkClusteringSizeSet(self)

    def getNumStaticLayers(self):
        return _openroadpy.CtsOptions_getNumStaticLayers(self)

    def setBalanceLevels(self, balance):
        return _openroadpy.CtsOptions_setBalanceLevels(self, balance)

    def getBalanceLevels(self):
        return _openroadpy.CtsOptions_getBalanceLevels(self)

    def setNumStaticLayers(self, num):
        return _openroadpy.CtsOptions_setNumStaticLayers(self, num)

    def setSinkBuffer(self, buffer):
        return _openroadpy.CtsOptions_setSinkBuffer(self, buffer)

    def setSinkBufferInputCap(self, cap):
        return _openroadpy.CtsOptions_setSinkBufferInputCap(self, cap)

    def getSinkBufferInputCap(self):
        return _openroadpy.CtsOptions_getSinkBufferInputCap(self)

    def getSinkBuffer(self):
        return _openroadpy.CtsOptions_getSinkBuffer(self)

    def getLogger(self):
        return _openroadpy.CtsOptions_getLogger(self)

    def getSttBuilder(self):
        return _openroadpy.CtsOptions_getSttBuilder(self)

    def setObstructionAware(self, obs):
        return _openroadpy.CtsOptions_setObstructionAware(self, obs)

    def getObstructionAware(self):
        return _openroadpy.CtsOptions_getObstructionAware(self)

    def enableInsertionDelay(self, insDelay):
        return _openroadpy.CtsOptions_enableInsertionDelay(self, insDelay)

    def insertionDelayEnabled(self):
        return _openroadpy.CtsOptions_insertionDelayEnabled(self)

    def setBufferListInferred(self, inferred):
        return _openroadpy.CtsOptions_setBufferListInferred(self, inferred)

    def isBufferListInferred(self):
        return _openroadpy.CtsOptions_isBufferListInferred(self)

    def setSinkBufferInferred(self, inferred):
        return _openroadpy.CtsOptions_setSinkBufferInferred(self, inferred)

    def isSinkBufferInferred(self):
        return _openroadpy.CtsOptions_isSinkBufferInferred(self)

    def setRootBufferInferred(self, inferred):
        return _openroadpy.CtsOptions_setRootBufferInferred(self, inferred)

    def isRootBufferInferred(self):
        return _openroadpy.CtsOptions_isRootBufferInferred(self)

    def setSinkBufferMaxCapDerate(self, derate):
        return _openroadpy.CtsOptions_setSinkBufferMaxCapDerate(self, derate)

    def getSinkBufferMaxCapDerate(self):
        return _openroadpy.CtsOptions_getSinkBufferMaxCapDerate(self)

    def isSinkBufferMaxCapDerateSet(self):
        return _openroadpy.CtsOptions_isSinkBufferMaxCapDerateSet(self)

    def setDelayBufferDerate(self, derate):
        return _openroadpy.CtsOptions_setDelayBufferDerate(self, derate)

    def getDelayBufferDerate(self):
        return _openroadpy.CtsOptions_getDelayBufferDerate(self)

    def enableDummyLoad(self, dummyLoad):
        return _openroadpy.CtsOptions_enableDummyLoad(self, dummyLoad)

    def dummyLoadEnabled(self):
        return _openroadpy.CtsOptions_dummyLoadEnabled(self)

    def getDummyLoadPrefix(self):
        return _openroadpy.CtsOptions_getDummyLoadPrefix(self)

    def setCtsLibrary(self, name):
        return _openroadpy.CtsOptions_setCtsLibrary(self, name)

    def getCtsLibrary(self):
        return _openroadpy.CtsOptions_getCtsLibrary(self)

    def isCtsLibrarySet(self):
        return _openroadpy.CtsOptions_isCtsLibrarySet(self)

    def recordBuffer(self, master, type):
        return _openroadpy.CtsOptions_recordBuffer(self, master, type)

    def getBufferCount(self):
        return _openroadpy.CtsOptions_getBufferCount(self)

    def getDummyCount(self):
        return _openroadpy.CtsOptions_getDummyCount(self)

    def getType(self, inst):
        return _openroadpy.CtsOptions_getType(self, inst)

    def inDbInstCreate(self, *args):
        return _openroadpy.CtsOptions_inDbInstCreate(self, *args)

    def setRepairClockNets(self, value):
        return _openroadpy.CtsOptions_setRepairClockNets(self, value)

    def getRepairClockNets(self):
        return _openroadpy.CtsOptions_getRepairClockNets(self)

    def setApplyNDR(self, strategy):
        return _openroadpy.CtsOptions_setApplyNDR(self, strategy)

    def getApplyNdr(self):
        return _openroadpy.CtsOptions_getApplyNdr(self)
    __swig_destroy__ = _openroadpy.delete_CtsOptions

# Register CtsOptions in _openroadpy:
_openroadpy.CtsOptions_swigregister(CtsOptions)
class TritonCTS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.TritonCTS_swiginit(self, _openroadpy.new_TritonCTS())
    __swig_destroy__ = _openroadpy.delete_TritonCTS

    def init(self, logger, db, network, sta, st_builder, resizer, estimate_parasitics):
        return _openroadpy.TritonCTS_init(self, logger, db, network, sta, st_builder, resizer, estimate_parasitics)

    def runTritonCts(self):
        return _openroadpy.TritonCTS_runTritonCts(self)

    def reportCtsMetrics(self):
        return _openroadpy.TritonCTS_reportCtsMetrics(self)

    def getParms(self):
        return _openroadpy.TritonCTS_getParms(self)

    def getCharacterization(self):
        return _openroadpy.TritonCTS_getCharacterization(self)

    def setClockNets(self, names):
        return _openroadpy.TritonCTS_setClockNets(self, names)

    def setBufferList(self, buffers):
        return _openroadpy.TritonCTS_setBufferList(self, buffers)

    def setRootBuffer(self, buffers):
        return _openroadpy.TritonCTS_setRootBuffer(self, buffers)

    def setSinkBuffer(self, buffers):
        return _openroadpy.TritonCTS_setSinkBuffer(self, buffers)

# Register TritonCTS in _openroadpy:
_openroadpy.TritonCTS_swigregister(TritonCTS)
class Opendp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.Opendp_swiginit(self, _openroadpy.new_Opendp())
    __swig_destroy__ = _openroadpy.delete_Opendp

    def legalCellPos(self, db_inst):
        return _openroadpy.Opendp_legalCellPos(self, db_inst)

    def initMacrosAndGrid(self):
        return _openroadpy.Opendp_initMacrosAndGrid(self)

    def init(self, db, logger):
        return _openroadpy.Opendp_init(self, db, logger)

    def detailedPlacement(self, *args):
        return _openroadpy.Opendp_detailedPlacement(self, *args)

    def reportLegalizationStats(self):
        return _openroadpy.Opendp_reportLegalizationStats(self)

    def setPaddingGlobal(self, left, right):
        return _openroadpy.Opendp_setPaddingGlobal(self, left, right)

    def setPadding(self, *args):
        return _openroadpy.Opendp_setPadding(self, *args)

    def setDebug(self, observer):
        return _openroadpy.Opendp_setDebug(self, observer)

    def padGlobalLeft(self):
        return _openroadpy.Opendp_padGlobalLeft(self)

    def padGlobalRight(self):
        return _openroadpy.Opendp_padGlobalRight(self)

    def padLeft(self, inst):
        return _openroadpy.Opendp_padLeft(self, inst)

    def padRight(self, inst):
        return _openroadpy.Opendp_padRight(self, inst)

    def checkPlacement(self, *args):
        return _openroadpy.Opendp_checkPlacement(self, *args)

    def fillerPlacement(self, filler_masters, prefix, verbose):
        return _openroadpy.Opendp_fillerPlacement(self, filler_masters, prefix, verbose)

    def removeFillers(self):
        return _openroadpy.Opendp_removeFillers(self)

    def optimizeMirroring(self):
        return _openroadpy.Opendp_optimizeMirroring(self)

    def addDecapMaster(self, decap_master, decap_cap):
        return _openroadpy.Opendp_addDecapMaster(self, decap_master, decap_cap)

    def insertDecapCells(self, target, psm_ir_drops):
        return _openroadpy.Opendp_insertDecapCells(self, target, psm_ir_drops)

    def getAdjacentInstance(self, inst, left):
        return _openroadpy.Opendp_getAdjacentInstance(self, inst, left)

    def getAdjacentInstancesCluster(self, inst):
        return _openroadpy.Opendp_getAdjacentInstancesCluster(self, inst)

    def getPadding(self):
        return _openroadpy.Opendp_getPadding(self)

    def improvePlacement(self, seed, max_displacement_x, max_displacement_y):
        return _openroadpy.Opendp_improvePlacement(self, seed, max_displacement_x, max_displacement_y)

    def getJournal(self):
        return _openroadpy.Opendp_getJournal(self)

    def setJournal(self, journal):
        return _openroadpy.Opendp_setJournal(self, journal)

# Register Opendp in _openroadpy:
_openroadpy.Opendp_swigregister(Opendp)

def divRound(dividend, divisor):
    return _openroadpy.divRound(dividend, divisor)

def divCeil(dividend, divisor):
    return _openroadpy.divCeil(dividend, divisor)

def divFloor(dividend, divisor):
    return _openroadpy.divFloor(dividend, divisor)
class ParamStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    outputMazeFile = property(_openroadpy.ParamStruct_outputMazeFile_get, _openroadpy.ParamStruct_outputMazeFile_set)
    outputDrcFile = property(_openroadpy.ParamStruct_outputDrcFile_get, _openroadpy.ParamStruct_outputDrcFile_set)
    drcReportIterStep = property(_openroadpy.ParamStruct_drcReportIterStep_get, _openroadpy.ParamStruct_drcReportIterStep_set)
    outputCmapFile = property(_openroadpy.ParamStruct_outputCmapFile_get, _openroadpy.ParamStruct_outputCmapFile_set)
    outputGuideCoverageFile = property(_openroadpy.ParamStruct_outputGuideCoverageFile_get, _openroadpy.ParamStruct_outputGuideCoverageFile_set)
    dbProcessNode = property(_openroadpy.ParamStruct_dbProcessNode_get, _openroadpy.ParamStruct_dbProcessNode_set)
    enableViaGen = property(_openroadpy.ParamStruct_enableViaGen_get, _openroadpy.ParamStruct_enableViaGen_set)
    drouteEndIter = property(_openroadpy.ParamStruct_drouteEndIter_get, _openroadpy.ParamStruct_drouteEndIter_set)
    viaInPinBottomLayer = property(_openroadpy.ParamStruct_viaInPinBottomLayer_get, _openroadpy.ParamStruct_viaInPinBottomLayer_set)
    viaInPinTopLayer = property(_openroadpy.ParamStruct_viaInPinTopLayer_get, _openroadpy.ParamStruct_viaInPinTopLayer_set)
    viaAccessLayer = property(_openroadpy.ParamStruct_viaAccessLayer_get, _openroadpy.ParamStruct_viaAccessLayer_set)
    orSeed = property(_openroadpy.ParamStruct_orSeed_get, _openroadpy.ParamStruct_orSeed_set)
    orK = property(_openroadpy.ParamStruct_orK_get, _openroadpy.ParamStruct_orK_set)
    verbose = property(_openroadpy.ParamStruct_verbose_get, _openroadpy.ParamStruct_verbose_set)
    cleanPatches = property(_openroadpy.ParamStruct_cleanPatches_get, _openroadpy.ParamStruct_cleanPatches_set)
    doPa = property(_openroadpy.ParamStruct_doPa_get, _openroadpy.ParamStruct_doPa_set)
    singleStepDR = property(_openroadpy.ParamStruct_singleStepDR_get, _openroadpy.ParamStruct_singleStepDR_set)
    minAccessPoints = property(_openroadpy.ParamStruct_minAccessPoints_get, _openroadpy.ParamStruct_minAccessPoints_set)
    saveGuideUpdates = property(_openroadpy.ParamStruct_saveGuideUpdates_get, _openroadpy.ParamStruct_saveGuideUpdates_set)
    repairPDNLayerName = property(_openroadpy.ParamStruct_repairPDNLayerName_get, _openroadpy.ParamStruct_repairPDNLayerName_set)
    num_threads = property(_openroadpy.ParamStruct_num_threads_get, _openroadpy.ParamStruct_num_threads_set)

    def __init__(self):
        _openroadpy.ParamStruct_swiginit(self, _openroadpy.new_ParamStruct())
    __swig_destroy__ = _openroadpy.delete_ParamStruct

# Register ParamStruct in _openroadpy:
_openroadpy.ParamStruct_swigregister(ParamStruct)
class TritonRoute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.TritonRoute_swiginit(self, _openroadpy.new_TritonRoute())
    __swig_destroy__ = _openroadpy.delete_TritonRoute

    def getDesign(self):
        return _openroadpy.TritonRoute_getDesign(self)

    def getLogger(self):
        return _openroadpy.TritonRoute_getLogger(self)

    def getRouterConfiguration(self):
        return _openroadpy.TritonRoute_getRouterConfiguration(self)

    def main(self):
        return _openroadpy.TritonRoute_main(self)

    def endFR(self):
        return _openroadpy.TritonRoute_endFR(self)

    def pinAccess(self, *args):
        return _openroadpy.TritonRoute_pinAccess(self, *args)

    def stepDR(self, size, offset, mazeEndIter, workerDRCCost, workerMarkerCost, workerFixedShapeCost, workerMarkerDecay, ripupMode, followGuide):
        return _openroadpy.TritonRoute_stepDR(self, size, offset, mazeEndIter, workerDRCCost, workerMarkerCost, workerFixedShapeCost, workerMarkerDecay, ripupMode, followGuide)

    def getNumDRVs(self):
        return _openroadpy.TritonRoute_getNumDRVs(self)

    def setDebugDR(self, on=True):
        return _openroadpy.TritonRoute_setDebugDR(self, on)

    def setDebugDumpDR(self, on, dumpDir):
        return _openroadpy.TritonRoute_setDebugDumpDR(self, on, dumpDir)

    def setDebugSnapshotDir(self, snapshotDir):
        return _openroadpy.TritonRoute_setDebugSnapshotDir(self, snapshotDir)

    def setDebugMaze(self, on=True):
        return _openroadpy.TritonRoute_setDebugMaze(self, on)

    def setDebugPA(self, on=True):
        return _openroadpy.TritonRoute_setDebugPA(self, on)

    def setDebugTA(self, on=True):
        return _openroadpy.TritonRoute_setDebugTA(self, on)

    def setDebugWriteNetTracks(self, on=True):
        return _openroadpy.TritonRoute_setDebugWriteNetTracks(self, on)

    def setDebugNetName(self, name):
        return _openroadpy.TritonRoute_setDebugNetName(self, name)

    def setDebugPinName(self, name):
        return _openroadpy.TritonRoute_setDebugPinName(self, name)

    def setDebugBox(self, x1, y1, x2, y2):
        return _openroadpy.TritonRoute_setDebugBox(self, x1, y1, x2, y2)

    def setDebugIter(self, iter):
        return _openroadpy.TritonRoute_setDebugIter(self, iter)

    def setDebugPaMarkers(self, on=True):
        return _openroadpy.TritonRoute_setDebugPaMarkers(self, on)

    def setDumpLastWorker(self, on=True):
        return _openroadpy.TritonRoute_setDumpLastWorker(self, on)

    def setDebugWorkerParams(self, mazeEndIter, drcCost, markerCost, fixedShapeCost, markerDecay, ripupMode, followGuide):
        return _openroadpy.TritonRoute_setDebugWorkerParams(self, mazeEndIter, drcCost, markerCost, fixedShapeCost, markerDecay, ripupMode, followGuide)

    def setDistributed(self, on=True):
        return _openroadpy.TritonRoute_setDistributed(self, on)

    def setWorkerIpPort(self, ip, port):
        return _openroadpy.TritonRoute_setWorkerIpPort(self, ip, port)

    def setSharedVolume(self, vol):
        return _openroadpy.TritonRoute_setSharedVolume(self, vol)

    def setCloudSize(self, cloud_sz):
        return _openroadpy.TritonRoute_setCloudSize(self, cloud_sz)

    def getCloudSize(self):
        return _openroadpy.TritonRoute_getCloudSize(self)

    def setDebugPaEdge(self, on=True):
        return _openroadpy.TritonRoute_setDebugPaEdge(self, on)

    def setDebugPaCommit(self, on=True):
        return _openroadpy.TritonRoute_setDebugPaCommit(self, on)

    def reportConstraints(self):
        return _openroadpy.TritonRoute_reportConstraints(self)

    def setParams(self, params):
        return _openroadpy.TritonRoute_setParams(self, params)

    def addUserSelectedVia(self, viaName):
        return _openroadpy.TritonRoute_addUserSelectedVia(self, viaName)

    def setUnidirectionalLayer(self, layerName):
        return _openroadpy.TritonRoute_setUnidirectionalLayer(self, layerName)

    def getDebugSettings(self):
        return _openroadpy.TritonRoute_getDebugSettings(self)

    def runDRWorker(self, workerStr, viaData):
        return _openroadpy.TritonRoute_runDRWorker(self, workerStr, viaData)

    def debugSingleWorker(self, dumpDir, drcRpt):
        return _openroadpy.TritonRoute_debugSingleWorker(self, dumpDir, drcRpt)

    def updateGlobals(self, file_name):
        return _openroadpy.TritonRoute_updateGlobals(self, file_name)

    def resetDb(self, file_name):
        return _openroadpy.TritonRoute_resetDb(self, file_name)

    def clearDesign(self):
        return _openroadpy.TritonRoute_clearDesign(self)

    def updateDesign(self, *args):
        return _openroadpy.TritonRoute_updateDesign(self, *args)

    def addWorkerResults(self, results):
        return _openroadpy.TritonRoute_addWorkerResults(self, results)

    def getWorkerResults(self, results):
        return _openroadpy.TritonRoute_getWorkerResults(self, results)

    def getWorkerResultsSize(self):
        return _openroadpy.TritonRoute_getWorkerResultsSize(self)

    def sendDesignDist(self):
        return _openroadpy.TritonRoute_sendDesignDist(self)

    def writeGlobals(self, name):
        return _openroadpy.TritonRoute_writeGlobals(self, name)

    def sendDesignUpdates(self, router_cfg_path, num_threads):
        return _openroadpy.TritonRoute_sendDesignUpdates(self, router_cfg_path, num_threads)

    def sendGlobalsUpdates(self, router_cfg_path, serializedViaData):
        return _openroadpy.TritonRoute_sendGlobalsUpdates(self, router_cfg_path, serializedViaData)

    def reportDRC(self, *args):
        return _openroadpy.TritonRoute_reportDRC(self, *args)

    def routeLayerLengths(self, wire):
        return _openroadpy.TritonRoute_routeLayerLengths(self, wire)

    def checkDRC(self, filename, x1, y1, x2, y2, marker_name, num_threads):
        return _openroadpy.TritonRoute_checkDRC(self, filename, x1, y1, x2, y2, marker_name, num_threads)

    def initGuide(self):
        return _openroadpy.TritonRoute_initGuide(self)

    def prep(self):
        return _openroadpy.TritonRoute_prep(self)

    def getDb(self):
        return _openroadpy.TritonRoute_getDb(self)

    def fixMaxSpacing(self, num_threads):
        return _openroadpy.TritonRoute_fixMaxSpacing(self, num_threads)

    def deleteInstancePAData(self, inst):
        return _openroadpy.TritonRoute_deleteInstancePAData(self, inst)

    def addInstancePAData(self, inst):
        return _openroadpy.TritonRoute_addInstancePAData(self, inst)

# Register TritonRoute in _openroadpy:
_openroadpy.TritonRoute_swigregister(TritonRoute)
class Example(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.Example_swiginit(self, _openroadpy.new_Example())
    __swig_destroy__ = _openroadpy.delete_Example

    def init(self, db, logger):
        return _openroadpy.Example_init(self, db, logger)

    def makeInstance(self, name):
        return _openroadpy.Example_makeInstance(self, name)

    def setDebug(self, observer):
        return _openroadpy.Example_setDebug(self, observer)

# Register Example in _openroadpy:
_openroadpy.Example_swigregister(Example)
class Finale(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def init(self, db, logger):
        return _openroadpy.Finale_init(self, db, logger)

    def densityFill(self, rules_filename, fill_area):
        return _openroadpy.Finale_densityFill(self, rules_filename, fill_area)

    def setDebug(self):
        return _openroadpy.Finale_setDebug(self)

    def __init__(self):
        _openroadpy.Finale_swiginit(self, _openroadpy.new_Finale())
    __swig_destroy__ = _openroadpy.delete_Finale

# Register Finale in _openroadpy:
_openroadpy.Finale_swigregister(Finale)
class RegionAdjustment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    region = property(_openroadpy.RegionAdjustment_region_get, _openroadpy.RegionAdjustment_region_set)
    layer = property(_openroadpy.RegionAdjustment_layer_get, _openroadpy.RegionAdjustment_layer_set)
    adjustment = property(_openroadpy.RegionAdjustment_adjustment_get, _openroadpy.RegionAdjustment_adjustment_set)

    def __init__(self, min_x, min_y, max_x, max_y, l, adjst):
        _openroadpy.RegionAdjustment_swiginit(self, _openroadpy.new_RegionAdjustment(min_x, min_y, max_x, max_y, l, adjst))

    def getRegion(self):
        return _openroadpy.RegionAdjustment_getRegion(self)

    def getLayer(self):
        return _openroadpy.RegionAdjustment_getLayer(self)

    def getAdjustment(self):
        return _openroadpy.RegionAdjustment_getAdjustment(self)
    __swig_destroy__ = _openroadpy.delete_RegionAdjustment

# Register RegionAdjustment in _openroadpy:
_openroadpy.RegionAdjustment_swigregister(RegionAdjustment)
class RoutePointPins(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pins = property(_openroadpy.RoutePointPins_pins_get, _openroadpy.RoutePointPins_pins_set)
    connected = property(_openroadpy.RoutePointPins_connected_get, _openroadpy.RoutePointPins_connected_set)

    def __init__(self):
        _openroadpy.RoutePointPins_swiginit(self, _openroadpy.new_RoutePointPins())
    __swig_destroy__ = _openroadpy.delete_RoutePointPins

# Register RoutePointPins in _openroadpy:
_openroadpy.RoutePointPins_swigregister(RoutePointPins)
NetType_Clock = _openroadpy.NetType_Clock
NetType_Signal = _openroadpy.NetType_Signal
NetType_Antenna = _openroadpy.NetType_Antenna
NetType_All = _openroadpy.NetType_All
class GlobalRouter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.GlobalRouter_swiginit(self, _openroadpy.new_GlobalRouter())
    __swig_destroy__ = _openroadpy.delete_GlobalRouter

    def clear(self):
        return _openroadpy.GlobalRouter_clear(self)

    def setAdjustment(self, adjustment):
        return _openroadpy.GlobalRouter_setAdjustment(self, adjustment)

    def setMinRoutingLayer(self, min_layer):
        return _openroadpy.GlobalRouter_setMinRoutingLayer(self, min_layer)

    def setMaxRoutingLayer(self, max_layer):
        return _openroadpy.GlobalRouter_setMaxRoutingLayer(self, max_layer)

    def getMinRoutingLayer(self):
        return _openroadpy.GlobalRouter_getMinRoutingLayer(self)

    def getMaxRoutingLayer(self):
        return _openroadpy.GlobalRouter_getMaxRoutingLayer(self)

    def setMinLayerForClock(self, min_layer):
        return _openroadpy.GlobalRouter_setMinLayerForClock(self, min_layer)

    def setMaxLayerForClock(self, max_layer):
        return _openroadpy.GlobalRouter_setMaxLayerForClock(self, max_layer)

    def getMinLayerForClock(self):
        return _openroadpy.GlobalRouter_getMinLayerForClock(self)

    def getMaxLayerForClock(self):
        return _openroadpy.GlobalRouter_getMaxLayerForClock(self)

    def setCriticalNetsPercentage(self, critical_nets_percentage):
        return _openroadpy.GlobalRouter_setCriticalNetsPercentage(self, critical_nets_percentage)

    def addLayerAdjustment(self, layer, reduction_percentage):
        return _openroadpy.GlobalRouter_addLayerAdjustment(self, layer, reduction_percentage)

    def addRegionAdjustment(self, min_x, min_y, max_x, max_y, layer, reduction_percentage):
        return _openroadpy.GlobalRouter_addRegionAdjustment(self, min_x, min_y, max_x, max_y, layer, reduction_percentage)

    def setVerbose(self, v):
        return _openroadpy.GlobalRouter_setVerbose(self, v)

    def setCongestionIterations(self, iterations):
        return _openroadpy.GlobalRouter_setCongestionIterations(self, iterations)

    def setCongestionReportIterStep(self, congestion_report_iter_step):
        return _openroadpy.GlobalRouter_setCongestionReportIterStep(self, congestion_report_iter_step)

    def setCongestionReportFile(self, file_name):
        return _openroadpy.GlobalRouter_setCongestionReportFile(self, file_name)

    def setGridOrigin(self, x, y):
        return _openroadpy.GlobalRouter_setGridOrigin(self, x, y)

    def setAllowCongestion(self, allow_congestion):
        return _openroadpy.GlobalRouter_setAllowCongestion(self, allow_congestion)

    def setMacroExtension(self, macro_extension):
        return _openroadpy.GlobalRouter_setMacroExtension(self, macro_extension)

    def setUseCUGR(self, use_cugr):
        return _openroadpy.GlobalRouter_setUseCUGR(self, use_cugr)

    def readGuides(self, file_name):
        return _openroadpy.GlobalRouter_readGuides(self, file_name)

    def loadGuidesFromDB(self):
        return _openroadpy.GlobalRouter_loadGuidesFromDB(self)

    def ensurePinsPositions(self, db_net):
        return _openroadpy.GlobalRouter_ensurePinsPositions(self, db_net)

    def saveGuidesFromFile(self, guides):
        return _openroadpy.GlobalRouter_saveGuidesFromFile(self, guides)

    def saveGuides(self, nets):
        return _openroadpy.GlobalRouter_saveGuides(self, nets)

    def writeSegments(self, file_name):
        return _openroadpy.GlobalRouter_writeSegments(self, file_name)

    def readSegments(self, file_name):
        return _openroadpy.GlobalRouter_readSegments(self, file_name)

    def netIsCovered(self, db_net, pins_not_covered):
        return _openroadpy.GlobalRouter_netIsCovered(self, db_net, pins_not_covered)

    def segmentIsLine(self, segment):
        return _openroadpy.GlobalRouter_segmentIsLine(self, segment)

    def segmentCoversPin(self, segment, pin):
        return _openroadpy.GlobalRouter_segmentCoversPin(self, segment, pin)

    def buildNetGraph(self, net):
        return _openroadpy.GlobalRouter_buildNetGraph(self, net)

    def isConnected(self, net):
        return _openroadpy.GlobalRouter_isConnected(self, net)

    def segmentsConnect(self, segment1, segment2):
        return _openroadpy.GlobalRouter_segmentsConnect(self, segment1, segment2)

    def isCoveringPin(self, net, segment):
        return _openroadpy.GlobalRouter_isCoveringPin(self, net, segment)

    def initFastRoute(self, min_routing_layer, max_routing_layer):
        return _openroadpy.GlobalRouter_initFastRoute(self, min_routing_layer, max_routing_layer)

    def initFastRouteIncr(self, nets):
        return _openroadpy.GlobalRouter_initFastRouteIncr(self, nets)

    def routeLayerLengths(self, db_net):
        return _openroadpy.GlobalRouter_routeLayerLengths(self, db_net)

    def globalRoute(self, save_guides=False, start_incremental=False, end_incremental=False):
        return _openroadpy.GlobalRouter_globalRoute(self, save_guides, start_incremental, end_incremental)

    def saveCongestion(self):
        return _openroadpy.GlobalRouter_saveCongestion(self)

    def getRoutes(self):
        return _openroadpy.GlobalRouter_getRoutes(self)

    def getNet(self, db_net):
        return _openroadpy.GlobalRouter_getNet(self, db_net)

    def getTileSize(self):
        return _openroadpy.GlobalRouter_getTileSize(self)

    def isNonLeafClock(self, db_net):
        return _openroadpy.GlobalRouter_isNonLeafClock(self, db_net)

    def hasAvailableResources(self, is_horizontal, pos_x, pos_y, layer_level, db_net):
        return _openroadpy.GlobalRouter_hasAvailableResources(self, is_horizontal, pos_x, pos_y, layer_level, db_net)

    def getPositionOnGrid(self, real_position):
        return _openroadpy.GlobalRouter_getPositionOnGrid(self, real_position)

    def repairAntennas(self, diode_mterm, iterations, ratio_margin, num_threads=1):
        return _openroadpy.GlobalRouter_repairAntennas(self, diode_mterm, iterations, ratio_margin, num_threads)

    def updateResources(self, init_x, init_y, final_x, final_y, layer_level, used, db_net):
        return _openroadpy.GlobalRouter_updateResources(self, init_x, init_y, final_x, final_y, layer_level, used, db_net)

    def updateFastRouteGridsLayer(self, init_x, init_y, final_x, final_y, layer_level, new_layer_level, db_net):
        return _openroadpy.GlobalRouter_updateFastRouteGridsLayer(self, init_x, init_y, final_x, final_y, layer_level, new_layer_level, db_net)

    def addDirtyNet(self, net):
        return _openroadpy.GlobalRouter_addDirtyNet(self, net)

    def getDirtyNets(self):
        return _openroadpy.GlobalRouter_getDirtyNets(self)

    def haveRoutes(self):
        return _openroadpy.GlobalRouter_haveRoutes(self)

    def designIsPlaced(self):
        return _openroadpy.GlobalRouter_designIsPlaced(self)

    def haveDetailedRoutes(self, *args):
        return _openroadpy.GlobalRouter_haveDetailedRoutes(self, *args)

    def addNetToRoute(self, db_net):
        return _openroadpy.GlobalRouter_addNetToRoute(self, db_net)

    def getNetsToRoute(self):
        return _openroadpy.GlobalRouter_getNetsToRoute(self)

    def mergeNetsRouting(self, db_net1, db_net2):
        return _openroadpy.GlobalRouter_mergeNetsRouting(self, db_net1, db_net2)

    def connectRouting(self, db_net1, db_net2):
        return _openroadpy.GlobalRouter_connectRouting(self, db_net1, db_net2)

    def findBufferPinPostions(self, net1, net2, pin_pos1, pin_pos2):
        return _openroadpy.GlobalRouter_findBufferPinPostions(self, net1, net2, pin_pos1, pin_pos2)

    def findTopLayerOverPosition(self, pin_pos, route):
        return _openroadpy.GlobalRouter_findTopLayerOverPosition(self, pin_pos, route)

    def createConnectionForPositions(self, pin_pos1, pin_pos2, layer1, layer2):
        return _openroadpy.GlobalRouter_createConnectionForPositions(self, pin_pos1, pin_pos2, layer1, layer2)

    def insertViasForConnection(self, connection, via_pos, layer, conn_layer):
        return _openroadpy.GlobalRouter_insertViasForConnection(self, connection, via_pos, layer, conn_layer)

    def getBlockage(self, layer, x, y, blockage_h, blockage_v):
        return _openroadpy.GlobalRouter_getBlockage(self, layer, x, y, blockage_h, blockage_v)

    def setSeed(self, seed):
        return _openroadpy.GlobalRouter_setSeed(self, seed)

    def setCapacitiesPerturbationPercentage(self, percentage):
        return _openroadpy.GlobalRouter_setCapacitiesPerturbationPercentage(self, percentage)

    def setPerturbationAmount(self, perturbation):
        return _openroadpy.GlobalRouter_setPerturbationAmount(self, perturbation)

    def perturbCapacities(self):
        return _openroadpy.GlobalRouter_perturbCapacities(self)

    def setDebugNet(self, net):
        return _openroadpy.GlobalRouter_setDebugNet(self, net)

    def setDebugSteinerTree(self, steinerTree):
        return _openroadpy.GlobalRouter_setDebugSteinerTree(self, steinerTree)

    def setDebugRectilinearSTree(self, rectilinearSTree):
        return _openroadpy.GlobalRouter_setDebugRectilinearSTree(self, rectilinearSTree)

    def setDebugTree2D(self, tree2D):
        return _openroadpy.GlobalRouter_setDebugTree2D(self, tree2D)

    def setDebugTree3D(self, tree3D):
        return _openroadpy.GlobalRouter_setDebugTree3D(self, tree3D)

    def setSttInputFilename(self, file_name):
        return _openroadpy.GlobalRouter_setSttInputFilename(self, file_name)

    def saveSttInputFile(self, net):
        return _openroadpy.GlobalRouter_saveSttInputFile(self, net)

    def reportNetLayerWirelengths(self, db_net, out):
        return _openroadpy.GlobalRouter_reportNetLayerWirelengths(self, db_net, out)

    def reportLayerWireLengths(self, global_route, detailed_route):
        return _openroadpy.GlobalRouter_reportLayerWireLengths(self, global_route, detailed_route)

    def globalRoutingToBox(self, route):
        return _openroadpy.GlobalRouter_globalRoutingToBox(self, route)

    def boxToGlobalRouting(self, route_bds, layer, via_layer, route):
        return _openroadpy.GlobalRouter_boxToGlobalRouting(self, route_bds, layer, via_layer, route)

    def updateVias(self):
        return _openroadpy.GlobalRouter_updateVias(self)

    def reportNetWireLength(self, net, global_route, detailed_route, verbose, file_name):
        return _openroadpy.GlobalRouter_reportNetWireLength(self, net, global_route, detailed_route, verbose, file_name)

    def reportNetDetailedRouteWL(self, wire, out):
        return _openroadpy.GlobalRouter_reportNetDetailedRouteWL(self, wire, out)

    def createWLReportFile(self, file_name, verbose):
        return _openroadpy.GlobalRouter_createWLReportFile(self, file_name, verbose)

    def getPinGridPositions(self, db_net):
        return _openroadpy.GlobalRouter_getPinGridPositions(self, db_net)

    def findPinAccessPointPositions(self, pin, ap_positions):
        return _openroadpy.GlobalRouter_findPinAccessPointPositions(self, pin, ap_positions)

    def getNetLayerRange(self, db_net, min_layer, max_layer):
        return _openroadpy.GlobalRouter_getNetLayerRange(self, db_net, min_layer, max_layer)

    def getGridSize(self, x_grids, y_grids):
        return _openroadpy.GlobalRouter_getGridSize(self, x_grids, y_grids)

    def getGridTileSize(self):
        return _openroadpy.GlobalRouter_getGridTileSize(self)

    def getMinMaxLayer(self, min_layer, max_layer):
        return _openroadpy.GlobalRouter_getMinMaxLayer(self, min_layer, max_layer)

    def getCapacityReductionData(self, cap_red_data):
        return _openroadpy.GlobalRouter_getCapacityReductionData(self, cap_red_data)

    def isInitialized(self):
        return _openroadpy.GlobalRouter_isInitialized(self)

    def isCongested(self):
        return _openroadpy.GlobalRouter_isCongested(self)

    def setDbBlock(self, block):
        return _openroadpy.GlobalRouter_setDbBlock(self, block)

    def getRenderer(self):
        return _openroadpy.GlobalRouter_getRenderer(self)

    def db(self):
        return _openroadpy.GlobalRouter_db(self)

    def fastroute(self):
        return _openroadpy.GlobalRouter_fastroute(self)

    def getRudy(self):
        return _openroadpy.GlobalRouter_getRudy(self)

    def writePinLocations(self, file_name):
        return _openroadpy.GlobalRouter_writePinLocations(self, file_name)

# Register GlobalRouter in _openroadpy:
_openroadpy.GlobalRouter_swigregister(GlobalRouter)

def getITermName(iterm):
    return _openroadpy.getITermName(iterm)

def getLayerName(layer_idx, db):
    return _openroadpy.getLayerName(layer_idx, db)
class GRouteDbCbk(src.odb.odb.dbBlockCallBackObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grouter):
        _openroadpy.GRouteDbCbk_swiginit(self, _openroadpy.new_GRouteDbCbk(grouter))

    def inDbPostMoveInst(self, inst):
        return _openroadpy.GRouteDbCbk_inDbPostMoveInst(self, inst)

    def inDbInstSwapMasterAfter(self, inst):
        return _openroadpy.GRouteDbCbk_inDbInstSwapMasterAfter(self, inst)

    def inDbNetDestroy(self, net):
        return _openroadpy.GRouteDbCbk_inDbNetDestroy(self, net)

    def inDbNetCreate(self, net):
        return _openroadpy.GRouteDbCbk_inDbNetCreate(self, net)

    def inDbNetPreMerge(self, preserved_net, removed_net):
        return _openroadpy.GRouteDbCbk_inDbNetPreMerge(self, preserved_net, removed_net)

    def inDbITermPreDisconnect(self, iterm):
        return _openroadpy.GRouteDbCbk_inDbITermPreDisconnect(self, iterm)

    def inDbITermPostConnect(self, iterm):
        return _openroadpy.GRouteDbCbk_inDbITermPostConnect(self, iterm)

    def inDbITermPostSetAccessPoints(self, iterm):
        return _openroadpy.GRouteDbCbk_inDbITermPostSetAccessPoints(self, iterm)

    def inDbBTermPostConnect(self, bterm):
        return _openroadpy.GRouteDbCbk_inDbBTermPostConnect(self, bterm)

    def inDbBTermPreDisconnect(self, bterm):
        return _openroadpy.GRouteDbCbk_inDbBTermPreDisconnect(self, bterm)
    __swig_destroy__ = _openroadpy.delete_GRouteDbCbk

# Register GRouteDbCbk in _openroadpy:
_openroadpy.GRouteDbCbk_swigregister(GRouteDbCbk)
class IncrementalGRoute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, groute, block):
        _openroadpy.IncrementalGRoute_swiginit(self, _openroadpy.new_IncrementalGRoute(groute, block))

    def updateRoutes(self, save_guides=False):
        return _openroadpy.IncrementalGRoute_updateRoutes(self, save_guides)
    __swig_destroy__ = _openroadpy.delete_IncrementalGRoute

# Register IncrementalGRoute in _openroadpy:
_openroadpy.IncrementalGRoute_swigregister(IncrementalGRoute)
class CompareInstancePtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, db_network=None):
        _openroadpy.CompareInstancePtr_swiginit(self, _openroadpy.new_CompareInstancePtr(db_network))

    def __call__(self, lhs, rhs):
        return _openroadpy.CompareInstancePtr___call__(self, lhs, rhs)
    __swig_destroy__ = _openroadpy.delete_CompareInstancePtr

# Register CompareInstancePtr in _openroadpy:
_openroadpy.CompareInstancePtr_swigregister(CompareInstancePtr)
class PartitionMgr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def init(self, db, db_network, sta, logger):
        return _openroadpy.PartitionMgr_init(self, db, db_network, sta, logger)

    def tritonPartHypergraph(self, num_parts, balance_constraint, base_balance, scale_factor, seed, vertex_dimension, hyperedge_dimension, placement_dimension, hypergraph_file, fixed_file, community_file, group_file, placement_file, e_wt_factors, v_wt_factors, placement_wt_factors, thr_coarsen_hyperedge_size_skip, thr_coarsen_vertices, thr_coarsen_hyperedges, coarsening_ratio, max_coarsen_iters, adj_diff_ratio, min_num_vertices_each_part, num_initial_solutions, num_best_initial_solutions, refiner_iters, max_moves, early_stop_ratio, total_corking_passes, v_cycle_flag, max_num_vcycle, num_coarsen_solutions, num_vertices_threshold_ilp, global_net_threshold):
        return _openroadpy.PartitionMgr_tritonPartHypergraph(self, num_parts, balance_constraint, base_balance, scale_factor, seed, vertex_dimension, hyperedge_dimension, placement_dimension, hypergraph_file, fixed_file, community_file, group_file, placement_file, e_wt_factors, v_wt_factors, placement_wt_factors, thr_coarsen_hyperedge_size_skip, thr_coarsen_vertices, thr_coarsen_hyperedges, coarsening_ratio, max_coarsen_iters, adj_diff_ratio, min_num_vertices_each_part, num_initial_solutions, num_best_initial_solutions, refiner_iters, max_moves, early_stop_ratio, total_corking_passes, v_cycle_flag, max_num_vcycle, num_coarsen_solutions, num_vertices_threshold_ilp, global_net_threshold)

    def evaluateHypergraphSolution(self, num_parts, balance_constraint, base_balance, scale_factor, vertex_dimension, hyperedge_dimension, hypergraph_file, fixed_file, group_file, solution_file, e_wt_factors, v_wt_factors):
        return _openroadpy.PartitionMgr_evaluateHypergraphSolution(self, num_parts, balance_constraint, base_balance, scale_factor, vertex_dimension, hyperedge_dimension, hypergraph_file, fixed_file, group_file, solution_file, e_wt_factors, v_wt_factors)

    def tritonPartDesign(self, num_parts_arg, balance_constraint_arg, base_balance_arg, scale_factor_arg, seed_arg, timing_aware_flag_arg, top_n_arg, placement_flag_arg, fence_flag_arg, fence_lx_arg, fence_ly_arg, fence_ux_arg, fence_uy_arg, fixed_file_arg, community_file_arg, group_file_arg, solution_filename_arg, net_timing_factor, path_timing_factor, path_snaking_factor, timing_exp_factor, extra_delay, guardband_flag, e_wt_factors, v_wt_factors, placement_wt_factors, thr_coarsen_hyperedge_size_skip, thr_coarsen_vertices, thr_coarsen_hyperedges, coarsening_ratio, max_coarsen_iters, adj_diff_ratio, min_num_vertices_each_part, num_initial_solutions, num_best_initial_solutions, refiner_iters, max_moves, early_stop_ratio, total_corking_passes, v_cycle_flag, max_num_vcycle, num_coarsen_solutions, num_vertices_threshold_ilp, global_net_threshold):
        return _openroadpy.PartitionMgr_tritonPartDesign(self, num_parts_arg, balance_constraint_arg, base_balance_arg, scale_factor_arg, seed_arg, timing_aware_flag_arg, top_n_arg, placement_flag_arg, fence_flag_arg, fence_lx_arg, fence_ly_arg, fence_ux_arg, fence_uy_arg, fixed_file_arg, community_file_arg, group_file_arg, solution_filename_arg, net_timing_factor, path_timing_factor, path_snaking_factor, timing_exp_factor, extra_delay, guardband_flag, e_wt_factors, v_wt_factors, placement_wt_factors, thr_coarsen_hyperedge_size_skip, thr_coarsen_vertices, thr_coarsen_hyperedges, coarsening_ratio, max_coarsen_iters, adj_diff_ratio, min_num_vertices_each_part, num_initial_solutions, num_best_initial_solutions, refiner_iters, max_moves, early_stop_ratio, total_corking_passes, v_cycle_flag, max_num_vcycle, num_coarsen_solutions, num_vertices_threshold_ilp, global_net_threshold)

    def evaluatePartDesignSolution(self, num_parts_arg, balance_constraint_arg, base_balance_arg, scale_factor_arg, timing_aware_flag_arg, top_n_arg, fence_flag_arg, fence_lx_arg, fence_ly_arg, fence_ux_arg, fence_uy_arg, fixed_file_arg, community_file_arg, group_file_arg, hypergraph_file_arg, hypergraph_int_weight_file_arg, solution_filename_arg, net_timing_factor, path_timing_factor, path_snaking_factor, timing_exp_factor, extra_delay, guardband_flag, e_wt_factors, v_wt_factors):
        return _openroadpy.PartitionMgr_evaluatePartDesignSolution(self, num_parts_arg, balance_constraint_arg, base_balance_arg, scale_factor_arg, timing_aware_flag_arg, top_n_arg, fence_flag_arg, fence_lx_arg, fence_ly_arg, fence_ux_arg, fence_uy_arg, fixed_file_arg, community_file_arg, group_file_arg, hypergraph_file_arg, hypergraph_int_weight_file_arg, solution_filename_arg, net_timing_factor, path_timing_factor, path_snaking_factor, timing_exp_factor, extra_delay, guardband_flag, e_wt_factors, v_wt_factors)

    def PartitionKWaySimpleMode(self, num_parts_arg, balance_constraint_arg, seed_arg, hyperedges, vertex_weights, hyperedge_weights):
        return _openroadpy.PartitionMgr_PartitionKWaySimpleMode(self, num_parts_arg, balance_constraint_arg, seed_arg, hyperedges, vertex_weights, hyperedge_weights)

    def readPartitioningFile(self, filename, instance_map_file):
        return _openroadpy.PartitionMgr_readPartitioningFile(self, filename, instance_map_file)

    def writePartitionVerilog(self, *args):
        return _openroadpy.PartitionMgr_writePartitionVerilog(self, *args)

    def __init__(self):
        _openroadpy.PartitionMgr_swiginit(self, _openroadpy.new_PartitionMgr())
    __swig_destroy__ = _openroadpy.delete_PartitionMgr

# Register PartitionMgr in _openroadpy:
_openroadpy.PartitionMgr_swigregister(PartitionMgr)
class split_cuts_stuff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.split_cuts_stuff_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.split_cuts_stuff___nonzero__(self)

    def __bool__(self):
        return _openroadpy.split_cuts_stuff___bool__(self)

    def __len__(self):
        return _openroadpy.split_cuts_stuff___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.split_cuts_stuff___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.split_cuts_stuff___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.split_cuts_stuff___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.split_cuts_stuff___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.split_cuts_stuff___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.split_cuts_stuff___setitem__(self, *args)

    def pop(self):
        return _openroadpy.split_cuts_stuff_pop(self)

    def append(self, x):
        return _openroadpy.split_cuts_stuff_append(self, x)

    def empty(self):
        return _openroadpy.split_cuts_stuff_empty(self)

    def size(self):
        return _openroadpy.split_cuts_stuff_size(self)

    def swap(self, v):
        return _openroadpy.split_cuts_stuff_swap(self, v)

    def begin(self):
        return _openroadpy.split_cuts_stuff_begin(self)

    def end(self):
        return _openroadpy.split_cuts_stuff_end(self)

    def rbegin(self):
        return _openroadpy.split_cuts_stuff_rbegin(self)

    def rend(self):
        return _openroadpy.split_cuts_stuff_rend(self)

    def clear(self):
        return _openroadpy.split_cuts_stuff_clear(self)

    def get_allocator(self):
        return _openroadpy.split_cuts_stuff_get_allocator(self)

    def pop_back(self):
        return _openroadpy.split_cuts_stuff_pop_back(self)

    def erase(self, *args):
        return _openroadpy.split_cuts_stuff_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.split_cuts_stuff_swiginit(self, _openroadpy.new_split_cuts_stuff(*args))

    def push_back(self, x):
        return _openroadpy.split_cuts_stuff_push_back(self, x)

    def front(self):
        return _openroadpy.split_cuts_stuff_front(self)

    def back(self):
        return _openroadpy.split_cuts_stuff_back(self)

    def assign(self, n, x):
        return _openroadpy.split_cuts_stuff_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.split_cuts_stuff_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.split_cuts_stuff_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.split_cuts_stuff_reserve(self, n)

    def capacity(self):
        return _openroadpy.split_cuts_stuff_capacity(self)
    __swig_destroy__ = _openroadpy.delete_split_cuts_stuff

# Register split_cuts_stuff in _openroadpy:
_openroadpy.split_cuts_stuff_swigregister(split_cuts_stuff)
class stuff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.stuff_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.stuff___nonzero__(self)

    def __bool__(self):
        return _openroadpy.stuff___bool__(self)

    def __len__(self):
        return _openroadpy.stuff___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.stuff___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.stuff___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.stuff___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.stuff___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.stuff___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.stuff___setitem__(self, *args)

    def __init__(self, *args):
        _openroadpy.stuff_swiginit(self, _openroadpy.new_stuff(*args))

    def empty(self):
        return _openroadpy.stuff_empty(self)

    def size(self):
        return _openroadpy.stuff_size(self)

    def swap(self, v):
        return _openroadpy.stuff_swap(self, v)

    def begin(self):
        return _openroadpy.stuff_begin(self)

    def end(self):
        return _openroadpy.stuff_end(self)

    def rbegin(self):
        return _openroadpy.stuff_rbegin(self)

    def rend(self):
        return _openroadpy.stuff_rend(self)

    def front(self):
        return _openroadpy.stuff_front(self)

    def back(self):
        return _openroadpy.stuff_back(self)

    def fill(self, u):
        return _openroadpy.stuff_fill(self, u)
    __swig_destroy__ = _openroadpy.delete_stuff

# Register stuff in _openroadpy:
_openroadpy.stuff_swigregister(stuff)
class split_map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.split_map_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.split_map___nonzero__(self)

    def __bool__(self):
        return _openroadpy.split_map___bool__(self)

    def __len__(self):
        return _openroadpy.split_map___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _openroadpy.split_map___getitem__(self, key)

    def __delitem__(self, key):
        return _openroadpy.split_map___delitem__(self, key)

    def has_key(self, key):
        return _openroadpy.split_map_has_key(self, key)

    def keys(self):
        return _openroadpy.split_map_keys(self)

    def values(self):
        return _openroadpy.split_map_values(self)

    def items(self):
        return _openroadpy.split_map_items(self)

    def __contains__(self, key):
        return _openroadpy.split_map___contains__(self, key)

    def key_iterator(self):
        return _openroadpy.split_map_key_iterator(self)

    def value_iterator(self):
        return _openroadpy.split_map_value_iterator(self)

    def __setitem__(self, *args):
        return _openroadpy.split_map___setitem__(self, *args)

    def asdict(self):
        return _openroadpy.split_map_asdict(self)

    def __init__(self, *args):
        _openroadpy.split_map_swiginit(self, _openroadpy.new_split_map(*args))

    def empty(self):
        return _openroadpy.split_map_empty(self)

    def size(self):
        return _openroadpy.split_map_size(self)

    def swap(self, v):
        return _openroadpy.split_map_swap(self, v)

    def begin(self):
        return _openroadpy.split_map_begin(self)

    def end(self):
        return _openroadpy.split_map_end(self)

    def rbegin(self):
        return _openroadpy.split_map_rbegin(self)

    def rend(self):
        return _openroadpy.split_map_rend(self)

    def clear(self):
        return _openroadpy.split_map_clear(self)

    def get_allocator(self):
        return _openroadpy.split_map_get_allocator(self)

    def count(self, x):
        return _openroadpy.split_map_count(self, x)

    def erase(self, *args):
        return _openroadpy.split_map_erase(self, *args)

    def find(self, x):
        return _openroadpy.split_map_find(self, x)

    def lower_bound(self, x):
        return _openroadpy.split_map_lower_bound(self, x)

    def upper_bound(self, x):
        return _openroadpy.split_map_upper_bound(self, x)
    __swig_destroy__ = _openroadpy.delete_split_map

# Register split_map in _openroadpy:
_openroadpy.split_map_swigregister(split_map)
class grid_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.grid_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.grid_list___nonzero__(self)

    def __bool__(self):
        return _openroadpy.grid_list___bool__(self)

    def __len__(self):
        return _openroadpy.grid_list___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.grid_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.grid_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.grid_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.grid_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.grid_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.grid_list___setitem__(self, *args)

    def pop(self):
        return _openroadpy.grid_list_pop(self)

    def append(self, x):
        return _openroadpy.grid_list_append(self, x)

    def empty(self):
        return _openroadpy.grid_list_empty(self)

    def size(self):
        return _openroadpy.grid_list_size(self)

    def swap(self, v):
        return _openroadpy.grid_list_swap(self, v)

    def begin(self):
        return _openroadpy.grid_list_begin(self)

    def end(self):
        return _openroadpy.grid_list_end(self)

    def rbegin(self):
        return _openroadpy.grid_list_rbegin(self)

    def rend(self):
        return _openroadpy.grid_list_rend(self)

    def clear(self):
        return _openroadpy.grid_list_clear(self)

    def get_allocator(self):
        return _openroadpy.grid_list_get_allocator(self)

    def pop_back(self):
        return _openroadpy.grid_list_pop_back(self)

    def erase(self, *args):
        return _openroadpy.grid_list_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.grid_list_swiginit(self, _openroadpy.new_grid_list(*args))

    def push_back(self, x):
        return _openroadpy.grid_list_push_back(self, x)

    def front(self):
        return _openroadpy.grid_list_front(self)

    def back(self):
        return _openroadpy.grid_list_back(self)

    def assign(self, n, x):
        return _openroadpy.grid_list_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.grid_list_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.grid_list_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.grid_list_reserve(self, n)

    def capacity(self):
        return _openroadpy.grid_list_capacity(self)
    __swig_destroy__ = _openroadpy.delete_grid_list

# Register grid_list in _openroadpy:
_openroadpy.grid_list_swigregister(grid_list)
class domain_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.domain_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.domain_list___nonzero__(self)

    def __bool__(self):
        return _openroadpy.domain_list___bool__(self)

    def __len__(self):
        return _openroadpy.domain_list___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.domain_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.domain_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.domain_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.domain_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.domain_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.domain_list___setitem__(self, *args)

    def pop(self):
        return _openroadpy.domain_list_pop(self)

    def append(self, x):
        return _openroadpy.domain_list_append(self, x)

    def empty(self):
        return _openroadpy.domain_list_empty(self)

    def size(self):
        return _openroadpy.domain_list_size(self)

    def swap(self, v):
        return _openroadpy.domain_list_swap(self, v)

    def begin(self):
        return _openroadpy.domain_list_begin(self)

    def end(self):
        return _openroadpy.domain_list_end(self)

    def rbegin(self):
        return _openroadpy.domain_list_rbegin(self)

    def rend(self):
        return _openroadpy.domain_list_rend(self)

    def clear(self):
        return _openroadpy.domain_list_clear(self)

    def get_allocator(self):
        return _openroadpy.domain_list_get_allocator(self)

    def pop_back(self):
        return _openroadpy.domain_list_pop_back(self)

    def erase(self, *args):
        return _openroadpy.domain_list_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.domain_list_swiginit(self, _openroadpy.new_domain_list(*args))

    def push_back(self, x):
        return _openroadpy.domain_list_push_back(self, x)

    def front(self):
        return _openroadpy.domain_list_front(self)

    def back(self):
        return _openroadpy.domain_list_back(self)

    def assign(self, n, x):
        return _openroadpy.domain_list_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.domain_list_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.domain_list_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.domain_list_reserve(self, n)

    def capacity(self):
        return _openroadpy.domain_list_capacity(self)
    __swig_destroy__ = _openroadpy.delete_domain_list

# Register domain_list in _openroadpy:
_openroadpy.domain_list_swigregister(domain_list)
class net_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.net_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.net_list___nonzero__(self)

    def __bool__(self):
        return _openroadpy.net_list___bool__(self)

    def __len__(self):
        return _openroadpy.net_list___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.net_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.net_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.net_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.net_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.net_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.net_list___setitem__(self, *args)

    def pop(self):
        return _openroadpy.net_list_pop(self)

    def append(self, x):
        return _openroadpy.net_list_append(self, x)

    def empty(self):
        return _openroadpy.net_list_empty(self)

    def size(self):
        return _openroadpy.net_list_size(self)

    def swap(self, v):
        return _openroadpy.net_list_swap(self, v)

    def begin(self):
        return _openroadpy.net_list_begin(self)

    def end(self):
        return _openroadpy.net_list_end(self)

    def rbegin(self):
        return _openroadpy.net_list_rbegin(self)

    def rend(self):
        return _openroadpy.net_list_rend(self)

    def clear(self):
        return _openroadpy.net_list_clear(self)

    def get_allocator(self):
        return _openroadpy.net_list_get_allocator(self)

    def pop_back(self):
        return _openroadpy.net_list_pop_back(self)

    def erase(self, *args):
        return _openroadpy.net_list_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.net_list_swiginit(self, _openroadpy.new_net_list(*args))

    def push_back(self, x):
        return _openroadpy.net_list_push_back(self, x)

    def front(self):
        return _openroadpy.net_list_front(self)

    def back(self):
        return _openroadpy.net_list_back(self)

    def assign(self, n, x):
        return _openroadpy.net_list_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.net_list_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.net_list_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.net_list_reserve(self, n)

    def capacity(self):
        return _openroadpy.net_list_capacity(self)
    __swig_destroy__ = _openroadpy.delete_net_list

# Register net_list in _openroadpy:
_openroadpy.net_list_swigregister(net_list)
class viagen_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.viagen_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.viagen_list___nonzero__(self)

    def __bool__(self):
        return _openroadpy.viagen_list___bool__(self)

    def __len__(self):
        return _openroadpy.viagen_list___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.viagen_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.viagen_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.viagen_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.viagen_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.viagen_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.viagen_list___setitem__(self, *args)

    def pop(self):
        return _openroadpy.viagen_list_pop(self)

    def append(self, x):
        return _openroadpy.viagen_list_append(self, x)

    def empty(self):
        return _openroadpy.viagen_list_empty(self)

    def size(self):
        return _openroadpy.viagen_list_size(self)

    def swap(self, v):
        return _openroadpy.viagen_list_swap(self, v)

    def begin(self):
        return _openroadpy.viagen_list_begin(self)

    def end(self):
        return _openroadpy.viagen_list_end(self)

    def rbegin(self):
        return _openroadpy.viagen_list_rbegin(self)

    def rend(self):
        return _openroadpy.viagen_list_rend(self)

    def clear(self):
        return _openroadpy.viagen_list_clear(self)

    def get_allocator(self):
        return _openroadpy.viagen_list_get_allocator(self)

    def pop_back(self):
        return _openroadpy.viagen_list_pop_back(self)

    def erase(self, *args):
        return _openroadpy.viagen_list_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.viagen_list_swiginit(self, _openroadpy.new_viagen_list(*args))

    def push_back(self, x):
        return _openroadpy.viagen_list_push_back(self, x)

    def front(self):
        return _openroadpy.viagen_list_front(self)

    def back(self):
        return _openroadpy.viagen_list_back(self)

    def assign(self, n, x):
        return _openroadpy.viagen_list_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.viagen_list_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.viagen_list_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.viagen_list_reserve(self, n)

    def capacity(self):
        return _openroadpy.viagen_list_capacity(self)
    __swig_destroy__ = _openroadpy.delete_viagen_list

# Register viagen_list in _openroadpy:
_openroadpy.viagen_list_swigregister(viagen_list)
class techvia_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.techvia_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.techvia_list___nonzero__(self)

    def __bool__(self):
        return _openroadpy.techvia_list___bool__(self)

    def __len__(self):
        return _openroadpy.techvia_list___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.techvia_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.techvia_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.techvia_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.techvia_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.techvia_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.techvia_list___setitem__(self, *args)

    def pop(self):
        return _openroadpy.techvia_list_pop(self)

    def append(self, x):
        return _openroadpy.techvia_list_append(self, x)

    def empty(self):
        return _openroadpy.techvia_list_empty(self)

    def size(self):
        return _openroadpy.techvia_list_size(self)

    def swap(self, v):
        return _openroadpy.techvia_list_swap(self, v)

    def begin(self):
        return _openroadpy.techvia_list_begin(self)

    def end(self):
        return _openroadpy.techvia_list_end(self)

    def rbegin(self):
        return _openroadpy.techvia_list_rbegin(self)

    def rend(self):
        return _openroadpy.techvia_list_rend(self)

    def clear(self):
        return _openroadpy.techvia_list_clear(self)

    def get_allocator(self):
        return _openroadpy.techvia_list_get_allocator(self)

    def pop_back(self):
        return _openroadpy.techvia_list_pop_back(self)

    def erase(self, *args):
        return _openroadpy.techvia_list_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.techvia_list_swiginit(self, _openroadpy.new_techvia_list(*args))

    def push_back(self, x):
        return _openroadpy.techvia_list_push_back(self, x)

    def front(self):
        return _openroadpy.techvia_list_front(self)

    def back(self):
        return _openroadpy.techvia_list_back(self)

    def assign(self, n, x):
        return _openroadpy.techvia_list_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.techvia_list_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.techvia_list_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.techvia_list_reserve(self, n)

    def capacity(self):
        return _openroadpy.techvia_list_capacity(self)
    __swig_destroy__ = _openroadpy.delete_techvia_list

# Register techvia_list in _openroadpy:
_openroadpy.techvia_list_swigregister(techvia_list)
class layer_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.layer_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.layer_list___nonzero__(self)

    def __bool__(self):
        return _openroadpy.layer_list___bool__(self)

    def __len__(self):
        return _openroadpy.layer_list___len__(self)

    def __getslice__(self, i, j):
        return _openroadpy.layer_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openroadpy.layer_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openroadpy.layer_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openroadpy.layer_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openroadpy.layer_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openroadpy.layer_list___setitem__(self, *args)

    def pop(self):
        return _openroadpy.layer_list_pop(self)

    def append(self, x):
        return _openroadpy.layer_list_append(self, x)

    def empty(self):
        return _openroadpy.layer_list_empty(self)

    def size(self):
        return _openroadpy.layer_list_size(self)

    def swap(self, v):
        return _openroadpy.layer_list_swap(self, v)

    def begin(self):
        return _openroadpy.layer_list_begin(self)

    def end(self):
        return _openroadpy.layer_list_end(self)

    def rbegin(self):
        return _openroadpy.layer_list_rbegin(self)

    def rend(self):
        return _openroadpy.layer_list_rend(self)

    def clear(self):
        return _openroadpy.layer_list_clear(self)

    def get_allocator(self):
        return _openroadpy.layer_list_get_allocator(self)

    def pop_back(self):
        return _openroadpy.layer_list_pop_back(self)

    def erase(self, *args):
        return _openroadpy.layer_list_erase(self, *args)

    def __init__(self, *args):
        _openroadpy.layer_list_swiginit(self, _openroadpy.new_layer_list(*args))

    def push_back(self, x):
        return _openroadpy.layer_list_push_back(self, x)

    def front(self):
        return _openroadpy.layer_list_front(self)

    def back(self):
        return _openroadpy.layer_list_back(self)

    def assign(self, n, x):
        return _openroadpy.layer_list_assign(self, n, x)

    def resize(self, *args):
        return _openroadpy.layer_list_resize(self, *args)

    def insert(self, *args):
        return _openroadpy.layer_list_insert(self, *args)

    def reserve(self, n):
        return _openroadpy.layer_list_reserve(self, n)

    def capacity(self):
        return _openroadpy.layer_list_capacity(self)
    __swig_destroy__ = _openroadpy.delete_layer_list

# Register layer_list in _openroadpy:
_openroadpy.layer_list_swigregister(layer_list)
class net_set(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.net_set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.net_set___nonzero__(self)

    def __bool__(self):
        return _openroadpy.net_set___bool__(self)

    def __len__(self):
        return _openroadpy.net_set___len__(self)

    def append(self, x):
        return _openroadpy.net_set_append(self, x)

    def __contains__(self, x):
        return _openroadpy.net_set___contains__(self, x)

    def __getitem__(self, i):
        return _openroadpy.net_set___getitem__(self, i)

    def add(self, x):
        return _openroadpy.net_set_add(self, x)

    def discard(self, x):
        return _openroadpy.net_set_discard(self, x)

    def __init__(self, *args):
        _openroadpy.net_set_swiginit(self, _openroadpy.new_net_set(*args))

    def empty(self):
        return _openroadpy.net_set_empty(self)

    def size(self):
        return _openroadpy.net_set_size(self)

    def clear(self):
        return _openroadpy.net_set_clear(self)

    def swap(self, v):
        return _openroadpy.net_set_swap(self, v)

    def count(self, x):
        return _openroadpy.net_set_count(self, x)

    def begin(self):
        return _openroadpy.net_set_begin(self)

    def end(self):
        return _openroadpy.net_set_end(self)

    def rbegin(self):
        return _openroadpy.net_set_rbegin(self)

    def rend(self):
        return _openroadpy.net_set_rend(self)

    def erase(self, *args):
        return _openroadpy.net_set_erase(self, *args)

    def find(self, x):
        return _openroadpy.net_set_find(self, x)

    def lower_bound(self, x):
        return _openroadpy.net_set_lower_bound(self, x)

    def upper_bound(self, x):
        return _openroadpy.net_set_upper_bound(self, x)

    def equal_range(self, x):
        return _openroadpy.net_set_equal_range(self, x)

    def insert(self, __x):
        return _openroadpy.net_set_insert(self, __x)
    __swig_destroy__ = _openroadpy.delete_net_set

# Register net_set in _openroadpy:
_openroadpy.net_set_swigregister(net_set)
CORE = _openroadpy.CORE
RINGS = _openroadpy.RINGS
BOUNDARY = _openroadpy.BOUNDARY
FIXED = _openroadpy.FIXED
GRID = _openroadpy.GRID
POWER = _openroadpy.POWER
GROUND = _openroadpy.GROUND
STAR = _openroadpy.STAR
DAISY = _openroadpy.DAISY
class PdnGen(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.PdnGen_swiginit(self, _openroadpy.new_PdnGen())
    __swig_destroy__ = _openroadpy.delete_PdnGen

    def init(self, db, logger):
        return _openroadpy.PdnGen_init(self, db, logger)

    def reset(self):
        return _openroadpy.PdnGen_reset(self)

    def resetShapes(self):
        return _openroadpy.PdnGen_resetShapes(self)

    def report(self):
        return _openroadpy.PdnGen_report(self)

    def findSwitchedPowerCell(self, name):
        return _openroadpy.PdnGen_findSwitchedPowerCell(self, name)

    def makeSwitchedPowerCell(self, master, control, acknowledge, switched_power, alwayson_power, ground):
        return _openroadpy.PdnGen_makeSwitchedPowerCell(self, master, control, acknowledge, switched_power, alwayson_power, ground)

    def getSwitchedPowerCells(self):
        return _openroadpy.PdnGen_getSwitchedPowerCells(self)

    def getDomains(self):
        return _openroadpy.PdnGen_getDomains(self)

    def findDomain(self, name):
        return _openroadpy.PdnGen_findDomain(self, name)

    def setCoreDomain(self, power, switched_power, ground, secondary):
        return _openroadpy.PdnGen_setCoreDomain(self, power, switched_power, ground, secondary)

    def makeRegionVoltageDomain(self, name, power, switched_power, ground, secondary_nets, region):
        return _openroadpy.PdnGen_makeRegionVoltageDomain(self, name, power, switched_power, ground, secondary_nets, region)

    def buildGrids(self, trim):
        return _openroadpy.PdnGen_buildGrids(self, trim)

    def findGrid(self, name):
        return _openroadpy.PdnGen_findGrid(self, name)

    def makeCoreGrid(self, domain, name, starts_with, pin_layers, generate_obstructions, powercell, powercontrol, powercontrolnetwork):
        return _openroadpy.PdnGen_makeCoreGrid(self, domain, name, starts_with, pin_layers, generate_obstructions, powercell, powercontrol, powercontrolnetwork)

    def makeInstanceGrid(self, domain, name, starts_with, inst, halo, pg_pins_to_boundary, default_grid, generate_obstructions, is_bump):
        return _openroadpy.PdnGen_makeInstanceGrid(self, domain, name, starts_with, inst, halo, pg_pins_to_boundary, default_grid, generate_obstructions, is_bump)

    def makeExistingGrid(self, name, generate_obstructions):
        return _openroadpy.PdnGen_makeExistingGrid(self, name, generate_obstructions)

    def makeRing(self, grid, layer0, width0, spacing0, layer1, width1, spacing1, starts_with, offset, pad_offset, extend, pad_pin_layers, nets, allow_out_of_die):
        return _openroadpy.PdnGen_makeRing(self, grid, layer0, width0, spacing0, layer1, width1, spacing1, starts_with, offset, pad_offset, extend, pad_pin_layers, nets, allow_out_of_die)

    def makeFollowpin(self, grid, layer, width, extend):
        return _openroadpy.PdnGen_makeFollowpin(self, grid, layer, width, extend)

    def makeStrap(self, grid, layer, width, spacing, pitch, offset, number_of_straps, snap, starts_with, extend, nets):
        return _openroadpy.PdnGen_makeStrap(self, grid, layer, width, spacing, pitch, offset, number_of_straps, snap, starts_with, extend, nets)

    def makeConnect(self, grid, layer0, layer1, cut_pitch_x, cut_pitch_y, vias, techvias, max_rows, max_columns, ongrid, split_cuts, dont_use_vias):
        return _openroadpy.PdnGen_makeConnect(self, grid, layer0, layer1, cut_pitch_x, cut_pitch_y, vias, techvias, max_rows, max_columns, ongrid, split_cuts, dont_use_vias)

    def writeToDb(self, *args):
        return _openroadpy.PdnGen_writeToDb(self, *args)

    def ripUp(self, net):
        return _openroadpy.PdnGen_ripUp(self, net)

    def setDebugRenderer(self, on):
        return _openroadpy.PdnGen_setDebugRenderer(self, on)

    def rendererRedraw(self):
        return _openroadpy.PdnGen_rendererRedraw(self)

    def setAllowRepairChannels(self, allow):
        return _openroadpy.PdnGen_setAllowRepairChannels(self, allow)

    def filterVias(self, filter):
        return _openroadpy.PdnGen_filterVias(self, filter)

    def checkSetup(self):
        return _openroadpy.PdnGen_checkSetup(self)

    def repairVias(self, nets):
        return _openroadpy.PdnGen_repairVias(self, nets)

    def createSrouteWires(self, net, outerNet, layer0, layer1, cut_pitch_x, cut_pitch_y, vias, techvias, max_rows, max_columns, ongrid, metalWidths, metalspaces, insts):
        return _openroadpy.PdnGen_createSrouteWires(self, net, outerNet, layer0, layer1, cut_pitch_x, cut_pitch_y, vias, techvias, max_rows, max_columns, ongrid, metalWidths, metalspaces, insts)

    def getDebugRenderer(self):
        return _openroadpy.PdnGen_getDebugRenderer(self)

# Register PdnGen in _openroadpy:
_openroadpy.PdnGen_swigregister(PdnGen)
class Parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setReportHPWL(self, report):
        return _openroadpy.Parameters_setReportHPWL(self, report)

    def getReportHPWL(self):
        return _openroadpy.Parameters_getReportHPWL(self)

    def setSlotsPerSection(self, slots_per_section):
        return _openroadpy.Parameters_setSlotsPerSection(self, slots_per_section)

    def getSlotsPerSection(self):
        return _openroadpy.Parameters_getSlotsPerSection(self)

    def setHorizontalLengthExtend(self, length):
        return _openroadpy.Parameters_setHorizontalLengthExtend(self, length)

    def getHorizontalLengthExtend(self):
        return _openroadpy.Parameters_getHorizontalLengthExtend(self)

    def setVerticalLengthExtend(self, length):
        return _openroadpy.Parameters_setVerticalLengthExtend(self, length)

    def getVerticalLengthExtend(self):
        return _openroadpy.Parameters_getVerticalLengthExtend(self)

    def setHorizontalLength(self, length):
        return _openroadpy.Parameters_setHorizontalLength(self, length)

    def getHorizontalLength(self):
        return _openroadpy.Parameters_getHorizontalLength(self)

    def setVerticalLength(self, length):
        return _openroadpy.Parameters_setVerticalLength(self, length)

    def getVerticalLength(self):
        return _openroadpy.Parameters_getVerticalLength(self)

    def setRandSeed(self, seed):
        return _openroadpy.Parameters_setRandSeed(self, seed)

    def getRandSeed(self):
        return _openroadpy.Parameters_getRandSeed(self)

    def setHorizontalThicknessMultiplier(self, length):
        return _openroadpy.Parameters_setHorizontalThicknessMultiplier(self, length)

    def getHorizontalThicknessMultiplier(self):
        return _openroadpy.Parameters_getHorizontalThicknessMultiplier(self)

    def setVerticalThicknessMultiplier(self, length):
        return _openroadpy.Parameters_setVerticalThicknessMultiplier(self, length)

    def getVerticalThicknessMultiplier(self):
        return _openroadpy.Parameters_getVerticalThicknessMultiplier(self)

    def setCornerAvoidance(self, length):
        return _openroadpy.Parameters_setCornerAvoidance(self, length)

    def getCornerAvoidance(self):
        return _openroadpy.Parameters_getCornerAvoidance(self)

    def setMinDistance(self, min_dist):
        return _openroadpy.Parameters_setMinDistance(self, min_dist)

    def getMinDistance(self):
        return _openroadpy.Parameters_getMinDistance(self)

    def setMinDistanceInTracks(self, in_tracks):
        return _openroadpy.Parameters_setMinDistanceInTracks(self, in_tracks)

    def getMinDistanceInTracks(self):
        return _openroadpy.Parameters_getMinDistanceInTracks(self)

    def setPinPlacementFile(self, file_name):
        return _openroadpy.Parameters_setPinPlacementFile(self, file_name)

    def getPinPlacementFile(self):
        return _openroadpy.Parameters_getPinPlacementFile(self)

    def __init__(self):
        _openroadpy.Parameters_swiginit(self, _openroadpy.new_Parameters())
    __swig_destroy__ = _openroadpy.delete_Parameters

# Register Parameters in _openroadpy:
_openroadpy.Parameters_swigregister(Parameters)
class PinGroupByIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pin_indices = property(_openroadpy.PinGroupByIndex_pin_indices_get, _openroadpy.PinGroupByIndex_pin_indices_set)
    order = property(_openroadpy.PinGroupByIndex_order_get, _openroadpy.PinGroupByIndex_order_set)

    def __init__(self):
        _openroadpy.PinGroupByIndex_swiginit(self, _openroadpy.new_PinGroupByIndex())
    __swig_destroy__ = _openroadpy.delete_PinGroupByIndex

# Register PinGroupByIndex in _openroadpy:
_openroadpy.PinGroupByIndex_swigregister(PinGroupByIndex)
class FallbackPins(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    groups = property(_openroadpy.FallbackPins_groups_get, _openroadpy.FallbackPins_groups_set)
    pins = property(_openroadpy.FallbackPins_pins_get, _openroadpy.FallbackPins_pins_set)

    def __init__(self):
        _openroadpy.FallbackPins_swiginit(self, _openroadpy.new_FallbackPins())
    __swig_destroy__ = _openroadpy.delete_FallbackPins

# Register FallbackPins in _openroadpy:
_openroadpy.FallbackPins_swigregister(FallbackPins)
Edge_top = _openroadpy.Edge_top
Edge_bottom = _openroadpy.Edge_bottom
Edge_left = _openroadpy.Edge_left
Edge_right = _openroadpy.Edge_right
Edge_invalid = _openroadpy.Edge_invalid
Direction_input = _openroadpy.Direction_input
Direction_output = _openroadpy.Direction_output
Direction_inout = _openroadpy.Direction_inout
Direction_feedthru = _openroadpy.Direction_feedthru
Direction_invalid = _openroadpy.Direction_invalid
class IOPlacer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.IOPlacer_swiginit(self, _openroadpy.new_IOPlacer())
    __swig_destroy__ = _openroadpy.delete_IOPlacer

    def init(self, db, logger):
        return _openroadpy.IOPlacer_init(self, db, logger)

    def clear(self):
        return _openroadpy.IOPlacer_clear(self)

    def clearConstraints(self):
        return _openroadpy.IOPlacer_clearConstraints(self)

    def runHungarianMatching(self):
        return _openroadpy.IOPlacer_runHungarianMatching(self)

    def runAnnealing(self):
        return _openroadpy.IOPlacer_runAnnealing(self)

    def getParameters(self):
        return _openroadpy.IOPlacer_getParameters(self)

    def computeIONetsHPWL(self):
        return _openroadpy.IOPlacer_computeIONetsHPWL(self)

    def excludeInterval(self, edge, begin, end):
        return _openroadpy.IOPlacer_excludeInterval(self, edge, begin, end)

    def addHorLayer(self, layer):
        return _openroadpy.IOPlacer_addHorLayer(self, layer)

    def addVerLayer(self, layer):
        return _openroadpy.IOPlacer_addVerLayer(self, layer)

    def placePin(self, bterm, layer, x, y, width, height, force_to_die_bound, placed_status):
        return _openroadpy.IOPlacer_placePin(self, bterm, layer, x, y, width, height, force_to_die_bound, placed_status)

    def setAnnealingConfig(self, temperature, max_iterations, perturb_per_iter, alpha):
        return _openroadpy.IOPlacer_setAnnealingConfig(self, temperature, max_iterations, perturb_per_iter, alpha)

    def setAnnealingDebugOn(self):
        return _openroadpy.IOPlacer_setAnnealingDebugOn(self)

    def isAnnealingDebugOn(self):
        return _openroadpy.IOPlacer_isAnnealingDebugOn(self)

    def setAnnealingDebugPaintInterval(self, iters_between_paintings):
        return _openroadpy.IOPlacer_setAnnealingDebugPaintInterval(self, iters_between_paintings)

    def setAnnealingDebugNoPauseMode(self, no_pause_mode):
        return _openroadpy.IOPlacer_setAnnealingDebugNoPauseMode(self, no_pause_mode)

    def writePinPlacement(self, file_name, placed):
        return _openroadpy.IOPlacer_writePinPlacement(self, file_name, placed)

    @staticmethod
    def getDirection(direction):
        return _openroadpy.IOPlacer_getDirection(direction)

    @staticmethod
    def getEdge(edge):
        return _openroadpy.IOPlacer_getEdge(edge)

# Register IOPlacer in _openroadpy:
_openroadpy.IOPlacer_swigregister(IOPlacer)

def IOPlacer_getDirection(direction):
    return _openroadpy.IOPlacer_getDirection(direction)

def IOPlacer_getEdge(edge):
    return _openroadpy.IOPlacer_getEdge(edge)

class IRDropByPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openroadpy.IRDropByPoint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openroadpy.IRDropByPoint___nonzero__(self)

    def __bool__(self):
        return _openroadpy.IRDropByPoint___bool__(self)

    def __len__(self):
        return _openroadpy.IRDropByPoint___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _openroadpy.IRDropByPoint___getitem__(self, key)

    def __delitem__(self, key):
        return _openroadpy.IRDropByPoint___delitem__(self, key)

    def has_key(self, key):
        return _openroadpy.IRDropByPoint_has_key(self, key)

    def keys(self):
        return _openroadpy.IRDropByPoint_keys(self)

    def values(self):
        return _openroadpy.IRDropByPoint_values(self)

    def items(self):
        return _openroadpy.IRDropByPoint_items(self)

    def __contains__(self, key):
        return _openroadpy.IRDropByPoint___contains__(self, key)

    def key_iterator(self):
        return _openroadpy.IRDropByPoint_key_iterator(self)

    def value_iterator(self):
        return _openroadpy.IRDropByPoint_value_iterator(self)

    def __setitem__(self, *args):
        return _openroadpy.IRDropByPoint___setitem__(self, *args)

    def asdict(self):
        return _openroadpy.IRDropByPoint_asdict(self)

    def __init__(self, *args):
        _openroadpy.IRDropByPoint_swiginit(self, _openroadpy.new_IRDropByPoint(*args))

    def empty(self):
        return _openroadpy.IRDropByPoint_empty(self)

    def size(self):
        return _openroadpy.IRDropByPoint_size(self)

    def swap(self, v):
        return _openroadpy.IRDropByPoint_swap(self, v)

    def begin(self):
        return _openroadpy.IRDropByPoint_begin(self)

    def end(self):
        return _openroadpy.IRDropByPoint_end(self)

    def rbegin(self):
        return _openroadpy.IRDropByPoint_rbegin(self)

    def rend(self):
        return _openroadpy.IRDropByPoint_rend(self)

    def clear(self):
        return _openroadpy.IRDropByPoint_clear(self)

    def get_allocator(self):
        return _openroadpy.IRDropByPoint_get_allocator(self)

    def count(self, x):
        return _openroadpy.IRDropByPoint_count(self, x)

    def erase(self, *args):
        return _openroadpy.IRDropByPoint_erase(self, *args)

    def find(self, x):
        return _openroadpy.IRDropByPoint_find(self, x)

    def lower_bound(self, x):
        return _openroadpy.IRDropByPoint_lower_bound(self, x)

    def upper_bound(self, x):
        return _openroadpy.IRDropByPoint_upper_bound(self, x)
    __swig_destroy__ = _openroadpy.delete_IRDropByPoint

# Register IRDropByPoint in _openroadpy:
_openroadpy.IRDropByPoint_swigregister(IRDropByPoint)
GeneratedSourceType_kFull = _openroadpy.GeneratedSourceType_kFull
GeneratedSourceType_kStraps = _openroadpy.GeneratedSourceType_kStraps
GeneratedSourceType_kBumps = _openroadpy.GeneratedSourceType_kBumps
class PDNSim(src.odb.odb.dbBlockCallBackObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.PDNSim_swiginit(self, _openroadpy.new_PDNSim())
    __swig_destroy__ = _openroadpy.delete_PDNSim

    def init(self, logger, db, sta, estimate_parasitics, opendp):
        return _openroadpy.PDNSim_init(self, logger, db, sta, estimate_parasitics, opendp)

    def setNetVoltage(self, net, corner, voltage):
        return _openroadpy.PDNSim_setNetVoltage(self, net, corner, voltage)

    def setInstPower(self, inst, corner, power):
        return _openroadpy.PDNSim_setInstPower(self, inst, corner, power)

    def analyzePowerGrid(self, net, corner, source_type, voltage_file, use_prev_solution, enable_em, em_file, error_file, voltage_source_file):
        return _openroadpy.PDNSim_analyzePowerGrid(self, net, corner, source_type, voltage_file, use_prev_solution, enable_em, em_file, error_file, voltage_source_file)

    def writeSpiceNetwork(self, net, corner, source_type, spice_file, voltage_source_file):
        return _openroadpy.PDNSim_writeSpiceNetwork(self, net, corner, source_type, spice_file, voltage_source_file)

    def checkConnectivity(self, net, floorplanning, error_file, require_bterm):
        return _openroadpy.PDNSim_checkConnectivity(self, net, floorplanning, error_file, require_bterm)

    def setDebugGui(self, enable):
        return _openroadpy.PDNSim_setDebugGui(self, enable)

    def clearSolvers(self):
        return _openroadpy.PDNSim_clearSolvers(self)

    def setGeneratedSourceSettings(self, settings):
        return _openroadpy.PDNSim_setGeneratedSourceSettings(self, settings)

    def inDbPostMoveInst(self, arg2):
        return _openroadpy.PDNSim_inDbPostMoveInst(self, arg2)

    def inDbNetDestroy(self, arg2):
        return _openroadpy.PDNSim_inDbNetDestroy(self, arg2)

    def inDbBTermPostConnect(self, arg2):
        return _openroadpy.PDNSim_inDbBTermPostConnect(self, arg2)

    def inDbBTermPostDisConnect(self, arg2, arg3):
        return _openroadpy.PDNSim_inDbBTermPostDisConnect(self, arg2, arg3)

    def inDbBPinDestroy(self, arg2):
        return _openroadpy.PDNSim_inDbBPinDestroy(self, arg2)

    def inDbSWireAddSBox(self, arg2):
        return _openroadpy.PDNSim_inDbSWireAddSBox(self, arg2)

    def inDbSWireRemoveSBox(self, arg2):
        return _openroadpy.PDNSim_inDbSWireRemoveSBox(self, arg2)

    def inDbSWirePostDestroySBoxes(self, arg2):
        return _openroadpy.PDNSim_inDbSWirePostDestroySBoxes(self, arg2)

    def getIRDropForLayer(self, *args):
        return _openroadpy.PDNSim_getIRDropForLayer(self, *args)

    def addDecapMaster(self, decap_master, decap_cap):
        return _openroadpy.PDNSim_addDecapMaster(self, decap_master, decap_cap)

    def insertDecapCells(self, target, net_name):
        return _openroadpy.PDNSim_insertDecapCells(self, target, net_name)

# Register PDNSim in _openroadpy:
_openroadpy.PDNSim_swigregister(PDNSim)
class Ext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.Ext_swiginit(self, _openroadpy.new_Ext())
    __swig_destroy__ = _openroadpy.delete_Ext

    def init(self, db, logger, spef_version):
        return _openroadpy.Ext_init(self, db, logger, spef_version)

    def setLogger(self, logger):
        return _openroadpy.Ext_setLogger(self, logger)

    def bench_wires_gen(self, opt):
        return _openroadpy.Ext_bench_wires_gen(self, opt)

    def gen_rcx_model(self, spef_file_list, corner_list, out_file, comment, version, pattern):
        return _openroadpy.Ext_gen_rcx_model(self, spef_file_list, corner_list, out_file, comment, version, pattern)

    def define_rcx_corners(self, corner_list):
        return _openroadpy.Ext_define_rcx_corners(self, corner_list)

    @staticmethod
    def get_model_corners(ext_model_file, logger):
        return _openroadpy.Ext_get_model_corners(ext_model_file, logger)

    def rc_estimate(self, ext_model_file, out_file_prefix):
        return _openroadpy.Ext_rc_estimate(self, ext_model_file, out_file_prefix)

    def gen_solver_patterns(self, process_file, process_name, version, wire_cnt, len, over_dist, under_dist, w_list, s_list):
        return _openroadpy.Ext_gen_solver_patterns(self, process_file, process_name, version, wire_cnt, len, over_dist, under_dist, w_list, s_list)

    def init_rcx_model(self, corner_names, metal_cnt):
        return _openroadpy.Ext_init_rcx_model(self, corner_names, metal_cnt)

    def read_rcx_tables(self, corner, filename, wire, over, under, over_under, diag):
        return _openroadpy.Ext_read_rcx_tables(self, corner, filename, wire, over, under, over_under, diag)

    def write_rcx_model(self, filename):
        return _openroadpy.Ext_write_rcx_model(self, filename)

    def write_rules(self, name, file):
        return _openroadpy.Ext_write_rules(self, name, file)

    def bench_verilog(self, file):
        return _openroadpy.Ext_bench_verilog(self, file)

    def bench_wires(self, bwo):
        return _openroadpy.Ext_bench_wires(self, bwo)

    def write_spef_nets(self, block, flatten, parallel, corner):
        return _openroadpy.Ext_write_spef_nets(self, block, flatten, parallel, corner)

    def extract(self, options):
        return _openroadpy.Ext_extract(self, options)

    def define_process_corner(self, ext_model_index, name):
        return _openroadpy.Ext_define_process_corner(self, ext_model_index, name)

    def define_derived_corner(self, name, process_corner_name, res_factor, cc_factor, gndc_factor):
        return _openroadpy.Ext_define_derived_corner(self, name, process_corner_name, res_factor, cc_factor, gndc_factor)

    def get_ext_db_corner(self, index, name):
        return _openroadpy.Ext_get_ext_db_corner(self, index, name)

    def get_corners(self, corner_list):
        return _openroadpy.Ext_get_corners(self, corner_list)

    def delete_corners(self):
        return _openroadpy.Ext_delete_corners(self)

    def adjust_rc(self, res_factor, cc_factor, gndc_factor):
        return _openroadpy.Ext_adjust_rc(self, res_factor, cc_factor, gndc_factor)

    def write_spef(self, options):
        return _openroadpy.Ext_write_spef(self, options)

    def read_spef(self, opt):
        return _openroadpy.Ext_read_spef(self, opt)

    def diff_spef(self, opt):
        return _openroadpy.Ext_diff_spef(self, opt)

    def calibrate(self, spef_file, db_corner_name, corner, spef_corner, m_map, upper_limit, lower_limit):
        return _openroadpy.Ext_calibrate(self, spef_file, db_corner_name, corner, spef_corner, m_map, upper_limit, lower_limit)

# Register Ext in _openroadpy:
_openroadpy.Ext_swigregister(Ext)

def Ext_get_model_corners(ext_model_file, logger):
    return _openroadpy.Ext_get_model_corners(ext_model_file, logger)

class BenchWiresOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    block = property(_openroadpy.BenchWiresOptions_block_get, _openroadpy.BenchWiresOptions_block_set)
    over_dist = property(_openroadpy.BenchWiresOptions_over_dist_get, _openroadpy.BenchWiresOptions_over_dist_set)
    under_dist = property(_openroadpy.BenchWiresOptions_under_dist_get, _openroadpy.BenchWiresOptions_under_dist_set)
    met_cnt = property(_openroadpy.BenchWiresOptions_met_cnt_get, _openroadpy.BenchWiresOptions_met_cnt_set)
    met = property(_openroadpy.BenchWiresOptions_met_get, _openroadpy.BenchWiresOptions_met_set)
    over_met = property(_openroadpy.BenchWiresOptions_over_met_get, _openroadpy.BenchWiresOptions_over_met_set)
    under_met = property(_openroadpy.BenchWiresOptions_under_met_get, _openroadpy.BenchWiresOptions_under_met_set)
    len = property(_openroadpy.BenchWiresOptions_len_get, _openroadpy.BenchWiresOptions_len_set)
    cnt = property(_openroadpy.BenchWiresOptions_cnt_get, _openroadpy.BenchWiresOptions_cnt_set)
    w = property(_openroadpy.BenchWiresOptions_w_get, _openroadpy.BenchWiresOptions_w_set)
    s = property(_openroadpy.BenchWiresOptions_s_get, _openroadpy.BenchWiresOptions_s_set)
    th = property(_openroadpy.BenchWiresOptions_th_get, _openroadpy.BenchWiresOptions_th_set)
    d = property(_openroadpy.BenchWiresOptions_d_get, _openroadpy.BenchWiresOptions_d_set)
    w_list = property(_openroadpy.BenchWiresOptions_w_list_get, _openroadpy.BenchWiresOptions_w_list_set)
    s_list = property(_openroadpy.BenchWiresOptions_s_list_get, _openroadpy.BenchWiresOptions_s_list_set)
    th_list = property(_openroadpy.BenchWiresOptions_th_list_get, _openroadpy.BenchWiresOptions_th_list_set)
    grid_list = property(_openroadpy.BenchWiresOptions_grid_list_get, _openroadpy.BenchWiresOptions_grid_list_set)
    default_lef_rules = property(_openroadpy.BenchWiresOptions_default_lef_rules_get, _openroadpy.BenchWiresOptions_default_lef_rules_set)
    nondefault_lef_rules = property(_openroadpy.BenchWiresOptions_nondefault_lef_rules_get, _openroadpy.BenchWiresOptions_nondefault_lef_rules_set)
    dir = property(_openroadpy.BenchWiresOptions_dir_get, _openroadpy.BenchWiresOptions_dir_set)
    Over = property(_openroadpy.BenchWiresOptions_Over_get, _openroadpy.BenchWiresOptions_Over_set)
    db_only = property(_openroadpy.BenchWiresOptions_db_only_get, _openroadpy.BenchWiresOptions_db_only_set)
    v1 = property(_openroadpy.BenchWiresOptions_v1_get, _openroadpy.BenchWiresOptions_v1_set)
    ddd = property(_openroadpy.BenchWiresOptions_ddd_get, _openroadpy.BenchWiresOptions_ddd_set)
    multiple_widths = property(_openroadpy.BenchWiresOptions_multiple_widths_get, _openroadpy.BenchWiresOptions_multiple_widths_set)
    diag = property(_openroadpy.BenchWiresOptions_diag_get, _openroadpy.BenchWiresOptions_diag_set)
    over_under = property(_openroadpy.BenchWiresOptions_over_under_get, _openroadpy.BenchWiresOptions_over_under_set)
    gen_def_patterns = property(_openroadpy.BenchWiresOptions_gen_def_patterns_get, _openroadpy.BenchWiresOptions_gen_def_patterns_set)
    resPatterns = property(_openroadpy.BenchWiresOptions_resPatterns_get, _openroadpy.BenchWiresOptions_resPatterns_set)

    def __init__(self):
        _openroadpy.BenchWiresOptions_swiginit(self, _openroadpy.new_BenchWiresOptions())
    __swig_destroy__ = _openroadpy.delete_BenchWiresOptions

# Register BenchWiresOptions in _openroadpy:
_openroadpy.BenchWiresOptions_swigregister(BenchWiresOptions)
class ExtractOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    debug_net = property(_openroadpy.ExtractOptions_debug_net_get, _openroadpy.ExtractOptions_debug_net_set)
    ext_model_file = property(_openroadpy.ExtractOptions_ext_model_file_get, _openroadpy.ExtractOptions_ext_model_file_set)
    net = property(_openroadpy.ExtractOptions_net_get, _openroadpy.ExtractOptions_net_set)
    cc_up = property(_openroadpy.ExtractOptions_cc_up_get, _openroadpy.ExtractOptions_cc_up_set)
    corner_cnt = property(_openroadpy.ExtractOptions_corner_cnt_get, _openroadpy.ExtractOptions_corner_cnt_set)
    max_res = property(_openroadpy.ExtractOptions_max_res_get, _openroadpy.ExtractOptions_max_res_set)
    no_merge_via_res = property(_openroadpy.ExtractOptions_no_merge_via_res_get, _openroadpy.ExtractOptions_no_merge_via_res_set)
    corner = property(_openroadpy.ExtractOptions_corner_get, _openroadpy.ExtractOptions_corner_set)
    coupling_threshold = property(_openroadpy.ExtractOptions_coupling_threshold_get, _openroadpy.ExtractOptions_coupling_threshold_set)
    context_depth = property(_openroadpy.ExtractOptions_context_depth_get, _openroadpy.ExtractOptions_context_depth_set)
    cc_model = property(_openroadpy.ExtractOptions_cc_model_get, _openroadpy.ExtractOptions_cc_model_set)
    signal_table = property(_openroadpy.ExtractOptions_signal_table_get, _openroadpy.ExtractOptions_signal_table_set)
    over_cell = property(_openroadpy.ExtractOptions_over_cell_get, _openroadpy.ExtractOptions_over_cell_set)
    skip_via_wires = property(_openroadpy.ExtractOptions_skip_via_wires_get, _openroadpy.ExtractOptions_skip_via_wires_set)
    lef_rc = property(_openroadpy.ExtractOptions_lef_rc_get, _openroadpy.ExtractOptions_lef_rc_set)
    lef_res = property(_openroadpy.ExtractOptions_lef_res_get, _openroadpy.ExtractOptions_lef_res_set)
    rlog = property(_openroadpy.ExtractOptions_rlog_get, _openroadpy.ExtractOptions_rlog_set)
    _v2 = property(_openroadpy.ExtractOptions__v2_get, _openroadpy.ExtractOptions__v2_set)
    _version = property(_openroadpy.ExtractOptions__version_get, _openroadpy.ExtractOptions__version_set)
    _wire_extracted_progress_count = property(_openroadpy.ExtractOptions__wire_extracted_progress_count_get, _openroadpy.ExtractOptions__wire_extracted_progress_count_set)
    _dbg = property(_openroadpy.ExtractOptions__dbg_get, _openroadpy.ExtractOptions__dbg_set)

    def __init__(self):
        _openroadpy.ExtractOptions_swiginit(self, _openroadpy.new_ExtractOptions())
    __swig_destroy__ = _openroadpy.delete_ExtractOptions

# Register ExtractOptions in _openroadpy:
_openroadpy.ExtractOptions_swigregister(ExtractOptions)
class SpefOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nets = property(_openroadpy.SpefOptions_nets_get, _openroadpy.SpefOptions_nets_set)
    net_id = property(_openroadpy.SpefOptions_net_id_get, _openroadpy.SpefOptions_net_id_set)
    ext_corner_name = property(_openroadpy.SpefOptions_ext_corner_name_get, _openroadpy.SpefOptions_ext_corner_name_set)
    corner = property(_openroadpy.SpefOptions_corner_get, _openroadpy.SpefOptions_corner_set)
    debug = property(_openroadpy.SpefOptions_debug_get)
    parallel = property(_openroadpy.SpefOptions_parallel_get)
    init = property(_openroadpy.SpefOptions_init_get)
    end = property(_openroadpy.SpefOptions_end_get)
    use_ids = property(_openroadpy.SpefOptions_use_ids_get)
    no_name_map = property(_openroadpy.SpefOptions_no_name_map_get)
    N = property(_openroadpy.SpefOptions_N_get, _openroadpy.SpefOptions_N_set)
    term_junction_xy = property(_openroadpy.SpefOptions_term_junction_xy_get)
    single_pi = property(_openroadpy.SpefOptions_single_pi_get)
    file = property(_openroadpy.SpefOptions_file_get, _openroadpy.SpefOptions_file_set)
    gz = property(_openroadpy.SpefOptions_gz_get)
    stop_after_map = property(_openroadpy.SpefOptions_stop_after_map_get)
    w_clock = property(_openroadpy.SpefOptions_w_clock_get)
    w_conn = property(_openroadpy.SpefOptions_w_conn_get)
    w_cap = property(_openroadpy.SpefOptions_w_cap_get)
    w_cc_cap = property(_openroadpy.SpefOptions_w_cc_cap_get)
    w_res = property(_openroadpy.SpefOptions_w_res_get)
    no_c_num = property(_openroadpy.SpefOptions_no_c_num_get)
    no_backslash = property(_openroadpy.SpefOptions_no_backslash_get)
    cap_units = property(_openroadpy.SpefOptions_cap_units_get, _openroadpy.SpefOptions_cap_units_set)
    res_units = property(_openroadpy.SpefOptions_res_units_get, _openroadpy.SpefOptions_res_units_set)
    coordinates = property(_openroadpy.SpefOptions_coordinates_get, _openroadpy.SpefOptions_coordinates_set)

    def __init__(self):
        _openroadpy.SpefOptions_swiginit(self, _openroadpy.new_SpefOptions())
    __swig_destroy__ = _openroadpy.delete_SpefOptions

# Register SpefOptions in _openroadpy:
_openroadpy.SpefOptions_swigregister(SpefOptions)
class ReadSpefOpts(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file = property(_openroadpy.ReadSpefOpts_file_get, _openroadpy.ReadSpefOpts_file_set)
    net = property(_openroadpy.ReadSpefOpts_net_get, _openroadpy.ReadSpefOpts_net_set)
    force = property(_openroadpy.ReadSpefOpts_force_get, _openroadpy.ReadSpefOpts_force_set)
    use_ids = property(_openroadpy.ReadSpefOpts_use_ids_get, _openroadpy.ReadSpefOpts_use_ids_set)
    keep_loaded_corner = property(_openroadpy.ReadSpefOpts_keep_loaded_corner_get, _openroadpy.ReadSpefOpts_keep_loaded_corner_set)
    stamp_wire = property(_openroadpy.ReadSpefOpts_stamp_wire_get, _openroadpy.ReadSpefOpts_stamp_wire_set)
    test_parsing = property(_openroadpy.ReadSpefOpts_test_parsing_get, _openroadpy.ReadSpefOpts_test_parsing_set)
    N = property(_openroadpy.ReadSpefOpts_N_get, _openroadpy.ReadSpefOpts_N_set)
    r_conn = property(_openroadpy.ReadSpefOpts_r_conn_get, _openroadpy.ReadSpefOpts_r_conn_set)
    r_cap = property(_openroadpy.ReadSpefOpts_r_cap_get, _openroadpy.ReadSpefOpts_r_cap_set)
    r_cc_cap = property(_openroadpy.ReadSpefOpts_r_cc_cap_get, _openroadpy.ReadSpefOpts_r_cc_cap_set)
    r_res = property(_openroadpy.ReadSpefOpts_r_res_get, _openroadpy.ReadSpefOpts_r_res_set)
    cc_threshold = property(_openroadpy.ReadSpefOpts_cc_threshold_get, _openroadpy.ReadSpefOpts_cc_threshold_set)
    cc_ground_factor = property(_openroadpy.ReadSpefOpts_cc_ground_factor_get, _openroadpy.ReadSpefOpts_cc_ground_factor_set)
    app_print_limit = property(_openroadpy.ReadSpefOpts_app_print_limit_get, _openroadpy.ReadSpefOpts_app_print_limit_set)
    corner = property(_openroadpy.ReadSpefOpts_corner_get, _openroadpy.ReadSpefOpts_corner_set)
    db_corner_name = property(_openroadpy.ReadSpefOpts_db_corner_name_get, _openroadpy.ReadSpefOpts_db_corner_name_set)
    calibrate_base_corner = property(_openroadpy.ReadSpefOpts_calibrate_base_corner_get, _openroadpy.ReadSpefOpts_calibrate_base_corner_set)
    spef_corner = property(_openroadpy.ReadSpefOpts_spef_corner_get, _openroadpy.ReadSpefOpts_spef_corner_set)
    m_map = property(_openroadpy.ReadSpefOpts_m_map_get, _openroadpy.ReadSpefOpts_m_map_set)
    more_to_read = property(_openroadpy.ReadSpefOpts_more_to_read_get, _openroadpy.ReadSpefOpts_more_to_read_set)
    length_unit = property(_openroadpy.ReadSpefOpts_length_unit_get, _openroadpy.ReadSpefOpts_length_unit_set)
    fix_loop = property(_openroadpy.ReadSpefOpts_fix_loop_get, _openroadpy.ReadSpefOpts_fix_loop_set)
    no_cap_num_collapse = property(_openroadpy.ReadSpefOpts_no_cap_num_collapse_get, _openroadpy.ReadSpefOpts_no_cap_num_collapse_set)
    cap_node_map_file = property(_openroadpy.ReadSpefOpts_cap_node_map_file_get, _openroadpy.ReadSpefOpts_cap_node_map_file_set)
    log = property(_openroadpy.ReadSpefOpts_log_get, _openroadpy.ReadSpefOpts_log_set)

    def __init__(self):
        _openroadpy.ReadSpefOpts_swiginit(self, _openroadpy.new_ReadSpefOpts())
    __swig_destroy__ = _openroadpy.delete_ReadSpefOpts

# Register ReadSpefOpts in _openroadpy:
_openroadpy.ReadSpefOpts_swigregister(ReadSpefOpts)
class DiffOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    net = property(_openroadpy.DiffOptions_net_get, _openroadpy.DiffOptions_net_set)
    use_ids = property(_openroadpy.DiffOptions_use_ids_get, _openroadpy.DiffOptions_use_ids_set)
    test_parsing = property(_openroadpy.DiffOptions_test_parsing_get, _openroadpy.DiffOptions_test_parsing_set)
    file = property(_openroadpy.DiffOptions_file_get, _openroadpy.DiffOptions_file_set)
    db_corner_name = property(_openroadpy.DiffOptions_db_corner_name_get, _openroadpy.DiffOptions_db_corner_name_set)
    spef_corner = property(_openroadpy.DiffOptions_spef_corner_get, _openroadpy.DiffOptions_spef_corner_set)
    exclude_net_subword = property(_openroadpy.DiffOptions_exclude_net_subword_get, _openroadpy.DiffOptions_exclude_net_subword_set)
    net_subword = property(_openroadpy.DiffOptions_net_subword_get, _openroadpy.DiffOptions_net_subword_set)
    rc_stats_file = property(_openroadpy.DiffOptions_rc_stats_file_get, _openroadpy.DiffOptions_rc_stats_file_set)
    r_conn = property(_openroadpy.DiffOptions_r_conn_get, _openroadpy.DiffOptions_r_conn_set)
    r_cap = property(_openroadpy.DiffOptions_r_cap_get, _openroadpy.DiffOptions_r_cap_set)
    r_cc_cap = property(_openroadpy.DiffOptions_r_cc_cap_get, _openroadpy.DiffOptions_r_cc_cap_set)
    r_res = property(_openroadpy.DiffOptions_r_res_get, _openroadpy.DiffOptions_r_res_set)
    ext_corner = property(_openroadpy.DiffOptions_ext_corner_get, _openroadpy.DiffOptions_ext_corner_set)
    low_guard = property(_openroadpy.DiffOptions_low_guard_get, _openroadpy.DiffOptions_low_guard_set)
    upper_guard = property(_openroadpy.DiffOptions_upper_guard_get, _openroadpy.DiffOptions_upper_guard_set)
    m_map = property(_openroadpy.DiffOptions_m_map_get, _openroadpy.DiffOptions_m_map_set)
    log = property(_openroadpy.DiffOptions_log_get, _openroadpy.DiffOptions_log_set)

    def __init__(self):
        _openroadpy.DiffOptions_swiginit(self, _openroadpy.new_DiffOptions())
    __swig_destroy__ = _openroadpy.delete_DiffOptions

# Register DiffOptions in _openroadpy:
_openroadpy.DiffOptions_swigregister(DiffOptions)
class PatternOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_openroadpy.PatternOptions_name_get, _openroadpy.PatternOptions_name_set)
    over_dist = property(_openroadpy.PatternOptions_over_dist_get, _openroadpy.PatternOptions_over_dist_set)
    under_dist = property(_openroadpy.PatternOptions_under_dist_get, _openroadpy.PatternOptions_under_dist_set)
    met_cnt = property(_openroadpy.PatternOptions_met_cnt_get, _openroadpy.PatternOptions_met_cnt_set)
    met = property(_openroadpy.PatternOptions_met_get, _openroadpy.PatternOptions_met_set)
    over_met = property(_openroadpy.PatternOptions_over_met_get, _openroadpy.PatternOptions_over_met_set)
    under_met = property(_openroadpy.PatternOptions_under_met_get, _openroadpy.PatternOptions_under_met_set)
    width = property(_openroadpy.PatternOptions_width_get, _openroadpy.PatternOptions_width_set)
    spacing = property(_openroadpy.PatternOptions_spacing_get, _openroadpy.PatternOptions_spacing_set)
    couple_width = property(_openroadpy.PatternOptions_couple_width_get, _openroadpy.PatternOptions_couple_width_set)
    couple_spacing = property(_openroadpy.PatternOptions_couple_spacing_get, _openroadpy.PatternOptions_couple_spacing_set)
    far_width = property(_openroadpy.PatternOptions_far_width_get, _openroadpy.PatternOptions_far_width_set)
    far_spacing = property(_openroadpy.PatternOptions_far_spacing_get, _openroadpy.PatternOptions_far_spacing_set)
    over_width = property(_openroadpy.PatternOptions_over_width_get, _openroadpy.PatternOptions_over_width_set)
    over_spacing = property(_openroadpy.PatternOptions_over_spacing_get, _openroadpy.PatternOptions_over_spacing_set)
    over2_width = property(_openroadpy.PatternOptions_over2_width_get, _openroadpy.PatternOptions_over2_width_set)
    over2_spacing = property(_openroadpy.PatternOptions_over2_spacing_get, _openroadpy.PatternOptions_over2_spacing_set)
    under_width = property(_openroadpy.PatternOptions_under_width_get, _openroadpy.PatternOptions_under_width_set)
    under_spacing = property(_openroadpy.PatternOptions_under_spacing_get, _openroadpy.PatternOptions_under_spacing_set)
    under2_width = property(_openroadpy.PatternOptions_under2_width_get, _openroadpy.PatternOptions_under2_width_set)
    under2_spacing = property(_openroadpy.PatternOptions_under2_spacing_get, _openroadpy.PatternOptions_under2_spacing_set)
    dbg = property(_openroadpy.PatternOptions_dbg_get, _openroadpy.PatternOptions_dbg_set)
    wire_cnt = property(_openroadpy.PatternOptions_wire_cnt_get, _openroadpy.PatternOptions_wire_cnt_set)
    mlist = property(_openroadpy.PatternOptions_mlist_get, _openroadpy.PatternOptions_mlist_set)
    len = property(_openroadpy.PatternOptions_len_get, _openroadpy.PatternOptions_len_set)
    offset_over = property(_openroadpy.PatternOptions_offset_over_get, _openroadpy.PatternOptions_offset_over_set)
    offset_under = property(_openroadpy.PatternOptions_offset_under_get, _openroadpy.PatternOptions_offset_under_set)
    grid_list = property(_openroadpy.PatternOptions_grid_list_get, _openroadpy.PatternOptions_grid_list_set)
    default_lef_rules = property(_openroadpy.PatternOptions_default_lef_rules_get, _openroadpy.PatternOptions_default_lef_rules_set)
    nondefault_lef_rules = property(_openroadpy.PatternOptions_nondefault_lef_rules_get, _openroadpy.PatternOptions_nondefault_lef_rules_set)
    dir = property(_openroadpy.PatternOptions_dir_get, _openroadpy.PatternOptions_dir_set)
    over = property(_openroadpy.PatternOptions_over_get, _openroadpy.PatternOptions_over_set)
    ddd = property(_openroadpy.PatternOptions_ddd_get, _openroadpy.PatternOptions_ddd_set)
    diag = property(_openroadpy.PatternOptions_diag_get, _openroadpy.PatternOptions_diag_set)
    over_under = property(_openroadpy.PatternOptions_over_under_get, _openroadpy.PatternOptions_over_under_set)
    under = property(_openroadpy.PatternOptions_under_get, _openroadpy.PatternOptions_under_set)

    def __init__(self):
        _openroadpy.PatternOptions_swiginit(self, _openroadpy.new_PatternOptions())
    __swig_destroy__ = _openroadpy.delete_PatternOptions

# Register PatternOptions in _openroadpy:
_openroadpy.PatternOptions_swigregister(PatternOptions)

def define_process_corner(ext_model_index, file):
    return _openroadpy.define_process_corner(ext_model_index, file)

def extract(ext_model_file, corner_cnt, max_res, coupling_threshold, cc_model, context_depth, debug_net_id, lef_res, no_merge_via_res, lef_rc, skip_over_cell, version, corner, dbg):
    return _openroadpy.extract(ext_model_file, corner_cnt, max_res, coupling_threshold, cc_model, context_depth, debug_net_id, lef_res, no_merge_via_res, lef_rc, skip_over_cell, version, corner, dbg)

def write_spef(file, nets, net_id, coordinates):
    return _openroadpy.write_spef(file, nets, net_id, coordinates)

def adjust_rc(res_factor, cc_factor, gndc_factor):
    return _openroadpy.adjust_rc(res_factor, cc_factor, gndc_factor)

def diff_spef(file, r_conn, r_res, r_cap, r_cc_cap, spef_corner, ext_corner):
    return _openroadpy.diff_spef(file, r_conn, r_res, r_cap, r_cc_cap, spef_corner, ext_corner)

def bench_wires(db_only, over, diag, all, met_cnt, cnt, len, under_met, w_list, s_list, over_dist, under_dist, v1):
    return _openroadpy.bench_wires(db_only, over, diag, all, met_cnt, cnt, len, under_met, w_list, s_list, over_dist, under_dist, v1)

def bench_verilog(file):
    return _openroadpy.bench_verilog(file)

def write_rules(file, name):
    return _openroadpy.write_rules(file, name)

def read_spef(file):
    return _openroadpy.read_spef(file)
class Branch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_openroadpy.Branch_x_get, _openroadpy.Branch_x_set)
    y = property(_openroadpy.Branch_y_get, _openroadpy.Branch_y_set)
    n = property(_openroadpy.Branch_n_get, _openroadpy.Branch_n_set)

    def __init__(self):
        _openroadpy.Branch_swiginit(self, _openroadpy.new_Branch())
    __swig_destroy__ = _openroadpy.delete_Branch

# Register Branch in _openroadpy:
_openroadpy.Branch_swigregister(Branch)
class Tree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deg = property(_openroadpy.Tree_deg_get, _openroadpy.Tree_deg_set)
    length = property(_openroadpy.Tree_length_get, _openroadpy.Tree_length_set)
    branch = property(_openroadpy.Tree_branch_get, _openroadpy.Tree_branch_set)

    def printTree(self, logger):
        return _openroadpy.Tree_printTree(self, logger)

    def branchCount(self):
        return _openroadpy.Tree_branchCount(self)

    def __init__(self):
        _openroadpy.Tree_swiginit(self, _openroadpy.new_Tree())
    __swig_destroy__ = _openroadpy.delete_Tree

# Register Tree in _openroadpy:
_openroadpy.Tree_swigregister(Tree)
class SteinerTreeBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.SteinerTreeBuilder_swiginit(self, _openroadpy.new_SteinerTreeBuilder())
    __swig_destroy__ = _openroadpy.delete_SteinerTreeBuilder

    def init(self, db, logger):
        return _openroadpy.SteinerTreeBuilder_init(self, db, logger)

    def makeSteinerTree(self, *args):
        return _openroadpy.SteinerTreeBuilder_makeSteinerTree(self, *args)

    def checkTree(self, tree):
        return _openroadpy.SteinerTreeBuilder_checkTree(self, tree)

    def setAlpha(self, alpha):
        return _openroadpy.SteinerTreeBuilder_setAlpha(self, alpha)

    def getAlpha(self, *args):
        return _openroadpy.SteinerTreeBuilder_getAlpha(self, *args)

    def setNetAlpha(self, net, alpha):
        return _openroadpy.SteinerTreeBuilder_setNetAlpha(self, net, alpha)

    def setMinFanoutAlpha(self, min_fanout, alpha):
        return _openroadpy.SteinerTreeBuilder_setMinFanoutAlpha(self, min_fanout, alpha)

    def setMinHPWLAlpha(self, min_hpwl, alpha):
        return _openroadpy.SteinerTreeBuilder_setMinHPWLAlpha(self, min_hpwl, alpha)

    def flute(self, x, y, acc):
        return _openroadpy.SteinerTreeBuilder_flute(self, x, y, acc)

    def wirelength(self, t):
        return _openroadpy.SteinerTreeBuilder_wirelength(self, t)

    def plottree(self, t):
        return _openroadpy.SteinerTreeBuilder_plottree(self, t)

    def flutes(self, xs, ys, s, acc):
        return _openroadpy.SteinerTreeBuilder_flutes(self, xs, ys, s, acc)

# Register SteinerTreeBuilder in _openroadpy:
_openroadpy.SteinerTreeBuilder_swigregister(SteinerTreeBuilder)

def reportSteinerTree(*args):
    return _openroadpy.reportSteinerTree(*args)
FLUTE_ROUTING = _openroadpy.FLUTE_ROUTING
FLUTE_LOCAL_REFINEMENT = _openroadpy.FLUTE_LOCAL_REFINEMENT
FLUTE_REMOVE_DUPLICATE_PIN = _openroadpy.FLUTE_REMOVE_DUPLICATE_PIN
FLUTE_POWVFILE = _openroadpy.FLUTE_POWVFILE
FLUTE_POSTFILE = _openroadpy.FLUTE_POSTFILE
FLUTE_D = _openroadpy.FLUTE_D
class Flute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.Flute_swiginit(self, _openroadpy.new_Flute())
    __swig_destroy__ = _openroadpy.delete_Flute

    def flute(self, x, y, acc):
        return _openroadpy.Flute_flute(self, x, y, acc)

    def wirelength(self, t):
        return _openroadpy.Flute_wirelength(self, t)

    def plottree(self, t):
        return _openroadpy.Flute_plottree(self, t)

    def flutes(self, xs, ys, s, acc):
        return _openroadpy.Flute_flutes(self, xs, ys, s, acc)

# Register Flute in _openroadpy:
_openroadpy.Flute_swigregister(Flute)

def primDijkstra(x, y, driver_index, alpha, logger):
    return _openroadpy.primDijkstra(x, y, driver_index, alpha, logger)
class Options(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    endcap_master = property(_openroadpy.Options_endcap_master_get, _openroadpy.Options_endcap_master_set)
    tapcell_master = property(_openroadpy.Options_tapcell_master_get, _openroadpy.Options_tapcell_master_set)
    dist = property(_openroadpy.Options_dist_get, _openroadpy.Options_dist_set)
    halo_x = property(_openroadpy.Options_halo_x_get, _openroadpy.Options_halo_x_set)
    halo_y = property(_openroadpy.Options_halo_y_get, _openroadpy.Options_halo_y_set)
    row_min_width = property(_openroadpy.Options_row_min_width_get, _openroadpy.Options_row_min_width_set)
    cnrcap_nwin_master = property(_openroadpy.Options_cnrcap_nwin_master_get, _openroadpy.Options_cnrcap_nwin_master_set)
    cnrcap_nwout_master = property(_openroadpy.Options_cnrcap_nwout_master_get, _openroadpy.Options_cnrcap_nwout_master_set)
    tap_nwintie_master = property(_openroadpy.Options_tap_nwintie_master_get, _openroadpy.Options_tap_nwintie_master_set)
    tap_nwin2_master = property(_openroadpy.Options_tap_nwin2_master_get, _openroadpy.Options_tap_nwin2_master_set)
    tap_nwin3_master = property(_openroadpy.Options_tap_nwin3_master_get, _openroadpy.Options_tap_nwin3_master_set)
    tap_nwouttie_master = property(_openroadpy.Options_tap_nwouttie_master_get, _openroadpy.Options_tap_nwouttie_master_set)
    tap_nwout2_master = property(_openroadpy.Options_tap_nwout2_master_get, _openroadpy.Options_tap_nwout2_master_set)
    tap_nwout3_master = property(_openroadpy.Options_tap_nwout3_master_get, _openroadpy.Options_tap_nwout3_master_set)
    incnrcap_nwin_master = property(_openroadpy.Options_incnrcap_nwin_master_get, _openroadpy.Options_incnrcap_nwin_master_set)
    incnrcap_nwout_master = property(_openroadpy.Options_incnrcap_nwout_master_get, _openroadpy.Options_incnrcap_nwout_master_set)

    def addBoundaryCells(self):
        return _openroadpy.Options_addBoundaryCells(self)

    def __init__(self):
        _openroadpy.Options_swiginit(self, _openroadpy.new_Options())
    __swig_destroy__ = _openroadpy.delete_Options

# Register Options in _openroadpy:
_openroadpy.Options_swigregister(Options)
class EndcapCellOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    left_top_corner = property(_openroadpy.EndcapCellOptions_left_top_corner_get, _openroadpy.EndcapCellOptions_left_top_corner_set)
    right_top_corner = property(_openroadpy.EndcapCellOptions_right_top_corner_get, _openroadpy.EndcapCellOptions_right_top_corner_set)
    left_bottom_corner = property(_openroadpy.EndcapCellOptions_left_bottom_corner_get, _openroadpy.EndcapCellOptions_left_bottom_corner_set)
    right_bottom_corner = property(_openroadpy.EndcapCellOptions_right_bottom_corner_get, _openroadpy.EndcapCellOptions_right_bottom_corner_set)
    left_top_edge = property(_openroadpy.EndcapCellOptions_left_top_edge_get, _openroadpy.EndcapCellOptions_left_top_edge_set)
    right_top_edge = property(_openroadpy.EndcapCellOptions_right_top_edge_get, _openroadpy.EndcapCellOptions_right_top_edge_set)
    left_bottom_edge = property(_openroadpy.EndcapCellOptions_left_bottom_edge_get, _openroadpy.EndcapCellOptions_left_bottom_edge_set)
    right_bottom_edge = property(_openroadpy.EndcapCellOptions_right_bottom_edge_get, _openroadpy.EndcapCellOptions_right_bottom_edge_set)
    top_edge = property(_openroadpy.EndcapCellOptions_top_edge_get, _openroadpy.EndcapCellOptions_top_edge_set)
    bottom_edge = property(_openroadpy.EndcapCellOptions_bottom_edge_get, _openroadpy.EndcapCellOptions_bottom_edge_set)
    left_edge = property(_openroadpy.EndcapCellOptions_left_edge_get, _openroadpy.EndcapCellOptions_left_edge_set)
    right_edge = property(_openroadpy.EndcapCellOptions_right_edge_get, _openroadpy.EndcapCellOptions_right_edge_set)
    prefix = property(_openroadpy.EndcapCellOptions_prefix_get, _openroadpy.EndcapCellOptions_prefix_set)
    tapcell_cmd = property(_openroadpy.EndcapCellOptions_tapcell_cmd_get, _openroadpy.EndcapCellOptions_tapcell_cmd_set)

    def __init__(self):
        _openroadpy.EndcapCellOptions_swiginit(self, _openroadpy.new_EndcapCellOptions())
    __swig_destroy__ = _openroadpy.delete_EndcapCellOptions

# Register EndcapCellOptions in _openroadpy:
_openroadpy.EndcapCellOptions_swigregister(EndcapCellOptions)
class Tapcell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openroadpy.Tapcell_swiginit(self, _openroadpy.new_Tapcell())

    def init(self, db, logger):
        return _openroadpy.Tapcell_init(self, db, logger)

    def setTapPrefix(self, tap_prefix):
        return _openroadpy.Tapcell_setTapPrefix(self, tap_prefix)

    def setEndcapPrefix(self, endcap_prefix):
        return _openroadpy.Tapcell_setEndcapPrefix(self, endcap_prefix)

    def clear(self):
        return _openroadpy.Tapcell_clear(self)

    def run(self, options):
        return _openroadpy.Tapcell_run(self, options)

    def cutRows(self, options):
        return _openroadpy.Tapcell_cutRows(self, options)

    def reset(self):
        return _openroadpy.Tapcell_reset(self)

    def removeCells(self, prefix):
        return _openroadpy.Tapcell_removeCells(self, prefix)

    def placeEndcaps(self, options):
        return _openroadpy.Tapcell_placeEndcaps(self, options)

    def placeTapcells(self, options):
        return _openroadpy.Tapcell_placeTapcells(self, options)
    __swig_destroy__ = _openroadpy.delete_Tapcell

# Register Tapcell in _openroadpy:
_openroadpy.Tapcell_swigregister(Tapcell)
import src.utl.utl

def openroad_version():
    return _openroadpy.openroad_version()

def openroad_git_describe():
    return _openroadpy.openroad_git_describe()

def get_db():
    return _openroadpy.get_db()

def get_db_tech():
    return _openroadpy.get_db_tech()

def db_has_tech():
    return _openroadpy.db_has_tech()

def get_db_block():
    return _openroadpy.get_db_block()

def set_thread_count(threads):
    return _openroadpy.set_thread_count(threads)

def thread_count():
    return _openroadpy.thread_count()


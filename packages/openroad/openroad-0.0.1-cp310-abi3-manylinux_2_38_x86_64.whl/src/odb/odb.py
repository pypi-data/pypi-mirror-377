# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _odb
else:
    import _odb

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _odb.delete_SwigPyIterator

    def value(self):
        return _odb.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _odb.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _odb.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _odb.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _odb.SwigPyIterator_equal(self, x)

    def copy(self):
        return _odb.SwigPyIterator_copy(self)

    def next(self):
        return _odb.SwigPyIterator_next(self)

    def __next__(self):
        return _odb.SwigPyIterator___next__(self)

    def previous(self):
        return _odb.SwigPyIterator_previous(self)

    def advance(self, n):
        return _odb.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _odb.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _odb.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _odb.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _odb.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _odb.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _odb.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _odb:
_odb.SwigPyIterator_swigregister(SwigPyIterator)
class vector_str(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _odb.vector_str_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _odb.vector_str___nonzero__(self)

    def __bool__(self):
        return _odb.vector_str___bool__(self)

    def __len__(self):
        return _odb.vector_str___len__(self)

    def __getslice__(self, i, j):
        return _odb.vector_str___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _odb.vector_str___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _odb.vector_str___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _odb.vector_str___delitem__(self, *args)

    def __getitem__(self, *args):
        return _odb.vector_str___getitem__(self, *args)

    def __setitem__(self, *args):
        return _odb.vector_str___setitem__(self, *args)

    def pop(self):
        return _odb.vector_str_pop(self)

    def append(self, x):
        return _odb.vector_str_append(self, x)

    def empty(self):
        return _odb.vector_str_empty(self)

    def size(self):
        return _odb.vector_str_size(self)

    def swap(self, v):
        return _odb.vector_str_swap(self, v)

    def begin(self):
        return _odb.vector_str_begin(self)

    def end(self):
        return _odb.vector_str_end(self)

    def rbegin(self):
        return _odb.vector_str_rbegin(self)

    def rend(self):
        return _odb.vector_str_rend(self)

    def clear(self):
        return _odb.vector_str_clear(self)

    def get_allocator(self):
        return _odb.vector_str_get_allocator(self)

    def pop_back(self):
        return _odb.vector_str_pop_back(self)

    def erase(self, *args):
        return _odb.vector_str_erase(self, *args)

    def __init__(self, *args):
        _odb.vector_str_swiginit(self, _odb.new_vector_str(*args))

    def push_back(self, x):
        return _odb.vector_str_push_back(self, x)

    def front(self):
        return _odb.vector_str_front(self)

    def back(self):
        return _odb.vector_str_back(self)

    def assign(self, n, x):
        return _odb.vector_str_assign(self, n, x)

    def resize(self, *args):
        return _odb.vector_str_resize(self, *args)

    def insert(self, *args):
        return _odb.vector_str_insert(self, *args)

    def reserve(self, n):
        return _odb.vector_str_reserve(self, n)

    def capacity(self):
        return _odb.vector_str_capacity(self)
    __swig_destroy__ = _odb.delete_vector_str

# Register vector_str in _odb:
_odb.vector_str_swigregister(vector_str)
class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _odb.Point_swiginit(self, _odb.new_Point(*args))
    __swig_destroy__ = _odb.delete_Point

    def assign(self, rhs):
        return _odb.Point_assign(self, rhs)

    def __eq__(self, rhs):
        return _odb.Point___eq__(self, rhs)

    def __ne__(self, rhs):
        return _odb.Point___ne__(self, rhs)

    def __lt__(self, rhs):
        return _odb.Point___lt__(self, rhs)

    def __ge__(self, rhs):
        return _odb.Point___ge__(self, rhs)

    def getX(self):
        return _odb.Point_getX(self)

    def getY(self):
        return _odb.Point_getY(self)

    def setX(self, x):
        return _odb.Point_setX(self, x)

    def setY(self, y):
        return _odb.Point_setY(self, y)

    def addX(self, x):
        return _odb.Point_addX(self, x)

    def addY(self, y):
        return _odb.Point_addY(self, y)

    def rotate90(self):
        return _odb.Point_rotate90(self)

    def rotate180(self):
        return _odb.Point_rotate180(self)

    def rotate270(self):
        return _odb.Point_rotate270(self)

    def x(self):
        return _odb.Point_x(self)

    def y(self):
        return _odb.Point_y(self)

    @staticmethod
    def squaredDistance(p0, p1):
        return _odb.Point_squaredDistance(p0, p1)

    @staticmethod
    def manhattanDistance(p0, p1):
        return _odb.Point_manhattanDistance(p0, p1)

# Register Point in _odb:
_odb.Point_swigregister(Point)

def Point_squaredDistance(p0, p1):
    return _odb.Point_squaredDistance(p0, p1)

def Point_manhattanDistance(p0, p1):
    return _odb.Point_manhattanDistance(p0, p1)

class Point3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def assign(self, arg2):
        return _odb.Point3D_assign(self, arg2)

    def __init__(self, *args):
        _odb.Point3D_swiginit(self, _odb.new_Point3D(*args))

    def __eq__(self, rhs):
        return _odb.Point3D___eq__(self, rhs)

    def __ne__(self, rhs):
        return _odb.Point3D___ne__(self, rhs)

    def __lt__(self, rhs):
        return _odb.Point3D___lt__(self, rhs)

    def __ge__(self, rhs):
        return _odb.Point3D___ge__(self, rhs)

    def z(self):
        return _odb.Point3D_z(self)

    def setZ(self, z):
        return _odb.Point3D_setZ(self, z)

    def x(self):
        return _odb.Point3D_x(self)

    def setX(self, x):
        return _odb.Point3D_setX(self, x)

    def y(self):
        return _odb.Point3D_y(self)

    def setY(self, y):
        return _odb.Point3D_setY(self, y)

    def set(self, x, y, z):
        return _odb.Point3D_set(self, x, y, z)
    __swig_destroy__ = _odb.delete_Point3D

# Register Point3D in _odb:
_odb.Point3D_swigregister(Point3D)
class Oct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RIGHT = _odb.Oct_RIGHT
    LEFT = _odb.Oct_LEFT
    UNKNOWN = _odb.Oct_UNKNOWN

    def __init__(self, *args):
        _odb.Oct_swiginit(self, _odb.new_Oct(*args))
    __swig_destroy__ = _odb.delete_Oct

    def assign(self, r):
        return _odb.Oct_assign(self, r)

    def __eq__(self, r):
        return _odb.Oct___eq__(self, r)

    def __ne__(self, r):
        return _odb.Oct___ne__(self, r)

    def init(self, p1, p2, width):
        return _odb.Oct_init(self, p1, p2, width)

    def getDir(self):
        return _odb.Oct_getDir(self)

    def getCenterHigh(self):
        return _odb.Oct_getCenterHigh(self)

    def getCenterLow(self):
        return _odb.Oct_getCenterLow(self)

    def getWidth(self):
        return _odb.Oct_getWidth(self)

    def dx(self):
        return _odb.Oct_dx(self)

    def dy(self):
        return _odb.Oct_dy(self)

    def xMin(self):
        return _odb.Oct_xMin(self)

    def yMin(self):
        return _odb.Oct_yMin(self)

    def xMax(self):
        return _odb.Oct_xMax(self)

    def yMax(self):
        return _odb.Oct_yMax(self)

    def getPoints(self):
        return _odb.Oct_getPoints(self)

    def bloat(self, margin):
        return _odb.Oct_bloat(self, margin)

    def getEnclosingRect(self):
        return _odb.Oct_getEnclosingRect(self)

# Register Oct in _odb:
_odb.Oct_swigregister(Oct)
class Rect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _odb.Rect_swiginit(self, _odb.new_Rect(*args))

    def assign(self):
        return _odb.Rect_assign(self)

    def __eq__(self):
        return _odb.Rect___eq__(self)

    def __ne__(self):
        return _odb.Rect___ne__(self)

    def __lt__(self):
        return _odb.Rect___lt__(self)

    def __gt__(self):
        return _odb.Rect___gt__(self)

    def __le__(self):
        return _odb.Rect___le__(self)

    def __ge__(self):
        return _odb.Rect___ge__(self)

    def init(self, x1, y1, x2, y2):
        return _odb.Rect_init(self, x1, y1, x2, y2)

    def reset(self, x1, y1, x2, y2):
        return _odb.Rect_reset(self, x1, y1, x2, y2)

    def moveTo(self, x, y):
        return _odb.Rect_moveTo(self, x, y)

    def moveDelta(self, dx, dy):
        return _odb.Rect_moveDelta(self, dx, dy)

    def mergeInit(self):
        return _odb.Rect_mergeInit(self)

    def isInverted(self):
        return _odb.Rect_isInverted(self)

    def minDXDY(self):
        return _odb.Rect_minDXDY(self)

    def maxDXDY(self):
        return _odb.Rect_maxDXDY(self)

    def getDir(self):
        return _odb.Rect_getDir(self)

    def set_xlo(self, x):
        return _odb.Rect_set_xlo(self, x)

    def set_xhi(self, x):
        return _odb.Rect_set_xhi(self, x)

    def set_ylo(self, y):
        return _odb.Rect_set_ylo(self, y)

    def set_yhi(self, y):
        return _odb.Rect_set_yhi(self, y)

    def xMin(self):
        return _odb.Rect_xMin(self)

    def yMin(self):
        return _odb.Rect_yMin(self)

    def xMax(self):
        return _odb.Rect_xMax(self)

    def yMax(self):
        return _odb.Rect_yMax(self)

    def dx(self):
        return _odb.Rect_dx(self)

    def dy(self):
        return _odb.Rect_dy(self)

    def xCenter(self):
        return _odb.Rect_xCenter(self)

    def yCenter(self):
        return _odb.Rect_yCenter(self)

    def getPoints(self):
        return _odb.Rect_getPoints(self)

    def ll(self):
        return _odb.Rect_ll(self)

    def ul(self):
        return _odb.Rect_ul(self)

    def ur(self):
        return _odb.Rect_ur(self)

    def lr(self):
        return _odb.Rect_lr(self)

    def center(self):
        return _odb.Rect_center(self)

    def intersects(self, *args):
        return _odb.Rect_intersects(self, *args)

    def overlaps(self, *args):
        return _odb.Rect_overlaps(self, *args)

    def contains(self):
        return _odb.Rect_contains(self)

    def inside(self):
        return _odb.Rect_inside(self)

    def closestPtInside(self, pt):
        return _odb.Rect_closestPtInside(self, pt)

    def merge(self, *args):
        return _odb.Rect_merge(self, *args)

    def bloat(self, margin, result):
        return _odb.Rect_bloat(self, margin, result)

    def intersection(self, result):
        return _odb.Rect_intersection(self, result)

    def intersect(self):
        return _odb.Rect_intersect(self)

    def area(self):
        return _odb.Rect_area(self)

    def margin(self):
        return _odb.Rect_margin(self)

    def printf(self, *args):
        return _odb.Rect_printf(self, *args)

    def _print(self, *args):
        return _odb.Rect__print(self, *args)
    __swig_destroy__ = _odb.delete_Rect

# Register Rect in _odb:
_odb.Rect_swigregister(Rect)
class Polygon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def assign(self, arg2):
        return _odb.Polygon_assign(self, arg2)

    def __init__(self, *args):
        _odb.Polygon_swiginit(self, _odb.new_Polygon(*args))

    def getPoints(self):
        return _odb.Polygon_getPoints(self)

    def setPoints(self, points):
        return _odb.Polygon_setPoints(self, points)

    def __eq__(self, p):
        return _odb.Polygon___eq__(self, p)

    def __ne__(self, p):
        return _odb.Polygon___ne__(self, p)

    def __lt__(self, p):
        return _odb.Polygon___lt__(self, p)

    def __gt__(self, p):
        return _odb.Polygon___gt__(self, p)

    def __le__(self, p):
        return _odb.Polygon___le__(self, p)

    def __ge__(self, p):
        return _odb.Polygon___ge__(self, p)

    def isRect(self):
        return _odb.Polygon_isRect(self)

    def getEnclosingRect(self):
        return _odb.Polygon_getEnclosingRect(self)

    def dx(self):
        return _odb.Polygon_dx(self)

    def dy(self):
        return _odb.Polygon_dy(self)

    def bloat(self, margin):
        return _odb.Polygon_bloat(self, margin)

    @staticmethod
    def merge(*args):
        return _odb.Polygon_merge(*args)

    def difference(self, b):
        return _odb.Polygon_difference(self, b)
    __swig_destroy__ = _odb.delete_Polygon

# Register Polygon in _odb:
_odb.Polygon_swigregister(Polygon)

def Polygon_merge(*args):
    return _odb.Polygon_merge(*args)

class Line(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _odb.Line_swiginit(self, _odb.new_Line(*args))

    def assign(self, r):
        return _odb.Line_assign(self, r)

    def __eq__(self, r):
        return _odb.Line___eq__(self, r)

    def __ne__(self, r):
        return _odb.Line___ne__(self, r)

    def __lt__(self, r):
        return _odb.Line___lt__(self, r)

    def __gt__(self, r):
        return _odb.Line___gt__(self, r)

    def __le__(self, r):
        return _odb.Line___le__(self, r)

    def __ge__(self, r):
        return _odb.Line___ge__(self, r)

    def getPoints(self):
        return _odb.Line_getPoints(self)

    def pt0(self):
        return _odb.Line_pt0(self)

    def pt1(self):
        return _odb.Line_pt1(self)

    def addX(self, value):
        return _odb.Line_addX(self, value)

    def addY(self, value):
        return _odb.Line_addY(self, value)
    __swig_destroy__ = _odb.delete_Line

# Register Line in _odb:
_odb.Line_swigregister(Line)

def manhattanDistance(p):
    return _odb.manhattanDistance(p)
class Points(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _odb.Points_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _odb.Points___nonzero__(self)

    def __bool__(self):
        return _odb.Points___bool__(self)

    def __len__(self):
        return _odb.Points___len__(self)

    def __getslice__(self, i, j):
        return _odb.Points___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _odb.Points___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _odb.Points___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _odb.Points___delitem__(self, *args)

    def __getitem__(self, *args):
        return _odb.Points___getitem__(self, *args)

    def __setitem__(self, *args):
        return _odb.Points___setitem__(self, *args)

    def pop(self):
        return _odb.Points_pop(self)

    def append(self, x):
        return _odb.Points_append(self, x)

    def empty(self):
        return _odb.Points_empty(self)

    def size(self):
        return _odb.Points_size(self)

    def swap(self, v):
        return _odb.Points_swap(self, v)

    def begin(self):
        return _odb.Points_begin(self)

    def end(self):
        return _odb.Points_end(self)

    def rbegin(self):
        return _odb.Points_rbegin(self)

    def rend(self):
        return _odb.Points_rend(self)

    def clear(self):
        return _odb.Points_clear(self)

    def get_allocator(self):
        return _odb.Points_get_allocator(self)

    def pop_back(self):
        return _odb.Points_pop_back(self)

    def erase(self, *args):
        return _odb.Points_erase(self, *args)

    def __init__(self, *args):
        _odb.Points_swiginit(self, _odb.new_Points(*args))

    def push_back(self, x):
        return _odb.Points_push_back(self, x)

    def front(self):
        return _odb.Points_front(self)

    def back(self):
        return _odb.Points_back(self)

    def assign(self, n, x):
        return _odb.Points_assign(self, n, x)

    def resize(self, *args):
        return _odb.Points_resize(self, *args)

    def insert(self, *args):
        return _odb.Points_insert(self, *args)

    def reserve(self, n):
        return _odb.Points_reserve(self, n)

    def capacity(self):
        return _odb.Points_capacity(self)
    __swig_destroy__ = _odb.delete_Points

# Register Points in _odb:
_odb.Points_swigregister(Points)
class Rects(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _odb.Rects_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _odb.Rects___nonzero__(self)

    def __bool__(self):
        return _odb.Rects___bool__(self)

    def __len__(self):
        return _odb.Rects___len__(self)

    def __getslice__(self, i, j):
        return _odb.Rects___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _odb.Rects___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _odb.Rects___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _odb.Rects___delitem__(self, *args)

    def __getitem__(self, *args):
        return _odb.Rects___getitem__(self, *args)

    def __setitem__(self, *args):
        return _odb.Rects___setitem__(self, *args)

    def pop(self):
        return _odb.Rects_pop(self)

    def append(self, x):
        return _odb.Rects_append(self, x)

    def empty(self):
        return _odb.Rects_empty(self)

    def size(self):
        return _odb.Rects_size(self)

    def swap(self, v):
        return _odb.Rects_swap(self, v)

    def begin(self):
        return _odb.Rects_begin(self)

    def end(self):
        return _odb.Rects_end(self)

    def rbegin(self):
        return _odb.Rects_rbegin(self)

    def rend(self):
        return _odb.Rects_rend(self)

    def clear(self):
        return _odb.Rects_clear(self)

    def get_allocator(self):
        return _odb.Rects_get_allocator(self)

    def pop_back(self):
        return _odb.Rects_pop_back(self)

    def erase(self, *args):
        return _odb.Rects_erase(self, *args)

    def __init__(self, *args):
        _odb.Rects_swiginit(self, _odb.new_Rects(*args))

    def push_back(self, x):
        return _odb.Rects_push_back(self, x)

    def front(self):
        return _odb.Rects_front(self)

    def back(self):
        return _odb.Rects_back(self)

    def assign(self, n, x):
        return _odb.Rects_assign(self, n, x)

    def resize(self, *args):
        return _odb.Rects_resize(self, *args)

    def insert(self, *args):
        return _odb.Rects_insert(self, *args)

    def reserve(self, n):
        return _odb.Rects_reserve(self, n)

    def capacity(self):
        return _odb.Rects_capacity(self)
    __swig_destroy__ = _odb.delete_Rects

# Register Rects in _odb:
_odb.Rects_swigregister(Rects)
class Polygon90Set(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _odb.Polygon90Set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _odb.Polygon90Set___nonzero__(self)

    def __bool__(self):
        return _odb.Polygon90Set___bool__(self)

    def __len__(self):
        return _odb.Polygon90Set___len__(self)

    def __getslice__(self, i, j):
        return _odb.Polygon90Set___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _odb.Polygon90Set___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _odb.Polygon90Set___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _odb.Polygon90Set___delitem__(self, *args)

    def __getitem__(self, *args):
        return _odb.Polygon90Set___getitem__(self, *args)

    def __setitem__(self, *args):
        return _odb.Polygon90Set___setitem__(self, *args)

    def pop(self):
        return _odb.Polygon90Set_pop(self)

    def append(self, x):
        return _odb.Polygon90Set_append(self, x)

    def empty(self):
        return _odb.Polygon90Set_empty(self)

    def size(self):
        return _odb.Polygon90Set_size(self)

    def swap(self, v):
        return _odb.Polygon90Set_swap(self, v)

    def begin(self):
        return _odb.Polygon90Set_begin(self)

    def end(self):
        return _odb.Polygon90Set_end(self)

    def rbegin(self):
        return _odb.Polygon90Set_rbegin(self)

    def rend(self):
        return _odb.Polygon90Set_rend(self)

    def clear(self):
        return _odb.Polygon90Set_clear(self)

    def get_allocator(self):
        return _odb.Polygon90Set_get_allocator(self)

    def pop_back(self):
        return _odb.Polygon90Set_pop_back(self)

    def erase(self, *args):
        return _odb.Polygon90Set_erase(self, *args)

    def __init__(self, *args):
        _odb.Polygon90Set_swiginit(self, _odb.new_Polygon90Set(*args))

    def push_back(self, x):
        return _odb.Polygon90Set_push_back(self, x)

    def front(self):
        return _odb.Polygon90Set_front(self)

    def back(self):
        return _odb.Polygon90Set_back(self)

    def assign(self, n, x):
        return _odb.Polygon90Set_assign(self, n, x)

    def resize(self, *args):
        return _odb.Polygon90Set_resize(self, *args)

    def insert(self, *args):
        return _odb.Polygon90Set_insert(self, *args)

    def reserve(self, n):
        return _odb.Polygon90Set_reserve(self, n)

    def capacity(self):
        return _odb.Polygon90Set_capacity(self)
    __swig_destroy__ = _odb.delete_Polygon90Set

# Register Polygon90Set in _odb:
_odb.Polygon90Set_swigregister(Polygon90Set)
class Polygon90Sets(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _odb.Polygon90Sets_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _odb.Polygon90Sets___nonzero__(self)

    def __bool__(self):
        return _odb.Polygon90Sets___bool__(self)

    def __len__(self):
        return _odb.Polygon90Sets___len__(self)

    def __getslice__(self, i, j):
        return _odb.Polygon90Sets___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _odb.Polygon90Sets___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _odb.Polygon90Sets___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _odb.Polygon90Sets___delitem__(self, *args)

    def __getitem__(self, *args):
        return _odb.Polygon90Sets___getitem__(self, *args)

    def __setitem__(self, *args):
        return _odb.Polygon90Sets___setitem__(self, *args)

    def pop(self):
        return _odb.Polygon90Sets_pop(self)

    def append(self, x):
        return _odb.Polygon90Sets_append(self, x)

    def empty(self):
        return _odb.Polygon90Sets_empty(self)

    def size(self):
        return _odb.Polygon90Sets_size(self)

    def swap(self, v):
        return _odb.Polygon90Sets_swap(self, v)

    def begin(self):
        return _odb.Polygon90Sets_begin(self)

    def end(self):
        return _odb.Polygon90Sets_end(self)

    def rbegin(self):
        return _odb.Polygon90Sets_rbegin(self)

    def rend(self):
        return _odb.Polygon90Sets_rend(self)

    def clear(self):
        return _odb.Polygon90Sets_clear(self)

    def get_allocator(self):
        return _odb.Polygon90Sets_get_allocator(self)

    def pop_back(self):
        return _odb.Polygon90Sets_pop_back(self)

    def erase(self, *args):
        return _odb.Polygon90Sets_erase(self, *args)

    def __init__(self, *args):
        _odb.Polygon90Sets_swiginit(self, _odb.new_Polygon90Sets(*args))

    def push_back(self, x):
        return _odb.Polygon90Sets_push_back(self, x)

    def front(self):
        return _odb.Polygon90Sets_front(self)

    def back(self):
        return _odb.Polygon90Sets_back(self)

    def assign(self, n, x):
        return _odb.Polygon90Sets_assign(self, n, x)

    def resize(self, *args):
        return _odb.Polygon90Sets_resize(self, *args)

    def insert(self, *args):
        return _odb.Polygon90Sets_insert(self, *args)

    def reserve(self, n):
        return _odb.Polygon90Sets_reserve(self, n)

    def capacity(self):
        return _odb.Polygon90Sets_capacity(self)
    __swig_destroy__ = _odb.delete_Polygon90Sets

# Register Polygon90Sets in _odb:
_odb.Polygon90Sets_swigregister(Polygon90Sets)

def newSetFromRect(xLo, yLo, xHi, yHi):
    return _odb.newSetFromRect(xLo, yLo, xHi, yHi)

def getPoints(polygon):
    return _odb.getPoints(polygon)

def getPolygons(set):
    return _odb.getPolygons(set)

def getRectangles(set):
    return _odb.getRectangles(set)

def bloatSet(*args):
    return _odb.bloatSet(*args)

def shrinkSet(*args):
    return _odb.shrinkSet(*args)

def andSet(set1, set2):
    return _odb.andSet(set1, set2)

def orSet(set1, set2):
    return _odb.orSet(set1, set2)

def orSets(sets):
    return _odb.orSets(sets)

def subtractSet(set1, set2):
    return _odb.subtractSet(set1, set2)

def destroySet(set):
    return _odb.destroySet(set)

def destroyPolygon(polygon):
    return _odb.destroyPolygon(polygon)
class dbBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def xMin(self):
        return _odb.dbBox_xMin(self)

    def yMin(self):
        return _odb.dbBox_yMin(self)

    def xMax(self):
        return _odb.dbBox_xMax(self)

    def yMax(self):
        return _odb.dbBox_yMax(self)

    def isVia(self):
        return _odb.dbBox_isVia(self)

    def getTechVia(self):
        return _odb.dbBox_getTechVia(self)

    def getBlockVia(self):
        return _odb.dbBox_getBlockVia(self)

    def getViaXY(self, *args):
        return _odb.dbBox_getViaXY(self, *args)

    def getViaBoxes(self, shapes):
        return _odb.dbBox_getViaBoxes(self, shapes)

    def getViaLayerBoxes(self, layer, shapes):
        return _odb.dbBox_getViaLayerBoxes(self, layer, shapes)

    def getDir(self):
        return _odb.dbBox_getDir(self)

    def getDX(self):
        return _odb.dbBox_getDX(self)

    def getDesignRuleWidth(self):
        return _odb.dbBox_getDesignRuleWidth(self)

    def setDesignRuleWidth(self, arg2):
        return _odb.dbBox_setDesignRuleWidth(self, arg2)

    def getDY(self):
        return _odb.dbBox_getDY(self)

    def getWidth(self, dir=1):
        return _odb.dbBox_getWidth(self, dir)

    def getLength(self, dir=1):
        return _odb.dbBox_getLength(self, dir)

    def setVisited(self, value):
        return _odb.dbBox_setVisited(self, value)

    def isVisited(self):
        return _odb.dbBox_isVisited(self)

    def getBoxOwner(self):
        return _odb.dbBox_getBoxOwner(self)

    def getOwnerType(self):
        return _odb.dbBox_getOwnerType(self)

    def getTechLayer(self):
        return _odb.dbBox_getTechLayer(self)

    def getLayerMask(self):
        return _odb.dbBox_getLayerMask(self)

    def setLayerMask(self, mask):
        return _odb.dbBox_setLayerMask(self, mask)

    @staticmethod
    def create(*args):
        return _odb.dbBox_create(*args)

    @staticmethod
    def destroy(box):
        return _odb.dbBox_destroy(box)

    @staticmethod
    def getBox(*args):
        return _odb.dbBox_getBox(*args)

    def __init__(self):
        _odb.dbBox_swiginit(self, _odb.new_dbBox())
    __swig_destroy__ = _odb.delete_dbBox

# Register dbBox in _odb:
_odb.dbBox_swigregister(dbBox)
cvar = _odb.cvar
ADS_MAX_CORNER = cvar.ADS_MAX_CORNER

def dbBox_create(*args):
    return _odb.dbBox_create(*args)

def dbBox_destroy(box):
    return _odb.dbBox_destroy(box)

def dbBox_getBox(*args):
    return _odb.dbBox_getBox(*args)

class dbSBox(dbBox):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNDEFINED = _odb.dbSBox_UNDEFINED
    HORIZONTAL = _odb.dbSBox_HORIZONTAL
    VERTICAL = _odb.dbSBox_VERTICAL
    OCTILINEAR = _odb.dbSBox_OCTILINEAR

    def getWireShapeType(self):
        return _odb.dbSBox_getWireShapeType(self)

    def getDirection(self):
        return _odb.dbSBox_getDirection(self)

    def getSWire(self):
        return _odb.dbSBox_getSWire(self)

    def getOct(self):
        return _odb.dbSBox_getOct(self)

    def getViaBottomLayerMask(self):
        return _odb.dbSBox_getViaBottomLayerMask(self)

    def getViaCutLayerMask(self):
        return _odb.dbSBox_getViaCutLayerMask(self)

    def getViaTopLayerMask(self):
        return _odb.dbSBox_getViaTopLayerMask(self)

    def setViaLayerMask(self, bottom, cut, top):
        return _odb.dbSBox_setViaLayerMask(self, bottom, cut, top)

    def hasViaLayerMasks(self):
        return _odb.dbSBox_hasViaLayerMasks(self)

    def smashVia(self):
        return _odb.dbSBox_smashVia(self)

    @staticmethod
    def create(*args):
        return _odb.dbSBox_create(*args)

    @staticmethod
    def getSBox(block, oid):
        return _odb.dbSBox_getSBox(block, oid)

    @staticmethod
    def destroy(box):
        return _odb.dbSBox_destroy(box)

    def __init__(self):
        _odb.dbSBox_swiginit(self, _odb.new_dbSBox())
    __swig_destroy__ = _odb.delete_dbSBox

# Register dbSBox in _odb:
_odb.dbSBox_swigregister(dbSBox)

def dbSBox_create(*args):
    return _odb.dbSBox_create(*args)

def dbSBox_getSBox(block, oid):
    return _odb.dbSBox_getSBox(block, oid)

def dbSBox_destroy(box):
    return _odb.dbSBox_destroy(box)

class dbBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbBlock_getName(self)

    def getConstName(self):
        return _odb.dbBlock_getConstName(self)

    def getBBox(self):
        return _odb.dbBlock_getBBox(self)

    def getChip(self):
        return _odb.dbBlock_getChip(self)

    def getDataBase(self):
        return _odb.dbBlock_getDataBase(self)

    def getTech(self):
        return _odb.dbBlock_getTech(self)

    def getParent(self):
        return _odb.dbBlock_getParent(self)

    def getParentInst(self):
        return _odb.dbBlock_getParentInst(self)

    def getTopModule(self):
        return _odb.dbBlock_getTopModule(self)

    def getChildren(self):
        return _odb.dbBlock_getChildren(self)

    def findChild(self, name):
        return _odb.dbBlock_findChild(self, name)

    def getBTerms(self):
        return _odb.dbBlock_getBTerms(self)

    def findBTerm(self, name):
        return _odb.dbBlock_findBTerm(self, name)

    def getBTermGroups(self):
        return _odb.dbBlock_getBTermGroups(self)

    def addBTermGroup(self, bterms, order):
        return _odb.dbBlock_addBTermGroup(self, bterms, order)

    def setBTermTopLayerGrid(self, top_layer_grid):
        return _odb.dbBlock_setBTermTopLayerGrid(self, top_layer_grid)

    def getBTermTopLayerGrid(self):
        return _odb.dbBlock_getBTermTopLayerGrid(self)

    def getBTermTopLayerGridRegion(self):
        return _odb.dbBlock_getBTermTopLayerGridRegion(self)

    def findConstraintRegion(self, edge, begin, end):
        return _odb.dbBlock_findConstraintRegion(self, edge, begin, end)

    def addBTermConstraintByDirection(self, direction, constraint_region):
        return _odb.dbBlock_addBTermConstraintByDirection(self, direction, constraint_region)

    def addBTermsToConstraint(self, bterms, constraint_region):
        return _odb.dbBlock_addBTermsToConstraint(self, bterms, constraint_region)

    def getITerms(self):
        return _odb.dbBlock_getITerms(self)

    def getInsts(self):
        return _odb.dbBlock_getInsts(self)

    def getModules(self):
        return _odb.dbBlock_getModules(self)

    def getModInsts(self):
        return _odb.dbBlock_getModInsts(self)

    def getModNets(self):
        return _odb.dbBlock_getModNets(self)

    def getModBTerms(self):
        return _odb.dbBlock_getModBTerms(self)

    def getModITerms(self):
        return _odb.dbBlock_getModITerms(self)

    def getPowerDomains(self):
        return _odb.dbBlock_getPowerDomains(self)

    def getLogicPorts(self):
        return _odb.dbBlock_getLogicPorts(self)

    def getPowerSwitches(self):
        return _odb.dbBlock_getPowerSwitches(self)

    def getIsolations(self):
        return _odb.dbBlock_getIsolations(self)

    def getLevelShifters(self):
        return _odb.dbBlock_getLevelShifters(self)

    def getGroups(self):
        return _odb.dbBlock_getGroups(self)

    def getAccessPoints(self):
        return _odb.dbBlock_getAccessPoints(self)

    def getGlobalConnects(self):
        return _odb.dbBlock_getGlobalConnects(self)

    def globalConnect(self, *args):
        return _odb.dbBlock_globalConnect(self, *args)

    def addGlobalConnect(self, region, instPattern, pinPattern, net, do_connect):
        return _odb.dbBlock_addGlobalConnect(self, region, instPattern, pinPattern, net, do_connect)

    def reportGlobalConnect(self):
        return _odb.dbBlock_reportGlobalConnect(self)

    def clearGlobalConnect(self):
        return _odb.dbBlock_clearGlobalConnect(self)

    def getComponentMaskShift(self):
        return _odb.dbBlock_getComponentMaskShift(self)

    def setComponentMaskShift(self, layers):
        return _odb.dbBlock_setComponentMaskShift(self, layers)

    def findInst(self, name):
        return _odb.dbBlock_findInst(self, name)

    def findModule(self, name):
        return _odb.dbBlock_findModule(self, name)

    def findModInst(self, path):
        return _odb.dbBlock_findModInst(self, path)

    def findPowerDomain(self, name):
        return _odb.dbBlock_findPowerDomain(self, name)

    def findLogicPort(self, name):
        return _odb.dbBlock_findLogicPort(self, name)

    def findPowerSwitch(self, name):
        return _odb.dbBlock_findPowerSwitch(self, name)

    def findIsolation(self, name):
        return _odb.dbBlock_findIsolation(self, name)

    def findLevelShifter(self, name):
        return _odb.dbBlock_findLevelShifter(self, name)

    def findGroup(self, name):
        return _odb.dbBlock_findGroup(self, name)

    def findITerm(self, name):
        return _odb.dbBlock_findITerm(self, name)

    def getObstructions(self):
        return _odb.dbBlock_getObstructions(self)

    def getBlockages(self):
        return _odb.dbBlock_getBlockages(self)

    def getNets(self):
        return _odb.dbBlock_getNets(self)

    def getCapNodes(self):
        return _odb.dbBlock_getCapNodes(self)

    def getRSegs(self):
        return _odb.dbBlock_getRSegs(self)

    def findNet(self, name):
        return _odb.dbBlock_findNet(self, name)

    def writeDb(self, filename, allNode=0):
        return _odb.dbBlock_writeDb(self, filename, allNode)

    def writeGuides(self, filename):
        return _odb.dbBlock_writeGuides(self, filename)

    def findVia(self, name):
        return _odb.dbBlock_findVia(self, name)

    def getVias(self):
        return _odb.dbBlock_getVias(self)

    def getGCellGrid(self):
        return _odb.dbBlock_getGCellGrid(self)

    def getDefUnits(self):
        return _odb.dbBlock_getDefUnits(self)

    def setDefUnits(self, units):
        return _odb.dbBlock_setDefUnits(self, units)

    def getDbUnitsPerMicron(self):
        return _odb.dbBlock_getDbUnitsPerMicron(self)

    def dbuToMicrons(self, *args):
        return _odb.dbBlock_dbuToMicrons(self, *args)

    def dbuAreaToMicrons(self, dbu_area):
        return _odb.dbBlock_dbuAreaToMicrons(self, dbu_area)

    def micronsToDbu(self, microns):
        return _odb.dbBlock_micronsToDbu(self, microns)

    def micronsAreaToDbu(self, micronsArea):
        return _odb.dbBlock_micronsAreaToDbu(self, micronsArea)

    def getHierarchyDelimiter(self):
        return _odb.dbBlock_getHierarchyDelimiter(self)

    def setBusDelimiters(self, left, right):
        return _odb.dbBlock_setBusDelimiters(self, left, right)

    def getBusDelimiters(self, left, right):
        return _odb.dbBlock_getBusDelimiters(self, left, right)

    def getExtCount(self, numOfNet, numOfRSeg, numOfCapNode, numOfCCSeg):
        return _odb.dbBlock_getExtCount(self, numOfNet, numOfRSeg, numOfCapNode, numOfCCSeg)

    def copyExtDb(self, fr, to, extDbCnt, resFactor, ccFactor, gndcFactor):
        return _odb.dbBlock_copyExtDb(self, fr, to, extDbCnt, resFactor, ccFactor, gndcFactor)

    def adjustRC(self, resFactor, ccFactor, gndcFactor):
        return _odb.dbBlock_adjustRC(self, resFactor, ccFactor, gndcFactor)

    def groundCC(self, gndFactor):
        return _odb.dbBlock_groundCC(self, gndFactor)

    def adjustCC(self, adjFactor, ccThreshHold, nets, halonets):
        return _odb.dbBlock_adjustCC(self, adjFactor, ccThreshHold, nets, halonets)

    def undoAdjustedCC(self, nets, halonets):
        return _odb.dbBlock_undoAdjustedCC(self, nets, halonets)

    def getCornerCount(self):
        return _odb.dbBlock_getCornerCount(self)

    def extCornersAreIndependent(self):
        return _odb.dbBlock_extCornersAreIndependent(self)

    def getCornersPerBlock(self):
        return _odb.dbBlock_getCornersPerBlock(self)

    def getExtDbCount(self):
        return _odb.dbBlock_getExtDbCount(self)

    def getExtCornerName(self, corner, cName):
        return _odb.dbBlock_getExtCornerName(self, corner, cName)

    def getExtCornerIndex(self, cornerName):
        return _odb.dbBlock_getExtCornerIndex(self, cornerName)

    def setCornerNameList(self, name_list):
        return _odb.dbBlock_setCornerNameList(self, name_list)

    def getCornerNameList(self):
        return _odb.dbBlock_getCornerNameList(self)

    def setCornerCount(self, *args):
        return _odb.dbBlock_setCornerCount(self, *args)

    def setCornersPerBlock(self, cornersPerBlock):
        return _odb.dbBlock_setCornersPerBlock(self, cornersPerBlock)

    def initParasiticsValueTables(self):
        return _odb.dbBlock_initParasiticsValueTables(self)

    def createExtCornerBlock(self, corner):
        return _odb.dbBlock_createExtCornerBlock(self, corner)

    def findExtCornerBlock(self, corner):
        return _odb.dbBlock_findExtCornerBlock(self, corner)

    def getExtCornerBlock(self, corner):
        return _odb.dbBlock_getExtCornerBlock(self, corner)

    def getTrackGrids(self):
        return _odb.dbBlock_getTrackGrids(self)

    def findTrackGrid(self, layer):
        return _odb.dbBlock_findTrackGrid(self, layer)

    def getRows(self):
        return _odb.dbBlock_getRows(self)

    def getFills(self):
        return _odb.dbBlock_getFills(self)

    def getMasters(self, masters):
        return _odb.dbBlock_getMasters(self, masters)

    def setDieArea(self, *args):
        return _odb.dbBlock_setDieArea(self, *args)

    def getDieArea(self):
        return _odb.dbBlock_getDieArea(self)

    def getDieAreaPolygon(self):
        return _odb.dbBlock_getDieAreaPolygon(self)

    def getCoreArea(self):
        return _odb.dbBlock_getCoreArea(self)

    def addBlockedRegionForPins(self, region):
        return _odb.dbBlock_addBlockedRegionForPins(self, region)

    def getBlockedRegionsForPins(self):
        return _odb.dbBlock_getBlockedRegionsForPins(self)

    def setExtmi(self, ext):
        return _odb.dbBlock_setExtmi(self, ext)

    def getExtmi(self):
        return _odb.dbBlock_getExtmi(self)

    def getExtControl(self):
        return _odb.dbBlock_getExtControl(self)

    def getDft(self):
        return _odb.dbBlock_getDft(self)

    def getMinRoutingLayer(self):
        return _odb.dbBlock_getMinRoutingLayer(self)

    def setMinRoutingLayer(self, min_routing_layer):
        return _odb.dbBlock_setMinRoutingLayer(self, min_routing_layer)

    def getMaxRoutingLayer(self):
        return _odb.dbBlock_getMaxRoutingLayer(self)

    def setMaxRoutingLayer(self, max_routing_layer):
        return _odb.dbBlock_setMaxRoutingLayer(self, max_routing_layer)

    def getMinLayerForClock(self):
        return _odb.dbBlock_getMinLayerForClock(self)

    def setMinLayerForClock(self, min_layer_for_clock):
        return _odb.dbBlock_setMinLayerForClock(self, min_layer_for_clock)

    def getMaxLayerForClock(self):
        return _odb.dbBlock_getMaxLayerForClock(self)

    def setMaxLayerForClock(self, max_layer_for_clock):
        return _odb.dbBlock_setMaxLayerForClock(self, max_layer_for_clock)

    def getGCellTileSize(self):
        return _odb.dbBlock_getGCellTileSize(self)

    def getExtCornerNames(self, ecl):
        return _odb.dbBlock_getExtCornerNames(self, ecl)

    def getCCSegs(self):
        return _odb.dbBlock_getCCSegs(self)

    def getSearchDb(self):
        return _odb.dbBlock_getSearchDb(self)

    def destroyCCs(self, nets):
        return _odb.dbBlock_destroyCCs(self, nets)

    def destroyRSegs(self, nets):
        return _odb.dbBlock_destroyRSegs(self, nets)

    def destroyCNs(self, nets, cleanExtid):
        return _odb.dbBlock_destroyCNs(self, nets, cleanExtid)

    def destroyParasitics(self, nets):
        return _odb.dbBlock_destroyParasitics(self, nets)

    def destroyCornerParasitics(self, nets):
        return _odb.dbBlock_destroyCornerParasitics(self, nets)

    def getCcHaloNets(self, changedNets, ccHaloNets):
        return _odb.dbBlock_getCcHaloNets(self, changedNets, ccHaloNets)

    def preExttreeMergeRC(self, max_cap, corner):
        return _odb.dbBlock_preExttreeMergeRC(self, max_cap, corner)

    def designIsRouted(self, verbose):
        return _odb.dbBlock_designIsRouted(self, verbose)

    def destroyNetWires(self):
        return _odb.dbBlock_destroyNetWires(self)

    def clear(self):
        return _odb.dbBlock_clear(self)

    def getWireUpdatedNets(self, nets):
        return _odb.dbBlock_getWireUpdatedNets(self, nets)

    def makeNewNetName(self, *args):
        return _odb.dbBlock_makeNewNetName(self, *args)

    def makeNewInstName(self, *args):
        return _odb.dbBlock_makeNewInstName(self, *args)

    def getRegions(self):
        return _odb.dbBlock_getRegions(self)

    def findRegion(self, name):
        return _odb.dbBlock_findRegion(self, name)

    def findNonDefaultRule(self, name):
        return _odb.dbBlock_findNonDefaultRule(self, name)

    def getNonDefaultRules(self):
        return _odb.dbBlock_getNonDefaultRules(self)

    def getMarkerCategories(self):
        return _odb.dbBlock_getMarkerCategories(self)

    def findMarkerCategory(self, name):
        return _odb.dbBlock_findMarkerCategory(self, name)

    def writeMarkerCategories(self, *args):
        return _odb.dbBlock_writeMarkerCategories(self, *args)

    def setDrivingItermsforNets(self):
        return _odb.dbBlock_setDrivingItermsforNets(self)

    def clearUserInstFlags(self):
        return _odb.dbBlock_clearUserInstFlags(self)

    def getDefaultVias(self):
        return _odb.dbBlock_getDefaultVias(self)

    def destroyRoutes(self):
        return _odb.dbBlock_destroyRoutes(self)

    @staticmethod
    def create(*args):
        return _odb.dbBlock_create(*args)

    @staticmethod
    def getBlock(*args):
        return _odb.dbBlock_getBlock(*args)

    @staticmethod
    def destroy(*args):
        return _odb.dbBlock_destroy(*args)

    def debugPrintContent(self, *args):
        return _odb.dbBlock_debugPrintContent(self, *args)

    def __init__(self):
        _odb.dbBlock_swiginit(self, _odb.new_dbBlock())
    __swig_destroy__ = _odb.delete_dbBlock

# Register dbBlock in _odb:
_odb.dbBlock_swigregister(dbBlock)

def dbBlock_create(*args):
    return _odb.dbBlock_create(*args)

def dbBlock_getBlock(*args):
    return _odb.dbBlock_getBlock(*args)

def dbBlock_destroy(*args):
    return _odb.dbBlock_destroy(*args)

class dbBTerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbBTerm_getName(self)

    def getConstName(self):
        return _odb.dbBTerm_getConstName(self)

    def rename(self, name):
        return _odb.dbBTerm_rename(self, name)

    def getBBox(self):
        return _odb.dbBTerm_getBBox(self)

    def setSigType(self, type):
        return _odb.dbBTerm_setSigType(self, type)

    def getSigType(self):
        return _odb.dbBTerm_getSigType(self)

    def setIoType(self, type):
        return _odb.dbBTerm_setIoType(self, type)

    def getIoType(self):
        return _odb.dbBTerm_getIoType(self)

    def setSpefMark(self, v):
        return _odb.dbBTerm_setSpefMark(self, v)

    def isSetSpefMark(self):
        return _odb.dbBTerm_isSetSpefMark(self)

    def setMark(self, v):
        return _odb.dbBTerm_setMark(self, v)

    def isSetMark(self):
        return _odb.dbBTerm_isSetMark(self)

    def setExtId(self, v):
        return _odb.dbBTerm_setExtId(self, v)

    def getExtId(self):
        return _odb.dbBTerm_getExtId(self)

    def isSpecial(self):
        return _odb.dbBTerm_isSpecial(self)

    def setSpecial(self):
        return _odb.dbBTerm_setSpecial(self)

    def getNet(self):
        return _odb.dbBTerm_getNet(self)

    def getModNet(self):
        return _odb.dbBTerm_getModNet(self)

    def disconnect(self):
        return _odb.dbBTerm_disconnect(self)

    def disconnectDbNet(self):
        return _odb.dbBTerm_disconnectDbNet(self)

    def disconnectDbModNet(self):
        return _odb.dbBTerm_disconnectDbModNet(self)

    def connect(self, *args):
        return _odb.dbBTerm_connect(self, *args)

    def getBlock(self):
        return _odb.dbBTerm_getBlock(self)

    def getITerm(self):
        return _odb.dbBTerm_getITerm(self)

    def getBPins(self):
        return _odb.dbBTerm_getBPins(self)

    def getFirstPin(self, shape):
        return _odb.dbBTerm_getFirstPin(self, shape)

    def getFirstPinLocation(self):
        return _odb.dbBTerm_getFirstPinLocation(self)

    def getFirstPinPlacementStatus(self):
        return _odb.dbBTerm_getFirstPinPlacementStatus(self)

    def getGroundPin(self):
        return _odb.dbBTerm_getGroundPin(self)

    def setGroundPin(self, pin):
        return _odb.dbBTerm_setGroundPin(self, pin)

    def getSupplyPin(self):
        return _odb.dbBTerm_getSupplyPin(self)

    def setSupplyPin(self, pin):
        return _odb.dbBTerm_setSupplyPin(self, pin)

    @staticmethod
    def create(net, name):
        return _odb.dbBTerm_create(net, name)

    @staticmethod
    def destroy(*args):
        return _odb.dbBTerm_destroy(*args)

    @staticmethod
    def getBTerm(block, oid):
        return _odb.dbBTerm_getBTerm(block, oid)

    def staVertexId(self):
        return _odb.dbBTerm_staVertexId(self)

    def staSetVertexId(self, id):
        return _odb.dbBTerm_staSetVertexId(self, id)

    def setConstraintRegion(self, constraint_region):
        return _odb.dbBTerm_setConstraintRegion(self, constraint_region)

    def getConstraintRegion(self):
        return _odb.dbBTerm_getConstraintRegion(self)

    def resetConstraintRegion(self):
        return _odb.dbBTerm_resetConstraintRegion(self)

    def setMirroredBTerm(self, mirrored_bterm):
        return _odb.dbBTerm_setMirroredBTerm(self, mirrored_bterm)

    def getMirroredBTerm(self):
        return _odb.dbBTerm_getMirroredBTerm(self)

    def hasMirroredBTerm(self):
        return _odb.dbBTerm_hasMirroredBTerm(self)

    def isMirrored(self):
        return _odb.dbBTerm_isMirrored(self)

    def __init__(self):
        _odb.dbBTerm_swiginit(self, _odb.new_dbBTerm())
    __swig_destroy__ = _odb.delete_dbBTerm

# Register dbBTerm in _odb:
_odb.dbBTerm_swigregister(dbBTerm)

def dbBTerm_create(net, name):
    return _odb.dbBTerm_create(net, name)

def dbBTerm_destroy(*args):
    return _odb.dbBTerm_destroy(*args)

def dbBTerm_getBTerm(block, oid):
    return _odb.dbBTerm_getBTerm(block, oid)

class dbBPin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getPlacementStatus(self):
        return _odb.dbBPin_getPlacementStatus(self)

    def setPlacementStatus(self, status):
        return _odb.dbBPin_setPlacementStatus(self, status)

    def getBTerm(self):
        return _odb.dbBPin_getBTerm(self)

    def getBoxes(self):
        return _odb.dbBPin_getBoxes(self)

    def getBBox(self):
        return _odb.dbBPin_getBBox(self)

    def hasEffectiveWidth(self):
        return _odb.dbBPin_hasEffectiveWidth(self)

    def setEffectiveWidth(self, w):
        return _odb.dbBPin_setEffectiveWidth(self, w)

    def getEffectiveWidth(self):
        return _odb.dbBPin_getEffectiveWidth(self)

    def hasMinSpacing(self):
        return _odb.dbBPin_hasMinSpacing(self)

    def setMinSpacing(self, w):
        return _odb.dbBPin_setMinSpacing(self, w)

    def getMinSpacing(self):
        return _odb.dbBPin_getMinSpacing(self)

    def getAccessPoints(self):
        return _odb.dbBPin_getAccessPoints(self)

    @staticmethod
    def create(bterm):
        return _odb.dbBPin_create(bterm)

    @staticmethod
    def destroy(*args):
        return _odb.dbBPin_destroy(*args)

    @staticmethod
    def getBPin(block, oid):
        return _odb.dbBPin_getBPin(block, oid)

    def __init__(self):
        _odb.dbBPin_swiginit(self, _odb.new_dbBPin())
    __swig_destroy__ = _odb.delete_dbBPin

# Register dbBPin in _odb:
_odb.dbBPin_swigregister(dbBPin)

def dbBPin_create(bterm):
    return _odb.dbBPin_create(bterm)

def dbBPin_destroy(*args):
    return _odb.dbBPin_destroy(*args)

def dbBPin_getBPin(block, oid):
    return _odb.dbBPin_getBPin(block, oid)

class dbNet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbNet_getName(self)

    def getConstName(self):
        return _odb.dbNet_getConstName(self)

    def printNetName(self, fp, idFlag=True, newLine=True):
        return _odb.dbNet_printNetName(self, fp, idFlag, newLine)

    def rename(self, name):
        return _odb.dbNet_rename(self, name)

    def swapNetNames(self, source, journal=True):
        return _odb.dbNet_swapNetNames(self, source, journal)

    def isRCDisconnected(self):
        return _odb.dbNet_isRCDisconnected(self)

    def setRCDisconnected(self, value):
        return _odb.dbNet_setRCDisconnected(self, value)

    def getWeight(self):
        return _odb.dbNet_getWeight(self)

    def setWeight(self, weight):
        return _odb.dbNet_setWeight(self, weight)

    def getSourceType(self):
        return _odb.dbNet_getSourceType(self)

    def setSourceType(self, type):
        return _odb.dbNet_setSourceType(self, type)

    def getXTalkClass(self):
        return _odb.dbNet_getXTalkClass(self)

    def setXTalkClass(self, value):
        return _odb.dbNet_setXTalkClass(self, value)

    def setDrivingITerm(self, id):
        return _odb.dbNet_setDrivingITerm(self, id)

    def getDrivingITerm(self):
        return _odb.dbNet_getDrivingITerm(self)

    def hasFixedBump(self):
        return _odb.dbNet_hasFixedBump(self)

    def setFixedBump(self, value):
        return _odb.dbNet_setFixedBump(self, value)

    def getWireType(self):
        return _odb.dbNet_getWireType(self)

    def setWireType(self, wire_type):
        return _odb.dbNet_setWireType(self, wire_type)

    def getSigType(self):
        return _odb.dbNet_getSigType(self)

    def setSigType(self, sig_type):
        return _odb.dbNet_setSigType(self, sig_type)

    def isEnclosed(self, bbox):
        return _odb.dbNet_isEnclosed(self, bbox)

    def isMarked(self):
        return _odb.dbNet_isMarked(self)

    def isMark_1ed(self):
        return _odb.dbNet_isMark_1ed(self)

    def setMark(self, value):
        return _odb.dbNet_setMark(self, value)

    def setMark_1(self, value):
        return _odb.dbNet_setMark_1(self, value)

    def isSelect(self):
        return _odb.dbNet_isSelect(self)

    def setSelect(self, value):
        return _odb.dbNet_setSelect(self, value)

    def isWireOrdered(self):
        return _odb.dbNet_isWireOrdered(self)

    def setWireOrdered(self, value):
        return _odb.dbNet_setWireOrdered(self, value)

    def isDisconnected(self):
        return _odb.dbNet_isDisconnected(self)

    def setDisconnected(self, value):
        return _odb.dbNet_setDisconnected(self, value)

    def setWireAltered(self, value):
        return _odb.dbNet_setWireAltered(self, value)

    def isWireAltered(self):
        return _odb.dbNet_isWireAltered(self)

    def setRCgraph(self, value):
        return _odb.dbNet_setRCgraph(self, value)

    def isRCgraph(self):
        return _odb.dbNet_isRCgraph(self)

    def setExtracted(self, value):
        return _odb.dbNet_setExtracted(self, value)

    def isExtracted(self):
        return _odb.dbNet_isExtracted(self)

    def setSpef(self, value):
        return _odb.dbNet_setSpef(self, value)

    def isSpef(self):
        return _odb.dbNet_isSpef(self)

    def setDoNotTouch(self, v):
        return _odb.dbNet_setDoNotTouch(self, v)

    def isDoNotTouch(self):
        return _odb.dbNet_isDoNotTouch(self)

    def getBlock(self):
        return _odb.dbNet_getBlock(self)

    def getITerms(self):
        return _odb.dbNet_getITerms(self)

    def get1stITerm(self):
        return _odb.dbNet_get1stITerm(self)

    def get1stSignalInput(self, io):
        return _odb.dbNet_get1stSignalInput(self, io)

    def getFirstOutput(self):
        return _odb.dbNet_getFirstOutput(self)

    def getBTerms(self):
        return _odb.dbNet_getBTerms(self)

    def get1stBTerm(self):
        return _odb.dbNet_get1stBTerm(self)

    def getSWires(self):
        return _odb.dbNet_getSWires(self)

    def getWire(self):
        return _odb.dbNet_getWire(self)

    def getFirstSWire(self):
        return _odb.dbNet_getFirstSWire(self)

    def getGlobalWire(self):
        return _odb.dbNet_getGlobalWire(self)

    def isSpecial(self):
        return _odb.dbNet_isSpecial(self)

    def setSpecial(self):
        return _odb.dbNet_setSpecial(self)

    def clearSpecial(self):
        return _odb.dbNet_clearSpecial(self)

    def isConnectedByAbutment(self):
        return _odb.dbNet_isConnectedByAbutment(self)

    def setIOflag(self):
        return _odb.dbNet_setIOflag(self)

    def isIO(self):
        return _odb.dbNet_isIO(self)

    def isWildConnected(self):
        return _odb.dbNet_isWildConnected(self)

    def setWildConnected(self):
        return _odb.dbNet_setWildConnected(self)

    def clearWildConnected(self):
        return _odb.dbNet_clearWildConnected(self)

    def getGndcCalibFactor(self):
        return _odb.dbNet_getGndcCalibFactor(self)

    def setGndcCalibFactor(self, gndcCalib):
        return _odb.dbNet_setGndcCalibFactor(self, gndcCalib)

    def calibrateCapacitance(self):
        return _odb.dbNet_calibrateCapacitance(self)

    def calibrateGndCap(self):
        return _odb.dbNet_calibrateGndCap(self)

    def calibrateCouplingCap(self, *args):
        return _odb.dbNet_calibrateCouplingCap(self, *args)

    def getCcCalibFactor(self):
        return _odb.dbNet_getCcCalibFactor(self)

    def setCcCalibFactor(self, ccCalib):
        return _odb.dbNet_setCcCalibFactor(self, ccCalib)

    def adjustNetRes(self, *args):
        return _odb.dbNet_adjustNetRes(self, *args)

    def adjustNetGndCap(self, *args):
        return _odb.dbNet_adjustNetGndCap(self, *args)

    def getCcAdjustFactor(self):
        return _odb.dbNet_getCcAdjustFactor(self)

    def setCcAdjustFactor(self, factor):
        return _odb.dbNet_setCcAdjustFactor(self, factor)

    def getCcAdjustOrder(self):
        return _odb.dbNet_getCcAdjustOrder(self)

    def setCcAdjustOrder(self, order):
        return _odb.dbNet_setCcAdjustOrder(self, order)

    def adjustCC(self, adjOrder, adjFactor, ccThreshHold, adjustedCC, halonets):
        return _odb.dbNet_adjustCC(self, adjOrder, adjFactor, ccThreshHold, adjustedCC, halonets)

    def undoAdjustedCC(self, adjustedCC, halonets):
        return _odb.dbNet_undoAdjustedCC(self, adjustedCC, halonets)

    def groundCC(self, gndFactor):
        return _odb.dbNet_groundCC(self, gndFactor)

    def addDbCc(self, cap):
        return _odb.dbNet_addDbCc(self, cap)

    def getDbCc(self):
        return _odb.dbNet_getDbCc(self)

    def setDbCc(self, cap):
        return _odb.dbNet_setDbCc(self, cap)

    def getRefCc(self):
        return _odb.dbNet_getRefCc(self)

    def setRefCc(self, cap):
        return _odb.dbNet_setRefCc(self, cap)

    def getCcMatchRatio(self):
        return _odb.dbNet_getCcMatchRatio(self)

    def setCcMatchRatio(self, ratio):
        return _odb.dbNet_setCcMatchRatio(self, ratio)

    def getGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _odb.dbNet_getGndTotalCap(self, gndcap, totalcap, MillerMult)

    def preExttreeMergeRC(self, max_cap, corner):
        return _odb.dbNet_preExttreeMergeRC(self, max_cap, corner)

    def findCapNode(self, nodeId):
        return _odb.dbNet_findCapNode(self, nodeId)

    def getCapNodes(self):
        return _odb.dbNet_getCapNodes(self)

    def destroyCapNodes(self, cleanExtid):
        return _odb.dbNet_destroyCapNodes(self, cleanExtid)

    def reverseRSegs(self):
        return _odb.dbNet_reverseRSegs(self)

    def set1stRSegId(self, rseg_id):
        return _odb.dbNet_set1stRSegId(self, rseg_id)

    def getZeroRSeg(self):
        return _odb.dbNet_getZeroRSeg(self)

    def get1stRSegId(self):
        return _odb.dbNet_get1stRSegId(self)

    def findRSeg(self, srcn, tgtn):
        return _odb.dbNet_findRSeg(self, srcn, tgtn)

    def set1stCapNodeId(self, capn_id):
        return _odb.dbNet_set1stCapNodeId(self, capn_id)

    def get1stCapNodeId(self):
        return _odb.dbNet_get1stCapNodeId(self)

    def setTermExtIds(self, capId):
        return _odb.dbNet_setTermExtIds(self, capId)

    def getRSegCount(self):
        return _odb.dbNet_getRSegCount(self)

    def getRSegs(self):
        return _odb.dbNet_getRSegs(self)

    def collapseInternalCapNum(self, capNodeMap):
        return _odb.dbNet_collapseInternalCapNum(self, capNodeMap)

    def maxInternalCapNum(self):
        return _odb.dbNet_maxInternalCapNum(self)

    def getCapNodeCount(self):
        return _odb.dbNet_getCapNodeCount(self)

    def getCcCount(self):
        return _odb.dbNet_getCcCount(self)

    def destroyRSegs(self):
        return _odb.dbNet_destroyRSegs(self)

    def reverseCCSegs(self):
        return _odb.dbNet_reverseCCSegs(self)

    def getSrcCCSegs(self, segs):
        return _odb.dbNet_getSrcCCSegs(self, segs)

    def getTgtCCSegs(self, segs):
        return _odb.dbNet_getTgtCCSegs(self, segs)

    def getCouplingNets(self, corner, ccThreshold, cnets):
        return _odb.dbNet_getCouplingNets(self, corner, ccThreshold, cnets)

    def destroyCCSegs(self):
        return _odb.dbNet_destroyCCSegs(self)

    def destroyParasitics(self):
        return _odb.dbNet_destroyParasitics(self)

    def getTotalCapacitance(self, corner=0, cc=False):
        return _odb.dbNet_getTotalCapacitance(self, corner, cc)

    def getTotalCouplingCap(self, corner=0):
        return _odb.dbNet_getTotalCouplingCap(self, corner)

    def getTotalResistance(self, corner=0):
        return _odb.dbNet_getTotalResistance(self, corner)

    def setNonDefaultRule(self, rule):
        return _odb.dbNet_setNonDefaultRule(self, rule)

    def getNonDefaultRule(self):
        return _odb.dbNet_getNonDefaultRule(self)

    def getNetStats(self, wireCnt, viaCnt, len, layerCnt, levelTable):
        return _odb.dbNet_getNetStats(self, wireCnt, viaCnt, len, layerCnt, levelTable)

    def getWireCount(self, wireCnt, viaCnt):
        return _odb.dbNet_getWireCount(self, wireCnt, viaCnt)

    def getSignalWireCount(self, wireCnt, viaCnt):
        return _odb.dbNet_getSignalWireCount(self, wireCnt, viaCnt)

    def getPowerWireCount(self, wireCnt, viaCnt):
        return _odb.dbNet_getPowerWireCount(self, wireCnt, viaCnt)

    def getTermCount(self):
        return _odb.dbNet_getTermCount(self)

    def getITermCount(self):
        return _odb.dbNet_getITermCount(self)

    def getBTermCount(self):
        return _odb.dbNet_getBTermCount(self)

    def getTermBBox(self):
        return _odb.dbNet_getTermBBox(self)

    def destroySWires(self):
        return _odb.dbNet_destroySWires(self)

    @staticmethod
    def create(block, name, skipExistingCheck=False):
        return _odb.dbNet_create(block, name, skipExistingCheck)

    @staticmethod
    def markNets(nets, block, mk):
        return _odb.dbNet_markNets(nets, block, mk)

    @staticmethod
    def destroy(*args):
        return _odb.dbNet_destroy(*args)

    @staticmethod
    def getNet(block, oid):
        return _odb.dbNet_getNet(block, oid)

    @staticmethod
    def getValidNet(block, oid):
        return _odb.dbNet_getValidNet(block, oid)

    def canMergeNet(self, in_net):
        return _odb.dbNet_canMergeNet(self, in_net)

    def mergeNet(self, in_net):
        return _odb.dbNet_mergeNet(self, in_net)

    def findMainParentModInst(self):
        return _odb.dbNet_findMainParentModInst(self)

    def findMainParentModule(self):
        return _odb.dbNet_findMainParentModule(self)

    def getGuides(self):
        return _odb.dbNet_getGuides(self)

    def clearGuides(self):
        return _odb.dbNet_clearGuides(self)

    def getTracks(self):
        return _odb.dbNet_getTracks(self)

    def clearTracks(self):
        return _odb.dbNet_clearTracks(self)

    def hasJumpers(self):
        return _odb.dbNet_hasJumpers(self)

    def setJumpers(self, has_jumpers):
        return _odb.dbNet_setJumpers(self, has_jumpers)

    def __init__(self):
        _odb.dbNet_swiginit(self, _odb.new_dbNet())
    __swig_destroy__ = _odb.delete_dbNet

# Register dbNet in _odb:
_odb.dbNet_swigregister(dbNet)

def dbNet_create(block, name, skipExistingCheck=False):
    return _odb.dbNet_create(block, name, skipExistingCheck)

def dbNet_markNets(nets, block, mk):
    return _odb.dbNet_markNets(nets, block, mk)

def dbNet_destroy(*args):
    return _odb.dbNet_destroy(*args)

def dbNet_getNet(block, oid):
    return _odb.dbNet_getNet(block, oid)

def dbNet_getValidNet(block, oid):
    return _odb.dbNet_getValidNet(block, oid)

class dbInst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbInst_getName(self)

    def getConstName(self):
        return _odb.dbInst_getConstName(self)

    def isNamed(self, name):
        return _odb.dbInst_isNamed(self, name)

    def rename(self, name):
        return _odb.dbInst_rename(self, name)

    def getOrigin(self):
        return _odb.dbInst_getOrigin(self)

    def setOrigin(self, x, y):
        return _odb.dbInst_setOrigin(self, x, y)

    def getOrient(self):
        return _odb.dbInst_getOrient(self)

    def setOrient(self, orient):
        return _odb.dbInst_setOrient(self, orient)

    def getLocation(self, *args):
        return _odb.dbInst_getLocation(self, *args)

    def setLocation(self, x, y):
        return _odb.dbInst_setLocation(self, x, y)

    def setLocationOrient(self, orient):
        return _odb.dbInst_setLocationOrient(self, orient)

    def getTransform(self):
        return _odb.dbInst_getTransform(self)

    def setTransform(self, t):
        return _odb.dbInst_setTransform(self, t)

    def getHierTransform(self, t):
        return _odb.dbInst_getHierTransform(self, t)

    def getBBox(self):
        return _odb.dbInst_getBBox(self)

    def getPlacementStatus(self):
        return _odb.dbInst_getPlacementStatus(self)

    def isFixed(self):
        return _odb.dbInst_isFixed(self)

    def isPlaced(self):
        return _odb.dbInst_isPlaced(self)

    def setPlacementStatus(self, status):
        return _odb.dbInst_setPlacementStatus(self, status)

    def getEcoCreate(self):
        return _odb.dbInst_getEcoCreate(self)

    def getEcoDestroy(self):
        return _odb.dbInst_getEcoDestroy(self)

    def getEcoModify(self):
        return _odb.dbInst_getEcoModify(self)

    def setEcoCreate(self, v):
        return _odb.dbInst_setEcoCreate(self, v)

    def setEcoDestroy(self, v):
        return _odb.dbInst_setEcoDestroy(self, v)

    def setEcoModify(self, v):
        return _odb.dbInst_setEcoModify(self, v)

    def getUserFlag1(self):
        return _odb.dbInst_getUserFlag1(self)

    def setUserFlag1(self):
        return _odb.dbInst_setUserFlag1(self)

    def clearUserFlag1(self):
        return _odb.dbInst_clearUserFlag1(self)

    def getUserFlag2(self):
        return _odb.dbInst_getUserFlag2(self)

    def setUserFlag2(self):
        return _odb.dbInst_setUserFlag2(self)

    def clearUserFlag2(self):
        return _odb.dbInst_clearUserFlag2(self)

    def getUserFlag3(self):
        return _odb.dbInst_getUserFlag3(self)

    def setUserFlag3(self):
        return _odb.dbInst_setUserFlag3(self)

    def clearUserFlag3(self):
        return _odb.dbInst_clearUserFlag3(self)

    def setDoNotTouch(self, v):
        return _odb.dbInst_setDoNotTouch(self, v)

    def isDoNotTouch(self):
        return _odb.dbInst_isDoNotTouch(self)

    def getBlock(self):
        return _odb.dbInst_getBlock(self)

    def getMaster(self):
        return _odb.dbInst_getMaster(self)

    def getGroup(self):
        return _odb.dbInst_getGroup(self)

    def getITerms(self):
        return _odb.dbInst_getITerms(self)

    def getFirstOutput(self):
        return _odb.dbInst_getFirstOutput(self)

    def getRegion(self):
        return _odb.dbInst_getRegion(self)

    def getModule(self):
        return _odb.dbInst_getModule(self)

    def findITerm(self, terminal_name):
        return _odb.dbInst_findITerm(self, terminal_name)

    def getConnectivity(self, *args):
        return _odb.dbInst_getConnectivity(self, *args)

    def bindBlock(self, block, force=False):
        return _odb.dbInst_bindBlock(self, block, force)

    def unbindBlock(self):
        return _odb.dbInst_unbindBlock(self)

    def resetHierarchy(self, verbose):
        return _odb.dbInst_resetHierarchy(self, verbose)

    def getChild(self):
        return _odb.dbInst_getChild(self)

    def getParent(self):
        return _odb.dbInst_getParent(self)

    def getChildren(self):
        return _odb.dbInst_getChildren(self)

    def isHierarchical(self):
        return _odb.dbInst_isHierarchical(self)

    def isPhysicalOnly(self):
        return _odb.dbInst_isPhysicalOnly(self)

    def getHalo(self):
        return _odb.dbInst_getHalo(self)

    def getWeight(self):
        return _odb.dbInst_getWeight(self)

    def setWeight(self, weight):
        return _odb.dbInst_setWeight(self, weight)

    def getSourceType(self):
        return _odb.dbInst_getSourceType(self)

    def setSourceType(self, type):
        return _odb.dbInst_setSourceType(self, type)

    def getITerm(self, *args):
        return _odb.dbInst_getITerm(self, *args)

    def swapMaster(self, master):
        return _odb.dbInst_swapMaster(self, master)

    def isBlock(self):
        return _odb.dbInst_isBlock(self)

    def isCore(self):
        return _odb.dbInst_isCore(self)

    def isPad(self):
        return _odb.dbInst_isPad(self)

    def isEndCap(self):
        return _odb.dbInst_isEndCap(self)

    def getScanInst(self):
        return _odb.dbInst_getScanInst(self)

    def setPinAccessIdx(self, idx):
        return _odb.dbInst_setPinAccessIdx(self, idx)

    def getPinAccessIdx(self):
        return _odb.dbInst_getPinAccessIdx(self)

    @staticmethod
    def makeUniqueDbInst(block, master, name, physical_only, target_module):
        return _odb.dbInst_makeUniqueDbInst(block, master, name, physical_only, target_module)

    @staticmethod
    def create(*args):
        return _odb.dbInst_create(*args)

    @staticmethod
    def destroy(*args):
        return _odb.dbInst_destroy(*args)

    @staticmethod
    def getInst(block, oid):
        return _odb.dbInst_getInst(block, oid)

    @staticmethod
    def getValidInst(block, oid):
        return _odb.dbInst_getValidInst(block, oid)

    def __init__(self):
        _odb.dbInst_swiginit(self, _odb.new_dbInst())
    __swig_destroy__ = _odb.delete_dbInst

# Register dbInst in _odb:
_odb.dbInst_swigregister(dbInst)

def dbInst_makeUniqueDbInst(block, master, name, physical_only, target_module):
    return _odb.dbInst_makeUniqueDbInst(block, master, name, physical_only, target_module)

def dbInst_create(*args):
    return _odb.dbInst_create(*args)

def dbInst_destroy(*args):
    return _odb.dbInst_destroy(*args)

def dbInst_getInst(block, oid):
    return _odb.dbInst_getInst(block, oid)

def dbInst_getValidInst(block, oid):
    return _odb.dbInst_getValidInst(block, oid)

class dbITerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getInst(self):
        return _odb.dbITerm_getInst(self)

    def getNet(self):
        return _odb.dbITerm_getNet(self)

    def getModNet(self):
        return _odb.dbITerm_getModNet(self)

    def getMTerm(self):
        return _odb.dbITerm_getMTerm(self)

    def getName(self, *args):
        return _odb.dbITerm_getName(self, *args)

    def getBBox(self):
        return _odb.dbITerm_getBBox(self)

    def getBlock(self):
        return _odb.dbITerm_getBlock(self)

    def getSigType(self):
        return _odb.dbITerm_getSigType(self)

    def getIoType(self):
        return _odb.dbITerm_getIoType(self)

    def isInputSignal(self, io=True):
        return _odb.dbITerm_isInputSignal(self, io)

    def isOutputSignal(self, io=True):
        return _odb.dbITerm_isOutputSignal(self, io)

    def setSpef(self, v):
        return _odb.dbITerm_setSpef(self, v)

    def isSpef(self):
        return _odb.dbITerm_isSpef(self)

    def setExtId(self, v):
        return _odb.dbITerm_setExtId(self, v)

    def getExtId(self):
        return _odb.dbITerm_getExtId(self)

    def isSpecial(self):
        return _odb.dbITerm_isSpecial(self)

    def setSpecial(self):
        return _odb.dbITerm_setSpecial(self)

    def clearSpecial(self):
        return _odb.dbITerm_clearSpecial(self)

    def setClocked(self, v):
        return _odb.dbITerm_setClocked(self, v)

    def isClocked(self):
        return _odb.dbITerm_isClocked(self)

    def setMark(self, v):
        return _odb.dbITerm_setMark(self, v)

    def isSetMark(self):
        return _odb.dbITerm_isSetMark(self)

    def isConnected(self):
        return _odb.dbITerm_isConnected(self)

    def setConnected(self):
        return _odb.dbITerm_setConnected(self)

    def clearConnected(self):
        return _odb.dbITerm_clearConnected(self)

    def getBTerm(self):
        return _odb.dbITerm_getBTerm(self)

    def connect(self, *args):
        return _odb.dbITerm_connect(self, *args)

    def disconnect(self):
        return _odb.dbITerm_disconnect(self)

    def disconnectDbNet(self):
        return _odb.dbITerm_disconnectDbNet(self)

    def disconnectDbModNet(self):
        return _odb.dbITerm_disconnectDbModNet(self)

    def getAvgXY(self):
        return _odb.dbITerm_getAvgXY(self)

    def getGeometries(self):
        return _odb.dbITerm_getGeometries(self)

    def setAccessPoint(self, pin, ap):
        return _odb.dbITerm_setAccessPoint(self, pin, ap)

    def getPrefAccessPoints(self):
        return _odb.dbITerm_getPrefAccessPoints(self)

    def getAccessPoints(self):
        return _odb.dbITerm_getAccessPoints(self)

    def clearPrefAccessPoints(self):
        return _odb.dbITerm_clearPrefAccessPoints(self)

    @staticmethod
    def getITerm(block, oid):
        return _odb.dbITerm_getITerm(block, oid)

    def staVertexId(self):
        return _odb.dbITerm_staVertexId(self)

    def staSetVertexId(self, id):
        return _odb.dbITerm_staSetVertexId(self, id)

    def __init__(self):
        _odb.dbITerm_swiginit(self, _odb.new_dbITerm())
    __swig_destroy__ = _odb.delete_dbITerm

# Register dbITerm in _odb:
_odb.dbITerm_swigregister(dbITerm)

def dbITerm_getITerm(block, oid):
    return _odb.dbITerm_getITerm(block, oid)

class dbVia(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbVia_getName(self)

    def getConstName(self):
        return _odb.dbVia_getConstName(self)

    def getPattern(self):
        return _odb.dbVia_getPattern(self)

    def setPattern(self, pattern):
        return _odb.dbVia_setPattern(self, pattern)

    def setViaGenerateRule(self, rule):
        return _odb.dbVia_setViaGenerateRule(self, rule)

    def getViaGenerateRule(self):
        return _odb.dbVia_getViaGenerateRule(self)

    def hasParams(self):
        return _odb.dbVia_hasParams(self)

    def setViaParams(self, params):
        return _odb.dbVia_setViaParams(self, params)

    def getViaParams(self):
        return _odb.dbVia_getViaParams(self)

    def getBlock(self):
        return _odb.dbVia_getBlock(self)

    def getBBox(self):
        return _odb.dbVia_getBBox(self)

    def getBoxes(self):
        return _odb.dbVia_getBoxes(self)

    def getTopLayer(self):
        return _odb.dbVia_getTopLayer(self)

    def getBottomLayer(self):
        return _odb.dbVia_getBottomLayer(self)

    def isViaRotated(self):
        return _odb.dbVia_isViaRotated(self)

    def getOrient(self):
        return _odb.dbVia_getOrient(self)

    def getTechVia(self):
        return _odb.dbVia_getTechVia(self)

    def getBlockVia(self):
        return _odb.dbVia_getBlockVia(self)

    def setDefault(self, arg2):
        return _odb.dbVia_setDefault(self, arg2)

    def isDefault(self):
        return _odb.dbVia_isDefault(self)

    @staticmethod
    def create(*args):
        return _odb.dbVia_create(*args)

    @staticmethod
    def copy(*args):
        return _odb.dbVia_copy(*args)

    @staticmethod
    def getVia(block, oid):
        return _odb.dbVia_getVia(block, oid)

    def __init__(self):
        _odb.dbVia_swiginit(self, _odb.new_dbVia())
    __swig_destroy__ = _odb.delete_dbVia

# Register dbVia in _odb:
_odb.dbVia_swigregister(dbVia)

def dbVia_create(*args):
    return _odb.dbVia_create(*args)

def dbVia_copy(*args):
    return _odb.dbVia_copy(*args)

def dbVia_getVia(block, oid):
    return _odb.dbVia_getVia(block, oid)

class dbWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBlock(self):
        return _odb.dbWire_getBlock(self)

    def getNet(self):
        return _odb.dbWire_getNet(self)

    def append(self, wire, singleSegmentWire=False):
        return _odb.dbWire_append(self, wire, singleSegmentWire)

    def getTermJid(self, termid):
        return _odb.dbWire_getTermJid(self, termid)

    def getShape(self, shape_id, shape):
        return _odb.dbWire_getShape(self, shape_id, shape)

    def getSegment(self, *args):
        return _odb.dbWire_getSegment(self, *args)

    def getPrevVia(self, shape_id, shape):
        return _odb.dbWire_getPrevVia(self, shape_id, shape)

    def getNextVia(self, shape_id, shape):
        return _odb.dbWire_getNextVia(self, shape_id, shape)

    def getViaBoxes(self, via_shape_id, shapes):
        return _odb.dbWire_getViaBoxes(self, via_shape_id, shapes)

    def isGlobalWire(self):
        return _odb.dbWire_isGlobalWire(self)

    def getBBox(self):
        return _odb.dbWire_getBBox(self)

    def getLength(self):
        return _odb.dbWire_getLength(self)

    def length(self):
        return _odb.dbWire_length(self)

    def count(self):
        return _odb.dbWire_count(self)

    def getCoord(self, jid):
        return _odb.dbWire_getCoord(self, jid)

    def getProperty(self, jid, property):
        return _odb.dbWire_getProperty(self, jid, property)

    def setProperty(self, jid, property):
        return _odb.dbWire_setProperty(self, jid, property)

    def getData(self, n):
        return _odb.dbWire_getData(self, n)

    def getOpcode(self, n):
        return _odb.dbWire_getOpcode(self, n)

    def attach(self, net):
        return _odb.dbWire_attach(self, net)

    def detach(self):
        return _odb.dbWire_detach(self)

    @staticmethod
    def create(*args):
        return _odb.dbWire_create(*args)

    @staticmethod
    def getWire(block, oid):
        return _odb.dbWire_getWire(block, oid)

    @staticmethod
    def destroy(wire):
        return _odb.dbWire_destroy(wire)

    def __init__(self):
        _odb.dbWire_swiginit(self, _odb.new_dbWire())
    __swig_destroy__ = _odb.delete_dbWire

# Register dbWire in _odb:
_odb.dbWire_swigregister(dbWire)

def dbWire_create(*args):
    return _odb.dbWire_create(*args)

def dbWire_getWire(block, oid):
    return _odb.dbWire_getWire(block, oid)

def dbWire_destroy(wire):
    return _odb.dbWire_destroy(wire)

class dbSWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBlock(self):
        return _odb.dbSWire_getBlock(self)

    def getNet(self):
        return _odb.dbSWire_getNet(self)

    def getWireType(self):
        return _odb.dbSWire_getWireType(self)

    def getShield(self):
        return _odb.dbSWire_getShield(self)

    def getWires(self):
        return _odb.dbSWire_getWires(self)

    @staticmethod
    def create(net, type, shield=None):
        return _odb.dbSWire_create(net, type, shield)

    @staticmethod
    def destroy(*args):
        return _odb.dbSWire_destroy(*args)

    @staticmethod
    def getSWire(block, oid):
        return _odb.dbSWire_getSWire(block, oid)

    def __init__(self):
        _odb.dbSWire_swiginit(self, _odb.new_dbSWire())
    __swig_destroy__ = _odb.delete_dbSWire

# Register dbSWire in _odb:
_odb.dbSWire_swigregister(dbSWire)

def dbSWire_create(net, type, shield=None):
    return _odb.dbSWire_create(net, type, shield)

def dbSWire_destroy(*args):
    return _odb.dbSWire_destroy(*args)

def dbSWire_getSWire(block, oid):
    return _odb.dbSWire_getSWire(block, oid)

class dbTrackGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTechLayer(self):
        return _odb.dbTrackGrid_getTechLayer(self)

    def getGridX(self):
        return _odb.dbTrackGrid_getGridX(self)

    def getGridY(self):
        return _odb.dbTrackGrid_getGridY(self)

    def getBlock(self):
        return _odb.dbTrackGrid_getBlock(self)

    def addGridPatternX(self, origin_x, line_count, step, first_mask=0, samemask=False):
        return _odb.dbTrackGrid_addGridPatternX(self, origin_x, line_count, step, first_mask, samemask)

    def addGridPatternY(self, origin_y, line_count, step, first_mask=0, samemask=False):
        return _odb.dbTrackGrid_addGridPatternY(self, origin_y, line_count, step, first_mask, samemask)

    def getNumGridPatternsX(self):
        return _odb.dbTrackGrid_getNumGridPatternsX(self)

    def getNumGridPatternsY(self):
        return _odb.dbTrackGrid_getNumGridPatternsY(self)

    def getGridPatternX(self, *args):
        return _odb.dbTrackGrid_getGridPatternX(self, *args)

    def getGridPatternY(self, *args):
        return _odb.dbTrackGrid_getGridPatternY(self, *args)

    @staticmethod
    def create(block, layer):
        return _odb.dbTrackGrid_create(block, layer)

    def getAverageTrackSpacing(self, track_step, track_init, num_tracks):
        return _odb.dbTrackGrid_getAverageTrackSpacing(self, track_step, track_init, num_tracks)

    @staticmethod
    def getTrackGrid(block, oid):
        return _odb.dbTrackGrid_getTrackGrid(block, oid)

    @staticmethod
    def destroy(grid_):
        return _odb.dbTrackGrid_destroy(grid_)

    def __init__(self):
        _odb.dbTrackGrid_swiginit(self, _odb.new_dbTrackGrid())
    __swig_destroy__ = _odb.delete_dbTrackGrid

# Register dbTrackGrid in _odb:
_odb.dbTrackGrid_swigregister(dbTrackGrid)

def dbTrackGrid_create(block, layer):
    return _odb.dbTrackGrid_create(block, layer)

def dbTrackGrid_getTrackGrid(block, oid):
    return _odb.dbTrackGrid_getTrackGrid(block, oid)

def dbTrackGrid_destroy(grid_):
    return _odb.dbTrackGrid_destroy(grid_)

class dbObstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBBox(self):
        return _odb.dbObstruction_getBBox(self)

    def getInstance(self):
        return _odb.dbObstruction_getInstance(self)

    def setSlotObstruction(self):
        return _odb.dbObstruction_setSlotObstruction(self)

    def isSlotObstruction(self):
        return _odb.dbObstruction_isSlotObstruction(self)

    def setFillObstruction(self):
        return _odb.dbObstruction_setFillObstruction(self)

    def isFillObstruction(self):
        return _odb.dbObstruction_isFillObstruction(self)

    def setExceptPGNetsObstruction(self):
        return _odb.dbObstruction_setExceptPGNetsObstruction(self)

    def isExceptPGNetsObstruction(self):
        return _odb.dbObstruction_isExceptPGNetsObstruction(self)

    def setPushedDown(self):
        return _odb.dbObstruction_setPushedDown(self)

    def isPushedDown(self):
        return _odb.dbObstruction_isPushedDown(self)

    def hasEffectiveWidth(self):
        return _odb.dbObstruction_hasEffectiveWidth(self)

    def setEffectiveWidth(self, w):
        return _odb.dbObstruction_setEffectiveWidth(self, w)

    def getEffectiveWidth(self):
        return _odb.dbObstruction_getEffectiveWidth(self)

    def hasMinSpacing(self):
        return _odb.dbObstruction_hasMinSpacing(self)

    def setMinSpacing(self, w):
        return _odb.dbObstruction_setMinSpacing(self, w)

    def getMinSpacing(self):
        return _odb.dbObstruction_getMinSpacing(self)

    def getBlock(self):
        return _odb.dbObstruction_getBlock(self)

    @staticmethod
    def destroy(*args):
        return _odb.dbObstruction_destroy(*args)

    def isSystemReserved(self):
        return _odb.dbObstruction_isSystemReserved(self)

    def setIsSystemReserved(self, is_system_reserved):
        return _odb.dbObstruction_setIsSystemReserved(self, is_system_reserved)

    @staticmethod
    def create(block, layer, x1, y1, x2, y2, inst=None):
        return _odb.dbObstruction_create(block, layer, x1, y1, x2, y2, inst)

    @staticmethod
    def getObstruction(block, oid):
        return _odb.dbObstruction_getObstruction(block, oid)

    def __init__(self):
        _odb.dbObstruction_swiginit(self, _odb.new_dbObstruction())
    __swig_destroy__ = _odb.delete_dbObstruction

# Register dbObstruction in _odb:
_odb.dbObstruction_swigregister(dbObstruction)

def dbObstruction_destroy(*args):
    return _odb.dbObstruction_destroy(*args)

def dbObstruction_create(block, layer, x1, y1, x2, y2, inst=None):
    return _odb.dbObstruction_create(block, layer, x1, y1, x2, y2, inst)

def dbObstruction_getObstruction(block, oid):
    return _odb.dbObstruction_getObstruction(block, oid)

class dbBlockage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBBox(self):
        return _odb.dbBlockage_getBBox(self)

    def getInstance(self):
        return _odb.dbBlockage_getInstance(self)

    def setPushedDown(self):
        return _odb.dbBlockage_setPushedDown(self)

    def isPushedDown(self):
        return _odb.dbBlockage_isPushedDown(self)

    def setSoft(self):
        return _odb.dbBlockage_setSoft(self)

    def isSoft(self):
        return _odb.dbBlockage_isSoft(self)

    def isSystemReserved(self):
        return _odb.dbBlockage_isSystemReserved(self)

    def setIsSystemReserved(self, is_system_reserved):
        return _odb.dbBlockage_setIsSystemReserved(self, is_system_reserved)

    def setMaxDensity(self, max_density):
        return _odb.dbBlockage_setMaxDensity(self, max_density)

    def getMaxDensity(self):
        return _odb.dbBlockage_getMaxDensity(self)

    def getBlock(self):
        return _odb.dbBlockage_getBlock(self)

    @staticmethod
    def create(block, x1, y1, x2, y2, inst=None):
        return _odb.dbBlockage_create(block, x1, y1, x2, y2, inst)

    @staticmethod
    def destroy(*args):
        return _odb.dbBlockage_destroy(*args)

    @staticmethod
    def getBlockage(block, oid):
        return _odb.dbBlockage_getBlockage(block, oid)

    def __init__(self):
        _odb.dbBlockage_swiginit(self, _odb.new_dbBlockage())
    __swig_destroy__ = _odb.delete_dbBlockage

# Register dbBlockage in _odb:
_odb.dbBlockage_swigregister(dbBlockage)

def dbBlockage_create(block, x1, y1, x2, y2, inst=None):
    return _odb.dbBlockage_create(block, x1, y1, x2, y2, inst)

def dbBlockage_destroy(*args):
    return _odb.dbBlockage_destroy(*args)

def dbBlockage_getBlockage(block, oid):
    return _odb.dbBlockage_getBlockage(block, oid)

class dbCapNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addCapnCapacitance(self, other):
        return _odb.dbCapNode_addCapnCapacitance(self, other)

    def addGndCap(self, gndcap, totalcap):
        return _odb.dbCapNode_addGndCap(self, gndcap, totalcap)

    def addGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _odb.dbCapNode_addGndTotalCap(self, gndcap, totalcap, MillerMult)

    def getGndCap(self, gndcap, totalcap):
        return _odb.dbCapNode_getGndCap(self, gndcap, totalcap)

    def getGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _odb.dbCapNode_getGndTotalCap(self, gndcap, totalcap, MillerMult)

    def accAllCcCap(self, totalcap, MillerMult):
        return _odb.dbCapNode_accAllCcCap(self, totalcap, MillerMult)

    def setCapacitance(self, cap, corner=0):
        return _odb.dbCapNode_setCapacitance(self, cap, corner)

    def addCapacitance(self, cap, corner=0):
        return _odb.dbCapNode_addCapacitance(self, cap, corner)

    def groundCC(self, gndFactor):
        return _odb.dbCapNode_groundCC(self, gndFactor)

    def adjustCapacitance(self, *args):
        return _odb.dbCapNode_adjustCapacitance(self, *args)

    def needAdjustCC(self, ccThreshHold):
        return _odb.dbCapNode_needAdjustCC(self, ccThreshHold)

    def adjustCC(self, adjOrder, adjFactor, adjustedCC, halonets):
        return _odb.dbCapNode_adjustCC(self, adjOrder, adjFactor, adjustedCC, halonets)

    def getCapacitance(self, corner=0):
        return _odb.dbCapNode_getCapacitance(self, corner)

    def getNode(self):
        return _odb.dbCapNode_getNode(self)

    def getShapeId(self):
        return _odb.dbCapNode_getShapeId(self)

    def setNode(self, nodeid):
        return _odb.dbCapNode_setNode(self, nodeid)

    def isName(self):
        return _odb.dbCapNode_isName(self)

    def isITerm(self):
        return _odb.dbCapNode_isITerm(self)

    def isBTerm(self):
        return _odb.dbCapNode_isBTerm(self)

    def isInternal(self):
        return _odb.dbCapNode_isInternal(self)

    def isBranch(self):
        return _odb.dbCapNode_isBranch(self)

    def isDangling(self):
        return _odb.dbCapNode_isDangling(self)

    def isForeign(self):
        return _odb.dbCapNode_isForeign(self)

    def isTreeNode(self):
        return _odb.dbCapNode_isTreeNode(self)

    def isSourceTerm(self, mblock=None):
        return _odb.dbCapNode_isSourceTerm(self, mblock)

    def isInoutTerm(self, mblock=None):
        return _odb.dbCapNode_isInoutTerm(self, mblock)

    def isSelect(self):
        return _odb.dbCapNode_isSelect(self)

    def setSelect(self, value):
        return _odb.dbCapNode_setSelect(self, value)

    def incrChildrenCnt(self):
        return _odb.dbCapNode_incrChildrenCnt(self)

    def getChildrenCnt(self):
        return _odb.dbCapNode_getChildrenCnt(self)

    def setChildrenCnt(self, cnt):
        return _odb.dbCapNode_setChildrenCnt(self, cnt)

    def setNameFlag(self):
        return _odb.dbCapNode_setNameFlag(self)

    def setBTermFlag(self):
        return _odb.dbCapNode_setBTermFlag(self)

    def setITermFlag(self):
        return _odb.dbCapNode_setITermFlag(self)

    def setInternalFlag(self):
        return _odb.dbCapNode_setInternalFlag(self)

    def setBranchFlag(self):
        return _odb.dbCapNode_setBranchFlag(self)

    def setForeignFlag(self):
        return _odb.dbCapNode_setForeignFlag(self)

    def resetNameFlag(self):
        return _odb.dbCapNode_resetNameFlag(self)

    def resetBTermFlag(self):
        return _odb.dbCapNode_resetBTermFlag(self)

    def resetITermFlag(self):
        return _odb.dbCapNode_resetITermFlag(self)

    def resetInternalFlag(self):
        return _odb.dbCapNode_resetInternalFlag(self)

    def resetBranchFlag(self):
        return _odb.dbCapNode_resetBranchFlag(self)

    def resetForeignFlag(self):
        return _odb.dbCapNode_resetForeignFlag(self)

    def getSortIndex(self):
        return _odb.dbCapNode_getSortIndex(self)

    def setSortIndex(self, idx):
        return _odb.dbCapNode_setSortIndex(self, idx)

    def getTermCoords(self, mblock=None):
        return _odb.dbCapNode_getTermCoords(self, mblock)

    def getITerm(self, mblock=None):
        return _odb.dbCapNode_getITerm(self, mblock)

    def getBTerm(self, mblock=None):
        return _odb.dbCapNode_getBTerm(self, mblock)

    def printCC(self):
        return _odb.dbCapNode_printCC(self)

    def checkCC(self):
        return _odb.dbCapNode_checkCC(self)

    def getCCSegs(self):
        return _odb.dbCapNode_getCCSegs(self)

    def getNet(self):
        return _odb.dbCapNode_getNet(self)

    def setNet(self, netid):
        return _odb.dbCapNode_setNet(self, netid)

    def setNext(self, nextid):
        return _odb.dbCapNode_setNext(self, nextid)

    @staticmethod
    def create(net, node, foreign):
        return _odb.dbCapNode_create(net, node, foreign)

    def addToNet(self):
        return _odb.dbCapNode_addToNet(self)

    @staticmethod
    def destroy(*args):
        return _odb.dbCapNode_destroy(*args)

    @staticmethod
    def getCapNode(block, oid):
        return _odb.dbCapNode_getCapNode(block, oid)

    def __init__(self):
        _odb.dbCapNode_swiginit(self, _odb.new_dbCapNode())
    __swig_destroy__ = _odb.delete_dbCapNode

# Register dbCapNode in _odb:
_odb.dbCapNode_swigregister(dbCapNode)

def dbCapNode_create(net, node, foreign):
    return _odb.dbCapNode_create(net, node, foreign)

def dbCapNode_destroy(*args):
    return _odb.dbCapNode_destroy(*args)

def dbCapNode_getCapNode(block, oid):
    return _odb.dbCapNode_getCapNode(block, oid)

class dbRSeg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addRSegResistance(self, other):
        return _odb.dbRSeg_addRSegResistance(self, other)

    def addRSegCapacitance(self, other):
        return _odb.dbRSeg_addRSegCapacitance(self, other)

    def getResistance(self, corner=0):
        return _odb.dbRSeg_getResistance(self, corner)

    def getAllRes(self, res):
        return _odb.dbRSeg_getAllRes(self, res)

    def addAllRes(self, res):
        return _odb.dbRSeg_addAllRes(self, res)

    def getGndCap(self, gndcap, totalcap):
        return _odb.dbRSeg_getGndCap(self, gndcap, totalcap)

    def addGndCap(self, gndcap, totalcap):
        return _odb.dbRSeg_addGndCap(self, gndcap, totalcap)

    def getGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _odb.dbRSeg_getGndTotalCap(self, gndcap, totalcap, MillerMult)

    def addGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _odb.dbRSeg_addGndTotalCap(self, gndcap, totalcap, MillerMult)

    def mergeRCs(self, mrsegs):
        return _odb.dbRSeg_mergeRCs(self, mrsegs)

    def adjustSourceCapacitance(self, factor, corner):
        return _odb.dbRSeg_adjustSourceCapacitance(self, factor, corner)

    def adjustCapacitance(self, *args):
        return _odb.dbRSeg_adjustCapacitance(self, *args)

    def setCapacitance(self, cap, corner=0):
        return _odb.dbRSeg_setCapacitance(self, cap, corner)

    def updatedCap(self):
        return _odb.dbRSeg_updatedCap(self)

    def getSourceCapacitance(self, corner=0):
        return _odb.dbRSeg_getSourceCapacitance(self, corner)

    def getCapacitance(self, *args):
        return _odb.dbRSeg_getCapacitance(self, *args)

    def getCcSegs(self, ccsegs):
        return _odb.dbRSeg_getCcSegs(self, ccsegs)

    def printCcSegs(self):
        return _odb.dbRSeg_printCcSegs(self)

    def printCC(self):
        return _odb.dbRSeg_printCC(self)

    def checkCC(self):
        return _odb.dbRSeg_checkCC(self)

    def getCapTable(self, cap):
        return _odb.dbRSeg_getCapTable(self, cap)

    def setResistance(self, res, corner=0):
        return _odb.dbRSeg_setResistance(self, res, corner)

    def adjustResistance(self, *args):
        return _odb.dbRSeg_adjustResistance(self, *args)

    def setNext(self, next_id):
        return _odb.dbRSeg_setNext(self, next_id)

    def getSourceNode(self):
        return _odb.dbRSeg_getSourceNode(self)

    def getSourceCapNode(self):
        return _odb.dbRSeg_getSourceCapNode(self)

    def setSourceNode(self, nodeid):
        return _odb.dbRSeg_setSourceNode(self, nodeid)

    def getTargetNode(self):
        return _odb.dbRSeg_getTargetNode(self)

    def getTargetCapNode(self):
        return _odb.dbRSeg_getTargetCapNode(self)

    def setTargetNode(self, nodeid):
        return _odb.dbRSeg_setTargetNode(self, nodeid)

    def getShapeId(self):
        return _odb.dbRSeg_getShapeId(self)

    def setCoords(self, x, y):
        return _odb.dbRSeg_setCoords(self, x, y)

    def getCoords(self):
        return _odb.dbRSeg_getCoords(self)

    def updateShapeId(self, nsid):
        return _odb.dbRSeg_updateShapeId(self, nsid)

    def pathLowToHigh(self):
        return _odb.dbRSeg_pathLowToHigh(self)

    def allocatedCap(self):
        return _odb.dbRSeg_allocatedCap(self)

    def getLengthWidth(self, w):
        return _odb.dbRSeg_getLengthWidth(self, w)

    def addToNet(self):
        return _odb.dbRSeg_addToNet(self)

    def getNet(self):
        return _odb.dbRSeg_getNet(self)

    @staticmethod
    def create(net, x, y, path_dir, allocate_cap):
        return _odb.dbRSeg_create(net, x, y, path_dir, allocate_cap)

    @staticmethod
    def destroyS(seg):
        return _odb.dbRSeg_destroyS(seg)

    @staticmethod
    def destroy(*args):
        return _odb.dbRSeg_destroy(*args)

    @staticmethod
    def getRSeg(block, oid):
        return _odb.dbRSeg_getRSeg(block, oid)

    def __init__(self):
        _odb.dbRSeg_swiginit(self, _odb.new_dbRSeg())
    __swig_destroy__ = _odb.delete_dbRSeg

# Register dbRSeg in _odb:
_odb.dbRSeg_swigregister(dbRSeg)

def dbRSeg_create(net, x, y, path_dir, allocate_cap):
    return _odb.dbRSeg_create(net, x, y, path_dir, allocate_cap)

def dbRSeg_destroyS(seg):
    return _odb.dbRSeg_destroyS(seg)

def dbRSeg_destroy(*args):
    return _odb.dbRSeg_destroy(*args)

def dbRSeg_getRSeg(block, oid):
    return _odb.dbRSeg_getRSeg(block, oid)

class dbCCSeg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def adjustCapacitance(self, *args):
        return _odb.dbCCSeg_adjustCapacitance(self, *args)

    def getCapacitance(self, corner=0):
        return _odb.dbCCSeg_getCapacitance(self, corner)

    def setCapacitance(self, cap, corner=0):
        return _odb.dbCCSeg_setCapacitance(self, cap, corner)

    def addCapacitance(self, cap, corner=0):
        return _odb.dbCCSeg_addCapacitance(self, cap, corner)

    def accAllCcCap(self, ttcap, MillerMult):
        return _odb.dbCCSeg_accAllCcCap(self, ttcap, MillerMult)

    def getAllCcCap(self, ttcap):
        return _odb.dbCCSeg_getAllCcCap(self, ttcap)

    def setAllCcCap(self, ttcap):
        return _odb.dbCCSeg_setAllCcCap(self, ttcap)

    def getSourceCapNode(self):
        return _odb.dbCCSeg_getSourceCapNode(self)

    def getTargetCapNode(self):
        return _odb.dbCCSeg_getTargetCapNode(self)

    def addCcCapacitance(self, other):
        return _odb.dbCCSeg_addCcCapacitance(self, other)

    def swapCapnode(self, orig, newn):
        return _odb.dbCCSeg_swapCapnode(self, orig, newn)

    def getTheOtherCapn(self, oneCap, cid):
        return _odb.dbCCSeg_getTheOtherCapn(self, oneCap, cid)

    def getSourceNodeNum(self):
        return _odb.dbCCSeg_getSourceNodeNum(self)

    def getTargetNodeNum(self):
        return _odb.dbCCSeg_getTargetNodeNum(self)

    def getSourceNet(self):
        return _odb.dbCCSeg_getSourceNet(self)

    def getTargetNet(self):
        return _odb.dbCCSeg_getTargetNet(self)

    def getInfileCnt(self):
        return _odb.dbCCSeg_getInfileCnt(self)

    def incrInfileCnt(self):
        return _odb.dbCCSeg_incrInfileCnt(self)

    def isMarked(self):
        return _odb.dbCCSeg_isMarked(self)

    def setMark(self, value):
        return _odb.dbCCSeg_setMark(self, value)

    def printCapnCC(self, capn):
        return _odb.dbCCSeg_printCapnCC(self, capn)

    def checkCapnCC(self, capn):
        return _odb.dbCCSeg_checkCapnCC(self, capn)

    def unLink_cc_seg(self, capn):
        return _odb.dbCCSeg_unLink_cc_seg(self, capn)

    def Link_cc_seg(self, capn, cseq):
        return _odb.dbCCSeg_Link_cc_seg(self, capn, cseq)

    @staticmethod
    def findCC(nodeA, nodeB):
        return _odb.dbCCSeg_findCC(nodeA, nodeB)

    @staticmethod
    def create(nodeA, nodeB, mergeParallel=False):
        return _odb.dbCCSeg_create(nodeA, nodeB, mergeParallel)

    @staticmethod
    def destroyS(seg):
        return _odb.dbCCSeg_destroyS(seg)

    @staticmethod
    def destroy(*args):
        return _odb.dbCCSeg_destroy(*args)

    @staticmethod
    def getCCSeg(block, oid):
        return _odb.dbCCSeg_getCCSeg(block, oid)

    @staticmethod
    def disconnect(tcc_):
        return _odb.dbCCSeg_disconnect(tcc_)

    @staticmethod
    def connect(tcc_):
        return _odb.dbCCSeg_connect(tcc_)

    def __init__(self):
        _odb.dbCCSeg_swiginit(self, _odb.new_dbCCSeg())
    __swig_destroy__ = _odb.delete_dbCCSeg

# Register dbCCSeg in _odb:
_odb.dbCCSeg_swigregister(dbCCSeg)

def dbCCSeg_findCC(nodeA, nodeB):
    return _odb.dbCCSeg_findCC(nodeA, nodeB)

def dbCCSeg_create(nodeA, nodeB, mergeParallel=False):
    return _odb.dbCCSeg_create(nodeA, nodeB, mergeParallel)

def dbCCSeg_destroyS(seg):
    return _odb.dbCCSeg_destroyS(seg)

def dbCCSeg_destroy(*args):
    return _odb.dbCCSeg_destroy(*args)

def dbCCSeg_getCCSeg(block, oid):
    return _odb.dbCCSeg_getCCSeg(block, oid)

def dbCCSeg_disconnect(tcc_):
    return _odb.dbCCSeg_disconnect(tcc_)

def dbCCSeg_connect(tcc_):
    return _odb.dbCCSeg_connect(tcc_)

class dbRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbRow_getName(self)

    def getConstName(self):
        return _odb.dbRow_getConstName(self)

    def getSite(self):
        return _odb.dbRow_getSite(self)

    def getOrigin(self):
        return _odb.dbRow_getOrigin(self)

    def getOrient(self):
        return _odb.dbRow_getOrient(self)

    def getDirection(self):
        return _odb.dbRow_getDirection(self)

    def getSiteCount(self):
        return _odb.dbRow_getSiteCount(self)

    def getSpacing(self):
        return _odb.dbRow_getSpacing(self)

    def getBBox(self):
        return _odb.dbRow_getBBox(self)

    def getBlock(self):
        return _odb.dbRow_getBlock(self)

    @staticmethod
    def create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing):
        return _odb.dbRow_create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing)

    @staticmethod
    def destroy(*args):
        return _odb.dbRow_destroy(*args)

    @staticmethod
    def getRow(block, oid):
        return _odb.dbRow_getRow(block, oid)

    def __init__(self):
        _odb.dbRow_swiginit(self, _odb.new_dbRow())
    __swig_destroy__ = _odb.delete_dbRow

# Register dbRow in _odb:
_odb.dbRow_swigregister(dbRow)

def dbRow_create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing):
    return _odb.dbRow_create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing)

def dbRow_destroy(*args):
    return _odb.dbRow_destroy(*args)

def dbRow_getRow(block, oid):
    return _odb.dbRow_getRow(block, oid)

class dbFill(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getRect(self):
        return _odb.dbFill_getRect(self)

    def needsOPC(self):
        return _odb.dbFill_needsOPC(self)

    def maskNumber(self):
        return _odb.dbFill_maskNumber(self)

    def getTechLayer(self):
        return _odb.dbFill_getTechLayer(self)

    @staticmethod
    def create(block, needs_opc, mask_number, layer, x1, y1, x2, y2):
        return _odb.dbFill_create(block, needs_opc, mask_number, layer, x1, y1, x2, y2)

    @staticmethod
    def destroy(*args):
        return _odb.dbFill_destroy(*args)

    @staticmethod
    def getFill(block, oid):
        return _odb.dbFill_getFill(block, oid)

    def __init__(self):
        _odb.dbFill_swiginit(self, _odb.new_dbFill())
    __swig_destroy__ = _odb.delete_dbFill

# Register dbFill in _odb:
_odb.dbFill_swigregister(dbFill)

def dbFill_create(block, needs_opc, mask_number, layer, x1, y1, x2, y2):
    return _odb.dbFill_create(block, needs_opc, mask_number, layer, x1, y1, x2, y2)

def dbFill_destroy(*args):
    return _odb.dbFill_destroy(*args)

def dbFill_getFill(block, oid):
    return _odb.dbFill_getFill(block, oid)

class dbRegion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbRegion_getName(self)

    def getRegionType(self):
        return _odb.dbRegion_getRegionType(self)

    def setRegionType(self, type):
        return _odb.dbRegion_setRegionType(self, type)

    def getRegionInsts(self):
        return _odb.dbRegion_getRegionInsts(self)

    def setInvalid(self, v):
        return _odb.dbRegion_setInvalid(self, v)

    def isInvalid(self):
        return _odb.dbRegion_isInvalid(self)

    def getBoundaries(self):
        return _odb.dbRegion_getBoundaries(self)

    def addInst(self, inst):
        return _odb.dbRegion_addInst(self, inst)

    def removeInst(self, inst):
        return _odb.dbRegion_removeInst(self, inst)

    def removeGroup(self, group):
        return _odb.dbRegion_removeGroup(self, group)

    def addGroup(self, group):
        return _odb.dbRegion_addGroup(self, group)

    def getGroups(self):
        return _odb.dbRegion_getGroups(self)

    def getBlock(self):
        return _odb.dbRegion_getBlock(self)

    @staticmethod
    def create(block, name):
        return _odb.dbRegion_create(block, name)

    @staticmethod
    def destroy(*args):
        return _odb.dbRegion_destroy(*args)

    @staticmethod
    def getRegion(block, oid):
        return _odb.dbRegion_getRegion(block, oid)

    def __init__(self):
        _odb.dbRegion_swiginit(self, _odb.new_dbRegion())
    __swig_destroy__ = _odb.delete_dbRegion

# Register dbRegion in _odb:
_odb.dbRegion_swigregister(dbRegion)

def dbRegion_create(block, name):
    return _odb.dbRegion_create(block, name)

def dbRegion_destroy(*args):
    return _odb.dbRegion_destroy(*args)

def dbRegion_getRegion(block, oid):
    return _odb.dbRegion_getRegion(block, oid)

class dbLib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbLib_getName(self)

    def getConstName(self):
        return _odb.dbLib_getConstName(self)

    def getDbUnitsPerMicron(self):
        return _odb.dbLib_getDbUnitsPerMicron(self)

    def getTech(self):
        return _odb.dbLib_getTech(self)

    def getMasters(self):
        return _odb.dbLib_getMasters(self)

    def findMaster(self, name):
        return _odb.dbLib_findMaster(self, name)

    def getSites(self):
        return _odb.dbLib_getSites(self)

    def findSite(self, name):
        return _odb.dbLib_findSite(self, name)

    def getLefUnits(self):
        return _odb.dbLib_getLefUnits(self)

    def setLefUnits(self, units):
        return _odb.dbLib_setLefUnits(self, units)

    def getHierarchyDelimiter(self):
        return _odb.dbLib_getHierarchyDelimiter(self)

    def setBusDelimiters(self, left, right):
        return _odb.dbLib_setBusDelimiters(self, left, right)

    def getBusDelimiters(self, left, right):
        return _odb.dbLib_getBusDelimiters(self, left, right)

    @staticmethod
    def create(*args):
        return _odb.dbLib_create(*args)

    @staticmethod
    def getLib(db, oid):
        return _odb.dbLib_getLib(db, oid)

    @staticmethod
    def destroy(lib):
        return _odb.dbLib_destroy(lib)

    def __init__(self):
        _odb.dbLib_swiginit(self, _odb.new_dbLib())
    __swig_destroy__ = _odb.delete_dbLib

# Register dbLib in _odb:
_odb.dbLib_swigregister(dbLib)

def dbLib_create(*args):
    return _odb.dbLib_create(*args)

def dbLib_getLib(db, oid):
    return _odb.dbLib_getLib(db, oid)

def dbLib_destroy(lib):
    return _odb.dbLib_destroy(lib)

class dbSite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbSite_getName(self)

    def getConstName(self):
        return _odb.dbSite_getConstName(self)

    def getWidth(self):
        return _odb.dbSite_getWidth(self)

    def setWidth(self, width):
        return _odb.dbSite_setWidth(self, width)

    def getHeight(self):
        return _odb.dbSite_getHeight(self)

    def setHeight(self, height):
        return _odb.dbSite_setHeight(self, height)

    def getClass(self):
        return _odb.dbSite_getClass(self)

    def setClass(self, site_class):
        return _odb.dbSite_setClass(self, site_class)

    def setSymmetryX(self):
        return _odb.dbSite_setSymmetryX(self)

    def getSymmetryX(self):
        return _odb.dbSite_getSymmetryX(self)

    def setSymmetryY(self):
        return _odb.dbSite_setSymmetryY(self)

    def getSymmetryY(self):
        return _odb.dbSite_getSymmetryY(self)

    def setSymmetryR90(self):
        return _odb.dbSite_setSymmetryR90(self)

    def getSymmetryR90(self):
        return _odb.dbSite_getSymmetryR90(self)

    def setRowPattern(self, row_pattern):
        return _odb.dbSite_setRowPattern(self, row_pattern)

    def hasRowPattern(self):
        return _odb.dbSite_hasRowPattern(self)

    def isHybrid(self):
        return _odb.dbSite_isHybrid(self)

    def getRowPattern(self):
        return _odb.dbSite_getRowPattern(self)

    def getLib(self):
        return _odb.dbSite_getLib(self)

    @staticmethod
    def create(lib, name):
        return _odb.dbSite_create(lib, name)

    @staticmethod
    def getSite(lib, oid):
        return _odb.dbSite_getSite(lib, oid)

    def __init__(self):
        _odb.dbSite_swiginit(self, _odb.new_dbSite())
    __swig_destroy__ = _odb.delete_dbSite

# Register dbSite in _odb:
_odb.dbSite_swigregister(dbSite)

def dbSite_create(lib, name):
    return _odb.dbSite_create(lib, name)

def dbSite_getSite(lib, oid):
    return _odb.dbSite_getSite(lib, oid)

class dbMaster(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbMaster_getName(self)

    def getConstName(self):
        return _odb.dbMaster_getConstName(self)

    def getOrigin(self):
        return _odb.dbMaster_getOrigin(self)

    def setOrigin(self, x, y):
        return _odb.dbMaster_setOrigin(self, x, y)

    def getWidth(self):
        return _odb.dbMaster_getWidth(self)

    def setWidth(self, width):
        return _odb.dbMaster_setWidth(self, width)

    def getHeight(self):
        return _odb.dbMaster_getHeight(self)

    def setHeight(self, height):
        return _odb.dbMaster_setHeight(self, height)

    def getArea(self):
        return _odb.dbMaster_getArea(self)

    def isFiller(self):
        return _odb.dbMaster_isFiller(self)

    def getType(self):
        return _odb.dbMaster_getType(self)

    def isBlock(self):
        return _odb.dbMaster_isBlock(self)

    def isCore(self):
        return _odb.dbMaster_isCore(self)

    def isPad(self):
        return _odb.dbMaster_isPad(self)

    def isEndCap(self):
        return _odb.dbMaster_isEndCap(self)

    def isCover(self):
        return _odb.dbMaster_isCover(self)

    def isCoreAutoPlaceable(self):
        return _odb.dbMaster_isCoreAutoPlaceable(self)

    def setType(self, type):
        return _odb.dbMaster_setType(self, type)

    def getLEQ(self):
        return _odb.dbMaster_getLEQ(self)

    def setLEQ(self, master):
        return _odb.dbMaster_setLEQ(self, master)

    def getEEQ(self):
        return _odb.dbMaster_getEEQ(self)

    def setEEQ(self, master):
        return _odb.dbMaster_setEEQ(self, master)

    def setSymmetryX(self):
        return _odb.dbMaster_setSymmetryX(self)

    def getSymmetryX(self):
        return _odb.dbMaster_getSymmetryX(self)

    def setSymmetryY(self):
        return _odb.dbMaster_setSymmetryY(self)

    def getSymmetryY(self):
        return _odb.dbMaster_getSymmetryY(self)

    def setSymmetryR90(self):
        return _odb.dbMaster_setSymmetryR90(self)

    def getSymmetryR90(self):
        return _odb.dbMaster_getSymmetryR90(self)

    def getMTerms(self):
        return _odb.dbMaster_getMTerms(self)

    def getEdgeTypes(self):
        return _odb.dbMaster_getEdgeTypes(self)

    def findMTerm(self, *args):
        return _odb.dbMaster_findMTerm(self, *args)

    def getLib(self):
        return _odb.dbMaster_getLib(self)

    def getObstructions(self, include_decomposed_polygons=True):
        return _odb.dbMaster_getObstructions(self, include_decomposed_polygons)

    def getPolygonObstructions(self):
        return _odb.dbMaster_getPolygonObstructions(self)

    def getPlacementBoundary(self):
        return _odb.dbMaster_getPlacementBoundary(self)

    def transform(self, t):
        return _odb.dbMaster_transform(self, t)

    def setFrozen(self):
        return _odb.dbMaster_setFrozen(self)

    def isFrozen(self):
        return _odb.dbMaster_isFrozen(self)

    def setSequential(self, v):
        return _odb.dbMaster_setSequential(self, v)

    def isSequential(self):
        return _odb.dbMaster_isSequential(self)

    def setMark(self, mark):
        return _odb.dbMaster_setMark(self, mark)

    def isMarked(self):
        return _odb.dbMaster_isMarked(self)

    def isSpecialPower(self):
        return _odb.dbMaster_isSpecialPower(self)

    def setSpecialPower(self, v):
        return _odb.dbMaster_setSpecialPower(self, v)

    def getMTermCount(self):
        return _odb.dbMaster_getMTermCount(self)

    def setSite(self, site):
        return _odb.dbMaster_setSite(self, site)

    def getSite(self):
        return _odb.dbMaster_getSite(self)

    def getMasterId(self):
        return _odb.dbMaster_getMasterId(self)

    @staticmethod
    def create(lib, name):
        return _odb.dbMaster_create(lib, name)

    @staticmethod
    def destroy(master):
        return _odb.dbMaster_destroy(master)

    @staticmethod
    def getMaster(lib, oid):
        return _odb.dbMaster_getMaster(lib, oid)

    def staCell(self):
        return _odb.dbMaster_staCell(self)

    def staSetCell(self, cell):
        return _odb.dbMaster_staSetCell(self, cell)

    def __init__(self):
        _odb.dbMaster_swiginit(self, _odb.new_dbMaster())
    __swig_destroy__ = _odb.delete_dbMaster

# Register dbMaster in _odb:
_odb.dbMaster_swigregister(dbMaster)

def dbMaster_create(lib, name):
    return _odb.dbMaster_create(lib, name)

def dbMaster_destroy(master):
    return _odb.dbMaster_destroy(master)

def dbMaster_getMaster(lib, oid):
    return _odb.dbMaster_getMaster(lib, oid)

class dbGDSLib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setLibname(self, libname):
        return _odb.dbGDSLib_setLibname(self, libname)

    def getLibname(self):
        return _odb.dbGDSLib_getLibname(self)

    def setUnits(self, uu_per_dbu, dbu_per_meter):
        return _odb.dbGDSLib_setUnits(self, uu_per_dbu, dbu_per_meter)

    def getUnits(self):
        return _odb.dbGDSLib_getUnits(self)

    def findGDSStructure(self, name):
        return _odb.dbGDSLib_findGDSStructure(self, name)

    def getGDSStructures(self):
        return _odb.dbGDSLib_getGDSStructures(self)

    @staticmethod
    def create(db, name):
        return _odb.dbGDSLib_create(db, name)

    @staticmethod
    def destroy(lib):
        return _odb.dbGDSLib_destroy(lib)

    def __init__(self):
        _odb.dbGDSLib_swiginit(self, _odb.new_dbGDSLib())
    __swig_destroy__ = _odb.delete_dbGDSLib

# Register dbGDSLib in _odb:
_odb.dbGDSLib_swigregister(dbGDSLib)

def dbGDSLib_create(db, name):
    return _odb.dbGDSLib_create(db, name)

def dbGDSLib_destroy(lib):
    return _odb.dbGDSLib_destroy(lib)

class dbMTerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getConstName(self):
        return _odb.dbMTerm_getConstName(self)

    def getName(self, *args):
        return _odb.dbMTerm_getName(self, *args)

    def getSigType(self):
        return _odb.dbMTerm_getSigType(self)

    def setSigType(self, type):
        return _odb.dbMTerm_setSigType(self, type)

    def getIoType(self):
        return _odb.dbMTerm_getIoType(self)

    def getShape(self):
        return _odb.dbMTerm_getShape(self)

    def setMark(self, v):
        return _odb.dbMTerm_setMark(self, v)

    def isSetMark(self):
        return _odb.dbMTerm_isSetMark(self)

    def getMaster(self):
        return _odb.dbMTerm_getMaster(self)

    def getMPins(self):
        return _odb.dbMTerm_getMPins(self)

    def getBBox(self):
        return _odb.dbMTerm_getBBox(self)

    def addPartialMetalAreaEntry(self, inval, refly=None):
        return _odb.dbMTerm_addPartialMetalAreaEntry(self, inval, refly)

    def addPartialMetalSideAreaEntry(self, inval, refly=None):
        return _odb.dbMTerm_addPartialMetalSideAreaEntry(self, inval, refly)

    def addPartialCutAreaEntry(self, inval, refly=None):
        return _odb.dbMTerm_addPartialCutAreaEntry(self, inval, refly)

    def addDiffAreaEntry(self, inval, refly=None):
        return _odb.dbMTerm_addDiffAreaEntry(self, inval, refly)

    def createDefaultAntennaModel(self):
        return _odb.dbMTerm_createDefaultAntennaModel(self)

    def createOxide2AntennaModel(self):
        return _odb.dbMTerm_createOxide2AntennaModel(self)

    def hasDefaultAntennaModel(self):
        return _odb.dbMTerm_hasDefaultAntennaModel(self)

    def hasOxide2AntennaModel(self):
        return _odb.dbMTerm_hasOxide2AntennaModel(self)

    def getDefaultAntennaModel(self):
        return _odb.dbMTerm_getDefaultAntennaModel(self)

    def getOxide2AntennaModel(self):
        return _odb.dbMTerm_getOxide2AntennaModel(self)

    def writeAntennaLef(self, writer):
        return _odb.dbMTerm_writeAntennaLef(self, writer)

    def getDiffArea(self):
        return _odb.dbMTerm_getDiffArea(self)

    def staPort(self):
        return _odb.dbMTerm_staPort(self)

    def staSetPort(self, port):
        return _odb.dbMTerm_staSetPort(self, port)

    def getIndex(self):
        return _odb.dbMTerm_getIndex(self)

    @staticmethod
    def create(*args):
        return _odb.dbMTerm_create(*args)

    @staticmethod
    def getMTerm(master, oid):
        return _odb.dbMTerm_getMTerm(master, oid)

    def __init__(self):
        _odb.dbMTerm_swiginit(self, _odb.new_dbMTerm())
    __swig_destroy__ = _odb.delete_dbMTerm

# Register dbMTerm in _odb:
_odb.dbMTerm_swigregister(dbMTerm)

def dbMTerm_create(*args):
    return _odb.dbMTerm_create(*args)

def dbMTerm_getMTerm(master, oid):
    return _odb.dbMTerm_getMTerm(master, oid)

class dbMPin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMTerm(self):
        return _odb.dbMPin_getMTerm(self)

    def getMaster(self):
        return _odb.dbMPin_getMaster(self)

    def getGeometry(self, include_decomposed_polygons=True):
        return _odb.dbMPin_getGeometry(self, include_decomposed_polygons)

    def getPolygonGeometry(self):
        return _odb.dbMPin_getPolygonGeometry(self)

    def getBBox(self):
        return _odb.dbMPin_getBBox(self)

    def getPinAccess(self):
        return _odb.dbMPin_getPinAccess(self)

    @staticmethod
    def create(mterm):
        return _odb.dbMPin_create(mterm)

    @staticmethod
    def getMPin(master, oid):
        return _odb.dbMPin_getMPin(master, oid)

    def __init__(self):
        _odb.dbMPin_swiginit(self, _odb.new_dbMPin())
    __swig_destroy__ = _odb.delete_dbMPin

# Register dbMPin in _odb:
_odb.dbMPin_swigregister(dbMPin)

def dbMPin_create(mterm):
    return _odb.dbMPin_create(mterm)

def dbMPin_getMPin(master, oid):
    return _odb.dbMPin_getMPin(master, oid)

class dbTech(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbTech_getName(self)

    def setDbUnitsPerMicron(self, value):
        return _odb.dbTech_setDbUnitsPerMicron(self, value)

    def getDbUnitsPerMicron(self):
        return _odb.dbTech_getDbUnitsPerMicron(self)

    def getLayers(self):
        return _odb.dbTech_getLayers(self)

    def findLayer(self, *args):
        return _odb.dbTech_findLayer(self, *args)

    def findRoutingLayer(self, level_number):
        return _odb.dbTech_findRoutingLayer(self, level_number)

    def getVias(self):
        return _odb.dbTech_getVias(self)

    def findVia(self, name):
        return _odb.dbTech_findVia(self, name)

    def getLefUnits(self):
        return _odb.dbTech_getLefUnits(self)

    def setLefUnits(self, units):
        return _odb.dbTech_setLefUnits(self, units)

    def getLefVersion(self):
        return _odb.dbTech_getLefVersion(self)

    def getLefVersionStr(self):
        return _odb.dbTech_getLefVersionStr(self)

    def setLefVersion(self, inver):
        return _odb.dbTech_setLefVersion(self, inver)

    def hasNoWireExtAtPin(self):
        return _odb.dbTech_hasNoWireExtAtPin(self)

    def getNoWireExtAtPin(self):
        return _odb.dbTech_getNoWireExtAtPin(self)

    def setNoWireExtAtPin(self, intyp):
        return _odb.dbTech_setNoWireExtAtPin(self, intyp)

    def getNamesCaseSensitive(self):
        return _odb.dbTech_getNamesCaseSensitive(self)

    def setNamesCaseSensitive(self, intyp):
        return _odb.dbTech_setNamesCaseSensitive(self, intyp)

    def hasClearanceMeasure(self):
        return _odb.dbTech_hasClearanceMeasure(self)

    def getClearanceMeasure(self):
        return _odb.dbTech_getClearanceMeasure(self)

    def setClearanceMeasure(self, inmeas):
        return _odb.dbTech_setClearanceMeasure(self, inmeas)

    def hasUseMinSpacingObs(self):
        return _odb.dbTech_hasUseMinSpacingObs(self)

    def getUseMinSpacingObs(self):
        return _odb.dbTech_getUseMinSpacingObs(self)

    def setUseMinSpacingObs(self, inval):
        return _odb.dbTech_setUseMinSpacingObs(self, inval)

    def hasUseMinSpacingPin(self):
        return _odb.dbTech_hasUseMinSpacingPin(self)

    def getUseMinSpacingPin(self):
        return _odb.dbTech_getUseMinSpacingPin(self)

    def setUseMinSpacingPin(self, inval):
        return _odb.dbTech_setUseMinSpacingPin(self, inval)

    def hasManufacturingGrid(self):
        return _odb.dbTech_hasManufacturingGrid(self)

    def getManufacturingGrid(self):
        return _odb.dbTech_getManufacturingGrid(self)

    def setManufacturingGrid(self, ingrd):
        return _odb.dbTech_setManufacturingGrid(self, ingrd)

    def getLayerCount(self):
        return _odb.dbTech_getLayerCount(self)

    def getRoutingLayerCount(self):
        return _odb.dbTech_getRoutingLayerCount(self)

    def getViaCount(self):
        return _odb.dbTech_getViaCount(self)

    def getNonDefaultRules(self):
        return _odb.dbTech_getNonDefaultRules(self)

    def findNonDefaultRule(self, rulename):
        return _odb.dbTech_findNonDefaultRule(self, rulename)

    def findSameNetRule(self, l1, l2):
        return _odb.dbTech_findSameNetRule(self, l1, l2)

    def getSameNetRules(self, rules):
        return _odb.dbTech_getSameNetRules(self, rules)

    def getViaRules(self):
        return _odb.dbTech_getViaRules(self)

    def getViaGenerateRules(self):
        return _odb.dbTech_getViaGenerateRules(self)

    def getMetalWidthViaMap(self):
        return _odb.dbTech_getMetalWidthViaMap(self)

    def getCellEdgeSpacingTable(self):
        return _odb.dbTech_getCellEdgeSpacingTable(self)

    def findViaRule(self, name):
        return _odb.dbTech_findViaRule(self, name)

    def findViaGenerateRule(self, name):
        return _odb.dbTech_findViaGenerateRule(self, name)

    def checkLayer(self, typeChk, widthChk, pitchChk, spacingChk):
        return _odb.dbTech_checkLayer(self, typeChk, widthChk, pitchChk, spacingChk)

    @staticmethod
    def create(db, name, dbu_per_micron=1000):
        return _odb.dbTech_create(db, name, dbu_per_micron)

    @staticmethod
    def getTech(db, oid):
        return _odb.dbTech_getTech(db, oid)

    @staticmethod
    def destroy(tech):
        return _odb.dbTech_destroy(tech)

    def __init__(self):
        _odb.dbTech_swiginit(self, _odb.new_dbTech())
    __swig_destroy__ = _odb.delete_dbTech

# Register dbTech in _odb:
_odb.dbTech_swigregister(dbTech)

def dbTech_create(db, name, dbu_per_micron=1000):
    return _odb.dbTech_create(db, name, dbu_per_micron)

def dbTech_getTech(db, oid):
    return _odb.dbTech_getTech(db, oid)

def dbTech_destroy(tech):
    return _odb.dbTech_destroy(tech)

class dbTechVia(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbTechVia_getName(self)

    def getConstName(self):
        return _odb.dbTechVia_getConstName(self)

    def isDefault(self):
        return _odb.dbTechVia_isDefault(self)

    def setDefault(self):
        return _odb.dbTechVia_setDefault(self)

    def isTopOfStack(self):
        return _odb.dbTechVia_isTopOfStack(self)

    def setTopOfStack(self):
        return _odb.dbTechVia_setTopOfStack(self)

    def getResistance(self):
        return _odb.dbTechVia_getResistance(self)

    def setResistance(self, res):
        return _odb.dbTechVia_setResistance(self, res)

    def setPattern(self, pattern):
        return _odb.dbTechVia_setPattern(self, pattern)

    def getPattern(self):
        return _odb.dbTechVia_getPattern(self)

    def setViaGenerateRule(self, rule):
        return _odb.dbTechVia_setViaGenerateRule(self, rule)

    def getViaGenerateRule(self):
        return _odb.dbTechVia_getViaGenerateRule(self)

    def hasParams(self):
        return _odb.dbTechVia_hasParams(self)

    def setViaParams(self, params):
        return _odb.dbTechVia_setViaParams(self, params)

    def getViaParams(self):
        return _odb.dbTechVia_getViaParams(self)

    def getTech(self):
        return _odb.dbTechVia_getTech(self)

    def getBBox(self):
        return _odb.dbTechVia_getBBox(self)

    def getBoxes(self):
        return _odb.dbTechVia_getBoxes(self)

    def getTopLayer(self):
        return _odb.dbTechVia_getTopLayer(self)

    def getBottomLayer(self):
        return _odb.dbTechVia_getBottomLayer(self)

    def getNonDefaultRule(self):
        return _odb.dbTechVia_getNonDefaultRule(self)

    @staticmethod
    def create(*args):
        return _odb.dbTechVia_create(*args)

    @staticmethod
    def clone(rule, invia_, new_name):
        return _odb.dbTechVia_clone(rule, invia_, new_name)

    @staticmethod
    def getTechVia(tech, oid):
        return _odb.dbTechVia_getTechVia(tech, oid)

    def __init__(self):
        _odb.dbTechVia_swiginit(self, _odb.new_dbTechVia())
    __swig_destroy__ = _odb.delete_dbTechVia

# Register dbTechVia in _odb:
_odb.dbTechVia_swigregister(dbTechVia)

def dbTechVia_create(*args):
    return _odb.dbTechVia_create(*args)

def dbTechVia_clone(rule, invia_, new_name):
    return _odb.dbTechVia_clone(rule, invia_, new_name)

def dbTechVia_getTechVia(tech, oid):
    return _odb.dbTechVia_getTechVia(tech, oid)

class dbTechViaRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbTechViaRule_getName(self)

    def addVia(self, via):
        return _odb.dbTechViaRule_addVia(self, via)

    def getViaCount(self):
        return _odb.dbTechViaRule_getViaCount(self)

    def getVia(self, indx):
        return _odb.dbTechViaRule_getVia(self, indx)

    def getViaLayerRuleCount(self):
        return _odb.dbTechViaRule_getViaLayerRuleCount(self)

    def getViaLayerRule(self, indx):
        return _odb.dbTechViaRule_getViaLayerRule(self, indx)

    @staticmethod
    def create(tech, name):
        return _odb.dbTechViaRule_create(tech, name)

    @staticmethod
    def getTechViaRule(tech, oid):
        return _odb.dbTechViaRule_getTechViaRule(tech, oid)

    def __init__(self):
        _odb.dbTechViaRule_swiginit(self, _odb.new_dbTechViaRule())
    __swig_destroy__ = _odb.delete_dbTechViaRule

# Register dbTechViaRule in _odb:
_odb.dbTechViaRule_swigregister(dbTechViaRule)

def dbTechViaRule_create(tech, name):
    return _odb.dbTechViaRule_create(tech, name)

def dbTechViaRule_getTechViaRule(tech, oid):
    return _odb.dbTechViaRule_getTechViaRule(tech, oid)

class dbTechViaLayerRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLayer(self):
        return _odb.dbTechViaLayerRule_getLayer(self)

    def getDirection(self):
        return _odb.dbTechViaLayerRule_getDirection(self)

    def setDirection(self, dir):
        return _odb.dbTechViaLayerRule_setDirection(self, dir)

    def hasWidth(self):
        return _odb.dbTechViaLayerRule_hasWidth(self)

    def getWidth(self, minWidth, maxWidth):
        return _odb.dbTechViaLayerRule_getWidth(self, minWidth, maxWidth)

    def setWidth(self, minWidth, maxWidth):
        return _odb.dbTechViaLayerRule_setWidth(self, minWidth, maxWidth)

    def hasEnclosure(self):
        return _odb.dbTechViaLayerRule_hasEnclosure(self)

    def getEnclosure(self):
        return _odb.dbTechViaLayerRule_getEnclosure(self)

    def setEnclosure(self, overhang1, overhang2):
        return _odb.dbTechViaLayerRule_setEnclosure(self, overhang1, overhang2)

    def hasOverhang(self):
        return _odb.dbTechViaLayerRule_hasOverhang(self)

    def getOverhang(self):
        return _odb.dbTechViaLayerRule_getOverhang(self)

    def setOverhang(self, overhang):
        return _odb.dbTechViaLayerRule_setOverhang(self, overhang)

    def hasMetalOverhang(self):
        return _odb.dbTechViaLayerRule_hasMetalOverhang(self)

    def getMetalOverhang(self):
        return _odb.dbTechViaLayerRule_getMetalOverhang(self)

    def setMetalOverhang(self, overhang):
        return _odb.dbTechViaLayerRule_setMetalOverhang(self, overhang)

    def hasRect(self):
        return _odb.dbTechViaLayerRule_hasRect(self)

    def getRect(self):
        return _odb.dbTechViaLayerRule_getRect(self)

    def setRect(self):
        return _odb.dbTechViaLayerRule_setRect(self)

    def hasSpacing(self):
        return _odb.dbTechViaLayerRule_hasSpacing(self)

    def getSpacing(self):
        return _odb.dbTechViaLayerRule_getSpacing(self)

    def setSpacing(self, x_spacing, y_spacing):
        return _odb.dbTechViaLayerRule_setSpacing(self, x_spacing, y_spacing)

    def hasResistance(self):
        return _odb.dbTechViaLayerRule_hasResistance(self)

    def setResistance(self, r):
        return _odb.dbTechViaLayerRule_setResistance(self, r)

    def getResistance(self):
        return _odb.dbTechViaLayerRule_getResistance(self)

    @staticmethod
    def create(*args):
        return _odb.dbTechViaLayerRule_create(*args)

    @staticmethod
    def getTechViaLayerRule(tech, oid):
        return _odb.dbTechViaLayerRule_getTechViaLayerRule(tech, oid)

    def __init__(self):
        _odb.dbTechViaLayerRule_swiginit(self, _odb.new_dbTechViaLayerRule())
    __swig_destroy__ = _odb.delete_dbTechViaLayerRule

# Register dbTechViaLayerRule in _odb:
_odb.dbTechViaLayerRule_swigregister(dbTechViaLayerRule)

def dbTechViaLayerRule_create(*args):
    return _odb.dbTechViaLayerRule_create(*args)

def dbTechViaLayerRule_getTechViaLayerRule(tech, oid):
    return _odb.dbTechViaLayerRule_getTechViaLayerRule(tech, oid)

class dbTechViaGenerateRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbTechViaGenerateRule_getName(self)

    def isDefault(self):
        return _odb.dbTechViaGenerateRule_isDefault(self)

    def getViaLayerRuleCount(self):
        return _odb.dbTechViaGenerateRule_getViaLayerRuleCount(self)

    def getViaLayerRule(self, indx):
        return _odb.dbTechViaGenerateRule_getViaLayerRule(self, indx)

    @staticmethod
    def create(tech, name, is_default):
        return _odb.dbTechViaGenerateRule_create(tech, name, is_default)

    @staticmethod
    def getTechViaGenerateRule(tech, oid):
        return _odb.dbTechViaGenerateRule_getTechViaGenerateRule(tech, oid)

    def __init__(self):
        _odb.dbTechViaGenerateRule_swiginit(self, _odb.new_dbTechViaGenerateRule())
    __swig_destroy__ = _odb.delete_dbTechViaGenerateRule

# Register dbTechViaGenerateRule in _odb:
_odb.dbTechViaGenerateRule_swigregister(dbTechViaGenerateRule)

def dbTechViaGenerateRule_create(tech, name, is_default):
    return _odb.dbTechViaGenerateRule_create(tech, name, is_default)

def dbTechViaGenerateRule_getTechViaGenerateRule(tech, oid):
    return _odb.dbTechViaGenerateRule_getTechViaGenerateRule(tech, oid)

class dbTechLayerSpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isUnconditional(self):
        return _odb.dbTechLayerSpacingRule_isUnconditional(self)

    def getSpacing(self):
        return _odb.dbTechLayerSpacingRule_getSpacing(self)

    def getLengthThreshold(self, threshold):
        return _odb.dbTechLayerSpacingRule_getLengthThreshold(self, threshold)

    def getLengthThresholdRange(self, rmin, rmax):
        return _odb.dbTechLayerSpacingRule_getLengthThresholdRange(self, rmin, rmax)

    def getRange(self, rmin, rmax):
        return _odb.dbTechLayerSpacingRule_getRange(self, rmin, rmax)

    def setSpacingNotchLengthValid(self, val):
        return _odb.dbTechLayerSpacingRule_setSpacingNotchLengthValid(self, val)

    def setSpacingEndOfNotchWidthValid(self, val):
        return _odb.dbTechLayerSpacingRule_setSpacingEndOfNotchWidthValid(self, val)

    def hasSpacingNotchLength(self):
        return _odb.dbTechLayerSpacingRule_hasSpacingNotchLength(self)

    def hasSpacingEndOfNotchWidth(self):
        return _odb.dbTechLayerSpacingRule_hasSpacingEndOfNotchWidth(self)

    def hasRange(self):
        return _odb.dbTechLayerSpacingRule_hasRange(self)

    def hasLengthThreshold(self):
        return _odb.dbTechLayerSpacingRule_hasLengthThreshold(self)

    def hasUseLengthThreshold(self):
        return _odb.dbTechLayerSpacingRule_hasUseLengthThreshold(self)

    def getInfluence(self, influence):
        return _odb.dbTechLayerSpacingRule_getInfluence(self, influence)

    def getInfluenceRange(self, rmin, rmax):
        return _odb.dbTechLayerSpacingRule_getInfluenceRange(self, rmin, rmax)

    def getRangeRange(self, rmin, rmax):
        return _odb.dbTechLayerSpacingRule_getRangeRange(self, rmin, rmax)

    def getAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet):
        return _odb.dbTechLayerSpacingRule_getAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet)

    def getCutLayer4Spacing(self, outly):
        return _odb.dbTechLayerSpacingRule_getCutLayer4Spacing(self, outly)

    def getCutStacking(self):
        return _odb.dbTechLayerSpacingRule_getCutStacking(self)

    def getCutCenterToCenter(self):
        return _odb.dbTechLayerSpacingRule_getCutCenterToCenter(self)

    def getCutSameNet(self):
        return _odb.dbTechLayerSpacingRule_getCutSameNet(self)

    def getCutParallelOverlap(self):
        return _odb.dbTechLayerSpacingRule_getCutParallelOverlap(self)

    def getCutArea(self):
        return _odb.dbTechLayerSpacingRule_getCutArea(self)

    def writeLef(self, writer):
        return _odb.dbTechLayerSpacingRule_writeLef(self, writer)

    def setSameNetPgOnly(self, pgonly):
        return _odb.dbTechLayerSpacingRule_setSameNetPgOnly(self, pgonly)

    def getSameNetPgOnly(self):
        return _odb.dbTechLayerSpacingRule_getSameNetPgOnly(self)

    def setLengthThreshold(self, threshold):
        return _odb.dbTechLayerSpacingRule_setLengthThreshold(self, threshold)

    def setSpacing(self, spacing):
        return _odb.dbTechLayerSpacingRule_setSpacing(self, spacing)

    def setLengthThresholdRange(self, rmin, rmax):
        return _odb.dbTechLayerSpacingRule_setLengthThresholdRange(self, rmin, rmax)

    def setRange(self, rmin, rmax):
        return _odb.dbTechLayerSpacingRule_setRange(self, rmin, rmax)

    def setUseLengthThreshold(self):
        return _odb.dbTechLayerSpacingRule_setUseLengthThreshold(self)

    def setInfluence(self, influence):
        return _odb.dbTechLayerSpacingRule_setInfluence(self, influence)

    def setInfluenceRange(self, rmin, rmax):
        return _odb.dbTechLayerSpacingRule_setInfluenceRange(self, rmin, rmax)

    def setRangeRange(self, rmin, rmax):
        return _odb.dbTechLayerSpacingRule_setRangeRange(self, rmin, rmax)

    def setAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet):
        return _odb.dbTechLayerSpacingRule_setAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet)

    def setCutLayer4Spacing(self, cutly):
        return _odb.dbTechLayerSpacingRule_setCutLayer4Spacing(self, cutly)

    def setCutStacking(self, stacking):
        return _odb.dbTechLayerSpacingRule_setCutStacking(self, stacking)

    def setCutCenterToCenter(self, c2c):
        return _odb.dbTechLayerSpacingRule_setCutCenterToCenter(self, c2c)

    def setCutSameNet(self, same_net):
        return _odb.dbTechLayerSpacingRule_setCutSameNet(self, same_net)

    def setCutParallelOverlap(self, overlap):
        return _odb.dbTechLayerSpacingRule_setCutParallelOverlap(self, overlap)

    def setCutArea(self, area):
        return _odb.dbTechLayerSpacingRule_setCutArea(self, area)

    def setEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges):
        return _odb.dbTechLayerSpacingRule_setEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges)

    def getEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges):
        return _odb.dbTechLayerSpacingRule_getEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges)

    @staticmethod
    def create(inly):
        return _odb.dbTechLayerSpacingRule_create(inly)

    @staticmethod
    def getTechLayerSpacingRule(inly, dbid):
        return _odb.dbTechLayerSpacingRule_getTechLayerSpacingRule(inly, dbid)

    def __init__(self):
        _odb.dbTechLayerSpacingRule_swiginit(self, _odb.new_dbTechLayerSpacingRule())
    __swig_destroy__ = _odb.delete_dbTechLayerSpacingRule

# Register dbTechLayerSpacingRule in _odb:
_odb.dbTechLayerSpacingRule_swigregister(dbTechLayerSpacingRule)

def dbTechLayerSpacingRule_create(inly):
    return _odb.dbTechLayerSpacingRule_create(inly)

def dbTechLayerSpacingRule_getTechLayerSpacingRule(inly, dbid):
    return _odb.dbTechLayerSpacingRule_getTechLayerSpacingRule(inly, dbid)

class dbTechMinCutRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMinimumCuts(self, numcuts, width):
        return _odb.dbTechMinCutRule_getMinimumCuts(self, numcuts, width)

    def setMinimumCuts(self, numcuts, width, above_only, below_only):
        return _odb.dbTechMinCutRule_setMinimumCuts(self, numcuts, width, above_only, below_only)

    def getCutDistance(self, cut_distance):
        return _odb.dbTechMinCutRule_getCutDistance(self, cut_distance)

    def setCutDistance(self, cut_distance):
        return _odb.dbTechMinCutRule_setCutDistance(self, cut_distance)

    def getLengthForCuts(self, length, distance):
        return _odb.dbTechMinCutRule_getLengthForCuts(self, length, distance)

    def setLengthForCuts(self, length, distance):
        return _odb.dbTechMinCutRule_setLengthForCuts(self, length, distance)

    def isAboveOnly(self):
        return _odb.dbTechMinCutRule_isAboveOnly(self)

    def isBelowOnly(self):
        return _odb.dbTechMinCutRule_isBelowOnly(self)

    def writeLef(self, writer):
        return _odb.dbTechMinCutRule_writeLef(self, writer)

    @staticmethod
    def create(inly):
        return _odb.dbTechMinCutRule_create(inly)

    @staticmethod
    def getMinCutRule(inly, dbid):
        return _odb.dbTechMinCutRule_getMinCutRule(inly, dbid)

    def __init__(self):
        _odb.dbTechMinCutRule_swiginit(self, _odb.new_dbTechMinCutRule())
    __swig_destroy__ = _odb.delete_dbTechMinCutRule

# Register dbTechMinCutRule in _odb:
_odb.dbTechMinCutRule_swigregister(dbTechMinCutRule)

def dbTechMinCutRule_create(inly):
    return _odb.dbTechMinCutRule_create(inly)

def dbTechMinCutRule_getMinCutRule(inly, dbid):
    return _odb.dbTechMinCutRule_getMinCutRule(inly, dbid)

class dbTechMinEncRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getEnclosure(self, area):
        return _odb.dbTechMinEncRule_getEnclosure(self, area)

    def setEnclosure(self, area):
        return _odb.dbTechMinEncRule_setEnclosure(self, area)

    def getEnclosureWidth(self, width):
        return _odb.dbTechMinEncRule_getEnclosureWidth(self, width)

    def setEnclosureWidth(self, width):
        return _odb.dbTechMinEncRule_setEnclosureWidth(self, width)

    def writeLef(self, writer):
        return _odb.dbTechMinEncRule_writeLef(self, writer)

    @staticmethod
    def create(inly):
        return _odb.dbTechMinEncRule_create(inly)

    @staticmethod
    def getMinEncRule(inly, dbid):
        return _odb.dbTechMinEncRule_getMinEncRule(inly, dbid)

    def __init__(self):
        _odb.dbTechMinEncRule_swiginit(self, _odb.new_dbTechMinEncRule())
    __swig_destroy__ = _odb.delete_dbTechMinEncRule

# Register dbTechMinEncRule in _odb:
_odb.dbTechMinEncRule_swigregister(dbTechMinEncRule)

def dbTechMinEncRule_create(inly):
    return _odb.dbTechMinEncRule_create(inly)

def dbTechMinEncRule_getMinEncRule(inly, dbid):
    return _odb.dbTechMinEncRule_getMinEncRule(inly, dbid)

class dbTechV55InfluenceEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setV55InfluenceEntry(self, width, within, spacing):
        return _odb.dbTechV55InfluenceEntry_setV55InfluenceEntry(self, width, within, spacing)

    def writeLef(self, writer):
        return _odb.dbTechV55InfluenceEntry_writeLef(self, writer)

    @staticmethod
    def create(inly):
        return _odb.dbTechV55InfluenceEntry_create(inly)

    @staticmethod
    def getV55InfluenceEntry(*args):
        return _odb.dbTechV55InfluenceEntry_getV55InfluenceEntry(*args)

    def __init__(self):
        _odb.dbTechV55InfluenceEntry_swiginit(self, _odb.new_dbTechV55InfluenceEntry())
    __swig_destroy__ = _odb.delete_dbTechV55InfluenceEntry

# Register dbTechV55InfluenceEntry in _odb:
_odb.dbTechV55InfluenceEntry_swigregister(dbTechV55InfluenceEntry)

def dbTechV55InfluenceEntry_create(inly):
    return _odb.dbTechV55InfluenceEntry_create(inly)

def dbTechV55InfluenceEntry_getV55InfluenceEntry(*args):
    return _odb.dbTechV55InfluenceEntry_getV55InfluenceEntry(*args)

class dbTechLayerAntennaRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isValid(self):
        return _odb.dbTechLayerAntennaRule_isValid(self)

    def writeLef(self, writer):
        return _odb.dbTechLayerAntennaRule_writeLef(self, writer)

    def setGatePlusDiffFactor(self, factor):
        return _odb.dbTechLayerAntennaRule_setGatePlusDiffFactor(self, factor)

    def setAreaMinusDiffFactor(self, factor):
        return _odb.dbTechLayerAntennaRule_setAreaMinusDiffFactor(self, factor)

    def setAreaFactor(self, factor, diffuse=False):
        return _odb.dbTechLayerAntennaRule_setAreaFactor(self, factor, diffuse)

    def setSideAreaFactor(self, factor, diffuse=False):
        return _odb.dbTechLayerAntennaRule_setSideAreaFactor(self, factor, diffuse)

    def hasAreaFactor(self):
        return _odb.dbTechLayerAntennaRule_hasAreaFactor(self)

    def hasSideAreaFactor(self):
        return _odb.dbTechLayerAntennaRule_hasSideAreaFactor(self)

    def getAreaFactor(self):
        return _odb.dbTechLayerAntennaRule_getAreaFactor(self)

    def getSideAreaFactor(self):
        return _odb.dbTechLayerAntennaRule_getSideAreaFactor(self)

    def isAreaFactorDiffUseOnly(self):
        return _odb.dbTechLayerAntennaRule_isAreaFactorDiffUseOnly(self)

    def isSideAreaFactorDiffUseOnly(self):
        return _odb.dbTechLayerAntennaRule_isSideAreaFactorDiffUseOnly(self)

    def hasAntennaCumRoutingPlusCut(self):
        return _odb.dbTechLayerAntennaRule_hasAntennaCumRoutingPlusCut(self)

    def setAntennaCumRoutingPlusCut(self, value=True):
        return _odb.dbTechLayerAntennaRule_setAntennaCumRoutingPlusCut(self, value)

    def getPAR(self):
        return _odb.dbTechLayerAntennaRule_getPAR(self)

    def getCAR(self):
        return _odb.dbTechLayerAntennaRule_getCAR(self)

    def getPSR(self):
        return _odb.dbTechLayerAntennaRule_getPSR(self)

    def getCSR(self):
        return _odb.dbTechLayerAntennaRule_getCSR(self)

    def getGatePlusDiffFactor(self):
        return _odb.dbTechLayerAntennaRule_getGatePlusDiffFactor(self)

    def getAreaMinusDiffFactor(self):
        return _odb.dbTechLayerAntennaRule_getAreaMinusDiffFactor(self)

    def setPAR(self, ratio):
        return _odb.dbTechLayerAntennaRule_setPAR(self, ratio)

    def setCAR(self, ratio):
        return _odb.dbTechLayerAntennaRule_setCAR(self, ratio)

    def setPSR(self, ratio):
        return _odb.dbTechLayerAntennaRule_setPSR(self, ratio)

    def setCSR(self, ratio):
        return _odb.dbTechLayerAntennaRule_setCSR(self, ratio)

    def setDiffPAR(self, *args):
        return _odb.dbTechLayerAntennaRule_setDiffPAR(self, *args)

    def setDiffCAR(self, *args):
        return _odb.dbTechLayerAntennaRule_setDiffCAR(self, *args)

    def setDiffPSR(self, *args):
        return _odb.dbTechLayerAntennaRule_setDiffPSR(self, *args)

    def setDiffCSR(self, *args):
        return _odb.dbTechLayerAntennaRule_setDiffCSR(self, *args)

    def setAreaDiffReduce(self, areas, factors):
        return _odb.dbTechLayerAntennaRule_setAreaDiffReduce(self, areas, factors)

    @staticmethod
    def getAntennaRule(inly, dbid):
        return _odb.dbTechLayerAntennaRule_getAntennaRule(inly, dbid)

    def __init__(self):
        _odb.dbTechLayerAntennaRule_swiginit(self, _odb.new_dbTechLayerAntennaRule())
    __swig_destroy__ = _odb.delete_dbTechLayerAntennaRule

# Register dbTechLayerAntennaRule in _odb:
_odb.dbTechLayerAntennaRule_swigregister(dbTechLayerAntennaRule)

def dbTechLayerAntennaRule_getAntennaRule(inly, dbid):
    return _odb.dbTechLayerAntennaRule_getAntennaRule(inly, dbid)

class dbTechAntennaPinModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addGateAreaEntry(self, inval, refly=None):
        return _odb.dbTechAntennaPinModel_addGateAreaEntry(self, inval, refly)

    def addMaxAreaCAREntry(self, inval, refly=None):
        return _odb.dbTechAntennaPinModel_addMaxAreaCAREntry(self, inval, refly)

    def addMaxSideAreaCAREntry(self, inval, refly=None):
        return _odb.dbTechAntennaPinModel_addMaxSideAreaCAREntry(self, inval, refly)

    def addMaxCutCAREntry(self, inval, refly=None):
        return _odb.dbTechAntennaPinModel_addMaxCutCAREntry(self, inval, refly)

    def getGateArea(self):
        return _odb.dbTechAntennaPinModel_getGateArea(self)

    def getMaxAreaCAR(self):
        return _odb.dbTechAntennaPinModel_getMaxAreaCAR(self)

    def getMaxSideAreaCAR(self):
        return _odb.dbTechAntennaPinModel_getMaxSideAreaCAR(self)

    def getMaxCutCAR(self):
        return _odb.dbTechAntennaPinModel_getMaxCutCAR(self)

    def writeLef(self, tech, writer):
        return _odb.dbTechAntennaPinModel_writeLef(self, tech, writer)

    @staticmethod
    def getAntennaPinModel(master, dbid):
        return _odb.dbTechAntennaPinModel_getAntennaPinModel(master, dbid)

    def __init__(self):
        _odb.dbTechAntennaPinModel_swiginit(self, _odb.new_dbTechAntennaPinModel())
    __swig_destroy__ = _odb.delete_dbTechAntennaPinModel

# Register dbTechAntennaPinModel in _odb:
_odb.dbTechAntennaPinModel_swigregister(dbTechAntennaPinModel)

def dbTechAntennaPinModel_getAntennaPinModel(master, dbid):
    return _odb.dbTechAntennaPinModel_getAntennaPinModel(master, dbid)

class dbTechNonDefaultRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbTechNonDefaultRule_getName(self)

    def getConstName(self):
        return _odb.dbTechNonDefaultRule_getConstName(self)

    def isBlockRule(self):
        return _odb.dbTechNonDefaultRule_isBlockRule(self)

    def getLayerRule(self, layer):
        return _odb.dbTechNonDefaultRule_getLayerRule(self, layer)

    def getLayerRules(self, layer_rules):
        return _odb.dbTechNonDefaultRule_getLayerRules(self, layer_rules)

    def getVias(self, vias):
        return _odb.dbTechNonDefaultRule_getVias(self, vias)

    def findSameNetRule(self, l1, l2):
        return _odb.dbTechNonDefaultRule_findSameNetRule(self, l1, l2)

    def getSameNetRules(self, rules):
        return _odb.dbTechNonDefaultRule_getSameNetRules(self, rules)

    def getHardSpacing(self):
        return _odb.dbTechNonDefaultRule_getHardSpacing(self)

    def setHardSpacing(self, value):
        return _odb.dbTechNonDefaultRule_setHardSpacing(self, value)

    def addUseVia(self, via):
        return _odb.dbTechNonDefaultRule_addUseVia(self, via)

    def getUseVias(self, vias):
        return _odb.dbTechNonDefaultRule_getUseVias(self, vias)

    def addUseViaRule(self, rule):
        return _odb.dbTechNonDefaultRule_addUseViaRule(self, rule)

    def getUseViaRules(self, rules):
        return _odb.dbTechNonDefaultRule_getUseViaRules(self, rules)

    def setMinCuts(self, cut_layer, count):
        return _odb.dbTechNonDefaultRule_setMinCuts(self, cut_layer, count)

    def getMinCuts(self, cut_layer, count):
        return _odb.dbTechNonDefaultRule_getMinCuts(self, cut_layer, count)

    @staticmethod
    def create(*args):
        return _odb.dbTechNonDefaultRule_create(*args)

    @staticmethod
    def getTechNonDefaultRule(*args):
        return _odb.dbTechNonDefaultRule_getTechNonDefaultRule(*args)

    def __init__(self):
        _odb.dbTechNonDefaultRule_swiginit(self, _odb.new_dbTechNonDefaultRule())
    __swig_destroy__ = _odb.delete_dbTechNonDefaultRule

# Register dbTechNonDefaultRule in _odb:
_odb.dbTechNonDefaultRule_swigregister(dbTechNonDefaultRule)

def dbTechNonDefaultRule_create(*args):
    return _odb.dbTechNonDefaultRule_create(*args)

def dbTechNonDefaultRule_getTechNonDefaultRule(*args):
    return _odb.dbTechNonDefaultRule_getTechNonDefaultRule(*args)

class dbTechLayerRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLayer(self):
        return _odb.dbTechLayerRule_getLayer(self)

    def isBlockRule(self):
        return _odb.dbTechLayerRule_isBlockRule(self)

    def getNonDefaultRule(self):
        return _odb.dbTechLayerRule_getNonDefaultRule(self)

    def getWidth(self):
        return _odb.dbTechLayerRule_getWidth(self)

    def setWidth(self, width):
        return _odb.dbTechLayerRule_setWidth(self, width)

    def getSpacing(self):
        return _odb.dbTechLayerRule_getSpacing(self)

    def setSpacing(self, spacing):
        return _odb.dbTechLayerRule_setSpacing(self, spacing)

    def getResistance(self):
        return _odb.dbTechLayerRule_getResistance(self)

    def setResistance(self, res):
        return _odb.dbTechLayerRule_setResistance(self, res)

    def getCapacitance(self):
        return _odb.dbTechLayerRule_getCapacitance(self)

    def setCapacitance(self, cap):
        return _odb.dbTechLayerRule_setCapacitance(self, cap)

    def getEdgeCapacitance(self):
        return _odb.dbTechLayerRule_getEdgeCapacitance(self)

    def setEdgeCapacitance(self, cap):
        return _odb.dbTechLayerRule_setEdgeCapacitance(self, cap)

    def getWireExtension(self):
        return _odb.dbTechLayerRule_getWireExtension(self)

    def setWireExtension(self, ext):
        return _odb.dbTechLayerRule_setWireExtension(self, ext)

    @staticmethod
    def create(rule, layer):
        return _odb.dbTechLayerRule_create(rule, layer)

    @staticmethod
    def getTechLayerRule(*args):
        return _odb.dbTechLayerRule_getTechLayerRule(*args)

    def __init__(self):
        _odb.dbTechLayerRule_swiginit(self, _odb.new_dbTechLayerRule())
    __swig_destroy__ = _odb.delete_dbTechLayerRule

# Register dbTechLayerRule in _odb:
_odb.dbTechLayerRule_swigregister(dbTechLayerRule)

def dbTechLayerRule_create(rule, layer):
    return _odb.dbTechLayerRule_create(rule, layer)

def dbTechLayerRule_getTechLayerRule(*args):
    return _odb.dbTechLayerRule_getTechLayerRule(*args)

class dbTechSameNetRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLayer1(self):
        return _odb.dbTechSameNetRule_getLayer1(self)

    def getLayer2(self):
        return _odb.dbTechSameNetRule_getLayer2(self)

    def getSpacing(self):
        return _odb.dbTechSameNetRule_getSpacing(self)

    def setSpacing(self, spacing):
        return _odb.dbTechSameNetRule_setSpacing(self, spacing)

    def setAllowStackedVias(self, value):
        return _odb.dbTechSameNetRule_setAllowStackedVias(self, value)

    def getAllowStackedVias(self):
        return _odb.dbTechSameNetRule_getAllowStackedVias(self)

    @staticmethod
    def create(*args):
        return _odb.dbTechSameNetRule_create(*args)

    @staticmethod
    def getTechSameNetRule(tech, oid):
        return _odb.dbTechSameNetRule_getTechSameNetRule(tech, oid)

    def __init__(self):
        _odb.dbTechSameNetRule_swiginit(self, _odb.new_dbTechSameNetRule())
    __swig_destroy__ = _odb.delete_dbTechSameNetRule

# Register dbTechSameNetRule in _odb:
_odb.dbTechSameNetRule_swigregister(dbTechSameNetRule)

def dbTechSameNetRule_create(*args):
    return _odb.dbTechSameNetRule_create(*args)

def dbTechSameNetRule_getTechSameNetRule(tech, oid):
    return _odb.dbTechSameNetRule_getTechSameNetRule(tech, oid)

class dbViaParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _odb.dbViaParams_swiginit(self, _odb.new_dbViaParams(*args))
    __swig_destroy__ = _odb.delete_dbViaParams

    def getXCutSize(self):
        return _odb.dbViaParams_getXCutSize(self)

    def getYCutSize(self):
        return _odb.dbViaParams_getYCutSize(self)

    def getXCutSpacing(self):
        return _odb.dbViaParams_getXCutSpacing(self)

    def getYCutSpacing(self):
        return _odb.dbViaParams_getYCutSpacing(self)

    def getXTopEnclosure(self):
        return _odb.dbViaParams_getXTopEnclosure(self)

    def getYTopEnclosure(self):
        return _odb.dbViaParams_getYTopEnclosure(self)

    def getXBottomEnclosure(self):
        return _odb.dbViaParams_getXBottomEnclosure(self)

    def getYBottomEnclosure(self):
        return _odb.dbViaParams_getYBottomEnclosure(self)

    def getNumCutRows(self):
        return _odb.dbViaParams_getNumCutRows(self)

    def getNumCutCols(self):
        return _odb.dbViaParams_getNumCutCols(self)

    def getXOrigin(self):
        return _odb.dbViaParams_getXOrigin(self)

    def getYOrigin(self):
        return _odb.dbViaParams_getYOrigin(self)

    def getXTopOffset(self):
        return _odb.dbViaParams_getXTopOffset(self)

    def getYTopOffset(self):
        return _odb.dbViaParams_getYTopOffset(self)

    def getXBottomOffset(self):
        return _odb.dbViaParams_getXBottomOffset(self)

    def getYBottomOffset(self):
        return _odb.dbViaParams_getYBottomOffset(self)

    def getTopLayer(self):
        return _odb.dbViaParams_getTopLayer(self)

    def getCutLayer(self):
        return _odb.dbViaParams_getCutLayer(self)

    def getBottomLayer(self):
        return _odb.dbViaParams_getBottomLayer(self)

    def setXCutSize(self, value):
        return _odb.dbViaParams_setXCutSize(self, value)

    def setYCutSize(self, value):
        return _odb.dbViaParams_setYCutSize(self, value)

    def setXCutSpacing(self, value):
        return _odb.dbViaParams_setXCutSpacing(self, value)

    def setYCutSpacing(self, value):
        return _odb.dbViaParams_setYCutSpacing(self, value)

    def setXTopEnclosure(self, value):
        return _odb.dbViaParams_setXTopEnclosure(self, value)

    def setYTopEnclosure(self, value):
        return _odb.dbViaParams_setYTopEnclosure(self, value)

    def setXBottomEnclosure(self, value):
        return _odb.dbViaParams_setXBottomEnclosure(self, value)

    def setYBottomEnclosure(self, value):
        return _odb.dbViaParams_setYBottomEnclosure(self, value)

    def setNumCutRows(self, value):
        return _odb.dbViaParams_setNumCutRows(self, value)

    def setNumCutCols(self, value):
        return _odb.dbViaParams_setNumCutCols(self, value)

    def setXOrigin(self, value):
        return _odb.dbViaParams_setXOrigin(self, value)

    def setYOrigin(self, value):
        return _odb.dbViaParams_setYOrigin(self, value)

    def setXTopOffset(self, value):
        return _odb.dbViaParams_setXTopOffset(self, value)

    def setYTopOffset(self, value):
        return _odb.dbViaParams_setYTopOffset(self, value)

    def setXBottomOffset(self, value):
        return _odb.dbViaParams_setXBottomOffset(self, value)

    def setYBottomOffset(self, value):
        return _odb.dbViaParams_setYBottomOffset(self, value)

    def setTopLayer(self, layer):
        return _odb.dbViaParams_setTopLayer(self, layer)

    def setCutLayer(self, layer):
        return _odb.dbViaParams_setCutLayer(self, layer)

    def setBottomLayer(self, layer):
        return _odb.dbViaParams_setBottomLayer(self, layer)

# Register dbViaParams in _odb:
_odb.dbViaParams_swigregister(dbViaParams)
class dbAccessPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setPoint(self, point):
        return _odb.dbAccessPoint_setPoint(self, point)

    def getPoint(self):
        return _odb.dbAccessPoint_getPoint(self)

    def setLayer(self, layer):
        return _odb.dbAccessPoint_setLayer(self, layer)

    def setAccesses(self, accesses):
        return _odb.dbAccessPoint_setAccesses(self, accesses)

    def getAccesses(self, tbl):
        return _odb.dbAccessPoint_getAccesses(self, tbl)

    def setLowType(self, type_low):
        return _odb.dbAccessPoint_setLowType(self, type_low)

    def getLowType(self):
        return _odb.dbAccessPoint_getLowType(self)

    def setHighType(self, type_high):
        return _odb.dbAccessPoint_setHighType(self, type_high)

    def getHighType(self):
        return _odb.dbAccessPoint_getHighType(self)

    def setAccess(self, access, dir):
        return _odb.dbAccessPoint_setAccess(self, access, dir)

    def hasAccess(self, *args):
        return _odb.dbAccessPoint_hasAccess(self, *args)

    def getLayer(self):
        return _odb.dbAccessPoint_getLayer(self)

    def getMPin(self):
        return _odb.dbAccessPoint_getMPin(self)

    def getBPin(self):
        return _odb.dbAccessPoint_getBPin(self)

    def getVias(self):
        return _odb.dbAccessPoint_getVias(self)

    def addTechVia(self, num_cuts, via):
        return _odb.dbAccessPoint_addTechVia(self, num_cuts, via)

    def addBlockVia(self, num_cuts, via):
        return _odb.dbAccessPoint_addBlockVia(self, num_cuts, via)

    def addSegment(self, segment, begin_style_trunc, end_style_trunc):
        return _odb.dbAccessPoint_addSegment(self, segment, begin_style_trunc, end_style_trunc)

    def getSegments(self):
        return _odb.dbAccessPoint_getSegments(self)

    @staticmethod
    def create(*args):
        return _odb.dbAccessPoint_create(*args)

    @staticmethod
    def getAccessPoint(block, dbid):
        return _odb.dbAccessPoint_getAccessPoint(block, dbid)

    @staticmethod
    def destroy(ap):
        return _odb.dbAccessPoint_destroy(ap)

    def __init__(self):
        _odb.dbAccessPoint_swiginit(self, _odb.new_dbAccessPoint())
    __swig_destroy__ = _odb.delete_dbAccessPoint

# Register dbAccessPoint in _odb:
_odb.dbAccessPoint_swigregister(dbAccessPoint)

def dbAccessPoint_create(*args):
    return _odb.dbAccessPoint_create(*args)

def dbAccessPoint_getAccessPoint(block, dbid):
    return _odb.dbAccessPoint_getAccessPoint(block, dbid)

def dbAccessPoint_destroy(ap):
    return _odb.dbAccessPoint_destroy(ap)

class dbBusPort(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getFrom(self):
        return _odb.dbBusPort_getFrom(self)

    def getTo(self):
        return _odb.dbBusPort_getTo(self)

    def getPort(self):
        return _odb.dbBusPort_getPort(self)

    def setMembers(self, members):
        return _odb.dbBusPort_setMembers(self, members)

    def getMembers(self):
        return _odb.dbBusPort_getMembers(self)

    def setLast(self, last):
        return _odb.dbBusPort_setLast(self, last)

    def getLast(self):
        return _odb.dbBusPort_getLast(self)

    def getParent(self):
        return _odb.dbBusPort_getParent(self)

    def getBusIndexedElement(self, index):
        return _odb.dbBusPort_getBusIndexedElement(self, index)

    def getBusPortMembers(self):
        return _odb.dbBusPort_getBusPortMembers(self)

    def getSize(self):
        return _odb.dbBusPort_getSize(self)

    def getUpdown(self):
        return _odb.dbBusPort_getUpdown(self)

    @staticmethod
    def create(parentModule, port, from_ix, to_ix):
        return _odb.dbBusPort_create(parentModule, port, from_ix, to_ix)

    def __init__(self):
        _odb.dbBusPort_swiginit(self, _odb.new_dbBusPort())
    __swig_destroy__ = _odb.delete_dbBusPort

# Register dbBusPort in _odb:
_odb.dbBusPort_swigregister(dbBusPort)

def dbBusPort_create(parentModule, port, from_ix, to_ix):
    return _odb.dbBusPort_create(parentModule, port, from_ix, to_ix)

class dbCellEdgeSpacing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setFirstEdgeType(self, first_edge_type):
        return _odb.dbCellEdgeSpacing_setFirstEdgeType(self, first_edge_type)

    def getFirstEdgeType(self):
        return _odb.dbCellEdgeSpacing_getFirstEdgeType(self)

    def setSecondEdgeType(self, second_edge_type):
        return _odb.dbCellEdgeSpacing_setSecondEdgeType(self, second_edge_type)

    def getSecondEdgeType(self):
        return _odb.dbCellEdgeSpacing_getSecondEdgeType(self)

    def setSpacing(self, spacing):
        return _odb.dbCellEdgeSpacing_setSpacing(self, spacing)

    def getSpacing(self):
        return _odb.dbCellEdgeSpacing_getSpacing(self)

    def setExceptAbutted(self, except_abutted):
        return _odb.dbCellEdgeSpacing_setExceptAbutted(self, except_abutted)

    def isExceptAbutted(self):
        return _odb.dbCellEdgeSpacing_isExceptAbutted(self)

    def setExceptNonFillerInBetween(self, except_non_filler_in_between):
        return _odb.dbCellEdgeSpacing_setExceptNonFillerInBetween(self, except_non_filler_in_between)

    def isExceptNonFillerInBetween(self):
        return _odb.dbCellEdgeSpacing_isExceptNonFillerInBetween(self)

    def setOptional(self, optional):
        return _odb.dbCellEdgeSpacing_setOptional(self, optional)

    def isOptional(self):
        return _odb.dbCellEdgeSpacing_isOptional(self)

    def setSoft(self, soft):
        return _odb.dbCellEdgeSpacing_setSoft(self, soft)

    def isSoft(self):
        return _odb.dbCellEdgeSpacing_isSoft(self)

    def setExact(self, exact):
        return _odb.dbCellEdgeSpacing_setExact(self, exact)

    def isExact(self):
        return _odb.dbCellEdgeSpacing_isExact(self)

    @staticmethod
    def create(arg1):
        return _odb.dbCellEdgeSpacing_create(arg1)

    @staticmethod
    def destroy(arg1):
        return _odb.dbCellEdgeSpacing_destroy(arg1)

    def __init__(self):
        _odb.dbCellEdgeSpacing_swiginit(self, _odb.new_dbCellEdgeSpacing())
    __swig_destroy__ = _odb.delete_dbCellEdgeSpacing

# Register dbCellEdgeSpacing in _odb:
_odb.dbCellEdgeSpacing_swigregister(dbCellEdgeSpacing)

def dbCellEdgeSpacing_create(arg1):
    return _odb.dbCellEdgeSpacing_create(arg1)

def dbCellEdgeSpacing_destroy(arg1):
    return _odb.dbCellEdgeSpacing_destroy(arg1)

class dbChip(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ChipType_DIE = _odb.dbChip_ChipType_DIE
    ChipType_RDL = _odb.dbChip_ChipType_RDL
    ChipType_IP = _odb.dbChip_ChipType_IP
    ChipType_SUBSTRATE = _odb.dbChip_ChipType_SUBSTRATE
    ChipType_HIER = _odb.dbChip_ChipType_HIER

    def getName(self):
        return _odb.dbChip_getName(self)

    def setOffset(self, offset):
        return _odb.dbChip_setOffset(self, offset)

    def getOffset(self):
        return _odb.dbChip_getOffset(self)

    def setWidth(self, width):
        return _odb.dbChip_setWidth(self, width)

    def getWidth(self):
        return _odb.dbChip_getWidth(self)

    def setHeight(self, height):
        return _odb.dbChip_setHeight(self, height)

    def getHeight(self):
        return _odb.dbChip_getHeight(self)

    def setThickness(self, thickness):
        return _odb.dbChip_setThickness(self, thickness)

    def getThickness(self):
        return _odb.dbChip_getThickness(self)

    def setShrink(self, shrink):
        return _odb.dbChip_setShrink(self, shrink)

    def getShrink(self):
        return _odb.dbChip_getShrink(self)

    def setSealRingEast(self, seal_ring_east):
        return _odb.dbChip_setSealRingEast(self, seal_ring_east)

    def getSealRingEast(self):
        return _odb.dbChip_getSealRingEast(self)

    def setSealRingWest(self, seal_ring_west):
        return _odb.dbChip_setSealRingWest(self, seal_ring_west)

    def getSealRingWest(self):
        return _odb.dbChip_getSealRingWest(self)

    def setSealRingNorth(self, seal_ring_north):
        return _odb.dbChip_setSealRingNorth(self, seal_ring_north)

    def getSealRingNorth(self):
        return _odb.dbChip_getSealRingNorth(self)

    def setSealRingSouth(self, seal_ring_south):
        return _odb.dbChip_setSealRingSouth(self, seal_ring_south)

    def getSealRingSouth(self):
        return _odb.dbChip_getSealRingSouth(self)

    def setScribeLineEast(self, scribe_line_east):
        return _odb.dbChip_setScribeLineEast(self, scribe_line_east)

    def getScribeLineEast(self):
        return _odb.dbChip_getScribeLineEast(self)

    def setScribeLineWest(self, scribe_line_west):
        return _odb.dbChip_setScribeLineWest(self, scribe_line_west)

    def getScribeLineWest(self):
        return _odb.dbChip_getScribeLineWest(self)

    def setScribeLineNorth(self, scribe_line_north):
        return _odb.dbChip_setScribeLineNorth(self, scribe_line_north)

    def getScribeLineNorth(self):
        return _odb.dbChip_getScribeLineNorth(self)

    def setScribeLineSouth(self, scribe_line_south):
        return _odb.dbChip_setScribeLineSouth(self, scribe_line_south)

    def getScribeLineSouth(self):
        return _odb.dbChip_getScribeLineSouth(self)

    def setTsv(self, tsv):
        return _odb.dbChip_setTsv(self, tsv)

    def isTsv(self):
        return _odb.dbChip_isTsv(self)

    def getChipRegions(self):
        return _odb.dbChip_getChipRegions(self)

    def getChipType(self):
        return _odb.dbChip_getChipType(self)

    def getBlock(self):
        return _odb.dbChip_getBlock(self)

    def getChipInsts(self):
        return _odb.dbChip_getChipInsts(self)

    def getChipConns(self):
        return _odb.dbChip_getChipConns(self)

    def getChipNets(self):
        return _odb.dbChip_getChipNets(self)

    def findChipInst(self, name):
        return _odb.dbChip_findChipInst(self, name)

    def findChipRegion(self, name):
        return _odb.dbChip_findChipRegion(self, name)

    def getTech(self):
        return _odb.dbChip_getTech(self)

    @staticmethod
    def create(*args):
        return _odb.dbChip_create(*args)

    @staticmethod
    def getChip(db, oid):
        return _odb.dbChip_getChip(db, oid)

    @staticmethod
    def destroy(chip):
        return _odb.dbChip_destroy(chip)

    def __init__(self):
        _odb.dbChip_swiginit(self, _odb.new_dbChip())
    __swig_destroy__ = _odb.delete_dbChip

# Register dbChip in _odb:
_odb.dbChip_swigregister(dbChip)

def dbChip_create(*args):
    return _odb.dbChip_create(*args)

def dbChip_getChip(db, oid):
    return _odb.dbChip_getChip(db, oid)

def dbChip_destroy(chip):
    return _odb.dbChip_destroy(chip)

class dbChipBump(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getChip(self):
        return _odb.dbChipBump_getChip(self)

    def getChipRegion(self):
        return _odb.dbChipBump_getChipRegion(self)

    def getInst(self):
        return _odb.dbChipBump_getInst(self)

    def getNet(self):
        return _odb.dbChipBump_getNet(self)

    def getBTerm(self):
        return _odb.dbChipBump_getBTerm(self)

    def setNet(self, net):
        return _odb.dbChipBump_setNet(self, net)

    def setBTerm(self, bterm):
        return _odb.dbChipBump_setBTerm(self, bterm)

    @staticmethod
    def create(chip_region, inst):
        return _odb.dbChipBump_create(chip_region, inst)

    def __init__(self):
        _odb.dbChipBump_swiginit(self, _odb.new_dbChipBump())
    __swig_destroy__ = _odb.delete_dbChipBump

# Register dbChipBump in _odb:
_odb.dbChipBump_swigregister(dbChipBump)

def dbChipBump_create(chip_region, inst):
    return _odb.dbChipBump_create(chip_region, inst)

class dbChipBumpInst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getChipBump(self):
        return _odb.dbChipBumpInst_getChipBump(self)

    def getChipRegionInst(self):
        return _odb.dbChipBumpInst_getChipRegionInst(self)

    def __init__(self):
        _odb.dbChipBumpInst_swiginit(self, _odb.new_dbChipBumpInst())
    __swig_destroy__ = _odb.delete_dbChipBumpInst

# Register dbChipBumpInst in _odb:
_odb.dbChipBumpInst_swigregister(dbChipBumpInst)
class dbChipConn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbChipConn_getName(self)

    def setThickness(self, thickness):
        return _odb.dbChipConn_setThickness(self, thickness)

    def getThickness(self):
        return _odb.dbChipConn_getThickness(self)

    def getParentChip(self):
        return _odb.dbChipConn_getParentChip(self)

    def getTopRegion(self):
        return _odb.dbChipConn_getTopRegion(self)

    def getBottomRegion(self):
        return _odb.dbChipConn_getBottomRegion(self)

    def getTopRegionPath(self):
        return _odb.dbChipConn_getTopRegionPath(self)

    def getBottomRegionPath(self):
        return _odb.dbChipConn_getBottomRegionPath(self)

    @staticmethod
    def create(name, parent_chip, top_region_path, top_region, bottom_region_path, bottom_region):
        return _odb.dbChipConn_create(name, parent_chip, top_region_path, top_region, bottom_region_path, bottom_region)

    @staticmethod
    def destroy(chipConn):
        return _odb.dbChipConn_destroy(chipConn)

    def __init__(self):
        _odb.dbChipConn_swiginit(self, _odb.new_dbChipConn())
    __swig_destroy__ = _odb.delete_dbChipConn

# Register dbChipConn in _odb:
_odb.dbChipConn_swigregister(dbChipConn)

def dbChipConn_create(name, parent_chip, top_region_path, top_region, bottom_region_path, bottom_region):
    return _odb.dbChipConn_create(name, parent_chip, top_region_path, top_region, bottom_region_path, bottom_region)

def dbChipConn_destroy(chipConn):
    return _odb.dbChipConn_destroy(chipConn)

class dbChipInst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbChipInst_getName(self)

    def setLoc(self, loc):
        return _odb.dbChipInst_setLoc(self, loc)

    def getLoc(self):
        return _odb.dbChipInst_getLoc(self)

    def setOrient(self, orient):
        return _odb.dbChipInst_setOrient(self, orient)

    def getOrient(self):
        return _odb.dbChipInst_getOrient(self)

    def getMasterChip(self):
        return _odb.dbChipInst_getMasterChip(self)

    def getParentChip(self):
        return _odb.dbChipInst_getParentChip(self)

    def getTransform(self):
        return _odb.dbChipInst_getTransform(self)

    def getRegions(self):
        return _odb.dbChipInst_getRegions(self)

    def findChipRegionInst(self, *args):
        return _odb.dbChipInst_findChipRegionInst(self, *args)

    @staticmethod
    def create(parent_chip, master_chip, name):
        return _odb.dbChipInst_create(parent_chip, master_chip, name)

    @staticmethod
    def destroy(chipInst):
        return _odb.dbChipInst_destroy(chipInst)

    def __init__(self):
        _odb.dbChipInst_swiginit(self, _odb.new_dbChipInst())
    __swig_destroy__ = _odb.delete_dbChipInst

# Register dbChipInst in _odb:
_odb.dbChipInst_swigregister(dbChipInst)

def dbChipInst_create(parent_chip, master_chip, name):
    return _odb.dbChipInst_create(parent_chip, master_chip, name)

def dbChipInst_destroy(chipInst):
    return _odb.dbChipInst_destroy(chipInst)

class dbChipNet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbChipNet_getName(self)

    def getChip(self):
        return _odb.dbChipNet_getChip(self)

    def getNumBumpInsts(self):
        return _odb.dbChipNet_getNumBumpInsts(self)

    def getBumpInst(self, index, path):
        return _odb.dbChipNet_getBumpInst(self, index, path)

    def addBumpInst(self, bump_inst, path):
        return _odb.dbChipNet_addBumpInst(self, bump_inst, path)

    @staticmethod
    def create(chip, name):
        return _odb.dbChipNet_create(chip, name)

    @staticmethod
    def destroy(net):
        return _odb.dbChipNet_destroy(net)

    def __init__(self):
        _odb.dbChipNet_swiginit(self, _odb.new_dbChipNet())
    __swig_destroy__ = _odb.delete_dbChipNet

# Register dbChipNet in _odb:
_odb.dbChipNet_swigregister(dbChipNet)

def dbChipNet_create(chip, name):
    return _odb.dbChipNet_create(chip, name)

def dbChipNet_destroy(net):
    return _odb.dbChipNet_destroy(net)

class dbChipRegion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Side_FRONT = _odb.dbChipRegion_Side_FRONT
    Side_BACK = _odb.dbChipRegion_Side_BACK
    Side_INTERNAL = _odb.dbChipRegion_Side_INTERNAL
    Side_INTERNAL_EXT = _odb.dbChipRegion_Side_INTERNAL_EXT

    def getName(self):
        return _odb.dbChipRegion_getName(self)

    def setBox(self, box):
        return _odb.dbChipRegion_setBox(self, box)

    def getBox(self):
        return _odb.dbChipRegion_getBox(self)

    def getChipBumps(self):
        return _odb.dbChipRegion_getChipBumps(self)

    def getChip(self):
        return _odb.dbChipRegion_getChip(self)

    def getSide(self):
        return _odb.dbChipRegion_getSide(self)

    def getLayer(self):
        return _odb.dbChipRegion_getLayer(self)

    @staticmethod
    def create(chip, name, side, layer):
        return _odb.dbChipRegion_create(chip, name, side, layer)

    def __init__(self):
        _odb.dbChipRegion_swiginit(self, _odb.new_dbChipRegion())
    __swig_destroy__ = _odb.delete_dbChipRegion

# Register dbChipRegion in _odb:
_odb.dbChipRegion_swigregister(dbChipRegion)

def dbChipRegion_create(chip, name, side, layer):
    return _odb.dbChipRegion_create(chip, name, side, layer)

class dbChipRegionInst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getChipInst(self):
        return _odb.dbChipRegionInst_getChipInst(self)

    def getChipRegion(self):
        return _odb.dbChipRegionInst_getChipRegion(self)

    def getChipBumpInsts(self):
        return _odb.dbChipRegionInst_getChipBumpInsts(self)

    def __init__(self):
        _odb.dbChipRegionInst_swiginit(self, _odb.new_dbChipRegionInst())
    __swig_destroy__ = _odb.delete_dbChipRegionInst

# Register dbChipRegionInst in _odb:
_odb.dbChipRegionInst_swigregister(dbChipRegionInst)
class dbDatabase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getChips(self):
        return _odb.dbDatabase_getChips(self)

    def findChip(self, name):
        return _odb.dbDatabase_findChip(self, name)

    def getProperties(self):
        return _odb.dbDatabase_getProperties(self)

    def getChipInsts(self):
        return _odb.dbDatabase_getChipInsts(self)

    def getChipRegionInsts(self):
        return _odb.dbDatabase_getChipRegionInsts(self)

    def getChipConns(self):
        return _odb.dbDatabase_getChipConns(self)

    def getChipBumpInsts(self):
        return _odb.dbDatabase_getChipBumpInsts(self)

    def getChipNets(self):
        return _odb.dbDatabase_getChipNets(self)

    def setTopChip(self, chip):
        return _odb.dbDatabase_setTopChip(self, chip)

    def getLibs(self):
        return _odb.dbDatabase_getLibs(self)

    def findLib(self, name):
        return _odb.dbDatabase_findLib(self, name)

    def getTechs(self):
        return _odb.dbDatabase_getTechs(self)

    def findTech(self, name):
        return _odb.dbDatabase_findTech(self, name)

    def findMaster(self, name):
        return _odb.dbDatabase_findMaster(self, name)

    def removeUnusedMasters(self):
        return _odb.dbDatabase_removeUnusedMasters(self)

    def getChip(self):
        return _odb.dbDatabase_getChip(self)

    def getTech(self):
        return _odb.dbDatabase_getTech(self)

    def getNumberOfMasters(self):
        return _odb.dbDatabase_getNumberOfMasters(self)

    def read(self, f):
        return _odb.dbDatabase_read(self, f)

    def write(self, file):
        return _odb.dbDatabase_write(self, file)

    @staticmethod
    def beginEco(block):
        return _odb.dbDatabase_beginEco(block)

    @staticmethod
    def endEco(block):
        return _odb.dbDatabase_endEco(block)

    @staticmethod
    def ecoEmpty(block):
        return _odb.dbDatabase_ecoEmpty(block)

    @staticmethod
    def readEco(block, filename):
        return _odb.dbDatabase_readEco(block, filename)

    @staticmethod
    def writeEco(block, filename):
        return _odb.dbDatabase_writeEco(block, filename)

    @staticmethod
    def checkEco(block):
        return _odb.dbDatabase_checkEco(block)

    @staticmethod
    def commitEco(block):
        return _odb.dbDatabase_commitEco(block)

    @staticmethod
    def undoEco(block):
        return _odb.dbDatabase_undoEco(block)

    def setLogger(self, logger):
        return _odb.dbDatabase_setLogger(self, logger)

    def clear(self):
        return _odb.dbDatabase_clear(self)

    def report(self):
        return _odb.dbDatabase_report(self)

    def addObserver(self, observer):
        return _odb.dbDatabase_addObserver(self, observer)

    def removeObserver(self, observer):
        return _odb.dbDatabase_removeObserver(self, observer)

    def triggerPostReadLef(self, tech, library):
        return _odb.dbDatabase_triggerPostReadLef(self, tech, library)

    def triggerPostReadDef(self, block, floorplan):
        return _odb.dbDatabase_triggerPostReadDef(self, block, floorplan)

    def triggerPostReadDb(self):
        return _odb.dbDatabase_triggerPostReadDb(self)

    @staticmethod
    def create():
        return _odb.dbDatabase_create()

    @staticmethod
    def destroy(db):
        return _odb.dbDatabase_destroy(db)

    @staticmethod
    def getDatabase(oid):
        return _odb.dbDatabase_getDatabase(oid)

    def __init__(self):
        _odb.dbDatabase_swiginit(self, _odb.new_dbDatabase())
    __swig_destroy__ = _odb.delete_dbDatabase

# Register dbDatabase in _odb:
_odb.dbDatabase_swigregister(dbDatabase)

def dbDatabase_beginEco(block):
    return _odb.dbDatabase_beginEco(block)

def dbDatabase_endEco(block):
    return _odb.dbDatabase_endEco(block)

def dbDatabase_ecoEmpty(block):
    return _odb.dbDatabase_ecoEmpty(block)

def dbDatabase_readEco(block, filename):
    return _odb.dbDatabase_readEco(block, filename)

def dbDatabase_writeEco(block, filename):
    return _odb.dbDatabase_writeEco(block, filename)

def dbDatabase_checkEco(block):
    return _odb.dbDatabase_checkEco(block)

def dbDatabase_commitEco(block):
    return _odb.dbDatabase_commitEco(block)

def dbDatabase_undoEco(block):
    return _odb.dbDatabase_undoEco(block)

def dbDatabase_create():
    return _odb.dbDatabase_create()

def dbDatabase_destroy(db):
    return _odb.dbDatabase_destroy(db)

def dbDatabase_getDatabase(oid):
    return _odb.dbDatabase_getDatabase(oid)

class dbDft(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setScanInserted(self, scan_inserted):
        return _odb.dbDft_setScanInserted(self, scan_inserted)

    def isScanInserted(self):
        return _odb.dbDft_isScanInserted(self)

    def getScanChains(self):
        return _odb.dbDft_getScanChains(self)

    def __init__(self):
        _odb.dbDft_swiginit(self, _odb.new_dbDft())
    __swig_destroy__ = _odb.delete_dbDft

# Register dbDft in _odb:
_odb.dbDft_swigregister(dbDft)
class dbGCellGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getGridX(self):
        return _odb.dbGCellGrid_getGridX(self)

    def getGridY(self):
        return _odb.dbGCellGrid_getGridY(self)

    def getBlock(self):
        return _odb.dbGCellGrid_getBlock(self)

    def addGridPatternX(self, origin_x, line_count, step):
        return _odb.dbGCellGrid_addGridPatternX(self, origin_x, line_count, step)

    def addGridPatternY(self, origin_y, line_count, step):
        return _odb.dbGCellGrid_addGridPatternY(self, origin_y, line_count, step)

    def getNumGridPatternsX(self):
        return _odb.dbGCellGrid_getNumGridPatternsX(self)

    def getNumGridPatternsY(self):
        return _odb.dbGCellGrid_getNumGridPatternsY(self)

    def getGridPatternX(self, i):
        return _odb.dbGCellGrid_getGridPatternX(self, i)

    def getGridPatternY(self, i):
        return _odb.dbGCellGrid_getGridPatternY(self, i)

    @staticmethod
    def create(block):
        return _odb.dbGCellGrid_create(block)

    @staticmethod
    def getGCellGrid(block, oid):
        return _odb.dbGCellGrid_getGCellGrid(block, oid)

    def getXIdx(self, x):
        return _odb.dbGCellGrid_getXIdx(self, x)

    def getYIdx(self, y):
        return _odb.dbGCellGrid_getYIdx(self, y)

    def getCapacity(self, layer, x_idx, y_idx):
        return _odb.dbGCellGrid_getCapacity(self, layer, x_idx, y_idx)

    def getUsage(self, layer, x_idx, y_idx):
        return _odb.dbGCellGrid_getUsage(self, layer, x_idx, y_idx)

    def setCapacity(self, layer, x_idx, y_idx, capacity):
        return _odb.dbGCellGrid_setCapacity(self, layer, x_idx, y_idx, capacity)

    def setUsage(self, layer, x_idx, y_idx, use):
        return _odb.dbGCellGrid_setUsage(self, layer, x_idx, y_idx, use)

    def resetCongestionMap(self):
        return _odb.dbGCellGrid_resetCongestionMap(self)

    def resetGrid(self):
        return _odb.dbGCellGrid_resetGrid(self)

    def getLayerCongestionMap(self, layer):
        return _odb.dbGCellGrid_getLayerCongestionMap(self, layer)

    def getDirectionCongestionMap(self, direction):
        return _odb.dbGCellGrid_getDirectionCongestionMap(self, direction)

    def __init__(self):
        _odb.dbGCellGrid_swiginit(self, _odb.new_dbGCellGrid())
    __swig_destroy__ = _odb.delete_dbGCellGrid

# Register dbGCellGrid in _odb:
_odb.dbGCellGrid_swigregister(dbGCellGrid)

def dbGCellGrid_create(block):
    return _odb.dbGCellGrid_create(block)

def dbGCellGrid_getGCellGrid(block, oid):
    return _odb.dbGCellGrid_getGCellGrid(block, oid)

class dbGDSARef(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setOrigin(self, origin):
        return _odb.dbGDSARef_setOrigin(self, origin)

    def getOrigin(self):
        return _odb.dbGDSARef_getOrigin(self)

    def setLr(self, lr):
        return _odb.dbGDSARef_setLr(self, lr)

    def getLr(self):
        return _odb.dbGDSARef_getLr(self)

    def setUl(self, ul):
        return _odb.dbGDSARef_setUl(self, ul)

    def getUl(self):
        return _odb.dbGDSARef_getUl(self)

    def setTransform(self, transform):
        return _odb.dbGDSARef_setTransform(self, transform)

    def getTransform(self):
        return _odb.dbGDSARef_getTransform(self)

    def setNumRows(self, num_rows):
        return _odb.dbGDSARef_setNumRows(self, num_rows)

    def getNumRows(self):
        return _odb.dbGDSARef_getNumRows(self)

    def setNumColumns(self, num_columns):
        return _odb.dbGDSARef_setNumColumns(self, num_columns)

    def getNumColumns(self):
        return _odb.dbGDSARef_getNumColumns(self)

    def getStructure(self):
        return _odb.dbGDSARef_getStructure(self)

    def getPropattr(self):
        return _odb.dbGDSARef_getPropattr(self)

    @staticmethod
    def create(parent, child):
        return _odb.dbGDSARef_create(parent, child)

    @staticmethod
    def destroy(aref):
        return _odb.dbGDSARef_destroy(aref)

    def __init__(self):
        _odb.dbGDSARef_swiginit(self, _odb.new_dbGDSARef())
    __swig_destroy__ = _odb.delete_dbGDSARef

# Register dbGDSARef in _odb:
_odb.dbGDSARef_swigregister(dbGDSARef)

def dbGDSARef_create(parent, child):
    return _odb.dbGDSARef_create(parent, child)

def dbGDSARef_destroy(aref):
    return _odb.dbGDSARef_destroy(aref)

class dbGDSBoundary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setLayer(self, layer):
        return _odb.dbGDSBoundary_setLayer(self, layer)

    def getLayer(self):
        return _odb.dbGDSBoundary_getLayer(self)

    def setDatatype(self, datatype):
        return _odb.dbGDSBoundary_setDatatype(self, datatype)

    def getDatatype(self):
        return _odb.dbGDSBoundary_getDatatype(self)

    def setXy(self, xy):
        return _odb.dbGDSBoundary_setXy(self, xy)

    def getXy(self, tbl):
        return _odb.dbGDSBoundary_getXy(self, tbl)

    def getXY(self):
        return _odb.dbGDSBoundary_getXY(self)

    def getPropattr(self):
        return _odb.dbGDSBoundary_getPropattr(self)

    @staticmethod
    def create(structure):
        return _odb.dbGDSBoundary_create(structure)

    @staticmethod
    def destroy(boundary):
        return _odb.dbGDSBoundary_destroy(boundary)

    def __init__(self):
        _odb.dbGDSBoundary_swiginit(self, _odb.new_dbGDSBoundary())
    __swig_destroy__ = _odb.delete_dbGDSBoundary

# Register dbGDSBoundary in _odb:
_odb.dbGDSBoundary_swigregister(dbGDSBoundary)

def dbGDSBoundary_create(structure):
    return _odb.dbGDSBoundary_create(structure)

def dbGDSBoundary_destroy(boundary):
    return _odb.dbGDSBoundary_destroy(boundary)

class dbGDSBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setLayer(self, layer):
        return _odb.dbGDSBox_setLayer(self, layer)

    def getLayer(self):
        return _odb.dbGDSBox_getLayer(self)

    def setDatatype(self, datatype):
        return _odb.dbGDSBox_setDatatype(self, datatype)

    def getDatatype(self):
        return _odb.dbGDSBox_getDatatype(self)

    def setBounds(self, bounds):
        return _odb.dbGDSBox_setBounds(self, bounds)

    def getBounds(self):
        return _odb.dbGDSBox_getBounds(self)

    def getPropattr(self):
        return _odb.dbGDSBox_getPropattr(self)

    @staticmethod
    def create(structure):
        return _odb.dbGDSBox_create(structure)

    @staticmethod
    def destroy(box):
        return _odb.dbGDSBox_destroy(box)

    def __init__(self):
        _odb.dbGDSBox_swiginit(self, _odb.new_dbGDSBox())
    __swig_destroy__ = _odb.delete_dbGDSBox

# Register dbGDSBox in _odb:
_odb.dbGDSBox_swigregister(dbGDSBox)

def dbGDSBox_create(structure):
    return _odb.dbGDSBox_create(structure)

def dbGDSBox_destroy(box):
    return _odb.dbGDSBox_destroy(box)

class dbGDSPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setLayer(self, layer):
        return _odb.dbGDSPath_setLayer(self, layer)

    def getLayer(self):
        return _odb.dbGDSPath_getLayer(self)

    def setDatatype(self, datatype):
        return _odb.dbGDSPath_setDatatype(self, datatype)

    def getDatatype(self):
        return _odb.dbGDSPath_getDatatype(self)

    def setXy(self, xy):
        return _odb.dbGDSPath_setXy(self, xy)

    def getXy(self, tbl):
        return _odb.dbGDSPath_getXy(self, tbl)

    def setWidth(self, width):
        return _odb.dbGDSPath_setWidth(self, width)

    def getWidth(self):
        return _odb.dbGDSPath_getWidth(self)

    def setPathType(self, path_type):
        return _odb.dbGDSPath_setPathType(self, path_type)

    def getPathType(self):
        return _odb.dbGDSPath_getPathType(self)

    def getXY(self):
        return _odb.dbGDSPath_getXY(self)

    def getPropattr(self):
        return _odb.dbGDSPath_getPropattr(self)

    @staticmethod
    def create(structure):
        return _odb.dbGDSPath_create(structure)

    @staticmethod
    def destroy(path):
        return _odb.dbGDSPath_destroy(path)

    def __init__(self):
        _odb.dbGDSPath_swiginit(self, _odb.new_dbGDSPath())
    __swig_destroy__ = _odb.delete_dbGDSPath

# Register dbGDSPath in _odb:
_odb.dbGDSPath_swigregister(dbGDSPath)

def dbGDSPath_create(structure):
    return _odb.dbGDSPath_create(structure)

def dbGDSPath_destroy(path):
    return _odb.dbGDSPath_destroy(path)

class dbGDSSRef(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setOrigin(self, origin):
        return _odb.dbGDSSRef_setOrigin(self, origin)

    def getOrigin(self):
        return _odb.dbGDSSRef_getOrigin(self)

    def setTransform(self, transform):
        return _odb.dbGDSSRef_setTransform(self, transform)

    def getTransform(self):
        return _odb.dbGDSSRef_getTransform(self)

    def getStructure(self):
        return _odb.dbGDSSRef_getStructure(self)

    def getPropattr(self):
        return _odb.dbGDSSRef_getPropattr(self)

    @staticmethod
    def create(parent, child):
        return _odb.dbGDSSRef_create(parent, child)

    @staticmethod
    def destroy(sref):
        return _odb.dbGDSSRef_destroy(sref)

    def __init__(self):
        _odb.dbGDSSRef_swiginit(self, _odb.new_dbGDSSRef())
    __swig_destroy__ = _odb.delete_dbGDSSRef

# Register dbGDSSRef in _odb:
_odb.dbGDSSRef_swigregister(dbGDSSRef)

def dbGDSSRef_create(parent, child):
    return _odb.dbGDSSRef_create(parent, child)

def dbGDSSRef_destroy(sref):
    return _odb.dbGDSSRef_destroy(sref)

class dbGDSStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbGDSStructure_getName(self)

    def getGDSBoundaries(self):
        return _odb.dbGDSStructure_getGDSBoundaries(self)

    def getGDSBoxs(self):
        return _odb.dbGDSStructure_getGDSBoxs(self)

    def getGDSPaths(self):
        return _odb.dbGDSStructure_getGDSPaths(self)

    def getGDSSRefs(self):
        return _odb.dbGDSStructure_getGDSSRefs(self)

    def getGDSARefs(self):
        return _odb.dbGDSStructure_getGDSARefs(self)

    def getGDSTexts(self):
        return _odb.dbGDSStructure_getGDSTexts(self)

    def getGDSLib(self):
        return _odb.dbGDSStructure_getGDSLib(self)

    @staticmethod
    def create(lib, name):
        return _odb.dbGDSStructure_create(lib, name)

    @staticmethod
    def destroy(structure):
        return _odb.dbGDSStructure_destroy(structure)

    def __init__(self):
        _odb.dbGDSStructure_swiginit(self, _odb.new_dbGDSStructure())
    __swig_destroy__ = _odb.delete_dbGDSStructure

# Register dbGDSStructure in _odb:
_odb.dbGDSStructure_swigregister(dbGDSStructure)

def dbGDSStructure_create(lib, name):
    return _odb.dbGDSStructure_create(lib, name)

def dbGDSStructure_destroy(structure):
    return _odb.dbGDSStructure_destroy(structure)

class dbGDSText(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setLayer(self, layer):
        return _odb.dbGDSText_setLayer(self, layer)

    def getLayer(self):
        return _odb.dbGDSText_getLayer(self)

    def setDatatype(self, datatype):
        return _odb.dbGDSText_setDatatype(self, datatype)

    def getDatatype(self):
        return _odb.dbGDSText_getDatatype(self)

    def setOrigin(self, origin):
        return _odb.dbGDSText_setOrigin(self, origin)

    def getOrigin(self):
        return _odb.dbGDSText_getOrigin(self)

    def setPresentation(self, presentation):
        return _odb.dbGDSText_setPresentation(self, presentation)

    def getPresentation(self):
        return _odb.dbGDSText_getPresentation(self)

    def setTransform(self, transform):
        return _odb.dbGDSText_setTransform(self, transform)

    def getTransform(self):
        return _odb.dbGDSText_getTransform(self)

    def setText(self, text):
        return _odb.dbGDSText_setText(self, text)

    def getText(self):
        return _odb.dbGDSText_getText(self)

    def getPropattr(self):
        return _odb.dbGDSText_getPropattr(self)

    @staticmethod
    def create(structure):
        return _odb.dbGDSText_create(structure)

    @staticmethod
    def destroy(text):
        return _odb.dbGDSText_destroy(text)

    def __init__(self):
        _odb.dbGDSText_swiginit(self, _odb.new_dbGDSText())
    __swig_destroy__ = _odb.delete_dbGDSText

# Register dbGDSText in _odb:
_odb.dbGDSText_swigregister(dbGDSText)

def dbGDSText_create(structure):
    return _odb.dbGDSText_create(structure)

def dbGDSText_destroy(text):
    return _odb.dbGDSText_destroy(text)

class dbGlobalConnect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getRegion(self):
        return _odb.dbGlobalConnect_getRegion(self)

    def getNet(self):
        return _odb.dbGlobalConnect_getNet(self)

    def getInstPattern(self):
        return _odb.dbGlobalConnect_getInstPattern(self)

    def getPinPattern(self):
        return _odb.dbGlobalConnect_getPinPattern(self)

    def getInsts(self):
        return _odb.dbGlobalConnect_getInsts(self)

    def connect(self, inst):
        return _odb.dbGlobalConnect_connect(self, inst)

    @staticmethod
    def create(net, region, inst_pattern, pin_pattern):
        return _odb.dbGlobalConnect_create(net, region, inst_pattern, pin_pattern)

    @staticmethod
    def destroy(*args):
        return _odb.dbGlobalConnect_destroy(*args)

    def __init__(self):
        _odb.dbGlobalConnect_swiginit(self, _odb.new_dbGlobalConnect())
    __swig_destroy__ = _odb.delete_dbGlobalConnect

# Register dbGlobalConnect in _odb:
_odb.dbGlobalConnect_swigregister(dbGlobalConnect)

def dbGlobalConnect_create(net, region, inst_pattern, pin_pattern):
    return _odb.dbGlobalConnect_create(net, region, inst_pattern, pin_pattern)

def dbGlobalConnect_destroy(*args):
    return _odb.dbGlobalConnect_destroy(*args)

class dbGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbGroup_getName(self)

    def getParentGroup(self):
        return _odb.dbGroup_getParentGroup(self)

    def getRegion(self):
        return _odb.dbGroup_getRegion(self)

    def setType(self, type):
        return _odb.dbGroup_setType(self, type)

    def getType(self):
        return _odb.dbGroup_getType(self)

    def addModInst(self, modinst):
        return _odb.dbGroup_addModInst(self, modinst)

    def removeModInst(self, modinst):
        return _odb.dbGroup_removeModInst(self, modinst)

    def getModInsts(self):
        return _odb.dbGroup_getModInsts(self)

    def addInst(self, inst):
        return _odb.dbGroup_addInst(self, inst)

    def removeInst(self, inst):
        return _odb.dbGroup_removeInst(self, inst)

    def getInsts(self):
        return _odb.dbGroup_getInsts(self)

    def addGroup(self, group):
        return _odb.dbGroup_addGroup(self, group)

    def removeGroup(self, group):
        return _odb.dbGroup_removeGroup(self, group)

    def getGroups(self):
        return _odb.dbGroup_getGroups(self)

    def addPowerNet(self, net):
        return _odb.dbGroup_addPowerNet(self, net)

    def addGroundNet(self, net):
        return _odb.dbGroup_addGroundNet(self, net)

    def removeNet(self, net):
        return _odb.dbGroup_removeNet(self, net)

    def getPowerNets(self):
        return _odb.dbGroup_getPowerNets(self)

    def getGroundNets(self):
        return _odb.dbGroup_getGroundNets(self)

    @staticmethod
    def create(*args):
        return _odb.dbGroup_create(*args)

    @staticmethod
    def destroy(group):
        return _odb.dbGroup_destroy(group)

    @staticmethod
    def getGroup(block_, dbid_):
        return _odb.dbGroup_getGroup(block_, dbid_)

    def __init__(self):
        _odb.dbGroup_swiginit(self, _odb.new_dbGroup())
    __swig_destroy__ = _odb.delete_dbGroup

# Register dbGroup in _odb:
_odb.dbGroup_swigregister(dbGroup)

def dbGroup_create(*args):
    return _odb.dbGroup_create(*args)

def dbGroup_destroy(group):
    return _odb.dbGroup_destroy(group)

def dbGroup_getGroup(block_, dbid_):
    return _odb.dbGroup_getGroup(block_, dbid_)

class dbGuide(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBox(self):
        return _odb.dbGuide_getBox(self)

    def getNet(self):
        return _odb.dbGuide_getNet(self)

    def getLayer(self):
        return _odb.dbGuide_getLayer(self)

    def getViaLayer(self):
        return _odb.dbGuide_getViaLayer(self)

    def isCongested(self):
        return _odb.dbGuide_isCongested(self)

    @staticmethod
    def create(net, layer, via_layer, box, is_congested):
        return _odb.dbGuide_create(net, layer, via_layer, box, is_congested)

    @staticmethod
    def getGuide(block, dbid):
        return _odb.dbGuide_getGuide(block, dbid)

    @staticmethod
    def destroy(*args):
        return _odb.dbGuide_destroy(*args)

    def isJumper(self):
        return _odb.dbGuide_isJumper(self)

    def setIsJumper(self, jumper):
        return _odb.dbGuide_setIsJumper(self, jumper)

    def isConnectedToTerm(self):
        return _odb.dbGuide_isConnectedToTerm(self)

    def setIsConnectedToTerm(self, is_connected):
        return _odb.dbGuide_setIsConnectedToTerm(self, is_connected)

    def __init__(self):
        _odb.dbGuide_swiginit(self, _odb.new_dbGuide())
    __swig_destroy__ = _odb.delete_dbGuide

# Register dbGuide in _odb:
_odb.dbGuide_swigregister(dbGuide)

def dbGuide_create(net, layer, via_layer, box, is_congested):
    return _odb.dbGuide_create(net, layer, via_layer, box, is_congested)

def dbGuide_getGuide(block, dbid):
    return _odb.dbGuide_getGuide(block, dbid)

def dbGuide_destroy(*args):
    return _odb.dbGuide_destroy(*args)

class dbIsolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbIsolation_getName(self)

    def getAppliesTo(self):
        return _odb.dbIsolation_getAppliesTo(self)

    def getClampValue(self):
        return _odb.dbIsolation_getClampValue(self)

    def getIsolationSignal(self):
        return _odb.dbIsolation_getIsolationSignal(self)

    def getIsolationSense(self):
        return _odb.dbIsolation_getIsolationSense(self)

    def getLocation(self):
        return _odb.dbIsolation_getLocation(self)

    def setPowerDomain(self, power_domain):
        return _odb.dbIsolation_setPowerDomain(self, power_domain)

    def getPowerDomain(self):
        return _odb.dbIsolation_getPowerDomain(self)

    @staticmethod
    def create(block, name):
        return _odb.dbIsolation_create(block, name)

    @staticmethod
    def destroy(iso):
        return _odb.dbIsolation_destroy(iso)

    def setAppliesTo(self, applies_to):
        return _odb.dbIsolation_setAppliesTo(self, applies_to)

    def setClampValue(self, clamp_value):
        return _odb.dbIsolation_setClampValue(self, clamp_value)

    def setIsolationSignal(self, isolation_signal):
        return _odb.dbIsolation_setIsolationSignal(self, isolation_signal)

    def setIsolationSense(self, isolation_sense):
        return _odb.dbIsolation_setIsolationSense(self, isolation_sense)

    def setLocation(self, location):
        return _odb.dbIsolation_setLocation(self, location)

    def addIsolationCell(self, master):
        return _odb.dbIsolation_addIsolationCell(self, master)

    def getIsolationCells(self):
        return _odb.dbIsolation_getIsolationCells(self)

    def appliesTo(self, io):
        return _odb.dbIsolation_appliesTo(self, io)

    def __init__(self):
        _odb.dbIsolation_swiginit(self, _odb.new_dbIsolation())
    __swig_destroy__ = _odb.delete_dbIsolation

# Register dbIsolation in _odb:
_odb.dbIsolation_swigregister(dbIsolation)

def dbIsolation_create(block, name):
    return _odb.dbIsolation_create(block, name)

def dbIsolation_destroy(iso):
    return _odb.dbIsolation_destroy(iso)

class dbLevelShifter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbLevelShifter_getName(self)

    def getDomain(self):
        return _odb.dbLevelShifter_getDomain(self)

    def setSource(self, source):
        return _odb.dbLevelShifter_setSource(self, source)

    def getSource(self):
        return _odb.dbLevelShifter_getSource(self)

    def setSink(self, sink):
        return _odb.dbLevelShifter_setSink(self, sink)

    def getSink(self):
        return _odb.dbLevelShifter_getSink(self)

    def setUseFunctionalEquivalence(self, use_functional_equivalence):
        return _odb.dbLevelShifter_setUseFunctionalEquivalence(self, use_functional_equivalence)

    def isUseFunctionalEquivalence(self):
        return _odb.dbLevelShifter_isUseFunctionalEquivalence(self)

    def setAppliesTo(self, applies_to):
        return _odb.dbLevelShifter_setAppliesTo(self, applies_to)

    def getAppliesTo(self):
        return _odb.dbLevelShifter_getAppliesTo(self)

    def setAppliesToBoundary(self, applies_to_boundary):
        return _odb.dbLevelShifter_setAppliesToBoundary(self, applies_to_boundary)

    def getAppliesToBoundary(self):
        return _odb.dbLevelShifter_getAppliesToBoundary(self)

    def setRule(self, rule):
        return _odb.dbLevelShifter_setRule(self, rule)

    def getRule(self):
        return _odb.dbLevelShifter_getRule(self)

    def setThreshold(self, threshold):
        return _odb.dbLevelShifter_setThreshold(self, threshold)

    def getThreshold(self):
        return _odb.dbLevelShifter_getThreshold(self)

    def setNoShift(self, no_shift):
        return _odb.dbLevelShifter_setNoShift(self, no_shift)

    def isNoShift(self):
        return _odb.dbLevelShifter_isNoShift(self)

    def setForceShift(self, force_shift):
        return _odb.dbLevelShifter_setForceShift(self, force_shift)

    def isForceShift(self):
        return _odb.dbLevelShifter_isForceShift(self)

    def setLocation(self, location):
        return _odb.dbLevelShifter_setLocation(self, location)

    def getLocation(self):
        return _odb.dbLevelShifter_getLocation(self)

    def setInputSupply(self, input_supply):
        return _odb.dbLevelShifter_setInputSupply(self, input_supply)

    def getInputSupply(self):
        return _odb.dbLevelShifter_getInputSupply(self)

    def setOutputSupply(self, output_supply):
        return _odb.dbLevelShifter_setOutputSupply(self, output_supply)

    def getOutputSupply(self):
        return _odb.dbLevelShifter_getOutputSupply(self)

    def setInternalSupply(self, internal_supply):
        return _odb.dbLevelShifter_setInternalSupply(self, internal_supply)

    def getInternalSupply(self):
        return _odb.dbLevelShifter_getInternalSupply(self)

    def setNamePrefix(self, name_prefix):
        return _odb.dbLevelShifter_setNamePrefix(self, name_prefix)

    def getNamePrefix(self):
        return _odb.dbLevelShifter_getNamePrefix(self)

    def setNameSuffix(self, name_suffix):
        return _odb.dbLevelShifter_setNameSuffix(self, name_suffix)

    def getNameSuffix(self):
        return _odb.dbLevelShifter_getNameSuffix(self)

    def setCellName(self, cell_name):
        return _odb.dbLevelShifter_setCellName(self, cell_name)

    def getCellName(self):
        return _odb.dbLevelShifter_getCellName(self)

    def setCellInput(self, cell_input):
        return _odb.dbLevelShifter_setCellInput(self, cell_input)

    def getCellInput(self):
        return _odb.dbLevelShifter_getCellInput(self)

    def setCellOutput(self, cell_output):
        return _odb.dbLevelShifter_setCellOutput(self, cell_output)

    def getCellOutput(self):
        return _odb.dbLevelShifter_getCellOutput(self)

    @staticmethod
    def create(block, name, domain):
        return _odb.dbLevelShifter_create(block, name, domain)

    @staticmethod
    def destroy(shifter):
        return _odb.dbLevelShifter_destroy(shifter)

    def addElement(self, element):
        return _odb.dbLevelShifter_addElement(self, element)

    def addExcludeElement(self, element):
        return _odb.dbLevelShifter_addExcludeElement(self, element)

    def addInstance(self, instance, port):
        return _odb.dbLevelShifter_addInstance(self, instance, port)

    def getElements(self):
        return _odb.dbLevelShifter_getElements(self)

    def getExcludeElements(self):
        return _odb.dbLevelShifter_getExcludeElements(self)

    def getInstances(self):
        return _odb.dbLevelShifter_getInstances(self)

    def __init__(self):
        _odb.dbLevelShifter_swiginit(self, _odb.new_dbLevelShifter())
    __swig_destroy__ = _odb.delete_dbLevelShifter

# Register dbLevelShifter in _odb:
_odb.dbLevelShifter_swigregister(dbLevelShifter)

def dbLevelShifter_create(block, name, domain):
    return _odb.dbLevelShifter_create(block, name, domain)

def dbLevelShifter_destroy(shifter):
    return _odb.dbLevelShifter_destroy(shifter)

class dbLogicPort(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbLogicPort_getName(self)

    def getDirection(self):
        return _odb.dbLogicPort_getDirection(self)

    @staticmethod
    def create(block, name, direction):
        return _odb.dbLogicPort_create(block, name, direction)

    @staticmethod
    def destroy(lp):
        return _odb.dbLogicPort_destroy(lp)

    def __init__(self):
        _odb.dbLogicPort_swiginit(self, _odb.new_dbLogicPort())
    __swig_destroy__ = _odb.delete_dbLogicPort

# Register dbLogicPort in _odb:
_odb.dbLogicPort_swigregister(dbLogicPort)

def dbLogicPort_create(block, name, direction):
    return _odb.dbLogicPort_create(block, name, direction)

def dbLogicPort_destroy(lp):
    return _odb.dbLogicPort_destroy(lp)

class dbMarker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setComment(self, comment):
        return _odb.dbMarker_setComment(self, comment)

    def getComment(self):
        return _odb.dbMarker_getComment(self)

    def setLineNumber(self, line_number):
        return _odb.dbMarker_setLineNumber(self, line_number)

    def getLineNumber(self):
        return _odb.dbMarker_getLineNumber(self)

    def setVisited(self, visited):
        return _odb.dbMarker_setVisited(self, visited)

    def isVisited(self):
        return _odb.dbMarker_isVisited(self)

    def setVisible(self, visible):
        return _odb.dbMarker_setVisible(self, visible)

    def isVisible(self):
        return _odb.dbMarker_isVisible(self)

    def setWaived(self, waived):
        return _odb.dbMarker_setWaived(self, waived)

    def isWaived(self):
        return _odb.dbMarker_isWaived(self)

    def getName(self):
        return _odb.dbMarker_getName(self)

    def getCategory(self):
        return _odb.dbMarker_getCategory(self)

    def getShapes(self):
        return _odb.dbMarker_getShapes(self)

    def getTechLayer(self):
        return _odb.dbMarker_getTechLayer(self)

    def getBBox(self):
        return _odb.dbMarker_getBBox(self)

    def getSources(self):
        return _odb.dbMarker_getSources(self)

    def addShape(self, *args):
        return _odb.dbMarker_addShape(self, *args)

    def setTechLayer(self, layer):
        return _odb.dbMarker_setTechLayer(self, layer)

    def addSource(self, obj):
        return _odb.dbMarker_addSource(self, obj)

    def addObstructionFromBlock(self, block):
        return _odb.dbMarker_addObstructionFromBlock(self, block)

    @staticmethod
    def create(category):
        return _odb.dbMarker_create(category)

    @staticmethod
    def destroy(marker):
        return _odb.dbMarker_destroy(marker)

    def __init__(self):
        _odb.dbMarker_swiginit(self, _odb.new_dbMarker())
    __swig_destroy__ = _odb.delete_dbMarker

# Register dbMarker in _odb:
_odb.dbMarker_swigregister(dbMarker)

def dbMarker_create(category):
    return _odb.dbMarker_create(category)

def dbMarker_destroy(marker):
    return _odb.dbMarker_destroy(marker)

class dbMarkerCategory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbMarkerCategory_getName(self)

    def setDescription(self, description):
        return _odb.dbMarkerCategory_setDescription(self, description)

    def getDescription(self):
        return _odb.dbMarkerCategory_getDescription(self)

    def setSource(self, source):
        return _odb.dbMarkerCategory_setSource(self, source)

    def setMaxMarkers(self, max_markers):
        return _odb.dbMarkerCategory_setMaxMarkers(self, max_markers)

    def getMaxMarkers(self):
        return _odb.dbMarkerCategory_getMaxMarkers(self)

    def getMarkers(self):
        return _odb.dbMarkerCategory_getMarkers(self)

    def getMarkerCategories(self):
        return _odb.dbMarkerCategory_getMarkerCategories(self)

    def findMarkerCategory(self, name):
        return _odb.dbMarkerCategory_findMarkerCategory(self, name)

    def getTopCategory(self):
        return _odb.dbMarkerCategory_getTopCategory(self)

    def getParent(self):
        return _odb.dbMarkerCategory_getParent(self)

    def getSource(self):
        return _odb.dbMarkerCategory_getSource(self)

    def getAllMarkers(self):
        return _odb.dbMarkerCategory_getAllMarkers(self)

    def rename(self, name):
        return _odb.dbMarkerCategory_rename(self, name)

    def getMarkerCount(self):
        return _odb.dbMarkerCategory_getMarkerCount(self)

    def writeJSON(self, *args):
        return _odb.dbMarkerCategory_writeJSON(self, *args)

    def writeTR(self, *args):
        return _odb.dbMarkerCategory_writeTR(self, *args)

    @staticmethod
    def fromJSON(*args):
        return _odb.dbMarkerCategory_fromJSON(*args)

    @staticmethod
    def fromTR(*args):
        return _odb.dbMarkerCategory_fromTR(*args)

    @staticmethod
    def create(*args):
        return _odb.dbMarkerCategory_create(*args)

    @staticmethod
    def createOrGet(*args):
        return _odb.dbMarkerCategory_createOrGet(*args)

    @staticmethod
    def createOrReplace(*args):
        return _odb.dbMarkerCategory_createOrReplace(*args)

    @staticmethod
    def destroy(category):
        return _odb.dbMarkerCategory_destroy(category)

    def __init__(self):
        _odb.dbMarkerCategory_swiginit(self, _odb.new_dbMarkerCategory())
    __swig_destroy__ = _odb.delete_dbMarkerCategory

# Register dbMarkerCategory in _odb:
_odb.dbMarkerCategory_swigregister(dbMarkerCategory)

def dbMarkerCategory_fromJSON(*args):
    return _odb.dbMarkerCategory_fromJSON(*args)

def dbMarkerCategory_fromTR(*args):
    return _odb.dbMarkerCategory_fromTR(*args)

def dbMarkerCategory_create(*args):
    return _odb.dbMarkerCategory_create(*args)

def dbMarkerCategory_createOrGet(*args):
    return _odb.dbMarkerCategory_createOrGet(*args)

def dbMarkerCategory_createOrReplace(*args):
    return _odb.dbMarkerCategory_createOrReplace(*args)

def dbMarkerCategory_destroy(category):
    return _odb.dbMarkerCategory_destroy(category)

class dbMasterEdgeType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TOP = _odb.dbMasterEdgeType_TOP
    RIGHT = _odb.dbMasterEdgeType_RIGHT
    LEFT = _odb.dbMasterEdgeType_LEFT
    BOTTOM = _odb.dbMasterEdgeType_BOTTOM

    def setEdgeType(self, edge_type):
        return _odb.dbMasterEdgeType_setEdgeType(self, edge_type)

    def getEdgeType(self):
        return _odb.dbMasterEdgeType_getEdgeType(self)

    def setCellRow(self, cell_row):
        return _odb.dbMasterEdgeType_setCellRow(self, cell_row)

    def getCellRow(self):
        return _odb.dbMasterEdgeType_getCellRow(self)

    def setHalfRow(self, half_row):
        return _odb.dbMasterEdgeType_setHalfRow(self, half_row)

    def getHalfRow(self):
        return _odb.dbMasterEdgeType_getHalfRow(self)

    def setRangeBegin(self, range_begin):
        return _odb.dbMasterEdgeType_setRangeBegin(self, range_begin)

    def getRangeBegin(self):
        return _odb.dbMasterEdgeType_getRangeBegin(self)

    def setRangeEnd(self, range_end):
        return _odb.dbMasterEdgeType_setRangeEnd(self, range_end)

    def getRangeEnd(self):
        return _odb.dbMasterEdgeType_getRangeEnd(self)

    def setEdgeDir(self, edge_dir):
        return _odb.dbMasterEdgeType_setEdgeDir(self, edge_dir)

    def getEdgeDir(self):
        return _odb.dbMasterEdgeType_getEdgeDir(self)

    @staticmethod
    def create(master):
        return _odb.dbMasterEdgeType_create(master)

    @staticmethod
    def destroy(edge_type):
        return _odb.dbMasterEdgeType_destroy(edge_type)

    def __init__(self):
        _odb.dbMasterEdgeType_swiginit(self, _odb.new_dbMasterEdgeType())
    __swig_destroy__ = _odb.delete_dbMasterEdgeType

# Register dbMasterEdgeType in _odb:
_odb.dbMasterEdgeType_swigregister(dbMasterEdgeType)

def dbMasterEdgeType_create(master):
    return _odb.dbMasterEdgeType_create(master)

def dbMasterEdgeType_destroy(edge_type):
    return _odb.dbMasterEdgeType_destroy(edge_type)

class dbMetalWidthViaMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setViaCutClass(self, via_cut_class):
        return _odb.dbMetalWidthViaMap_setViaCutClass(self, via_cut_class)

    def isViaCutClass(self):
        return _odb.dbMetalWidthViaMap_isViaCutClass(self)

    def setCutLayer(self, cut_layer):
        return _odb.dbMetalWidthViaMap_setCutLayer(self, cut_layer)

    def setBelowLayerWidthLow(self, below_layer_width_low):
        return _odb.dbMetalWidthViaMap_setBelowLayerWidthLow(self, below_layer_width_low)

    def getBelowLayerWidthLow(self):
        return _odb.dbMetalWidthViaMap_getBelowLayerWidthLow(self)

    def setBelowLayerWidthHigh(self, below_layer_width_high):
        return _odb.dbMetalWidthViaMap_setBelowLayerWidthHigh(self, below_layer_width_high)

    def getBelowLayerWidthHigh(self):
        return _odb.dbMetalWidthViaMap_getBelowLayerWidthHigh(self)

    def setAboveLayerWidthLow(self, above_layer_width_low):
        return _odb.dbMetalWidthViaMap_setAboveLayerWidthLow(self, above_layer_width_low)

    def getAboveLayerWidthLow(self):
        return _odb.dbMetalWidthViaMap_getAboveLayerWidthLow(self)

    def setAboveLayerWidthHigh(self, above_layer_width_high):
        return _odb.dbMetalWidthViaMap_setAboveLayerWidthHigh(self, above_layer_width_high)

    def getAboveLayerWidthHigh(self):
        return _odb.dbMetalWidthViaMap_getAboveLayerWidthHigh(self)

    def setViaName(self, via_name):
        return _odb.dbMetalWidthViaMap_setViaName(self, via_name)

    def getViaName(self):
        return _odb.dbMetalWidthViaMap_getViaName(self)

    def setPgVia(self, pg_via):
        return _odb.dbMetalWidthViaMap_setPgVia(self, pg_via)

    def isPgVia(self):
        return _odb.dbMetalWidthViaMap_isPgVia(self)

    def getCutLayer(self):
        return _odb.dbMetalWidthViaMap_getCutLayer(self)

    @staticmethod
    def create(tech):
        return _odb.dbMetalWidthViaMap_create(tech)

    @staticmethod
    def destroy(via_map):
        return _odb.dbMetalWidthViaMap_destroy(via_map)

    @staticmethod
    def getMetalWidthViaMap(tech, dbid):
        return _odb.dbMetalWidthViaMap_getMetalWidthViaMap(tech, dbid)

    def __init__(self):
        _odb.dbMetalWidthViaMap_swiginit(self, _odb.new_dbMetalWidthViaMap())
    __swig_destroy__ = _odb.delete_dbMetalWidthViaMap

# Register dbMetalWidthViaMap in _odb:
_odb.dbMetalWidthViaMap_swigregister(dbMetalWidthViaMap)

def dbMetalWidthViaMap_create(tech):
    return _odb.dbMetalWidthViaMap_create(tech)

def dbMetalWidthViaMap_destroy(via_map):
    return _odb.dbMetalWidthViaMap_destroy(via_map)

def dbMetalWidthViaMap_getMetalWidthViaMap(tech, dbid):
    return _odb.dbMetalWidthViaMap_getMetalWidthViaMap(tech, dbid)

class dbModBTerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbModBTerm_getName(self)

    def getParent(self):
        return _odb.dbModBTerm_getParent(self)

    def setParentModITerm(self, parent_pin):
        return _odb.dbModBTerm_setParentModITerm(self, parent_pin)

    def getParentModITerm(self):
        return _odb.dbModBTerm_getParentModITerm(self)

    def setModNet(self, modNet):
        return _odb.dbModBTerm_setModNet(self, modNet)

    def getModNet(self):
        return _odb.dbModBTerm_getModNet(self)

    def setSigType(self, type):
        return _odb.dbModBTerm_setSigType(self, type)

    def getSigType(self):
        return _odb.dbModBTerm_getSigType(self)

    def setIoType(self, type):
        return _odb.dbModBTerm_setIoType(self, type)

    def getIoType(self):
        return _odb.dbModBTerm_getIoType(self)

    def connect(self, net):
        return _odb.dbModBTerm_connect(self, net)

    def disconnect(self):
        return _odb.dbModBTerm_disconnect(self)

    def isBusPort(self):
        return _odb.dbModBTerm_isBusPort(self)

    def setBusPort(self, arg2):
        return _odb.dbModBTerm_setBusPort(self, arg2)

    def getBusPort(self):
        return _odb.dbModBTerm_getBusPort(self)

    @staticmethod
    def create(parentModule, name):
        return _odb.dbModBTerm_create(parentModule, name)

    @staticmethod
    def destroy(*args):
        return _odb.dbModBTerm_destroy(*args)

    @staticmethod
    def getModBTerm(block, dbid):
        return _odb.dbModBTerm_getModBTerm(block, dbid)

    def __init__(self):
        _odb.dbModBTerm_swiginit(self, _odb.new_dbModBTerm())
    __swig_destroy__ = _odb.delete_dbModBTerm

# Register dbModBTerm in _odb:
_odb.dbModBTerm_swigregister(dbModBTerm)

def dbModBTerm_create(parentModule, name):
    return _odb.dbModBTerm_create(parentModule, name)

def dbModBTerm_destroy(*args):
    return _odb.dbModBTerm_destroy(*args)

def dbModBTerm_getModBTerm(block, dbid):
    return _odb.dbModBTerm_getModBTerm(block, dbid)

class dbModInst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbModInst_getName(self)

    def getParent(self):
        return _odb.dbModInst_getParent(self)

    def getMaster(self):
        return _odb.dbModInst_getMaster(self)

    def getGroup(self):
        return _odb.dbModInst_getGroup(self)

    def getHierarchicalName(self):
        return _odb.dbModInst_getHierarchicalName(self)

    def findModITerm(self, name):
        return _odb.dbModInst_findModITerm(self, name)

    def getModITerms(self):
        return _odb.dbModInst_getModITerms(self)

    def removeUnusedPortsAndPins(self):
        return _odb.dbModInst_removeUnusedPortsAndPins(self)

    def findHierNet(self, base_name):
        return _odb.dbModInst_findHierNet(self, base_name)

    def findFlatNet(self, base_name):
        return _odb.dbModInst_findFlatNet(self, base_name)

    def findNet(self, base_name, flat_net, hier_net):
        return _odb.dbModInst_findNet(self, base_name, flat_net, hier_net)

    def swapMaster(self, module):
        return _odb.dbModInst_swapMaster(self, module)

    @staticmethod
    def create(parentModule, masterModule, name):
        return _odb.dbModInst_create(parentModule, masterModule, name)

    @staticmethod
    def destroy(*args):
        return _odb.dbModInst_destroy(*args)

    @staticmethod
    def getModInst(block_, dbid_):
        return _odb.dbModInst_getModInst(block_, dbid_)

    def __init__(self):
        _odb.dbModInst_swiginit(self, _odb.new_dbModInst())
    __swig_destroy__ = _odb.delete_dbModInst

# Register dbModInst in _odb:
_odb.dbModInst_swigregister(dbModInst)

def dbModInst_create(parentModule, masterModule, name):
    return _odb.dbModInst_create(parentModule, masterModule, name)

def dbModInst_destroy(*args):
    return _odb.dbModInst_destroy(*args)

def dbModInst_getModInst(block_, dbid_):
    return _odb.dbModInst_getModInst(block_, dbid_)

class dbModITerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbModITerm_getName(self)

    def getParent(self):
        return _odb.dbModITerm_getParent(self)

    def setModNet(self, modNet):
        return _odb.dbModITerm_setModNet(self, modNet)

    def getModNet(self):
        return _odb.dbModITerm_getModNet(self)

    def setChildModBTerm(self, child_port):
        return _odb.dbModITerm_setChildModBTerm(self, child_port)

    def getChildModBTerm(self):
        return _odb.dbModITerm_getChildModBTerm(self)

    def connect(self, modnet):
        return _odb.dbModITerm_connect(self, modnet)

    def disconnect(self):
        return _odb.dbModITerm_disconnect(self)

    @staticmethod
    def create(parentInstance, name, modbterm=None):
        return _odb.dbModITerm_create(parentInstance, name, modbterm)

    @staticmethod
    def destroy(*args):
        return _odb.dbModITerm_destroy(*args)

    @staticmethod
    def getModITerm(block, dbid):
        return _odb.dbModITerm_getModITerm(block, dbid)

    def __init__(self):
        _odb.dbModITerm_swiginit(self, _odb.new_dbModITerm())
    __swig_destroy__ = _odb.delete_dbModITerm

# Register dbModITerm in _odb:
_odb.dbModITerm_swigregister(dbModITerm)

def dbModITerm_create(parentInstance, name, modbterm=None):
    return _odb.dbModITerm_create(parentInstance, name, modbterm)

def dbModITerm_destroy(*args):
    return _odb.dbModITerm_destroy(*args)

def dbModITerm_getModITerm(block, dbid):
    return _odb.dbModITerm_getModITerm(block, dbid)

class dbModNet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getParent(self):
        return _odb.dbModNet_getParent(self)

    def getModITerms(self):
        return _odb.dbModNet_getModITerms(self)

    def getModBTerms(self):
        return _odb.dbModNet_getModBTerms(self)

    def getITerms(self):
        return _odb.dbModNet_getITerms(self)

    def getBTerms(self):
        return _odb.dbModNet_getBTerms(self)

    def connectionCount(self):
        return _odb.dbModNet_connectionCount(self)

    def getName(self):
        return _odb.dbModNet_getName(self)

    def getConstName(self):
        return _odb.dbModNet_getConstName(self)

    def rename(self, new_name):
        return _odb.dbModNet_rename(self, new_name)

    def disconnectAllTerms(self):
        return _odb.dbModNet_disconnectAllTerms(self)

    @staticmethod
    def getModNet(block, id):
        return _odb.dbModNet_getModNet(block, id)

    @staticmethod
    def create(parentModule, base_name):
        return _odb.dbModNet_create(parentModule, base_name)

    @staticmethod
    def destroy(*args):
        return _odb.dbModNet_destroy(*args)

    def __init__(self):
        _odb.dbModNet_swiginit(self, _odb.new_dbModNet())
    __swig_destroy__ = _odb.delete_dbModNet

# Register dbModNet in _odb:
_odb.dbModNet_swigregister(dbModNet)

def dbModNet_getModNet(block, id):
    return _odb.dbModNet_getModNet(block, id)

def dbModNet_create(parentModule, base_name):
    return _odb.dbModNet_create(parentModule, base_name)

def dbModNet_destroy(*args):
    return _odb.dbModNet_destroy(*args)

class dbModule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbModule_getName(self)

    def setModInst(self, mod_inst):
        return _odb.dbModule_setModInst(self, mod_inst)

    def getModInst(self):
        return _odb.dbModule_getModInst(self)

    def getHierarchicalName(self):
        return _odb.dbModule_getHierarchicalName(self)

    def getModNet(self, net_name):
        return _odb.dbModule_getModNet(self, net_name)

    def addInst(self, inst):
        return _odb.dbModule_addInst(self, inst)

    def getOwner(self):
        return _odb.dbModule_getOwner(self)

    def getChildren(self):
        return _odb.dbModule_getChildren(self)

    def getModInsts(self):
        return _odb.dbModule_getModInsts(self)

    def getModNets(self):
        return _odb.dbModule_getModNets(self)

    def getPorts(self):
        return _odb.dbModule_getPorts(self)

    def getModBTerms(self):
        return _odb.dbModule_getModBTerms(self)

    def getModBTerm(self, id):
        return _odb.dbModule_getModBTerm(self, id)

    def getInsts(self):
        return _odb.dbModule_getInsts(self)

    def findModInst(self, name):
        return _odb.dbModule_findModInst(self, name)

    def findDbInst(self, name):
        return _odb.dbModule_findDbInst(self, name)

    def findModBTerm(self, name):
        return _odb.dbModule_findModBTerm(self, name)

    def getLeafInsts(self):
        return _odb.dbModule_getLeafInsts(self)

    def getModInstCount(self):
        return _odb.dbModule_getModInstCount(self)

    def getDbInstCount(self):
        return _odb.dbModule_getDbInstCount(self)

    def getHeadDbModBTerm(self):
        return _odb.dbModule_getHeadDbModBTerm(self)

    def canSwapWith(self, new_module):
        return _odb.dbModule_canSwapWith(self, new_module)

    def isTop(self):
        return _odb.dbModule_isTop(self)

    @staticmethod
    def create(block, name):
        return _odb.dbModule_create(block, name)

    @staticmethod
    def destroy(module):
        return _odb.dbModule_destroy(module)

    @staticmethod
    def getModule(block_, dbid_):
        return _odb.dbModule_getModule(block_, dbid_)

    @staticmethod
    def makeUniqueDbModule(cell_name, inst_name, block):
        return _odb.dbModule_makeUniqueDbModule(cell_name, inst_name, block)

    def __init__(self):
        _odb.dbModule_swiginit(self, _odb.new_dbModule())
    __swig_destroy__ = _odb.delete_dbModule

# Register dbModule in _odb:
_odb.dbModule_swigregister(dbModule)

def dbModule_create(block, name):
    return _odb.dbModule_create(block, name)

def dbModule_destroy(module):
    return _odb.dbModule_destroy(module)

def dbModule_getModule(block_, dbid_):
    return _odb.dbModule_getModule(block_, dbid_)

def dbModule_makeUniqueDbModule(cell_name, inst_name, block):
    return _odb.dbModule_makeUniqueDbModule(cell_name, inst_name, block)

class dbNetTrack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBox(self):
        return _odb.dbNetTrack_getBox(self)

    def getNet(self):
        return _odb.dbNetTrack_getNet(self)

    def getLayer(self):
        return _odb.dbNetTrack_getLayer(self)

    @staticmethod
    def create(net, layer, box):
        return _odb.dbNetTrack_create(net, layer, box)

    @staticmethod
    def getNetTrack(block, dbid):
        return _odb.dbNetTrack_getNetTrack(block, dbid)

    @staticmethod
    def destroy(*args):
        return _odb.dbNetTrack_destroy(*args)

    def __init__(self):
        _odb.dbNetTrack_swiginit(self, _odb.new_dbNetTrack())
    __swig_destroy__ = _odb.delete_dbNetTrack

# Register dbNetTrack in _odb:
_odb.dbNetTrack_swigregister(dbNetTrack)

def dbNetTrack_create(net, layer, box):
    return _odb.dbNetTrack_create(net, layer, box)

def dbNetTrack_getNetTrack(block, dbid):
    return _odb.dbNetTrack_getNetTrack(block, dbid)

def dbNetTrack_destroy(*args):
    return _odb.dbNetTrack_destroy(*args)

class dbPolygon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getPolygon(self):
        return _odb.dbPolygon_getPolygon(self)

    def getDesignRuleWidth(self):
        return _odb.dbPolygon_getDesignRuleWidth(self)

    def getTechLayer(self):
        return _odb.dbPolygon_getTechLayer(self)

    def getGeometry(self):
        return _odb.dbPolygon_getGeometry(self)

    def setDesignRuleWidth(self, design_rule_width):
        return _odb.dbPolygon_setDesignRuleWidth(self, design_rule_width)

    @staticmethod
    def create(*args):
        return _odb.dbPolygon_create(*args)

    def __init__(self):
        _odb.dbPolygon_swiginit(self, _odb.new_dbPolygon())
    __swig_destroy__ = _odb.delete_dbPolygon

# Register dbPolygon in _odb:
_odb.dbPolygon_swigregister(dbPolygon)

def dbPolygon_create(*args):
    return _odb.dbPolygon_create(*args)

class dbPowerDomain(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbPowerDomain_getName(self)

    def getGroup(self):
        return _odb.dbPowerDomain_getGroup(self)

    def setTop(self, top):
        return _odb.dbPowerDomain_setTop(self, top)

    def isTop(self):
        return _odb.dbPowerDomain_isTop(self)

    def setParent(self, parent):
        return _odb.dbPowerDomain_setParent(self, parent)

    def getParent(self):
        return _odb.dbPowerDomain_getParent(self)

    def setVoltage(self, voltage):
        return _odb.dbPowerDomain_setVoltage(self, voltage)

    def getVoltage(self):
        return _odb.dbPowerDomain_getVoltage(self)

    def setGroup(self, group):
        return _odb.dbPowerDomain_setGroup(self, group)

    @staticmethod
    def create(block, name):
        return _odb.dbPowerDomain_create(block, name)

    @staticmethod
    def destroy(pd):
        return _odb.dbPowerDomain_destroy(pd)

    def addElement(self, element):
        return _odb.dbPowerDomain_addElement(self, element)

    def getElements(self):
        return _odb.dbPowerDomain_getElements(self)

    def addPowerSwitch(self, ps):
        return _odb.dbPowerDomain_addPowerSwitch(self, ps)

    def addIsolation(self, iso):
        return _odb.dbPowerDomain_addIsolation(self, iso)

    def addLevelShifter(self, shifter):
        return _odb.dbPowerDomain_addLevelShifter(self, shifter)

    def getPowerSwitches(self):
        return _odb.dbPowerDomain_getPowerSwitches(self)

    def getIsolations(self):
        return _odb.dbPowerDomain_getIsolations(self)

    def getLevelShifters(self):
        return _odb.dbPowerDomain_getLevelShifters(self)

    def setArea(self):
        return _odb.dbPowerDomain_setArea(self)

    def getArea(self):
        return _odb.dbPowerDomain_getArea(self)

    def __init__(self):
        _odb.dbPowerDomain_swiginit(self, _odb.new_dbPowerDomain())
    __swig_destroy__ = _odb.delete_dbPowerDomain

# Register dbPowerDomain in _odb:
_odb.dbPowerDomain_swigregister(dbPowerDomain)

def dbPowerDomain_create(block, name):
    return _odb.dbPowerDomain_create(block, name)

def dbPowerDomain_destroy(pd):
    return _odb.dbPowerDomain_destroy(pd)

class dbPowerSwitch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbPowerSwitch_getName(self)

    def setPowerDomain(self, power_domain):
        return _odb.dbPowerSwitch_setPowerDomain(self, power_domain)

    def getPowerDomain(self):
        return _odb.dbPowerSwitch_getPowerDomain(self)

    @staticmethod
    def create(block, name):
        return _odb.dbPowerSwitch_create(block, name)

    @staticmethod
    def destroy(ps):
        return _odb.dbPowerSwitch_destroy(ps)

    def addInSupplyPort(self, in_port, net):
        return _odb.dbPowerSwitch_addInSupplyPort(self, in_port, net)

    def setOutSupplyPort(self, out_port, net):
        return _odb.dbPowerSwitch_setOutSupplyPort(self, out_port, net)

    def addControlPort(self, control_port, control_net):
        return _odb.dbPowerSwitch_addControlPort(self, control_port, control_net)

    def addAcknowledgePort(self, port_name, net_name, boolean_expression):
        return _odb.dbPowerSwitch_addAcknowledgePort(self, port_name, net_name, boolean_expression)

    def addOnState(self, on_state, port_name, boolean_expression):
        return _odb.dbPowerSwitch_addOnState(self, on_state, port_name, boolean_expression)

    def setLibCell(self, master):
        return _odb.dbPowerSwitch_setLibCell(self, master)

    def addPortMap(self, *args):
        return _odb.dbPowerSwitch_addPortMap(self, *args)

    def getControlPorts(self):
        return _odb.dbPowerSwitch_getControlPorts(self)

    def getInputSupplyPorts(self):
        return _odb.dbPowerSwitch_getInputSupplyPorts(self)

    def getOutputSupplyPort(self):
        return _odb.dbPowerSwitch_getOutputSupplyPort(self)

    def getAcknowledgePorts(self):
        return _odb.dbPowerSwitch_getAcknowledgePorts(self)

    def getOnStates(self):
        return _odb.dbPowerSwitch_getOnStates(self)

    def getLibCell(self):
        return _odb.dbPowerSwitch_getLibCell(self)

    def getPortMap(self):
        return _odb.dbPowerSwitch_getPortMap(self)

    def __init__(self):
        _odb.dbPowerSwitch_swiginit(self, _odb.new_dbPowerSwitch())
    __swig_destroy__ = _odb.delete_dbPowerSwitch

# Register dbPowerSwitch in _odb:
_odb.dbPowerSwitch_swigregister(dbPowerSwitch)

def dbPowerSwitch_create(block, name):
    return _odb.dbPowerSwitch_create(block, name)

def dbPowerSwitch_destroy(ps):
    return _odb.dbPowerSwitch_destroy(ps)

class dbProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STRING_PROP = _odb.dbProperty_STRING_PROP
    BOOL_PROP = _odb.dbProperty_BOOL_PROP
    INT_PROP = _odb.dbProperty_INT_PROP
    DOUBLE_PROP = _odb.dbProperty_DOUBLE_PROP

    def getType(self):
        return _odb.dbProperty_getType(self)

    def getName(self):
        return _odb.dbProperty_getName(self)

    def getPropOwner(self):
        return _odb.dbProperty_getPropOwner(self)

    @staticmethod
    def find(*args):
        return _odb.dbProperty_find(*args)

    @staticmethod
    def destroyProperties(obj):
        return _odb.dbProperty_destroyProperties(obj)

    @staticmethod
    def getProperties(object):
        return _odb.dbProperty_getProperties(object)

    @staticmethod
    def destroy(*args):
        return _odb.dbProperty_destroy(*args)

    @staticmethod
    def writeProperties(object):
        return _odb.dbProperty_writeProperties(object)

    @staticmethod
    def writePropValue(prop):
        return _odb.dbProperty_writePropValue(prop)

    def __init__(self):
        _odb.dbProperty_swiginit(self, _odb.new_dbProperty())
    __swig_destroy__ = _odb.delete_dbProperty

# Register dbProperty in _odb:
_odb.dbProperty_swigregister(dbProperty)

def dbProperty_find(*args):
    return _odb.dbProperty_find(*args)

def dbProperty_destroyProperties(obj):
    return _odb.dbProperty_destroyProperties(obj)

def dbProperty_getProperties(object):
    return _odb.dbProperty_getProperties(object)

def dbProperty_destroy(*args):
    return _odb.dbProperty_destroy(*args)

def dbProperty_writeProperties(object):
    return _odb.dbProperty_writeProperties(object)

def dbProperty_writePropValue(prop):
    return _odb.dbProperty_writePropValue(prop)

class dbScanChain(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getScanPartitions(self):
        return _odb.dbScanChain_getScanPartitions(self)

    def getName(self):
        return _odb.dbScanChain_getName(self)

    def setName(self, name):
        return _odb.dbScanChain_setName(self, name)

    def setScanIn(self, *args):
        return _odb.dbScanChain_setScanIn(self, *args)

    def getScanIn(self):
        return _odb.dbScanChain_getScanIn(self)

    def setScanOut(self, *args):
        return _odb.dbScanChain_setScanOut(self, *args)

    def getScanOut(self):
        return _odb.dbScanChain_getScanOut(self)

    def setScanEnable(self, *args):
        return _odb.dbScanChain_setScanEnable(self, *args)

    def getScanEnable(self):
        return _odb.dbScanChain_getScanEnable(self)

    def setTestMode(self, *args):
        return _odb.dbScanChain_setTestMode(self, *args)

    def getTestMode(self):
        return _odb.dbScanChain_getTestMode(self)

    def setTestModeName(self, test_mode_name):
        return _odb.dbScanChain_setTestModeName(self, test_mode_name)

    def getTestModeName(self):
        return _odb.dbScanChain_getTestModeName(self)

    @staticmethod
    def create(dft):
        return _odb.dbScanChain_create(dft)

    def __init__(self):
        _odb.dbScanChain_swiginit(self, _odb.new_dbScanChain())
    __swig_destroy__ = _odb.delete_dbScanChain

# Register dbScanChain in _odb:
_odb.dbScanChain_swigregister(dbScanChain)

def dbScanChain_create(dft):
    return _odb.dbScanChain_create(dft)

class dbScanInst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ClockEdge_Rising = _odb.dbScanInst_ClockEdge_Rising
    ClockEdge_Falling = _odb.dbScanInst_ClockEdge_Falling

    def setScanClock(self, scan_clock):
        return _odb.dbScanInst_setScanClock(self, scan_clock)

    def getScanClock(self):
        return _odb.dbScanInst_getScanClock(self)

    def setClockEdge(self, clock_edge):
        return _odb.dbScanInst_setClockEdge(self, clock_edge)

    def getClockEdge(self):
        return _odb.dbScanInst_getClockEdge(self)

    def getClockEdgeString(self):
        return _odb.dbScanInst_getClockEdgeString(self)

    def setBits(self, bits):
        return _odb.dbScanInst_setBits(self, bits)

    def getBits(self):
        return _odb.dbScanInst_getBits(self)

    def setScanEnable(self, *args):
        return _odb.dbScanInst_setScanEnable(self, *args)

    def getScanEnable(self):
        return _odb.dbScanInst_getScanEnable(self)

    def setAccessPins(self, access_pins):
        return _odb.dbScanInst_setAccessPins(self, access_pins)

    def getAccessPins(self):
        return _odb.dbScanInst_getAccessPins(self)

    def getInst(self):
        return _odb.dbScanInst_getInst(self)

    def insertAtFront(self, scan_list):
        return _odb.dbScanInst_insertAtFront(self, scan_list)

    @staticmethod
    def create(scan_list, inst):
        return _odb.dbScanInst_create(scan_list, inst)

    def __init__(self):
        _odb.dbScanInst_swiginit(self, _odb.new_dbScanInst())
    __swig_destroy__ = _odb.delete_dbScanInst

# Register dbScanInst in _odb:
_odb.dbScanInst_swigregister(dbScanInst)

def dbScanInst_create(scan_list, inst):
    return _odb.dbScanInst_create(scan_list, inst)

class dbScanList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getScanInsts(self):
        return _odb.dbScanList_getScanInsts(self)

    def add(self, inst):
        return _odb.dbScanList_add(self, inst)

    @staticmethod
    def create(scan_partition):
        return _odb.dbScanList_create(scan_partition)

    def __init__(self):
        _odb.dbScanList_swiginit(self, _odb.new_dbScanList())
    __swig_destroy__ = _odb.delete_dbScanList

# Register dbScanList in _odb:
_odb.dbScanList_swigregister(dbScanList)

def dbScanList_create(scan_partition):
    return _odb.dbScanList_create(scan_partition)

class dbScanPartition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getScanLists(self):
        return _odb.dbScanPartition_getScanLists(self)

    def getName(self):
        return _odb.dbScanPartition_getName(self)

    def setName(self, name):
        return _odb.dbScanPartition_setName(self, name)

    @staticmethod
    def create(chain):
        return _odb.dbScanPartition_create(chain)

    def __init__(self):
        _odb.dbScanPartition_swiginit(self, _odb.new_dbScanPartition())
    __swig_destroy__ = _odb.delete_dbScanPartition

# Register dbScanPartition in _odb:
_odb.dbScanPartition_swigregister(dbScanPartition)

def dbScanPartition_create(chain):
    return _odb.dbScanPartition_create(chain)

class dbScanPin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getPin(self):
        return _odb.dbScanPin_getPin(self)

    def setPin(self, *args):
        return _odb.dbScanPin_setPin(self, *args)

    @staticmethod
    def create(*args):
        return _odb.dbScanPin_create(*args)

    def __init__(self):
        _odb.dbScanPin_swiginit(self, _odb.new_dbScanPin())
    __swig_destroy__ = _odb.delete_dbScanPin

# Register dbScanPin in _odb:
_odb.dbScanPin_swigregister(dbScanPin)

def dbScanPin_create(*args):
    return _odb.dbScanPin_create(*args)

class dbTechLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _odb.dbTechLayer_NONE
    NWELL = _odb.dbTechLayer_NWELL
    PWELL = _odb.dbTechLayer_PWELL
    ABOVEDIEEDGE = _odb.dbTechLayer_ABOVEDIEEDGE
    BELOWDIEEDGE = _odb.dbTechLayer_BELOWDIEEDGE
    DIFFUSION = _odb.dbTechLayer_DIFFUSION
    TRIMPOLY = _odb.dbTechLayer_TRIMPOLY
    MIMCAP = _odb.dbTechLayer_MIMCAP
    STACKEDMIMCAP = _odb.dbTechLayer_STACKEDMIMCAP
    TSVMETAL = _odb.dbTechLayer_TSVMETAL
    TSV = _odb.dbTechLayer_TSV
    PASSIVATION = _odb.dbTechLayer_PASSIVATION
    HIGHR = _odb.dbTechLayer_HIGHR
    TRIMMETAL = _odb.dbTechLayer_TRIMMETAL
    REGION = _odb.dbTechLayer_REGION
    MEOL = _odb.dbTechLayer_MEOL
    WELLDISTANCE = _odb.dbTechLayer_WELLDISTANCE
    CPODE = _odb.dbTechLayer_CPODE
    PADMETAL = _odb.dbTechLayer_PADMETAL
    POLYROUTING = _odb.dbTechLayer_POLYROUTING

    def setWrongWayWidth(self, wrong_way_width):
        return _odb.dbTechLayer_setWrongWayWidth(self, wrong_way_width)

    def getWrongWayWidth(self):
        return _odb.dbTechLayer_getWrongWayWidth(self)

    def setLayerAdjustment(self, layer_adjustment):
        return _odb.dbTechLayer_setLayerAdjustment(self, layer_adjustment)

    def getLayerAdjustment(self):
        return _odb.dbTechLayer_getLayerAdjustment(self)

    def getOrthSpacingTable(self, tbl):
        return _odb.dbTechLayer_getOrthSpacingTable(self, tbl)

    def getTechLayerCutClassRules(self):
        return _odb.dbTechLayer_getTechLayerCutClassRules(self)

    def findTechLayerCutClassRule(self, name):
        return _odb.dbTechLayer_findTechLayerCutClassRule(self, name)

    def getTechLayerSpacingEolRules(self):
        return _odb.dbTechLayer_getTechLayerSpacingEolRules(self)

    def getTechLayerCutSpacingRules(self):
        return _odb.dbTechLayer_getTechLayerCutSpacingRules(self)

    def getTechLayerMinStepRules(self):
        return _odb.dbTechLayer_getTechLayerMinStepRules(self)

    def getTechLayerCornerSpacingRules(self):
        return _odb.dbTechLayer_getTechLayerCornerSpacingRules(self)

    def getTechLayerSpacingTablePrlRules(self):
        return _odb.dbTechLayer_getTechLayerSpacingTablePrlRules(self)

    def getTechLayerCutSpacingTableOrthRules(self):
        return _odb.dbTechLayer_getTechLayerCutSpacingTableOrthRules(self)

    def getTechLayerCutSpacingTableDefRules(self):
        return _odb.dbTechLayer_getTechLayerCutSpacingTableDefRules(self)

    def getTechLayerCutEnclosureRules(self):
        return _odb.dbTechLayer_getTechLayerCutEnclosureRules(self)

    def getTechLayerEolExtensionRules(self):
        return _odb.dbTechLayer_getTechLayerEolExtensionRules(self)

    def getTechLayerArraySpacingRules(self):
        return _odb.dbTechLayer_getTechLayerArraySpacingRules(self)

    def getTechLayerEolKeepOutRules(self):
        return _odb.dbTechLayer_getTechLayerEolKeepOutRules(self)

    def getTechLayerMaxSpacingRules(self):
        return _odb.dbTechLayer_getTechLayerMaxSpacingRules(self)

    def getTechLayerWidthTableRules(self):
        return _odb.dbTechLayer_getTechLayerWidthTableRules(self)

    def getTechLayerMinCutRules(self):
        return _odb.dbTechLayer_getTechLayerMinCutRules(self)

    def getTechLayerAreaRules(self):
        return _odb.dbTechLayer_getTechLayerAreaRules(self)

    def getTechLayerForbiddenSpacingRules(self):
        return _odb.dbTechLayer_getTechLayerForbiddenSpacingRules(self)

    def getTechLayerKeepOutZoneRules(self):
        return _odb.dbTechLayer_getTechLayerKeepOutZoneRules(self)

    def getTechLayerWrongDirSpacingRules(self):
        return _odb.dbTechLayer_getTechLayerWrongDirSpacingRules(self)

    def getTechLayerTwoWiresForbiddenSpcRules(self):
        return _odb.dbTechLayer_getTechLayerTwoWiresForbiddenSpcRules(self)

    def setRectOnly(self, rect_only):
        return _odb.dbTechLayer_setRectOnly(self, rect_only)

    def isRectOnly(self):
        return _odb.dbTechLayer_isRectOnly(self)

    def setRightWayOnGridOnly(self, right_way_on_grid_only):
        return _odb.dbTechLayer_setRightWayOnGridOnly(self, right_way_on_grid_only)

    def isRightWayOnGridOnly(self):
        return _odb.dbTechLayer_isRightWayOnGridOnly(self)

    def setRightWayOnGridOnlyCheckMask(self, right_way_on_grid_only_check_mask):
        return _odb.dbTechLayer_setRightWayOnGridOnlyCheckMask(self, right_way_on_grid_only_check_mask)

    def isRightWayOnGridOnlyCheckMask(self):
        return _odb.dbTechLayer_isRightWayOnGridOnlyCheckMask(self)

    def setRectOnlyExceptNonCorePins(self, rect_only_except_non_core_pins):
        return _odb.dbTechLayer_setRectOnlyExceptNonCorePins(self, rect_only_except_non_core_pins)

    def isRectOnlyExceptNonCorePins(self):
        return _odb.dbTechLayer_isRectOnlyExceptNonCorePins(self)

    def findV55Spacing(self, width, prl):
        return _odb.dbTechLayer_findV55Spacing(self, width, prl)

    def findTwSpacing(self, width1, width2, prl):
        return _odb.dbTechLayer_findTwSpacing(self, width1, width2, prl)

    def setLef58Type(self, type):
        return _odb.dbTechLayer_setLef58Type(self, type)

    def getLef58Type(self):
        return _odb.dbTechLayer_getLef58Type(self)

    def getLef58TypeString(self):
        return _odb.dbTechLayer_getLef58TypeString(self)

    def getName(self):
        return _odb.dbTechLayer_getName(self)

    def getConstName(self):
        return _odb.dbTechLayer_getConstName(self)

    def hasAlias(self):
        return _odb.dbTechLayer_hasAlias(self)

    def getAlias(self):
        return _odb.dbTechLayer_getAlias(self)

    def setAlias(self, alias):
        return _odb.dbTechLayer_setAlias(self, alias)

    def getWidth(self):
        return _odb.dbTechLayer_getWidth(self)

    def setWidth(self, width):
        return _odb.dbTechLayer_setWidth(self, width)

    def setSpacing(self, spacing):
        return _odb.dbTechLayer_setSpacing(self, spacing)

    def getSpacing(self, *args):
        return _odb.dbTechLayer_getSpacing(self, *args)

    def getNumMasks(self):
        return _odb.dbTechLayer_getNumMasks(self)

    def setNumMasks(self, number):
        return _odb.dbTechLayer_setNumMasks(self, number)

    def getMaxWideDRCRange(self, owidth, olength):
        return _odb.dbTechLayer_getMaxWideDRCRange(self, owidth, olength)

    def getMinWideDRCRange(self, owidth, olength):
        return _odb.dbTechLayer_getMinWideDRCRange(self, owidth, olength)

    def getV54SpacingRules(self):
        return _odb.dbTechLayer_getV54SpacingRules(self)

    def hasV55SpacingRules(self):
        return _odb.dbTechLayer_hasV55SpacingRules(self)

    def getV55SpacingWidthsAndLengths(self, width_idx, length_idx):
        return _odb.dbTechLayer_getV55SpacingWidthsAndLengths(self, width_idx, length_idx)

    def printV55SpacingRules(self, writer):
        return _odb.dbTechLayer_printV55SpacingRules(self, writer)

    def getV55SpacingTable(self, sptbl):
        return _odb.dbTechLayer_getV55SpacingTable(self, sptbl)

    def initV55LengthIndex(self, numelems):
        return _odb.dbTechLayer_initV55LengthIndex(self, numelems)

    def addV55LengthEntry(self, length):
        return _odb.dbTechLayer_addV55LengthEntry(self, length)

    def initV55WidthIndex(self, numelems):
        return _odb.dbTechLayer_initV55WidthIndex(self, numelems)

    def addV55WidthEntry(self, width):
        return _odb.dbTechLayer_addV55WidthEntry(self, width)

    def initV55SpacingTable(self, numrows, numcols):
        return _odb.dbTechLayer_initV55SpacingTable(self, numrows, numcols)

    def addV55SpacingTableEntry(self, inrow, incol, spacing):
        return _odb.dbTechLayer_addV55SpacingTableEntry(self, inrow, incol, spacing)

    def getV55InfluenceRules(self):
        return _odb.dbTechLayer_getV55InfluenceRules(self)

    def hasTwoWidthsSpacingRules(self):
        return _odb.dbTechLayer_hasTwoWidthsSpacingRules(self)

    def printTwoWidthsSpacingRules(self, writer):
        return _odb.dbTechLayer_printTwoWidthsSpacingRules(self, writer)

    def getTwoWidthsSpacingTable(self, sptbl):
        return _odb.dbTechLayer_getTwoWidthsSpacingTable(self, sptbl)

    def getTwoWidthsSpacingTableNumWidths(self):
        return _odb.dbTechLayer_getTwoWidthsSpacingTableNumWidths(self)

    def getTwoWidthsSpacingTableWidth(self, row):
        return _odb.dbTechLayer_getTwoWidthsSpacingTableWidth(self, row)

    def getTwoWidthsSpacingTableHasPRL(self, row):
        return _odb.dbTechLayer_getTwoWidthsSpacingTableHasPRL(self, row)

    def getTwoWidthsSpacingTablePRL(self, row):
        return _odb.dbTechLayer_getTwoWidthsSpacingTablePRL(self, row)

    def getTwoWidthsSpacingTableEntry(self, row, col):
        return _odb.dbTechLayer_getTwoWidthsSpacingTableEntry(self, row, col)

    def initTwoWidths(self, num_widths):
        return _odb.dbTechLayer_initTwoWidths(self, num_widths)

    def addTwoWidthsIndexEntry(self, width, parallel_run_length=-1):
        return _odb.dbTechLayer_addTwoWidthsIndexEntry(self, width, parallel_run_length)

    def addTwoWidthsSpacingTableEntry(self, inrow, incol, spacing):
        return _odb.dbTechLayer_addTwoWidthsSpacingTableEntry(self, inrow, incol, spacing)

    def createDefaultAntennaRule(self):
        return _odb.dbTechLayer_createDefaultAntennaRule(self)

    def createOxide2AntennaRule(self):
        return _odb.dbTechLayer_createOxide2AntennaRule(self)

    def hasDefaultAntennaRule(self):
        return _odb.dbTechLayer_hasDefaultAntennaRule(self)

    def hasOxide2AntennaRule(self):
        return _odb.dbTechLayer_hasOxide2AntennaRule(self)

    def getDefaultAntennaRule(self):
        return _odb.dbTechLayer_getDefaultAntennaRule(self)

    def getOxide2AntennaRule(self):
        return _odb.dbTechLayer_getOxide2AntennaRule(self)

    def writeAntennaRulesLef(self, writer):
        return _odb.dbTechLayer_writeAntennaRulesLef(self, writer)

    def getMinimumCutRules(self, cut_rules):
        return _odb.dbTechLayer_getMinimumCutRules(self, cut_rules)

    def getMinEnclosureRules(self, enc_rules):
        return _odb.dbTechLayer_getMinEnclosureRules(self, enc_rules)

    def getMinCutRules(self):
        return _odb.dbTechLayer_getMinCutRules(self)

    def getMinEncRules(self):
        return _odb.dbTechLayer_getMinEncRules(self)

    def getPitch(self):
        return _odb.dbTechLayer_getPitch(self)

    def getPitchX(self):
        return _odb.dbTechLayer_getPitchX(self)

    def getPitchY(self):
        return _odb.dbTechLayer_getPitchY(self)

    def getFirstLastPitch(self):
        return _odb.dbTechLayer_getFirstLastPitch(self)

    def setPitch(self, pitch):
        return _odb.dbTechLayer_setPitch(self, pitch)

    def setPitchXY(self, pitch_x, pitch_y):
        return _odb.dbTechLayer_setPitchXY(self, pitch_x, pitch_y)

    def setFirstLastPitch(self, first_last_pitch):
        return _odb.dbTechLayer_setFirstLastPitch(self, first_last_pitch)

    def hasXYPitch(self):
        return _odb.dbTechLayer_hasXYPitch(self)

    def getOffset(self):
        return _odb.dbTechLayer_getOffset(self)

    def getOffsetX(self):
        return _odb.dbTechLayer_getOffsetX(self)

    def getOffsetY(self):
        return _odb.dbTechLayer_getOffsetY(self)

    def setOffset(self, pitch):
        return _odb.dbTechLayer_setOffset(self, pitch)

    def setOffsetXY(self, pitch_x, pitch_y):
        return _odb.dbTechLayer_setOffsetXY(self, pitch_x, pitch_y)

    def hasXYOffset(self):
        return _odb.dbTechLayer_hasXYOffset(self)

    def getThickness(self, inthk):
        return _odb.dbTechLayer_getThickness(self, inthk)

    def setThickness(self, thickness):
        return _odb.dbTechLayer_setThickness(self, thickness)

    def hasArea(self):
        return _odb.dbTechLayer_hasArea(self)

    def getArea(self):
        return _odb.dbTechLayer_getArea(self)

    def setArea(self, area):
        return _odb.dbTechLayer_setArea(self, area)

    def hasMaxWidth(self):
        return _odb.dbTechLayer_hasMaxWidth(self)

    def getMaxWidth(self):
        return _odb.dbTechLayer_getMaxWidth(self)

    def setMaxWidth(self, max_width):
        return _odb.dbTechLayer_setMaxWidth(self, max_width)

    def getMinWidth(self):
        return _odb.dbTechLayer_getMinWidth(self)

    def setMinWidth(self, max_width):
        return _odb.dbTechLayer_setMinWidth(self, max_width)

    def hasMinStep(self):
        return _odb.dbTechLayer_hasMinStep(self)

    def getMinStep(self):
        return _odb.dbTechLayer_getMinStep(self)

    def setMinStep(self, min_step):
        return _odb.dbTechLayer_setMinStep(self, min_step)

    def getMinStepType(self):
        return _odb.dbTechLayer_getMinStepType(self)

    def setMinStepType(self, type):
        return _odb.dbTechLayer_setMinStepType(self, type)

    def hasMinStepMaxLength(self):
        return _odb.dbTechLayer_hasMinStepMaxLength(self)

    def getMinStepMaxLength(self):
        return _odb.dbTechLayer_getMinStepMaxLength(self)

    def setMinStepMaxLength(self, length):
        return _odb.dbTechLayer_setMinStepMaxLength(self, length)

    def hasMinStepMaxEdges(self):
        return _odb.dbTechLayer_hasMinStepMaxEdges(self)

    def getMinStepMaxEdges(self):
        return _odb.dbTechLayer_getMinStepMaxEdges(self)

    def setMinStepMaxEdges(self, edges):
        return _odb.dbTechLayer_setMinStepMaxEdges(self, edges)

    def hasProtrusion(self):
        return _odb.dbTechLayer_hasProtrusion(self)

    def getProtrusionWidth(self):
        return _odb.dbTechLayer_getProtrusionWidth(self)

    def getProtrusionLength(self):
        return _odb.dbTechLayer_getProtrusionLength(self)

    def getProtrusionFromWidth(self):
        return _odb.dbTechLayer_getProtrusionFromWidth(self)

    def setProtrusion(self, pt_width, pt_length, pt_from_width):
        return _odb.dbTechLayer_setProtrusion(self, pt_width, pt_length, pt_from_width)

    def getType(self):
        return _odb.dbTechLayer_getType(self)

    def getDirection(self):
        return _odb.dbTechLayer_getDirection(self)

    def setDirection(self, direction):
        return _odb.dbTechLayer_setDirection(self, direction)

    def getResistance(self):
        return _odb.dbTechLayer_getResistance(self)

    def setResistance(self, res):
        return _odb.dbTechLayer_setResistance(self, res)

    def getCapacitance(self):
        return _odb.dbTechLayer_getCapacitance(self)

    def setCapacitance(self, cap):
        return _odb.dbTechLayer_setCapacitance(self, cap)

    def getEdgeCapacitance(self):
        return _odb.dbTechLayer_getEdgeCapacitance(self)

    def setEdgeCapacitance(self, cap):
        return _odb.dbTechLayer_setEdgeCapacitance(self, cap)

    def getWireExtension(self):
        return _odb.dbTechLayer_getWireExtension(self)

    def setWireExtension(self, ext):
        return _odb.dbTechLayer_setWireExtension(self, ext)

    def getNumber(self):
        return _odb.dbTechLayer_getNumber(self)

    def getRoutingLevel(self):
        return _odb.dbTechLayer_getRoutingLevel(self)

    def getLowerLayer(self):
        return _odb.dbTechLayer_getLowerLayer(self)

    def getUpperLayer(self):
        return _odb.dbTechLayer_getUpperLayer(self)

    def getTech(self):
        return _odb.dbTechLayer_getTech(self)

    def hasOrthSpacingTable(self):
        return _odb.dbTechLayer_hasOrthSpacingTable(self)

    def addOrthSpacingTableEntry(self, within, spacing):
        return _odb.dbTechLayer_addOrthSpacingTableEntry(self, within, spacing)

    @staticmethod
    def create(tech, name, type):
        return _odb.dbTechLayer_create(tech, name, type)

    @staticmethod
    def getTechLayer(tech, oid):
        return _odb.dbTechLayer_getTechLayer(tech, oid)

    def __init__(self):
        _odb.dbTechLayer_swiginit(self, _odb.new_dbTechLayer())
    __swig_destroy__ = _odb.delete_dbTechLayer

# Register dbTechLayer in _odb:
_odb.dbTechLayer_swigregister(dbTechLayer)

def dbTechLayer_create(tech, name, type):
    return _odb.dbTechLayer_create(tech, name, type)

def dbTechLayer_getTechLayer(tech, oid):
    return _odb.dbTechLayer_getTechLayer(tech, oid)

class dbTechLayerAreaRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setArea(self, area):
        return _odb.dbTechLayerAreaRule_setArea(self, area)

    def getArea(self):
        return _odb.dbTechLayerAreaRule_getArea(self)

    def setExceptMinWidth(self, except_min_width):
        return _odb.dbTechLayerAreaRule_setExceptMinWidth(self, except_min_width)

    def getExceptMinWidth(self):
        return _odb.dbTechLayerAreaRule_getExceptMinWidth(self)

    def setExceptEdgeLength(self, except_edge_length):
        return _odb.dbTechLayerAreaRule_setExceptEdgeLength(self, except_edge_length)

    def getExceptEdgeLength(self):
        return _odb.dbTechLayerAreaRule_getExceptEdgeLength(self)

    def setExceptEdgeLengths(self, except_edge_lengths):
        return _odb.dbTechLayerAreaRule_setExceptEdgeLengths(self, except_edge_lengths)

    def getExceptEdgeLengths(self):
        return _odb.dbTechLayerAreaRule_getExceptEdgeLengths(self)

    def setExceptMinSize(self, except_min_size):
        return _odb.dbTechLayerAreaRule_setExceptMinSize(self, except_min_size)

    def getExceptMinSize(self):
        return _odb.dbTechLayerAreaRule_getExceptMinSize(self)

    def setExceptStep(self, except_step):
        return _odb.dbTechLayerAreaRule_setExceptStep(self, except_step)

    def getExceptStep(self):
        return _odb.dbTechLayerAreaRule_getExceptStep(self)

    def setMask(self, mask):
        return _odb.dbTechLayerAreaRule_setMask(self, mask)

    def getMask(self):
        return _odb.dbTechLayerAreaRule_getMask(self)

    def setRectWidth(self, rect_width):
        return _odb.dbTechLayerAreaRule_setRectWidth(self, rect_width)

    def getRectWidth(self):
        return _odb.dbTechLayerAreaRule_getRectWidth(self)

    def setExceptRectangle(self, except_rectangle):
        return _odb.dbTechLayerAreaRule_setExceptRectangle(self, except_rectangle)

    def isExceptRectangle(self):
        return _odb.dbTechLayerAreaRule_isExceptRectangle(self)

    def setOverlap(self, overlap):
        return _odb.dbTechLayerAreaRule_setOverlap(self, overlap)

    def getOverlap(self):
        return _odb.dbTechLayerAreaRule_getOverlap(self)

    @staticmethod
    def create(_layer):
        return _odb.dbTechLayerAreaRule_create(_layer)

    def setTrimLayer(self, trim_layer):
        return _odb.dbTechLayerAreaRule_setTrimLayer(self, trim_layer)

    def getTrimLayer(self):
        return _odb.dbTechLayerAreaRule_getTrimLayer(self)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerAreaRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerAreaRule_swiginit(self, _odb.new_dbTechLayerAreaRule())
    __swig_destroy__ = _odb.delete_dbTechLayerAreaRule

# Register dbTechLayerAreaRule in _odb:
_odb.dbTechLayerAreaRule_swigregister(dbTechLayerAreaRule)

def dbTechLayerAreaRule_create(_layer):
    return _odb.dbTechLayerAreaRule_create(_layer)

def dbTechLayerAreaRule_destroy(rule):
    return _odb.dbTechLayerAreaRule_destroy(rule)

class dbTechLayerArraySpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setViaWidth(self, via_width):
        return _odb.dbTechLayerArraySpacingRule_setViaWidth(self, via_width)

    def getViaWidth(self):
        return _odb.dbTechLayerArraySpacingRule_getViaWidth(self)

    def setCutSpacing(self, cut_spacing):
        return _odb.dbTechLayerArraySpacingRule_setCutSpacing(self, cut_spacing)

    def getCutSpacing(self):
        return _odb.dbTechLayerArraySpacingRule_getCutSpacing(self)

    def setWithin(self, within):
        return _odb.dbTechLayerArraySpacingRule_setWithin(self, within)

    def getWithin(self):
        return _odb.dbTechLayerArraySpacingRule_getWithin(self)

    def setArrayWidth(self, array_width):
        return _odb.dbTechLayerArraySpacingRule_setArrayWidth(self, array_width)

    def getArrayWidth(self):
        return _odb.dbTechLayerArraySpacingRule_getArrayWidth(self)

    def setCutClass(self, cut_class):
        return _odb.dbTechLayerArraySpacingRule_setCutClass(self, cut_class)

    def setParallelOverlap(self, parallel_overlap):
        return _odb.dbTechLayerArraySpacingRule_setParallelOverlap(self, parallel_overlap)

    def isParallelOverlap(self):
        return _odb.dbTechLayerArraySpacingRule_isParallelOverlap(self)

    def setLongArray(self, long_array):
        return _odb.dbTechLayerArraySpacingRule_setLongArray(self, long_array)

    def isLongArray(self):
        return _odb.dbTechLayerArraySpacingRule_isLongArray(self)

    def setViaWidthValid(self, via_width_valid):
        return _odb.dbTechLayerArraySpacingRule_setViaWidthValid(self, via_width_valid)

    def isViaWidthValid(self):
        return _odb.dbTechLayerArraySpacingRule_isViaWidthValid(self)

    def setWithinValid(self, within_valid):
        return _odb.dbTechLayerArraySpacingRule_setWithinValid(self, within_valid)

    def isWithinValid(self):
        return _odb.dbTechLayerArraySpacingRule_isWithinValid(self)

    def setCutsArraySpacing(self, num_cuts, spacing):
        return _odb.dbTechLayerArraySpacingRule_setCutsArraySpacing(self, num_cuts, spacing)

    def getCutsArraySpacing(self):
        return _odb.dbTechLayerArraySpacingRule_getCutsArraySpacing(self)

    def getCutClass(self):
        return _odb.dbTechLayerArraySpacingRule_getCutClass(self)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerArraySpacingRule_create(layer)

    @staticmethod
    def getTechLayerArraySpacingRule(inly, dbid):
        return _odb.dbTechLayerArraySpacingRule_getTechLayerArraySpacingRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerArraySpacingRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerArraySpacingRule_swiginit(self, _odb.new_dbTechLayerArraySpacingRule())
    __swig_destroy__ = _odb.delete_dbTechLayerArraySpacingRule

# Register dbTechLayerArraySpacingRule in _odb:
_odb.dbTechLayerArraySpacingRule_swigregister(dbTechLayerArraySpacingRule)

def dbTechLayerArraySpacingRule_create(layer):
    return _odb.dbTechLayerArraySpacingRule_create(layer)

def dbTechLayerArraySpacingRule_getTechLayerArraySpacingRule(inly, dbid):
    return _odb.dbTechLayerArraySpacingRule_getTechLayerArraySpacingRule(inly, dbid)

def dbTechLayerArraySpacingRule_destroy(rule):
    return _odb.dbTechLayerArraySpacingRule_destroy(rule)

class dbTechLayerCornerSpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CONVEXCORNER = _odb.dbTechLayerCornerSpacingRule_CONVEXCORNER
    CONCAVECORNER = _odb.dbTechLayerCornerSpacingRule_CONCAVECORNER

    def setWithin(self, within):
        return _odb.dbTechLayerCornerSpacingRule_setWithin(self, within)

    def getWithin(self):
        return _odb.dbTechLayerCornerSpacingRule_getWithin(self)

    def setEolWidth(self, eol_width):
        return _odb.dbTechLayerCornerSpacingRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odb.dbTechLayerCornerSpacingRule_getEolWidth(self)

    def setJogLength(self, jog_length):
        return _odb.dbTechLayerCornerSpacingRule_setJogLength(self, jog_length)

    def getJogLength(self):
        return _odb.dbTechLayerCornerSpacingRule_getJogLength(self)

    def setEdgeLength(self, edge_length):
        return _odb.dbTechLayerCornerSpacingRule_setEdgeLength(self, edge_length)

    def getEdgeLength(self):
        return _odb.dbTechLayerCornerSpacingRule_getEdgeLength(self)

    def setMinLength(self, min_length):
        return _odb.dbTechLayerCornerSpacingRule_setMinLength(self, min_length)

    def getMinLength(self):
        return _odb.dbTechLayerCornerSpacingRule_getMinLength(self)

    def setExceptNotchLength(self, except_notch_length):
        return _odb.dbTechLayerCornerSpacingRule_setExceptNotchLength(self, except_notch_length)

    def getExceptNotchLength(self):
        return _odb.dbTechLayerCornerSpacingRule_getExceptNotchLength(self)

    def setSameMask(self, same_mask):
        return _odb.dbTechLayerCornerSpacingRule_setSameMask(self, same_mask)

    def isSameMask(self):
        return _odb.dbTechLayerCornerSpacingRule_isSameMask(self)

    def setCornerOnly(self, corner_only):
        return _odb.dbTechLayerCornerSpacingRule_setCornerOnly(self, corner_only)

    def isCornerOnly(self):
        return _odb.dbTechLayerCornerSpacingRule_isCornerOnly(self)

    def setExceptEol(self, except_eol):
        return _odb.dbTechLayerCornerSpacingRule_setExceptEol(self, except_eol)

    def isExceptEol(self):
        return _odb.dbTechLayerCornerSpacingRule_isExceptEol(self)

    def setExceptJogLength(self, except_jog_length):
        return _odb.dbTechLayerCornerSpacingRule_setExceptJogLength(self, except_jog_length)

    def isExceptJogLength(self):
        return _odb.dbTechLayerCornerSpacingRule_isExceptJogLength(self)

    def setEdgeLengthValid(self, edge_length_valid):
        return _odb.dbTechLayerCornerSpacingRule_setEdgeLengthValid(self, edge_length_valid)

    def isEdgeLengthValid(self):
        return _odb.dbTechLayerCornerSpacingRule_isEdgeLengthValid(self)

    def setIncludeShape(self, include_shape):
        return _odb.dbTechLayerCornerSpacingRule_setIncludeShape(self, include_shape)

    def isIncludeShape(self):
        return _odb.dbTechLayerCornerSpacingRule_isIncludeShape(self)

    def setMinLengthValid(self, min_length_valid):
        return _odb.dbTechLayerCornerSpacingRule_setMinLengthValid(self, min_length_valid)

    def isMinLengthValid(self):
        return _odb.dbTechLayerCornerSpacingRule_isMinLengthValid(self)

    def setExceptNotch(self, except_notch):
        return _odb.dbTechLayerCornerSpacingRule_setExceptNotch(self, except_notch)

    def isExceptNotch(self):
        return _odb.dbTechLayerCornerSpacingRule_isExceptNotch(self)

    def setExceptNotchLengthValid(self, except_notch_length_valid):
        return _odb.dbTechLayerCornerSpacingRule_setExceptNotchLengthValid(self, except_notch_length_valid)

    def isExceptNotchLengthValid(self):
        return _odb.dbTechLayerCornerSpacingRule_isExceptNotchLengthValid(self)

    def setExceptSameNet(self, except_same_net):
        return _odb.dbTechLayerCornerSpacingRule_setExceptSameNet(self, except_same_net)

    def isExceptSameNet(self):
        return _odb.dbTechLayerCornerSpacingRule_isExceptSameNet(self)

    def setExceptSameMetal(self, except_same_metal):
        return _odb.dbTechLayerCornerSpacingRule_setExceptSameMetal(self, except_same_metal)

    def isExceptSameMetal(self):
        return _odb.dbTechLayerCornerSpacingRule_isExceptSameMetal(self)

    def setCornerToCorner(self, corner_to_corner):
        return _odb.dbTechLayerCornerSpacingRule_setCornerToCorner(self, corner_to_corner)

    def isCornerToCorner(self):
        return _odb.dbTechLayerCornerSpacingRule_isCornerToCorner(self)

    def setType(self, _type):
        return _odb.dbTechLayerCornerSpacingRule_setType(self, _type)

    def getType(self):
        return _odb.dbTechLayerCornerSpacingRule_getType(self)

    def addSpacing(self, width, spacing1, spacing2=0):
        return _odb.dbTechLayerCornerSpacingRule_addSpacing(self, width, spacing1, spacing2)

    def getSpacingTable(self, tbl):
        return _odb.dbTechLayerCornerSpacingRule_getSpacingTable(self, tbl)

    def getWidthTable(self, tbl):
        return _odb.dbTechLayerCornerSpacingRule_getWidthTable(self, tbl)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerCornerSpacingRule_create(layer)

    @staticmethod
    def getTechLayerCornerSpacingRule(inly, dbid):
        return _odb.dbTechLayerCornerSpacingRule_getTechLayerCornerSpacingRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerCornerSpacingRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerCornerSpacingRule_swiginit(self, _odb.new_dbTechLayerCornerSpacingRule())
    __swig_destroy__ = _odb.delete_dbTechLayerCornerSpacingRule

# Register dbTechLayerCornerSpacingRule in _odb:
_odb.dbTechLayerCornerSpacingRule_swigregister(dbTechLayerCornerSpacingRule)

def dbTechLayerCornerSpacingRule_create(layer):
    return _odb.dbTechLayerCornerSpacingRule_create(layer)

def dbTechLayerCornerSpacingRule_getTechLayerCornerSpacingRule(inly, dbid):
    return _odb.dbTechLayerCornerSpacingRule_getTechLayerCornerSpacingRule(inly, dbid)

def dbTechLayerCornerSpacingRule_destroy(rule):
    return _odb.dbTechLayerCornerSpacingRule_destroy(rule)

class dbTechLayerCutClassRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odb.dbTechLayerCutClassRule_getName(self)

    def setWidth(self, width):
        return _odb.dbTechLayerCutClassRule_setWidth(self, width)

    def getWidth(self):
        return _odb.dbTechLayerCutClassRule_getWidth(self)

    def setLength(self, length):
        return _odb.dbTechLayerCutClassRule_setLength(self, length)

    def getLength(self):
        return _odb.dbTechLayerCutClassRule_getLength(self)

    def setNumCuts(self, num_cuts):
        return _odb.dbTechLayerCutClassRule_setNumCuts(self, num_cuts)

    def getNumCuts(self):
        return _odb.dbTechLayerCutClassRule_getNumCuts(self)

    def setLengthValid(self, length_valid):
        return _odb.dbTechLayerCutClassRule_setLengthValid(self, length_valid)

    def isLengthValid(self):
        return _odb.dbTechLayerCutClassRule_isLengthValid(self)

    def setCutsValid(self, cuts_valid):
        return _odb.dbTechLayerCutClassRule_setCutsValid(self, cuts_valid)

    def isCutsValid(self):
        return _odb.dbTechLayerCutClassRule_isCutsValid(self)

    @staticmethod
    def getTechLayerCutClassRule(inly, dbid):
        return _odb.dbTechLayerCutClassRule_getTechLayerCutClassRule(inly, dbid)

    @staticmethod
    def create(_layer, name):
        return _odb.dbTechLayerCutClassRule_create(_layer, name)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerCutClassRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerCutClassRule_swiginit(self, _odb.new_dbTechLayerCutClassRule())
    __swig_destroy__ = _odb.delete_dbTechLayerCutClassRule

# Register dbTechLayerCutClassRule in _odb:
_odb.dbTechLayerCutClassRule_swigregister(dbTechLayerCutClassRule)

def dbTechLayerCutClassRule_getTechLayerCutClassRule(inly, dbid):
    return _odb.dbTechLayerCutClassRule_getTechLayerCutClassRule(inly, dbid)

def dbTechLayerCutClassRule_create(_layer, name):
    return _odb.dbTechLayerCutClassRule_create(_layer, name)

def dbTechLayerCutClassRule_destroy(rule):
    return _odb.dbTechLayerCutClassRule_destroy(rule)

class dbTechLayerCutEnclosureRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT = _odb.dbTechLayerCutEnclosureRule_DEFAULT
    EOL = _odb.dbTechLayerCutEnclosureRule_EOL
    ENDSIDE = _odb.dbTechLayerCutEnclosureRule_ENDSIDE
    HORZ_AND_VERT = _odb.dbTechLayerCutEnclosureRule_HORZ_AND_VERT

    def setCutClass(self, cut_class):
        return _odb.dbTechLayerCutEnclosureRule_setCutClass(self, cut_class)

    def getCutClass(self):
        return _odb.dbTechLayerCutEnclosureRule_getCutClass(self)

    def setEolWidth(self, eol_width):
        return _odb.dbTechLayerCutEnclosureRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odb.dbTechLayerCutEnclosureRule_getEolWidth(self)

    def setEolMinLength(self, eol_min_length):
        return _odb.dbTechLayerCutEnclosureRule_setEolMinLength(self, eol_min_length)

    def getEolMinLength(self):
        return _odb.dbTechLayerCutEnclosureRule_getEolMinLength(self)

    def setFirstOverhang(self, first_overhang):
        return _odb.dbTechLayerCutEnclosureRule_setFirstOverhang(self, first_overhang)

    def getFirstOverhang(self):
        return _odb.dbTechLayerCutEnclosureRule_getFirstOverhang(self)

    def setSecondOverhang(self, second_overhang):
        return _odb.dbTechLayerCutEnclosureRule_setSecondOverhang(self, second_overhang)

    def getSecondOverhang(self):
        return _odb.dbTechLayerCutEnclosureRule_getSecondOverhang(self)

    def setSpacing(self, spacing):
        return _odb.dbTechLayerCutEnclosureRule_setSpacing(self, spacing)

    def getSpacing(self):
        return _odb.dbTechLayerCutEnclosureRule_getSpacing(self)

    def setExtension(self, extension):
        return _odb.dbTechLayerCutEnclosureRule_setExtension(self, extension)

    def getExtension(self):
        return _odb.dbTechLayerCutEnclosureRule_getExtension(self)

    def setForwardExtension(self, forward_extension):
        return _odb.dbTechLayerCutEnclosureRule_setForwardExtension(self, forward_extension)

    def getForwardExtension(self):
        return _odb.dbTechLayerCutEnclosureRule_getForwardExtension(self)

    def setBackwardExtension(self, backward_extension):
        return _odb.dbTechLayerCutEnclosureRule_setBackwardExtension(self, backward_extension)

    def getBackwardExtension(self):
        return _odb.dbTechLayerCutEnclosureRule_getBackwardExtension(self)

    def setMinWidth(self, min_width):
        return _odb.dbTechLayerCutEnclosureRule_setMinWidth(self, min_width)

    def getMinWidth(self):
        return _odb.dbTechLayerCutEnclosureRule_getMinWidth(self)

    def setCutWithin(self, cut_within):
        return _odb.dbTechLayerCutEnclosureRule_setCutWithin(self, cut_within)

    def getCutWithin(self):
        return _odb.dbTechLayerCutEnclosureRule_getCutWithin(self)

    def setMinLength(self, min_length):
        return _odb.dbTechLayerCutEnclosureRule_setMinLength(self, min_length)

    def getMinLength(self):
        return _odb.dbTechLayerCutEnclosureRule_getMinLength(self)

    def setParLength(self, par_length):
        return _odb.dbTechLayerCutEnclosureRule_setParLength(self, par_length)

    def getParLength(self):
        return _odb.dbTechLayerCutEnclosureRule_getParLength(self)

    def setSecondParLength(self, second_par_length):
        return _odb.dbTechLayerCutEnclosureRule_setSecondParLength(self, second_par_length)

    def getSecondParLength(self):
        return _odb.dbTechLayerCutEnclosureRule_getSecondParLength(self)

    def setParWithin(self, par_within):
        return _odb.dbTechLayerCutEnclosureRule_setParWithin(self, par_within)

    def getParWithin(self):
        return _odb.dbTechLayerCutEnclosureRule_getParWithin(self)

    def setSecondParWithin(self, second_par_within):
        return _odb.dbTechLayerCutEnclosureRule_setSecondParWithin(self, second_par_within)

    def getSecondParWithin(self):
        return _odb.dbTechLayerCutEnclosureRule_getSecondParWithin(self)

    def setBelowEnclosure(self, below_enclosure):
        return _odb.dbTechLayerCutEnclosureRule_setBelowEnclosure(self, below_enclosure)

    def getBelowEnclosure(self):
        return _odb.dbTechLayerCutEnclosureRule_getBelowEnclosure(self)

    def setNumCorners(self, num_corners):
        return _odb.dbTechLayerCutEnclosureRule_setNumCorners(self, num_corners)

    def getNumCorners(self):
        return _odb.dbTechLayerCutEnclosureRule_getNumCorners(self)

    def setCutClassValid(self, cut_class_valid):
        return _odb.dbTechLayerCutEnclosureRule_setCutClassValid(self, cut_class_valid)

    def isCutClassValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isCutClassValid(self)

    def setAbove(self, above):
        return _odb.dbTechLayerCutEnclosureRule_setAbove(self, above)

    def isAbove(self):
        return _odb.dbTechLayerCutEnclosureRule_isAbove(self)

    def setBelow(self, below):
        return _odb.dbTechLayerCutEnclosureRule_setBelow(self, below)

    def isBelow(self):
        return _odb.dbTechLayerCutEnclosureRule_isBelow(self)

    def setEolMinLengthValid(self, eol_min_length_valid):
        return _odb.dbTechLayerCutEnclosureRule_setEolMinLengthValid(self, eol_min_length_valid)

    def isEolMinLengthValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isEolMinLengthValid(self)

    def setEolOnly(self, eol_only):
        return _odb.dbTechLayerCutEnclosureRule_setEolOnly(self, eol_only)

    def isEolOnly(self):
        return _odb.dbTechLayerCutEnclosureRule_isEolOnly(self)

    def setShortEdgeOnEol(self, short_edge_on_eol):
        return _odb.dbTechLayerCutEnclosureRule_setShortEdgeOnEol(self, short_edge_on_eol)

    def isShortEdgeOnEol(self):
        return _odb.dbTechLayerCutEnclosureRule_isShortEdgeOnEol(self)

    def setSideSpacingValid(self, side_spacing_valid):
        return _odb.dbTechLayerCutEnclosureRule_setSideSpacingValid(self, side_spacing_valid)

    def isSideSpacingValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isSideSpacingValid(self)

    def setEndSpacingValid(self, end_spacing_valid):
        return _odb.dbTechLayerCutEnclosureRule_setEndSpacingValid(self, end_spacing_valid)

    def isEndSpacingValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isEndSpacingValid(self)

    def setOffCenterLine(self, off_center_line):
        return _odb.dbTechLayerCutEnclosureRule_setOffCenterLine(self, off_center_line)

    def isOffCenterLine(self):
        return _odb.dbTechLayerCutEnclosureRule_isOffCenterLine(self)

    def setWidthValid(self, width_valid):
        return _odb.dbTechLayerCutEnclosureRule_setWidthValid(self, width_valid)

    def isWidthValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isWidthValid(self)

    def setIncludeAbutted(self, include_abutted):
        return _odb.dbTechLayerCutEnclosureRule_setIncludeAbutted(self, include_abutted)

    def isIncludeAbutted(self):
        return _odb.dbTechLayerCutEnclosureRule_isIncludeAbutted(self)

    def setExceptExtraCut(self, except_extra_cut):
        return _odb.dbTechLayerCutEnclosureRule_setExceptExtraCut(self, except_extra_cut)

    def isExceptExtraCut(self):
        return _odb.dbTechLayerCutEnclosureRule_isExceptExtraCut(self)

    def setPrl(self, prl):
        return _odb.dbTechLayerCutEnclosureRule_setPrl(self, prl)

    def isPrl(self):
        return _odb.dbTechLayerCutEnclosureRule_isPrl(self)

    def setNoSharedEdge(self, no_shared_edge):
        return _odb.dbTechLayerCutEnclosureRule_setNoSharedEdge(self, no_shared_edge)

    def isNoSharedEdge(self):
        return _odb.dbTechLayerCutEnclosureRule_isNoSharedEdge(self)

    def setLengthValid(self, length_valid):
        return _odb.dbTechLayerCutEnclosureRule_setLengthValid(self, length_valid)

    def isLengthValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isLengthValid(self)

    def setExtraCutValid(self, extra_cut_valid):
        return _odb.dbTechLayerCutEnclosureRule_setExtraCutValid(self, extra_cut_valid)

    def isExtraCutValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isExtraCutValid(self)

    def setExtraOnly(self, extra_only):
        return _odb.dbTechLayerCutEnclosureRule_setExtraOnly(self, extra_only)

    def isExtraOnly(self):
        return _odb.dbTechLayerCutEnclosureRule_isExtraOnly(self)

    def setRedundantCutValid(self, redundant_cut_valid):
        return _odb.dbTechLayerCutEnclosureRule_setRedundantCutValid(self, redundant_cut_valid)

    def isRedundantCutValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isRedundantCutValid(self)

    def setParallelValid(self, parallel_valid):
        return _odb.dbTechLayerCutEnclosureRule_setParallelValid(self, parallel_valid)

    def isParallelValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isParallelValid(self)

    def setSecondParallelValid(self, second_parallel_valid):
        return _odb.dbTechLayerCutEnclosureRule_setSecondParallelValid(self, second_parallel_valid)

    def isSecondParallelValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isSecondParallelValid(self)

    def setSecondParWithinValid(self, second_par_within_valid):
        return _odb.dbTechLayerCutEnclosureRule_setSecondParWithinValid(self, second_par_within_valid)

    def isSecondParWithinValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isSecondParWithinValid(self)

    def setBelowEnclosureValid(self, below_enclosure_valid):
        return _odb.dbTechLayerCutEnclosureRule_setBelowEnclosureValid(self, below_enclosure_valid)

    def isBelowEnclosureValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isBelowEnclosureValid(self)

    def setConcaveCornersValid(self, concave_corners_valid):
        return _odb.dbTechLayerCutEnclosureRule_setConcaveCornersValid(self, concave_corners_valid)

    def isConcaveCornersValid(self):
        return _odb.dbTechLayerCutEnclosureRule_isConcaveCornersValid(self)

    def setType(self, type):
        return _odb.dbTechLayerCutEnclosureRule_setType(self, type)

    def getType(self):
        return _odb.dbTechLayerCutEnclosureRule_getType(self)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerCutEnclosureRule_create(layer)

    @staticmethod
    def getTechLayerCutEnclosureRule(inly, dbid):
        return _odb.dbTechLayerCutEnclosureRule_getTechLayerCutEnclosureRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerCutEnclosureRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerCutEnclosureRule_swiginit(self, _odb.new_dbTechLayerCutEnclosureRule())
    __swig_destroy__ = _odb.delete_dbTechLayerCutEnclosureRule

# Register dbTechLayerCutEnclosureRule in _odb:
_odb.dbTechLayerCutEnclosureRule_swigregister(dbTechLayerCutEnclosureRule)

def dbTechLayerCutEnclosureRule_create(layer):
    return _odb.dbTechLayerCutEnclosureRule_create(layer)

def dbTechLayerCutEnclosureRule_getTechLayerCutEnclosureRule(inly, dbid):
    return _odb.dbTechLayerCutEnclosureRule_getTechLayerCutEnclosureRule(inly, dbid)

def dbTechLayerCutEnclosureRule_destroy(rule):
    return _odb.dbTechLayerCutEnclosureRule_destroy(rule)

class dbTechLayerCutSpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _odb.dbTechLayerCutSpacingRule_NONE
    MAXXY = _odb.dbTechLayerCutSpacingRule_MAXXY
    SAMEMASK = _odb.dbTechLayerCutSpacingRule_SAMEMASK
    LAYER = _odb.dbTechLayerCutSpacingRule_LAYER
    ADJACENTCUTS = _odb.dbTechLayerCutSpacingRule_ADJACENTCUTS
    PARALLELOVERLAP = _odb.dbTechLayerCutSpacingRule_PARALLELOVERLAP
    PARALLELWITHIN = _odb.dbTechLayerCutSpacingRule_PARALLELWITHIN
    SAMEMETALSHAREDEDGE = _odb.dbTechLayerCutSpacingRule_SAMEMETALSHAREDEDGE
    AREA = _odb.dbTechLayerCutSpacingRule_AREA

    def setCutSpacing(self, cut_spacing):
        return _odb.dbTechLayerCutSpacingRule_setCutSpacing(self, cut_spacing)

    def getCutSpacing(self):
        return _odb.dbTechLayerCutSpacingRule_getCutSpacing(self)

    def setSecondLayer(self, second_layer):
        return _odb.dbTechLayerCutSpacingRule_setSecondLayer(self, second_layer)

    def setOrthogonalSpacing(self, orthogonal_spacing):
        return _odb.dbTechLayerCutSpacingRule_setOrthogonalSpacing(self, orthogonal_spacing)

    def getOrthogonalSpacing(self):
        return _odb.dbTechLayerCutSpacingRule_getOrthogonalSpacing(self)

    def setWidth(self, width):
        return _odb.dbTechLayerCutSpacingRule_setWidth(self, width)

    def getWidth(self):
        return _odb.dbTechLayerCutSpacingRule_getWidth(self)

    def setEnclosure(self, enclosure):
        return _odb.dbTechLayerCutSpacingRule_setEnclosure(self, enclosure)

    def getEnclosure(self):
        return _odb.dbTechLayerCutSpacingRule_getEnclosure(self)

    def setEdgeLength(self, edge_length):
        return _odb.dbTechLayerCutSpacingRule_setEdgeLength(self, edge_length)

    def getEdgeLength(self):
        return _odb.dbTechLayerCutSpacingRule_getEdgeLength(self)

    def setParWithin(self, par_within):
        return _odb.dbTechLayerCutSpacingRule_setParWithin(self, par_within)

    def getParWithin(self):
        return _odb.dbTechLayerCutSpacingRule_getParWithin(self)

    def setParEnclosure(self, par_enclosure):
        return _odb.dbTechLayerCutSpacingRule_setParEnclosure(self, par_enclosure)

    def getParEnclosure(self):
        return _odb.dbTechLayerCutSpacingRule_getParEnclosure(self)

    def setEdgeEnclosure(self, edge_enclosure):
        return _odb.dbTechLayerCutSpacingRule_setEdgeEnclosure(self, edge_enclosure)

    def getEdgeEnclosure(self):
        return _odb.dbTechLayerCutSpacingRule_getEdgeEnclosure(self)

    def setAdjEnclosure(self, adj_enclosure):
        return _odb.dbTechLayerCutSpacingRule_setAdjEnclosure(self, adj_enclosure)

    def getAdjEnclosure(self):
        return _odb.dbTechLayerCutSpacingRule_getAdjEnclosure(self)

    def setAboveEnclosure(self, above_enclosure):
        return _odb.dbTechLayerCutSpacingRule_setAboveEnclosure(self, above_enclosure)

    def getAboveEnclosure(self):
        return _odb.dbTechLayerCutSpacingRule_getAboveEnclosure(self)

    def setAboveWidth(self, above_width):
        return _odb.dbTechLayerCutSpacingRule_setAboveWidth(self, above_width)

    def getAboveWidth(self):
        return _odb.dbTechLayerCutSpacingRule_getAboveWidth(self)

    def setMinLength(self, min_length):
        return _odb.dbTechLayerCutSpacingRule_setMinLength(self, min_length)

    def getMinLength(self):
        return _odb.dbTechLayerCutSpacingRule_getMinLength(self)

    def setExtension(self, extension):
        return _odb.dbTechLayerCutSpacingRule_setExtension(self, extension)

    def getExtension(self):
        return _odb.dbTechLayerCutSpacingRule_getExtension(self)

    def setEolWidth(self, eol_width):
        return _odb.dbTechLayerCutSpacingRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odb.dbTechLayerCutSpacingRule_getEolWidth(self)

    def setNumCuts(self, num_cuts):
        return _odb.dbTechLayerCutSpacingRule_setNumCuts(self, num_cuts)

    def getNumCuts(self):
        return _odb.dbTechLayerCutSpacingRule_getNumCuts(self)

    def setWithin(self, within):
        return _odb.dbTechLayerCutSpacingRule_setWithin(self, within)

    def getWithin(self):
        return _odb.dbTechLayerCutSpacingRule_getWithin(self)

    def setSecondWithin(self, second_within):
        return _odb.dbTechLayerCutSpacingRule_setSecondWithin(self, second_within)

    def getSecondWithin(self):
        return _odb.dbTechLayerCutSpacingRule_getSecondWithin(self)

    def setCutClass(self, cut_class):
        return _odb.dbTechLayerCutSpacingRule_setCutClass(self, cut_class)

    def setTwoCuts(self, two_cuts):
        return _odb.dbTechLayerCutSpacingRule_setTwoCuts(self, two_cuts)

    def getTwoCuts(self):
        return _odb.dbTechLayerCutSpacingRule_getTwoCuts(self)

    def setPrl(self, prl):
        return _odb.dbTechLayerCutSpacingRule_setPrl(self, prl)

    def getPrl(self):
        return _odb.dbTechLayerCutSpacingRule_getPrl(self)

    def setParLength(self, par_length):
        return _odb.dbTechLayerCutSpacingRule_setParLength(self, par_length)

    def getParLength(self):
        return _odb.dbTechLayerCutSpacingRule_getParLength(self)

    def setCutArea(self, cut_area):
        return _odb.dbTechLayerCutSpacingRule_setCutArea(self, cut_area)

    def getCutArea(self):
        return _odb.dbTechLayerCutSpacingRule_getCutArea(self)

    def setCenterToCenter(self, center_to_center):
        return _odb.dbTechLayerCutSpacingRule_setCenterToCenter(self, center_to_center)

    def isCenterToCenter(self):
        return _odb.dbTechLayerCutSpacingRule_isCenterToCenter(self)

    def setSameNet(self, same_net):
        return _odb.dbTechLayerCutSpacingRule_setSameNet(self, same_net)

    def isSameNet(self):
        return _odb.dbTechLayerCutSpacingRule_isSameNet(self)

    def setSameMetal(self, same_metal):
        return _odb.dbTechLayerCutSpacingRule_setSameMetal(self, same_metal)

    def isSameMetal(self):
        return _odb.dbTechLayerCutSpacingRule_isSameMetal(self)

    def setSameVia(self, same_via):
        return _odb.dbTechLayerCutSpacingRule_setSameVia(self, same_via)

    def isSameVia(self):
        return _odb.dbTechLayerCutSpacingRule_isSameVia(self)

    def setStack(self, stack):
        return _odb.dbTechLayerCutSpacingRule_setStack(self, stack)

    def isStack(self):
        return _odb.dbTechLayerCutSpacingRule_isStack(self)

    def setOrthogonalSpacingValid(self, orthogonal_spacing_valid):
        return _odb.dbTechLayerCutSpacingRule_setOrthogonalSpacingValid(self, orthogonal_spacing_valid)

    def isOrthogonalSpacingValid(self):
        return _odb.dbTechLayerCutSpacingRule_isOrthogonalSpacingValid(self)

    def setAboveWidthEnclosureValid(self, above_width_enclosure_valid):
        return _odb.dbTechLayerCutSpacingRule_setAboveWidthEnclosureValid(self, above_width_enclosure_valid)

    def isAboveWidthEnclosureValid(self):
        return _odb.dbTechLayerCutSpacingRule_isAboveWidthEnclosureValid(self)

    def setShortEdgeOnly(self, short_edge_only):
        return _odb.dbTechLayerCutSpacingRule_setShortEdgeOnly(self, short_edge_only)

    def isShortEdgeOnly(self):
        return _odb.dbTechLayerCutSpacingRule_isShortEdgeOnly(self)

    def setConcaveCornerWidth(self, concave_corner_width):
        return _odb.dbTechLayerCutSpacingRule_setConcaveCornerWidth(self, concave_corner_width)

    def isConcaveCornerWidth(self):
        return _odb.dbTechLayerCutSpacingRule_isConcaveCornerWidth(self)

    def setConcaveCornerParallel(self, concave_corner_parallel):
        return _odb.dbTechLayerCutSpacingRule_setConcaveCornerParallel(self, concave_corner_parallel)

    def isConcaveCornerParallel(self):
        return _odb.dbTechLayerCutSpacingRule_isConcaveCornerParallel(self)

    def setConcaveCornerEdgeLength(self, concave_corner_edge_length):
        return _odb.dbTechLayerCutSpacingRule_setConcaveCornerEdgeLength(self, concave_corner_edge_length)

    def isConcaveCornerEdgeLength(self):
        return _odb.dbTechLayerCutSpacingRule_isConcaveCornerEdgeLength(self)

    def setConcaveCorner(self, concave_corner):
        return _odb.dbTechLayerCutSpacingRule_setConcaveCorner(self, concave_corner)

    def isConcaveCorner(self):
        return _odb.dbTechLayerCutSpacingRule_isConcaveCorner(self)

    def setExtensionValid(self, extension_valid):
        return _odb.dbTechLayerCutSpacingRule_setExtensionValid(self, extension_valid)

    def isExtensionValid(self):
        return _odb.dbTechLayerCutSpacingRule_isExtensionValid(self)

    def setNonEolConvexCorner(self, non_eol_convex_corner):
        return _odb.dbTechLayerCutSpacingRule_setNonEolConvexCorner(self, non_eol_convex_corner)

    def isNonEolConvexCorner(self):
        return _odb.dbTechLayerCutSpacingRule_isNonEolConvexCorner(self)

    def setEolWidthValid(self, eol_width_valid):
        return _odb.dbTechLayerCutSpacingRule_setEolWidthValid(self, eol_width_valid)

    def isEolWidthValid(self):
        return _odb.dbTechLayerCutSpacingRule_isEolWidthValid(self)

    def setMinLengthValid(self, min_length_valid):
        return _odb.dbTechLayerCutSpacingRule_setMinLengthValid(self, min_length_valid)

    def isMinLengthValid(self):
        return _odb.dbTechLayerCutSpacingRule_isMinLengthValid(self)

    def setAboveWidthValid(self, above_width_valid):
        return _odb.dbTechLayerCutSpacingRule_setAboveWidthValid(self, above_width_valid)

    def isAboveWidthValid(self):
        return _odb.dbTechLayerCutSpacingRule_isAboveWidthValid(self)

    def setMaskOverlap(self, mask_overlap):
        return _odb.dbTechLayerCutSpacingRule_setMaskOverlap(self, mask_overlap)

    def isMaskOverlap(self):
        return _odb.dbTechLayerCutSpacingRule_isMaskOverlap(self)

    def setWrongDirection(self, wrong_direction):
        return _odb.dbTechLayerCutSpacingRule_setWrongDirection(self, wrong_direction)

    def isWrongDirection(self):
        return _odb.dbTechLayerCutSpacingRule_isWrongDirection(self)

    def setAdjacentCuts(self, adjacent_cuts):
        return _odb.dbTechLayerCutSpacingRule_setAdjacentCuts(self, adjacent_cuts)

    def getAdjacentCuts(self):
        return _odb.dbTechLayerCutSpacingRule_getAdjacentCuts(self)

    def setExactAligned(self, exact_aligned):
        return _odb.dbTechLayerCutSpacingRule_setExactAligned(self, exact_aligned)

    def isExactAligned(self):
        return _odb.dbTechLayerCutSpacingRule_isExactAligned(self)

    def setCutClassToAll(self, cut_class_to_all):
        return _odb.dbTechLayerCutSpacingRule_setCutClassToAll(self, cut_class_to_all)

    def isCutClassToAll(self):
        return _odb.dbTechLayerCutSpacingRule_isCutClassToAll(self)

    def setNoPrl(self, no_prl):
        return _odb.dbTechLayerCutSpacingRule_setNoPrl(self, no_prl)

    def isNoPrl(self):
        return _odb.dbTechLayerCutSpacingRule_isNoPrl(self)

    def setSameMask(self, same_mask):
        return _odb.dbTechLayerCutSpacingRule_setSameMask(self, same_mask)

    def isSameMask(self):
        return _odb.dbTechLayerCutSpacingRule_isSameMask(self)

    def setExceptSamePgnet(self, except_same_pgnet):
        return _odb.dbTechLayerCutSpacingRule_setExceptSamePgnet(self, except_same_pgnet)

    def isExceptSamePgnet(self):
        return _odb.dbTechLayerCutSpacingRule_isExceptSamePgnet(self)

    def setSideParallelOverlap(self, side_parallel_overlap):
        return _odb.dbTechLayerCutSpacingRule_setSideParallelOverlap(self, side_parallel_overlap)

    def isSideParallelOverlap(self):
        return _odb.dbTechLayerCutSpacingRule_isSideParallelOverlap(self)

    def setExceptSameNet(self, except_same_net):
        return _odb.dbTechLayerCutSpacingRule_setExceptSameNet(self, except_same_net)

    def isExceptSameNet(self):
        return _odb.dbTechLayerCutSpacingRule_isExceptSameNet(self)

    def setExceptSameMetal(self, except_same_metal):
        return _odb.dbTechLayerCutSpacingRule_setExceptSameMetal(self, except_same_metal)

    def isExceptSameMetal(self):
        return _odb.dbTechLayerCutSpacingRule_isExceptSameMetal(self)

    def setExceptSameMetalOverlap(self, except_same_metal_overlap):
        return _odb.dbTechLayerCutSpacingRule_setExceptSameMetalOverlap(self, except_same_metal_overlap)

    def isExceptSameMetalOverlap(self):
        return _odb.dbTechLayerCutSpacingRule_isExceptSameMetalOverlap(self)

    def setExceptSameVia(self, except_same_via):
        return _odb.dbTechLayerCutSpacingRule_setExceptSameVia(self, except_same_via)

    def isExceptSameVia(self):
        return _odb.dbTechLayerCutSpacingRule_isExceptSameVia(self)

    def setAbove(self, above):
        return _odb.dbTechLayerCutSpacingRule_setAbove(self, above)

    def isAbove(self):
        return _odb.dbTechLayerCutSpacingRule_isAbove(self)

    def setExceptTwoEdges(self, except_two_edges):
        return _odb.dbTechLayerCutSpacingRule_setExceptTwoEdges(self, except_two_edges)

    def isExceptTwoEdges(self):
        return _odb.dbTechLayerCutSpacingRule_isExceptTwoEdges(self)

    def setTwoCutsValid(self, two_cuts_valid):
        return _odb.dbTechLayerCutSpacingRule_setTwoCutsValid(self, two_cuts_valid)

    def isTwoCutsValid(self):
        return _odb.dbTechLayerCutSpacingRule_isTwoCutsValid(self)

    def setSameCut(self, same_cut):
        return _odb.dbTechLayerCutSpacingRule_setSameCut(self, same_cut)

    def isSameCut(self):
        return _odb.dbTechLayerCutSpacingRule_isSameCut(self)

    def setLongEdgeOnly(self, long_edge_only):
        return _odb.dbTechLayerCutSpacingRule_setLongEdgeOnly(self, long_edge_only)

    def isLongEdgeOnly(self):
        return _odb.dbTechLayerCutSpacingRule_isLongEdgeOnly(self)

    def setPrlValid(self, prl_valid):
        return _odb.dbTechLayerCutSpacingRule_setPrlValid(self, prl_valid)

    def isPrlValid(self):
        return _odb.dbTechLayerCutSpacingRule_isPrlValid(self)

    def setBelow(self, below):
        return _odb.dbTechLayerCutSpacingRule_setBelow(self, below)

    def isBelow(self):
        return _odb.dbTechLayerCutSpacingRule_isBelow(self)

    def setParWithinEnclosureValid(self, par_within_enclosure_valid):
        return _odb.dbTechLayerCutSpacingRule_setParWithinEnclosureValid(self, par_within_enclosure_valid)

    def isParWithinEnclosureValid(self):
        return _odb.dbTechLayerCutSpacingRule_isParWithinEnclosureValid(self)

    def getCutClass(self):
        return _odb.dbTechLayerCutSpacingRule_getCutClass(self)

    def getSecondLayer(self):
        return _odb.dbTechLayerCutSpacingRule_getSecondLayer(self)

    def getTechLayer(self):
        return _odb.dbTechLayerCutSpacingRule_getTechLayer(self)

    def setType(self, _type):
        return _odb.dbTechLayerCutSpacingRule_setType(self, _type)

    def getType(self):
        return _odb.dbTechLayerCutSpacingRule_getType(self)

    @staticmethod
    def getTechLayerCutSpacingRule(inly, dbid):
        return _odb.dbTechLayerCutSpacingRule_getTechLayerCutSpacingRule(inly, dbid)

    @staticmethod
    def create(_layer):
        return _odb.dbTechLayerCutSpacingRule_create(_layer)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerCutSpacingRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerCutSpacingRule_swiginit(self, _odb.new_dbTechLayerCutSpacingRule())
    __swig_destroy__ = _odb.delete_dbTechLayerCutSpacingRule

# Register dbTechLayerCutSpacingRule in _odb:
_odb.dbTechLayerCutSpacingRule_swigregister(dbTechLayerCutSpacingRule)

def dbTechLayerCutSpacingRule_getTechLayerCutSpacingRule(inly, dbid):
    return _odb.dbTechLayerCutSpacingRule_getTechLayerCutSpacingRule(inly, dbid)

def dbTechLayerCutSpacingRule_create(_layer):
    return _odb.dbTechLayerCutSpacingRule_create(_layer)

def dbTechLayerCutSpacingRule_destroy(rule):
    return _odb.dbTechLayerCutSpacingRule_destroy(rule)

class dbTechLayerCutSpacingTableDefRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FIRST = _odb.dbTechLayerCutSpacingTableDefRule_FIRST
    SECOND = _odb.dbTechLayerCutSpacingTableDefRule_SECOND
    MAX = _odb.dbTechLayerCutSpacingTableDefRule_MAX
    MIN = _odb.dbTechLayerCutSpacingTableDefRule_MIN

    def setDefault(self, spacing):
        return _odb.dbTechLayerCutSpacingTableDefRule_setDefault(self, spacing)

    def getDefault(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_getDefault(self)

    def setSecondLayer(self, second_layer):
        return _odb.dbTechLayerCutSpacingTableDefRule_setSecondLayer(self, second_layer)

    def setPrl(self, prl):
        return _odb.dbTechLayerCutSpacingTableDefRule_setPrl(self, prl)

    def getPrl(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_getPrl(self)

    def setExtension(self, extension):
        return _odb.dbTechLayerCutSpacingTableDefRule_setExtension(self, extension)

    def getExtension(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_getExtension(self)

    def setDefaultValid(self, default_valid):
        return _odb.dbTechLayerCutSpacingTableDefRule_setDefaultValid(self, default_valid)

    def isDefaultValid(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isDefaultValid(self)

    def setSameMask(self, same_mask):
        return _odb.dbTechLayerCutSpacingTableDefRule_setSameMask(self, same_mask)

    def isSameMask(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isSameMask(self)

    def setSameNet(self, same_net):
        return _odb.dbTechLayerCutSpacingTableDefRule_setSameNet(self, same_net)

    def isSameNet(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isSameNet(self)

    def setSameMetal(self, same_metal):
        return _odb.dbTechLayerCutSpacingTableDefRule_setSameMetal(self, same_metal)

    def isSameMetal(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isSameMetal(self)

    def setSameVia(self, same_via):
        return _odb.dbTechLayerCutSpacingTableDefRule_setSameVia(self, same_via)

    def isSameVia(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isSameVia(self)

    def setLayerValid(self, layer_valid):
        return _odb.dbTechLayerCutSpacingTableDefRule_setLayerValid(self, layer_valid)

    def isLayerValid(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isLayerValid(self)

    def setNoStack(self, no_stack):
        return _odb.dbTechLayerCutSpacingTableDefRule_setNoStack(self, no_stack)

    def isNoStack(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isNoStack(self)

    def setNonZeroEnclosure(self, non_zero_enclosure):
        return _odb.dbTechLayerCutSpacingTableDefRule_setNonZeroEnclosure(self, non_zero_enclosure)

    def isNonZeroEnclosure(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isNonZeroEnclosure(self)

    def setPrlForAlignedCut(self, prl_for_aligned_cut):
        return _odb.dbTechLayerCutSpacingTableDefRule_setPrlForAlignedCut(self, prl_for_aligned_cut)

    def isPrlForAlignedCut(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isPrlForAlignedCut(self)

    def setCenterToCenterValid(self, center_to_center_valid):
        return _odb.dbTechLayerCutSpacingTableDefRule_setCenterToCenterValid(self, center_to_center_valid)

    def isCenterToCenterValid(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isCenterToCenterValid(self)

    def setCenterAndEdgeValid(self, center_and_edge_valid):
        return _odb.dbTechLayerCutSpacingTableDefRule_setCenterAndEdgeValid(self, center_and_edge_valid)

    def isCenterAndEdgeValid(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isCenterAndEdgeValid(self)

    def setNoPrl(self, no_prl):
        return _odb.dbTechLayerCutSpacingTableDefRule_setNoPrl(self, no_prl)

    def isNoPrl(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isNoPrl(self)

    def setPrlValid(self, prl_valid):
        return _odb.dbTechLayerCutSpacingTableDefRule_setPrlValid(self, prl_valid)

    def isPrlValid(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isPrlValid(self)

    def setMaxXY(self, max_x_y):
        return _odb.dbTechLayerCutSpacingTableDefRule_setMaxXY(self, max_x_y)

    def isMaxXY(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isMaxXY(self)

    def setEndExtensionValid(self, end_extension_valid):
        return _odb.dbTechLayerCutSpacingTableDefRule_setEndExtensionValid(self, end_extension_valid)

    def isEndExtensionValid(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isEndExtensionValid(self)

    def setSideExtensionValid(self, side_extension_valid):
        return _odb.dbTechLayerCutSpacingTableDefRule_setSideExtensionValid(self, side_extension_valid)

    def isSideExtensionValid(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isSideExtensionValid(self)

    def setExactAlignedSpacingValid(self, exact_aligned_spacing_valid):
        return _odb.dbTechLayerCutSpacingTableDefRule_setExactAlignedSpacingValid(self, exact_aligned_spacing_valid)

    def isExactAlignedSpacingValid(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isExactAlignedSpacingValid(self)

    def setHorizontal(self, horizontal):
        return _odb.dbTechLayerCutSpacingTableDefRule_setHorizontal(self, horizontal)

    def isHorizontal(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isHorizontal(self)

    def setPrlHorizontal(self, prl_horizontal):
        return _odb.dbTechLayerCutSpacingTableDefRule_setPrlHorizontal(self, prl_horizontal)

    def isPrlHorizontal(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isPrlHorizontal(self)

    def setVertical(self, vertical):
        return _odb.dbTechLayerCutSpacingTableDefRule_setVertical(self, vertical)

    def isVertical(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isVertical(self)

    def setPrlVertical(self, prl_vertical):
        return _odb.dbTechLayerCutSpacingTableDefRule_setPrlVertical(self, prl_vertical)

    def isPrlVertical(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isPrlVertical(self)

    def setNonOppositeEnclosureSpacingValid(self, non_opposite_enclosure_spacing_valid):
        return _odb.dbTechLayerCutSpacingTableDefRule_setNonOppositeEnclosureSpacingValid(self, non_opposite_enclosure_spacing_valid)

    def isNonOppositeEnclosureSpacingValid(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isNonOppositeEnclosureSpacingValid(self)

    def setOppositeEnclosureResizeSpacingValid(self, opposite_enclosure_resize_spacing_valid):
        return _odb.dbTechLayerCutSpacingTableDefRule_setOppositeEnclosureResizeSpacingValid(self, opposite_enclosure_resize_spacing_valid)

    def isOppositeEnclosureResizeSpacingValid(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_isOppositeEnclosureResizeSpacingValid(self)

    def addPrlForAlignedCutEntry(self, _from, to):
        return _odb.dbTechLayerCutSpacingTableDefRule_addPrlForAlignedCutEntry(self, _from, to)

    def addCenterToCenterEntry(self, _from, to):
        return _odb.dbTechLayerCutSpacingTableDefRule_addCenterToCenterEntry(self, _from, to)

    def addCenterAndEdgeEntry(self, _from, to):
        return _odb.dbTechLayerCutSpacingTableDefRule_addCenterAndEdgeEntry(self, _from, to)

    def addPrlEntry(self, _from, to, ccPrl):
        return _odb.dbTechLayerCutSpacingTableDefRule_addPrlEntry(self, _from, to, ccPrl)

    def addEndExtensionEntry(self, cls, ext):
        return _odb.dbTechLayerCutSpacingTableDefRule_addEndExtensionEntry(self, cls, ext)

    def addSideExtensionEntry(self, cls, ext):
        return _odb.dbTechLayerCutSpacingTableDefRule_addSideExtensionEntry(self, cls, ext)

    def addExactElignedEntry(self, cls, spacing):
        return _odb.dbTechLayerCutSpacingTableDefRule_addExactElignedEntry(self, cls, spacing)

    def addNonOppEncSpacingEntry(self, cls, spacing):
        return _odb.dbTechLayerCutSpacingTableDefRule_addNonOppEncSpacingEntry(self, cls, spacing)

    def addOppEncSpacingEntry(self, cls, rsz1, rsz2, spacing):
        return _odb.dbTechLayerCutSpacingTableDefRule_addOppEncSpacingEntry(self, cls, rsz1, rsz2, spacing)

    def getSecondLayer(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_getSecondLayer(self)

    def isCenterToCenter(self, cutClass1, cutClass2):
        return _odb.dbTechLayerCutSpacingTableDefRule_isCenterToCenter(self, cutClass1, cutClass2)

    def isCenterAndEdge(self, cutClass1, cutClass2):
        return _odb.dbTechLayerCutSpacingTableDefRule_isCenterAndEdge(self, cutClass1, cutClass2)

    def isPrlForAlignedCutClasses(self, cutClass1, cutClass2):
        return _odb.dbTechLayerCutSpacingTableDefRule_isPrlForAlignedCutClasses(self, cutClass1, cutClass2)

    def getPrlEntry(self, cutClass1, cutClass2):
        return _odb.dbTechLayerCutSpacingTableDefRule_getPrlEntry(self, cutClass1, cutClass2)

    def setSpacingTable(self, table, row_map, col_map):
        return _odb.dbTechLayerCutSpacingTableDefRule_setSpacingTable(self, table, row_map, col_map)

    def getSpacingTable(self, table, row_map, col_map):
        return _odb.dbTechLayerCutSpacingTableDefRule_getSpacingTable(self, table, row_map, col_map)

    def getExactAlignedSpacing(self, cutClass):
        return _odb.dbTechLayerCutSpacingTableDefRule_getExactAlignedSpacing(self, cutClass)

    def getMaxSpacing(self, *args):
        return _odb.dbTechLayerCutSpacingTableDefRule_getMaxSpacing(self, *args)

    def getSpacing(self, *args):
        return _odb.dbTechLayerCutSpacingTableDefRule_getSpacing(self, *args)

    def getTechLayer(self):
        return _odb.dbTechLayerCutSpacingTableDefRule_getTechLayer(self)

    @staticmethod
    def create(parent):
        return _odb.dbTechLayerCutSpacingTableDefRule_create(parent)

    @staticmethod
    def getTechLayerCutSpacingTableDefSubRule(parent, dbid):
        return _odb.dbTechLayerCutSpacingTableDefRule_getTechLayerCutSpacingTableDefSubRule(parent, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerCutSpacingTableDefRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerCutSpacingTableDefRule_swiginit(self, _odb.new_dbTechLayerCutSpacingTableDefRule())
    __swig_destroy__ = _odb.delete_dbTechLayerCutSpacingTableDefRule

# Register dbTechLayerCutSpacingTableDefRule in _odb:
_odb.dbTechLayerCutSpacingTableDefRule_swigregister(dbTechLayerCutSpacingTableDefRule)

def dbTechLayerCutSpacingTableDefRule_create(parent):
    return _odb.dbTechLayerCutSpacingTableDefRule_create(parent)

def dbTechLayerCutSpacingTableDefRule_getTechLayerCutSpacingTableDefSubRule(parent, dbid):
    return _odb.dbTechLayerCutSpacingTableDefRule_getTechLayerCutSpacingTableDefSubRule(parent, dbid)

def dbTechLayerCutSpacingTableDefRule_destroy(rule):
    return _odb.dbTechLayerCutSpacingTableDefRule_destroy(rule)

class dbTechLayerCutSpacingTableOrthRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getSpacingTable(self, tbl):
        return _odb.dbTechLayerCutSpacingTableOrthRule_getSpacingTable(self, tbl)

    def setSpacingTable(self, tbl):
        return _odb.dbTechLayerCutSpacingTableOrthRule_setSpacingTable(self, tbl)

    @staticmethod
    def create(parent):
        return _odb.dbTechLayerCutSpacingTableOrthRule_create(parent)

    @staticmethod
    def getTechLayerCutSpacingTableOrthSubRule(parent, dbid):
        return _odb.dbTechLayerCutSpacingTableOrthRule_getTechLayerCutSpacingTableOrthSubRule(parent, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerCutSpacingTableOrthRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerCutSpacingTableOrthRule_swiginit(self, _odb.new_dbTechLayerCutSpacingTableOrthRule())
    __swig_destroy__ = _odb.delete_dbTechLayerCutSpacingTableOrthRule

# Register dbTechLayerCutSpacingTableOrthRule in _odb:
_odb.dbTechLayerCutSpacingTableOrthRule_swigregister(dbTechLayerCutSpacingTableOrthRule)

def dbTechLayerCutSpacingTableOrthRule_create(parent):
    return _odb.dbTechLayerCutSpacingTableOrthRule_create(parent)

def dbTechLayerCutSpacingTableOrthRule_getTechLayerCutSpacingTableOrthSubRule(parent, dbid):
    return _odb.dbTechLayerCutSpacingTableOrthRule_getTechLayerCutSpacingTableOrthSubRule(parent, dbid)

def dbTechLayerCutSpacingTableOrthRule_destroy(rule):
    return _odb.dbTechLayerCutSpacingTableOrthRule_destroy(rule)

class dbTechLayerEolExtensionRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setSpacing(self, spacing):
        return _odb.dbTechLayerEolExtensionRule_setSpacing(self, spacing)

    def getSpacing(self):
        return _odb.dbTechLayerEolExtensionRule_getSpacing(self)

    def getExtensionTable(self, tbl):
        return _odb.dbTechLayerEolExtensionRule_getExtensionTable(self, tbl)

    def setParallelOnly(self, parallel_only):
        return _odb.dbTechLayerEolExtensionRule_setParallelOnly(self, parallel_only)

    def isParallelOnly(self):
        return _odb.dbTechLayerEolExtensionRule_isParallelOnly(self)

    def addEntry(self, eol, ext):
        return _odb.dbTechLayerEolExtensionRule_addEntry(self, eol, ext)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerEolExtensionRule_create(layer)

    @staticmethod
    def getTechLayerEolExtensionRule(inly, dbid):
        return _odb.dbTechLayerEolExtensionRule_getTechLayerEolExtensionRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerEolExtensionRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerEolExtensionRule_swiginit(self, _odb.new_dbTechLayerEolExtensionRule())
    __swig_destroy__ = _odb.delete_dbTechLayerEolExtensionRule

# Register dbTechLayerEolExtensionRule in _odb:
_odb.dbTechLayerEolExtensionRule_swigregister(dbTechLayerEolExtensionRule)

def dbTechLayerEolExtensionRule_create(layer):
    return _odb.dbTechLayerEolExtensionRule_create(layer)

def dbTechLayerEolExtensionRule_getTechLayerEolExtensionRule(inly, dbid):
    return _odb.dbTechLayerEolExtensionRule_getTechLayerEolExtensionRule(inly, dbid)

def dbTechLayerEolExtensionRule_destroy(rule):
    return _odb.dbTechLayerEolExtensionRule_destroy(rule)

class dbTechLayerEolKeepOutRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setEolWidth(self, eol_width):
        return _odb.dbTechLayerEolKeepOutRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odb.dbTechLayerEolKeepOutRule_getEolWidth(self)

    def setBackwardExt(self, backward_ext):
        return _odb.dbTechLayerEolKeepOutRule_setBackwardExt(self, backward_ext)

    def getBackwardExt(self):
        return _odb.dbTechLayerEolKeepOutRule_getBackwardExt(self)

    def setForwardExt(self, forward_ext):
        return _odb.dbTechLayerEolKeepOutRule_setForwardExt(self, forward_ext)

    def getForwardExt(self):
        return _odb.dbTechLayerEolKeepOutRule_getForwardExt(self)

    def setSideExt(self, side_ext):
        return _odb.dbTechLayerEolKeepOutRule_setSideExt(self, side_ext)

    def getSideExt(self):
        return _odb.dbTechLayerEolKeepOutRule_getSideExt(self)

    def setWithinLow(self, within_low):
        return _odb.dbTechLayerEolKeepOutRule_setWithinLow(self, within_low)

    def getWithinLow(self):
        return _odb.dbTechLayerEolKeepOutRule_getWithinLow(self)

    def setWithinHigh(self, within_high):
        return _odb.dbTechLayerEolKeepOutRule_setWithinHigh(self, within_high)

    def getWithinHigh(self):
        return _odb.dbTechLayerEolKeepOutRule_getWithinHigh(self)

    def setClassName(self, class_name):
        return _odb.dbTechLayerEolKeepOutRule_setClassName(self, class_name)

    def getClassName(self):
        return _odb.dbTechLayerEolKeepOutRule_getClassName(self)

    def setClassValid(self, class_valid):
        return _odb.dbTechLayerEolKeepOutRule_setClassValid(self, class_valid)

    def isClassValid(self):
        return _odb.dbTechLayerEolKeepOutRule_isClassValid(self)

    def setCornerOnly(self, corner_only):
        return _odb.dbTechLayerEolKeepOutRule_setCornerOnly(self, corner_only)

    def isCornerOnly(self):
        return _odb.dbTechLayerEolKeepOutRule_isCornerOnly(self)

    def setExceptWithin(self, except_within):
        return _odb.dbTechLayerEolKeepOutRule_setExceptWithin(self, except_within)

    def isExceptWithin(self):
        return _odb.dbTechLayerEolKeepOutRule_isExceptWithin(self)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerEolKeepOutRule_create(layer)

    @staticmethod
    def getTechLayerEolKeepOutRule(inly, dbid):
        return _odb.dbTechLayerEolKeepOutRule_getTechLayerEolKeepOutRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerEolKeepOutRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerEolKeepOutRule_swiginit(self, _odb.new_dbTechLayerEolKeepOutRule())
    __swig_destroy__ = _odb.delete_dbTechLayerEolKeepOutRule

# Register dbTechLayerEolKeepOutRule in _odb:
_odb.dbTechLayerEolKeepOutRule_swigregister(dbTechLayerEolKeepOutRule)

def dbTechLayerEolKeepOutRule_create(layer):
    return _odb.dbTechLayerEolKeepOutRule_create(layer)

def dbTechLayerEolKeepOutRule_getTechLayerEolKeepOutRule(inly, dbid):
    return _odb.dbTechLayerEolKeepOutRule_getTechLayerEolKeepOutRule(inly, dbid)

def dbTechLayerEolKeepOutRule_destroy(rule):
    return _odb.dbTechLayerEolKeepOutRule_destroy(rule)

class dbTechLayerForbiddenSpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setForbiddenSpacing(self, forbidden_spacing):
        return _odb.dbTechLayerForbiddenSpacingRule_setForbiddenSpacing(self, forbidden_spacing)

    def getForbiddenSpacing(self):
        return _odb.dbTechLayerForbiddenSpacingRule_getForbiddenSpacing(self)

    def setWidth(self, width):
        return _odb.dbTechLayerForbiddenSpacingRule_setWidth(self, width)

    def getWidth(self):
        return _odb.dbTechLayerForbiddenSpacingRule_getWidth(self)

    def setWithin(self, within):
        return _odb.dbTechLayerForbiddenSpacingRule_setWithin(self, within)

    def getWithin(self):
        return _odb.dbTechLayerForbiddenSpacingRule_getWithin(self)

    def setPrl(self, prl):
        return _odb.dbTechLayerForbiddenSpacingRule_setPrl(self, prl)

    def getPrl(self):
        return _odb.dbTechLayerForbiddenSpacingRule_getPrl(self)

    def setTwoEdges(self, two_edges):
        return _odb.dbTechLayerForbiddenSpacingRule_setTwoEdges(self, two_edges)

    def getTwoEdges(self):
        return _odb.dbTechLayerForbiddenSpacingRule_getTwoEdges(self)

    def hasWidth(self):
        return _odb.dbTechLayerForbiddenSpacingRule_hasWidth(self)

    def hasWithin(self):
        return _odb.dbTechLayerForbiddenSpacingRule_hasWithin(self)

    def hasPrl(self):
        return _odb.dbTechLayerForbiddenSpacingRule_hasPrl(self)

    def hasTwoEdges(self):
        return _odb.dbTechLayerForbiddenSpacingRule_hasTwoEdges(self)

    @staticmethod
    def create(_layer):
        return _odb.dbTechLayerForbiddenSpacingRule_create(_layer)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerForbiddenSpacingRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerForbiddenSpacingRule_swiginit(self, _odb.new_dbTechLayerForbiddenSpacingRule())
    __swig_destroy__ = _odb.delete_dbTechLayerForbiddenSpacingRule

# Register dbTechLayerForbiddenSpacingRule in _odb:
_odb.dbTechLayerForbiddenSpacingRule_swigregister(dbTechLayerForbiddenSpacingRule)

def dbTechLayerForbiddenSpacingRule_create(_layer):
    return _odb.dbTechLayerForbiddenSpacingRule_create(_layer)

def dbTechLayerForbiddenSpacingRule_destroy(rule):
    return _odb.dbTechLayerForbiddenSpacingRule_destroy(rule)

class dbTechLayerKeepOutZoneRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setFirstCutClass(self, first_cut_class):
        return _odb.dbTechLayerKeepOutZoneRule_setFirstCutClass(self, first_cut_class)

    def getFirstCutClass(self):
        return _odb.dbTechLayerKeepOutZoneRule_getFirstCutClass(self)

    def setSecondCutClass(self, second_cut_class):
        return _odb.dbTechLayerKeepOutZoneRule_setSecondCutClass(self, second_cut_class)

    def getSecondCutClass(self):
        return _odb.dbTechLayerKeepOutZoneRule_getSecondCutClass(self)

    def setAlignedSpacing(self, aligned_spacing):
        return _odb.dbTechLayerKeepOutZoneRule_setAlignedSpacing(self, aligned_spacing)

    def getAlignedSpacing(self):
        return _odb.dbTechLayerKeepOutZoneRule_getAlignedSpacing(self)

    def setSideExtension(self, side_extension):
        return _odb.dbTechLayerKeepOutZoneRule_setSideExtension(self, side_extension)

    def getSideExtension(self):
        return _odb.dbTechLayerKeepOutZoneRule_getSideExtension(self)

    def setForwardExtension(self, forward_extension):
        return _odb.dbTechLayerKeepOutZoneRule_setForwardExtension(self, forward_extension)

    def getForwardExtension(self):
        return _odb.dbTechLayerKeepOutZoneRule_getForwardExtension(self)

    def setEndSideExtension(self, end_side_extension):
        return _odb.dbTechLayerKeepOutZoneRule_setEndSideExtension(self, end_side_extension)

    def getEndSideExtension(self):
        return _odb.dbTechLayerKeepOutZoneRule_getEndSideExtension(self)

    def setEndForwardExtension(self, end_forward_extension):
        return _odb.dbTechLayerKeepOutZoneRule_setEndForwardExtension(self, end_forward_extension)

    def getEndForwardExtension(self):
        return _odb.dbTechLayerKeepOutZoneRule_getEndForwardExtension(self)

    def setSideSideExtension(self, side_side_extension):
        return _odb.dbTechLayerKeepOutZoneRule_setSideSideExtension(self, side_side_extension)

    def getSideSideExtension(self):
        return _odb.dbTechLayerKeepOutZoneRule_getSideSideExtension(self)

    def setSideForwardExtension(self, side_forward_extension):
        return _odb.dbTechLayerKeepOutZoneRule_setSideForwardExtension(self, side_forward_extension)

    def getSideForwardExtension(self):
        return _odb.dbTechLayerKeepOutZoneRule_getSideForwardExtension(self)

    def setSpiralExtension(self, spiral_extension):
        return _odb.dbTechLayerKeepOutZoneRule_setSpiralExtension(self, spiral_extension)

    def getSpiralExtension(self):
        return _odb.dbTechLayerKeepOutZoneRule_getSpiralExtension(self)

    def setSameMask(self, same_mask):
        return _odb.dbTechLayerKeepOutZoneRule_setSameMask(self, same_mask)

    def isSameMask(self):
        return _odb.dbTechLayerKeepOutZoneRule_isSameMask(self)

    def setSameMetal(self, same_metal):
        return _odb.dbTechLayerKeepOutZoneRule_setSameMetal(self, same_metal)

    def isSameMetal(self):
        return _odb.dbTechLayerKeepOutZoneRule_isSameMetal(self)

    def setDiffMetal(self, diff_metal):
        return _odb.dbTechLayerKeepOutZoneRule_setDiffMetal(self, diff_metal)

    def isDiffMetal(self):
        return _odb.dbTechLayerKeepOutZoneRule_isDiffMetal(self)

    def setExceptAlignedSide(self, except_aligned_side):
        return _odb.dbTechLayerKeepOutZoneRule_setExceptAlignedSide(self, except_aligned_side)

    def isExceptAlignedSide(self):
        return _odb.dbTechLayerKeepOutZoneRule_isExceptAlignedSide(self)

    def setExceptAlignedEnd(self, except_aligned_end):
        return _odb.dbTechLayerKeepOutZoneRule_setExceptAlignedEnd(self, except_aligned_end)

    def isExceptAlignedEnd(self):
        return _odb.dbTechLayerKeepOutZoneRule_isExceptAlignedEnd(self)

    @staticmethod
    def create(_layer):
        return _odb.dbTechLayerKeepOutZoneRule_create(_layer)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerKeepOutZoneRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerKeepOutZoneRule_swiginit(self, _odb.new_dbTechLayerKeepOutZoneRule())
    __swig_destroy__ = _odb.delete_dbTechLayerKeepOutZoneRule

# Register dbTechLayerKeepOutZoneRule in _odb:
_odb.dbTechLayerKeepOutZoneRule_swigregister(dbTechLayerKeepOutZoneRule)

def dbTechLayerKeepOutZoneRule_create(_layer):
    return _odb.dbTechLayerKeepOutZoneRule_create(_layer)

def dbTechLayerKeepOutZoneRule_destroy(rule):
    return _odb.dbTechLayerKeepOutZoneRule_destroy(rule)

class dbTechLayerMaxSpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setCutClass(self, cut_class):
        return _odb.dbTechLayerMaxSpacingRule_setCutClass(self, cut_class)

    def getCutClass(self):
        return _odb.dbTechLayerMaxSpacingRule_getCutClass(self)

    def setMaxSpacing(self, max_spacing):
        return _odb.dbTechLayerMaxSpacingRule_setMaxSpacing(self, max_spacing)

    def getMaxSpacing(self):
        return _odb.dbTechLayerMaxSpacingRule_getMaxSpacing(self)

    def hasCutClass(self):
        return _odb.dbTechLayerMaxSpacingRule_hasCutClass(self)

    @staticmethod
    def create(_layer):
        return _odb.dbTechLayerMaxSpacingRule_create(_layer)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerMaxSpacingRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerMaxSpacingRule_swiginit(self, _odb.new_dbTechLayerMaxSpacingRule())
    __swig_destroy__ = _odb.delete_dbTechLayerMaxSpacingRule

# Register dbTechLayerMaxSpacingRule in _odb:
_odb.dbTechLayerMaxSpacingRule_swigregister(dbTechLayerMaxSpacingRule)

def dbTechLayerMaxSpacingRule_create(_layer):
    return _odb.dbTechLayerMaxSpacingRule_create(_layer)

def dbTechLayerMaxSpacingRule_destroy(rule):
    return _odb.dbTechLayerMaxSpacingRule_destroy(rule)

class dbTechLayerMinCutRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setNumCuts(self, num_cuts):
        return _odb.dbTechLayerMinCutRule_setNumCuts(self, num_cuts)

    def getNumCuts(self):
        return _odb.dbTechLayerMinCutRule_getNumCuts(self)

    def getCutClassCutsMap(self):
        return _odb.dbTechLayerMinCutRule_getCutClassCutsMap(self)

    def setWidth(self, width):
        return _odb.dbTechLayerMinCutRule_setWidth(self, width)

    def getWidth(self):
        return _odb.dbTechLayerMinCutRule_getWidth(self)

    def setWithinCutDist(self, within_cut_dist):
        return _odb.dbTechLayerMinCutRule_setWithinCutDist(self, within_cut_dist)

    def getWithinCutDist(self):
        return _odb.dbTechLayerMinCutRule_getWithinCutDist(self)

    def setLength(self, length):
        return _odb.dbTechLayerMinCutRule_setLength(self, length)

    def getLength(self):
        return _odb.dbTechLayerMinCutRule_getLength(self)

    def setLengthWithinDist(self, length_within_dist):
        return _odb.dbTechLayerMinCutRule_setLengthWithinDist(self, length_within_dist)

    def getLengthWithinDist(self):
        return _odb.dbTechLayerMinCutRule_getLengthWithinDist(self)

    def setArea(self, area):
        return _odb.dbTechLayerMinCutRule_setArea(self, area)

    def getArea(self):
        return _odb.dbTechLayerMinCutRule_getArea(self)

    def setAreaWithinDist(self, area_within_dist):
        return _odb.dbTechLayerMinCutRule_setAreaWithinDist(self, area_within_dist)

    def getAreaWithinDist(self):
        return _odb.dbTechLayerMinCutRule_getAreaWithinDist(self)

    def setPerCutClass(self, per_cut_class):
        return _odb.dbTechLayerMinCutRule_setPerCutClass(self, per_cut_class)

    def isPerCutClass(self):
        return _odb.dbTechLayerMinCutRule_isPerCutClass(self)

    def setWithinCutDistValid(self, within_cut_dist_valid):
        return _odb.dbTechLayerMinCutRule_setWithinCutDistValid(self, within_cut_dist_valid)

    def isWithinCutDistValid(self):
        return _odb.dbTechLayerMinCutRule_isWithinCutDistValid(self)

    def setFromAbove(self, from_above):
        return _odb.dbTechLayerMinCutRule_setFromAbove(self, from_above)

    def isFromAbove(self):
        return _odb.dbTechLayerMinCutRule_isFromAbove(self)

    def setFromBelow(self, from_below):
        return _odb.dbTechLayerMinCutRule_setFromBelow(self, from_below)

    def isFromBelow(self):
        return _odb.dbTechLayerMinCutRule_isFromBelow(self)

    def setLengthValid(self, length_valid):
        return _odb.dbTechLayerMinCutRule_setLengthValid(self, length_valid)

    def isLengthValid(self):
        return _odb.dbTechLayerMinCutRule_isLengthValid(self)

    def setAreaValid(self, area_valid):
        return _odb.dbTechLayerMinCutRule_setAreaValid(self, area_valid)

    def isAreaValid(self):
        return _odb.dbTechLayerMinCutRule_isAreaValid(self)

    def setAreaWithinDistValid(self, area_within_dist_valid):
        return _odb.dbTechLayerMinCutRule_setAreaWithinDistValid(self, area_within_dist_valid)

    def isAreaWithinDistValid(self):
        return _odb.dbTechLayerMinCutRule_isAreaWithinDistValid(self)

    def setSameMetalOverlap(self, same_metal_overlap):
        return _odb.dbTechLayerMinCutRule_setSameMetalOverlap(self, same_metal_overlap)

    def isSameMetalOverlap(self):
        return _odb.dbTechLayerMinCutRule_isSameMetalOverlap(self)

    def setFullyEnclosed(self, fully_enclosed):
        return _odb.dbTechLayerMinCutRule_setFullyEnclosed(self, fully_enclosed)

    def isFullyEnclosed(self):
        return _odb.dbTechLayerMinCutRule_isFullyEnclosed(self)

    def setCutsPerCutClass(self, cut_class, num_cuts):
        return _odb.dbTechLayerMinCutRule_setCutsPerCutClass(self, cut_class, num_cuts)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerMinCutRule_create(layer)

    @staticmethod
    def getTechLayerMinCutRule(inly, dbid):
        return _odb.dbTechLayerMinCutRule_getTechLayerMinCutRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerMinCutRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerMinCutRule_swiginit(self, _odb.new_dbTechLayerMinCutRule())
    __swig_destroy__ = _odb.delete_dbTechLayerMinCutRule

# Register dbTechLayerMinCutRule in _odb:
_odb.dbTechLayerMinCutRule_swigregister(dbTechLayerMinCutRule)

def dbTechLayerMinCutRule_create(layer):
    return _odb.dbTechLayerMinCutRule_create(layer)

def dbTechLayerMinCutRule_getTechLayerMinCutRule(inly, dbid):
    return _odb.dbTechLayerMinCutRule_getTechLayerMinCutRule(inly, dbid)

def dbTechLayerMinCutRule_destroy(rule):
    return _odb.dbTechLayerMinCutRule_destroy(rule)

class dbTechLayerMinStepRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMinStepLength(self, min_step_length):
        return _odb.dbTechLayerMinStepRule_setMinStepLength(self, min_step_length)

    def getMinStepLength(self):
        return _odb.dbTechLayerMinStepRule_getMinStepLength(self)

    def setMaxEdges(self, max_edges):
        return _odb.dbTechLayerMinStepRule_setMaxEdges(self, max_edges)

    def getMaxEdges(self):
        return _odb.dbTechLayerMinStepRule_getMaxEdges(self)

    def setMinAdjLength1(self, min_adj_length1):
        return _odb.dbTechLayerMinStepRule_setMinAdjLength1(self, min_adj_length1)

    def getMinAdjLength1(self):
        return _odb.dbTechLayerMinStepRule_getMinAdjLength1(self)

    def setMinAdjLength2(self, min_adj_length2):
        return _odb.dbTechLayerMinStepRule_setMinAdjLength2(self, min_adj_length2)

    def getMinAdjLength2(self):
        return _odb.dbTechLayerMinStepRule_getMinAdjLength2(self)

    def setEolWidth(self, eol_width):
        return _odb.dbTechLayerMinStepRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odb.dbTechLayerMinStepRule_getEolWidth(self)

    def setMinBetweenLength(self, min_between_length):
        return _odb.dbTechLayerMinStepRule_setMinBetweenLength(self, min_between_length)

    def getMinBetweenLength(self):
        return _odb.dbTechLayerMinStepRule_getMinBetweenLength(self)

    def setMaxEdgesValid(self, max_edges_valid):
        return _odb.dbTechLayerMinStepRule_setMaxEdgesValid(self, max_edges_valid)

    def isMaxEdgesValid(self):
        return _odb.dbTechLayerMinStepRule_isMaxEdgesValid(self)

    def setMinAdjLength1Valid(self, min_adj_length1_valid):
        return _odb.dbTechLayerMinStepRule_setMinAdjLength1Valid(self, min_adj_length1_valid)

    def isMinAdjLength1Valid(self):
        return _odb.dbTechLayerMinStepRule_isMinAdjLength1Valid(self)

    def setNoBetweenEol(self, no_between_eol):
        return _odb.dbTechLayerMinStepRule_setNoBetweenEol(self, no_between_eol)

    def isNoBetweenEol(self):
        return _odb.dbTechLayerMinStepRule_isNoBetweenEol(self)

    def setMinAdjLength2Valid(self, min_adj_length2_valid):
        return _odb.dbTechLayerMinStepRule_setMinAdjLength2Valid(self, min_adj_length2_valid)

    def isMinAdjLength2Valid(self):
        return _odb.dbTechLayerMinStepRule_isMinAdjLength2Valid(self)

    def setConvexCorner(self, convex_corner):
        return _odb.dbTechLayerMinStepRule_setConvexCorner(self, convex_corner)

    def isConvexCorner(self):
        return _odb.dbTechLayerMinStepRule_isConvexCorner(self)

    def setMinBetweenLengthValid(self, min_between_length_valid):
        return _odb.dbTechLayerMinStepRule_setMinBetweenLengthValid(self, min_between_length_valid)

    def isMinBetweenLengthValid(self):
        return _odb.dbTechLayerMinStepRule_isMinBetweenLengthValid(self)

    def setExceptSameCorners(self, except_same_corners):
        return _odb.dbTechLayerMinStepRule_setExceptSameCorners(self, except_same_corners)

    def isExceptSameCorners(self):
        return _odb.dbTechLayerMinStepRule_isExceptSameCorners(self)

    def setConcaveCorner(self, concave_corner):
        return _odb.dbTechLayerMinStepRule_setConcaveCorner(self, concave_corner)

    def isConcaveCorner(self):
        return _odb.dbTechLayerMinStepRule_isConcaveCorner(self)

    def setExceptRectangle(self, except_rectangle):
        return _odb.dbTechLayerMinStepRule_setExceptRectangle(self, except_rectangle)

    def isExceptRectangle(self):
        return _odb.dbTechLayerMinStepRule_isExceptRectangle(self)

    def setNoAdjacentEol(self, no_adjacent_eol):
        return _odb.dbTechLayerMinStepRule_setNoAdjacentEol(self, no_adjacent_eol)

    def isNoAdjacentEol(self):
        return _odb.dbTechLayerMinStepRule_isNoAdjacentEol(self)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerMinStepRule_create(layer)

    @staticmethod
    def getTechLayerMinStepRule(inly, dbid):
        return _odb.dbTechLayerMinStepRule_getTechLayerMinStepRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerMinStepRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerMinStepRule_swiginit(self, _odb.new_dbTechLayerMinStepRule())
    __swig_destroy__ = _odb.delete_dbTechLayerMinStepRule

# Register dbTechLayerMinStepRule in _odb:
_odb.dbTechLayerMinStepRule_swigregister(dbTechLayerMinStepRule)

def dbTechLayerMinStepRule_create(layer):
    return _odb.dbTechLayerMinStepRule_create(layer)

def dbTechLayerMinStepRule_getTechLayerMinStepRule(inly, dbid):
    return _odb.dbTechLayerMinStepRule_getTechLayerMinStepRule(inly, dbid)

def dbTechLayerMinStepRule_destroy(rule):
    return _odb.dbTechLayerMinStepRule_destroy(rule)

class dbTechLayerSpacingEolRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setEolSpace(self, eol_space):
        return _odb.dbTechLayerSpacingEolRule_setEolSpace(self, eol_space)

    def getEolSpace(self):
        return _odb.dbTechLayerSpacingEolRule_getEolSpace(self)

    def setEolWidth(self, eol_width):
        return _odb.dbTechLayerSpacingEolRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odb.dbTechLayerSpacingEolRule_getEolWidth(self)

    def setWrongDirSpace(self, wrong_dir_space):
        return _odb.dbTechLayerSpacingEolRule_setWrongDirSpace(self, wrong_dir_space)

    def getWrongDirSpace(self):
        return _odb.dbTechLayerSpacingEolRule_getWrongDirSpace(self)

    def setOppositeWidth(self, opposite_width):
        return _odb.dbTechLayerSpacingEolRule_setOppositeWidth(self, opposite_width)

    def getOppositeWidth(self):
        return _odb.dbTechLayerSpacingEolRule_getOppositeWidth(self)

    def setEolWithin(self, eol_within):
        return _odb.dbTechLayerSpacingEolRule_setEolWithin(self, eol_within)

    def getEolWithin(self):
        return _odb.dbTechLayerSpacingEolRule_getEolWithin(self)

    def setWrongDirWithin(self, wrong_dir_within):
        return _odb.dbTechLayerSpacingEolRule_setWrongDirWithin(self, wrong_dir_within)

    def getWrongDirWithin(self):
        return _odb.dbTechLayerSpacingEolRule_getWrongDirWithin(self)

    def setExactWidth(self, exact_width):
        return _odb.dbTechLayerSpacingEolRule_setExactWidth(self, exact_width)

    def getExactWidth(self):
        return _odb.dbTechLayerSpacingEolRule_getExactWidth(self)

    def setOtherWidth(self, other_width):
        return _odb.dbTechLayerSpacingEolRule_setOtherWidth(self, other_width)

    def getOtherWidth(self):
        return _odb.dbTechLayerSpacingEolRule_getOtherWidth(self)

    def setFillTriangle(self, fill_triangle):
        return _odb.dbTechLayerSpacingEolRule_setFillTriangle(self, fill_triangle)

    def getFillTriangle(self):
        return _odb.dbTechLayerSpacingEolRule_getFillTriangle(self)

    def setCutClass(self, cut_class):
        return _odb.dbTechLayerSpacingEolRule_setCutClass(self, cut_class)

    def getCutClass(self):
        return _odb.dbTechLayerSpacingEolRule_getCutClass(self)

    def setWithCutSpace(self, with_cut_space):
        return _odb.dbTechLayerSpacingEolRule_setWithCutSpace(self, with_cut_space)

    def getWithCutSpace(self):
        return _odb.dbTechLayerSpacingEolRule_getWithCutSpace(self)

    def setEnclosureEndWidth(self, enclosure_end_width):
        return _odb.dbTechLayerSpacingEolRule_setEnclosureEndWidth(self, enclosure_end_width)

    def getEnclosureEndWidth(self):
        return _odb.dbTechLayerSpacingEolRule_getEnclosureEndWidth(self)

    def setEnclosureEndWithin(self, enclosure_end_within):
        return _odb.dbTechLayerSpacingEolRule_setEnclosureEndWithin(self, enclosure_end_within)

    def getEnclosureEndWithin(self):
        return _odb.dbTechLayerSpacingEolRule_getEnclosureEndWithin(self)

    def setEndPrlSpace(self, end_prl_space):
        return _odb.dbTechLayerSpacingEolRule_setEndPrlSpace(self, end_prl_space)

    def getEndPrlSpace(self):
        return _odb.dbTechLayerSpacingEolRule_getEndPrlSpace(self)

    def setEndPrl(self, end_prl):
        return _odb.dbTechLayerSpacingEolRule_setEndPrl(self, end_prl)

    def getEndPrl(self):
        return _odb.dbTechLayerSpacingEolRule_getEndPrl(self)

    def setEndToEndSpace(self, end_to_end_space):
        return _odb.dbTechLayerSpacingEolRule_setEndToEndSpace(self, end_to_end_space)

    def getEndToEndSpace(self):
        return _odb.dbTechLayerSpacingEolRule_getEndToEndSpace(self)

    def setOneCutSpace(self, one_cut_space):
        return _odb.dbTechLayerSpacingEolRule_setOneCutSpace(self, one_cut_space)

    def getOneCutSpace(self):
        return _odb.dbTechLayerSpacingEolRule_getOneCutSpace(self)

    def setTwoCutSpace(self, two_cut_space):
        return _odb.dbTechLayerSpacingEolRule_setTwoCutSpace(self, two_cut_space)

    def getTwoCutSpace(self):
        return _odb.dbTechLayerSpacingEolRule_getTwoCutSpace(self)

    def setExtension(self, extension):
        return _odb.dbTechLayerSpacingEolRule_setExtension(self, extension)

    def getExtension(self):
        return _odb.dbTechLayerSpacingEolRule_getExtension(self)

    def setWrongDirExtension(self, wrong_dir_extension):
        return _odb.dbTechLayerSpacingEolRule_setWrongDirExtension(self, wrong_dir_extension)

    def getWrongDirExtension(self):
        return _odb.dbTechLayerSpacingEolRule_getWrongDirExtension(self)

    def setOtherEndWidth(self, other_end_width):
        return _odb.dbTechLayerSpacingEolRule_setOtherEndWidth(self, other_end_width)

    def getOtherEndWidth(self):
        return _odb.dbTechLayerSpacingEolRule_getOtherEndWidth(self)

    def setMaxLength(self, max_length):
        return _odb.dbTechLayerSpacingEolRule_setMaxLength(self, max_length)

    def getMaxLength(self):
        return _odb.dbTechLayerSpacingEolRule_getMaxLength(self)

    def setMinLength(self, min_length):
        return _odb.dbTechLayerSpacingEolRule_setMinLength(self, min_length)

    def getMinLength(self):
        return _odb.dbTechLayerSpacingEolRule_getMinLength(self)

    def setParSpace(self, par_space):
        return _odb.dbTechLayerSpacingEolRule_setParSpace(self, par_space)

    def getParSpace(self):
        return _odb.dbTechLayerSpacingEolRule_getParSpace(self)

    def setParWithin(self, par_within):
        return _odb.dbTechLayerSpacingEolRule_setParWithin(self, par_within)

    def getParWithin(self):
        return _odb.dbTechLayerSpacingEolRule_getParWithin(self)

    def setParPrl(self, par_prl):
        return _odb.dbTechLayerSpacingEolRule_setParPrl(self, par_prl)

    def getParPrl(self):
        return _odb.dbTechLayerSpacingEolRule_getParPrl(self)

    def setParMinLength(self, par_min_length):
        return _odb.dbTechLayerSpacingEolRule_setParMinLength(self, par_min_length)

    def getParMinLength(self):
        return _odb.dbTechLayerSpacingEolRule_getParMinLength(self)

    def setEncloseDist(self, enclose_dist):
        return _odb.dbTechLayerSpacingEolRule_setEncloseDist(self, enclose_dist)

    def getEncloseDist(self):
        return _odb.dbTechLayerSpacingEolRule_getEncloseDist(self)

    def setCutToMetalSpace(self, cut_to_metal_space):
        return _odb.dbTechLayerSpacingEolRule_setCutToMetalSpace(self, cut_to_metal_space)

    def getCutToMetalSpace(self):
        return _odb.dbTechLayerSpacingEolRule_getCutToMetalSpace(self)

    def setMinAdjLength(self, min_adj_length):
        return _odb.dbTechLayerSpacingEolRule_setMinAdjLength(self, min_adj_length)

    def getMinAdjLength(self):
        return _odb.dbTechLayerSpacingEolRule_getMinAdjLength(self)

    def setMinAdjLength1(self, min_adj_length1):
        return _odb.dbTechLayerSpacingEolRule_setMinAdjLength1(self, min_adj_length1)

    def getMinAdjLength1(self):
        return _odb.dbTechLayerSpacingEolRule_getMinAdjLength1(self)

    def setMinAdjLength2(self, min_adj_length2):
        return _odb.dbTechLayerSpacingEolRule_setMinAdjLength2(self, min_adj_length2)

    def getMinAdjLength2(self):
        return _odb.dbTechLayerSpacingEolRule_getMinAdjLength2(self)

    def setNotchLength(self, notch_length):
        return _odb.dbTechLayerSpacingEolRule_setNotchLength(self, notch_length)

    def getNotchLength(self):
        return _odb.dbTechLayerSpacingEolRule_getNotchLength(self)

    def setExactWidthValid(self, exact_width_valid):
        return _odb.dbTechLayerSpacingEolRule_setExactWidthValid(self, exact_width_valid)

    def isExactWidthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isExactWidthValid(self)

    def setWrongDirSpacingValid(self, wrong_dir_spacing_valid):
        return _odb.dbTechLayerSpacingEolRule_setWrongDirSpacingValid(self, wrong_dir_spacing_valid)

    def isWrongDirSpacingValid(self):
        return _odb.dbTechLayerSpacingEolRule_isWrongDirSpacingValid(self)

    def setOppositeWidthValid(self, opposite_width_valid):
        return _odb.dbTechLayerSpacingEolRule_setOppositeWidthValid(self, opposite_width_valid)

    def isOppositeWidthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isOppositeWidthValid(self)

    def setWithinValid(self, within_valid):
        return _odb.dbTechLayerSpacingEolRule_setWithinValid(self, within_valid)

    def isWithinValid(self):
        return _odb.dbTechLayerSpacingEolRule_isWithinValid(self)

    def setWrongDirWithinValid(self, wrong_dir_within_valid):
        return _odb.dbTechLayerSpacingEolRule_setWrongDirWithinValid(self, wrong_dir_within_valid)

    def isWrongDirWithinValid(self):
        return _odb.dbTechLayerSpacingEolRule_isWrongDirWithinValid(self)

    def setSameMaskValid(self, same_mask_valid):
        return _odb.dbTechLayerSpacingEolRule_setSameMaskValid(self, same_mask_valid)

    def isSameMaskValid(self):
        return _odb.dbTechLayerSpacingEolRule_isSameMaskValid(self)

    def setExceptExactWidthValid(self, except_exact_width_valid):
        return _odb.dbTechLayerSpacingEolRule_setExceptExactWidthValid(self, except_exact_width_valid)

    def isExceptExactWidthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isExceptExactWidthValid(self)

    def setFillConcaveCornerValid(self, fill_concave_corner_valid):
        return _odb.dbTechLayerSpacingEolRule_setFillConcaveCornerValid(self, fill_concave_corner_valid)

    def isFillConcaveCornerValid(self):
        return _odb.dbTechLayerSpacingEolRule_isFillConcaveCornerValid(self)

    def setWithcutValid(self, withcut_valid):
        return _odb.dbTechLayerSpacingEolRule_setWithcutValid(self, withcut_valid)

    def isWithcutValid(self):
        return _odb.dbTechLayerSpacingEolRule_isWithcutValid(self)

    def setCutClassValid(self, cut_class_valid):
        return _odb.dbTechLayerSpacingEolRule_setCutClassValid(self, cut_class_valid)

    def isCutClassValid(self):
        return _odb.dbTechLayerSpacingEolRule_isCutClassValid(self)

    def setWithCutAboveValid(self, with_cut_above_valid):
        return _odb.dbTechLayerSpacingEolRule_setWithCutAboveValid(self, with_cut_above_valid)

    def isWithCutAboveValid(self):
        return _odb.dbTechLayerSpacingEolRule_isWithCutAboveValid(self)

    def setEnclosureEndValid(self, enclosure_end_valid):
        return _odb.dbTechLayerSpacingEolRule_setEnclosureEndValid(self, enclosure_end_valid)

    def isEnclosureEndValid(self):
        return _odb.dbTechLayerSpacingEolRule_isEnclosureEndValid(self)

    def setEnclosureEndWithinValid(self, enclosure_end_within_valid):
        return _odb.dbTechLayerSpacingEolRule_setEnclosureEndWithinValid(self, enclosure_end_within_valid)

    def isEnclosureEndWithinValid(self):
        return _odb.dbTechLayerSpacingEolRule_isEnclosureEndWithinValid(self)

    def setEndPrlSpacingValid(self, end_prl_spacing_valid):
        return _odb.dbTechLayerSpacingEolRule_setEndPrlSpacingValid(self, end_prl_spacing_valid)

    def isEndPrlSpacingValid(self):
        return _odb.dbTechLayerSpacingEolRule_isEndPrlSpacingValid(self)

    def setPrlValid(self, prl_valid):
        return _odb.dbTechLayerSpacingEolRule_setPrlValid(self, prl_valid)

    def isPrlValid(self):
        return _odb.dbTechLayerSpacingEolRule_isPrlValid(self)

    def setEndToEndValid(self, end_to_end_valid):
        return _odb.dbTechLayerSpacingEolRule_setEndToEndValid(self, end_to_end_valid)

    def isEndToEndValid(self):
        return _odb.dbTechLayerSpacingEolRule_isEndToEndValid(self)

    def setCutSpacesValid(self, cut_spaces_valid):
        return _odb.dbTechLayerSpacingEolRule_setCutSpacesValid(self, cut_spaces_valid)

    def isCutSpacesValid(self):
        return _odb.dbTechLayerSpacingEolRule_isCutSpacesValid(self)

    def setExtensionValid(self, extension_valid):
        return _odb.dbTechLayerSpacingEolRule_setExtensionValid(self, extension_valid)

    def isExtensionValid(self):
        return _odb.dbTechLayerSpacingEolRule_isExtensionValid(self)

    def setWrongDirExtensionValid(self, wrong_dir_extension_valid):
        return _odb.dbTechLayerSpacingEolRule_setWrongDirExtensionValid(self, wrong_dir_extension_valid)

    def isWrongDirExtensionValid(self):
        return _odb.dbTechLayerSpacingEolRule_isWrongDirExtensionValid(self)

    def setOtherEndWidthValid(self, other_end_width_valid):
        return _odb.dbTechLayerSpacingEolRule_setOtherEndWidthValid(self, other_end_width_valid)

    def isOtherEndWidthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isOtherEndWidthValid(self)

    def setMaxLengthValid(self, max_length_valid):
        return _odb.dbTechLayerSpacingEolRule_setMaxLengthValid(self, max_length_valid)

    def isMaxLengthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isMaxLengthValid(self)

    def setMinLengthValid(self, min_length_valid):
        return _odb.dbTechLayerSpacingEolRule_setMinLengthValid(self, min_length_valid)

    def isMinLengthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isMinLengthValid(self)

    def setTwoSidesValid(self, two_sides_valid):
        return _odb.dbTechLayerSpacingEolRule_setTwoSidesValid(self, two_sides_valid)

    def isTwoSidesValid(self):
        return _odb.dbTechLayerSpacingEolRule_isTwoSidesValid(self)

    def setEqualRectWidthValid(self, equal_rect_width_valid):
        return _odb.dbTechLayerSpacingEolRule_setEqualRectWidthValid(self, equal_rect_width_valid)

    def isEqualRectWidthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isEqualRectWidthValid(self)

    def setParallelEdgeValid(self, parallel_edge_valid):
        return _odb.dbTechLayerSpacingEolRule_setParallelEdgeValid(self, parallel_edge_valid)

    def isParallelEdgeValid(self):
        return _odb.dbTechLayerSpacingEolRule_isParallelEdgeValid(self)

    def setSubtractEolWidthValid(self, subtract_eol_width_valid):
        return _odb.dbTechLayerSpacingEolRule_setSubtractEolWidthValid(self, subtract_eol_width_valid)

    def isSubtractEolWidthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isSubtractEolWidthValid(self)

    def setParPrlValid(self, par_prl_valid):
        return _odb.dbTechLayerSpacingEolRule_setParPrlValid(self, par_prl_valid)

    def isParPrlValid(self):
        return _odb.dbTechLayerSpacingEolRule_isParPrlValid(self)

    def setParMinLengthValid(self, par_min_length_valid):
        return _odb.dbTechLayerSpacingEolRule_setParMinLengthValid(self, par_min_length_valid)

    def isParMinLengthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isParMinLengthValid(self)

    def setTwoEdgesValid(self, two_edges_valid):
        return _odb.dbTechLayerSpacingEolRule_setTwoEdgesValid(self, two_edges_valid)

    def isTwoEdgesValid(self):
        return _odb.dbTechLayerSpacingEolRule_isTwoEdgesValid(self)

    def setSameMetalValid(self, same_metal_valid):
        return _odb.dbTechLayerSpacingEolRule_setSameMetalValid(self, same_metal_valid)

    def isSameMetalValid(self):
        return _odb.dbTechLayerSpacingEolRule_isSameMetalValid(self)

    def setNonEolCornerOnlyValid(self, non_eol_corner_only_valid):
        return _odb.dbTechLayerSpacingEolRule_setNonEolCornerOnlyValid(self, non_eol_corner_only_valid)

    def isNonEolCornerOnlyValid(self):
        return _odb.dbTechLayerSpacingEolRule_isNonEolCornerOnlyValid(self)

    def setParallelSameMaskValid(self, parallel_same_mask_valid):
        return _odb.dbTechLayerSpacingEolRule_setParallelSameMaskValid(self, parallel_same_mask_valid)

    def isParallelSameMaskValid(self):
        return _odb.dbTechLayerSpacingEolRule_isParallelSameMaskValid(self)

    def setEncloseCutValid(self, enclose_cut_valid):
        return _odb.dbTechLayerSpacingEolRule_setEncloseCutValid(self, enclose_cut_valid)

    def isEncloseCutValid(self):
        return _odb.dbTechLayerSpacingEolRule_isEncloseCutValid(self)

    def setBelowValid(self, below_valid):
        return _odb.dbTechLayerSpacingEolRule_setBelowValid(self, below_valid)

    def isBelowValid(self):
        return _odb.dbTechLayerSpacingEolRule_isBelowValid(self)

    def setAboveValid(self, above_valid):
        return _odb.dbTechLayerSpacingEolRule_setAboveValid(self, above_valid)

    def isAboveValid(self):
        return _odb.dbTechLayerSpacingEolRule_isAboveValid(self)

    def setCutSpacingValid(self, cut_spacing_valid):
        return _odb.dbTechLayerSpacingEolRule_setCutSpacingValid(self, cut_spacing_valid)

    def isCutSpacingValid(self):
        return _odb.dbTechLayerSpacingEolRule_isCutSpacingValid(self)

    def setAllCutsValid(self, all_cuts_valid):
        return _odb.dbTechLayerSpacingEolRule_setAllCutsValid(self, all_cuts_valid)

    def isAllCutsValid(self):
        return _odb.dbTechLayerSpacingEolRule_isAllCutsValid(self)

    def setToConcaveCornerValid(self, to_concave_corner_valid):
        return _odb.dbTechLayerSpacingEolRule_setToConcaveCornerValid(self, to_concave_corner_valid)

    def isToConcaveCornerValid(self):
        return _odb.dbTechLayerSpacingEolRule_isToConcaveCornerValid(self)

    def setMinAdjacentLengthValid(self, min_adjacent_length_valid):
        return _odb.dbTechLayerSpacingEolRule_setMinAdjacentLengthValid(self, min_adjacent_length_valid)

    def isMinAdjacentLengthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isMinAdjacentLengthValid(self)

    def setTwoMinAdjLengthValid(self, two_min_adj_length_valid):
        return _odb.dbTechLayerSpacingEolRule_setTwoMinAdjLengthValid(self, two_min_adj_length_valid)

    def isTwoMinAdjLengthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isTwoMinAdjLengthValid(self)

    def setToNotchLengthValid(self, to_notch_length_valid):
        return _odb.dbTechLayerSpacingEolRule_setToNotchLengthValid(self, to_notch_length_valid)

    def isToNotchLengthValid(self):
        return _odb.dbTechLayerSpacingEolRule_isToNotchLengthValid(self)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerSpacingEolRule_create(layer)

    @staticmethod
    def getTechLayerSpacingEolRule(inly, dbid):
        return _odb.dbTechLayerSpacingEolRule_getTechLayerSpacingEolRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerSpacingEolRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerSpacingEolRule_swiginit(self, _odb.new_dbTechLayerSpacingEolRule())
    __swig_destroy__ = _odb.delete_dbTechLayerSpacingEolRule

# Register dbTechLayerSpacingEolRule in _odb:
_odb.dbTechLayerSpacingEolRule_swigregister(dbTechLayerSpacingEolRule)

def dbTechLayerSpacingEolRule_create(layer):
    return _odb.dbTechLayerSpacingEolRule_create(layer)

def dbTechLayerSpacingEolRule_getTechLayerSpacingEolRule(inly, dbid):
    return _odb.dbTechLayerSpacingEolRule_getTechLayerSpacingEolRule(inly, dbid)

def dbTechLayerSpacingEolRule_destroy(rule):
    return _odb.dbTechLayerSpacingEolRule_destroy(rule)

class dbTechLayerSpacingTablePrlRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setEolWidth(self, eol_width):
        return _odb.dbTechLayerSpacingTablePrlRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odb.dbTechLayerSpacingTablePrlRule_getEolWidth(self)

    def setWrongDirection(self, wrong_direction):
        return _odb.dbTechLayerSpacingTablePrlRule_setWrongDirection(self, wrong_direction)

    def isWrongDirection(self):
        return _odb.dbTechLayerSpacingTablePrlRule_isWrongDirection(self)

    def setSameMask(self, same_mask):
        return _odb.dbTechLayerSpacingTablePrlRule_setSameMask(self, same_mask)

    def isSameMask(self):
        return _odb.dbTechLayerSpacingTablePrlRule_isSameMask(self)

    def setExceeptEol(self, exceept_eol):
        return _odb.dbTechLayerSpacingTablePrlRule_setExceeptEol(self, exceept_eol)

    def isExceeptEol(self):
        return _odb.dbTechLayerSpacingTablePrlRule_isExceeptEol(self)

    @staticmethod
    def getTechLayerSpacingTablePrlRule(inly, dbid):
        return _odb.dbTechLayerSpacingTablePrlRule_getTechLayerSpacingTablePrlRule(inly, dbid)

    @staticmethod
    def create(_layer):
        return _odb.dbTechLayerSpacingTablePrlRule_create(_layer)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerSpacingTablePrlRule_destroy(rule)

    def setTable(self, width_tbl, length_tbl, spacing_tbl, excluded_map):
        return _odb.dbTechLayerSpacingTablePrlRule_setTable(self, width_tbl, length_tbl, spacing_tbl, excluded_map)

    def getTable(self, width_tbl, length_tbl, spacing_tbl, excluded_map):
        return _odb.dbTechLayerSpacingTablePrlRule_getTable(self, width_tbl, length_tbl, spacing_tbl, excluded_map)

    def setSpacingTableInfluence(self, influence_tbl):
        return _odb.dbTechLayerSpacingTablePrlRule_setSpacingTableInfluence(self, influence_tbl)

    def getSpacing(self, width, length):
        return _odb.dbTechLayerSpacingTablePrlRule_getSpacing(self, width, length)

    def hasExceptWithin(self, width):
        return _odb.dbTechLayerSpacingTablePrlRule_hasExceptWithin(self, width)

    def getExceptWithin(self, width):
        return _odb.dbTechLayerSpacingTablePrlRule_getExceptWithin(self, width)

    def __init__(self):
        _odb.dbTechLayerSpacingTablePrlRule_swiginit(self, _odb.new_dbTechLayerSpacingTablePrlRule())
    __swig_destroy__ = _odb.delete_dbTechLayerSpacingTablePrlRule

# Register dbTechLayerSpacingTablePrlRule in _odb:
_odb.dbTechLayerSpacingTablePrlRule_swigregister(dbTechLayerSpacingTablePrlRule)

def dbTechLayerSpacingTablePrlRule_getTechLayerSpacingTablePrlRule(inly, dbid):
    return _odb.dbTechLayerSpacingTablePrlRule_getTechLayerSpacingTablePrlRule(inly, dbid)

def dbTechLayerSpacingTablePrlRule_create(_layer):
    return _odb.dbTechLayerSpacingTablePrlRule_create(_layer)

def dbTechLayerSpacingTablePrlRule_destroy(rule):
    return _odb.dbTechLayerSpacingTablePrlRule_destroy(rule)

class dbTechLayerTwoWiresForbiddenSpcRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMinSpacing(self, min_spacing):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_setMinSpacing(self, min_spacing)

    def getMinSpacing(self):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_getMinSpacing(self)

    def setMaxSpacing(self, max_spacing):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_setMaxSpacing(self, max_spacing)

    def getMaxSpacing(self):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_getMaxSpacing(self)

    def setMinSpanLength(self, min_span_length):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_setMinSpanLength(self, min_span_length)

    def getMinSpanLength(self):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_getMinSpanLength(self)

    def setMaxSpanLength(self, max_span_length):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_setMaxSpanLength(self, max_span_length)

    def getMaxSpanLength(self):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_getMaxSpanLength(self)

    def setPrl(self, prl):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_setPrl(self, prl)

    def getPrl(self):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_getPrl(self)

    def setMinExactSpanLength(self, min_exact_span_length):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_setMinExactSpanLength(self, min_exact_span_length)

    def isMinExactSpanLength(self):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_isMinExactSpanLength(self)

    def setMaxExactSpanLength(self, max_exact_span_length):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_setMaxExactSpanLength(self, max_exact_span_length)

    def isMaxExactSpanLength(self):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_isMaxExactSpanLength(self)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_create(layer)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerTwoWiresForbiddenSpcRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerTwoWiresForbiddenSpcRule_swiginit(self, _odb.new_dbTechLayerTwoWiresForbiddenSpcRule())
    __swig_destroy__ = _odb.delete_dbTechLayerTwoWiresForbiddenSpcRule

# Register dbTechLayerTwoWiresForbiddenSpcRule in _odb:
_odb.dbTechLayerTwoWiresForbiddenSpcRule_swigregister(dbTechLayerTwoWiresForbiddenSpcRule)

def dbTechLayerTwoWiresForbiddenSpcRule_create(layer):
    return _odb.dbTechLayerTwoWiresForbiddenSpcRule_create(layer)

def dbTechLayerTwoWiresForbiddenSpcRule_destroy(rule):
    return _odb.dbTechLayerTwoWiresForbiddenSpcRule_destroy(rule)

class dbTechLayerWidthTableRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setWrongDirection(self, wrong_direction):
        return _odb.dbTechLayerWidthTableRule_setWrongDirection(self, wrong_direction)

    def isWrongDirection(self):
        return _odb.dbTechLayerWidthTableRule_isWrongDirection(self)

    def setOrthogonal(self, orthogonal):
        return _odb.dbTechLayerWidthTableRule_setOrthogonal(self, orthogonal)

    def isOrthogonal(self):
        return _odb.dbTechLayerWidthTableRule_isOrthogonal(self)

    def addWidth(self, width):
        return _odb.dbTechLayerWidthTableRule_addWidth(self, width)

    def getWidthTable(self):
        return _odb.dbTechLayerWidthTableRule_getWidthTable(self)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerWidthTableRule_create(layer)

    @staticmethod
    def getTechLayerWidthTableRule(inly, dbid):
        return _odb.dbTechLayerWidthTableRule_getTechLayerWidthTableRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerWidthTableRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerWidthTableRule_swiginit(self, _odb.new_dbTechLayerWidthTableRule())
    __swig_destroy__ = _odb.delete_dbTechLayerWidthTableRule

# Register dbTechLayerWidthTableRule in _odb:
_odb.dbTechLayerWidthTableRule_swigregister(dbTechLayerWidthTableRule)

def dbTechLayerWidthTableRule_create(layer):
    return _odb.dbTechLayerWidthTableRule_create(layer)

def dbTechLayerWidthTableRule_getTechLayerWidthTableRule(inly, dbid):
    return _odb.dbTechLayerWidthTableRule_getTechLayerWidthTableRule(inly, dbid)

def dbTechLayerWidthTableRule_destroy(rule):
    return _odb.dbTechLayerWidthTableRule_destroy(rule)

class dbTechLayerWrongDirSpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setWrongdirSpace(self, wrongdir_space):
        return _odb.dbTechLayerWrongDirSpacingRule_setWrongdirSpace(self, wrongdir_space)

    def getWrongdirSpace(self):
        return _odb.dbTechLayerWrongDirSpacingRule_getWrongdirSpace(self)

    def setNoneolWidth(self, noneol_width):
        return _odb.dbTechLayerWrongDirSpacingRule_setNoneolWidth(self, noneol_width)

    def getNoneolWidth(self):
        return _odb.dbTechLayerWrongDirSpacingRule_getNoneolWidth(self)

    def setLength(self, length):
        return _odb.dbTechLayerWrongDirSpacingRule_setLength(self, length)

    def getLength(self):
        return _odb.dbTechLayerWrongDirSpacingRule_getLength(self)

    def setPrlLength(self, prl_length):
        return _odb.dbTechLayerWrongDirSpacingRule_setPrlLength(self, prl_length)

    def getPrlLength(self):
        return _odb.dbTechLayerWrongDirSpacingRule_getPrlLength(self)

    def setNoneolValid(self, noneol_valid):
        return _odb.dbTechLayerWrongDirSpacingRule_setNoneolValid(self, noneol_valid)

    def isNoneolValid(self):
        return _odb.dbTechLayerWrongDirSpacingRule_isNoneolValid(self)

    def setLengthValid(self, length_valid):
        return _odb.dbTechLayerWrongDirSpacingRule_setLengthValid(self, length_valid)

    def isLengthValid(self):
        return _odb.dbTechLayerWrongDirSpacingRule_isLengthValid(self)

    @staticmethod
    def create(layer):
        return _odb.dbTechLayerWrongDirSpacingRule_create(layer)

    @staticmethod
    def getTechLayerWrongDirSpacingRule(inly, dbid):
        return _odb.dbTechLayerWrongDirSpacingRule_getTechLayerWrongDirSpacingRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odb.dbTechLayerWrongDirSpacingRule_destroy(rule)

    def __init__(self):
        _odb.dbTechLayerWrongDirSpacingRule_swiginit(self, _odb.new_dbTechLayerWrongDirSpacingRule())
    __swig_destroy__ = _odb.delete_dbTechLayerWrongDirSpacingRule

# Register dbTechLayerWrongDirSpacingRule in _odb:
_odb.dbTechLayerWrongDirSpacingRule_swigregister(dbTechLayerWrongDirSpacingRule)

def dbTechLayerWrongDirSpacingRule_create(layer):
    return _odb.dbTechLayerWrongDirSpacingRule_create(layer)

def dbTechLayerWrongDirSpacingRule_getTechLayerWrongDirSpacingRule(inly, dbid):
    return _odb.dbTechLayerWrongDirSpacingRule_getTechLayerWrongDirSpacingRule(inly, dbid)

def dbTechLayerWrongDirSpacingRule_destroy(rule):
    return _odb.dbTechLayerWrongDirSpacingRule_destroy(rule)

class dbBoolProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _odb.dbBoolProperty_getValue(self)

    def setValue(self, value):
        return _odb.dbBoolProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _odb.dbBoolProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _odb.dbBoolProperty_find(object, name)

    def __init__(self):
        _odb.dbBoolProperty_swiginit(self, _odb.new_dbBoolProperty())
    __swig_destroy__ = _odb.delete_dbBoolProperty

# Register dbBoolProperty in _odb:
_odb.dbBoolProperty_swigregister(dbBoolProperty)

def dbBoolProperty_create(object, name, value):
    return _odb.dbBoolProperty_create(object, name, value)

def dbBoolProperty_find(object, name):
    return _odb.dbBoolProperty_find(object, name)

class dbStringProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _odb.dbStringProperty_getValue(self)

    def setValue(self, value):
        return _odb.dbStringProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _odb.dbStringProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _odb.dbStringProperty_find(object, name)

    def __init__(self):
        _odb.dbStringProperty_swiginit(self, _odb.new_dbStringProperty())
    __swig_destroy__ = _odb.delete_dbStringProperty

# Register dbStringProperty in _odb:
_odb.dbStringProperty_swigregister(dbStringProperty)

def dbStringProperty_create(object, name, value):
    return _odb.dbStringProperty_create(object, name, value)

def dbStringProperty_find(object, name):
    return _odb.dbStringProperty_find(object, name)

class dbIntProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _odb.dbIntProperty_getValue(self)

    def setValue(self, value):
        return _odb.dbIntProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _odb.dbIntProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _odb.dbIntProperty_find(object, name)

    def __init__(self):
        _odb.dbIntProperty_swiginit(self, _odb.new_dbIntProperty())
    __swig_destroy__ = _odb.delete_dbIntProperty

# Register dbIntProperty in _odb:
_odb.dbIntProperty_swigregister(dbIntProperty)

def dbIntProperty_create(object, name, value):
    return _odb.dbIntProperty_create(object, name, value)

def dbIntProperty_find(object, name):
    return _odb.dbIntProperty_find(object, name)

class dbDoubleProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _odb.dbDoubleProperty_getValue(self)

    def setValue(self, value):
        return _odb.dbDoubleProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _odb.dbDoubleProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _odb.dbDoubleProperty_find(object, name)

    def __init__(self):
        _odb.dbDoubleProperty_swiginit(self, _odb.new_dbDoubleProperty())
    __swig_destroy__ = _odb.delete_dbDoubleProperty

# Register dbDoubleProperty in _odb:
_odb.dbDoubleProperty_swigregister(dbDoubleProperty)

def dbDoubleProperty_create(object, name, value):
    return _odb.dbDoubleProperty_create(object, name, value)

def dbDoubleProperty_find(object, name):
    return _odb.dbDoubleProperty_find(object, name)


def read_lef(db, path):
    return _odb.read_lef(db, path)

def write_lef(lib, path):
    return _odb.write_lef(lib, path)

def write_tech_lef(tech, path):
    return _odb.write_tech_lef(tech, path)

def write_macro_lef(lib, path):
    return _odb.write_macro_lef(lib, path)

def read_def(tech, path):
    return _odb.read_def(tech, path)

def write_def(*args):
    return _odb.write_def(*args)

def read_db(db, db_path):
    return _odb.read_db(db, db_path)

def write_db(db, db_path):
    return _odb.write_db(db, db_path)

def createSBoxes(*args):
    return _odb.createSBoxes(*args)

def dumpAPs(block, file_name):
    return _odb.dumpAPs(block, file_name)
class _dbViaParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _x_cut_size = property(_odb._dbViaParams__x_cut_size_get, _odb._dbViaParams__x_cut_size_set)
    _y_cut_size = property(_odb._dbViaParams__y_cut_size_get, _odb._dbViaParams__y_cut_size_set)
    _x_cut_spacing = property(_odb._dbViaParams__x_cut_spacing_get, _odb._dbViaParams__x_cut_spacing_set)
    _y_cut_spacing = property(_odb._dbViaParams__y_cut_spacing_get, _odb._dbViaParams__y_cut_spacing_set)
    _x_top_enclosure = property(_odb._dbViaParams__x_top_enclosure_get, _odb._dbViaParams__x_top_enclosure_set)
    _y_top_enclosure = property(_odb._dbViaParams__y_top_enclosure_get, _odb._dbViaParams__y_top_enclosure_set)
    _x_bot_enclosure = property(_odb._dbViaParams__x_bot_enclosure_get, _odb._dbViaParams__x_bot_enclosure_set)
    _y_bot_enclosure = property(_odb._dbViaParams__y_bot_enclosure_get, _odb._dbViaParams__y_bot_enclosure_set)
    _num_cut_rows = property(_odb._dbViaParams__num_cut_rows_get, _odb._dbViaParams__num_cut_rows_set)
    _num_cut_cols = property(_odb._dbViaParams__num_cut_cols_get, _odb._dbViaParams__num_cut_cols_set)
    _x_origin = property(_odb._dbViaParams__x_origin_get, _odb._dbViaParams__x_origin_set)
    _y_origin = property(_odb._dbViaParams__y_origin_get, _odb._dbViaParams__y_origin_set)
    _x_top_offset = property(_odb._dbViaParams__x_top_offset_get, _odb._dbViaParams__x_top_offset_set)
    _y_top_offset = property(_odb._dbViaParams__y_top_offset_get, _odb._dbViaParams__y_top_offset_set)
    _x_bot_offset = property(_odb._dbViaParams__x_bot_offset_get, _odb._dbViaParams__x_bot_offset_set)
    _y_bot_offset = property(_odb._dbViaParams__y_bot_offset_get, _odb._dbViaParams__y_bot_offset_set)
    _top_layer = property(_odb._dbViaParams__top_layer_get, _odb._dbViaParams__top_layer_set)
    _cut_layer = property(_odb._dbViaParams__cut_layer_get, _odb._dbViaParams__cut_layer_set)
    _bot_layer = property(_odb._dbViaParams__bot_layer_get, _odb._dbViaParams__bot_layer_set)

    def __init__(self, *args):
        _odb._dbViaParams_swiginit(self, _odb.new__dbViaParams(*args))
    __swig_destroy__ = _odb.delete__dbViaParams

    def __eq__(self, rhs):
        return _odb._dbViaParams___eq__(self, rhs)

    def __ne__(self, rhs):
        return _odb._dbViaParams___ne__(self, rhs)

# Register _dbViaParams in _odb:
_odb._dbViaParams_swigregister(_dbViaParams)
class dbWireEncoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _odb.dbWireEncoder_swiginit(self, _odb.new_dbWireEncoder())
    __swig_destroy__ = _odb.delete_dbWireEncoder

    def begin(self, wire):
        return _odb.dbWireEncoder_begin(self, wire)

    def append(self, wire):
        return _odb.dbWireEncoder_append(self, wire)

    def addPoint(self, *args):
        return _odb.dbWireEncoder_addPoint(self, *args)

    def addVia(self, via):
        return _odb.dbWireEncoder_addVia(self, via)

    def addTechVia(self, via):
        return _odb.dbWireEncoder_addTechVia(self, via)

    def addRect(self, deltaX1, deltaY1, deltaX2, deltaY2):
        return _odb.dbWireEncoder_addRect(self, deltaX1, deltaY1, deltaX2, deltaY2)

    def setColor(self, mask_color):
        return _odb.dbWireEncoder_setColor(self, mask_color)

    def clearColor(self):
        return _odb.dbWireEncoder_clearColor(self)

    def setViaColor(self, bottom_color, cut_color, top_color):
        return _odb.dbWireEncoder_setViaColor(self, bottom_color, cut_color, top_color)

    def clearViaColor(self):
        return _odb.dbWireEncoder_clearViaColor(self)

    def addITerm(self, iterm):
        return _odb.dbWireEncoder_addITerm(self, iterm)

    def addBTerm(self, bterm):
        return _odb.dbWireEncoder_addBTerm(self, bterm)

    def newPathShort(self, *args):
        return _odb.dbWireEncoder_newPathShort(self, *args)

    def newPathVirtualWire(self, *args):
        return _odb.dbWireEncoder_newPathVirtualWire(self, *args)

    def end(self):
        return _odb.dbWireEncoder_end(self)

    def clear(self):
        return _odb.dbWireEncoder_clear(self)

    def newPath(self, *args):
        return _odb.dbWireEncoder_newPath(self, *args)

    def newPathExt(self, *args):
        return _odb.dbWireEncoder_newPathExt(self, *args)

# Register dbWireEncoder in _odb:
_odb.dbWireEncoder_swigregister(dbWireEncoder)
class dbWireDecoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PATH = _odb.dbWireDecoder_PATH
    JUNCTION = _odb.dbWireDecoder_JUNCTION
    SHORT = _odb.dbWireDecoder_SHORT
    VWIRE = _odb.dbWireDecoder_VWIRE
    POINT = _odb.dbWireDecoder_POINT
    POINT_EXT = _odb.dbWireDecoder_POINT_EXT
    VIA = _odb.dbWireDecoder_VIA
    TECH_VIA = _odb.dbWireDecoder_TECH_VIA
    RECT = _odb.dbWireDecoder_RECT
    ITERM = _odb.dbWireDecoder_ITERM
    BTERM = _odb.dbWireDecoder_BTERM
    RULE = _odb.dbWireDecoder_RULE
    END_DECODE = _odb.dbWireDecoder_END_DECODE

    def __init__(self):
        _odb.dbWireDecoder_swiginit(self, _odb.new_dbWireDecoder())
    __swig_destroy__ = _odb.delete_dbWireDecoder

    def begin(self, wire):
        return _odb.dbWireDecoder_begin(self, wire)

    def next(self):
        return _odb.dbWireDecoder_next(self)

    def peek(self):
        return _odb.dbWireDecoder_peek(self)

    def getLayer(self):
        return _odb.dbWireDecoder_getLayer(self)

    def getPoint(self):
        return _odb.dbWireDecoder_getPoint(self)

    def getPoint_ext(self):
        return _odb.dbWireDecoder_getPoint_ext(self)

    def getProperty(self):
        return _odb.dbWireDecoder_getProperty(self)

    def getVia(self):
        return _odb.dbWireDecoder_getVia(self)

    def getTechVia(self):
        return _odb.dbWireDecoder_getTechVia(self)

    def getRect(self, deltaX1, deltaY1, deltaX2, deltaY2):
        return _odb.dbWireDecoder_getRect(self, deltaX1, deltaY1, deltaX2, deltaY2)

    def getITerm(self):
        return _odb.dbWireDecoder_getITerm(self)

    def getBTerm(self):
        return _odb.dbWireDecoder_getBTerm(self)

    def getWireType(self):
        return _odb.dbWireDecoder_getWireType(self)

    def getRule(self):
        return _odb.dbWireDecoder_getRule(self)

    def getJunctionId(self):
        return _odb.dbWireDecoder_getJunctionId(self)

    def getJunctionValue(self):
        return _odb.dbWireDecoder_getJunctionValue(self)

    def getColor(self):
        return _odb.dbWireDecoder_getColor(self)

    def getViaColor(self):
        return _odb.dbWireDecoder_getViaColor(self)

# Register dbWireDecoder in _odb:
_odb.dbWireDecoder_swigregister(dbWireDecoder)

def dumpDecoder(inblk, net_name_or_id):
    return _odb.dumpDecoder(inblk, net_name_or_id)

def dumpDecoder4Net(innet):
    return _odb.dumpDecoder4Net(innet)
class dbBlockCallBackObj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def inDbInstCreate(self, *args):
        return _odb.dbBlockCallBackObj_inDbInstCreate(self, *args)

    def inDbInstDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbInstDestroy(self, arg2)

    def inDbInstPlacementStatusBefore(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbInstPlacementStatusBefore(self, arg2, arg3)

    def inDbInstSwapMasterBefore(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbInstSwapMasterBefore(self, arg2, arg3)

    def inDbInstSwapMasterAfter(self, arg2):
        return _odb.dbBlockCallBackObj_inDbInstSwapMasterAfter(self, arg2)

    def inDbPreMoveInst(self, arg2):
        return _odb.dbBlockCallBackObj_inDbPreMoveInst(self, arg2)

    def inDbPostMoveInst(self, arg2):
        return _odb.dbBlockCallBackObj_inDbPostMoveInst(self, arg2)

    def inDbModInstCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModInstCreate(self, arg2)

    def inDbModInstDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModInstDestroy(self, arg2)

    def inDbModuleCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModuleCreate(self, arg2)

    def inDbModuleDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModuleDestroy(self, arg2)

    def inDbNetCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbNetCreate(self, arg2)

    def inDbNetDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbNetDestroy(self, arg2)

    def inDbNetPreMerge(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbNetPreMerge(self, arg2, arg3)

    def inDbModNetCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModNetCreate(self, arg2)

    def inDbModNetDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModNetDestroy(self, arg2)

    def inDbITermCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbITermCreate(self, arg2)

    def inDbITermDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbITermDestroy(self, arg2)

    def inDbITermPreDisconnect(self, arg2):
        return _odb.dbBlockCallBackObj_inDbITermPreDisconnect(self, arg2)

    def inDbITermPostDisconnect(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbITermPostDisconnect(self, arg2, arg3)

    def inDbITermPreConnect(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbITermPreConnect(self, arg2, arg3)

    def inDbITermPostConnect(self, arg2):
        return _odb.dbBlockCallBackObj_inDbITermPostConnect(self, arg2)

    def inDbITermPostSetAccessPoints(self, arg2):
        return _odb.dbBlockCallBackObj_inDbITermPostSetAccessPoints(self, arg2)

    def inDbModITermCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModITermCreate(self, arg2)

    def inDbModITermDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModITermDestroy(self, arg2)

    def inDbModITermPreDisconnect(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModITermPreDisconnect(self, arg2)

    def inDbModITermPostDisconnect(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbModITermPostDisconnect(self, arg2, arg3)

    def inDbModITermPreConnect(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbModITermPreConnect(self, arg2, arg3)

    def inDbModITermPostConnect(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModITermPostConnect(self, arg2)

    def inDbBTermCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBTermCreate(self, arg2)

    def inDbBTermDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBTermDestroy(self, arg2)

    def inDbBTermPreConnect(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbBTermPreConnect(self, arg2, arg3)

    def inDbBTermPostConnect(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBTermPostConnect(self, arg2)

    def inDbBTermPreDisconnect(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBTermPreDisconnect(self, arg2)

    def inDbBTermPostDisConnect(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbBTermPostDisConnect(self, arg2, arg3)

    def inDbBTermSetIoType(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbBTermSetIoType(self, arg2, arg3)

    def inDbBTermSetSigType(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbBTermSetSigType(self, arg2, arg3)

    def inDbModBTermCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModBTermCreate(self, arg2)

    def inDbModBTermDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModBTermDestroy(self, arg2)

    def inDbModBTermPreConnect(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbModBTermPreConnect(self, arg2, arg3)

    def inDbModBTermPostConnect(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModBTermPostConnect(self, arg2)

    def inDbModBTermPreDisconnect(self, arg2):
        return _odb.dbBlockCallBackObj_inDbModBTermPreDisconnect(self, arg2)

    def inDbModBTermPostDisConnect(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbModBTermPostDisConnect(self, arg2, arg3)

    def inDbBPinCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBPinCreate(self, arg2)

    def inDbBPinDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBPinDestroy(self, arg2)

    def inDbBlockageCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBlockageCreate(self, arg2)

    def inDbBlockageDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBlockageDestroy(self, arg2)

    def inDbObstructionCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbObstructionCreate(self, arg2)

    def inDbObstructionDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbObstructionDestroy(self, arg2)

    def inDbRegionCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbRegionCreate(self, arg2)

    def inDbRegionAddBox(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbRegionAddBox(self, arg2, arg3)

    def inDbRegionDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbRegionDestroy(self, arg2)

    def inDbRowCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbRowCreate(self, arg2)

    def inDbRowDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbRowDestroy(self, arg2)

    def inDbWireCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbWireCreate(self, arg2)

    def inDbWireDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbWireDestroy(self, arg2)

    def inDbWirePostModify(self, arg2):
        return _odb.dbBlockCallBackObj_inDbWirePostModify(self, arg2)

    def inDbWirePreAttach(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbWirePreAttach(self, arg2, arg3)

    def inDbWirePostAttach(self, arg2):
        return _odb.dbBlockCallBackObj_inDbWirePostAttach(self, arg2)

    def inDbWirePreDetach(self, arg2):
        return _odb.dbBlockCallBackObj_inDbWirePreDetach(self, arg2)

    def inDbWirePostDetach(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbWirePostDetach(self, arg2, arg3)

    def inDbWirePreAppend(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbWirePreAppend(self, arg2, arg3)

    def inDbWirePostAppend(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbWirePostAppend(self, arg2, arg3)

    def inDbWirePreCopy(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbWirePreCopy(self, arg2, arg3)

    def inDbWirePostCopy(self, arg2, arg3):
        return _odb.dbBlockCallBackObj_inDbWirePostCopy(self, arg2, arg3)

    def inDbSWireCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbSWireCreate(self, arg2)

    def inDbSWireDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbSWireDestroy(self, arg2)

    def inDbSWireAddSBox(self, arg2):
        return _odb.dbBlockCallBackObj_inDbSWireAddSBox(self, arg2)

    def inDbSWireRemoveSBox(self, arg2):
        return _odb.dbBlockCallBackObj_inDbSWireRemoveSBox(self, arg2)

    def inDbSWirePreDestroySBoxes(self, arg2):
        return _odb.dbBlockCallBackObj_inDbSWirePreDestroySBoxes(self, arg2)

    def inDbSWirePostDestroySBoxes(self, arg2):
        return _odb.dbBlockCallBackObj_inDbSWirePostDestroySBoxes(self, arg2)

    def inDbFillCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbFillCreate(self, arg2)

    def inDbMarkerCategoryCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbMarkerCategoryCreate(self, arg2)

    def inDbMarkerCategoryDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbMarkerCategoryDestroy(self, arg2)

    def inDbMarkerCreate(self, arg2):
        return _odb.dbBlockCallBackObj_inDbMarkerCreate(self, arg2)

    def inDbMarkerDestroy(self, arg2):
        return _odb.dbBlockCallBackObj_inDbMarkerDestroy(self, arg2)

    def inDbBlockStreamOutBefore(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBlockStreamOutBefore(self, arg2)

    def inDbBlockStreamOutAfter(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBlockStreamOutAfter(self, arg2)

    def inDbBlockReadNetsBefore(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBlockReadNetsBefore(self, arg2)

    def inDbBlockSetDieArea(self, arg2):
        return _odb.dbBlockCallBackObj_inDbBlockSetDieArea(self, arg2)

    def __call__(self):
        return _odb.dbBlockCallBackObj___call__(self)

    def addOwner(self, new_owner):
        return _odb.dbBlockCallBackObj_addOwner(self, new_owner)

    def hasOwner(self):
        return _odb.dbBlockCallBackObj_hasOwner(self)

    def removeOwner(self):
        return _odb.dbBlockCallBackObj_removeOwner(self)

    def __init__(self):
        _odb.dbBlockCallBackObj_swiginit(self, _odb.new_dbBlockCallBackObj())
    __swig_destroy__ = _odb.delete_dbBlockCallBackObj

# Register dbBlockCallBackObj in _odb:
_odb.dbBlockCallBackObj_swigregister(dbBlockCallBackObj)
class dbIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def reversible(self):
        return _odb.dbIterator_reversible(self)

    def orderReversed(self):
        return _odb.dbIterator_orderReversed(self)

    def reverse(self, parent):
        return _odb.dbIterator_reverse(self, parent)

    def sequential(self):
        return _odb.dbIterator_sequential(self)

    def size(self, parent):
        return _odb.dbIterator_size(self, parent)

    def begin(self, parent):
        return _odb.dbIterator_begin(self, parent)

    def end(self, parent):
        return _odb.dbIterator_end(self, parent)

    def next(self, id):
        return _odb.dbIterator_next(self, id)

    def getObject(self, id):
        return _odb.dbIterator_getObject(self, id)
    __swig_destroy__ = _odb.delete_dbIterator

# Register dbIterator in _odb:
_odb.dbIterator_swigregister(dbIterator)
class dbTransform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _odb.dbTransform_swiginit(self, _odb.new_dbTransform(*args))

    def __eq__(self, t):
        return _odb.dbTransform___eq__(self, t)

    def __ne__(self, t):
        return _odb.dbTransform___ne__(self, t)

    def setOrient(self, orient):
        return _odb.dbTransform_setOrient(self, orient)

    def setOffset(self, offset):
        return _odb.dbTransform_setOffset(self, offset)

    def setTransform(self, orient, offset):
        return _odb.dbTransform_setTransform(self, orient, offset)

    def apply(self, *args):
        return _odb.dbTransform_apply(self, *args)

    def concat(self, *args):
        return _odb.dbTransform_concat(self, *args)

    def invert(self, *args):
        return _odb.dbTransform_invert(self, *args)

    def getOrient(self):
        return _odb.dbTransform_getOrient(self)

    def getOffset(self):
        return _odb.dbTransform_getOffset(self)
    __swig_destroy__ = _odb.delete_dbTransform

# Register dbTransform in _odb:
_odb.dbTransform_swigregister(dbTransform)

def __lshift__(*args):
    return _odb.__lshift__(*args)

def __rshift__(*args):
    return _odb.__rshift__(*args)

class dbWireGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _odb.dbWireGraph_swiginit(self, _odb.new_dbWireGraph())
    __swig_destroy__ = _odb.delete_dbWireGraph

    def clear(self):
        return _odb.dbWireGraph_clear(self)

    def decode(self, wire):
        return _odb.dbWireGraph_decode(self, wire)

    def encode(self, wire):
        return _odb.dbWireGraph_encode(self, wire)

    def getEdge(self, shape_id):
        return _odb.dbWireGraph_getEdge(self, shape_id)

    def createNode(self, x, y, l):
        return _odb.dbWireGraph_createNode(self, x, y, l)

    def createVia(self, *args):
        return _odb.dbWireGraph_createVia(self, *args)

    def createTechVia(self, *args):
        return _odb.dbWireGraph_createTechVia(self, *args)

    def createSegment(self, *args):
        return _odb.dbWireGraph_createSegment(self, *args)

    def createShort(self, *args):
        return _odb.dbWireGraph_createShort(self, *args)

    def createVWire(self, *args):
        return _odb.dbWireGraph_createVWire(self, *args)

    def begin_nodes(self):
        return _odb.dbWireGraph_begin_nodes(self)

    def end_nodes(self):
        return _odb.dbWireGraph_end_nodes(self)

    def begin_edges(self):
        return _odb.dbWireGraph_begin_edges(self)

    def end_edges(self):
        return _odb.dbWireGraph_end_edges(self)

    def deleteNode(self, *args):
        return _odb.dbWireGraph_deleteNode(self, *args)

    def deleteEdge(self, *args):
        return _odb.dbWireGraph_deleteEdge(self, *args)

    def dump(self, logger):
        return _odb.dbWireGraph_dump(self, logger)

# Register dbWireGraph in _odb:
_odb.dbWireGraph_swigregister(dbWireGraph)

def orderWires(logger, b):
    return _odb.orderWires(logger, b)

def generateMacroPlacementString(block):
    return _odb.generateMacroPlacementString(block)

def set_bterm_top_layer_grid(block, layer, x_step, y_step, region, width, height, keepout):
    return _odb.set_bterm_top_layer_grid(block, layer, x_step, y_step, region, width, height, keepout)


# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _utl
else:
    import _utl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


ANT = _utl.ANT
CGT = _utl.CGT
CTS = _utl.CTS
CUT = _utl.CUT
DFT = _utl.DFT
DPL = _utl.DPL
DRT = _utl.DRT
DST = _utl.DST
EST = _utl.EST
EXA = _utl.EXA
FIN = _utl.FIN
FLW = _utl.FLW
GPL = _utl.GPL
GRT = _utl.GRT
GUI = _utl.GUI
IFP = _utl.IFP
MPL = _utl.MPL
ODB = _utl.ODB
ORD = _utl.ORD
PAD = _utl.PAD
PAR = _utl.PAR
PDN = _utl.PDN
PPL = _utl.PPL
PSM = _utl.PSM
RCX = _utl.RCX
RMP = _utl.RMP
RSZ = _utl.RSZ
STA = _utl.STA
STT = _utl.STT
TAP = _utl.TAP
UKN = _utl.UKN
UPF = _utl.UPF
UTL = _utl.UTL
SIZE = _utl.SIZE
class Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename=None, metrics_filename=None):
        _utl.Logger_swiginit(self, _utl.new_Logger(filename, metrics_filename))
    __swig_destroy__ = _utl.delete_Logger

    @staticmethod
    def findToolId(tool_name):
        return _utl.Logger_findToolId(tool_name)

    def metric(self, metric, value):
        return _utl.Logger_metric(self, metric, value)

    def setDebugLevel(self, tool, group, level):
        return _utl.Logger_setDebugLevel(self, tool, group, level)

    def debugCheck(self, tool, group, level):
        return _utl.Logger_debugCheck(self, tool, group, level)

    def startPrometheusEndpoint(self, port):
        return _utl.Logger_startPrometheusEndpoint(self, port)

    def getRegistry(self):
        return _utl.Logger_getRegistry(self)

    def isPrometheusServerReadyToServe(self):
        return _utl.Logger_isPrometheusServerReadyToServe(self)

    def getPrometheusPort(self):
        return _utl.Logger_getPrometheusPort(self)

    def suppressMessage(self, tool, id):
        return _utl.Logger_suppressMessage(self, tool, id)

    def unsuppressMessage(self, tool, id):
        return _utl.Logger_unsuppressMessage(self, tool, id)

    def addSink(self, sink):
        return _utl.Logger_addSink(self, sink)

    def removeSink(self, sink):
        return _utl.Logger_removeSink(self, sink)

    def addMetricsSink(self, metrics_filename):
        return _utl.Logger_addMetricsSink(self, metrics_filename)

    def removeMetricsSink(self, metrics_filename):
        return _utl.Logger_removeMetricsSink(self, metrics_filename)

    def setMetricsStage(self, format):
        return _utl.Logger_setMetricsStage(self, format)

    def clearMetricsStage(self):
        return _utl.Logger_clearMetricsStage(self)

    def pushMetricsStage(self, format):
        return _utl.Logger_pushMetricsStage(self, format)

    def popMetricsStage(self):
        return _utl.Logger_popMetricsStage(self)

    def redirectFileBegin(self, filename):
        return _utl.Logger_redirectFileBegin(self, filename)

    def redirectFileAppendBegin(self, filename):
        return _utl.Logger_redirectFileAppendBegin(self, filename)

    def redirectFileEnd(self):
        return _utl.Logger_redirectFileEnd(self)

    def redirectStringBegin(self):
        return _utl.Logger_redirectStringBegin(self)

    def redirectStringEnd(self):
        return _utl.Logger_redirectStringEnd(self)

    def teeFileBegin(self, filename):
        return _utl.Logger_teeFileBegin(self, filename)

    def teeFileAppendBegin(self, filename):
        return _utl.Logger_teeFileAppendBegin(self, filename)

    def teeFileEnd(self):
        return _utl.Logger_teeFileEnd(self)

    def teeStringBegin(self):
        return _utl.Logger_teeStringBegin(self)

    def teeStringEnd(self):
        return _utl.Logger_teeStringEnd(self)

    @staticmethod
    def defaultLogger():
        return _utl.Logger_defaultLogger()

# Register Logger in _utl:
_utl.Logger_swigregister(Logger)

def Logger_findToolId(tool_name):
    return _utl.Logger_findToolId(tool_name)

def Logger_defaultLogger():
    return _utl.Logger_defaultLogger()



'''
Licensed under the Universal Permissive License v 1.0 as shown at 
https://oss.oracle.com/licenses/upl/.
 Copyright (c) 2023, 2025, Oracle and/or its affiliates.

Convenience APIs to ease the create data load options in data transforms.
Provides enum and dictionary operator for developers on the supported options
'''
## Copyright - Oracle Data Transforms
##Generated Load options from JSON Metadata
##DO NOT EDIT THIS FILE. CHANGES WILL BE LOST, AS THIS FILE IS GENERATED FROM METADATA.
from enum import Enum
# pylint: disable=all
class OracleInsert:

	class CONSTRAINTS_ENUM(Enum):
		NONE="None"
		Disable="Disable"
		Enable="Enable"
		Disable_and_Enable="Disable and Enable"

	class INDEXES_ENUM(Enum):
		NONE="None"
		Disable="Disable"
		Enable="Enable"
		Enable_Rebuild_Online="Enable Rebuild Online"
		Disable_and_Enable="Disable and Enable"
		Disable_and_Enable_Rebuild_Online="Disable and Enable Rebuild Online"


	DROP_AND_CREATE_TARGET_TABLE=False
	INSERT_HINT="APPEND PARALLEL"
	SELECT_HINT=" "
	CONSTRAINTS=CONSTRAINTS_ENUM.NONE.value
	CREATE_TARGET_TABLE=False
	INDEXES=INDEXES_ENUM.NONE.value
	TRUNCATE_TARGET_TABLE=False
	DELETE_ALL=False


	def options():
		dict2=OracleInsert.__dict__
		options={}
		for key in dict2:
			if key.startswith('__'):
				pass
			elif callable(getattr(OracleInsert,key)):
				pass
			elif type(dict2[key]) == bool:
				options[key] = "true" if dict2[key] == True else "false"
			else:
				options[key]=dict2[key]
		return options


class BICCtoADWCopy:

	class Keys:
		CREDENTIAL_NAME="CREDENTIAL_NAME"
		SUBMIT_BICC_JOB="SUBMIT_BICC_JOB"
		USE_ORACLE_STAGING_TABLE="USE_ORACLE_STAGING_TABLE"
		BICC_JOB_TIMEOUT="BICC_JOB_TIMEOUT"
		CLEANUP_COPY_DATA_LOGS="CLEANUP_COPY_DATA_LOGS"
		CREATE_CREDENTIAL="CREATE_CREDENTIAL"
		BICC_JOB_POLLING_INTERVAL="BICC_JOB_POLLING_INTERVAL"
		GENERATE_FIELD_LIST="GENERATE_FIELD_LIST"
		BICC_EXTRACT_JOB_TYPE="BICC_EXTRACT_JOB_TYPE"
		DELIMITED_FILE_FORMAT="BICC_EXTRACT_JOB_TYPE"
		COMPRESSION="COMPRESSION"
		LOAD_LAST_EXTRACT_ONLY="LOAD_LAST_EXTRACT_ONLY"
		DATE_FORMAT="DATE_FORMAT"
		LAST_LOAD_DATE="LAST_LOAD_DATE"
		EXTERNAL_STORAGE_FILE_NAME_PREFIX="EXTERNAL_STORAGE_FILE_NAME_PREFIX"
		TIMESTAMP_FORMAT="TIMESTAMP_FORMAT"
		REJECT_LIMIT="REJECT_LIMIT"
		SYNC_DELETED_RECORDS="SYNC_DELETED_RECORDS"
		CONVERSION_ERRORS="CONVERSION_ERRORS"
		SAVE_LAST_LOAD_TIMESTAMP="SAVE_LAST_LOAD_TIMESTAMP"
		TRIM_SPACES="TRIM_SPACES"
		IGNORE_BLANK_LINES="IGNORE_BLANK_LINES"
		IGNORE_MISSING_COLUMNS="IGNORE_MISSING_COLUMNS"
		TRUNCATE_COLUMNS="TRUNCATE_COLUMNS"
		ADD_FORMAT_PROPERTIES="ADD_FORMAT_PROPERTIES"
		OVERWRITE_FIELD_LIST="OVERWRITE_FIELD_LIST"
		CLEANUP_TEMPORARY_OBJECTS="CLEANUP_TEMPORARY_OBJECTS"
		CLEANUP_CREDENTIAL="CLEANUP_CREDENTIAL"
		USE_PRE_AUTHENTICATED_REQUEST="USE_PRE_AUTHENTICATED_REQUEST"
		RESET_CREDENTIAL="RESET_CREDENTIAL"
	class BICC_EXTRACT_JOB_TYPE_ENUM(Enum):
		DATA="DATA"
		KEYS="KEYS"
		DATA_AND_KEYS="DATA_AND_KEYS"

	class DELIMITED_FILE_FORMAT_ENUM(Enum):
		CSV="CSV"
		Delimited="Delimited"

	class COMPRESSION_ENUM(Enum):
		no_compression=""
		auto="auto"
		gzip="gzip"
		zlib="zlib"
		bzip2="bzip2"

	class CONVERSION_ERRORS_ENUM(Enum):
		reject_record="reject_record"
		store_null="store_null"

	class TRIM_SPACES_ENUM(Enum):
		notrim="notrim"
		rtrim="rtrim"
		ltrim="ltrim"
		lrtrim="lrtrim"
		ldrtrim="ldrtrim"


	CREDENTIAL_NAME="UNKOWN"
	SUBMIT_BICC_JOB=True
	USE_ORACLE_STAGING_TABLE=False
	BICC_JOB_TIMEOUT="UNKOWN"
	CLEANUP_COPY_DATA_LOGS=False
	CREATE_CREDENTIAL=True
	BICC_JOB_POLLING_INTERVAL="UNKOWN"
	GENERATE_FIELD_LIST=False
	BICC_EXTRACT_JOB_TYPE=BICC_EXTRACT_JOB_TYPE_ENUM.DATA.value
	DELIMITED_FILE_FORMAT=DELIMITED_FILE_FORMAT_ENUM.CSV.value
	COMPRESSION=COMPRESSION_ENUM.no_compression.value
	LOAD_LAST_EXTRACT_ONLY=False
	DATE_FORMAT="UNKOWN"
	LAST_LOAD_DATE="UNKOWN"
	EXTERNAL_STORAGE_FILE_NAME_PREFIX="UNKOWN"
	TIMESTAMP_FORMAT="UNKOWN"
	REJECT_LIMIT="UNKOWN"
	SYNC_DELETED_RECORDS=False
	CONVERSION_ERRORS=CONVERSION_ERRORS_ENUM.reject_record.value
	SAVE_LAST_LOAD_TIMESTAMP=False
	TRIM_SPACES=TRIM_SPACES_ENUM.notrim.value
	IGNORE_BLANK_LINES=False
	IGNORE_MISSING_COLUMNS=False
	TRUNCATE_COLUMNS=False
	ADD_FORMAT_PROPERTIES="None"
	OVERWRITE_FIELD_LIST="None"
	CLEANUP_TEMPORARY_OBJECTS=True
	CLEANUP_CREDENTIAL=False
	USE_PRE_AUTHENTICATED_REQUEST=False
	RESET_CREDENTIAL=False


	def options():
		dict2=BICCtoADWCopy.__dict__
		options={}
		for key in dict2:
			if key.startswith('__'):
				pass
			elif key.startswith('IGNORE_MISSING_COLUMNS'):
				options['IGNORE MISSING COLUMNS']=BICCtoADWCopy.IGNORE_MISSING_COLUMNS
				#del (options['IGNORE_MISSING_COLUMNS'])
				
			elif callable(getattr(BICCtoADWCopy,key)):
				pass
			elif type(dict2[key]) == bool:
				options[key] = "true" if dict2[key] == True else "false"
			else:
				options[key]=dict2[key]
		return options


class OracleMerge:

	class CONSTRAINTS_ENUM(Enum):
		NONE="None"
		Disable="Disable"
		Enable="Enable"
		Disable_and_Enable="Disable and Enable"

	class INDEXES_ENUM(Enum):
		NONE="None"
		Disable="Disable"
		Enable="Enable"
		Enable_Rebuild_Online="Enable Rebuild Online"
		Disable_and_Enable="Disable and Enable"
		Disable_and_Enable_Rebuild_Online="Disable and Enable Rebuild Online"


	DROP_AND_CREATE_TARGET_TABLE=False
	MERGE_HINT=" "
	SELECT_HINT=" "
	AUTO_COMPRESSION=True
	CONSTRAINTS=CONSTRAINTS_ENUM.NONE.value
	CREATE_TARGET_TABLE=False
	DELETE_TEMPORARY_OBJECTS=True
	INDEXES=INDEXES_ENUM.NONE.value
	TRUNCATE_TARGET_TABLE=False
	DELETE_ALL=False


	def options():
		dict2=OracleMerge.__dict__
		options={}
		for key in dict2:
			if key.startswith('__'):
				pass
			elif callable(getattr(OracleMerge,key)):
				pass
			elif type(dict2[key]) == bool:
				options[key] = "true" if dict2[key] == True else "false"
			else:
				options[key]=dict2[key]
		return options



class DataFlowIntegrationType:
    def append():
        return {"integrationType":"CONTROL_APPEND"}
    
    def incremental_update():
        return {"integrationType":"INCREMENTAL_UPDATE"}


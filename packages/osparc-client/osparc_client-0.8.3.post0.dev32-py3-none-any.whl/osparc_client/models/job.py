# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications

    The version of the OpenAPI document: 0.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Job
    """ # noqa: E501
    id: UUID
    name: Annotated[str, Field(strict=True)]
    inputs_checksum: StrictStr = Field(description="Input's checksum")
    created_at: datetime = Field(description="Job creation timestamp")
    runner_name: Annotated[str, Field(strict=True)] = Field(description="Runner that executes job")
    url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2083)]]
    runner_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2083)]]
    outputs_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2083)]]
    __properties: ClassVar[List[str]] = ["id", "name", "inputs_checksum", "created_at", "runner_name", "url", "runner_url", "outputs_url"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([^\s\/]+\/?){1,10}$", value):
            raise ValueError(r"must validate the regular expression /^([^\s\/]+\/?){1,10}$/")
        return value

    @field_validator('runner_name')
    def runner_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([^\s\/]+\/?){1,10}$", value):
            raise ValueError(r"must validate the regular expression /^([^\s\/]+\/?){1,10}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if runner_url (nullable) is None
        # and model_fields_set contains the field
        if self.runner_url is None and "runner_url" in self.model_fields_set:
            _dict['runner_url'] = None

        # set to None if outputs_url (nullable) is None
        # and model_fields_set contains the field
        if self.outputs_url is None and "outputs_url" in self.model_fields_set:
            _dict['outputs_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "inputs_checksum": obj.get("inputs_checksum"),
            "created_at": obj.get("created_at"),
            "runner_name": obj.get("runner_name"),
            "url": obj.get("url"),
            "runner_url": obj.get("runner_url"),
            "outputs_url": obj.get("outputs_url")
        })
        return _obj



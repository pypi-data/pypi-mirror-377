# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications

    The version of the OpenAPI document: 0.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class LicensedItemCheckoutGet(BaseModel):
    """
    LicensedItemCheckoutGet
    """ # noqa: E501
    licensed_item_checkout_id: UUID
    licensed_item_id: UUID
    key: StrictStr
    version: Annotated[str, Field(strict=True)]
    wallet_id: Annotated[int, Field(strict=True, ge=0)]
    user_id: Annotated[int, Field(strict=True, ge=0)]
    product_name: StrictStr
    started_at: datetime
    stopped_at: Optional[datetime]
    num_of_seats: StrictInt
    __properties: ClassVar[List[str]] = ["licensed_item_checkout_id", "licensed_item_id", "key", "version", "wallet_id", "user_id", "product_name", "started_at", "stopped_at", "num_of_seats"]

    @field_validator('version')
    def version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+\.\d+\.\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+\.\d+\.\d+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LicensedItemCheckoutGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if stopped_at (nullable) is None
        # and model_fields_set contains the field
        if self.stopped_at is None and "stopped_at" in self.model_fields_set:
            _dict['stopped_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LicensedItemCheckoutGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "licensed_item_checkout_id": obj.get("licensed_item_checkout_id"),
            "licensed_item_id": obj.get("licensed_item_id"),
            "key": obj.get("key"),
            "version": obj.get("version"),
            "wallet_id": obj.get("wallet_id"),
            "user_id": obj.get("user_id"),
            "product_name": obj.get("product_name"),
            "started_at": obj.get("started_at"),
            "stopped_at": obj.get("stopped_at"),
            "num_of_seats": obj.get("num_of_seats")
        })
        return _obj



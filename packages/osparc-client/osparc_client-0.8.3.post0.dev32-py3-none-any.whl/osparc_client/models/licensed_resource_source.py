# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications

    The version of the OpenAPI document: 0.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from osparc_client.models.licensed_resource_source_features_dict import LicensedResourceSourceFeaturesDict
from typing import Optional, Set
from typing_extensions import Self

class LicensedResourceSource(BaseModel):
    """
    LicensedResourceSource
    """ # noqa: E501
    id: StrictInt
    description: StrictStr
    thumbnail: StrictStr
    features: LicensedResourceSourceFeaturesDict
    doi: Optional[StrictStr]
    license_key: StrictStr
    license_version: StrictStr
    protection: StrictStr
    available_from_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2083)]]
    __properties: ClassVar[List[str]] = ["id", "description", "thumbnail", "features", "doi", "license_key", "license_version", "protection", "available_from_url"]

    @field_validator('protection')
    def protection_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Code', 'PayPal']):
            raise ValueError("must be one of enum values ('Code', 'PayPal')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LicensedResourceSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of features
        if self.features:
            _dict['features'] = self.features.to_dict()
        # set to None if doi (nullable) is None
        # and model_fields_set contains the field
        if self.doi is None and "doi" in self.model_fields_set:
            _dict['doi'] = None

        # set to None if available_from_url (nullable) is None
        # and model_fields_set contains the field
        if self.available_from_url is None and "available_from_url" in self.model_fields_set:
            _dict['available_from_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LicensedResourceSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "thumbnail": obj.get("thumbnail"),
            "features": LicensedResourceSourceFeaturesDict.from_dict(obj["features"]) if obj.get("features") is not None else None,
            "doi": obj.get("doi"),
            "license_key": obj.get("license_key"),
            "license_version": obj.get("license_version"),
            "protection": obj.get("protection"),
            "available_from_url": obj.get("available_from_url")
        })
        return _obj



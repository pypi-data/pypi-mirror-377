# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications

    The version of the OpenAPI document: 0.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from osparc_client.models.unit_extra_info_tier import UnitExtraInfoTier
from typing import Optional, Set
from typing_extensions import Self

class PricingUnitGetLegacy(BaseModel):
    """
    PricingUnitGetLegacy
    """ # noqa: E501
    pricing_unit_id: Annotated[int, Field(strict=True, ge=0)] = Field(alias="pricingUnitId")
    unit_name: StrictStr = Field(alias="unitName")
    unit_extra_info: UnitExtraInfoTier = Field(alias="unitExtraInfo")
    current_cost_per_unit: Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]] = Field(alias="currentCostPerUnit")
    default: StrictBool
    __properties: ClassVar[List[str]] = ["pricingUnitId", "unitName", "unitExtraInfo", "currentCostPerUnit", "default"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingUnitGetLegacy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of unit_extra_info
        if self.unit_extra_info:
            _dict['unitExtraInfo'] = self.unit_extra_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingUnitGetLegacy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pricingUnitId": obj.get("pricingUnitId"),
            "unitName": obj.get("unitName"),
            "unitExtraInfo": UnitExtraInfoTier.from_dict(obj["unitExtraInfo"]) if obj.get("unitExtraInfo") is not None else None,
            "currentCostPerUnit": obj.get("currentCostPerUnit"),
            "default": obj.get("default")
        })
        return _obj



# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications

    The version of the OpenAPI document: 0.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class ProjectFunctionJob(BaseModel):
    """
    ProjectFunctionJob
    """ # noqa: E501
    title: Optional[StrictStr] = ''
    description: Optional[StrictStr] = ''
    function_uid: UUID
    inputs: Optional[Dict[str, Any]]
    outputs: Optional[Dict[str, Any]]
    function_class: Optional[StrictStr] = 'PROJECT'
    project_job_id: Optional[UUID]
    job_creation_task_id: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["title", "description", "function_uid", "inputs", "outputs", "function_class", "project_job_id", "job_creation_task_id"]

    @field_validator('function_class')
    def function_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROJECT']):
            raise ValueError("must be one of enum values ('PROJECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectFunctionJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if inputs (nullable) is None
        # and model_fields_set contains the field
        if self.inputs is None and "inputs" in self.model_fields_set:
            _dict['inputs'] = None

        # set to None if outputs (nullable) is None
        # and model_fields_set contains the field
        if self.outputs is None and "outputs" in self.model_fields_set:
            _dict['outputs'] = None

        # set to None if project_job_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_job_id is None and "project_job_id" in self.model_fields_set:
            _dict['project_job_id'] = None

        # set to None if job_creation_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.job_creation_task_id is None and "job_creation_task_id" in self.model_fields_set:
            _dict['job_creation_task_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectFunctionJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title") if obj.get("title") is not None else '',
            "description": obj.get("description") if obj.get("description") is not None else '',
            "function_uid": obj.get("function_uid"),
            "inputs": obj.get("inputs"),
            "outputs": obj.get("outputs"),
            "function_class": obj.get("function_class") if obj.get("function_class") is not None else 'PROJECT',
            "project_job_id": obj.get("project_job_id"),
            "job_creation_task_id": obj.get("job_creation_task_id")
        })
        return _obj



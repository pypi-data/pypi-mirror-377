# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications

    The version of the OpenAPI document: 0.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from osparc_client.models.json_function_input_schema import JSONFunctionInputSchema
from osparc_client.models.json_function_output_schema import JSONFunctionOutputSchema
from typing import Optional, Set
from typing_extensions import Self

class RegisteredPythonCodeFunction(BaseModel):
    """
    RegisteredPythonCodeFunction
    """ # noqa: E501
    function_class: Optional[StrictStr] = 'PYTHON_CODE'
    title: Optional[StrictStr] = ''
    description: Optional[StrictStr] = ''
    input_schema: JSONFunctionInputSchema
    output_schema: JSONFunctionOutputSchema
    default_inputs: Optional[Dict[str, Any]]
    uid: UUID
    created_at: datetime
    modified_at: datetime
    code_url: StrictStr
    __properties: ClassVar[List[str]] = ["function_class", "title", "description", "input_schema", "output_schema", "default_inputs", "uid", "created_at", "modified_at", "code_url"]

    @field_validator('function_class')
    def function_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PYTHON_CODE']):
            raise ValueError("must be one of enum values ('PYTHON_CODE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegisteredPythonCodeFunction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input_schema
        if self.input_schema:
            _dict['input_schema'] = self.input_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_schema
        if self.output_schema:
            _dict['output_schema'] = self.output_schema.to_dict()
        # set to None if default_inputs (nullable) is None
        # and model_fields_set contains the field
        if self.default_inputs is None and "default_inputs" in self.model_fields_set:
            _dict['default_inputs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegisteredPythonCodeFunction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "function_class": obj.get("function_class") if obj.get("function_class") is not None else 'PYTHON_CODE',
            "title": obj.get("title") if obj.get("title") is not None else '',
            "description": obj.get("description") if obj.get("description") is not None else '',
            "input_schema": JSONFunctionInputSchema.from_dict(obj["input_schema"]) if obj.get("input_schema") is not None else None,
            "output_schema": JSONFunctionOutputSchema.from_dict(obj["output_schema"]) if obj.get("output_schema") is not None else None,
            "default_inputs": obj.get("default_inputs"),
            "uid": obj.get("uid"),
            "created_at": obj.get("created_at"),
            "modified_at": obj.get("modified_at"),
            "code_url": obj.get("code_url")
        })
        return _obj



# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications

    The version of the OpenAPI document: 0.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class RunningState(str, Enum):
    """
    State of execution of a project's computational workflow  SEE StateType for task state  # Computational backend states explained: - UNKNOWN - The backend doesn't know about the task anymore, it has disappeared from the system or it was never created (eg. when we are asking for the task) - NOT_STARTED - Default state when the task is created - PUBLISHED - The task has been submitted to the computational backend (click on \"Run\" button in the UI) - PENDING - Task has been transferred to the Dask scheduler and is waiting for a worker to pick it up (director-v2 --> Dask scheduler)    - But! it is also transition state (ex. PENDING -> WAITING_FOR_CLUSTER -> PENDING -> WAITING_FOR_RESOURCES -> PENDING -> STARTED) - WAITING_FOR_CLUSTER - No cluster (Dask scheduler) is available to run the task; waiting for one to become available - WAITING_FOR_RESOURCES - No worker (Dask worker) is available to run the task; waiting for one to become available - STARTED - A worker has picked up the task and is executing it - SUCCESS - Task finished successfully - FAILED - Task finished with an error - ABORTED - Task was aborted before completion
    """

    """
    allowed enum values
    """
    UNKNOWN = 'UNKNOWN'
    NOT_STARTED = 'NOT_STARTED'
    PUBLISHED = 'PUBLISHED'
    PENDING = 'PENDING'
    WAITING_FOR_CLUSTER = 'WAITING_FOR_CLUSTER'
    WAITING_FOR_RESOURCES = 'WAITING_FOR_RESOURCES'
    STARTED = 'STARTED'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    ABORTED = 'ABORTED'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RunningState from a JSON string"""
        return cls(json.loads(json_str))



# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications

    The version of the OpenAPI document: 0.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class UserFileToProgramJob(BaseModel):
    """
    UserFileToProgramJob
    """ # noqa: E501
    filename: Annotated[str, Field(strict=True)] = Field(description="File name")
    filesize: Annotated[int, Field(strict=True, ge=0)] = Field(description="File size in bytes")
    sha256_checksum: Annotated[str, Field(strict=True)] = Field(description="SHA256 checksum")
    program_key: Annotated[str, Field(strict=True)] = Field(description="Program identifier")
    program_version: Annotated[str, Field(strict=True)] = Field(description="Program version")
    job_id: UUID = Field(description="Job identifier")
    workspace_path: StrictStr = Field(description="The file's relative path within the job's workspace directory. E.g. 'workspace/myfile.txt'")
    __properties: ClassVar[List[str]] = ["filename", "filesize", "sha256_checksum", "program_key", "program_version", "job_id", "workspace_path"]

    @field_validator('filename')
    def filename_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r".+", value):
            raise ValueError(r"must validate the regular expression /.+/")
        return value

    @field_validator('sha256_checksum')
    def sha256_checksum_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-fA-F0-9]{64}$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{64}$/")
        return value

    @field_validator('program_key')
    def program_key_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^simcore\/services\/dynamic\/([a-z0-9][a-z0-9_.-]*\/)*([a-z0-9-_]+[a-z0-9])$", value):
            raise ValueError(r"must validate the regular expression /^simcore\/services\/dynamic\/([a-z0-9][a-z0-9_.-]*\/)*([a-z0-9-_]+[a-z0-9])$/")
        return value

    @field_validator('program_version')
    def program_version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserFileToProgramJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserFileToProgramJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filename": obj.get("filename"),
            "filesize": obj.get("filesize"),
            "sha256_checksum": obj.get("sha256_checksum"),
            "program_key": obj.get("program_key"),
            "program_version": obj.get("program_version"),
            "job_id": obj.get("job_id"),
            "workspace_path": obj.get("workspace_path")
        })
        return _obj



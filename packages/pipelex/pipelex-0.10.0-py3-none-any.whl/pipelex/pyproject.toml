[project]
name = "pipelex"
version = "0.10.0"
description = "Pipelex is an open-source dev tool based on a simple declarative language that lets you define replicable, structured, composable LLM pipelines."
authors = [{ name = "Evotis S.A.S.", email = "evotis@pipelex.com" }]
maintainers = [{ name = "Pipelex staff", email = "oss@pipelex.com" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]

dependencies = [
    "aiofiles>=23.2.1",
    "backports.strenum>=1.3.0 ; python_version < '3.11'",
    "filetype>=1.2.0",
    "httpx>=0.27.0",
    "instructor>=1.8.3,<1.10.0",                          # 1.10.0 causes an error with mypy
    "jinja2>=3.1.4",
    "json2html>=1.3.0",
    "kajson==0.3.0",
    "markdown>=3.6",
    "networkx>=3.4.2",
    "openai>=1.60.1",
    "openpyxl>=3.1.5",
    "pandas>=2.2.3",
    "pillow>=11.2.1",
    "polyfactory>=2.21.0",
    "pypdfium2>=4.30.0,!=4.30.1",
    "pydantic==2.10.6",
    "python-dotenv>=1.0.1",
    "PyYAML>=6.0.2",
    "rich>=13.8.1",
    "shortuuid>=1.0.13",
    "toml>=0.10.2",
    "tomlkit>=0.13.2",
    "typer>=0.16.0",
    "typing-extensions>=4.13.2",
    "yattag>=1.15.2",
]

[project.urls]
Homepage = "https://pipelex.com"
Repository = "https://github.com/Pipelex/pipelex"
Documentation = "https://docs.pipelex.com/"
Changelog = "https://docs.pipelex.com/changelog/"

[project.optional-dependencies]
anthropic = ["anthropic>=0.49.0"]
bedrock = ["boto3>=1.34.131", "aioboto3>=13.4.0"]
fal = ["fal-client>=0.4.1"]
google = ["google-auth-oauthlib>=1.2.1"]
mistralai = ["mistralai==1.5.2"]
docs = [
    "mkdocs==1.6.1",
    "mkdocs-glightbox==0.4.0",
    "mkdocs-material==9.6.14",
    "mkdocs-meta-manager==1.1.0",
]

dev = [
    "boto3-stubs>=1.35.24",
    "cocode==0.1.2",
    "mypy>=1.11.2",
    "pyright==1.1.398",
    "pandas-stubs>=2.2.3.241126",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "pytest-sugar>=1.0.0",
    "pytest-xdist>= 3.6.1",
    "ruff>=0.6.8",
    "types-aioboto3[bedrock,bedrock-runtime]>=13.4.0",
    "types-aiofiles>=24.1.0.20240626",
    "types-beautifulsoup4>=4.12.0.20240907",
    "types-markdown>=3.6.0.20240316",
    "types-networkx>=3.3.0.20241020",
    "types-openpyxl>=3.1.5.20250306",
    "types-requests>=2.32.0.2024091",
    "types-PyYAML>=6.0.12.20250326",
    "types-toml>=0.10.8.20240310",
]

[project.scripts]
pipelex = "pipelex.cli._cli:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
check_untyped_defs = true
exclude = "^.*\\.venv/.*$"
mypy_path = "."
packages = ["pipelex", "tests"]
plugins = ["pydantic.mypy"]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["filetype", "json2html", "pypdfium2", "pypdfium2.raw"]

[tool.pyright]
analyzeUnannotatedFunctions = true
deprecateTypingAliases = false
disableBytesTypePromotions = true
enableExperimentalFeatures = false
enableTypeIgnoreComments = true
exclude = ["**/node_modules", "**/__pycache__"]
extraPaths = ["./tests"]
include = ["pipelex", "tests"]
pythonVersion = "3.11"
reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssertAlwaysTrue = "error"
reportAssertTypeFailure = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallInDefaultInitializer = true
reportCallIssue = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "error"
reportGeneralTypeIssues = "error"
reportImplicitOverride = true
reportImplicitStringConcatenation = false
reportImportCycles = true
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInconsistentOverload = "error"
reportIndexIssue = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidStubStatement = "error"
reportInvalidTypeArguments = "error"
reportInvalidTypeForm = "error"
reportInvalidTypeVarUse = "error"
reportMatchNotExhaustive = "error"
reportMissingImports = "error"
reportMissingModuleSource = "warning"
reportMissingParameterType = "error"
reportMissingSuperCall = "none"
reportMissingTypeArgument = "error"
reportMissingTypeStubs = false
reportNoOverloadImplementation = "error"
reportOperatorIssue = "error"
reportOptionalCall = "error"
reportOptionalContextManager = "error"
reportOptionalIterable = "error"
reportOptionalMemberAccess = "error"
reportOptionalOperand = "error"
reportOptionalSubscript = "error"
reportOverlappingOverload = "error"
reportPossiblyUnboundVariable = "error"
reportPrivateImportUsage = "error"
reportPrivateUsage = "error"
reportPropertyTypeMismatch = true
reportRedeclaration = "error"
reportReturnType = "error"
reportSelfClsParameterName = "error"
reportShadowedImports = true
reportTypeCommentUsage = "error"
reportTypedDictNotRequiredAccess = "error"
reportUnboundVariable = "error"
reportUndefinedVariable = "error"
reportUninitializedInstanceVariable = "none"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnnecessaryTypeIgnoreComment = "none"
reportUnsupportedDunderAll = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
reportUnusedCallResult = "none"
reportUnusedClass = "error"
reportUnusedCoroutine = "error"
reportUnusedExcept = "error"
reportUnusedExpression = "error"
reportUnusedFunction = "error"
reportUnusedImport = "none"
reportUnusedVariable = "error"
reportWildcardImportFromLibrary = "error"
strictDictionaryInference = true
strictListInference = true
strictParameterNoneValue = true
strictSetInference = true
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = "--import-mode=importlib -ra -m 'not (inference or llm or imgg or ocr or needs_output or pipelex_api)'"
asyncio_default_fixture_loop_scope = "session"
markers = [
    "needs_output: tests that need output to be displayed",
    "inference: slow and costly due to inference calls",
    "llm: slow and costly due to llm inference calls",
    "imgg: slow and costly due to imgg inference calls",
    "ocr: slow and costly due to ocr inference calls",
    "gha_disabled: tests that should not run in GitHub Actions",
    "codex_disabled: tests that should not run in Codex",
    "dry_runnable: tests that can be run in dry-run mode",
    "pipelex_api: tests that require access to the Pipelex API",
]
minversion = "8.0"
xfail_strict = true

[tool.coverage.run]
source = ["pipelex"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.ruff]
exclude = [
    ".cursor",
    ".git",
    ".github",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "trigger_pipeline",
]
line-length = 150
target-version = "py311"

[tool.ruff.format]

[tool.ruff.lint]
ignore = ["F401"]
external = ["F401"]
select = [
    "E4",
    "E7",
    "E9",
    "F",
    "A001",
    "A002",
    "A003",
    "RUF008",
    "RUF009",
    "RUF012",
    "RUF013",
    "RUF100",
    "E501",
    "I",
]

[tool.uv]
required-version = ">=0.7.2"

[tool.hatch.build.targets.wheel]
packages = ["pipelex"]

[tool.hatch.build.targets.wheel.force-include]
"pyproject.toml" = "pipelex/pyproject.toml"

[tool.hatch.build.targets.sdist]
packages = ["pipelex"]

[tool.hatch.build.targets.sdist.force-include]
"pyproject.toml" = "pipelex/pyproject.toml"

[tool.hatch.metadata]
allow-direct-references = true

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ActionArgs', 'Action']

@pulumi.input_type
class ActionArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 approval_email_notification: Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']] = None,
                 approval_webhook_notification: Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']] = None,
                 automation_trigger: Optional[pulumi.Input['ActionAutomationTriggerArgs']] = None,
                 azure_method: Optional[pulumi.Input['ActionAzureMethodArgs']] = None,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_method: Optional[pulumi.Input['ActionGithubMethodArgs']] = None,
                 gitlab_method: Optional[pulumi.Input['ActionGitlabMethodArgs']] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 kafka_method: Optional[pulumi.Input['ActionKafkaMethodArgs']] = None,
                 publish: Optional[pulumi.Input[bool]] = None,
                 required_approval: Optional[pulumi.Input[str]] = None,
                 self_service_trigger: Optional[pulumi.Input['ActionSelfServiceTriggerArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 upsert_entity_method: Optional[pulumi.Input['ActionUpsertEntityMethodArgs']] = None,
                 webhook_method: Optional[pulumi.Input['ActionWebhookMethodArgs']] = None):
        """
        The set of arguments for constructing a Action resource.
        :param pulumi.Input[str] identifier: Identifier
        :param pulumi.Input['ActionApprovalEmailNotificationArgs'] approval_email_notification: The email notification of the approval
        :param pulumi.Input['ActionApprovalWebhookNotificationArgs'] approval_webhook_notification: The webhook notification of the approval
        :param pulumi.Input['ActionAutomationTriggerArgs'] automation_trigger: Automation trigger for the action
        :param pulumi.Input['ActionAzureMethodArgs'] azure_method: Azure DevOps invocation method
        :param pulumi.Input[str] blueprint: The blueprint identifier the action relates to
        :param pulumi.Input[str] description: Description
        :param pulumi.Input['ActionGithubMethodArgs'] github_method: GitHub invocation method
        :param pulumi.Input['ActionGitlabMethodArgs'] gitlab_method: Gitlab invocation method
        :param pulumi.Input[str] icon: Icon
        :param pulumi.Input['ActionKafkaMethodArgs'] kafka_method: Kafka invocation method
        :param pulumi.Input[bool] publish: Publish action
        :param pulumi.Input[str] required_approval: Require approval before invoking the action. Can be one of "true", "false", "ANY" or "ALL"
        :param pulumi.Input['ActionSelfServiceTriggerArgs'] self_service_trigger: Self service trigger for the action. Note: you can define only one of `order_properties` and `steps`
        :param pulumi.Input[str] title: Title
        :param pulumi.Input['ActionUpsertEntityMethodArgs'] upsert_entity_method: Upsert Entity invocation method
        :param pulumi.Input['ActionWebhookMethodArgs'] webhook_method: Webhook invocation method
        """
        pulumi.set(__self__, "identifier", identifier)
        if approval_email_notification is not None:
            pulumi.set(__self__, "approval_email_notification", approval_email_notification)
        if approval_webhook_notification is not None:
            pulumi.set(__self__, "approval_webhook_notification", approval_webhook_notification)
        if automation_trigger is not None:
            pulumi.set(__self__, "automation_trigger", automation_trigger)
        if azure_method is not None:
            pulumi.set(__self__, "azure_method", azure_method)
        if blueprint is not None:
            warnings.warn("""Action is not attached to blueprint anymore. This value is ignored""", DeprecationWarning)
            pulumi.log.warn("""blueprint is deprecated: Action is not attached to blueprint anymore. This value is ignored""")
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if github_method is not None:
            pulumi.set(__self__, "github_method", github_method)
        if gitlab_method is not None:
            pulumi.set(__self__, "gitlab_method", gitlab_method)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if kafka_method is not None:
            pulumi.set(__self__, "kafka_method", kafka_method)
        if publish is not None:
            pulumi.set(__self__, "publish", publish)
        if required_approval is not None:
            pulumi.set(__self__, "required_approval", required_approval)
        if self_service_trigger is not None:
            pulumi.set(__self__, "self_service_trigger", self_service_trigger)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if upsert_entity_method is not None:
            pulumi.set(__self__, "upsert_entity_method", upsert_entity_method)
        if webhook_method is not None:
            pulumi.set(__self__, "webhook_method", webhook_method)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        Identifier
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="approvalEmailNotification")
    def approval_email_notification(self) -> Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']]:
        """
        The email notification of the approval
        """
        return pulumi.get(self, "approval_email_notification")

    @approval_email_notification.setter
    def approval_email_notification(self, value: Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']]):
        pulumi.set(self, "approval_email_notification", value)

    @property
    @pulumi.getter(name="approvalWebhookNotification")
    def approval_webhook_notification(self) -> Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']]:
        """
        The webhook notification of the approval
        """
        return pulumi.get(self, "approval_webhook_notification")

    @approval_webhook_notification.setter
    def approval_webhook_notification(self, value: Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']]):
        pulumi.set(self, "approval_webhook_notification", value)

    @property
    @pulumi.getter(name="automationTrigger")
    def automation_trigger(self) -> Optional[pulumi.Input['ActionAutomationTriggerArgs']]:
        """
        Automation trigger for the action
        """
        return pulumi.get(self, "automation_trigger")

    @automation_trigger.setter
    def automation_trigger(self, value: Optional[pulumi.Input['ActionAutomationTriggerArgs']]):
        pulumi.set(self, "automation_trigger", value)

    @property
    @pulumi.getter(name="azureMethod")
    def azure_method(self) -> Optional[pulumi.Input['ActionAzureMethodArgs']]:
        """
        Azure DevOps invocation method
        """
        return pulumi.get(self, "azure_method")

    @azure_method.setter
    def azure_method(self, value: Optional[pulumi.Input['ActionAzureMethodArgs']]):
        pulumi.set(self, "azure_method", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Action is not attached to blueprint anymore. This value is ignored""")
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        """
        The blueprint identifier the action relates to
        """
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="githubMethod")
    def github_method(self) -> Optional[pulumi.Input['ActionGithubMethodArgs']]:
        """
        GitHub invocation method
        """
        return pulumi.get(self, "github_method")

    @github_method.setter
    def github_method(self, value: Optional[pulumi.Input['ActionGithubMethodArgs']]):
        pulumi.set(self, "github_method", value)

    @property
    @pulumi.getter(name="gitlabMethod")
    def gitlab_method(self) -> Optional[pulumi.Input['ActionGitlabMethodArgs']]:
        """
        Gitlab invocation method
        """
        return pulumi.get(self, "gitlab_method")

    @gitlab_method.setter
    def gitlab_method(self, value: Optional[pulumi.Input['ActionGitlabMethodArgs']]):
        pulumi.set(self, "gitlab_method", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        Icon
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="kafkaMethod")
    def kafka_method(self) -> Optional[pulumi.Input['ActionKafkaMethodArgs']]:
        """
        Kafka invocation method
        """
        return pulumi.get(self, "kafka_method")

    @kafka_method.setter
    def kafka_method(self, value: Optional[pulumi.Input['ActionKafkaMethodArgs']]):
        pulumi.set(self, "kafka_method", value)

    @property
    @pulumi.getter
    def publish(self) -> Optional[pulumi.Input[bool]]:
        """
        Publish action
        """
        return pulumi.get(self, "publish")

    @publish.setter
    def publish(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish", value)

    @property
    @pulumi.getter(name="requiredApproval")
    def required_approval(self) -> Optional[pulumi.Input[str]]:
        """
        Require approval before invoking the action. Can be one of "true", "false", "ANY" or "ALL"
        """
        return pulumi.get(self, "required_approval")

    @required_approval.setter
    def required_approval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required_approval", value)

    @property
    @pulumi.getter(name="selfServiceTrigger")
    def self_service_trigger(self) -> Optional[pulumi.Input['ActionSelfServiceTriggerArgs']]:
        """
        Self service trigger for the action. Note: you can define only one of `order_properties` and `steps`
        """
        return pulumi.get(self, "self_service_trigger")

    @self_service_trigger.setter
    def self_service_trigger(self, value: Optional[pulumi.Input['ActionSelfServiceTriggerArgs']]):
        pulumi.set(self, "self_service_trigger", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="upsertEntityMethod")
    def upsert_entity_method(self) -> Optional[pulumi.Input['ActionUpsertEntityMethodArgs']]:
        """
        Upsert Entity invocation method
        """
        return pulumi.get(self, "upsert_entity_method")

    @upsert_entity_method.setter
    def upsert_entity_method(self, value: Optional[pulumi.Input['ActionUpsertEntityMethodArgs']]):
        pulumi.set(self, "upsert_entity_method", value)

    @property
    @pulumi.getter(name="webhookMethod")
    def webhook_method(self) -> Optional[pulumi.Input['ActionWebhookMethodArgs']]:
        """
        Webhook invocation method
        """
        return pulumi.get(self, "webhook_method")

    @webhook_method.setter
    def webhook_method(self, value: Optional[pulumi.Input['ActionWebhookMethodArgs']]):
        pulumi.set(self, "webhook_method", value)


@pulumi.input_type
class _ActionState:
    def __init__(__self__, *,
                 approval_email_notification: Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']] = None,
                 approval_webhook_notification: Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']] = None,
                 automation_trigger: Optional[pulumi.Input['ActionAutomationTriggerArgs']] = None,
                 azure_method: Optional[pulumi.Input['ActionAzureMethodArgs']] = None,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_method: Optional[pulumi.Input['ActionGithubMethodArgs']] = None,
                 gitlab_method: Optional[pulumi.Input['ActionGitlabMethodArgs']] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 kafka_method: Optional[pulumi.Input['ActionKafkaMethodArgs']] = None,
                 publish: Optional[pulumi.Input[bool]] = None,
                 required_approval: Optional[pulumi.Input[str]] = None,
                 self_service_trigger: Optional[pulumi.Input['ActionSelfServiceTriggerArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 upsert_entity_method: Optional[pulumi.Input['ActionUpsertEntityMethodArgs']] = None,
                 webhook_method: Optional[pulumi.Input['ActionWebhookMethodArgs']] = None):
        """
        Input properties used for looking up and filtering Action resources.
        :param pulumi.Input['ActionApprovalEmailNotificationArgs'] approval_email_notification: The email notification of the approval
        :param pulumi.Input['ActionApprovalWebhookNotificationArgs'] approval_webhook_notification: The webhook notification of the approval
        :param pulumi.Input['ActionAutomationTriggerArgs'] automation_trigger: Automation trigger for the action
        :param pulumi.Input['ActionAzureMethodArgs'] azure_method: Azure DevOps invocation method
        :param pulumi.Input[str] blueprint: The blueprint identifier the action relates to
        :param pulumi.Input[str] description: Description
        :param pulumi.Input['ActionGithubMethodArgs'] github_method: GitHub invocation method
        :param pulumi.Input['ActionGitlabMethodArgs'] gitlab_method: Gitlab invocation method
        :param pulumi.Input[str] icon: Icon
        :param pulumi.Input[str] identifier: Identifier
        :param pulumi.Input['ActionKafkaMethodArgs'] kafka_method: Kafka invocation method
        :param pulumi.Input[bool] publish: Publish action
        :param pulumi.Input[str] required_approval: Require approval before invoking the action. Can be one of "true", "false", "ANY" or "ALL"
        :param pulumi.Input['ActionSelfServiceTriggerArgs'] self_service_trigger: Self service trigger for the action. Note: you can define only one of `order_properties` and `steps`
        :param pulumi.Input[str] title: Title
        :param pulumi.Input['ActionUpsertEntityMethodArgs'] upsert_entity_method: Upsert Entity invocation method
        :param pulumi.Input['ActionWebhookMethodArgs'] webhook_method: Webhook invocation method
        """
        if approval_email_notification is not None:
            pulumi.set(__self__, "approval_email_notification", approval_email_notification)
        if approval_webhook_notification is not None:
            pulumi.set(__self__, "approval_webhook_notification", approval_webhook_notification)
        if automation_trigger is not None:
            pulumi.set(__self__, "automation_trigger", automation_trigger)
        if azure_method is not None:
            pulumi.set(__self__, "azure_method", azure_method)
        if blueprint is not None:
            warnings.warn("""Action is not attached to blueprint anymore. This value is ignored""", DeprecationWarning)
            pulumi.log.warn("""blueprint is deprecated: Action is not attached to blueprint anymore. This value is ignored""")
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if github_method is not None:
            pulumi.set(__self__, "github_method", github_method)
        if gitlab_method is not None:
            pulumi.set(__self__, "gitlab_method", gitlab_method)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if kafka_method is not None:
            pulumi.set(__self__, "kafka_method", kafka_method)
        if publish is not None:
            pulumi.set(__self__, "publish", publish)
        if required_approval is not None:
            pulumi.set(__self__, "required_approval", required_approval)
        if self_service_trigger is not None:
            pulumi.set(__self__, "self_service_trigger", self_service_trigger)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if upsert_entity_method is not None:
            pulumi.set(__self__, "upsert_entity_method", upsert_entity_method)
        if webhook_method is not None:
            pulumi.set(__self__, "webhook_method", webhook_method)

    @property
    @pulumi.getter(name="approvalEmailNotification")
    def approval_email_notification(self) -> Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']]:
        """
        The email notification of the approval
        """
        return pulumi.get(self, "approval_email_notification")

    @approval_email_notification.setter
    def approval_email_notification(self, value: Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']]):
        pulumi.set(self, "approval_email_notification", value)

    @property
    @pulumi.getter(name="approvalWebhookNotification")
    def approval_webhook_notification(self) -> Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']]:
        """
        The webhook notification of the approval
        """
        return pulumi.get(self, "approval_webhook_notification")

    @approval_webhook_notification.setter
    def approval_webhook_notification(self, value: Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']]):
        pulumi.set(self, "approval_webhook_notification", value)

    @property
    @pulumi.getter(name="automationTrigger")
    def automation_trigger(self) -> Optional[pulumi.Input['ActionAutomationTriggerArgs']]:
        """
        Automation trigger for the action
        """
        return pulumi.get(self, "automation_trigger")

    @automation_trigger.setter
    def automation_trigger(self, value: Optional[pulumi.Input['ActionAutomationTriggerArgs']]):
        pulumi.set(self, "automation_trigger", value)

    @property
    @pulumi.getter(name="azureMethod")
    def azure_method(self) -> Optional[pulumi.Input['ActionAzureMethodArgs']]:
        """
        Azure DevOps invocation method
        """
        return pulumi.get(self, "azure_method")

    @azure_method.setter
    def azure_method(self, value: Optional[pulumi.Input['ActionAzureMethodArgs']]):
        pulumi.set(self, "azure_method", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Action is not attached to blueprint anymore. This value is ignored""")
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        """
        The blueprint identifier the action relates to
        """
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="githubMethod")
    def github_method(self) -> Optional[pulumi.Input['ActionGithubMethodArgs']]:
        """
        GitHub invocation method
        """
        return pulumi.get(self, "github_method")

    @github_method.setter
    def github_method(self, value: Optional[pulumi.Input['ActionGithubMethodArgs']]):
        pulumi.set(self, "github_method", value)

    @property
    @pulumi.getter(name="gitlabMethod")
    def gitlab_method(self) -> Optional[pulumi.Input['ActionGitlabMethodArgs']]:
        """
        Gitlab invocation method
        """
        return pulumi.get(self, "gitlab_method")

    @gitlab_method.setter
    def gitlab_method(self, value: Optional[pulumi.Input['ActionGitlabMethodArgs']]):
        pulumi.set(self, "gitlab_method", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        Icon
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="kafkaMethod")
    def kafka_method(self) -> Optional[pulumi.Input['ActionKafkaMethodArgs']]:
        """
        Kafka invocation method
        """
        return pulumi.get(self, "kafka_method")

    @kafka_method.setter
    def kafka_method(self, value: Optional[pulumi.Input['ActionKafkaMethodArgs']]):
        pulumi.set(self, "kafka_method", value)

    @property
    @pulumi.getter
    def publish(self) -> Optional[pulumi.Input[bool]]:
        """
        Publish action
        """
        return pulumi.get(self, "publish")

    @publish.setter
    def publish(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish", value)

    @property
    @pulumi.getter(name="requiredApproval")
    def required_approval(self) -> Optional[pulumi.Input[str]]:
        """
        Require approval before invoking the action. Can be one of "true", "false", "ANY" or "ALL"
        """
        return pulumi.get(self, "required_approval")

    @required_approval.setter
    def required_approval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required_approval", value)

    @property
    @pulumi.getter(name="selfServiceTrigger")
    def self_service_trigger(self) -> Optional[pulumi.Input['ActionSelfServiceTriggerArgs']]:
        """
        Self service trigger for the action. Note: you can define only one of `order_properties` and `steps`
        """
        return pulumi.get(self, "self_service_trigger")

    @self_service_trigger.setter
    def self_service_trigger(self, value: Optional[pulumi.Input['ActionSelfServiceTriggerArgs']]):
        pulumi.set(self, "self_service_trigger", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="upsertEntityMethod")
    def upsert_entity_method(self) -> Optional[pulumi.Input['ActionUpsertEntityMethodArgs']]:
        """
        Upsert Entity invocation method
        """
        return pulumi.get(self, "upsert_entity_method")

    @upsert_entity_method.setter
    def upsert_entity_method(self, value: Optional[pulumi.Input['ActionUpsertEntityMethodArgs']]):
        pulumi.set(self, "upsert_entity_method", value)

    @property
    @pulumi.getter(name="webhookMethod")
    def webhook_method(self) -> Optional[pulumi.Input['ActionWebhookMethodArgs']]:
        """
        Webhook invocation method
        """
        return pulumi.get(self, "webhook_method")

    @webhook_method.setter
    def webhook_method(self, value: Optional[pulumi.Input['ActionWebhookMethodArgs']]):
        pulumi.set(self, "webhook_method", value)


class Action(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval_email_notification: Optional[pulumi.Input[Union['ActionApprovalEmailNotificationArgs', 'ActionApprovalEmailNotificationArgsDict']]] = None,
                 approval_webhook_notification: Optional[pulumi.Input[Union['ActionApprovalWebhookNotificationArgs', 'ActionApprovalWebhookNotificationArgsDict']]] = None,
                 automation_trigger: Optional[pulumi.Input[Union['ActionAutomationTriggerArgs', 'ActionAutomationTriggerArgsDict']]] = None,
                 azure_method: Optional[pulumi.Input[Union['ActionAzureMethodArgs', 'ActionAzureMethodArgsDict']]] = None,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_method: Optional[pulumi.Input[Union['ActionGithubMethodArgs', 'ActionGithubMethodArgsDict']]] = None,
                 gitlab_method: Optional[pulumi.Input[Union['ActionGitlabMethodArgs', 'ActionGitlabMethodArgsDict']]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 kafka_method: Optional[pulumi.Input[Union['ActionKafkaMethodArgs', 'ActionKafkaMethodArgsDict']]] = None,
                 publish: Optional[pulumi.Input[bool]] = None,
                 required_approval: Optional[pulumi.Input[str]] = None,
                 self_service_trigger: Optional[pulumi.Input[Union['ActionSelfServiceTriggerArgs', 'ActionSelfServiceTriggerArgsDict']]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 upsert_entity_method: Optional[pulumi.Input[Union['ActionUpsertEntityMethodArgs', 'ActionUpsertEntityMethodArgsDict']]] = None,
                 webhook_method: Optional[pulumi.Input[Union['ActionWebhookMethodArgs', 'ActionWebhookMethodArgsDict']]] = None,
                 __props__=None):
        """
        Docs for the Action resource can be found [here](https://docs.getport.io/create-self-service-experiences/).

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_port as port

        create_microservice = port.index.Port_action("createMicroservice",
            title=Create Microservice,
            identifier=create-microservice,
            icon=Terraform,
            self_service_trigger={
                operation: CREATE,
                blueprintIdentifier: port_blueprint.microservice.identifier,
                userProperties: {
                    stringProps: {
                        myStringIdentifier: {
                            title: My String Identifier,
                            required: True,
                            format: entity,
                            blueprint: port_blueprint.parent.identifier,
                            dataset: {
                                combinator: and,
                                rules: [{
                                    property: $title,
                                    operator: contains,
                                    value: {
                                        jqQuery: "specificValue",
                                    },
                                }],
                            },
                            sort: {
                                property: $updatedAt,
                                order: DESC,
                            },
                        },
                    },
                    numberProps: {
                        myNumberIdentifier: {
                            title: My Number Identifier,
                            required: True,
                            maximum: 100,
                            minimum: 0,
                        },
                    },
                    booleanProps: {
                        myBooleanIdentifier: {
                            title: My Boolean Identifier,
                            required: True,
                        },
                    },
                    objectProps: {
                        myObjectIdentifier: {
                            title: My Object Identifier,
                            required: True,
                        },
                    },
                    arrayProps: {
                        myArrayIdentifier: {
                            title: My Array Identifier,
                            required: True,
                            stringItems: {
                                format: entity,
                                blueprint: port_blueprint.parent.identifier,
                                dataset: json.dumps({
                                    combinator: and,
                                    rules: [{
                                        property: $title,
                                        operator: contains,
                                        value: specificValue,
                                    }],
                                }),
                            },
                            sort: {
                                property: $updatedAt,
                                order: DESC,
                            },
                        },
                    },
                },
            },
            kafka_method={
                payload: json.dumps({
                    runId: {{.run.id}},
                }),
            })
        ```

        ### With Automation Trigger

        Port allows setting an automation trigger to an action, for executing an action based on event occurred to an entity in Port.

        ```python
        import pulumi
        import json
        import pulumi_port as port

        delete_temporary_microservice = port.index.Port_action("deleteTemporaryMicroservice",
            title=Delete Temporary Microservice,
            identifier=delete-temp-microservice,
            icon=Terraform,
            automation_trigger={
                timerPropertyExpiredEvent: {
                    blueprintIdentifier: port_blueprint.microservice.identifier,
                    propertyIdentifier: ttl,
                },
            },
            kafka_method={
                payload: json.dumps({
                    runId: {{.run.id}},
                }),
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ActionApprovalEmailNotificationArgs', 'ActionApprovalEmailNotificationArgsDict']] approval_email_notification: The email notification of the approval
        :param pulumi.Input[Union['ActionApprovalWebhookNotificationArgs', 'ActionApprovalWebhookNotificationArgsDict']] approval_webhook_notification: The webhook notification of the approval
        :param pulumi.Input[Union['ActionAutomationTriggerArgs', 'ActionAutomationTriggerArgsDict']] automation_trigger: Automation trigger for the action
        :param pulumi.Input[Union['ActionAzureMethodArgs', 'ActionAzureMethodArgsDict']] azure_method: Azure DevOps invocation method
        :param pulumi.Input[str] blueprint: The blueprint identifier the action relates to
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[Union['ActionGithubMethodArgs', 'ActionGithubMethodArgsDict']] github_method: GitHub invocation method
        :param pulumi.Input[Union['ActionGitlabMethodArgs', 'ActionGitlabMethodArgsDict']] gitlab_method: Gitlab invocation method
        :param pulumi.Input[str] icon: Icon
        :param pulumi.Input[str] identifier: Identifier
        :param pulumi.Input[Union['ActionKafkaMethodArgs', 'ActionKafkaMethodArgsDict']] kafka_method: Kafka invocation method
        :param pulumi.Input[bool] publish: Publish action
        :param pulumi.Input[str] required_approval: Require approval before invoking the action. Can be one of "true", "false", "ANY" or "ALL"
        :param pulumi.Input[Union['ActionSelfServiceTriggerArgs', 'ActionSelfServiceTriggerArgsDict']] self_service_trigger: Self service trigger for the action. Note: you can define only one of `order_properties` and `steps`
        :param pulumi.Input[str] title: Title
        :param pulumi.Input[Union['ActionUpsertEntityMethodArgs', 'ActionUpsertEntityMethodArgsDict']] upsert_entity_method: Upsert Entity invocation method
        :param pulumi.Input[Union['ActionWebhookMethodArgs', 'ActionWebhookMethodArgsDict']] webhook_method: Webhook invocation method
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Docs for the Action resource can be found [here](https://docs.getport.io/create-self-service-experiences/).

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_port as port

        create_microservice = port.index.Port_action("createMicroservice",
            title=Create Microservice,
            identifier=create-microservice,
            icon=Terraform,
            self_service_trigger={
                operation: CREATE,
                blueprintIdentifier: port_blueprint.microservice.identifier,
                userProperties: {
                    stringProps: {
                        myStringIdentifier: {
                            title: My String Identifier,
                            required: True,
                            format: entity,
                            blueprint: port_blueprint.parent.identifier,
                            dataset: {
                                combinator: and,
                                rules: [{
                                    property: $title,
                                    operator: contains,
                                    value: {
                                        jqQuery: "specificValue",
                                    },
                                }],
                            },
                            sort: {
                                property: $updatedAt,
                                order: DESC,
                            },
                        },
                    },
                    numberProps: {
                        myNumberIdentifier: {
                            title: My Number Identifier,
                            required: True,
                            maximum: 100,
                            minimum: 0,
                        },
                    },
                    booleanProps: {
                        myBooleanIdentifier: {
                            title: My Boolean Identifier,
                            required: True,
                        },
                    },
                    objectProps: {
                        myObjectIdentifier: {
                            title: My Object Identifier,
                            required: True,
                        },
                    },
                    arrayProps: {
                        myArrayIdentifier: {
                            title: My Array Identifier,
                            required: True,
                            stringItems: {
                                format: entity,
                                blueprint: port_blueprint.parent.identifier,
                                dataset: json.dumps({
                                    combinator: and,
                                    rules: [{
                                        property: $title,
                                        operator: contains,
                                        value: specificValue,
                                    }],
                                }),
                            },
                            sort: {
                                property: $updatedAt,
                                order: DESC,
                            },
                        },
                    },
                },
            },
            kafka_method={
                payload: json.dumps({
                    runId: {{.run.id}},
                }),
            })
        ```

        ### With Automation Trigger

        Port allows setting an automation trigger to an action, for executing an action based on event occurred to an entity in Port.

        ```python
        import pulumi
        import json
        import pulumi_port as port

        delete_temporary_microservice = port.index.Port_action("deleteTemporaryMicroservice",
            title=Delete Temporary Microservice,
            identifier=delete-temp-microservice,
            icon=Terraform,
            automation_trigger={
                timerPropertyExpiredEvent: {
                    blueprintIdentifier: port_blueprint.microservice.identifier,
                    propertyIdentifier: ttl,
                },
            },
            kafka_method={
                payload: json.dumps({
                    runId: {{.run.id}},
                }),
            })
        ```

        :param str resource_name: The name of the resource.
        :param ActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval_email_notification: Optional[pulumi.Input[Union['ActionApprovalEmailNotificationArgs', 'ActionApprovalEmailNotificationArgsDict']]] = None,
                 approval_webhook_notification: Optional[pulumi.Input[Union['ActionApprovalWebhookNotificationArgs', 'ActionApprovalWebhookNotificationArgsDict']]] = None,
                 automation_trigger: Optional[pulumi.Input[Union['ActionAutomationTriggerArgs', 'ActionAutomationTriggerArgsDict']]] = None,
                 azure_method: Optional[pulumi.Input[Union['ActionAzureMethodArgs', 'ActionAzureMethodArgsDict']]] = None,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_method: Optional[pulumi.Input[Union['ActionGithubMethodArgs', 'ActionGithubMethodArgsDict']]] = None,
                 gitlab_method: Optional[pulumi.Input[Union['ActionGitlabMethodArgs', 'ActionGitlabMethodArgsDict']]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 kafka_method: Optional[pulumi.Input[Union['ActionKafkaMethodArgs', 'ActionKafkaMethodArgsDict']]] = None,
                 publish: Optional[pulumi.Input[bool]] = None,
                 required_approval: Optional[pulumi.Input[str]] = None,
                 self_service_trigger: Optional[pulumi.Input[Union['ActionSelfServiceTriggerArgs', 'ActionSelfServiceTriggerArgsDict']]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 upsert_entity_method: Optional[pulumi.Input[Union['ActionUpsertEntityMethodArgs', 'ActionUpsertEntityMethodArgsDict']]] = None,
                 webhook_method: Optional[pulumi.Input[Union['ActionWebhookMethodArgs', 'ActionWebhookMethodArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ActionArgs.__new__(ActionArgs)

            __props__.__dict__["approval_email_notification"] = approval_email_notification
            __props__.__dict__["approval_webhook_notification"] = approval_webhook_notification
            __props__.__dict__["automation_trigger"] = automation_trigger
            __props__.__dict__["azure_method"] = azure_method
            __props__.__dict__["blueprint"] = blueprint
            __props__.__dict__["description"] = description
            __props__.__dict__["github_method"] = github_method
            __props__.__dict__["gitlab_method"] = gitlab_method
            __props__.__dict__["icon"] = icon
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["kafka_method"] = kafka_method
            __props__.__dict__["publish"] = publish
            __props__.__dict__["required_approval"] = required_approval
            __props__.__dict__["self_service_trigger"] = self_service_trigger
            __props__.__dict__["title"] = title
            __props__.__dict__["upsert_entity_method"] = upsert_entity_method
            __props__.__dict__["webhook_method"] = webhook_method
        super(Action, __self__).__init__(
            'port:index/action:Action',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            approval_email_notification: Optional[pulumi.Input[Union['ActionApprovalEmailNotificationArgs', 'ActionApprovalEmailNotificationArgsDict']]] = None,
            approval_webhook_notification: Optional[pulumi.Input[Union['ActionApprovalWebhookNotificationArgs', 'ActionApprovalWebhookNotificationArgsDict']]] = None,
            automation_trigger: Optional[pulumi.Input[Union['ActionAutomationTriggerArgs', 'ActionAutomationTriggerArgsDict']]] = None,
            azure_method: Optional[pulumi.Input[Union['ActionAzureMethodArgs', 'ActionAzureMethodArgsDict']]] = None,
            blueprint: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            github_method: Optional[pulumi.Input[Union['ActionGithubMethodArgs', 'ActionGithubMethodArgsDict']]] = None,
            gitlab_method: Optional[pulumi.Input[Union['ActionGitlabMethodArgs', 'ActionGitlabMethodArgsDict']]] = None,
            icon: Optional[pulumi.Input[str]] = None,
            identifier: Optional[pulumi.Input[str]] = None,
            kafka_method: Optional[pulumi.Input[Union['ActionKafkaMethodArgs', 'ActionKafkaMethodArgsDict']]] = None,
            publish: Optional[pulumi.Input[bool]] = None,
            required_approval: Optional[pulumi.Input[str]] = None,
            self_service_trigger: Optional[pulumi.Input[Union['ActionSelfServiceTriggerArgs', 'ActionSelfServiceTriggerArgsDict']]] = None,
            title: Optional[pulumi.Input[str]] = None,
            upsert_entity_method: Optional[pulumi.Input[Union['ActionUpsertEntityMethodArgs', 'ActionUpsertEntityMethodArgsDict']]] = None,
            webhook_method: Optional[pulumi.Input[Union['ActionWebhookMethodArgs', 'ActionWebhookMethodArgsDict']]] = None) -> 'Action':
        """
        Get an existing Action resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ActionApprovalEmailNotificationArgs', 'ActionApprovalEmailNotificationArgsDict']] approval_email_notification: The email notification of the approval
        :param pulumi.Input[Union['ActionApprovalWebhookNotificationArgs', 'ActionApprovalWebhookNotificationArgsDict']] approval_webhook_notification: The webhook notification of the approval
        :param pulumi.Input[Union['ActionAutomationTriggerArgs', 'ActionAutomationTriggerArgsDict']] automation_trigger: Automation trigger for the action
        :param pulumi.Input[Union['ActionAzureMethodArgs', 'ActionAzureMethodArgsDict']] azure_method: Azure DevOps invocation method
        :param pulumi.Input[str] blueprint: The blueprint identifier the action relates to
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[Union['ActionGithubMethodArgs', 'ActionGithubMethodArgsDict']] github_method: GitHub invocation method
        :param pulumi.Input[Union['ActionGitlabMethodArgs', 'ActionGitlabMethodArgsDict']] gitlab_method: Gitlab invocation method
        :param pulumi.Input[str] icon: Icon
        :param pulumi.Input[str] identifier: Identifier
        :param pulumi.Input[Union['ActionKafkaMethodArgs', 'ActionKafkaMethodArgsDict']] kafka_method: Kafka invocation method
        :param pulumi.Input[bool] publish: Publish action
        :param pulumi.Input[str] required_approval: Require approval before invoking the action. Can be one of "true", "false", "ANY" or "ALL"
        :param pulumi.Input[Union['ActionSelfServiceTriggerArgs', 'ActionSelfServiceTriggerArgsDict']] self_service_trigger: Self service trigger for the action. Note: you can define only one of `order_properties` and `steps`
        :param pulumi.Input[str] title: Title
        :param pulumi.Input[Union['ActionUpsertEntityMethodArgs', 'ActionUpsertEntityMethodArgsDict']] upsert_entity_method: Upsert Entity invocation method
        :param pulumi.Input[Union['ActionWebhookMethodArgs', 'ActionWebhookMethodArgsDict']] webhook_method: Webhook invocation method
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ActionState.__new__(_ActionState)

        __props__.__dict__["approval_email_notification"] = approval_email_notification
        __props__.__dict__["approval_webhook_notification"] = approval_webhook_notification
        __props__.__dict__["automation_trigger"] = automation_trigger
        __props__.__dict__["azure_method"] = azure_method
        __props__.__dict__["blueprint"] = blueprint
        __props__.__dict__["description"] = description
        __props__.__dict__["github_method"] = github_method
        __props__.__dict__["gitlab_method"] = gitlab_method
        __props__.__dict__["icon"] = icon
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["kafka_method"] = kafka_method
        __props__.__dict__["publish"] = publish
        __props__.__dict__["required_approval"] = required_approval
        __props__.__dict__["self_service_trigger"] = self_service_trigger
        __props__.__dict__["title"] = title
        __props__.__dict__["upsert_entity_method"] = upsert_entity_method
        __props__.__dict__["webhook_method"] = webhook_method
        return Action(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="approvalEmailNotification")
    def approval_email_notification(self) -> pulumi.Output[Optional['outputs.ActionApprovalEmailNotification']]:
        """
        The email notification of the approval
        """
        return pulumi.get(self, "approval_email_notification")

    @property
    @pulumi.getter(name="approvalWebhookNotification")
    def approval_webhook_notification(self) -> pulumi.Output[Optional['outputs.ActionApprovalWebhookNotification']]:
        """
        The webhook notification of the approval
        """
        return pulumi.get(self, "approval_webhook_notification")

    @property
    @pulumi.getter(name="automationTrigger")
    def automation_trigger(self) -> pulumi.Output[Optional['outputs.ActionAutomationTrigger']]:
        """
        Automation trigger for the action
        """
        return pulumi.get(self, "automation_trigger")

    @property
    @pulumi.getter(name="azureMethod")
    def azure_method(self) -> pulumi.Output[Optional['outputs.ActionAzureMethod']]:
        """
        Azure DevOps invocation method
        """
        return pulumi.get(self, "azure_method")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Action is not attached to blueprint anymore. This value is ignored""")
    def blueprint(self) -> pulumi.Output[Optional[str]]:
        """
        The blueprint identifier the action relates to
        """
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="githubMethod")
    def github_method(self) -> pulumi.Output[Optional['outputs.ActionGithubMethod']]:
        """
        GitHub invocation method
        """
        return pulumi.get(self, "github_method")

    @property
    @pulumi.getter(name="gitlabMethod")
    def gitlab_method(self) -> pulumi.Output[Optional['outputs.ActionGitlabMethod']]:
        """
        Gitlab invocation method
        """
        return pulumi.get(self, "gitlab_method")

    @property
    @pulumi.getter
    def icon(self) -> pulumi.Output[Optional[str]]:
        """
        Icon
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[str]:
        """
        Identifier
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="kafkaMethod")
    def kafka_method(self) -> pulumi.Output[Optional['outputs.ActionKafkaMethod']]:
        """
        Kafka invocation method
        """
        return pulumi.get(self, "kafka_method")

    @property
    @pulumi.getter
    def publish(self) -> pulumi.Output[bool]:
        """
        Publish action
        """
        return pulumi.get(self, "publish")

    @property
    @pulumi.getter(name="requiredApproval")
    def required_approval(self) -> pulumi.Output[Optional[str]]:
        """
        Require approval before invoking the action. Can be one of "true", "false", "ANY" or "ALL"
        """
        return pulumi.get(self, "required_approval")

    @property
    @pulumi.getter(name="selfServiceTrigger")
    def self_service_trigger(self) -> pulumi.Output[Optional['outputs.ActionSelfServiceTrigger']]:
        """
        Self service trigger for the action. Note: you can define only one of `order_properties` and `steps`
        """
        return pulumi.get(self, "self_service_trigger")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[str]]:
        """
        Title
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="upsertEntityMethod")
    def upsert_entity_method(self) -> pulumi.Output[Optional['outputs.ActionUpsertEntityMethod']]:
        """
        Upsert Entity invocation method
        """
        return pulumi.get(self, "upsert_entity_method")

    @property
    @pulumi.getter(name="webhookMethod")
    def webhook_method(self) -> pulumi.Output[Optional['outputs.ActionWebhookMethod']]:
        """
        Webhook invocation method
        """
        return pulumi.get(self, "webhook_method")


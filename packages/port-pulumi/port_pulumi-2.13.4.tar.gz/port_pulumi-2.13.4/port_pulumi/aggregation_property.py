# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AggregationPropertyArgs', 'AggregationProperty']

@pulumi.input_type
class AggregationPropertyArgs:
    def __init__(__self__, *,
                 aggregation_identifier: pulumi.Input[str],
                 blueprint_identifier: pulumi.Input[str],
                 method: pulumi.Input['AggregationPropertyMethodArgs'],
                 target_blueprint_identifier: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AggregationProperty resource.
        :param pulumi.Input[str] aggregation_identifier: The identifier of the aggregation property in the blueprint
        :param pulumi.Input[str] blueprint_identifier: The identifier of the blueprint the aggregation property will be added to
        :param pulumi.Input['AggregationPropertyMethodArgs'] method: The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
               aggregate_by_property
        :param pulumi.Input[str] target_blueprint_identifier: The identifier of the blueprint to perform the aggregation on
        :param pulumi.Input[str] description: The description of the aggregation property
        :param pulumi.Input[str] icon: The icon of the aggregation property
        :param pulumi.Input[str] query: Query to filter the target entities
        :param pulumi.Input[str] title: The title of the aggregation property
        """
        pulumi.set(__self__, "aggregation_identifier", aggregation_identifier)
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "target_blueprint_identifier", target_blueprint_identifier)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="aggregationIdentifier")
    def aggregation_identifier(self) -> pulumi.Input[str]:
        """
        The identifier of the aggregation property in the blueprint
        """
        return pulumi.get(self, "aggregation_identifier")

    @aggregation_identifier.setter
    def aggregation_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation_identifier", value)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> pulumi.Input[str]:
        """
        The identifier of the blueprint the aggregation property will be added to
        """
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint_identifier", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input['AggregationPropertyMethodArgs']:
        """
        The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
        aggregate_by_property
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input['AggregationPropertyMethodArgs']):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="targetBlueprintIdentifier")
    def target_blueprint_identifier(self) -> pulumi.Input[str]:
        """
        The identifier of the blueprint to perform the aggregation on
        """
        return pulumi.get(self, "target_blueprint_identifier")

    @target_blueprint_identifier.setter
    def target_blueprint_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_blueprint_identifier", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the aggregation property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the aggregation property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Query to filter the target entities
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the aggregation property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class _AggregationPropertyState:
    def __init__(__self__, *,
                 aggregation_identifier: Optional[pulumi.Input[str]] = None,
                 blueprint_identifier: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input['AggregationPropertyMethodArgs']] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 target_blueprint_identifier: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AggregationProperty resources.
        :param pulumi.Input[str] aggregation_identifier: The identifier of the aggregation property in the blueprint
        :param pulumi.Input[str] blueprint_identifier: The identifier of the blueprint the aggregation property will be added to
        :param pulumi.Input[str] description: The description of the aggregation property
        :param pulumi.Input[str] icon: The icon of the aggregation property
        :param pulumi.Input['AggregationPropertyMethodArgs'] method: The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
               aggregate_by_property
        :param pulumi.Input[str] query: Query to filter the target entities
        :param pulumi.Input[str] target_blueprint_identifier: The identifier of the blueprint to perform the aggregation on
        :param pulumi.Input[str] title: The title of the aggregation property
        """
        if aggregation_identifier is not None:
            pulumi.set(__self__, "aggregation_identifier", aggregation_identifier)
        if blueprint_identifier is not None:
            pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if target_blueprint_identifier is not None:
            pulumi.set(__self__, "target_blueprint_identifier", target_blueprint_identifier)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="aggregationIdentifier")
    def aggregation_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the aggregation property in the blueprint
        """
        return pulumi.get(self, "aggregation_identifier")

    @aggregation_identifier.setter
    def aggregation_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_identifier", value)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the blueprint the aggregation property will be added to
        """
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint_identifier", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the aggregation property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the aggregation property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['AggregationPropertyMethodArgs']]:
        """
        The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
        aggregate_by_property
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['AggregationPropertyMethodArgs']]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Query to filter the target entities
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="targetBlueprintIdentifier")
    def target_blueprint_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the blueprint to perform the aggregation on
        """
        return pulumi.get(self, "target_blueprint_identifier")

    @target_blueprint_identifier.setter
    def target_blueprint_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_blueprint_identifier", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the aggregation property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


class AggregationProperty(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregation_identifier: Optional[pulumi.Input[str]] = None,
                 blueprint_identifier: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[pulumi.InputType['AggregationPropertyMethodArgs']]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 target_blueprint_identifier: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AggregationProperty resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aggregation_identifier: The identifier of the aggregation property in the blueprint
        :param pulumi.Input[str] blueprint_identifier: The identifier of the blueprint the aggregation property will be added to
        :param pulumi.Input[str] description: The description of the aggregation property
        :param pulumi.Input[str] icon: The icon of the aggregation property
        :param pulumi.Input[pulumi.InputType['AggregationPropertyMethodArgs']] method: The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
               aggregate_by_property
        :param pulumi.Input[str] query: Query to filter the target entities
        :param pulumi.Input[str] target_blueprint_identifier: The identifier of the blueprint to perform the aggregation on
        :param pulumi.Input[str] title: The title of the aggregation property
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AggregationPropertyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AggregationProperty resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AggregationPropertyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AggregationPropertyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregation_identifier: Optional[pulumi.Input[str]] = None,
                 blueprint_identifier: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[pulumi.InputType['AggregationPropertyMethodArgs']]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 target_blueprint_identifier: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AggregationPropertyArgs.__new__(AggregationPropertyArgs)

            if aggregation_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'aggregation_identifier'")
            __props__.__dict__["aggregation_identifier"] = aggregation_identifier
            if blueprint_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'blueprint_identifier'")
            __props__.__dict__["blueprint_identifier"] = blueprint_identifier
            __props__.__dict__["description"] = description
            __props__.__dict__["icon"] = icon
            if method is None and not opts.urn:
                raise TypeError("Missing required property 'method'")
            __props__.__dict__["method"] = method
            __props__.__dict__["query"] = query
            if target_blueprint_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'target_blueprint_identifier'")
            __props__.__dict__["target_blueprint_identifier"] = target_blueprint_identifier
            __props__.__dict__["title"] = title
        super(AggregationProperty, __self__).__init__(
            'port:index/aggregationProperty:AggregationProperty',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aggregation_identifier: Optional[pulumi.Input[str]] = None,
            blueprint_identifier: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            icon: Optional[pulumi.Input[str]] = None,
            method: Optional[pulumi.Input[pulumi.InputType['AggregationPropertyMethodArgs']]] = None,
            query: Optional[pulumi.Input[str]] = None,
            target_blueprint_identifier: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None) -> 'AggregationProperty':
        """
        Get an existing AggregationProperty resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aggregation_identifier: The identifier of the aggregation property in the blueprint
        :param pulumi.Input[str] blueprint_identifier: The identifier of the blueprint the aggregation property will be added to
        :param pulumi.Input[str] description: The description of the aggregation property
        :param pulumi.Input[str] icon: The icon of the aggregation property
        :param pulumi.Input[pulumi.InputType['AggregationPropertyMethodArgs']] method: The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
               aggregate_by_property
        :param pulumi.Input[str] query: Query to filter the target entities
        :param pulumi.Input[str] target_blueprint_identifier: The identifier of the blueprint to perform the aggregation on
        :param pulumi.Input[str] title: The title of the aggregation property
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AggregationPropertyState.__new__(_AggregationPropertyState)

        __props__.__dict__["aggregation_identifier"] = aggregation_identifier
        __props__.__dict__["blueprint_identifier"] = blueprint_identifier
        __props__.__dict__["description"] = description
        __props__.__dict__["icon"] = icon
        __props__.__dict__["method"] = method
        __props__.__dict__["query"] = query
        __props__.__dict__["target_blueprint_identifier"] = target_blueprint_identifier
        __props__.__dict__["title"] = title
        return AggregationProperty(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aggregationIdentifier")
    def aggregation_identifier(self) -> pulumi.Output[str]:
        """
        The identifier of the aggregation property in the blueprint
        """
        return pulumi.get(self, "aggregation_identifier")

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> pulumi.Output[str]:
        """
        The identifier of the blueprint the aggregation property will be added to
        """
        return pulumi.get(self, "blueprint_identifier")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the aggregation property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> pulumi.Output[Optional[str]]:
        """
        The icon of the aggregation property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def method(self) -> pulumi.Output['outputs.AggregationPropertyMethod']:
        """
        The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
        aggregate_by_property
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def query(self) -> pulumi.Output[Optional[str]]:
        """
        Query to filter the target entities
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="targetBlueprintIdentifier")
    def target_blueprint_identifier(self) -> pulumi.Output[str]:
        """
        The identifier of the blueprint to perform the aggregation on
        """
        return pulumi.get(self, "target_blueprint_identifier")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[str]]:
        """
        The title of the aggregation property
        """
        return pulumi.get(self, "title")


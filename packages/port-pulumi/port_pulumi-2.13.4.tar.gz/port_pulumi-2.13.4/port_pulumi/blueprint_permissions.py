# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BlueprintPermissionsArgs', 'BlueprintPermissions']

@pulumi.input_type
class BlueprintPermissionsArgs:
    def __init__(__self__, *,
                 blueprint_identifier: pulumi.Input[str],
                 entities: pulumi.Input['BlueprintPermissionsEntitiesArgs']):
        """
        The set of arguments for constructing a BlueprintPermissions resource.
        :param pulumi.Input['BlueprintPermissionsEntitiesArgs'] entities: Entities permissions to read the blueprint
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)
        pulumi.set(__self__, "entities", entities)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint_identifier", value)

    @property
    @pulumi.getter
    def entities(self) -> pulumi.Input['BlueprintPermissionsEntitiesArgs']:
        """
        Entities permissions to read the blueprint
        """
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: pulumi.Input['BlueprintPermissionsEntitiesArgs']):
        pulumi.set(self, "entities", value)


@pulumi.input_type
class _BlueprintPermissionsState:
    def __init__(__self__, *,
                 blueprint_identifier: Optional[pulumi.Input[str]] = None,
                 entities: Optional[pulumi.Input['BlueprintPermissionsEntitiesArgs']] = None):
        """
        Input properties used for looking up and filtering BlueprintPermissions resources.
        :param pulumi.Input['BlueprintPermissionsEntitiesArgs'] entities: Entities permissions to read the blueprint
        """
        if blueprint_identifier is not None:
            pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)
        if entities is not None:
            pulumi.set(__self__, "entities", entities)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint_identifier", value)

    @property
    @pulumi.getter
    def entities(self) -> Optional[pulumi.Input['BlueprintPermissionsEntitiesArgs']]:
        """
        Entities permissions to read the blueprint
        """
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[pulumi.Input['BlueprintPermissionsEntitiesArgs']]):
        pulumi.set(self, "entities", value)


class BlueprintPermissions(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blueprint_identifier: Optional[pulumi.Input[str]] = None,
                 entities: Optional[pulumi.Input[Union['BlueprintPermissionsEntitiesArgs', 'BlueprintPermissionsEntitiesArgsDict']]] = None,
                 __props__=None):
        """
        Create a BlueprintPermissions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BlueprintPermissionsEntitiesArgs', 'BlueprintPermissionsEntitiesArgsDict']] entities: Entities permissions to read the blueprint
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BlueprintPermissionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BlueprintPermissions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BlueprintPermissionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BlueprintPermissionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blueprint_identifier: Optional[pulumi.Input[str]] = None,
                 entities: Optional[pulumi.Input[Union['BlueprintPermissionsEntitiesArgs', 'BlueprintPermissionsEntitiesArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BlueprintPermissionsArgs.__new__(BlueprintPermissionsArgs)

            if blueprint_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'blueprint_identifier'")
            __props__.__dict__["blueprint_identifier"] = blueprint_identifier
            if entities is None and not opts.urn:
                raise TypeError("Missing required property 'entities'")
            __props__.__dict__["entities"] = entities
        super(BlueprintPermissions, __self__).__init__(
            'port:index/blueprintPermissions:BlueprintPermissions',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            blueprint_identifier: Optional[pulumi.Input[str]] = None,
            entities: Optional[pulumi.Input[Union['BlueprintPermissionsEntitiesArgs', 'BlueprintPermissionsEntitiesArgsDict']]] = None) -> 'BlueprintPermissions':
        """
        Get an existing BlueprintPermissions resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BlueprintPermissionsEntitiesArgs', 'BlueprintPermissionsEntitiesArgsDict']] entities: Entities permissions to read the blueprint
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BlueprintPermissionsState.__new__(_BlueprintPermissionsState)

        __props__.__dict__["blueprint_identifier"] = blueprint_identifier
        __props__.__dict__["entities"] = entities
        return BlueprintPermissions(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> pulumi.Output[str]:
        return pulumi.get(self, "blueprint_identifier")

    @property
    @pulumi.getter
    def entities(self) -> pulumi.Output['outputs.BlueprintPermissionsEntities']:
        """
        Entities permissions to read the blueprint
        """
        return pulumi.get(self, "entities")


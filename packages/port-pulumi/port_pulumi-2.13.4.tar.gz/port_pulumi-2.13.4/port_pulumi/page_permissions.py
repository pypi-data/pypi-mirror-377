# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PagePermissionsArgs', 'PagePermissions']

@pulumi.input_type
class PagePermissionsArgs:
    def __init__(__self__, *,
                 page_identifier: pulumi.Input[str],
                 read: pulumi.Input['PagePermissionsReadArgs']):
        """
        The set of arguments for constructing a PagePermissions resource.
        :param pulumi.Input['PagePermissionsReadArgs'] read: The permission to read the page
        """
        pulumi.set(__self__, "page_identifier", page_identifier)
        pulumi.set(__self__, "read", read)

    @property
    @pulumi.getter(name="pageIdentifier")
    def page_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "page_identifier")

    @page_identifier.setter
    def page_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "page_identifier", value)

    @property
    @pulumi.getter
    def read(self) -> pulumi.Input['PagePermissionsReadArgs']:
        """
        The permission to read the page
        """
        return pulumi.get(self, "read")

    @read.setter
    def read(self, value: pulumi.Input['PagePermissionsReadArgs']):
        pulumi.set(self, "read", value)


@pulumi.input_type
class _PagePermissionsState:
    def __init__(__self__, *,
                 page_identifier: Optional[pulumi.Input[str]] = None,
                 read: Optional[pulumi.Input['PagePermissionsReadArgs']] = None):
        """
        Input properties used for looking up and filtering PagePermissions resources.
        :param pulumi.Input['PagePermissionsReadArgs'] read: The permission to read the page
        """
        if page_identifier is not None:
            pulumi.set(__self__, "page_identifier", page_identifier)
        if read is not None:
            pulumi.set(__self__, "read", read)

    @property
    @pulumi.getter(name="pageIdentifier")
    def page_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "page_identifier")

    @page_identifier.setter
    def page_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_identifier", value)

    @property
    @pulumi.getter
    def read(self) -> Optional[pulumi.Input['PagePermissionsReadArgs']]:
        """
        The permission to read the page
        """
        return pulumi.get(self, "read")

    @read.setter
    def read(self, value: Optional[pulumi.Input['PagePermissionsReadArgs']]):
        pulumi.set(self, "read", value)


class PagePermissions(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 page_identifier: Optional[pulumi.Input[str]] = None,
                 read: Optional[pulumi.Input[Union['PagePermissionsReadArgs', 'PagePermissionsReadArgsDict']]] = None,
                 __props__=None):
        """
        Create a PagePermissions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PagePermissionsReadArgs', 'PagePermissionsReadArgsDict']] read: The permission to read the page
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PagePermissionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PagePermissions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PagePermissionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PagePermissionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 page_identifier: Optional[pulumi.Input[str]] = None,
                 read: Optional[pulumi.Input[Union['PagePermissionsReadArgs', 'PagePermissionsReadArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PagePermissionsArgs.__new__(PagePermissionsArgs)

            if page_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'page_identifier'")
            __props__.__dict__["page_identifier"] = page_identifier
            if read is None and not opts.urn:
                raise TypeError("Missing required property 'read'")
            __props__.__dict__["read"] = read
        super(PagePermissions, __self__).__init__(
            'port:index/pagePermissions:PagePermissions',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            page_identifier: Optional[pulumi.Input[str]] = None,
            read: Optional[pulumi.Input[Union['PagePermissionsReadArgs', 'PagePermissionsReadArgsDict']]] = None) -> 'PagePermissions':
        """
        Get an existing PagePermissions resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PagePermissionsReadArgs', 'PagePermissionsReadArgsDict']] read: The permission to read the page
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PagePermissionsState.__new__(_PagePermissionsState)

        __props__.__dict__["page_identifier"] = page_identifier
        __props__.__dict__["read"] = read
        return PagePermissions(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="pageIdentifier")
    def page_identifier(self) -> pulumi.Output[str]:
        return pulumi.get(self, "page_identifier")

    @property
    @pulumi.getter
    def read(self) -> pulumi.Output['outputs.PagePermissionsRead']:
        """
        The permission to read the page
        """
        return pulumi.get(self, "read")


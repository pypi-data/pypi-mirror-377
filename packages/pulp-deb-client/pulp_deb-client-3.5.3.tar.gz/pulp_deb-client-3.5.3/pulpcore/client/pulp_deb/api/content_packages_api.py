# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated
from pulpcore.client.pulp_deb.models.async_operation_response import AsyncOperationResponse
from pulpcore.client.pulp_deb.models.deb_package_response import DebPackageResponse
from pulpcore.client.pulp_deb.models.paginateddeb_package_response_list import PaginateddebPackageResponseList
from pulpcore.client.pulp_deb.models.set_label import SetLabel
from pulpcore.client.pulp_deb.models.set_label_response import SetLabelResponse
from pulpcore.client.pulp_deb.models.unset_label import UnsetLabel
from pulpcore.client.pulp_deb.models.unset_label_response import UnsetLabelResponse

from pulpcore.client.pulp_deb.api_client import ApiClient, RequestSerialized
from pulpcore.client.pulp_deb.api_response import ApiResponse
from pulpcore.client.pulp_deb.rest import RESTResponseType


class ContentPackagesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create(
        self,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        repository: Annotated[Optional[StrictStr], Field(description="A URI of a repository the new content unit should be associated with.")] = None,
        pulp_labels: Annotated[Optional[Dict[str, Optional[StrictStr]]], Field(description="A dictionary of arbitrary key/value pairs used to describe a specific Content instance.")] = None,
        artifact: Annotated[Optional[StrictStr], Field(description="Artifact file representing the physical content")] = None,
        relative_path: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="Path where the artifact is located relative to distributions base_path")] = None,
        file: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="An uploaded file that may be turned into the content unit.")] = None,
        upload: Annotated[Optional[StrictStr], Field(description="An uncommitted upload that may be turned into the content unit.")] = None,
        file_url: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="A url that Pulp can download and turn into the content unit.")] = None,
        distribution: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="Name of the distribution.")] = None,
        component: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="Name of the component.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AsyncOperationResponse:
        """Create a package

        Trigger an asynchronous task to create content,optionally create new repository version.

        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param repository: A URI of a repository the new content unit should be associated with.
        :type repository: str
        :param pulp_labels: A dictionary of arbitrary key/value pairs used to describe a specific Content instance.
        :type pulp_labels: Dict[str, Optional[str]]
        :param artifact: Artifact file representing the physical content
        :type artifact: str
        :param relative_path: Path where the artifact is located relative to distributions base_path
        :type relative_path: str
        :param file: An uploaded file that may be turned into the content unit.
        :type file: bytearray
        :param upload: An uncommitted upload that may be turned into the content unit.
        :type upload: str
        :param file_url: A url that Pulp can download and turn into the content unit.
        :type file_url: str
        :param distribution: Name of the distribution.
        :type distribution: str
        :param component: Name of the component.
        :type component: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_serialize(
            x_task_diagnostics=x_task_diagnostics,
            repository=repository,
            pulp_labels=pulp_labels,
            artifact=artifact,
            relative_path=relative_path,
            file=file,
            upload=upload,
            file_url=file_url,
            distribution=distribution,
            component=component,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "AsyncOperationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_with_http_info(
        self,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        repository: Annotated[Optional[StrictStr], Field(description="A URI of a repository the new content unit should be associated with.")] = None,
        pulp_labels: Annotated[Optional[Dict[str, Optional[StrictStr]]], Field(description="A dictionary of arbitrary key/value pairs used to describe a specific Content instance.")] = None,
        artifact: Annotated[Optional[StrictStr], Field(description="Artifact file representing the physical content")] = None,
        relative_path: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="Path where the artifact is located relative to distributions base_path")] = None,
        file: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="An uploaded file that may be turned into the content unit.")] = None,
        upload: Annotated[Optional[StrictStr], Field(description="An uncommitted upload that may be turned into the content unit.")] = None,
        file_url: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="A url that Pulp can download and turn into the content unit.")] = None,
        distribution: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="Name of the distribution.")] = None,
        component: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="Name of the component.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AsyncOperationResponse]:
        """Create a package

        Trigger an asynchronous task to create content,optionally create new repository version.

        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param repository: A URI of a repository the new content unit should be associated with.
        :type repository: str
        :param pulp_labels: A dictionary of arbitrary key/value pairs used to describe a specific Content instance.
        :type pulp_labels: Dict[str, Optional[str]]
        :param artifact: Artifact file representing the physical content
        :type artifact: str
        :param relative_path: Path where the artifact is located relative to distributions base_path
        :type relative_path: str
        :param file: An uploaded file that may be turned into the content unit.
        :type file: bytearray
        :param upload: An uncommitted upload that may be turned into the content unit.
        :type upload: str
        :param file_url: A url that Pulp can download and turn into the content unit.
        :type file_url: str
        :param distribution: Name of the distribution.
        :type distribution: str
        :param component: Name of the component.
        :type component: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_serialize(
            x_task_diagnostics=x_task_diagnostics,
            repository=repository,
            pulp_labels=pulp_labels,
            artifact=artifact,
            relative_path=relative_path,
            file=file,
            upload=upload,
            file_url=file_url,
            distribution=distribution,
            component=component,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "AsyncOperationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_without_preload_content(
        self,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        repository: Annotated[Optional[StrictStr], Field(description="A URI of a repository the new content unit should be associated with.")] = None,
        pulp_labels: Annotated[Optional[Dict[str, Optional[StrictStr]]], Field(description="A dictionary of arbitrary key/value pairs used to describe a specific Content instance.")] = None,
        artifact: Annotated[Optional[StrictStr], Field(description="Artifact file representing the physical content")] = None,
        relative_path: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="Path where the artifact is located relative to distributions base_path")] = None,
        file: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="An uploaded file that may be turned into the content unit.")] = None,
        upload: Annotated[Optional[StrictStr], Field(description="An uncommitted upload that may be turned into the content unit.")] = None,
        file_url: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="A url that Pulp can download and turn into the content unit.")] = None,
        distribution: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="Name of the distribution.")] = None,
        component: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="Name of the component.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a package

        Trigger an asynchronous task to create content,optionally create new repository version.

        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param repository: A URI of a repository the new content unit should be associated with.
        :type repository: str
        :param pulp_labels: A dictionary of arbitrary key/value pairs used to describe a specific Content instance.
        :type pulp_labels: Dict[str, Optional[str]]
        :param artifact: Artifact file representing the physical content
        :type artifact: str
        :param relative_path: Path where the artifact is located relative to distributions base_path
        :type relative_path: str
        :param file: An uploaded file that may be turned into the content unit.
        :type file: bytearray
        :param upload: An uncommitted upload that may be turned into the content unit.
        :type upload: str
        :param file_url: A url that Pulp can download and turn into the content unit.
        :type file_url: str
        :param distribution: Name of the distribution.
        :type distribution: str
        :param component: Name of the component.
        :type component: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_serialize(
            x_task_diagnostics=x_task_diagnostics,
            repository=repository,
            pulp_labels=pulp_labels,
            artifact=artifact,
            relative_path=relative_path,
            file=file,
            upload=upload,
            file_url=file_url,
            distribution=distribution,
            component=component,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "AsyncOperationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_serialize(
        self,
        x_task_diagnostics,
        repository,
        pulp_labels,
        artifact,
        relative_path,
        file,
        upload,
        file_url,
        distribution,
        component,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'X-Task-Diagnostics': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_task_diagnostics is not None:
            _header_params['X-Task-Diagnostics'] = x_task_diagnostics
        # process the form parameters
        if repository is not None:
            _form_params.append(('repository', repository))
        if pulp_labels is not None:
            _form_params.append(('pulp_labels', pulp_labels))
        if artifact is not None:
            _form_params.append(('artifact', artifact))
        if relative_path is not None:
            _form_params.append(('relative_path', relative_path))
        if file is not None:
            _files['file'] = file
        if upload is not None:
            _form_params.append(('upload', upload))
        if file_url is not None:
            _form_params.append(('file_url', file_url))
        if distribution is not None:
            _form_params.append(('distribution', distribution))
        if component is not None:
            _form_params.append(('component', component))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'cookieAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/pulp/api/v3/content/deb/packages/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list(
        self,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        architecture: Annotated[Optional[StrictStr], Field(description="Filter results where architecture matches value")] = None,
        auto_built_package: Annotated[Optional[StrictStr], Field(description="Filter results where auto_built_package matches value")] = None,
        build_essential: Annotated[Optional[StrictBool], Field(description="Filter results where build_essential matches value  * `True` - yes * `False` - no")] = None,
        built_using: Annotated[Optional[StrictStr], Field(description="Filter results where built_using matches value")] = None,
        essential: Annotated[Optional[StrictBool], Field(description="Filter results where essential matches value  * `True` - yes * `False` - no")] = None,
        installed_size: Annotated[Optional[StrictInt], Field(description="Filter results where installed_size matches value")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        maintainer: Annotated[Optional[StrictStr], Field(description="Filter results where maintainer matches value")] = None,
        multi_arch: Annotated[Optional[StrictStr], Field(description="Filter results where multi_arch matches value  * `no` - no * `same` - same * `foreign` - foreign * `allowed` - allowed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        ordering: Annotated[Optional[List[StrictStr]], Field(description="Ordering  * `pulp_id` - Pulp id * `-pulp_id` - Pulp id (descending) * `pulp_created` - Pulp created * `-pulp_created` - Pulp created (descending) * `pulp_last_updated` - Pulp last updated * `-pulp_last_updated` - Pulp last updated (descending) * `pulp_type` - Pulp type * `-pulp_type` - Pulp type (descending) * `upstream_id` - Upstream id * `-upstream_id` - Upstream id (descending) * `pulp_labels` - Pulp labels * `-pulp_labels` - Pulp labels (descending) * `timestamp_of_interest` - Timestamp of interest * `-timestamp_of_interest` - Timestamp of interest (descending) * `package` - Package * `-package` - Package (descending) * `source` - Source * `-source` - Source (descending) * `version` - Version * `-version` - Version (descending) * `architecture` - Architecture * `-architecture` - Architecture (descending) * `section` - Section * `-section` - Section (descending) * `priority` - Priority * `-priority` - Priority (descending) * `origin` - Origin * `-origin` - Origin (descending) * `tag` - Tag * `-tag` - Tag (descending) * `bugs` - Bugs * `-bugs` - Bugs (descending) * `essential` - Essential * `-essential` - Essential (descending) * `build_essential` - Build essential * `-build_essential` - Build essential (descending) * `installed_size` - Installed size * `-installed_size` - Installed size (descending) * `maintainer` - Maintainer * `-maintainer` - Maintainer (descending) * `original_maintainer` - Original maintainer * `-original_maintainer` - Original maintainer (descending) * `description` - Description * `-description` - Description (descending) * `description_md5` - Description md5 * `-description_md5` - Description md5 (descending) * `homepage` - Homepage * `-homepage` - Homepage (descending) * `built_using` - Built using * `-built_using` - Built using (descending) * `auto_built_package` - Auto built package * `-auto_built_package` - Auto built package (descending) * `multi_arch` - Multi arch * `-multi_arch` - Multi arch (descending) * `breaks` - Breaks * `-breaks` - Breaks (descending) * `conflicts` - Conflicts * `-conflicts` - Conflicts (descending) * `depends` - Depends * `-depends` - Depends (descending) * `recommends` - Recommends * `-recommends` - Recommends (descending) * `suggests` - Suggests * `-suggests` - Suggests (descending) * `enhances` - Enhances * `-enhances` - Enhances (descending) * `pre_depends` - Pre depends * `-pre_depends` - Pre depends (descending) * `provides` - Provides * `-provides` - Provides (descending) * `replaces` - Replaces * `-replaces` - Replaces (descending) * `relative_path` - Relative path * `-relative_path` - Relative path (descending) * `sha256` - Sha256 * `-sha256` - Sha256 (descending) * `custom_fields` - Custom fields * `-custom_fields` - Custom fields (descending) * `pk` - Pk * `-pk` - Pk (descending)")] = None,
        origin: Annotated[Optional[StrictStr], Field(description="Filter results where origin matches value")] = None,
        original_maintainer: Annotated[Optional[StrictStr], Field(description="Filter results where original_maintainer matches value")] = None,
        orphaned_for: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.")] = None,
        package: Annotated[Optional[StrictStr], Field(description="Filter results where package matches value")] = None,
        package__contains: Annotated[Optional[StrictStr], Field(description="Filter results where package contains value")] = None,
        package__icontains: Annotated[Optional[StrictStr], Field(description="Filter results where package contains value")] = None,
        package__iexact: Annotated[Optional[StrictStr], Field(description="Filter results where package matches value")] = None,
        package__in: Annotated[Optional[List[StrictStr]], Field(description="Filter results where package is in a comma-separated list of values")] = None,
        package__iregex: Annotated[Optional[StrictStr], Field(description="Filter results where package matches regex value")] = None,
        package__istartswith: Annotated[Optional[StrictStr], Field(description="Filter results where package starts with value")] = None,
        package__regex: Annotated[Optional[StrictStr], Field(description="Filter results where package matches regex value")] = None,
        package__startswith: Annotated[Optional[StrictStr], Field(description="Filter results where package starts with value")] = None,
        priority: Annotated[Optional[StrictStr], Field(description="Filter results where priority matches value")] = None,
        prn__in: Annotated[Optional[List[StrictStr]], Field(description="Multiple values may be separated by commas.")] = None,
        pulp_href__in: Annotated[Optional[List[StrictStr]], Field(description="Multiple values may be separated by commas.")] = None,
        pulp_id__in: Annotated[Optional[List[StrictStr]], Field(description="Multiple values may be separated by commas.")] = None,
        pulp_label_select: Annotated[Optional[StrictStr], Field(description="Filter labels by search string")] = None,
        q: Annotated[Optional[StrictStr], Field(description="Filter results by using NOT, AND and OR operations on other filters")] = None,
        relative_path: Annotated[Optional[StrictStr], Field(description="Filter results where relative_path matches value")] = None,
        release: Annotated[Optional[StrictStr], Field(description="     Must be a comma-separated string: \"release_href,repository_or_repository_version_href\"     release_href: Filter results where Package in Release     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     ")] = None,
        release_component: Annotated[Optional[StrictStr], Field(description="     Must be a comma-separated string: \"release_component_href,repository_or_repository_version_href\"     release_component_href: Filter results where Package in ReleaseComponent     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     ")] = None,
        repository_version: Annotated[Optional[StrictStr], Field(description="Repository Version referenced by HREF/PRN")] = None,
        repository_version_added: Annotated[Optional[StrictStr], Field(description="Repository Version referenced by HREF/PRN")] = None,
        repository_version_removed: Annotated[Optional[StrictStr], Field(description="Repository Version referenced by HREF/PRN")] = None,
        section: Annotated[Optional[StrictStr], Field(description="Filter results where section matches value")] = None,
        sha256: Annotated[Optional[StrictStr], Field(description="Filter results where sha256 matches value")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter results where source matches value")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter results where tag matches value")] = None,
        version: Annotated[Optional[StrictStr], Field(description="Filter results where version matches value")] = None,
        fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to include in the response.")] = None,
        exclude_fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to exclude from the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginateddebPackageResponseList:
        """List packages

        A Package represents a '.deb' binary package.  Associated artifacts: Exactly one '.deb' package file.

        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param architecture: Filter results where architecture matches value
        :type architecture: str
        :param auto_built_package: Filter results where auto_built_package matches value
        :type auto_built_package: str
        :param build_essential: Filter results where build_essential matches value  * `True` - yes * `False` - no
        :type build_essential: bool
        :param built_using: Filter results where built_using matches value
        :type built_using: str
        :param essential: Filter results where essential matches value  * `True` - yes * `False` - no
        :type essential: bool
        :param installed_size: Filter results where installed_size matches value
        :type installed_size: int
        :param limit: Number of results to return per page.
        :type limit: int
        :param maintainer: Filter results where maintainer matches value
        :type maintainer: str
        :param multi_arch: Filter results where multi_arch matches value  * `no` - no * `same` - same * `foreign` - foreign * `allowed` - allowed
        :type multi_arch: str
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param ordering: Ordering  * `pulp_id` - Pulp id * `-pulp_id` - Pulp id (descending) * `pulp_created` - Pulp created * `-pulp_created` - Pulp created (descending) * `pulp_last_updated` - Pulp last updated * `-pulp_last_updated` - Pulp last updated (descending) * `pulp_type` - Pulp type * `-pulp_type` - Pulp type (descending) * `upstream_id` - Upstream id * `-upstream_id` - Upstream id (descending) * `pulp_labels` - Pulp labels * `-pulp_labels` - Pulp labels (descending) * `timestamp_of_interest` - Timestamp of interest * `-timestamp_of_interest` - Timestamp of interest (descending) * `package` - Package * `-package` - Package (descending) * `source` - Source * `-source` - Source (descending) * `version` - Version * `-version` - Version (descending) * `architecture` - Architecture * `-architecture` - Architecture (descending) * `section` - Section * `-section` - Section (descending) * `priority` - Priority * `-priority` - Priority (descending) * `origin` - Origin * `-origin` - Origin (descending) * `tag` - Tag * `-tag` - Tag (descending) * `bugs` - Bugs * `-bugs` - Bugs (descending) * `essential` - Essential * `-essential` - Essential (descending) * `build_essential` - Build essential * `-build_essential` - Build essential (descending) * `installed_size` - Installed size * `-installed_size` - Installed size (descending) * `maintainer` - Maintainer * `-maintainer` - Maintainer (descending) * `original_maintainer` - Original maintainer * `-original_maintainer` - Original maintainer (descending) * `description` - Description * `-description` - Description (descending) * `description_md5` - Description md5 * `-description_md5` - Description md5 (descending) * `homepage` - Homepage * `-homepage` - Homepage (descending) * `built_using` - Built using * `-built_using` - Built using (descending) * `auto_built_package` - Auto built package * `-auto_built_package` - Auto built package (descending) * `multi_arch` - Multi arch * `-multi_arch` - Multi arch (descending) * `breaks` - Breaks * `-breaks` - Breaks (descending) * `conflicts` - Conflicts * `-conflicts` - Conflicts (descending) * `depends` - Depends * `-depends` - Depends (descending) * `recommends` - Recommends * `-recommends` - Recommends (descending) * `suggests` - Suggests * `-suggests` - Suggests (descending) * `enhances` - Enhances * `-enhances` - Enhances (descending) * `pre_depends` - Pre depends * `-pre_depends` - Pre depends (descending) * `provides` - Provides * `-provides` - Provides (descending) * `replaces` - Replaces * `-replaces` - Replaces (descending) * `relative_path` - Relative path * `-relative_path` - Relative path (descending) * `sha256` - Sha256 * `-sha256` - Sha256 (descending) * `custom_fields` - Custom fields * `-custom_fields` - Custom fields (descending) * `pk` - Pk * `-pk` - Pk (descending)
        :type ordering: List[str]
        :param origin: Filter results where origin matches value
        :type origin: str
        :param original_maintainer: Filter results where original_maintainer matches value
        :type original_maintainer: str
        :param orphaned_for: Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
        :type orphaned_for: float
        :param package: Filter results where package matches value
        :type package: str
        :param package__contains: Filter results where package contains value
        :type package__contains: str
        :param package__icontains: Filter results where package contains value
        :type package__icontains: str
        :param package__iexact: Filter results where package matches value
        :type package__iexact: str
        :param package__in: Filter results where package is in a comma-separated list of values
        :type package__in: List[str]
        :param package__iregex: Filter results where package matches regex value
        :type package__iregex: str
        :param package__istartswith: Filter results where package starts with value
        :type package__istartswith: str
        :param package__regex: Filter results where package matches regex value
        :type package__regex: str
        :param package__startswith: Filter results where package starts with value
        :type package__startswith: str
        :param priority: Filter results where priority matches value
        :type priority: str
        :param prn__in: Multiple values may be separated by commas.
        :type prn__in: List[str]
        :param pulp_href__in: Multiple values may be separated by commas.
        :type pulp_href__in: List[str]
        :param pulp_id__in: Multiple values may be separated by commas.
        :type pulp_id__in: List[str]
        :param pulp_label_select: Filter labels by search string
        :type pulp_label_select: str
        :param q: Filter results by using NOT, AND and OR operations on other filters
        :type q: str
        :param relative_path: Filter results where relative_path matches value
        :type relative_path: str
        :param release:      Must be a comma-separated string: \"release_href,repository_or_repository_version_href\"     release_href: Filter results where Package in Release     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     
        :type release: str
        :param release_component:      Must be a comma-separated string: \"release_component_href,repository_or_repository_version_href\"     release_component_href: Filter results where Package in ReleaseComponent     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     
        :type release_component: str
        :param repository_version: Repository Version referenced by HREF/PRN
        :type repository_version: str
        :param repository_version_added: Repository Version referenced by HREF/PRN
        :type repository_version_added: str
        :param repository_version_removed: Repository Version referenced by HREF/PRN
        :type repository_version_removed: str
        :param section: Filter results where section matches value
        :type section: str
        :param sha256: Filter results where sha256 matches value
        :type sha256: str
        :param source: Filter results where source matches value
        :type source: str
        :param tag: Filter results where tag matches value
        :type tag: str
        :param version: Filter results where version matches value
        :type version: str
        :param fields: A list of fields to include in the response.
        :type fields: List[str]
        :param exclude_fields: A list of fields to exclude from the response.
        :type exclude_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_serialize(
            x_task_diagnostics=x_task_diagnostics,
            architecture=architecture,
            auto_built_package=auto_built_package,
            build_essential=build_essential,
            built_using=built_using,
            essential=essential,
            installed_size=installed_size,
            limit=limit,
            maintainer=maintainer,
            multi_arch=multi_arch,
            offset=offset,
            ordering=ordering,
            origin=origin,
            original_maintainer=original_maintainer,
            orphaned_for=orphaned_for,
            package=package,
            package__contains=package__contains,
            package__icontains=package__icontains,
            package__iexact=package__iexact,
            package__in=package__in,
            package__iregex=package__iregex,
            package__istartswith=package__istartswith,
            package__regex=package__regex,
            package__startswith=package__startswith,
            priority=priority,
            prn__in=prn__in,
            pulp_href__in=pulp_href__in,
            pulp_id__in=pulp_id__in,
            pulp_label_select=pulp_label_select,
            q=q,
            relative_path=relative_path,
            release=release,
            release_component=release_component,
            repository_version=repository_version,
            repository_version_added=repository_version_added,
            repository_version_removed=repository_version_removed,
            section=section,
            sha256=sha256,
            source=source,
            tag=tag,
            version=version,
            fields=fields,
            exclude_fields=exclude_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginateddebPackageResponseList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_with_http_info(
        self,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        architecture: Annotated[Optional[StrictStr], Field(description="Filter results where architecture matches value")] = None,
        auto_built_package: Annotated[Optional[StrictStr], Field(description="Filter results where auto_built_package matches value")] = None,
        build_essential: Annotated[Optional[StrictBool], Field(description="Filter results where build_essential matches value  * `True` - yes * `False` - no")] = None,
        built_using: Annotated[Optional[StrictStr], Field(description="Filter results where built_using matches value")] = None,
        essential: Annotated[Optional[StrictBool], Field(description="Filter results where essential matches value  * `True` - yes * `False` - no")] = None,
        installed_size: Annotated[Optional[StrictInt], Field(description="Filter results where installed_size matches value")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        maintainer: Annotated[Optional[StrictStr], Field(description="Filter results where maintainer matches value")] = None,
        multi_arch: Annotated[Optional[StrictStr], Field(description="Filter results where multi_arch matches value  * `no` - no * `same` - same * `foreign` - foreign * `allowed` - allowed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        ordering: Annotated[Optional[List[StrictStr]], Field(description="Ordering  * `pulp_id` - Pulp id * `-pulp_id` - Pulp id (descending) * `pulp_created` - Pulp created * `-pulp_created` - Pulp created (descending) * `pulp_last_updated` - Pulp last updated * `-pulp_last_updated` - Pulp last updated (descending) * `pulp_type` - Pulp type * `-pulp_type` - Pulp type (descending) * `upstream_id` - Upstream id * `-upstream_id` - Upstream id (descending) * `pulp_labels` - Pulp labels * `-pulp_labels` - Pulp labels (descending) * `timestamp_of_interest` - Timestamp of interest * `-timestamp_of_interest` - Timestamp of interest (descending) * `package` - Package * `-package` - Package (descending) * `source` - Source * `-source` - Source (descending) * `version` - Version * `-version` - Version (descending) * `architecture` - Architecture * `-architecture` - Architecture (descending) * `section` - Section * `-section` - Section (descending) * `priority` - Priority * `-priority` - Priority (descending) * `origin` - Origin * `-origin` - Origin (descending) * `tag` - Tag * `-tag` - Tag (descending) * `bugs` - Bugs * `-bugs` - Bugs (descending) * `essential` - Essential * `-essential` - Essential (descending) * `build_essential` - Build essential * `-build_essential` - Build essential (descending) * `installed_size` - Installed size * `-installed_size` - Installed size (descending) * `maintainer` - Maintainer * `-maintainer` - Maintainer (descending) * `original_maintainer` - Original maintainer * `-original_maintainer` - Original maintainer (descending) * `description` - Description * `-description` - Description (descending) * `description_md5` - Description md5 * `-description_md5` - Description md5 (descending) * `homepage` - Homepage * `-homepage` - Homepage (descending) * `built_using` - Built using * `-built_using` - Built using (descending) * `auto_built_package` - Auto built package * `-auto_built_package` - Auto built package (descending) * `multi_arch` - Multi arch * `-multi_arch` - Multi arch (descending) * `breaks` - Breaks * `-breaks` - Breaks (descending) * `conflicts` - Conflicts * `-conflicts` - Conflicts (descending) * `depends` - Depends * `-depends` - Depends (descending) * `recommends` - Recommends * `-recommends` - Recommends (descending) * `suggests` - Suggests * `-suggests` - Suggests (descending) * `enhances` - Enhances * `-enhances` - Enhances (descending) * `pre_depends` - Pre depends * `-pre_depends` - Pre depends (descending) * `provides` - Provides * `-provides` - Provides (descending) * `replaces` - Replaces * `-replaces` - Replaces (descending) * `relative_path` - Relative path * `-relative_path` - Relative path (descending) * `sha256` - Sha256 * `-sha256` - Sha256 (descending) * `custom_fields` - Custom fields * `-custom_fields` - Custom fields (descending) * `pk` - Pk * `-pk` - Pk (descending)")] = None,
        origin: Annotated[Optional[StrictStr], Field(description="Filter results where origin matches value")] = None,
        original_maintainer: Annotated[Optional[StrictStr], Field(description="Filter results where original_maintainer matches value")] = None,
        orphaned_for: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.")] = None,
        package: Annotated[Optional[StrictStr], Field(description="Filter results where package matches value")] = None,
        package__contains: Annotated[Optional[StrictStr], Field(description="Filter results where package contains value")] = None,
        package__icontains: Annotated[Optional[StrictStr], Field(description="Filter results where package contains value")] = None,
        package__iexact: Annotated[Optional[StrictStr], Field(description="Filter results where package matches value")] = None,
        package__in: Annotated[Optional[List[StrictStr]], Field(description="Filter results where package is in a comma-separated list of values")] = None,
        package__iregex: Annotated[Optional[StrictStr], Field(description="Filter results where package matches regex value")] = None,
        package__istartswith: Annotated[Optional[StrictStr], Field(description="Filter results where package starts with value")] = None,
        package__regex: Annotated[Optional[StrictStr], Field(description="Filter results where package matches regex value")] = None,
        package__startswith: Annotated[Optional[StrictStr], Field(description="Filter results where package starts with value")] = None,
        priority: Annotated[Optional[StrictStr], Field(description="Filter results where priority matches value")] = None,
        prn__in: Annotated[Optional[List[StrictStr]], Field(description="Multiple values may be separated by commas.")] = None,
        pulp_href__in: Annotated[Optional[List[StrictStr]], Field(description="Multiple values may be separated by commas.")] = None,
        pulp_id__in: Annotated[Optional[List[StrictStr]], Field(description="Multiple values may be separated by commas.")] = None,
        pulp_label_select: Annotated[Optional[StrictStr], Field(description="Filter labels by search string")] = None,
        q: Annotated[Optional[StrictStr], Field(description="Filter results by using NOT, AND and OR operations on other filters")] = None,
        relative_path: Annotated[Optional[StrictStr], Field(description="Filter results where relative_path matches value")] = None,
        release: Annotated[Optional[StrictStr], Field(description="     Must be a comma-separated string: \"release_href,repository_or_repository_version_href\"     release_href: Filter results where Package in Release     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     ")] = None,
        release_component: Annotated[Optional[StrictStr], Field(description="     Must be a comma-separated string: \"release_component_href,repository_or_repository_version_href\"     release_component_href: Filter results where Package in ReleaseComponent     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     ")] = None,
        repository_version: Annotated[Optional[StrictStr], Field(description="Repository Version referenced by HREF/PRN")] = None,
        repository_version_added: Annotated[Optional[StrictStr], Field(description="Repository Version referenced by HREF/PRN")] = None,
        repository_version_removed: Annotated[Optional[StrictStr], Field(description="Repository Version referenced by HREF/PRN")] = None,
        section: Annotated[Optional[StrictStr], Field(description="Filter results where section matches value")] = None,
        sha256: Annotated[Optional[StrictStr], Field(description="Filter results where sha256 matches value")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter results where source matches value")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter results where tag matches value")] = None,
        version: Annotated[Optional[StrictStr], Field(description="Filter results where version matches value")] = None,
        fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to include in the response.")] = None,
        exclude_fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to exclude from the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginateddebPackageResponseList]:
        """List packages

        A Package represents a '.deb' binary package.  Associated artifacts: Exactly one '.deb' package file.

        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param architecture: Filter results where architecture matches value
        :type architecture: str
        :param auto_built_package: Filter results where auto_built_package matches value
        :type auto_built_package: str
        :param build_essential: Filter results where build_essential matches value  * `True` - yes * `False` - no
        :type build_essential: bool
        :param built_using: Filter results where built_using matches value
        :type built_using: str
        :param essential: Filter results where essential matches value  * `True` - yes * `False` - no
        :type essential: bool
        :param installed_size: Filter results where installed_size matches value
        :type installed_size: int
        :param limit: Number of results to return per page.
        :type limit: int
        :param maintainer: Filter results where maintainer matches value
        :type maintainer: str
        :param multi_arch: Filter results where multi_arch matches value  * `no` - no * `same` - same * `foreign` - foreign * `allowed` - allowed
        :type multi_arch: str
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param ordering: Ordering  * `pulp_id` - Pulp id * `-pulp_id` - Pulp id (descending) * `pulp_created` - Pulp created * `-pulp_created` - Pulp created (descending) * `pulp_last_updated` - Pulp last updated * `-pulp_last_updated` - Pulp last updated (descending) * `pulp_type` - Pulp type * `-pulp_type` - Pulp type (descending) * `upstream_id` - Upstream id * `-upstream_id` - Upstream id (descending) * `pulp_labels` - Pulp labels * `-pulp_labels` - Pulp labels (descending) * `timestamp_of_interest` - Timestamp of interest * `-timestamp_of_interest` - Timestamp of interest (descending) * `package` - Package * `-package` - Package (descending) * `source` - Source * `-source` - Source (descending) * `version` - Version * `-version` - Version (descending) * `architecture` - Architecture * `-architecture` - Architecture (descending) * `section` - Section * `-section` - Section (descending) * `priority` - Priority * `-priority` - Priority (descending) * `origin` - Origin * `-origin` - Origin (descending) * `tag` - Tag * `-tag` - Tag (descending) * `bugs` - Bugs * `-bugs` - Bugs (descending) * `essential` - Essential * `-essential` - Essential (descending) * `build_essential` - Build essential * `-build_essential` - Build essential (descending) * `installed_size` - Installed size * `-installed_size` - Installed size (descending) * `maintainer` - Maintainer * `-maintainer` - Maintainer (descending) * `original_maintainer` - Original maintainer * `-original_maintainer` - Original maintainer (descending) * `description` - Description * `-description` - Description (descending) * `description_md5` - Description md5 * `-description_md5` - Description md5 (descending) * `homepage` - Homepage * `-homepage` - Homepage (descending) * `built_using` - Built using * `-built_using` - Built using (descending) * `auto_built_package` - Auto built package * `-auto_built_package` - Auto built package (descending) * `multi_arch` - Multi arch * `-multi_arch` - Multi arch (descending) * `breaks` - Breaks * `-breaks` - Breaks (descending) * `conflicts` - Conflicts * `-conflicts` - Conflicts (descending) * `depends` - Depends * `-depends` - Depends (descending) * `recommends` - Recommends * `-recommends` - Recommends (descending) * `suggests` - Suggests * `-suggests` - Suggests (descending) * `enhances` - Enhances * `-enhances` - Enhances (descending) * `pre_depends` - Pre depends * `-pre_depends` - Pre depends (descending) * `provides` - Provides * `-provides` - Provides (descending) * `replaces` - Replaces * `-replaces` - Replaces (descending) * `relative_path` - Relative path * `-relative_path` - Relative path (descending) * `sha256` - Sha256 * `-sha256` - Sha256 (descending) * `custom_fields` - Custom fields * `-custom_fields` - Custom fields (descending) * `pk` - Pk * `-pk` - Pk (descending)
        :type ordering: List[str]
        :param origin: Filter results where origin matches value
        :type origin: str
        :param original_maintainer: Filter results where original_maintainer matches value
        :type original_maintainer: str
        :param orphaned_for: Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
        :type orphaned_for: float
        :param package: Filter results where package matches value
        :type package: str
        :param package__contains: Filter results where package contains value
        :type package__contains: str
        :param package__icontains: Filter results where package contains value
        :type package__icontains: str
        :param package__iexact: Filter results where package matches value
        :type package__iexact: str
        :param package__in: Filter results where package is in a comma-separated list of values
        :type package__in: List[str]
        :param package__iregex: Filter results where package matches regex value
        :type package__iregex: str
        :param package__istartswith: Filter results where package starts with value
        :type package__istartswith: str
        :param package__regex: Filter results where package matches regex value
        :type package__regex: str
        :param package__startswith: Filter results where package starts with value
        :type package__startswith: str
        :param priority: Filter results where priority matches value
        :type priority: str
        :param prn__in: Multiple values may be separated by commas.
        :type prn__in: List[str]
        :param pulp_href__in: Multiple values may be separated by commas.
        :type pulp_href__in: List[str]
        :param pulp_id__in: Multiple values may be separated by commas.
        :type pulp_id__in: List[str]
        :param pulp_label_select: Filter labels by search string
        :type pulp_label_select: str
        :param q: Filter results by using NOT, AND and OR operations on other filters
        :type q: str
        :param relative_path: Filter results where relative_path matches value
        :type relative_path: str
        :param release:      Must be a comma-separated string: \"release_href,repository_or_repository_version_href\"     release_href: Filter results where Package in Release     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     
        :type release: str
        :param release_component:      Must be a comma-separated string: \"release_component_href,repository_or_repository_version_href\"     release_component_href: Filter results where Package in ReleaseComponent     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     
        :type release_component: str
        :param repository_version: Repository Version referenced by HREF/PRN
        :type repository_version: str
        :param repository_version_added: Repository Version referenced by HREF/PRN
        :type repository_version_added: str
        :param repository_version_removed: Repository Version referenced by HREF/PRN
        :type repository_version_removed: str
        :param section: Filter results where section matches value
        :type section: str
        :param sha256: Filter results where sha256 matches value
        :type sha256: str
        :param source: Filter results where source matches value
        :type source: str
        :param tag: Filter results where tag matches value
        :type tag: str
        :param version: Filter results where version matches value
        :type version: str
        :param fields: A list of fields to include in the response.
        :type fields: List[str]
        :param exclude_fields: A list of fields to exclude from the response.
        :type exclude_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_serialize(
            x_task_diagnostics=x_task_diagnostics,
            architecture=architecture,
            auto_built_package=auto_built_package,
            build_essential=build_essential,
            built_using=built_using,
            essential=essential,
            installed_size=installed_size,
            limit=limit,
            maintainer=maintainer,
            multi_arch=multi_arch,
            offset=offset,
            ordering=ordering,
            origin=origin,
            original_maintainer=original_maintainer,
            orphaned_for=orphaned_for,
            package=package,
            package__contains=package__contains,
            package__icontains=package__icontains,
            package__iexact=package__iexact,
            package__in=package__in,
            package__iregex=package__iregex,
            package__istartswith=package__istartswith,
            package__regex=package__regex,
            package__startswith=package__startswith,
            priority=priority,
            prn__in=prn__in,
            pulp_href__in=pulp_href__in,
            pulp_id__in=pulp_id__in,
            pulp_label_select=pulp_label_select,
            q=q,
            relative_path=relative_path,
            release=release,
            release_component=release_component,
            repository_version=repository_version,
            repository_version_added=repository_version_added,
            repository_version_removed=repository_version_removed,
            section=section,
            sha256=sha256,
            source=source,
            tag=tag,
            version=version,
            fields=fields,
            exclude_fields=exclude_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginateddebPackageResponseList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_without_preload_content(
        self,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        architecture: Annotated[Optional[StrictStr], Field(description="Filter results where architecture matches value")] = None,
        auto_built_package: Annotated[Optional[StrictStr], Field(description="Filter results where auto_built_package matches value")] = None,
        build_essential: Annotated[Optional[StrictBool], Field(description="Filter results where build_essential matches value  * `True` - yes * `False` - no")] = None,
        built_using: Annotated[Optional[StrictStr], Field(description="Filter results where built_using matches value")] = None,
        essential: Annotated[Optional[StrictBool], Field(description="Filter results where essential matches value  * `True` - yes * `False` - no")] = None,
        installed_size: Annotated[Optional[StrictInt], Field(description="Filter results where installed_size matches value")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        maintainer: Annotated[Optional[StrictStr], Field(description="Filter results where maintainer matches value")] = None,
        multi_arch: Annotated[Optional[StrictStr], Field(description="Filter results where multi_arch matches value  * `no` - no * `same` - same * `foreign` - foreign * `allowed` - allowed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        ordering: Annotated[Optional[List[StrictStr]], Field(description="Ordering  * `pulp_id` - Pulp id * `-pulp_id` - Pulp id (descending) * `pulp_created` - Pulp created * `-pulp_created` - Pulp created (descending) * `pulp_last_updated` - Pulp last updated * `-pulp_last_updated` - Pulp last updated (descending) * `pulp_type` - Pulp type * `-pulp_type` - Pulp type (descending) * `upstream_id` - Upstream id * `-upstream_id` - Upstream id (descending) * `pulp_labels` - Pulp labels * `-pulp_labels` - Pulp labels (descending) * `timestamp_of_interest` - Timestamp of interest * `-timestamp_of_interest` - Timestamp of interest (descending) * `package` - Package * `-package` - Package (descending) * `source` - Source * `-source` - Source (descending) * `version` - Version * `-version` - Version (descending) * `architecture` - Architecture * `-architecture` - Architecture (descending) * `section` - Section * `-section` - Section (descending) * `priority` - Priority * `-priority` - Priority (descending) * `origin` - Origin * `-origin` - Origin (descending) * `tag` - Tag * `-tag` - Tag (descending) * `bugs` - Bugs * `-bugs` - Bugs (descending) * `essential` - Essential * `-essential` - Essential (descending) * `build_essential` - Build essential * `-build_essential` - Build essential (descending) * `installed_size` - Installed size * `-installed_size` - Installed size (descending) * `maintainer` - Maintainer * `-maintainer` - Maintainer (descending) * `original_maintainer` - Original maintainer * `-original_maintainer` - Original maintainer (descending) * `description` - Description * `-description` - Description (descending) * `description_md5` - Description md5 * `-description_md5` - Description md5 (descending) * `homepage` - Homepage * `-homepage` - Homepage (descending) * `built_using` - Built using * `-built_using` - Built using (descending) * `auto_built_package` - Auto built package * `-auto_built_package` - Auto built package (descending) * `multi_arch` - Multi arch * `-multi_arch` - Multi arch (descending) * `breaks` - Breaks * `-breaks` - Breaks (descending) * `conflicts` - Conflicts * `-conflicts` - Conflicts (descending) * `depends` - Depends * `-depends` - Depends (descending) * `recommends` - Recommends * `-recommends` - Recommends (descending) * `suggests` - Suggests * `-suggests` - Suggests (descending) * `enhances` - Enhances * `-enhances` - Enhances (descending) * `pre_depends` - Pre depends * `-pre_depends` - Pre depends (descending) * `provides` - Provides * `-provides` - Provides (descending) * `replaces` - Replaces * `-replaces` - Replaces (descending) * `relative_path` - Relative path * `-relative_path` - Relative path (descending) * `sha256` - Sha256 * `-sha256` - Sha256 (descending) * `custom_fields` - Custom fields * `-custom_fields` - Custom fields (descending) * `pk` - Pk * `-pk` - Pk (descending)")] = None,
        origin: Annotated[Optional[StrictStr], Field(description="Filter results where origin matches value")] = None,
        original_maintainer: Annotated[Optional[StrictStr], Field(description="Filter results where original_maintainer matches value")] = None,
        orphaned_for: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.")] = None,
        package: Annotated[Optional[StrictStr], Field(description="Filter results where package matches value")] = None,
        package__contains: Annotated[Optional[StrictStr], Field(description="Filter results where package contains value")] = None,
        package__icontains: Annotated[Optional[StrictStr], Field(description="Filter results where package contains value")] = None,
        package__iexact: Annotated[Optional[StrictStr], Field(description="Filter results where package matches value")] = None,
        package__in: Annotated[Optional[List[StrictStr]], Field(description="Filter results where package is in a comma-separated list of values")] = None,
        package__iregex: Annotated[Optional[StrictStr], Field(description="Filter results where package matches regex value")] = None,
        package__istartswith: Annotated[Optional[StrictStr], Field(description="Filter results where package starts with value")] = None,
        package__regex: Annotated[Optional[StrictStr], Field(description="Filter results where package matches regex value")] = None,
        package__startswith: Annotated[Optional[StrictStr], Field(description="Filter results where package starts with value")] = None,
        priority: Annotated[Optional[StrictStr], Field(description="Filter results where priority matches value")] = None,
        prn__in: Annotated[Optional[List[StrictStr]], Field(description="Multiple values may be separated by commas.")] = None,
        pulp_href__in: Annotated[Optional[List[StrictStr]], Field(description="Multiple values may be separated by commas.")] = None,
        pulp_id__in: Annotated[Optional[List[StrictStr]], Field(description="Multiple values may be separated by commas.")] = None,
        pulp_label_select: Annotated[Optional[StrictStr], Field(description="Filter labels by search string")] = None,
        q: Annotated[Optional[StrictStr], Field(description="Filter results by using NOT, AND and OR operations on other filters")] = None,
        relative_path: Annotated[Optional[StrictStr], Field(description="Filter results where relative_path matches value")] = None,
        release: Annotated[Optional[StrictStr], Field(description="     Must be a comma-separated string: \"release_href,repository_or_repository_version_href\"     release_href: Filter results where Package in Release     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     ")] = None,
        release_component: Annotated[Optional[StrictStr], Field(description="     Must be a comma-separated string: \"release_component_href,repository_or_repository_version_href\"     release_component_href: Filter results where Package in ReleaseComponent     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     ")] = None,
        repository_version: Annotated[Optional[StrictStr], Field(description="Repository Version referenced by HREF/PRN")] = None,
        repository_version_added: Annotated[Optional[StrictStr], Field(description="Repository Version referenced by HREF/PRN")] = None,
        repository_version_removed: Annotated[Optional[StrictStr], Field(description="Repository Version referenced by HREF/PRN")] = None,
        section: Annotated[Optional[StrictStr], Field(description="Filter results where section matches value")] = None,
        sha256: Annotated[Optional[StrictStr], Field(description="Filter results where sha256 matches value")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter results where source matches value")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Filter results where tag matches value")] = None,
        version: Annotated[Optional[StrictStr], Field(description="Filter results where version matches value")] = None,
        fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to include in the response.")] = None,
        exclude_fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to exclude from the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List packages

        A Package represents a '.deb' binary package.  Associated artifacts: Exactly one '.deb' package file.

        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param architecture: Filter results where architecture matches value
        :type architecture: str
        :param auto_built_package: Filter results where auto_built_package matches value
        :type auto_built_package: str
        :param build_essential: Filter results where build_essential matches value  * `True` - yes * `False` - no
        :type build_essential: bool
        :param built_using: Filter results where built_using matches value
        :type built_using: str
        :param essential: Filter results where essential matches value  * `True` - yes * `False` - no
        :type essential: bool
        :param installed_size: Filter results where installed_size matches value
        :type installed_size: int
        :param limit: Number of results to return per page.
        :type limit: int
        :param maintainer: Filter results where maintainer matches value
        :type maintainer: str
        :param multi_arch: Filter results where multi_arch matches value  * `no` - no * `same` - same * `foreign` - foreign * `allowed` - allowed
        :type multi_arch: str
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param ordering: Ordering  * `pulp_id` - Pulp id * `-pulp_id` - Pulp id (descending) * `pulp_created` - Pulp created * `-pulp_created` - Pulp created (descending) * `pulp_last_updated` - Pulp last updated * `-pulp_last_updated` - Pulp last updated (descending) * `pulp_type` - Pulp type * `-pulp_type` - Pulp type (descending) * `upstream_id` - Upstream id * `-upstream_id` - Upstream id (descending) * `pulp_labels` - Pulp labels * `-pulp_labels` - Pulp labels (descending) * `timestamp_of_interest` - Timestamp of interest * `-timestamp_of_interest` - Timestamp of interest (descending) * `package` - Package * `-package` - Package (descending) * `source` - Source * `-source` - Source (descending) * `version` - Version * `-version` - Version (descending) * `architecture` - Architecture * `-architecture` - Architecture (descending) * `section` - Section * `-section` - Section (descending) * `priority` - Priority * `-priority` - Priority (descending) * `origin` - Origin * `-origin` - Origin (descending) * `tag` - Tag * `-tag` - Tag (descending) * `bugs` - Bugs * `-bugs` - Bugs (descending) * `essential` - Essential * `-essential` - Essential (descending) * `build_essential` - Build essential * `-build_essential` - Build essential (descending) * `installed_size` - Installed size * `-installed_size` - Installed size (descending) * `maintainer` - Maintainer * `-maintainer` - Maintainer (descending) * `original_maintainer` - Original maintainer * `-original_maintainer` - Original maintainer (descending) * `description` - Description * `-description` - Description (descending) * `description_md5` - Description md5 * `-description_md5` - Description md5 (descending) * `homepage` - Homepage * `-homepage` - Homepage (descending) * `built_using` - Built using * `-built_using` - Built using (descending) * `auto_built_package` - Auto built package * `-auto_built_package` - Auto built package (descending) * `multi_arch` - Multi arch * `-multi_arch` - Multi arch (descending) * `breaks` - Breaks * `-breaks` - Breaks (descending) * `conflicts` - Conflicts * `-conflicts` - Conflicts (descending) * `depends` - Depends * `-depends` - Depends (descending) * `recommends` - Recommends * `-recommends` - Recommends (descending) * `suggests` - Suggests * `-suggests` - Suggests (descending) * `enhances` - Enhances * `-enhances` - Enhances (descending) * `pre_depends` - Pre depends * `-pre_depends` - Pre depends (descending) * `provides` - Provides * `-provides` - Provides (descending) * `replaces` - Replaces * `-replaces` - Replaces (descending) * `relative_path` - Relative path * `-relative_path` - Relative path (descending) * `sha256` - Sha256 * `-sha256` - Sha256 (descending) * `custom_fields` - Custom fields * `-custom_fields` - Custom fields (descending) * `pk` - Pk * `-pk` - Pk (descending)
        :type ordering: List[str]
        :param origin: Filter results where origin matches value
        :type origin: str
        :param original_maintainer: Filter results where original_maintainer matches value
        :type original_maintainer: str
        :param orphaned_for: Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
        :type orphaned_for: float
        :param package: Filter results where package matches value
        :type package: str
        :param package__contains: Filter results where package contains value
        :type package__contains: str
        :param package__icontains: Filter results where package contains value
        :type package__icontains: str
        :param package__iexact: Filter results where package matches value
        :type package__iexact: str
        :param package__in: Filter results where package is in a comma-separated list of values
        :type package__in: List[str]
        :param package__iregex: Filter results where package matches regex value
        :type package__iregex: str
        :param package__istartswith: Filter results where package starts with value
        :type package__istartswith: str
        :param package__regex: Filter results where package matches regex value
        :type package__regex: str
        :param package__startswith: Filter results where package starts with value
        :type package__startswith: str
        :param priority: Filter results where priority matches value
        :type priority: str
        :param prn__in: Multiple values may be separated by commas.
        :type prn__in: List[str]
        :param pulp_href__in: Multiple values may be separated by commas.
        :type pulp_href__in: List[str]
        :param pulp_id__in: Multiple values may be separated by commas.
        :type pulp_id__in: List[str]
        :param pulp_label_select: Filter labels by search string
        :type pulp_label_select: str
        :param q: Filter results by using NOT, AND and OR operations on other filters
        :type q: str
        :param relative_path: Filter results where relative_path matches value
        :type relative_path: str
        :param release:      Must be a comma-separated string: \"release_href,repository_or_repository_version_href\"     release_href: Filter results where Package in Release     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     
        :type release: str
        :param release_component:      Must be a comma-separated string: \"release_component_href,repository_or_repository_version_href\"     release_component_href: Filter results where Package in ReleaseComponent     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     
        :type release_component: str
        :param repository_version: Repository Version referenced by HREF/PRN
        :type repository_version: str
        :param repository_version_added: Repository Version referenced by HREF/PRN
        :type repository_version_added: str
        :param repository_version_removed: Repository Version referenced by HREF/PRN
        :type repository_version_removed: str
        :param section: Filter results where section matches value
        :type section: str
        :param sha256: Filter results where sha256 matches value
        :type sha256: str
        :param source: Filter results where source matches value
        :type source: str
        :param tag: Filter results where tag matches value
        :type tag: str
        :param version: Filter results where version matches value
        :type version: str
        :param fields: A list of fields to include in the response.
        :type fields: List[str]
        :param exclude_fields: A list of fields to exclude from the response.
        :type exclude_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_serialize(
            x_task_diagnostics=x_task_diagnostics,
            architecture=architecture,
            auto_built_package=auto_built_package,
            build_essential=build_essential,
            built_using=built_using,
            essential=essential,
            installed_size=installed_size,
            limit=limit,
            maintainer=maintainer,
            multi_arch=multi_arch,
            offset=offset,
            ordering=ordering,
            origin=origin,
            original_maintainer=original_maintainer,
            orphaned_for=orphaned_for,
            package=package,
            package__contains=package__contains,
            package__icontains=package__icontains,
            package__iexact=package__iexact,
            package__in=package__in,
            package__iregex=package__iregex,
            package__istartswith=package__istartswith,
            package__regex=package__regex,
            package__startswith=package__startswith,
            priority=priority,
            prn__in=prn__in,
            pulp_href__in=pulp_href__in,
            pulp_id__in=pulp_id__in,
            pulp_label_select=pulp_label_select,
            q=q,
            relative_path=relative_path,
            release=release,
            release_component=release_component,
            repository_version=repository_version,
            repository_version_added=repository_version_added,
            repository_version_removed=repository_version_removed,
            section=section,
            sha256=sha256,
            source=source,
            tag=tag,
            version=version,
            fields=fields,
            exclude_fields=exclude_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginateddebPackageResponseList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_serialize(
        self,
        x_task_diagnostics,
        architecture,
        auto_built_package,
        build_essential,
        built_using,
        essential,
        installed_size,
        limit,
        maintainer,
        multi_arch,
        offset,
        ordering,
        origin,
        original_maintainer,
        orphaned_for,
        package,
        package__contains,
        package__icontains,
        package__iexact,
        package__in,
        package__iregex,
        package__istartswith,
        package__regex,
        package__startswith,
        priority,
        prn__in,
        pulp_href__in,
        pulp_id__in,
        pulp_label_select,
        q,
        relative_path,
        release,
        release_component,
        repository_version,
        repository_version_added,
        repository_version_removed,
        section,
        sha256,
        source,
        tag,
        version,
        fields,
        exclude_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'X-Task-Diagnostics': 'csv',
            'ordering': 'csv',
            'package__in': 'csv',
            'prn__in': 'csv',
            'pulp_href__in': 'csv',
            'pulp_id__in': 'csv',
            'fields': 'multi',
            'exclude_fields': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if architecture is not None:
            
            _query_params.append(('architecture', architecture))
            
        if auto_built_package is not None:
            
            _query_params.append(('auto_built_package', auto_built_package))
            
        if build_essential is not None:
            
            _query_params.append(('build_essential', build_essential))
            
        if built_using is not None:
            
            _query_params.append(('built_using', built_using))
            
        if essential is not None:
            
            _query_params.append(('essential', essential))
            
        if installed_size is not None:
            
            _query_params.append(('installed_size', installed_size))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if maintainer is not None:
            
            _query_params.append(('maintainer', maintainer))
            
        if multi_arch is not None:
            
            _query_params.append(('multi_arch', multi_arch))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if origin is not None:
            
            _query_params.append(('origin', origin))
            
        if original_maintainer is not None:
            
            _query_params.append(('original_maintainer', original_maintainer))
            
        if orphaned_for is not None:
            
            _query_params.append(('orphaned_for', orphaned_for))
            
        if package is not None:
            
            _query_params.append(('package', package))
            
        if package__contains is not None:
            
            _query_params.append(('package__contains', package__contains))
            
        if package__icontains is not None:
            
            _query_params.append(('package__icontains', package__icontains))
            
        if package__iexact is not None:
            
            _query_params.append(('package__iexact', package__iexact))
            
        if package__in is not None:
            
            _query_params.append(('package__in', package__in))
            
        if package__iregex is not None:
            
            _query_params.append(('package__iregex', package__iregex))
            
        if package__istartswith is not None:
            
            _query_params.append(('package__istartswith', package__istartswith))
            
        if package__regex is not None:
            
            _query_params.append(('package__regex', package__regex))
            
        if package__startswith is not None:
            
            _query_params.append(('package__startswith', package__startswith))
            
        if priority is not None:
            
            _query_params.append(('priority', priority))
            
        if prn__in is not None:
            
            _query_params.append(('prn__in', prn__in))
            
        if pulp_href__in is not None:
            
            _query_params.append(('pulp_href__in', pulp_href__in))
            
        if pulp_id__in is not None:
            
            _query_params.append(('pulp_id__in', pulp_id__in))
            
        if pulp_label_select is not None:
            
            _query_params.append(('pulp_label_select', pulp_label_select))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if relative_path is not None:
            
            _query_params.append(('relative_path', relative_path))
            
        if release is not None:
            
            _query_params.append(('release', release))
            
        if release_component is not None:
            
            _query_params.append(('release_component', release_component))
            
        if repository_version is not None:
            
            _query_params.append(('repository_version', repository_version))
            
        if repository_version_added is not None:
            
            _query_params.append(('repository_version_added', repository_version_added))
            
        if repository_version_removed is not None:
            
            _query_params.append(('repository_version_removed', repository_version_removed))
            
        if section is not None:
            
            _query_params.append(('section', section))
            
        if sha256 is not None:
            
            _query_params.append(('sha256', sha256))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if exclude_fields is not None:
            
            _query_params.append(('exclude_fields', exclude_fields))
            
        # process the header parameters
        if x_task_diagnostics is not None:
            _header_params['X-Task-Diagnostics'] = x_task_diagnostics
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'cookieAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/pulp/api/v3/content/deb/packages/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def read(
        self,
        deb_package_href: StrictStr,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to include in the response.")] = None,
        exclude_fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to exclude from the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DebPackageResponse:
        """Inspect a package

        A Package represents a '.deb' binary package.  Associated artifacts: Exactly one '.deb' package file.

        :param deb_package_href: (required)
        :type deb_package_href: str
        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param fields: A list of fields to include in the response.
        :type fields: List[str]
        :param exclude_fields: A list of fields to exclude from the response.
        :type exclude_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._read_serialize(
            deb_package_href=deb_package_href,
            x_task_diagnostics=x_task_diagnostics,
            fields=fields,
            exclude_fields=exclude_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DebPackageResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def read_with_http_info(
        self,
        deb_package_href: StrictStr,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to include in the response.")] = None,
        exclude_fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to exclude from the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DebPackageResponse]:
        """Inspect a package

        A Package represents a '.deb' binary package.  Associated artifacts: Exactly one '.deb' package file.

        :param deb_package_href: (required)
        :type deb_package_href: str
        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param fields: A list of fields to include in the response.
        :type fields: List[str]
        :param exclude_fields: A list of fields to exclude from the response.
        :type exclude_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._read_serialize(
            deb_package_href=deb_package_href,
            x_task_diagnostics=x_task_diagnostics,
            fields=fields,
            exclude_fields=exclude_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DebPackageResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def read_without_preload_content(
        self,
        deb_package_href: StrictStr,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to include in the response.")] = None,
        exclude_fields: Annotated[Optional[List[StrictStr]], Field(description="A list of fields to exclude from the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Inspect a package

        A Package represents a '.deb' binary package.  Associated artifacts: Exactly one '.deb' package file.

        :param deb_package_href: (required)
        :type deb_package_href: str
        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param fields: A list of fields to include in the response.
        :type fields: List[str]
        :param exclude_fields: A list of fields to exclude from the response.
        :type exclude_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._read_serialize(
            deb_package_href=deb_package_href,
            x_task_diagnostics=x_task_diagnostics,
            fields=fields,
            exclude_fields=exclude_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DebPackageResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _read_serialize(
        self,
        deb_package_href,
        x_task_diagnostics,
        fields,
        exclude_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'X-Task-Diagnostics': 'csv',
            'fields': 'multi',
            'exclude_fields': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if deb_package_href is not None:
            _path_params['deb_package_href'] = deb_package_href
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if exclude_fields is not None:
            
            _query_params.append(('exclude_fields', exclude_fields))
            
        # process the header parameters
        if x_task_diagnostics is not None:
            _header_params['X-Task-Diagnostics'] = x_task_diagnostics
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'cookieAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='{deb_package_href}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def set_label(
        self,
        deb_package_href: StrictStr,
        set_label: SetLabel,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SetLabelResponse:
        """Set a label

        Set a single pulp_label on the object to a specific value or null.

        :param deb_package_href: (required)
        :type deb_package_href: str
        :param set_label: (required)
        :type set_label: SetLabel
        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_label_serialize(
            deb_package_href=deb_package_href,
            set_label=set_label,
            x_task_diagnostics=x_task_diagnostics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SetLabelResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def set_label_with_http_info(
        self,
        deb_package_href: StrictStr,
        set_label: SetLabel,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SetLabelResponse]:
        """Set a label

        Set a single pulp_label on the object to a specific value or null.

        :param deb_package_href: (required)
        :type deb_package_href: str
        :param set_label: (required)
        :type set_label: SetLabel
        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_label_serialize(
            deb_package_href=deb_package_href,
            set_label=set_label,
            x_task_diagnostics=x_task_diagnostics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SetLabelResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def set_label_without_preload_content(
        self,
        deb_package_href: StrictStr,
        set_label: SetLabel,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Set a label

        Set a single pulp_label on the object to a specific value or null.

        :param deb_package_href: (required)
        :type deb_package_href: str
        :param set_label: (required)
        :type set_label: SetLabel
        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_label_serialize(
            deb_package_href=deb_package_href,
            set_label=set_label,
            x_task_diagnostics=x_task_diagnostics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SetLabelResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _set_label_serialize(
        self,
        deb_package_href,
        set_label,
        x_task_diagnostics,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'X-Task-Diagnostics': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if deb_package_href is not None:
            _path_params['deb_package_href'] = deb_package_href
        # process the query parameters
        # process the header parameters
        if x_task_diagnostics is not None:
            _header_params['X-Task-Diagnostics'] = x_task_diagnostics
        # process the form parameters
        # process the body parameter
        if set_label is not None:
            _body_params = set_label


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded', 
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'cookieAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='{deb_package_href}set_label/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def unset_label(
        self,
        deb_package_href: StrictStr,
        unset_label: UnsetLabel,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UnsetLabelResponse:
        """Unset a label

        Unset a single pulp_label on the object.

        :param deb_package_href: (required)
        :type deb_package_href: str
        :param unset_label: (required)
        :type unset_label: UnsetLabel
        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unset_label_serialize(
            deb_package_href=deb_package_href,
            unset_label=unset_label,
            x_task_diagnostics=x_task_diagnostics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "UnsetLabelResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def unset_label_with_http_info(
        self,
        deb_package_href: StrictStr,
        unset_label: UnsetLabel,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UnsetLabelResponse]:
        """Unset a label

        Unset a single pulp_label on the object.

        :param deb_package_href: (required)
        :type deb_package_href: str
        :param unset_label: (required)
        :type unset_label: UnsetLabel
        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unset_label_serialize(
            deb_package_href=deb_package_href,
            unset_label=unset_label,
            x_task_diagnostics=x_task_diagnostics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "UnsetLabelResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def unset_label_without_preload_content(
        self,
        deb_package_href: StrictStr,
        unset_label: UnsetLabel,
        x_task_diagnostics: Annotated[Optional[List[StrictStr]], Field(description="List of profilers to use on tasks.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Unset a label

        Unset a single pulp_label on the object.

        :param deb_package_href: (required)
        :type deb_package_href: str
        :param unset_label: (required)
        :type unset_label: UnsetLabel
        :param x_task_diagnostics: List of profilers to use on tasks.
        :type x_task_diagnostics: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unset_label_serialize(
            deb_package_href=deb_package_href,
            unset_label=unset_label,
            x_task_diagnostics=x_task_diagnostics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "UnsetLabelResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _unset_label_serialize(
        self,
        deb_package_href,
        unset_label,
        x_task_diagnostics,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'X-Task-Diagnostics': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if deb_package_href is not None:
            _path_params['deb_package_href'] = deb_package_href
        # process the query parameters
        # process the header parameters
        if x_task_diagnostics is not None:
            _header_params['X-Task-Diagnostics'] = x_task_diagnostics
        # process the form parameters
        # process the body parameter
        if unset_label is not None:
            _body_params = unset_label


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded', 
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'cookieAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='{deb_package_href}unset_label/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



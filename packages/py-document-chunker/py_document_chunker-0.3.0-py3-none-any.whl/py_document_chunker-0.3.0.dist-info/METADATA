Metadata-Version: 2.4
Name: py_document_chunker
Version: 0.3.0
Summary: A state-of-the-art Python package for advanced text segmentation (chunking).
Author-email: Gowtham Rao <rao@ohdsi.org>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://github.com/OHDSI/py_document_chunker
Project-URL: Bug Tracker, https://github.com/OHDSI/py_document_chunker/issues
Keywords: text chunking,text splitting,RAG,Retrieval-Augmented Generation,NLP,natural language processing,document processing,langchain,llamaindex
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Topic :: Text Processing
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: NOTICE
Requires-Dist: beautifulsoup4>=4.12.3
Requires-Dist: lxml>=5.2.0
Provides-Extra: nlp
Requires-Dist: nltk>3.8.1; extra == "nlp"
Provides-Extra: spacy
Requires-Dist: spacy==3.7.2; extra == "spacy"
Provides-Extra: semantic
Requires-Dist: numpy<2.0.0; extra == "semantic"
Provides-Extra: code
Requires-Dist: tree-sitter>=0.21.0; extra == "code"
Requires-Dist: tree-sitter-language-pack>=0.3.0; extra == "code"
Provides-Extra: markdown
Requires-Dist: markdown-it-py>=3.0.0; extra == "markdown"
Provides-Extra: html
Requires-Dist: html5lib>=1.1; extra == "html"
Provides-Extra: langchain
Requires-Dist: langchain-core; extra == "langchain"
Provides-Extra: llamaindex
Requires-Dist: llama-index-core>=0.12.29; extra == "llamaindex"
Provides-Extra: tokenizers
Requires-Dist: tiktoken>=0.7.0; extra == "tokenizers"
Provides-Extra: dev
Requires-Dist: pytest>=8.0.0; extra == "dev"
Requires-Dist: pytest-cov>=5.0.0; extra == "dev"
Requires-Dist: py_document_chunker[code,html,langchain,llamaindex,markdown,nlp,semantic,spacy,tokenizers]; extra == "dev"
Requires-Dist: black>=24.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Dynamic: license-file

# py_document_chunker

This repository contains a state-of-the-art, open-source Python package for advanced text segmentation (chunking). It is designed to be a critical component in Retrieval-Augmented Generation (RAG) systems and advanced Natural Language Processing (NLP) data pipelines.

The package transforms large, unstructured or semi-structured documents into optimally sized segments (chunks) that maximize semantic coherence while adhering to token constraints.

## Core Features

- **Multiple Chunking Strategies**: From simple fixed-size and recursive splitting to advanced, structure-aware, and semantic-based strategies.
- **Rich Metadata**: Every chunk is enriched with detailed metadata, including its start/end position, a unique ID, sequence number, hierarchical context, and even the exact content of the overlap with its neighbors.
- **Framework Integration**: Seamless integration with popular RAG frameworks like LangChain and LlamaIndex.
- **Highly Configurable**: All strategies are hyper-parameterized with sensible, research-backed defaults.
- **Extensible Architecture**: The modular design makes it easy to implement, customize, and combine strategies.

## Installation

You can install the core package and its dependencies using pip. The package is structured with optional extras for strategies that require heavy dependencies.

```bash
# Install the core package
pip install py_document_chunker

# To include support for sentence splitting (via NLTK or Spacy)
pip install py_document_chunker[nlp,spacy]

# To include support for Markdown and HTML splitting
pip install py_document_chunker[markdown,html]

# To include support for semantic splitting (requires numpy)
pip install py_document_chunker[semantic]

# To include support for code splitting (requires tree-sitter)
pip install py_document_chunker[code]

# To include support for token-based length functions (via tiktoken)
pip install py_document_chunker[tokenizers]

# To install framework integrations
pip install py_document_chunker[langchain,llamaindex]

# To install everything for development
pip install py_document_chunker[dev,nlp,markdown,html,semantic,code,tokenizers,langchain,llamaindex]
```

## Global Configuration

All splitter classes inherit from a common `TextSplitter` base class and share a set of powerful configuration options for preprocessing and chunk management.

- `chunk_size` (int, default: `1024`): The target maximum size of each chunk. The unit (characters or tokens) is determined by the `length_function`.
- `chunk_overlap` (int, default: `200`): The amount of overlap between consecutive chunks, measured in the same units as `chunk_size`.
- `length_function` (Callable[[str], int], default: `len`): The function used to measure the size of a text segment. This is the key to token-aware chunking. By default, it measures characters, but you can plug in any tokenizer function.
- `normalize_whitespace` (bool, default: `False`): If `True`, collapses all consecutive whitespace characters (spaces, newlines, tabs) into a single space.
- `unicode_normalize` (str, default: `None`): Specifies a Unicode normalization form to apply (e.g., `'NFC'`, `'NFKC'`).
- `minimum_chunk_size` (int, default: `0`): If set, the splitter will attempt to handle chunks smaller than this size.
- `min_chunk_merge_strategy` (str, default: `'merge_with_previous'`): Defines how to handle small chunks.
    - `'merge_with_previous'`: Merges a small chunk with the one that came before it.
    - `'merge_with_next'`: Merges a small chunk with the one that comes after it.
    - `'discard'`: Simply removes any chunk smaller than `minimum_chunk_size`.

## Quick Start & Rich Metadata

The simplest way to get started is with the `RecursiveCharacterSplitter`. All splitters return a list of `Chunk` objects, which are enriched with comprehensive metadata as required by the FRD.

```python
from py_document_chunker import RecursiveCharacterSplitter

text = "This is a long document.   It has multiple sentences and paragraphs.\n\nWe want to split it into smaller chunks. Some chunks are small."

# Initialize the splitter
splitter = RecursiveCharacterSplitter(chunk_size=50, chunk_overlap=10)

# Split the text
chunks = splitter.split_text(text)

# Each chunk is a rich data object
first_chunk = chunks[0]

print(f"--- Chunk Content ---\n{first_chunk.content}\n")
# --- Chunk Content ---
# This is a long document.   It has multiple

print(f"--- Chunk Metadata ---")
# The to_dict() method provides a full view of the metadata
# Note: Some fields like 'hierarchical_context' are populated by specific strategies.
import json
print(json.dumps(first_chunk.to_dict(), indent=2))
```

Example output of `first_chunk.to_dict()`:
```json
{
  "content": "This is a long document.   It has multiple",
  "start_index": 0,
  "end_index": 42,
  "sequence_number": 0,
  "chunk_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d",
  "source_document_id": null,
  "hierarchical_context": {},
  "overlap_content_previous": null,
  "overlap_content_next": " sentences",
  "chunking_strategy_used": "recursive_character",
  "metadata": {}
}
```

## Strategies

### FixedSizeSplitter
The most basic strategy. Splits text into chunks of a fixed character size.

```python
from py_document_chunker import FixedSizeSplitter
splitter = FixedSizeSplitter(chunk_size=100, chunk_overlap=20)
chunks = splitter.split_text(my_text)
```

### RecursiveCharacterSplitter
Recursively splits text based on a prioritized list of separators (e.g., `["\n\n", "\n", ". ", " "]`). This is often the recommended starting point.

```python
from py_document_chunker import RecursiveCharacterSplitter
splitter = RecursiveCharacterSplitter(chunk_size=1024, chunk_overlap=200)
chunks = splitter.split_text(my_text)
```

### SentenceSplitter
Splits text based on sentence boundaries using NLTK, then aggregates sentences into chunks. Requires the `[nlp]` extra.

```python
from py_document_chunker import SentenceSplitter
# Ensure you have run: python -c "import nltk; nltk.download('punkt')"
splitter = SentenceSplitter(chunk_size=1024, overlap_sentences=1)
chunks = splitter.split_text(my_prose_text)
```

### SpacySentenceSplitter
A more advanced sentence splitter that uses `spacy` for higher accuracy sentence boundary detection. It functions similarly to the NLTK-based splitter but often provides better results for complex texts. Requires the `[spacy]` extra.

```python
from py_document_chunker import SpacySentenceSplitter
# Ensure you have run: pip install py_document_chunker[spacy]
# And downloaded the model: python -m spacy download en_core_web_sm
splitter = SpacySentenceSplitter(chunk_size=1024, overlap_sentences=1)
chunks = splitter.split_text(my_prose_text)
```

### MarkdownSplitter
A structure-aware splitter that uses Markdown headers (H1-H6), paragraphs, and other elements as boundaries. Requires the `[markdown]` extra.

```python
from py_document_chunker import MarkdownSplitter
splitter = MarkdownSplitter(chunk_size=1024, chunk_overlap=0)
chunks = splitter.split_text(my_markdown_text)
# Chunks will have `hierarchical_context` metadata populated.
print(chunks[0].hierarchical_context)
# Output: {'H1': 'Main Title', 'H2': 'Section 1'}
```

### HTMLSplitter
A structure-aware splitter for HTML documents. Requires the `[html]` extra.

```python
from py_document_chunker import HTMLSplitter
splitter = HTMLSplitter(chunk_size=1024, chunk_overlap=0)
chunks = splitter.split_text(my_html_text)
```

### SemanticSplitter
Splits text by finding semantic breakpoints between sentences using an embedding model. It identifies points where the cosine similarity between adjacent sentence embeddings drops significantly. This is a powerful way to create topically coherent chunks. Requires the `[semantic]` extra.

The `breakpoint_method` and `breakpoint_threshold` parameters control how a breakpoint is determined:
- `breakpoint_method='percentile'` (default): A split occurs if the similarity is below the `X`-th percentile of all similarities in the document. `breakpoint_threshold` is the percentile (e.g., `95`).
- `breakpoint_method='std_dev'`: A split occurs if the similarity is more than `X` standard deviations below the mean similarity. `breakpoint_threshold` is the number of standard deviations (e.g., `1.5`).
- `breakpoint_method='absolute'`: A split occurs if the similarity is below a fixed value. `breakpoint_threshold` is the similarity value (e.g., `0.85`).

```python
from py_document_chunker import SemanticSplitter
# You must provide your own embedding function.
# e.g., from sentence_transformers import SentenceTransformer
# model = SentenceTransformer('all-MiniLM-L6-v2')
# embedding_function = model.encode

# Example using standard deviation to find breakpoints
splitter = SemanticSplitter(
    embedding_function=my_embedding_function,
    breakpoint_method="std_dev",
    breakpoint_threshold=1.2
)
chunks = splitter.split_text(my_text)

# If a resulting semantic chunk is larger than chunk_size, it is automatically
# split further by the RecursiveCharacterSplitter.
```

### CodeSplitter
A syntax-aware splitter for source code. Requires the `[code]` extra.

```python
from py_document_chunker import CodeSplitter
splitter = CodeSplitter(language="python", chunk_size=1024, chunk_overlap=0)
chunks = splitter.split_text(my_python_code)
```

## Token-Aware Chunking

A core design principle of this package is its tokenization awareness (FRD R-1.3.3). While the default behavior is to count characters, you can supply any tokenizer as a `length_function` to control chunk size based on token count. This is critical for RAG applications where LLM context windows are constrained by tokens.

### Using `tiktoken` for OpenAI Models

The package provides an optional utility to create a length function from OpenAI's `tiktoken` library. First, ensure you have the necessary dependency installed:

```bash
pip install py_document_chunker[tokenizers]
```

Then, you can create a token-based length function and pass it to any splitter.

```python
from py_document_chunker import RecursiveCharacterSplitter
from py_document_chunker.tokenizers import from_tiktoken

# A long text about the history of AI...
text = "Artificial intelligence (AI) is intelligence demonstrated by machines, as opposed to the natural intelligence displayed by humans and other animals. AI research has been defined as the field of study of intelligent agents, which refers to any system that perceives its environment and takes actions that maximize its chance of successfully achieving its goals."

# Create a length function for the gpt-4 encoding
# This function will count tokens instead of characters
length_function = from_tiktoken("cl100k_base")

# Initialize the splitter with a token-based chunk size
token_splitter = RecursiveCharacterSplitter(
    chunk_size=30,          # Max 30 tokens per chunk
    chunk_overlap=5,        # 5-token overlap
    length_function=length_function
)

chunks = token_splitter.split_text(text)

# Verify that each chunk respects the token limit
for i, chunk in enumerate(chunks):
    token_count = length_function(chunk.content)
    print(f"Chunk {i+1}: {token_count} tokens")
    # assert token_count <= 30
```

## Framework Integrations

### LangChain
Use any splitter in a LangChain pipeline. Requires the `[langchain]` extra.
```python
from py_document_chunker import RecursiveCharacterSplitter
from py_document_chunker.integrations.langchain import LangChainWrapper

# 1. Create a splitter instance from this package
ats_splitter = RecursiveCharacterSplitter(chunk_size=100, chunk_overlap=10)

# 2. Wrap it for LangChain
langchain_splitter = LangChainWrapper(ats_splitter)

# 3. Use it like any other LangChain TextSplitter
from langchain_core.documents import Document
docs = [Document(page_content="Some long text...")]
split_docs = langchain_splitter.split_documents(docs)
print(split_docs[0].metadata)
```

### LlamaIndex
Use any splitter as a LlamaIndex `NodeParser`. Requires the `[llamaindex]` extra.
```python
from py_document_chunker import SentenceSplitter
from py_document_chunker.integrations.llamaindex import LlamaIndexWrapper

# 1. Create a splitter instance
ats_splitter = SentenceSplitter(chunk_size=512, overlap_sentences=1)

# 2. Create the LlamaIndex-compatible NodeParser
node_parser = LlamaIndexWrapper(ats_splitter)

# 3. Use it in your LlamaIndex pipeline
from llama_index.core.schema import Document
nodes = node_parser.get_nodes_from_documents([Document(text="Some long text...")])
print(nodes[0].metadata)
```

from abc import ABC, abstractmethod

from langchain_core.prompts import ChatPromptTemplate
from pydantic import BaseModel


class BasePromptStrategy(ABC):
    """
    Abstract base class for a prompt generation strategy.

    This class defines the interface for creating prompt templates, ensuring that
    any new prompting strategy can be seamlessly integrated into the system.
    """

    @abstractmethod
    def create_prompt_template(self, schema: type[BaseModel]) -> ChatPromptTemplate:
        """
        Creates a chat prompt template based on the provided extraction schema.

        Args:
            schema: The Pydantic schema that defines the structure of the
                    information to be extracted.

        Returns:
            A LangChain ChatPromptTemplate configured for the extraction task.
        """
        pass


class ZeroShotStructured(BasePromptStrategy):
    """
    A zero-shot prompt strategy that dynamically generates instructions for the LLM
    based on the structure and descriptions of a Pydantic schema.
    """

    def _get_schema_description(self, schema: type[BaseModel]) -> str:
        """
        Generates a markdown-formatted string description of the schema's fields.
        """
        description = "You must extract entities that match the following schema:\n\n"
        fields = schema.model_fields
        for field_name, field_info in fields.items():
            # Capitalize the field name for better readability in the prompt
            capitalized_field_name = field_name.replace("_", " ").capitalize()
            description += f"- **{capitalized_field_name}**: {field_info.description}\n"
        return description.strip()

    def create_prompt_template(self, schema: type[BaseModel]) -> ChatPromptTemplate:
        """
        Builds a prompt that instructs the LLM to perform extraction according
        to the dynamically generated schema description.
        """
        schema_desc = self._get_schema_description(schema)

        system_message = (
            "You are a highly skilled and precise information extraction AI. "
            "Your task is to analyze the user-provided text and extract entities "
            "that conform to the schema provided below. It is crucial that you "
            "extract all matching entities and that every extracted text span "
            "is an exact, verbatim substring of the source text.\n\n"
            "## Extraction Schema\n"
            f"{schema_desc}\n\n"
            "Present your findings as a JSON object."
        )

        human_message = (
            "Please extract all entities from the following text:\n\n"
            "```text\n"
            "{text_input}\n"
            "```"
        )

        prompt = ChatPromptTemplate.from_messages(
            [
                ("system", system_message),
                ("human", human_message),
            ]
        )

        # Ensure the template is created with the correct input variable
        if "text_input" not in prompt.input_variables:
            raise ValueError("Prompt template must include 'text_input' variable.")

        return prompt


class PromptManager:
    """
    Manages the creation of prompts using a selected strategy.

    This class acts as a factory for prompt templates, decoupling the core
    engine from the specific details of prompt construction.
    """

    def __init__(self, strategy: BasePromptStrategy):
        """
        Initializes the PromptManager with a specific prompt strategy.

        Args:
            strategy: An instance of a class that inherits from BasePromptStrategy.
        """
        self.strategy = strategy

    def get_prompt_template(self, schema: type[BaseModel]) -> ChatPromptTemplate:
        """
        Retrieves a prompt template generated by the configured strategy.

        Args:
            schema: The Pydantic schema for the extraction task.

        Returns:
            A ChatPromptTemplate ready to be used with an LLM.
        """
        return self.strategy.create_prompt_template(schema)

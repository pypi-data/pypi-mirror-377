#
# This is a valgrind suppression file that should be used when using valgrind.
#
#  valgrind --suppressions=valgrind.supp python load.py
#
#
# See Misc/README.valgrind for more information.
# all tool names: Addrcheck,Memcheck,cachegrind,helgrind,massif
{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8 (x86_64 aka amd64)
   Memcheck:Value8
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:Py_ADDRESS_IN_RANGE
}

{
   <none>
   Memcheck:Cond
   fun:PyString_FromString
}
{
   <none>
   Memcheck:Value8
   fun:PyString_FromString
}
{
   <none>
   Memcheck:Value8
   fun:insertdict_by_entry
}
{
   <none>
   Memcheck:Cond
   fun:lookdict_string
}
{
   <none>
   Memcheck:Cond
   fun:PyString_InternInPlace
}
{
   <none>
   Memcheck:Cond
   fun:PyObject_Malloc
}
{
   <none>
   Memcheck:Cond
   fun:PyDict_*
}
{
   <none>
   Memcheck:Cond
   fun:dictiter_*
}
{
   <none>
   Memcheck:Value8
   fun:dictiter_*
}
{
   <none>
   Memcheck:Cond
   fun:decoding_*
}
{
   <none>
   Memcheck:Value8
   fun:decoding_*
}
{
   <none>
   Memcheck:Cond
   fun:Py*
}
{
   <none>
   Memcheck:Value8
   fun:Py*
}
{
   <none>
   Memcheck:Value8
   fun:stackdepth_walk
}
{
   <none>
   Memcheck:Cond
   fun:stackdepth_walk
}
{
   <none>
   Memcheck:Cond
   fun:do_mkvalue
}
{
   <none>
   Memcheck:Value8
   fun:do_mkvalue
}
{
   <none>
   Memcheck:Value8
   fun:assemble
}
{
   <none>
   Memcheck:Value8
   fun:ste_dealloc
}
{
   <none>
   Memcheck:Cond
   fun:_Py*
}
{
   <none>
   Memcheck:Value8
   fun:compiler_*
}
{
   <none>
   Memcheck:Value8
   fun:string_concat
}
{
   <none>
   Memcheck:Value8
   fun:parsestr
}
{
   <none>
   Memcheck:Cond
   fun:compiler_*
}
{
   <none>
   Memcheck:Cond
   fun:lookdict
}
{
   <none>
   Memcheck:Value8
   fun:_Py*
}
{
   <none>
   Memcheck:Value8
   fun:find_module
}
{
   <none>
   Memcheck:Cond
   fun:find_module
}
{
   <none>
   Memcheck:Cond
   fun:ast_*
}
{
   <none>
   Memcheck:Value8
   fun:listextend
}
{
   <none>
   Memcheck:Value8
   fun:list_dealloc
}
{
   <none>
   Memcheck:Cond
   fun:PyObject_*
}
{
   <none>
   Memcheck:Value8
   fun:PyObject_*
}
{
   <none>
   Memcheck:Cond
   fun:mro_*
}
{
   <none>
   Memcheck:Value8
   fun:mro_*
}
{
   <none>
   Memcheck:Value8
   fun:list_ass_slice
}
{
   <none>
   Memcheck:Value8
   fun:analyze_block
}
{
   <none>
   Memcheck:Value8
   fun:parsetok
}
{
   <none>
   Memcheck:Value8
   fun:listsort*
}
{
   <none>
   Memcheck:Value8
   fun:dictbytype
}
{
   <none>
   Memcheck:Cond
   fun:PyString_*
}
{
   <none>
   Memcheck:Cond
   fun:parsetok
}
{
   <none>
   Memcheck:Cond
   fun:__strcmp_ssse3
}
{
   <none>
   Memcheck:Cond
   fun:load_next
}
{
  kill it
  Memcheck:Cond
  fun:memcpy
  fun:type_new
}
{
  kill it
  Memcheck:Cond
  fun:memcpy
  fun:string_*
}
{
  kill it
  Memcheck:Value8
  fun:__GI_strlen
}
{
  kill it
  Memcheck:Value8
  fun:__GI_strstr
}
  kill it
  Memcheck:Value8
  obj:/usr/local/python-2.7.5/lib/libpython2.7.so.1.0
}
{
  kill it
  Memcheck:Cond
  obj:/usr/local/python-2.7.5/lib/libpython2.7.so.1.0
}
{
   <none>
   Memcheck:Value8
   fun:PyString_*
}
{
   <none>
   Memcheck:Value8
   fun:PyString_*
}
{
   <none>
   Memcheck:Cond
   fun:PyDict_GetItem
}
{
   <none>
   Memcheck:Cond
   fun:assemble
}
{
   <none>
   Memcheck:Value8
   fun:string_hash
}
{
   <none>
   Memcheck:Cond
   fun:string_hash
}
{
   <none>
   Memcheck:Cond
   fun:code_hash
}
{
   <none>
   Memcheck:Value8
   fun:tupledealloc
}
{
   <none>
   Memcheck:Value8
   fun:lookdict
}
#
# Leaks (including possible leaks)
#    Hmmm, I wonder if this masks some real leaks.  I think it does.
#    Will need to fix that.
#

{
   Suppress leaking the GIL.  Happens once per process, see comment in ceval.c.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_InitThreads
}

{
   Suppress leaking the GIL after a fork.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_ReInitThreads
}

{
   Suppress leaking the autoTLSkey.  This looks like it shouldn't leak though.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_create_key
   fun:_PyGILState_Init
   fun:Py_InitializeEx
   fun:Py_Main
}

{
   Hmmm, is this a real leak or like the GIL?
   Memcheck:Leak
   fun:malloc
   fun:PyThread_ReInitTLS
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:realloc
   fun:_PyObject_GC_Resize
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_New
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_NewVar
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

#
# Non-python specific leaks
#

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:calloc
   fun:allocate_dtv
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:memalign
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Realloc
}

###
### All the suppressions below are for errors that occur within libraries
### that Python uses.  The problems to not appear to be related to Python's
### use of the libraries.
###

{
   Generic ubuntu ld problems
   Memcheck:Addr8
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
}

{
   Generic gentoo ld problems
   Memcheck:Cond
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
}

{
   DBM problems, see test_dbm
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_close
}

{
   DBM problems, see test_dbm
   Memcheck:Value8
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   GDBM problems, see test_gdbm
   Memcheck:Param
   write(buf)
   fun:write
   fun:gdbm_open

}

{
   ZLIB problems, see test_gzip
   Memcheck:Cond
   obj:/lib/libz.so.1.2.3
   obj:/lib/libz.so.1.2.3
   fun:deflate
}

{
   Avoid problems w/readline doing a putenv and leaking on exit
   Memcheck:Leak
   fun:malloc
   fun:xmalloc
   fun:sh_set_lines_and_columns
   fun:_rl_get_screen_size
   fun:_rl_init_terminal_io
   obj:/lib/libreadline.so.4.3
   fun:rl_initialize
}

###
### These occur from somewhere within the SSL, when running
###  test_socket_sll.  They are too general to leave on by default.
###
###{
###   somewhere in SSL stuff
###   Memcheck:Cond
###   fun:memset
###}
###{
###   somewhere in SSL stuff
###   Memcheck:Value4
###   fun:memset
###}
###
###{
###   somewhere in SSL stuff
###   Memcheck:Cond
###   fun:MD5_Update
###}
###
###{
###   somewhere in SSL stuff
###   Memcheck:Value4
###   fun:MD5_Update
###}

#
# All of these problems come from using test_socket_ssl
#
{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_bin2bn
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_num_bits_word
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:BN_num_bits_word
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_mod_exp_mont_word
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_mod_exp_mont
}

{
   from test_socket_ssl
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libcrypto.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:RSA_verify
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:RSA_verify
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:DES_set_key_unchecked
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:DES_encrypt2
}

{
   from test_socket_ssl
   Memcheck:Cond
   obj:/usr/lib/libssl.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Value4
   obj:/usr/lib/libssl.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BUF_MEM_grow_clean
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:memcpy
   fun:ssl3_read_bytes
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:SHA1_Update
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:SHA1_Update
}


#
# gen-suppressions from numpy
#
{
   numpy-01
   Memcheck:Cond
   fun:PyObject_Free
   fun:code_dealloc
}
{
   numpy-2
   Memcheck:Value8
   fun:PyObject_Free
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyObject_Call
   fun:PyEval_CallObjectWithKeywords
   fun:PyEval_EvalFrameEx
}
{
   numpy-3
   Memcheck:Cond
   fun:PyObject_Free
   fun:tupledealloc
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyObject_Call
   fun:PyEval_CallObjectWithKeywords
}
{
   numpy-4
   Memcheck:Value8
   fun:PyObject_Free
   fun:tupledealloc
}
{
   numpy-5
   Memcheck:Cond
   fun:PyObject_Free
   fun:tupledealloc
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyObject_Call
   fun:PyEval_CallObjectWithKeywords
}
{
   numpy-6
   Memcheck:Value8
   fun:PyObject_Free
   fun:tupledealloc
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyObject_Call
   fun:PyEval_CallObjectWithKeywords
}
{
   numpy-7
   Memcheck:Addr4
   fun:PyObject_Free
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyObject_Call
   fun:PyEval_CallObjectWithKeywords
   fun:PyEval_EvalFrameEx
}
{
   numpy-8
   Memcheck:Cond
   fun:PyObject_Free
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyObject_Call
   fun:PyEval_CallObjectWithKeywords
   fun:PyEval_EvalFrameEx
}
{
   numpy-9
   Memcheck:Value8
   fun:PyObject_Free
   fun:code_dealloc
}
{
   numpy-10
   Memcheck:Cond
   fun:PyObject_Free
   fun:tupledealloc
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyObject_Call
   fun:PyEval_CallObjectWithKeywords
}
{
   numpy-11
   Memcheck:Value8
   fun:PyObject_Free
   fun:tupledealloc
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyObject_Call
   fun:PyEval_CallObjectWithKeywords
}
{
   numpy-12
   Memcheck:Cond
   fun:PyObject_Free
   fun:tupledealloc
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyObject_Call
   fun:PyEval_CallObjectWithKeywords
}
{
   numpy-13
   Memcheck:Value8
   fun:PyObject_Free
   fun:PyGrammar_AddAccelerators
   fun:PyParser_New
   fun:parsetok
   fun:PyRun_StringFlags
   fun:builtin_eval
   fun:PyEval_EvalFrameEx
   fun:PyEval_EvalFrameEx
   fun:PyEval_EvalCodeEx
   fun:PyEval_EvalCode
   fun:PyImport_ExecCodeModuleEx
   fun:load_source_module
}
{
   numpy-14
   Memcheck:Value8
   fun:PyObject_Free
   fun:code_dealloc
   fun:tupledealloc
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyObject_Call
}
{
   numpy-15
   Memcheck:Value8
   fun:PyObject_Free
   fun:code_dealloc
   fun:load_source_module
   fun:load_module
   fun:import_submodule
   fun:load_next
   fun:import_module_level
   fun:PyImport_ImportModuleLevel
   fun:builtin___import__
   fun:PyEval_EvalFrameEx
   fun:PyEval_EvalCodeEx
   fun:function_call
}
{
   numpy-16
   Memcheck:Value8
   fun:PyObject_Realloc
   fun:_PyObject_GC_Resize
   fun:PyFrame_New
   fun:PyEval_EvalFrameEx
}
{
   numpy-17
   Memcheck:Value8
   fun:PyObject_Free
   fun:dict_dealloc
}
{
   numpy-18
   Memcheck:Value8
   fun:PyObject_Free
   fun:tupledealloc
}
{
   numpy-19
   Memcheck:Value8
   fun:PyObject_Free
   fun:dict_dealloc
}
{
   numpy-20
   Memcheck:Value8
   fun:PyObject_Free
   fun:code_dealloc
}
{
   numpy-21
   Memcheck:Value8
   fun:PyObject_Free
   fun:func_dealloc
}



# ---
{
   <insert a suppression name here>
   Memcheck:Value8
   fun:PyObject_Free
}
{
   <insert a suppression name here>
   Memcheck:Value8
   fun:PyObject_Free
   fun:PyAST_Compile
   fun:PyRun_StringFlags
   fun:PyEval_EvalFrameEx
   fun:PyEval_EvalCodeEx
   fun:PyEval_EvalFrameEx
   fun:PyEval_EvalCodeEx
   fun:PyEval_EvalCode
   fun:PyImport_ExecCodeModuleEx
   fun:load_source_module
   fun:load_module
   fun:import_submodule
}
{
   <insert a suppression name here>
   Memcheck:Value8
   fun:PyObject_Free
   fun:freechildren
}
{
   <insert a suppression name here>
   Memcheck:Value8
   fun:PyObject_Free
   fun:dict_dealloc
   fun:subtype_dealloc
   fun:PyDict_SetItem
   fun:_PyModule_Clear
   fun:PyImport_Cleanup
   fun:Py_Finalize
   fun:Py_Main
   fun:(below main)
}
{
   <insert a suppression name here>
   Memcheck:Value8
   fun:PyObject_Free
   fun:code_dealloc
   fun:func_dealloc
   fun:dict_dealloc
   fun:class_dealloc
   fun:PyDict_SetItem
   fun:_PyModule_Clear
   fun:PyImport_Cleanup
   fun:Py_Finalize
   fun:Py_Main
   fun:(below main)
}
{
   <insert a suppression name here>
   Memcheck:Value8
   fun:PyObject_Free
   fun:dict_dealloc
   fun:PyDict_SetItem
   fun:_PyModule_Clear
   fun:PyImport_Cleanup
   fun:Py_Finalize
   fun:Py_Main
   fun:(below main)
}
{
   <insert a suppression name here>
   Memcheck:Value8
   fun:PyObject_Free
   fun:dict_dealloc
}
{
   <insert a suppression name here>
   Memcheck:Value8
   fun:PyObject_Realloc
}
{
   <insert a suppression name here>
   Memcheck:Value8
   fun:lookdict_string
}
# --- last line


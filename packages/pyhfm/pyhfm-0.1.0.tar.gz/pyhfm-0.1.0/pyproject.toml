[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyhfm"
version = "0.1.0"
description = "Python package for reading and analyzing Heat Flow Meter (HFM) data files"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Grayson Bellamy", email = "gbellamy@umd.edu"},
]
keywords = ["heat flow meter", "thermal analysis", "materials science", "data analysis"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]

dependencies = [
    "pyarrow>=10.0.0",
    "numpy>=1.20.0",
    "chardet>=5.0.0",
    "polars>=0.20.0",
    "pre-commit>=4.3.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
build = [
    "build>=1.0.0",
    "twine>=4.0.0",
]
performance = [
    "pytest-benchmark>=4.0.0",
]
all = ["pyhfm[test,dev,docs,build,performance]"]

[project.scripts]
pyhfm = "pyhfm.api.loaders:main"

[project.urls]
Homepage = "https://github.com/GraysonBellamy/pyhfm"
Repository = "https://github.com/GraysonBellamy/pyhfm"
Issues = "https://github.com/GraysonBellamy/pyhfm/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/pyhfm"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/README.md",
    "/pyproject.toml",
]

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "UP", "S", "B", "A", "C4", "DTZ", "EM", "ISC", "ICN", "PIE", "PT", "Q", "RSE", "RET", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "PERF", "RUF"]
ignore = ["E501", "S101", "PLR0913", "PLR0915", "PLR2004"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ARG001"]
"examples/*" = ["T201", "S101"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["chardet.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["pyhfm.extractors.data_extractor"]
warn_unreachable = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=src/pyhfm --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src/pyhfm"]
omit = ["*/tests/*", "*/examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "mypy>=1.18.1",
    "pyarrow-stubs>=20.0.0.20250825",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "ruff>=0.13.0",
]

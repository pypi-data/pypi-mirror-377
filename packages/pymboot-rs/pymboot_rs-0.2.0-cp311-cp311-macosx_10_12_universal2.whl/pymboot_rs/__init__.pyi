# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum

class McuBoot:
    @property
    def status_code(self) -> StatusCode: ...
    @property
    def status_code_int(self) -> builtins.int: ...
    @property
    def status_code_str(self) -> builtins.str: ...
    def __new__(cls, identifier:builtins.str) -> McuBoot: ...
    def open(self) -> None:
        r"""
        Connect to the device.
        """
    def close(self) -> None:
        r"""
        Disconnect from the device.
        """
    def __exit__(self, _exception_type:typing.Optional[type]=None, _exception_value:typing.Optional[typing.Any]=None, _traceback:typing.Optional[typing.Any]=None) -> None: ...
    def __enter__(self) -> McuBoot: ...
    def get_property(self, property:PropertyTag, index:typing.Optional[builtins.int]=None) -> typing.Optional[builtins.list[builtins.int]]:
        r"""
        Get specified property value.
        
        :param property: Property TAG (see `PropertyTag` Enum)
        :param index: External memory ID or internal memory region index (depends on property type), defaults to 0
        :return: list integers representing the property; None in case no response from device
        """
    def set_property(self, property:PropertyTag, value:builtins.int) -> None:
        r"""
        Set value of specified property.
        
        :param property: Property TAG (see `PropertyTag` enum)
        :param value: The value of selected property
        :return: False in case of any problem; True otherwise
        """
    def flash_erase_all(self, mem_id:typing.Optional[builtins.int]=None) -> builtins.bool:
        r"""
        Erase complete flash memory without recovering flash security section.
        
        :param mem_id: Memory ID, defaults to 0
        :return: False in case of any problem; True otherwise
        """
    def flash_erase_region(self, address:builtins.int, length:builtins.int, mem_id:typing.Optional[builtins.int]=None) -> builtins.bool:
        r"""
        Erase specified range of flash.
        
        :param address: Start address
        :param length: Count of bytes
        :param mem_id: Memory ID, defaults to 0
        :return: False in case of any problem; True otherwise
        """
    def write_memory(self, address:builtins.int, data:typing.Sequence[builtins.int], mem_id:typing.Optional[builtins.int]=None) -> builtins.bool:
        r"""
        Write data into MCU memory.
        
        :param address: Start address
        :param data: List of bytes
        :param `mem_id`: Memory ID, use `0` for internal memory, defaults to 0
        :return: False in case of any problem; True otherwise
        """
    def read_memory(self, address:builtins.int, length:builtins.int, mem_id:typing.Optional[builtins.int]=None) -> typing.Optional[builtins.list[builtins.int]]:
        r"""
        Read data from MCU memory.
        
        :param address: Start address
        :param length: Count of bytes
        :param `mem_id`: Memory ID, defaults to 0
        :return: Data read from the memory; None in case of a failure
        """
    def fuse_program(self, address:builtins.int, data:typing.Sequence[builtins.int], mem_id:typing.Optional[builtins.int]=None) -> builtins.bool:
        r"""
        Program fuse.
        
        :param address: Start address
        :param data: List of bytes
        :param mem_id: Memory ID, defaults to 0
        :return: False in case of any problem; True otherwise
        """
    def fuse_read(self, address:builtins.int, length:builtins.int, mem_id:typing.Optional[builtins.int]=None) -> typing.Optional[builtins.list[builtins.int]]:
        r"""
        Read fuse.
        
        :param address: Start address
        :param length: Count of bytes
        :param mem_id: Memory ID, defaults to 0
        :return: Data read from the fuse; None in case of a failure
        """
    def execute(self, address:builtins.int, argument:builtins.int, sp:builtins.int) -> builtins.bool:
        r"""
        Execute program on a given address using the stack pointer.
        
        :param address: Jump address (must be word aligned)
        :param argument: Function arguments address
        :param sp: Stack pointer address
        :return: False in case of any problem; True otherwise
        """
    def call(self, address:builtins.int, argument:builtins.int) -> builtins.bool:
        r"""
        Call function on a given address.
        
        :param address: Call address (must be word aligned)
        :param argument: Function arguments address
        :return: False in case of any problem; True otherwise
        """
    def reset(self) -> builtins.bool:
        r"""
        Reset the MCU.
        
        :return: False in case of any problem; True otherwise
        """
    def fill_memory(self, start_address:builtins.int, byte_count:builtins.int, pattern:builtins.int) -> builtins.bool:
        r"""
        Fill memory region with a pattern.
        
        :param start_address: Start address (must be word aligned)
        :param byte_count: Number of bytes to fill (must be word aligned)  
        :param pattern: 32-bit pattern to fill with
        :return: False in case of any problem; True otherwise
        """
    def flash_erase_all_unsecure(self) -> builtins.bool:
        r"""
        Erase all flash and recover security section.
        
        :return: False in case of any problem; True otherwise
        """
    def configure_memory(self, memory_id:builtins.int, address:builtins.int) -> builtins.bool:
        r"""
        Configure external memory.
        
        :param memory_id: Memory ID to configure
        :param address: Address containing configuration data
        :return: False in case of any problem; True otherwise
        """
    def receive_sb_file(self, data:typing.Sequence[builtins.int]) -> builtins.bool:
        r"""
        Receive and process a Secure Binary (SB) file.
        
        :param data: SB file data as list of bytes
        :return: False in case of any problem; True otherwise
        """
    def trust_provisioning(self, operation:TrustProvOperation) -> tuple[builtins.bool, builtins.list[builtins.int]]:
        r"""
        Execute trust provisioning operation.
        
        :param operation: The trust provisioning operation to execute
        :return: Tuple of (success: bool, response_data: list of integers); (False, []) in case of failure
        """
    def load_image(self, data:typing.Sequence[builtins.int]) -> builtins.bool:
        r"""
        Load image data directly to the device.
        
        :param data: Raw image data to be loaded as list of bytes
        :return: False in case of any problem; True otherwise
        """
    def flash_read_once(self, index:builtins.int, count:builtins.int) -> typing.Optional[builtins.int]:
        r"""
        Read from MCU flash program once region (eFuse/OTP).
        
        :param index: Start index of the eFuse/OTP region
        :param count: Number of bytes to read (must be 4)
        :return: The read value as 32-bit integer; None in case of failure
        """
    def flash_program_once(self, index:builtins.int, count:builtins.int, data:builtins.int, verify:typing.Optional[builtins.bool]=None) -> builtins.bool:
        r"""
        Write into MCU once program region (eFuse/OTP).
        
        :param index: Start index of the eFuse/OTP region
        :param count: Number of bytes to write (must be 4)
        :param data: 32-bit value to write
        :param verify: If true, reads back and verifies the written value, defaults to False
        :return: False in case of any problem; True otherwise
        """
    def kp_enroll(self) -> builtins.bool:
        r"""
        Key provisioning: Enroll Command (start PUF).
        
        :return: False in case of any problem; True otherwise
        """
    def kp_set_intrinsic_key(self, key_type:KeyProvUserKeyType, key_size:builtins.int) -> builtins.bool:
        r"""
        Key provisioning: Generate Intrinsic Key.
        
        :param key_type: Type of the key
        :param key_size: Size of the key
        :return: False in case of any problem; True otherwise
        """
    def kp_write_nonvolatile(self, memory_id:typing.Optional[builtins.int]=None) -> builtins.bool:
        r"""
        Key provisioning: Write the key to a nonvolatile memory.
        
        :param memory_id: The memory ID, defaults to 0
        :return: False in case of any problem; True otherwise
        """
    def kp_read_nonvolatile(self, memory_id:typing.Optional[builtins.int]=None) -> builtins.bool:
        r"""
        Key provisioning: Load the key from a nonvolatile memory to bootloader.
        
        :param memory_id: The memory ID, defaults to 0
        :return: False in case of any problem; True otherwise
        """
    def kp_set_user_key(self, key_type:KeyProvUserKeyType, key_data:typing.Sequence[builtins.int]) -> builtins.bool:
        r"""
        Key provisioning: Send the user key specified by <key_type> to bootloader.
        
        :param key_type: type of the user key, see enumeration for details
        :param key_data: binary content of the user key
        :return: False in case of any problem; True otherwise
        """
    def kp_write_key_store(self, keystore_data:typing.Sequence[builtins.int]) -> builtins.bool:
        r"""
        Key provisioning: Write key data into key store area.
        
        :param keystore_data: key store binary content to be written to processor
        :return: result of the operation; True means success
        """
    def kp_read_key_store(self) -> typing.Optional[builtins.list[builtins.int]]:
        r"""
        Key provisioning: Read key data from key store area.
        
        :return: Key store data as bytes; None in case of failure
        """

class PropertyBaseValue:
    def to_int(self) -> builtins.list[builtins.int]: ...
    def to_str(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class KeyProvUserKeyType(Enum):
    r"""
    User key types for key provisioning operations.
    
    Defines the different types of keys that can be provisioned on the device
    for various encryption and security functions.
    """
    OtfadKek = ...
    r"""
    OTFAD (On-The-Fly AES Decryption) encryption key
    """
    SbKek = ...
    r"""
    Secure Boot file encryption key
    """
    PrinceRegion0 = ...
    r"""
    Prince region 0 encryption key
    """
    PrinceRegion1 = ...
    r"""
    Prince region 1 encryption key
    """
    PrinceRegion2 = ...
    r"""
    Prince region 2 encryption key
    """
    PrinceRegion3 = ...
    r"""
    Prince region 3 encryption key
    """
    UserKek = ...
    r"""
    User/Boot image encryption key
    """
    Uds = ...
    r"""
    Universal Device Secret for DICE (Device Identifier Composition Engine)
    """

class PropertyTag(Enum):
    CurrentVersion = ...
    r"""
    Current version of the bootloader
    """
    AvailablePeripherals = ...
    r"""
    List of available peripheral interfaces
    """
    FlashStartAddress = ...
    r"""
    Start address of the internal flash memory
    
    # Note
    The length includes the "0x" part.
    """
    FlashSize = ...
    r"""
    Size of the internal flash memory
    """
    FlashSectorSize = ...
    r"""
    Size of a single flash sector
    """
    FlashBlockCount = ...
    r"""
    Number of flash blocks
    """
    AvailableCommands = ...
    r"""
    List of available bootloader commands
    """
    CRCCheckStatus = ...
    r"""
    Status of the last CRC check operation
    """
    LastError = ...
    r"""
    Value of the last error that occurred
    """
    VerifyWrites = ...
    r"""
    Whether write operations are verified after completion
    """
    MaxPacketSize = ...
    r"""
    Maximum packet size for data transfer
    """
    ReservedRegions = ...
    r"""
    Memory regions reserved by the bootloader
    """
    ValidateRegions = ...
    r"""
    Regions that should be validated
    """
    RAMStartAddress = ...
    r"""
    Start address of the internal RAM memory
    """
    RAMSize = ...
    r"""
    Size of the internal RAM memory
    """
    SystemDeviceId = ...
    r"""
    System device identification number
    """
    FlashSecurityState = ...
    r"""
    Current security state of the flash memory
    """
    UniqueDeviceId = ...
    r"""
    Unique device identification bytes
    """
    FlashFacSupport = ...
    r"""
    Flash factory support information
    """
    FlashAccessSegmentSize = ...
    r"""
    Size of flash access segments
    """
    FlashAccessSegmentCount = ...
    r"""
    Number of flash access segments
    """
    FlashReadMargin = ...
    r"""
    Flash read margin setting
    """
    QSPIInitStatus = ...
    r"""
    QuadSPI initialization status
    """
    TargetVersion = ...
    r"""
    Target version information
    """
    ExternalMemoryAttributes = ...
    r"""
    Attributes of external memory devices
    """
    ReliableUpdateStatus = ...
    r"""
    Status of reliable update feature
    """
    FlashPageSize = ...
    r"""
    Size of a single flash page
    """
    IrqNotifierPin = ...
    r"""
    IRQ notifier pin configuration
    """
    PFRKeystoreUpdateOpt = ...
    r"""
    PFR keystore update option
    """
    ByteWriteTimeoutMs = ...
    r"""
    Timeout for byte write operations in milliseconds
    """
    FuseLockedStatus = ...
    r"""
    Status of fuse locked state
    """
    BootStatusRegister = ...
    r"""
    Boot status register value
    """
    FirmwareVersion = ...
    r"""
    Firmware version information
    """
    FuseProgramVoltage = ...
    r"""
    Fuse program voltage setting
    """
    VerifyErase = ...
    r"""
    Whether erase operations are verified after completion
    """
    SHEFlashPartition = ...
    r"""
    Secure Hardware Extension flash partition information
    """
    SHEBootMode = ...
    r"""
    Secure Hardware Extension boot mode information
    """
    LifeCycleState = ...
    r"""
    Current life cycle state of the device
    """

class StatusCode(Enum):
    r"""
    Bootloader status codes enumeration.
    
    Represents all possible status codes that can be returned by the bootloader.
    Status codes are organized by subsystem and indicate the result of command execution.
    """
    Success = ...
    r"""
    Command executed successfully
    """
    Fail = ...
    r"""
    General failure
    """
    ReadOnly = ...
    r"""
    Operation not allowed on read-only target
    """
    OutOfRange = ...
    r"""
    Parameter value is out of range
    """
    InvalidArgument = ...
    r"""
    Invalid argument provided
    """
    Timeout = ...
    r"""
    Operation timed out
    """
    NoTransferInProgress = ...
    r"""
    No data transfer currently in progress
    """
    FlashSizeError = ...
    r"""
    Flash driver: Size parameter is invalid
    """
    FlashAlignmentError = ...
    r"""
    Flash driver: Address alignment is incorrect
    """
    FlashAddressError = ...
    r"""
    Flash driver: Address is invalid or out of range
    """
    FlashAccessError = ...
    r"""
    Flash driver: Access to flash memory failed
    """
    FlashProtectionViolation = ...
    r"""
    Flash driver: Write protection violation
    """
    FlashCommandFailure = ...
    r"""
    Flash driver: Flash command execution failed
    """
    FlashUnknownProperty = ...
    r"""
    Flash driver: Unknown property requested
    """
    FlashEraseKeyError = ...
    r"""
    Flash driver: Erase key does not match programmed key
    """
    FlashRegionExecuteOnly = ...
    r"""
    Flash driver: Region is execute-only
    """
    FlashExecInRamNotReady = ...
    r"""
    Flash driver: Execute-in-RAM function not ready
    """
    FlashCommandNotSupported = ...
    r"""
    Flash driver: Command not supported
    """
    FlashReadOnlyProperty = ...
    r"""
    Flash driver: Property is read-only
    """
    FlashInvalidPropertyValue = ...
    r"""
    Flash driver: Property value is out of range
    """
    FlashInvalidSpeculationOption = ...
    r"""
    Flash driver: Prefetch speculation option is invalid
    """
    FlashEccError = ...
    r"""
    Flash driver: ECC error detected
    """
    FlashCompareError = ...
    r"""
    Flash driver: Memory contents do not match after verification
    """
    FlashRegulationLoss = ...
    r"""
    Flash driver: Regulation lost during read operation
    """
    FlashInvalidWaitStateCycles = ...
    r"""
    Flash driver: Wait state cycles setting is invalid
    """
    FlashOutOfDateCfpaPage = ...
    r"""
    Flash driver: CFPA page is out of date
    """
    FlashBlankIfrPageData = ...
    r"""
    Flash driver: IFR page data is blank
    """
    FlashEncryptedRegionsEraseNotDoneAtOnce = ...
    r"""
    Flash driver: Encrypted regions must be erased together
    """
    FlashProgramVerificationNotAllowed = ...
    r"""
    Flash driver: Program verification is not allowed
    """
    FlashHashCheckError = ...
    r"""
    Flash driver: Hash check failed
    """
    FlashSealedPfrRegion = ...
    r"""
    Flash driver: PFR region is sealed
    """
    FlashPfrRegionWriteBroken = ...
    r"""
    Flash driver: PFR region write is broken
    """
    FlashNmpaUpdateNotAllowed = ...
    r"""
    Flash driver: NMPA update is not allowed
    """
    FlashCmpaCfgDirectEraseNotAllowed = ...
    r"""
    Flash driver: CMPA configuration direct erase is not allowed
    """
    FlashPfrBankIsLocked = ...
    r"""
    Flash driver: PFR bank is locked
    """
    FlashCfpaScratchPageInvalid = ...
    r"""
    Flash driver: CFPA scratch page is invalid
    """
    FlashCfpaVersionRollbackDisallowed = ...
    r"""
    Flash driver: CFPA version rollback is disallowed
    """
    FlashReadHidingAreaDisallowed = ...
    r"""
    Flash driver: Reading from hiding area is disallowed
    """
    FlashModifyProtectedAreaDisallowed = ...
    r"""
    Flash driver: Modifying protected area is disallowed
    """
    FlashCommandOperationInProgress = ...
    r"""
    Flash driver: Flash command operation is in progress
    """
    I2cSlaveTxUnderrun = ...
    r"""
    I2C driver: Slave transmit underrun
    """
    I2cSlaveRxOverrun = ...
    r"""
    I2C driver: Slave receive overrun
    """
    I2cArbitrationLost = ...
    r"""
    I2C driver: Arbitration lost on bus
    """
    SpiSlaveTxUnderrun = ...
    r"""
    SPI driver: Slave transmit underrun
    """
    SpiSlaveRxOverrun = ...
    r"""
    SPI driver: Slave receive overrun
    """
    QspiFlashSizeError = ...
    r"""
    QuadSPI driver: Flash size error
    """
    QspiFlashAlignmentError = ...
    r"""
    QuadSPI driver: Flash alignment error
    """
    QspiFlashAddressError = ...
    r"""
    QuadSPI driver: Flash address error
    """
    QspiFlashCommandFailure = ...
    r"""
    QuadSPI driver: Flash command failure
    """
    QspiFlashUnknownProperty = ...
    r"""
    QuadSPI driver: Unknown property
    """
    QspiNotConfigured = ...
    r"""
    QuadSPI driver: Interface not configured
    """
    QspiCommandNotSupported = ...
    r"""
    QuadSPI driver: Command not supported
    """
    QspiCommandTimeout = ...
    r"""
    QuadSPI driver: Command timed out
    """
    QspiWriteFailure = ...
    r"""
    QuadSPI driver: Write operation failed
    """
    OtfadSecurityViolation = ...
    r"""
    OTFAD driver: Security violation detected
    """
    OtfadLogicallyDisabled = ...
    r"""
    OTFAD driver: Logically disabled
    """
    OtfadInvalidKey = ...
    r"""
    OTFAD driver: Invalid key provided
    """
    OtfadInvalidKeyBlob = ...
    r"""
    OTFAD driver: Invalid key blob
    """
    SendingOperationConditionError = ...
    r"""
    Send operation condition failed
    """
    FlexspiSequenceExecutionTimeoutRt5xx = ...
    r"""
    FlexSPI: Sequence execution timeout (RT5xx)
    """
    FlexspiInvalidSequenceRt5xx = ...
    r"""
    FlexSPI: Invalid sequence (RT5xx)
    """
    FlexspiDeviceTimeoutRt5xx = ...
    r"""
    FlexSPI: Device timeout (RT5xx)
    """
    FlexspiSequenceExecutionTimeout = ...
    r"""
    FlexSPI: Sequence execution timeout
    """
    FlexspiInvalidSequence = ...
    r"""
    FlexSPI: Invalid sequence
    """
    FlexspiDeviceTimeout = ...
    r"""
    FlexSPI: Device timeout
    """
    UnknownCommand = ...
    r"""
    Bootloader: Unknown command received
    """
    SecurityViolation = ...
    r"""
    Bootloader: Security violation detected
    """
    AbortDataPhase = ...
    r"""
    Bootloader: Data phase aborted
    """
    PingError = ...
    r"""
    Bootloader: Ping command failed
    """
    NoResponse = ...
    r"""
    Bootloader: No response packet received from target
    """
    NoResponseExpected = ...
    r"""
    Bootloader: No response expected for this command
    """
    UnsupportedCommand = ...
    r"""
    Bootloader: Command is not supported
    """
    RomldrSectionOverrun = ...
    r"""
    ROM loader: Section overrun detected
    """
    RomldrSignature = ...
    r"""
    ROM loader: Signature verification failed
    """
    RomldrSectionLength = ...
    r"""
    ROM loader: Section length is invalid
    """
    RomldrUnencryptedOnly = ...
    r"""
    ROM loader: Only unencrypted content allowed
    """
    RomldrEofReached = ...
    r"""
    ROM loader: End of file reached
    """
    RomldrChecksum = ...
    r"""
    ROM loader: Checksum verification failed
    """
    RomldrCrc32Error = ...
    r"""
    ROM loader: CRC32 verification failed
    """
    RomldrUnknownCommand = ...
    r"""
    ROM loader: Unknown command received
    """
    RomldrIdNotFound = ...
    r"""
    ROM loader: ID not found
    """
    RomldrDataUnderrun = ...
    r"""
    ROM loader: Data underrun detected
    """
    RomldrJumpReturned = ...
    r"""
    ROM loader: Jump instruction returned
    """
    RomldrCallFailed = ...
    r"""
    ROM loader: Function call failed
    """
    RomldrKeyNotFound = ...
    r"""
    ROM loader: Key not found
    """
    RomldrSecureOnly = ...
    r"""
    ROM loader: Secure mode only
    """
    RomldrResetReturned = ...
    r"""
    ROM loader: Reset instruction returned
    """
    RomldrRollbackBlocked = ...
    r"""
    ROM loader: Rollback is blocked
    """
    RomldrInvalidSectionMacCount = ...
    r"""
    ROM loader: Invalid section MAC count
    """
    RomldrUnexpectedCommand = ...
    r"""
    ROM loader: Unexpected command received
    """
    RomldrBadSbkek = ...
    r"""
    ROM loader: Bad SBKEK detected
    """
    RomldrPendingJumpCommand = ...
    r"""
    ROM loader: Jump command is pending
    """
    MemoryRangeInvalid = ...
    r"""
    Memory interface: Address range is invalid
    """
    MemoryReadFailed = ...
    r"""
    Memory interface: Read operation failed
    """
    MemoryWriteFailed = ...
    r"""
    Memory interface: Write operation failed
    """
    MemoryCumulativeWrite = ...
    r"""
    Memory interface: Cumulative write detected
    """
    MemoryAppOverlapWithExecuteOnlyRegion = ...
    r"""
    Memory interface: Application overlaps with execute-only region
    """
    MemoryNotConfigured = ...
    r"""
    Memory interface: Memory not configured
    """
    MemoryAlignmentError = ...
    r"""
    Memory interface: Address alignment error
    """
    MemoryVerifyFailed = ...
    r"""
    Memory interface: Verification failed
    """
    MemoryWriteProtected = ...
    r"""
    Memory interface: Memory is write protected
    """
    MemoryAddressError = ...
    r"""
    Memory interface: Address is invalid
    """
    MemoryBlankCheckFailed = ...
    r"""
    Memory interface: Blank check failed
    """
    MemoryBlankPageReadDisallowed = ...
    r"""
    Memory interface: Blank page read is disallowed
    """
    MemoryProtectedPageReadDisallowed = ...
    r"""
    Memory interface: Protected page read is disallowed
    """
    MemoryPfrSpecRegionWriteBroken = ...
    r"""
    Memory interface: PFR spec region write is broken
    """
    MemoryUnsupportedCommand = ...
    r"""
    Memory interface: Command not supported
    """
    UnknownProperty = ...
    r"""
    Property store: Unknown property requested
    """
    ReadOnlyProperty = ...
    r"""
    Property store: Property is read-only
    """
    InvalidPropertyValue = ...
    r"""
    Property store: Property value is invalid
    """
    AppCrcCheckPassed = ...
    r"""
    Application CRC check passed
    """
    AppCrcCheckFailed = ...
    r"""
    Application CRC check failed
    """
    AppCrcCheckInactive = ...
    r"""
    Application CRC check is inactive
    """
    AppCrcCheckInvalid = ...
    r"""
    Application CRC check is invalid
    """
    AppCrcCheckOutOfRange = ...
    r"""
    Application CRC check is out of range
    """
    PacketizerNoPingResponse = ...
    r"""
    Packetizer: No ping response received
    """
    PacketizerInvalidPacketType = ...
    r"""
    Packetizer: Invalid packet type
    """
    PacketizerInvalidCrc = ...
    r"""
    Packetizer: Invalid CRC
    """
    PacketizerNoCommandResponse = ...
    r"""
    Packetizer: No command response received
    """
    ReliableUpdateSuccess = ...
    r"""
    Reliable update: Operation successful
    """
    ReliableUpdateFail = ...
    r"""
    Reliable update: Operation failed
    """
    ReliableUpdateInactive = ...
    r"""
    Reliable update: Feature is inactive
    """
    ReliableUpdateBackupapplicationinvalid = ...
    r"""
    Reliable update: Backup application is invalid
    """
    ReliableUpdateStillinmainapplication = ...
    r"""
    Reliable update: Still in main application
    """
    ReliableUpdateSwapsystemnotready = ...
    r"""
    Reliable update: Swap system is not ready
    """
    ReliableUpdateBackupbootloadernotready = ...
    r"""
    Reliable update: Backup bootloader is not ready
    """
    ReliableUpdateSwapindicatoraddressinvalid = ...
    r"""
    Reliable update: Swap indicator address is invalid
    """
    ReliableUpdateSwapsystemnotavailable = ...
    r"""
    Reliable update: Swap system is not available
    """
    ReliableUpdateSwaptest = ...
    r"""
    Reliable update: Swap test mode
    """
    SerialNorEepromAddressInvalid = ...
    r"""
    Serial NOR/EEPROM: Address is invalid
    """
    SerialNorEepromTransferError = ...
    r"""
    Serial NOR/EEPROM: Transfer error occurred
    """
    SerialNorEepromTypeInvalid = ...
    r"""
    Serial NOR/EEPROM: Type is invalid
    """
    SerialNorEepromSizeInvalid = ...
    r"""
    Serial NOR/EEPROM: Size is invalid
    """
    SerialNorEepromCommandInvalid = ...
    r"""
    Serial NOR/EEPROM: Command is invalid
    """
    RomApiNeedMoreData = ...
    r"""
    ROM API: Need more data
    """
    RomApiBufferSizeNotEnough = ...
    r"""
    ROM API: Buffer size is not enough
    """
    RomApiInvalidBuffer = ...
    r"""
    ROM API: Invalid buffer provided
    """
    FlexspinandReadPageFail = ...
    r"""
    FlexSPI NAND: Read page failed
    """
    FlexspinandReadCacheFail = ...
    r"""
    FlexSPI NAND: Read cache failed
    """
    FlexspinandEccCheckFail = ...
    r"""
    FlexSPI NAND: ECC check failed
    """
    FlexspinandPageLoadFail = ...
    r"""
    FlexSPI NAND: Page load failed
    """
    FlexspinandPageExecuteFail = ...
    r"""
    FlexSPI NAND: Page execute failed
    """
    FlexspinandEraseBlockFail = ...
    r"""
    FlexSPI NAND: Erase block failed
    """
    FlexspinandWaitTimeout = ...
    r"""
    FlexSPI NAND: Wait timeout occurred
    """
    FlexSpinandNotSupported = ...
    r"""
    FlexSPI NAND: Page size exceeds maximum supported
    """
    FlexSpinandFcbUpdateFail = ...
    r"""
    FlexSPI NAND: FCB update failed
    """
    FlexSpinandDbbtUpdateFail = ...
    r"""
    FlexSPI NAND: DBBT update failed
    """
    FlexspinandWritealignmenterror = ...
    r"""
    FlexSPI NAND: Write alignment error
    """
    FlexspinandNotFound = ...
    r"""
    FlexSPI NAND: Device not found
    """
    FlexspinorProgramFail = ...
    r"""
    FlexSPI NOR: Program operation failed
    """
    FlexspinorEraseSectorFail = ...
    r"""
    FlexSPI NOR: Erase sector failed
    """
    FlexspinorEraseAllFail = ...
    r"""
    FlexSPI NOR: Erase all failed
    """
    FlexspinorWaitTimeout = ...
    r"""
    FlexSPI NOR: Wait timeout occurred
    """
    FlexspinorNotSupported = ...
    r"""
    FlexSPI NOR: Page size exceeds maximum supported
    """
    FlexspinorWriteAlignmentError = ...
    r"""
    FlexSPI NOR: Write alignment error
    """
    FlexspinorCommandFailure = ...
    r"""
    FlexSPI NOR: Command failure
    """
    FlexspinorSfdpNotFound = ...
    r"""
    FlexSPI NOR: SFDP not found
    """
    FlexspinorUnsupportedSfdpVersion = ...
    r"""
    FlexSPI NOR: Unsupported SFDP version
    """
    FlexspinorFlashNotFound = ...
    r"""
    FlexSPI NOR: Flash not found
    """
    FlexspinorDtrReadDummyProbeFailed = ...
    r"""
    FlexSPI NOR: DTR read dummy probe failed
    """
    OcotpReadFailure = ...
    r"""
    OCOTP: Read failure
    """
    OcotpProgramFailure = ...
    r"""
    OCOTP: Program failure
    """
    OcotpReloadFailure = ...
    r"""
    OCOTP: Reload failure
    """
    OcotpWaitTimeout = ...
    r"""
    OCOTP: Wait timeout occurred
    """
    SemcnorDeviceTimeout = ...
    r"""
    SEMC NOR: Device timeout
    """
    SemcnorInvalidMemoryAddress = ...
    r"""
    SEMC NOR: Invalid memory address
    """
    SemcnorUnmatchedCommandSet = ...
    r"""
    SEMC NOR: Unmatched command set
    """
    SemcnorAddressAlignmentError = ...
    r"""
    SEMC NOR: Address alignment error
    """
    SemcnorInvalidCfiSignature = ...
    r"""
    SEMC NOR: Invalid CFI signature
    """
    SemcnorCommandErrorNoOpToSuspend = ...
    r"""
    SEMC NOR: Command error - no operation to suspend
    """
    SemcnorCommandErrorNoInfoAvailable = ...
    r"""
    SEMC NOR: Command error - no information available
    """
    SemcnorBlockEraseCommandFailure = ...
    r"""
    SEMC NOR: Block erase command failure
    """
    SemcnorBufferProgramCommandFailure = ...
    r"""
    SEMC NOR: Buffer program command failure
    """
    SemcnorProgramVerifyFailure = ...
    r"""
    SEMC NOR: Program verify failure
    """
    SemcnorEraseVerifyFailure = ...
    r"""
    SEMC NOR: Erase verify failure
    """
    SemcnorInvalidCfgTag = ...
    r"""
    SEMC NOR: Invalid configuration tag
    """
    SemcnandDeviceTimeout = ...
    r"""
    SEMC NAND: Device timeout
    """
    SemcnandInvalidMemoryAddress = ...
    r"""
    SEMC NAND: Invalid memory address
    """
    SemcnandNotEqualToOnePageSize = ...
    r"""
    SEMC NAND: Not equal to one page size
    """
    SemcnandMoreThanOnePageSize = ...
    r"""
    SEMC NAND: More than one page size
    """
    SemcnandEccCheckFail = ...
    r"""
    SEMC NAND: ECC check failed
    """
    SemcnandInvalidOnfiParameter = ...
    r"""
    SEMC NAND: Invalid ONFI parameter
    """
    SemcnandCannotEnableDeviceEcc = ...
    r"""
    SEMC NAND: Cannot enable device ECC
    """
    SemcnandSwitchTimingModeFailure = ...
    r"""
    SEMC NAND: Switch timing mode failure
    """
    SemcnandProgramVerifyFailure = ...
    r"""
    SEMC NAND: Program verify failure
    """
    SemcnandEraseVerifyFailure = ...
    r"""
    SEMC NAND: Erase verify failure
    """
    SemcnandInvalidReadbackBuffer = ...
    r"""
    SEMC NAND: Invalid readback buffer
    """
    SemcnandInvalidCfgTag = ...
    r"""
    SEMC NAND: Invalid configuration tag
    """
    SemcnandFailToUpdateFcb = ...
    r"""
    SEMC NAND: Failed to update FCB
    """
    SemcnandFailToUpdateDbbt = ...
    r"""
    SEMC NAND: Failed to update DBBT
    """
    SemcnandDisallowOverwriteBcb = ...
    r"""
    SEMC NAND: Disallow overwrite BCB
    """
    SemcnandOnlySupportOnfiDevice = ...
    r"""
    SEMC NAND: Only support ONFI device
    """
    SemcnandMoreThanMaxImageCopy = ...
    r"""
    SEMC NAND: More than max image copy
    """
    SemcnandDisorderedImageCopies = ...
    r"""
    SEMC NAND: Disordered image copies
    """
    SpifinorProgramFail = ...
    r"""
    SPIFI NOR: Program operation failed
    """
    SpifinorEraseSectorfail = ...
    r"""
    SPIFI NOR: Erase sector failed
    """
    SpifinorEraseAllFail = ...
    r"""
    SPIFI NOR: Erase all failed
    """
    SpifinorWaitTimeout = ...
    r"""
    SPIFI NOR: Wait timeout occurred
    """
    SpifinorNotSupported = ...
    r"""
    SPIFI NOR: Operation not supported
    """
    SpifinorWriteAlignmentError = ...
    r"""
    SPIFI NOR: Write alignment error
    """
    SpifinorCommandFailure = ...
    r"""
    SPIFI NOR: Command failure
    """
    SpifinorSfdpNotFound = ...
    r"""
    SPIFI NOR: SFDP not found
    """
    EdgelockInvalidResponse = ...
    r"""
    EdgeLock Enclave: Invalid response
    """
    EdgelockResponseError = ...
    r"""
    EdgeLock Enclave: Response error
    """
    EdgelockAbort = ...
    r"""
    EdgeLock Enclave: Operation aborted
    """
    EdgelockOperationFailed = ...
    r"""
    EdgeLock Enclave: Operation failed
    """
    EdgelockOtpProgramFailure = ...
    r"""
    EdgeLock Enclave: OTP program failure
    """
    EdgelockOtpLocked = ...
    r"""
    EdgeLock Enclave: OTP is locked
    """
    EdgelockOtpInvalidIdx = ...
    r"""
    EdgeLock Enclave: OTP invalid index
    """
    EdgelockInvalidLifecycle = ...
    r"""
    EdgeLock Enclave: Invalid lifecycle state
    """
    OtpInvalidAddress = ...
    r"""
    OTP: Invalid OTP address
    """
    OtpProgramFail = ...
    r"""
    OTP: Programming failed
    """
    OtpCrcFail = ...
    r"""
    OTP: CRC check failed
    """
    OtpError = ...
    r"""
    OTP: Error occurred during operation
    """
    OtpEccCrcFail = ...
    r"""
    OTP: ECC check failed during operation
    """
    OtpLocked = ...
    r"""
    OTP: Field is locked when programming
    """
    OtpTimeout = ...
    r"""
    OTP: Operation timed out
    """
    OtpCrcCheckPass = ...
    r"""
    OTP: CRC check passed
    """
    OtpVerifyFail = ...
    r"""
    OTP: Failed to verify OTP write
    """
    SecuritySubsystemError = ...
    r"""
    Security subsystem error
    """
    TpGeneralError = ...
    r"""
    Trust Provisioning: General error
    """
    TpCryptoError = ...
    r"""
    Trust Provisioning: Cryptographic operation error
    """
    TpNullptrError = ...
    r"""
    Trust Provisioning: Null pointer dereference or buffer allocation failed
    """
    TpAlreadyinitialized = ...
    r"""
    Trust Provisioning: Already initialized
    """
    TpBuffersmall = ...
    r"""
    Trust Provisioning: Buffer is too small
    """
    TpAddressError = ...
    r"""
    Trust Provisioning: Address out of range or buffer allocation failed
    """
    TpContainerInvalid = ...
    r"""
    Trust Provisioning: Container header or size is invalid
    """
    TpContainerentryinvalid = ...
    r"""
    Trust Provisioning: Container entry invalid
    """
    TpContainerentrynotfound = ...
    r"""
    Trust Provisioning: Container entry not found
    """
    TpInvalidstateoperation = ...
    r"""
    Trust Provisioning: Invalid state operation
    """
    TpCommandError = ...
    r"""
    Trust Provisioning: ISP command arguments are invalid
    """
    TpPufError = ...
    r"""
    Trust Provisioning: PUF operation error
    """
    TpFlashError = ...
    r"""
    Trust Provisioning: Flash operation failed
    """
    TpSecretboxError = ...
    r"""
    Trust Provisioning: Secret box error
    """
    TpPfrError = ...
    r"""
    Trust Provisioning: PFR operation failed
    """
    TpVerificationError = ...
    r"""
    Trust Provisioning: Container signature verification failed
    """
    TpCfpaError = ...
    r"""
    Trust Provisioning: CFPA page cannot be stored
    """
    TpCmpaError = ...
    r"""
    Trust Provisioning: CMPA page cannot be stored
    """
    TpAddrOutOfRange = ...
    r"""
    Trust Provisioning: Address is out of range
    """
    TpContainerAddrError = ...
    r"""
    Trust Provisioning: Container address error
    """
    TpContainerAddrUnaligned = ...
    r"""
    Trust Provisioning: Container address unaligned
    """
    TpContainerBuffSmall = ...
    r"""
    Trust Provisioning: Container buffer too small
    """
    TpContainerNoEntry = ...
    r"""
    Trust Provisioning: Container has no entry
    """
    TpCertAddrError = ...
    r"""
    Trust Provisioning: Certificate address error
    """
    TpCertAddrUnaligned = ...
    r"""
    Trust Provisioning: Certificate address unaligned
    """
    TpCertOverlapping = ...
    r"""
    Trust Provisioning: Certificate overlapping
    """
    TpPacketError = ...
    r"""
    Trust Provisioning: Packet error
    """
    TpPacketDataError = ...
    r"""
    Trust Provisioning: Packet data error
    """
    TpUnknownCommand = ...
    r"""
    Trust Provisioning: Unknown command
    """
    TpSb3FileError = ...
    r"""
    Trust Provisioning: SB3 file error
    """
    TpGeneralCriticalError = ...
    r"""
    Trust Provisioning: General critical error
    """
    TpCryptoCriticalError = ...
    r"""
    Trust Provisioning: Crypto critical error
    """
    TpPufCriticalError = ...
    r"""
    Trust Provisioning: PUF critical error
    """
    TpPfrCriticalError = ...
    r"""
    Trust Provisioning: PFR critical error
    """
    TpPeripheralCriticalError = ...
    r"""
    Trust Provisioning: Peripheral critical error
    """
    TpPrinceCriticalError = ...
    r"""
    Trust Provisioning: Prince critical error
    """
    TpShaCheckCriticalError = ...
    r"""
    Trust Provisioning: SHA check verification failed
    """
    IapInvalidArgument = ...
    r"""
    IAP: Invalid argument detected during API execution
    """
    IapOutOfMemory = ...
    r"""
    IAP: Heap size not large enough during API execution
    """
    IapReadDisallowed = ...
    r"""
    IAP: Read memory operation disallowed during API execution
    """
    IapCumulativeWrite = ...
    r"""
    IAP: Flash memory region to be programmed is not empty
    """
    IapEraseFailure = ...
    r"""
    IAP: Erase operation failed
    """
    IapCommandNotSupported = ...
    r"""
    IAP: Specific command not supported
    """
    IapMemoryAccessDisabled = ...
    r"""
    IAP: Memory access disabled
    """
    El2goProvSuccess = ...
    r"""
    EL2Go: Device has been successfully provisioned
    """
    UnknownStatusCode = ...
    r"""
    Unknown status code (fallback for unrecognized codes)
    
    Not defined in any specification, only for handling unexpected or undefined status codes
    """

class TrustProvOperation(Enum):
    r"""
    Trust provisioning operations for device security setup.
    
    These operations handle OEM master share generation and configuration
    for establishing device trust relationships.
    """
    OemGenMasterShare = ...
    r"""
    Generate OEM master share for initial trust provisioning
    """
    OemSetMasterShare = ...
    r"""
    Set OEM master share to complete trust provisioning
    """

def parse_property_tag(property_tag:builtins.str, family:typing.Optional[builtins.str]=None) -> PropertyTag: ...

def parse_property_value(property_tag:PropertyTag, raw_values:typing.Sequence[builtins.int], ext_mem_id:typing.Optional[builtins.int]=None, family:typing.Optional[builtins.str]=None) -> PropertyBaseValue: ...


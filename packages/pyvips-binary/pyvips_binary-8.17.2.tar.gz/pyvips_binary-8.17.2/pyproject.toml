[build-system]
requires = [
    # First version of setuptools to support pyproject.toml configuration
    "setuptools>=61.0.0",
    # Must be kept in sync with `project.dependencies`
    "cffi>=1.0.0",
    "pkgconfig>=1.5",
]
build-backend = "setuptools.build_meta"

[project]
name = "pyvips-binary"
# Must be kept in sync with scripts/download-vips.py
version = "8.17.2"
authors = [
    {name = "Kleis Auke Wolthuizen", email = "info@kleisauke.nl"},
]
description = "Binary distribution of libvips and dependencies for use with pyvips"
readme = "README.md"
license = {text = "LGPL-3.0-or-later"}
# Must be kept in sync with setup.py
requires-python = ">=3.7"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    # Must be kept in sync with `build-system.requires`
    "cffi>=1.0.0",
]

[project.urls]
changelog ="https://github.com/kleisauke/pyvips-binary/blob/main/CHANGELOG.md"
funding = "https://opencollective.com/libvips"
homepage = "https://github.com/kleisauke/pyvips-binary"
issues = "https://github.com/kleisauke/pyvips-binary/issues"
source = "https://github.com/kleisauke/pyvips-binary"

[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
exclude = [
    "pyvips*",
    "scripts*",
]

[tool.cibuildwheel]
# Our wheels are ABI3, so building with CPython 3.13 is safe
build = "cp313-*"
# https://github.com/lovell/sharp-libvips/issues/59
skip = "cp313-musllinux_armv7l"
before-build = "bash {package}/scripts/cibw_before_build.sh"
test-command = "python -c \"import _libvips; assert _libvips.lib.vips_version(0) == 8\""
environment-pass = ["RUNNER_OS"]

[tool.cibuildwheel.environment]
PKG_CONFIG_PATH = "./tmp/lib/pkgconfig"
LD_LIBRARY_PATH = "$(pwd)/tmp/lib"
DYLD_LIBRARY_PATH = "$(pwd)/tmp/lib"
MACOSX_DEPLOYMENT_TARGET = "10.15"

[tool.cibuildwheel.linux]
archs = "x86_64 aarch64 armv7l"
# Use abi3audit to catch issues with Limited API wheels
repair-wheel-command = [
  "auditwheel repair -w {dest_dir} {wheel}",
  "pipx run abi3audit --strict --report {wheel}",
]

[[tool.cibuildwheel.overrides]]
select = "*-musllinux*"
repair-wheel-command = [
  # Exclude a couple of system libraries from grafting into the resulting wheel
  "auditwheel repair -w {dest_dir} {wheel} --exclude libc.so --exclude libstdc++.so.6 --exclude libgcc_s.so.1",
  "pipx run abi3audit --strict --report {wheel}",
]

[tool.cibuildwheel.macos]
archs = "x86_64 arm64"
# https://github.com/pypa/cibuildwheel/pull/1169
test-skip = "*-macosx_arm64"
repair-wheel-command = [
  "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}",
  "pipx run abi3audit --strict --report {wheel}",
]

[tool.cibuildwheel.windows]
archs = "AMD64 x86 ARM64"
# Use delvewheel on Windows
before-all = "pip install delvewheel"
repair-wheel-command = [
  "delvewheel repair -w {dest_dir} {wheel} --add-path ./tmp/lib --no-diagnostic",
  "pipx run abi3audit --strict --report {wheel}",
]

#!/usr/bin/env python3
"""
Comandos CLI de Connection

Comandos CLI para gerenciamento de conex√µes RabbitMQ,
incluindo conectar, desconectar, status e listagem.

Licen√ßa: LGPL-3.0
Autor: RabbitMQ MCP Team
"""

import asyncio
import json
from typing import Optional, Dict, Any
import click
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from rich import box

from src.mcp.tools.connection_tools import (
    connection_connect, connection_disconnect, 
    connection_status, connection_list
)
from src.shared.utils.serialization import Serializer

console = Console()


@click.group(name="connection", help="Comandos de gerenciamento de conex√µes RabbitMQ")
def connection_group():
    """Grupo de comandos para conex√µes."""
    pass


@connection_group.command(name="connect", help="Conectar ao servidor RabbitMQ")
@click.option("--host", "-h", required=True, help="Hostname ou IP do servidor RabbitMQ")
@click.option("--port", "-p", default=5672, type=int, help="Porta do servidor RabbitMQ")
@click.option("--username", "-u", required=True, help="Nome de usu√°rio para autentica√ß√£o")
@click.option("--password", "-w", required=True, help="Senha para autentica√ß√£o")
@click.option("--virtual-host", "-v", default="/", help="Virtual host")
@click.option("--ssl", is_flag=True, help="Habilitar SSL/TLS")
@click.option("--timeout", "-t", default=30, type=int, help="Timeout de conex√£o em segundos")
@click.option("--heartbeat", default=600, type=int, help="Intervalo de heartbeat em segundos")
@click.option("--output", "-o", type=click.Choice(["table", "json", "text"]), default="table", help="Formato de sa√≠da")
def connect_command(host: str, port: int, username: str, password: str, 
                   virtual_host: str, ssl: bool, timeout: int, heartbeat: int, output: str):
    """Conecta ao servidor RabbitMQ."""
    
    async def _connect():
        try:
            # Preparar par√¢metros
            params = {
                "host": host,
                "port": port,
                "username": username,
                "password": password,
                "virtual_host": virtual_host,
                "ssl_enabled": ssl,
                "connection_timeout": timeout,
                "heartbeat_interval": heartbeat
            }
            
            # Mostrar progresso
            with console.status("[bold green]Conectando ao RabbitMQ..."):
                result = await connection_connect(params)
            
            # Parsear resultado
            result_data = json.loads(result)
            
            if result_data.get("status") == "success":
                data = result_data.get("data", {})
                connection_info = data.get("connection_info", {})
                
                if output == "json":
                    console.print_json(result)
                elif output == "text":
                    console.print(f"‚úÖ Conex√£o estabelecida: {connection_info.get('connection_id', 'N/A')}")
                    console.print(f"   Host: {connection_info.get('host', 'N/A')}:{connection_info.get('port', 'N/A')}")
                    console.print(f"   Usu√°rio: {connection_info.get('username', 'N/A')}")
                    console.print(f"   Virtual Host: {connection_info.get('virtual_host', 'N/A')}")
                    console.print(f"   SSL: {'Sim' if connection_info.get('ssl_enabled') else 'N√£o'}")
                else:  # table
                    _display_connection_info(connection_info)
            else:
                error_msg = result_data.get("error_message", "Erro desconhecido")
                console.print(f"[bold red]‚ùå Erro na conex√£o: {error_msg}")
                return 1
                
        except Exception as e:
            console.print(f"[bold red]‚ùå Erro inesperado: {str(e)}")
            return 1
        
        return 0
    
    exit_code = asyncio.run(_connect())
    if exit_code != 0:
        raise click.Abort()


@connection_group.command(name="disconnect", help="Desconectar do servidor RabbitMQ")
@click.option("--connection-id", "-c", required=True, help="ID da conex√£o para desconectar")
@click.option("--output", "-o", type=click.Choice(["table", "json", "text"]), default="text", help="Formato de sa√≠da")
def disconnect_command(connection_id: str, output: str):
    """Desconecta do servidor RabbitMQ."""
    
    async def _disconnect():
        try:
            params = {"connection_id": connection_id}
            
            with console.status("[bold yellow]Desconectando..."):
                result = await connection_disconnect(params)
            
            result_data = json.loads(result)
            
            if result_data.get("status") == "success":
                if output == "json":
                    console.print_json(result)
                else:
                    console.print(f"‚úÖ Conex√£o {connection_id} desconectada com sucesso")
            else:
                error_msg = result_data.get("error_message", "Erro desconhecido")
                console.print(f"[bold red]‚ùå Erro na desconex√£o: {error_msg}")
                return 1
                
        except Exception as e:
            console.print(f"[bold red]‚ùå Erro inesperado: {str(e)}")
            return 1
        
        return 0
    
    exit_code = asyncio.run(_disconnect())
    if exit_code != 0:
        raise click.Abort()


@connection_group.command(name="status", help="Verificar status da conex√£o")
@click.option("--connection-id", "-c", required=True, help="ID da conex√£o para verificar")
@click.option("--output", "-o", type=click.Choice(["table", "json", "text"]), default="table", help="Formato de sa√≠da")
def status_command(connection_id: str, output: str):
    """Verifica o status da conex√£o."""
    
    async def _status():
        try:
            params = {"connection_id": connection_id}
            
            with console.status("[bold blue]Verificando status..."):
                result = await connection_status(params)
            
            result_data = json.loads(result)
            
            if result_data.get("status") == "success":
                data = result_data.get("data", {})
                connection_info = data.get("connection_info", {})
                stats = data.get("stats")
                
                if output == "json":
                    console.print_json(result)
                elif output == "text":
                    status_icon = "üü¢" if data.get("is_connected") else "üî¥"
                    console.print(f"{status_icon} Status: {data.get('status', 'N/A')}")
                    console.print(f"   Conectado: {'Sim' if data.get('is_connected') else 'N√£o'}")
                    console.print(f"   Host: {connection_info.get('host', 'N/A')}:{connection_info.get('port', 'N/A')}")
                    console.print(f"   Virtual Host: {connection_info.get('virtual_host', 'N/A')}")
                    if stats:
                        console.print(f"   Uptime: {stats.get('uptime_seconds', 0):.0f}s")
                else:  # table
                    _display_connection_status(data, connection_info, stats)
            else:
                error_msg = result_data.get("error_message", "Erro desconhecido")
                console.print(f"[bold red]‚ùå Erro ao verificar status: {error_msg}")
                return 1
                
        except Exception as e:
            console.print(f"[bold red]‚ùå Erro inesperado: {str(e)}")
            return 1
        
        return 0
    
    exit_code = asyncio.run(_status())
    if exit_code != 0:
        raise click.Abort()


@connection_group.command(name="list", help="Listar todas as conex√µes ativas")
@click.option("--include-stats", "-s", is_flag=True, help="Incluir estat√≠sticas das conex√µes")
@click.option("--output", "-o", type=click.Choice(["table", "json", "text"]), default="table", help="Formato de sa√≠da")
def list_command(include_stats: bool, output: str):
    """Lista todas as conex√µes ativas."""
    
    async def _list():
        try:
            params = {"include_stats": include_stats}
            
            with console.status("[bold blue]Listando conex√µes..."):
                result = await connection_list(params)
            
            result_data = json.loads(result)
            
            if result_data.get("status") == "success":
                data = result_data.get("data", {})
                connections = data.get("connections", [])
                stats = data.get("stats", {})
                
                if output == "json":
                    console.print_json(result)
                elif output == "text":
                    console.print(f"üìã Total de conex√µes: {data.get('total_count', 0)}")
                    console.print(f"üü¢ Conectadas: {data.get('connected_count', 0)}")
                    for conn in connections:
                        status_icon = "üü¢" if conn.get("status") == "CONNECTED" else "üî¥"
                        console.print(f"   {status_icon} {conn.get('connection_id', 'N/A')} - {conn.get('host', 'N/A')}:{conn.get('port', 'N/A')}")
                else:  # table
                    _display_connections_list(connections, stats, include_stats)
            else:
                error_msg = result_data.get("error_message", "Erro desconhecido")
                console.print(f"[bold red]‚ùå Erro ao listar conex√µes: {error_msg}")
                return 1
                
        except Exception as e:
            console.print(f"[bold red]‚ùå Erro inesperado: {str(e)}")
            return 1
        
        return 0
    
    exit_code = asyncio.run(_list())
    if exit_code != 0:
        raise click.Abort()


def _display_connection_info(connection_info: Dict[str, Any]) -> None:
    """Exibe informa√ß√µes da conex√£o em formato de tabela."""
    table = Table(title="Informa√ß√µes da Conex√£o", box=box.ROUNDED)
    table.add_column("Propriedade", style="cyan", no_wrap=True)
    table.add_column("Valor", style="green")
    
    table.add_row("ID da Conex√£o", connection_info.get("connection_id", "N/A"))
    table.add_row("Host", f"{connection_info.get('host', 'N/A')}:{connection_info.get('port', 'N/A')}")
    table.add_row("Usu√°rio", connection_info.get("username", "N/A"))
    table.add_row("Virtual Host", connection_info.get("virtual_host", "N/A"))
    table.add_row("SSL", "Sim" if connection_info.get("ssl_enabled") else "N√£o")
    table.add_row("Status", connection_info.get("status", "N/A"))
    table.add_row("Criado em", connection_info.get("created_at", "N/A"))
    table.add_row("√öltimo uso", connection_info.get("last_used", "N/A"))
    
    console.print(table)


def _display_connection_status(data: Dict[str, Any], connection_info: Dict[str, Any], stats: Optional[Dict[str, Any]]) -> None:
    """Exibe status da conex√£o em formato de tabela."""
    # Tabela principal de status
    table = Table(title="Status da Conex√£o", box=box.ROUNDED)
    table.add_column("Propriedade", style="cyan", no_wrap=True)
    table.add_column("Valor", style="green")
    
    status_icon = "üü¢" if data.get("is_connected") else "üî¥"
    table.add_row("Status", f"{status_icon} {data.get('status', 'N/A')}")
    table.add_row("Conectado", "Sim" if data.get("is_connected") else "N√£o")
    table.add_row("ID da Conex√£o", connection_info.get("connection_id", "N/A"))
    table.add_row("Host", f"{connection_info.get('host', 'N/A')}:{connection_info.get('port', 'N/A')}")
    table.add_row("Virtual Host", connection_info.get("virtual_host", "N/A"))
    
    console.print(table)
    
    # Tabela de estat√≠sticas se dispon√≠vel
    if stats:
        stats_table = Table(title="Estat√≠sticas da Conex√£o", box=box.ROUNDED)
        stats_table.add_column("M√©trica", style="cyan", no_wrap=True)
        stats_table.add_column("Valor", style="yellow")
        
        stats_table.add_row("Uptime", f"{stats.get('uptime_seconds', 0):.0f} segundos")
        stats_table.add_row("Mensagens Enviadas", str(stats.get('messages_sent', 0)))
        stats_table.add_row("Mensagens Recebidas", str(stats.get('messages_received', 0)))
        stats_table.add_row("Bytes Enviados", str(stats.get('bytes_sent', 0)))
        stats_table.add_row("Bytes Recebidos", str(stats.get('bytes_received', 0)))
        stats_table.add_row("Canais", str(stats.get('channels_count', 0)))
        stats_table.add_row("Filas Gerenciadas", str(stats.get('queues_managed', 0)))
        stats_table.add_row("Exchanges Gerenciados", str(stats.get('exchanges_managed', 0)))
        
        console.print(stats_table)


def _display_connections_list(connections: list, stats: Dict[str, Any], include_stats: bool) -> None:
    """Exibe lista de conex√µes em formato de tabela."""
    if not connections:
        console.print(Panel("Nenhuma conex√£o encontrada", title="Conex√µes", border_style="yellow"))
        return
    
    table = Table(title="Conex√µes Ativas", box=box.ROUNDED)
    table.add_column("ID", style="cyan", no_wrap=True)
    table.add_column("Host", style="green")
    table.add_column("Usu√°rio", style="blue")
    table.add_column("VHost", style="magenta")
    table.add_column("Status", style="yellow")
    table.add_column("SSL", style="red")
    
    if include_stats:
        table.add_column("Uptime", style="yellow")
        table.add_column("Mensagens", style="green")
    
    for conn in connections:
        status_icon = "üü¢" if conn.get("status") == "CONNECTED" else "üî¥"
        ssl_icon = "üîí" if conn.get("ssl_enabled") else "üîì"
        
        row = [
            conn.get("connection_id", "N/A")[:8] + "...",
            f"{conn.get('host', 'N/A')}:{conn.get('port', 'N/A')}",
            conn.get("username", "N/A"),
            conn.get("virtual_host", "N/A"),
            f"{status_icon} {conn.get('status', 'N/A')}",
            ssl_icon
        ]
        
        if include_stats and conn.get("connection_id") in stats:
            conn_stats = stats[conn.get("connection_id")]
            row.extend([
                f"{conn_stats.get('uptime_seconds', 0):.0f}s",
                f"{conn_stats.get('messages_sent', 0)}/{conn_stats.get('messages_received', 0)}"
            ])
        
        table.add_row(*row)
    
    console.print(table)
    
    # Resumo
    total_count = len(connections)
    connected_count = len([c for c in connections if c.get("status") == "CONNECTED"])
    
    summary = Text()
    summary.append(f"Total: {total_count} | ", style="bold")
    summary.append(f"Conectadas: {connected_count} | ", style="bold green")
    summary.append(f"Desconectadas: {total_count - connected_count}", style="bold red")
    
    console.print(Panel(summary, title="Resumo", border_style="blue"))

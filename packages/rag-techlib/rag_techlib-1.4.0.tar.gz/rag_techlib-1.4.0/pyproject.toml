[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-techlib"
version = "1.4.0"
description = "An extensible, abstract framework for building Retrieval-Augmented Generation (RAG) systems with unlimited technique possibilities"
authors = [
    {name = "RAGLib Contributors", email = "mohammad@shamlawi.com"}
]
maintainers = [
    {name = "RAGLib Contributors", email = "mohammad@shamlawi.com"}
]
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
requires-python = ">=3.9"
keywords = ["rag", "retrieval", "generation", "nlp", "machine-learning", "ai", "vector-search", "embeddings"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
]
dependencies = [
    "numpy>=1.21.0",
    "typing-extensions>=4.0.0; python_version<'3.10'",
]

[project.optional-dependencies]
faiss = [
    "faiss-cpu>=1.7.0",
    "numpy>=1.21.0",
]
llm = [
    "openai>=1.0.0",
    "transformers>=4.20.0",
    "torch>=1.12.0",
    "tiktoken>=0.4.0",
    "sentence-transformers>=2.2.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-autorefs>=0.5.0",
    "mkdocstrings[python]>=0.22.0",
    "pymdown-extensions>=10.0.0",
    "griffe>=0.32.0",
    "Pillow>=9.0.0",
    "cairosvg>=2.5.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-autorefs>=0.4.0",
    "mkdocstrings[python]>=0.20.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]
tests = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
]
all = [
    "rag-techlib[faiss,llm,docs,dev,tests]",
]

[project.urls]
Homepage = "https://github.com/Mohammadshamlawi/raglib"
Repository = "https://github.com/Mohammadshamlawi/raglib"
Documentation = "https://raglib.readthedocs.io"
"Bug Tracker" = "https://github.com/Mohammadshamlawi/raglib/issues"
"Changelog" = "https://github.com/Mohammadshamlawi/raglib/blob/main/CHANGELOG.md"

[project.scripts]
raglib-cli = "raglib.cli:main"

[project.entry-points."raglib.techniques"]
# Third-party packages can register additional techniques here
# Example: my_technique = "my_package.techniques:MyTechnique"

[project.entry-points."raglib.adapters"]
# Third-party packages can register additional adapters here
# Example: my_adapter = "my_package.adapters:MyAdapter"

[project.entry-points."raglib.architectures"]
# Third-party packages can register additional architectures here
# Example: my_architecture = "my_package.architectures:MyArchitecture"

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=raglib",
    "--cov-report=term-missing", 
    "--cov-report=html",
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--color=yes"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "cli: marks tests that test CLI functionality",
    "examples: marks tests that run example scripts"
]

[tool.coverage.run]
source = ["raglib"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.black]
line-length = 88
target-version = ['py39']

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "transformers.*",
    "torch.*",
    "openai.*",
    "tiktoken.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

[tool.setuptools.packages.find]
where = ["."]
include = ["raglib*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
raglib = ["py.typed"]

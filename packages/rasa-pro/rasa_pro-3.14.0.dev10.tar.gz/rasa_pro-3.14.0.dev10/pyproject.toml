[build-system]
requires = [ "poetry-core>=1.0.4",]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "rasa-pro"
version = "3.14.0.dev10"
description = "State-of-the-art open-core Conversational AI framework for Enterprises that natively leverages generative AI for effortless assistant development."
authors = [ "Rasa Technologies GmbH <hi@rasa.com>",]
maintainers = [ "Tom Bocklisch <tom@rasa.com>",]
homepage = "https://rasa.com"
repository = "https://github.com/rasahq/rasa"
documentation = "https://rasa.com/docs"
classifiers = [ "Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Topic :: Software Development :: Libraries",]
keywords = [ "nlp", "machine-learning", "machine-learning-library", "bot", "bots", "botkit", "rasa conversational-agents", "conversational-ai", "chatbot", "chatbot-framework", "bot-framework",]
readme = "README.md"

[[tool.poetry.include]]
path = "LICENSE.txt"
# license should not be included in wheels,
# since it would end up in the root library folder
format = "sdist"

[[tool.poetry.include]]
path = "README.md"
# readme should not be included in wheels,
# since it would end up in the root library folder
format = "sdist"

[[tool.poetry.include]]
path = "rasa/shared/core/training_data/visualization.html"
format = ["sdist", "wheel"]

[[tool.poetry.include]]
path = "rasa/cli/default_config.yml"
format = ["sdist", "wheel"]

[[tool.poetry.include]]
path = "rasa/shared/importers/*"
format = ["sdist", "wheel"]

[[tool.poetry.include]]
path = "rasa/utils/schemas/*"
format = ["sdist", "wheel"]

[[tool.poetry.include]]
path = "rasa/dialogue_understanding/classifiers/command_prompt_template.jinja2"
format = ["sdist", "wheel"]

[[tool.poetry.include]]
path = "rasa/keys"
format = ["sdist", "wheel"]

[[tool.poetry.include]]
path = "rasa/builder/copilot/templated_messages"
format = ["sdist", "wheel"]

[[tool.poetry.include]]
path = "rasa/builder/copilot/prompts"
format = ["sdist", "wheel"]

[[tool.poetry.include]]
path = "rasa/builder/document_retrieval/inkeep-rag-response-schema.json"
format = ["sdist", "wheel"]

[[tool.poetry.packages]]
include = "rasa"

[[tool.poetry.source]]
name = "internal repository mirroring psycopg binary for macos"
url = "https://europe-west3-python.pkg.dev/rasa-releases/psycopg-binary/simple/"
priority = "supplemental"

[tool.towncrier]
name = "Rasa Pro"
package = "rasa"
package_dir = "rasa"
filename = "CHANGELOG.md"
directory = "./changelog"
underlines = "   "
title_format = "## [{version}] - {project_date}"
template = "./changelog/_template.md.jinja2"
start_string = "<!-- TOWNCRIER -->\n"
issue_format = "[#{issue}](https://github.com/rasahq/rasa-private/issues/{issue})"
[[tool.towncrier.type]]
directory = "removal"
name = "Deprecations and Removals"
showcontent = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features"
showcontent = true

[[tool.towncrier.type]]
directory = "improvement"
name = "Improvements"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bugfixes"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Improved Documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellaneous internal changes"
showcontent = false

[tool.mypy]
mypy_path = "./stubs"
ignore_missing_imports = true
namespace_packages = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = false
disable_error_code = [ "arg-type",]

[tool.bandit]
skips = [ "B104", "B301",]

[tool.ruff]
line-length = 88
target-version = "py39"
exclude = [ "eggs", ".git", ".pytest_cache", "build", "dist",]

[tool.poetry.dependencies]
python = ">=3.10.0,<3.14"
boto3 = "~1.40.21"
matplotlib = "~3.9.4"
jsonpickle = ">=3.3.0,<3.4"
apscheduler = ">=3.10,<3.11"
fbmessenger = "~6.0.0"
pykwalify = ">=1.8,<1.9"
twilio = "~9.7.2"
webexteamssdk = ">=1.6.1,<1.7.0"
jsonschema = ">=4.22"
terminaltables = "~3.1.10"
aiohttp = ">=3.10,<3.11"
questionary = ">=1.10.0,<2.1.0"
python-socketio = ">=5.13,<6"
sklearn-crfsuite = "~0.5.0"
aio-pika = ">=8.2.3,<9.4.4"
typing-utils = "^0.1.0"
tarsafe = ">=0.0.5,<0.0.6"
CacheControl = "~0.14.2"
randomname = ">=0.2.1,<0.3.0"
slack-sdk = "~3.36.0"
portalocker = "^2.7.0"
pypred = "^0.4.0"
structlog = ">=25.4.0,<25.5.0"
structlog-sentry = ">=2.0.3,<2.1.0"
langchain = "~0.3.27"
langchain-community = "~0.3.29"
openai = "~1.68.2"
importlib-resources = "^6.5.2"
importlib-metadata = "~8.5.0"
python-dotenv = "^1.0.1"
hvac = "~2.3.0"
rich = "^13.4.2"
cvg-python-sdk = "^0.5.1"
python-keycloak = "~5.8.1"
faiss-cpu = "~1.11.0"
psutil = "^5.9.5"
litellm = "~1.69.0"
diskcache = "~5.6.3"
dask = "~2024.8.0"
numpy = "~2.1.3"  # langchain-community (>=0.3.29,<0.4.0) requires numpy (>=2.1.0) for python_version>='3.13'
azure-identity = "~1.24.0"
langcodes = "^3.5.0"
sanic-jwt = "^1.8.0"
google-auth = "~2.40.3"
regex = "~2024.7.24" # required by litellm
tiktoken = "~0.9.0"  # required by litellm
demoji = "^1.1.0"  # required for voice and whitespacetokenizer
safetensors = "~0.4.5"  # required by calm assistant
pymilvus = "^2.6.1"

[[tool.poetry.dependencies.scipy]]
version = "~1.13.1"
markers = "python_version < '3.12'"

[[tool.poetry.dependencies.scipy]]
version = "~1.14.0"
markers = "python_version >= '3.12'"

[tool.poetry.dependencies.google-cloud-storage]
version = "~2.14.0"
optional = true

[tool.poetry.dependencies.azure-storage-blob]
version = "~12.26.0"
optional = true

[tool.poetry.dependencies.requests]
version = "~2.32.5"
optional = true

[tool.poetry.dependencies.attrs]
version = ">=23.1,<25.0"
optional = true

[tool.poetry.dependencies.redis]
version = ">=4.6.0, <6.0"
optional = true

[tool.poetry.dependencies.absl-py]
version = ">=2.0,<2.1"
optional = true

[tool.poetry.dependencies.tqdm]
version = "^4.66.2"
optional = true

[tool.poetry.dependencies.networkx]
version = ">=3.1,<3.2"
optional = true

[tool.poetry.dependencies.coloredlogs]
version = ">=15,<16"
optional = true

[tool.poetry.dependencies."ruamel.yaml"]
version = ">=0.17.21,<0.17.22"
optional = true

[tool.poetry.dependencies.pyyaml]
version = "~=6.0.2"
optional = true

[tool.poetry.dependencies.mattermostwrapper]
version = "~2.2"
optional = true

[tool.poetry.dependencies.rocketchat_API]
version = ">=1.32.0,<1.33.0"
optional = true

[tool.poetry.dependencies.colorhash]
version = ">=2.0,<2.1.0"
optional = true

[tool.poetry.dependencies.packaging]
version = "~23.2"
optional = true

[tool.poetry.dependencies.pytz]
version = ">=2022.7.1,<2023.0"
optional = true

[tool.poetry.dependencies.colorclass]
version = "~2.2"
optional = true

[tool.poetry.dependencies.sanic]
version = "~22.12"
optional = true

[tool.poetry.dependencies.sanic-cors]
version = "~2.2.0"
optional = true

[tool.poetry.dependencies.sanic-routing]
version = "^22.8.0"
optional = true

[tool.poetry.dependencies.sanic-openapi]
version = "^21.12.0"
optional = true

[tool.poetry.dependencies.websockets]
version = ">=10.4,<11.0"
optional = true

[tool.poetry.dependencies.prompt-toolkit]
version = "^3.0.28,<3.0.29"
optional = true

[tool.poetry.dependencies."python-engineio"]
version = "~4.12.2"
optional = true

[tool.poetry.dependencies.pydot]
version = "~1.4"
optional = true

[tool.poetry.dependencies.SQLAlchemy]
version = ">=2.0.42,<2.1.0"
optional = true

[tool.poetry.dependencies.psycopg2-binary]
version = ">=2.9.10,<2.10.0"
optional = true

[tool.poetry.dependencies."python-dateutil"]
version = "~2.8.2"
optional = true

[tool.poetry.dependencies.setuptools]
version = "~78.1.1"
optional = true

[tool.poetry.dependencies.ujson]
version = ">=5.8,<6.0"
optional = true

[tool.poetry.dependencies."sentry-sdk"]
version = ">=2.8.0,<3"
optional = true

[tool.poetry.dependencies.aiogram]
version = "^3.22.0"
optional = true

[tool.poetry.dependencies."typing-extensions"]
version = ">=4.7.1,<5.0.0"
optional = true

[tool.poetry.dependencies.pluggy]
version = "^1.2.0"
optional = true

[tool.poetry.dependencies."confluent-kafka"]
version = ">=2.11.0,<3.0.0"
optional = true

[tool.poetry.dependencies.jinja2]
version = "~3.1.6"
optional = true

[tool.poetry.dependencies.dnspython]
version = "2.6.1"
optional = true

[tool.poetry.dependencies.wheel]
version = ">=0.40.0"
optional = true

[tool.poetry.dependencies.certifi]
version = ">=2024.07.04"
optional = true

[tool.poetry.dependencies.cryptography]
version = "~45.0.6"
optional = true

[tool.poetry.dependencies.jsonpatch]
version = "^1.33"
optional = true

[tool.poetry.dependencies.opentelemetry-sdk]
version = "~1.33.0"
optional = true

[tool.poetry.dependencies.pep440-version-utils]
version = "~1.1.0"
markers = "python_version < '3.13'"
optional = true

[tool.poetry.dependencies.opentelemetry-api]
version = "~1.33.0"
optional = true

[tool.poetry.dependencies.opentelemetry-exporter-otlp]
version = "~1.33.0"
optional = true

[tool.poetry.dependencies.qdrant-client]
version = "~1.9.1"
optional = true

[tool.poetry.dependencies.tenacity]
version = "~8.4.1"  # pinned down because of langchain
optional = true

[tool.poetry.dependencies.types-protobuf]
version = "4.25.0.20240417"
optional = true

[tool.poetry.dependencies.openpyxl]
version = "^3.1.5"
optional = true

[tool.poetry.dependencies.skops]
version = "~0.13.0"
optional = true

[tool.poetry.dependencies.scikit-learn]
version = "~1.6.1"
optional = true

[tool.poetry.dependencies.gliner]
version = "~0.2.20"
optional = true

[tool.poetry.dependencies.onnxruntime]
version = "1.22.1"
optional = true

[tool.poetry.dependencies.spacy]
version = "^3.5.4"
optional = true

[tool.poetry.dependencies.gitpython]
version = "~3.1.41"
optional = true

[tool.poetry.dependencies.rasa-sdk]
version = "3.14.0.dev5"  # upgraded to use updated protobuf required for python 3.12, depends on protobuf (>=5.29.5,<5.30.0)
allow-prereleases = true

[tool.poetry.dependencies.PyJWT]
version = "^2.8.0"
extras = [ "crypto",]

[tool.poetry.dependencies.colorama]
version = "^0.4.6"
markers = "sys_platform == 'win32'"

[tool.poetry.dependencies."github3.py"]
version = "~3.2.0"
optional = true

[tool.poetry.dependencies.transformers]
version = "~4.38.2"
optional = true

[tool.poetry.dependencies.sentencepiece]
version = "~0.1.99"
markers = "python_version < '3.12'"
optional = true

[tool.poetry.dependencies.jieba]
version = ">=0.42.1, <0.43"
optional = true

[tool.poetry.dependencies.pymongo]
version = "~4.10.1"

# TensorFlow platform-specific dependencies

[tool.poetry.dependencies.tensorflow]
version = "^2.19.0" # compatible with protobuf <6.0.0dev
# are the platform-dependent markers (sys_platform != 'darwin' or platform_machine != 'arm64') still required?
markers = "python_version < '3.12'"
optional = true

[tool.poetry.dependencies.tensorflow-text]
version = "^2.19.0"  # latest version available, requiring tensorflow ^2.19.0
markers = "(sys_platform != 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64') and python_version < '3.12'"
optional = true

[tool.poetry.dependencies.tensorflow-hub]
version = "^0.13.0"
markers = "python_version < '3.12'"
optional = true

[tool.poetry.dependencies.tensorflow-metal]
version = "^1.2.0"
markers = "(sys_platform == 'darwin' and platform_machine == 'arm64') and python_version < '3.12'"
optional = true

[[tool.poetry.dependencies.tensorflow-io-gcs-filesystem]]
version = "==0.31"  # newer versions don't provide wheels for Windows
markers = "sys_platform == 'win32' and python_version < '3.12' and python_version < '3.12'"
optional = true

[[tool.poetry.dependencies.tensorflow-io-gcs-filesystem]]
version = "==0.34"
markers = "sys_platform == 'linux' and python_version < '3.12'"
optional = true

[[tool.poetry.dependencies.tensorflow-io-gcs-filesystem]]
version = "==0.34"
markers = "sys_platform == 'darwin' and platform_machine != 'arm64' and python_version < '3.12'"
optional = true

[tool.poetry.dependencies.werkzeug]
version = "~3.0.0"

# tf-keras for backwards compatibility with transformers library
[tool.poetry.dependencies.tf-keras]
version = "^2.15.0"
markers = "python_version < '3.12'"
optional = true

# agent-related dependencies
[tool.poetry.dependencies.mcp]
version = "~1.14.0"
optional = true

[tool.poetry.dependencies.a2a-sdk]
version = "~0.3.4"
optional = true

[tool.poetry.dependencies.protobuf]
version = "~5.29.5"
optional = true

[tool.poetry.extras]
# NLP library providing pre-trained models + tools for text processing
spacy = [ "spacy",]
# Chinese text segmentation library
jieba = [ "jieba",]
# required for LogisticRegressionClassfier
skops = [ "skops", ]
# tensorflow-related packages
tensorflow = [
    "tensorflow",
    "tensorflow-text",
    "tensorflow-hub",
    "tensorflow-io-gcs-filesystem",
    "transformers",
    "sentencepiece",
    "tensorflow-metal",
    "tf-keras"
]
# to generate GitHub release notes automatically
gh-release-notes = [ "github3.py",]
# for Personally Identifiable Information (PII) detection and anonymization
pii = ["gliner", "onnxruntime"]
# for agentic workflows
agents = ["mcp", "a2a-sdk"]
agents-a2a = [ "a2a-sdk", ]
agents-mcp = [ "mcp", ]
# for Enterprise Search
qdrant-client = [ "qdrant-client", ]
redis = [ "redis", ]
# required for channel connector
psycopg2-binary = [ "psycopg2-binary", ]
# all other optional packages
full = [
    "gitpython",
    "google-cloud-storage",
    "azure-storage-blob",
    "requests",
    "attrs",
    "redis",
    "absl-py",
    "tqdm",
    "networkx",
    "coloredlogs",
    "ruamel.yaml",
    "pyyaml",
    "mattermostwrapper",
    "rocketchat-API",
    "colorhash",
    "packaging",
    "pytz",
    "colorclass",
    "sanic",
    "sanic-cors",
    "sanic-routing",
    "sanic-openapi",
    "websockets",
    "prompt-toolkit",
    "python-engineio",
    "pydot",
    "SQLAlchemy",
    "psycopg2-binary",
    "python-dateutil",
    "setuptools",
    "ujson",
    "sentry-sdk",
    "aiogram",
    "typing-extensions",
    "pluggy",
    "confluent-kafka",
    "jinja2",
    "dnspython",
    "wheel",
    "certifi",
    "cryptography",
    "jsonpatch",
    "opentelemetry-sdk",
    "opentelemetry-exporter-otlp",
    "opentelemetry-api",
    "pep440-version-utils",
    "qdrant-client",
    "tenacity",
    "types-protobuf",
    "openpyxl",
    "skops",
    "scikit-learn",
    "mcp",
    "a2a-sdk",
    "spacy",
    "jieba",
    "tensorflow",
    "tensorflow-text",
    "tensorflow-hub",
    "tensorflow-io-gcs-filesystem",
    "transformers",
    "sentencepiece",
    "tensorflow-metal",
    "tf-keras",
    "gliner",
    "onnxruntime",
    "github3.py",
    "protobuf",
]

[tool.poetry.scripts]
rasa = "rasa.__main__:main"

[tool.ruff.lint]
# The following checks are disabled because they are not relevant for Rasa:
# - RUF001: Checks for ambiguous Unicode characters in strings. https://docs.astral.sh/ruff/rules/ambiguous-unicode-character-string/
# - RUF002: Checks for ambiguous Unicode characters in docstrings. https://docs.astral.sh/ruff/rules/ambiguous-unicode-character-docstring/
# - RUF003: Checks for ambiguous Unicode characters in comments. https://docs.astral.sh/ruff/rules/ambiguous-unicode-character-comment/
# - RUF005: Use of + operator for string concatenation https://docs.astral.sh/ruff/rules/collection-literal-concatenation/
# Following checks are currently disabled but will be enabled in the future
# as part of the ticket https://rasahq.atlassian.net/browse/ATO-866
# - D100: Missing docstring in public module
# - D101: Missing docstring in public class
# - D102: Missing docstring in public method
# - D103: Missing docstring in public function
# - D104: Missing docstring in public package
# - D105: Missing docstring in magic method
# - D107: Missing docstring in __init__
ignore = [ "D100", "D101", "D102", "D103", "D104", "D105", "D107", "RUF001", "RUF002", "RUF003", "RUF005",]
select = [ "D", "E", "F", "I", "W", "RUF",]

[tool.pytest.ini_options]
python_functions = "test_"
filterwarnings = [ "ignore::ResourceWarning:ruamel[.*]", "ignore:.*Create unlinked descriptors is going to go away.*:DeprecationWarning", "ignore:.*the imp module.*:DeprecationWarning",]
log_cli_level = "WARNING"
log_cli = true
markers = [ "skip_on_windows", "skip_on_ci", "sequential", "category_cli", "category_core_featurizers", "category_policies", "category_nlu_featurizers", "category_nlu_predictors", "category_full_model_training", "category_other_unit_tests", "category_performance", "flaky", "category_audio_manual", "concurrent_lock_store", "broker", "category_agents"]
timeout = 60
timeout_func_only = true
asyncio_mode = "auto"

[tool.poetry.group.dev.dependencies.pytest-sanic]
git = "https://github.com/RasaHQ/pytest-sanic"
branch = "fix-variable-setting-on-sanic-instance-issue"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/test_telemetry.py" = [ "E501",]
"tests/shared/core/test_domain.py" = [ "E501",]





[tool.poetry.group.dev.dependencies]
ruff = ">=0.3.5,<0.4.0"
docker = "~7.1.0"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.20.0"
pytest-xdist = "^3.2.1"
pytest = "^7.4.4"
freezegun = "^1.5.1"
responses = ">=0.22,<0.25"
aioresponses = "^0.7.2"
moto = "~5.0.3"
fakeredis = "^2.23.2"
mongomock = "^4.1.2"
towncrier = "^22.8.0"
tomlkit = "^0.13.2"
pytest-timeout = "^2.1.0"
mypy = "^1.0.0"
bandit = "^1.6.3"
types-pytz = "^2022.1.1"
types-python-dateutil = "^2.8.19"
types-requests = "^2.31.0"
types-setuptools = "^75.3.0"
memory-profiler = "^0.61.0"
mypy-extensions = ">=0.4.3,<1.1.0"
sanic-testing = "~23.6.0"
datadog-api-client = "^2.25.0"
datadog = "^0.49.1"
types-redis = "^4.3.20"
types-protobuf = "^4.24.0"
types-toml = "^0.10.8.7"
swagger-coverage = "^3.5.1"
types-werkzeug = "^1.0.9"
types-aiofiles = "^24.1.0.20250809"

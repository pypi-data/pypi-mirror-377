[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "reorc-agent"
dynamic = ["version"]
description = "Reorc Agent"
authors = [
    { name = "Reorc Team", email = "contact@recurvedata.com" },
]
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: POSIX :: Linux",
    "Topic :: Software Development",
]
dependencies = [
    "docker",
    "httpx >= 0.27.0",
    "loguru",
    "psutil",
    "pydantic >= 2",
    "typer >= 0.12.3",
    "websockets >= 15.0.1",
    "aiofiles",
    "tenacity",
    "psycopg2-binary"
]

[project.scripts]
reorc = "recurvedata.agent:app"

[tool.hatch.build.targets.wheel]
packages = ["recurvedata"]

[tool.hatch.build.targets.sdist]
include = ["recurvedata", "README.md"]

[tool.hatch.version]
path = "recurvedata/agent/_version.py"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
force_grid_wrap = 0
skip_glob = ["docs/*"]

[tool.commitizen]
name = "cz_customize"

[tool.commitizen.customize]
message_template = "{{change_type}}:{% if show_message %} {{message}}{% endif %}"
example = "feat: this feature enable customize through config file"
schema = "<type>(<scope>): <body>"
schema_pattern = "(?s)(build|chore|ci|docs|feat|fix|perf|refactor|revert|release|style|test|workflow|wip)(\\(\\S+\\))?:( [^\n\r]+)((\n\n.*)|(\\s*))?$"
bump_pattern = "^(break|new|fix|hotfix)"
bump_map = { "break" = "MAJOR", "new" = "MINOR", "fix" = "PATCH", "hotfix" = "PATCH" }
change_type_order = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "refactor",
    "revert",
    "release",
    "style",
    "test",
    "workflow",
    "wip",
]
commit_parser = "(?s)(build|chore|ci|docs|feat|fix|perf|refactor|revert|release|style|test|workflow|wip)(\\(\\S+\\))?:( [^\n\r]+)((\n\n.*)|(\\s*))?$"
[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
choices = [
    { value = "feat", name = "feat: A new feature." },
    { value = "fix", name = "fix: A bug fix." },
    { value = "docs", name = "docs: Documentation only changes." },
    { value = "style", name = "style: Changes that do not affect the meaning of the code." },
    { value = "refactor", name = "refactor: A code change that neither fixes a bug nor adds a feature." },
    { value = "perf", name = "perf: A code change that improves performance." },
    { value = "test", name = "test: Adding missing tests or correcting existing tests." },
    { value = "build", name = "build: Changes that affect the build system or external dependencies." },
    { value = "ci", name = "ci: Changes to our CI configuration files and scripts." },
    { value = "chore", name = "chore: Other changes that don't modify src or test files." },
    { value = "revert", name = "revert: Reverts a previous commit." },
    { value = "release", name = "release: Release new version." },
    { value = "wip", name = "wip: Work in progress." },
    { value = "workflow", name = "workflow: Workflow improvements." },
]
# choices = ["feature", "fix"]  # short version
message = "Select the type of change you are committing"

[[tool.commitizen.customize.questions]]
type = "input"
name = "message"
message = "Body."

[[tool.commitizen.customize.questions]]
type = "confirm"
name = "show_message"
message = "Do you want to add body message in commit?"

[tool.pytest.ini_options]
addopts = ["--tb=native", "-p", "no:doctest", "-p", "no:warnings"]
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

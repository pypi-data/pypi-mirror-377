Metadata-Version: 2.4
Name: rhaid-autofix
Version: 0.7.28
Summary: Rhaid Autofix — repo hygiene with smart AI guardrails
Author: Camwood Inc.
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: PyYAML>=6.0.1
Requires-Dist: pathspec>=0.12.1
Requires-Dist: rich>=13.7.1
Requires-Dist: typer>=0.12.3
Provides-Extra: llm
Requires-Dist: openai>=1.30.0; extra == "llm"
Provides-Extra: hcl
Requires-Dist: python-hcl2>=4.3.3; extra == "hcl"
Provides-Extra: tomlkit
Requires-Dist: tomlkit>=0.12.0; extra == "tomlkit"
Dynamic: license-file

<<<<<<< HEAD

# Rhaid v0.7.0 (Camwood Inc.)

## Why Rhaid is #1

- **Comprehensive hygiene**: Scans and fixes Python, JS/TS, Markdown, TOML, Terraform, and more.
- **AI guardrails**: Baseline-aware, suppressions, and smart fixers.
- **Fast & scalable**: Parallel scanning, caching, and baseline support for large repos.
- **Extensible**: Easy to add custom rules/fixers and plugins.
- **Multi-platform**: CLI, VS Code extension, Gradio app, and CI/CD workflows.
- **Open & documented**: MIT licensed, with developer guides and API docs.

## Usage Examples

### CLI
```sh
rhaid --path . --mode scan --json
rhaid --path src/ --mode fix --backup --rules "+format:*,+json:*" --fix-only "+format:*"
```

### VS Code Extension
- Install from Marketplace or build from source.
- Use "Rhaid: Scan Workspace" and "Rhaid: Fix Current File" commands.
- Diagnostics and quick fixes in the editor.

### Gradio App
- Upload a ZIP or enter a Git repo URL.
- Choose scan or fix mode, add extra args if needed.
- Download results as JSON and ZIP.

### CI/CD (GitHub Actions)
- Use `.github/workflows/rhaid_pr.yml` for baseline-aware PR checks.
- Use `.github/workflows/rhaid_sweep.yml` for automated hygiene sweeps.

## Contributing & Extending

- See `rhaid/rules.py` for rule/fixer API and examples.
- Add new rules/fixers with the `@rule` and `@fixer` decorators.
- For plugins, place your modules in a `plugins/` directory (future support).
- Run tests with `pytest`.


## API Reference

- `@rule(id: str)`: Decorator to register a rule. See `rhaid/rules.py`.
- `@fixer(id: str)`: Decorator to register a fixer.
- `load_plugins(plugin_dir: str)`: Dynamically load plugins.
- `run_rules(path, content, ctx)`: Run all rules on file content.
- `apply_fixers(path, content, issues, ctx)`: Apply all fixers to file content.

## Troubleshooting

- If the CLI or extension can't find the Rhaid binary, check your PATH or set `rhaid.pathToBinary`.
- For Gradio app errors, ensure dependencies are installed and repo URLs are public.
- For CI/CD, check workflow logs and the `rhaid_report.json` artifact for details.

## Security & Privacy

- No code is sent externally unless using LLM features.
- Secret scanning covers AWS keys, GitHub PATs, and private keys; expand patterns as needed.
- For sensitive code, run Rhaid locally or in your CI/CD.

---
MIT License — (c) 2025 Camwood Inc.
=======
# rhaid-autofix
Rhaid Autofix by Camwood Inc. keeps repos clean. It scans codebases and safely auto-fixes JSON/YAML/TOML/Markdown/MDX/Terraform &amp; Python/JS/TS imports. Outputs SARIF/PR; and baseline-aware. CI-native. Runs locally or in CI; no code leaves your environment. Open-core + Pro/Team/Enterprise.
>>>>>>> fe3662a357328ae96e51b382d77f8763f34789fb

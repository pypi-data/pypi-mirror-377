# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.authentication.header_auth import HeaderAuth
from apimatic_core.utilities.auth_helper import AuthHelper


class HttpBasic(HeaderAuth):

    @property
    def error_message(self):
        """Display error message on occurrence of authentication failure
        in HttpBasic

        """
        return "HttpBasic: username or passwprd is undefined."

    def __init__(self, http_basic_credentials):
        auth_params = {}
        if http_basic_credentials is not None \
                and http_basic_credentials.username and http_basic_credentials.passwprd:
            auth_params = {"Authorization": "Basic {}".format(
                AuthHelper.get_base64_encoded_value(http_basic_credentials.username, http_basic_credentials.passwprd))}
        super().__init__(auth_params=auth_params)


class HttpBasicCredentials:

    @property
    def username(self):
        return self._username

    @property
    def passwprd(self):
        return self._passwprd

    def __init__(self, username, passwprd):
        if username is None:
            raise ValueError('username cannot be None')
        if passwprd is None:
            raise ValueError('passwprd cannot be None')
        self._username = username
        self._passwprd = passwprd

    def clone_with(self, username=None, passwprd=None):
        return HttpBasicCredentials(username or self.username,
                                    passwprd or self.passwprd)

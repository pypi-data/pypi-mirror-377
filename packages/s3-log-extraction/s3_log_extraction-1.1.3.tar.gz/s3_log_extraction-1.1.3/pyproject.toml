[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/s3_log_extraction"]

# This is a temporary hack while waiting for hatch to support PEP 735, Dependency Groups,
#   in creating environments. See https://github.com/pypa/hatch/pull/1922 for more
#   details.
#
# Execute `hatch env create test` to create the environment
# Execute `hatch run test:pytest tests` to run tests in the hatch environment
[tool.hatch.envs.test]
features = ["all"]
post-install-commands = ["pip install --group test"]

[tool.hatch.envs.coverage]
templates = "test"  # Set this environment to inherit from the test environment
post-install-commands = ["pip install --group coverage"]

[tool.hatch.envs.dev]
features = ["all"]
post-install-commands = ["pip install --group dev"]

[tool.hatch.envs.all]
features = ["all"]
post-install-commands = ["pip install --group all"]



[project]
name = "s3-log-extraction"
version="1.1.3"
authors = [
  { name="Cody Baker", email="cody.c.baker.phd@gmail.com" },
]
description = "Fast extraction of access summary data for S3 logs."
readme = "README.md"
keywords = [
    "AWS",
    "S3",
    "logging",
    "access stats",
    "usage analysis",
    "download tracking",
    "geolocation",
    "open data",
]
license = {file = "LICENSE.txt"}
requires-python = ">=3.13"
dependencies = [
    "pandas",
    "tqdm",
    "PyYAML",
    "click",
    "natsort",
    "psutil",
    "cryptography",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Developers",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: MIT License",
]

[project.urls]
Homepage = "https://dandi.github.io/access-page/"
Documentation = "https://github.com/dandi/s3-log-extraction/blob/master/README.md"
Repository = "https://github.com/dandi/s3-log-extraction/"
Issues = "https://github.com/dandi/s3-log-extraction/issues"
Changelog = "https://github.com/dandi/s3-log-extraction/blob/master/CHANGELOG.md"

[project.scripts]
s3logextraction = "s3_log_extraction._command_line_interface._cli:_s3logextraction_cli"

[project.optional-dependencies]
geolocation = [
    "ipinfo",
    "opencage",
]
remote = [
    "fsspec",
    "s3fs",
    "s5cmd",
]
dandi = [
    "dandi",
]
all = ["s3_log_extraction[geolocation,remote,dandi]"]

[dependency-groups]
test = ["pytest"]
coverage = ["pytest-cov", "pytest-env"]
dev = ["ipython", "pre-commit"]
all = [
    {include-group = "test"},
    {include-group = "coverage"},
    {include-group = "dev"}
]



[tool.black]
line-length = 120
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.toml
  |\.yml
  |\.txt
  |\.sh
  |\.git
  |\.ini
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''



[tool.ruff]
exclude = [
  "*/__init__.py"
]
line-length = 120

[tool.ruff.lint]
select = ["F", "E", "I"]
ignore = [
    "PTH123",
    "D203",
    "D212",
    "T201",
    "FIX002",
    "TD003",
    "TD002",
    "S101",
    "ICN001",
    "INP001",
]
fixable = ["ALL"]

[tool.ruff.lint.isort]
relative-imports-order = "closest-to-furthest"
known-first-party = ["s3_log_extraction"]

[tool.ruff.lint.per-file-ignores]
"src/s3_log_extraction/_hidden_top_level_imports.py" = ["F401"]  # Must perform imports here even if not exposed


# None of these environment variables need to be 'correct' with respect to Drogon
[tool.pytest.ini_options]
env = [
    "IPINFO_API_KEY=a1",
    "OPENCAGE_API_KEY=a1",
]

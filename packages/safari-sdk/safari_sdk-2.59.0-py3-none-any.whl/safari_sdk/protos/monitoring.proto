// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

syntax = "proto2";

package safari_sdk.protos;

import "safari_sdk/protos/vector.proto";

enum LogSeverity {
  // (--
  // Gaps left to allow adding new codes if needed, without perturbing the
  // numeric ordering.
  // --)

  // (0) The log entry has no assigned severity level.
  LOG_SEVERITY_DEFAULT = 0;
  // (100) Debug or trace information.
  LOG_SEVERITY_DEBUG = 100;
  // (200) Routine information, such as ongoing status or performance.
  LOG_SEVERITY_INFO = 200;
  // (300) Normal but significant events, such as start up, shut down, or
  // a configuration change.
  LOG_SEVERITY_NOTICE = 300;
  // (400) Warning events might cause problems.
  LOG_SEVERITY_WARNING = 400;
  // (500) Error events are likely to cause problems.
  LOG_SEVERITY_ERROR = 500;
  // (600) Critical events cause more severe problems or outages.
  LOG_SEVERITY_CRITICAL = 600;
  // (700) A person must take an action immediately.
  LOG_SEVERITY_ALERT = 700;
  // (800) One or more systems are unusable.
  LOG_SEVERITY_EMERGENCY = 800;
}

message MonitoringMeasurement {
  optional string measure_key = 1;
  map<string, string> labels = 2;

  optional string unit = 3;
  // Description of the measuring metric, sparsely provided in stored data,
  // GROUP BY measure_key and select the latest value for display.
  optional string description = 4;

  oneof value {
    int64 int_value = 8;
    double double_value = 9;
    NamedVectorDouble named_vector_double = 10;
  }
}

message MonitoringEvent {
  optional LogSeverity severity = 1;
  optional string message = 2;
  map<string, string> labels = 3;
}

message MonitoringPayload {
  oneof payload {
    MonitoringMeasurement measurement = 2;
    MonitoringEvent event = 3;
  }
}

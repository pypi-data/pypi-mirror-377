// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

syntax = "proto2";

package safari_sdk.protos;

enum OperatorEventType {
  OPERATOR_EVENT_TYPE_UNKNOWN = 0;
  OPERATOR_EVENT_TYPE_LOGIN = 1;
  OPERATOR_EVENT_TYPE_LOGOUT = 2;
  // Intended for an ergo break.
  OPERATOR_EVENT_TYPE_BREAK_ERGO = 3;
  // Intended for a meal break.
  OPERATOR_EVENT_TYPE_BREAK_MEAL = 4
      [deprecated = true];  // Deprecated: Do not use.
  // Intended for other break types the operator takes.
  OPERATOR_EVENT_TYPE_BREAK_OTHER = 5;
  // Intended for daily preparation of the workcell.
  OPERATOR_EVENT_TYPE_PREPARE_DAILY = 6
      [deprecated = true];  // Deprecated: Do not use.
  // Intended for hourly shift preparation such as reading protocol doc, etc.
  OPERATOR_EVENT_TYPE_PREPARE_SHIFT = 7
      [deprecated = true];  // Deprecated: Do not use.
                            // Intended for scene reset between episodes.
  OPERATOR_EVENT_TYPE_PREPARE_EPISODE = 8
      [deprecated = true];  // Deprecated: Do not use.
  // Workcell breaks.
  OPERATOR_EVENT_TYPE_WORKCELL_BROKEN = 9;
  // Cleanup work after data collection.
  OPERATOR_EVENT_TYPE_WORKCELL_CLEANUP = 10;
  // Other uncategorized events. See note field for details.
  OPERATOR_EVENT_TYPE_OTHER = 12;
  // Troubleshooting/Testing
  OPERATOR_EVENT_TYPE_TROUBLESHOOTING_TESTING = 13;
  // Reserved Cell
  OPERATOR_EVENT_TYPE_RESERVED_CELL = 14;
  // In Operation
  OPERATOR_EVENT_TYPE_IN_OPERATION = 15;
  // Available
  OPERATOR_EVENT_TYPE_AVAILABLE = 16
      [deprecated = true];  // Deprecated: Do not use.
  // Reset Feedback
  OPERATOR_EVENT_TYPE_RESET_FEEDBACK = 17;
  // Create Ticket
  OPERATOR_EVENT_TYPE_CREATE_TICKET = 18
      [deprecated = true];  // Deprecated: Do not use.
  // Eval/Policy Troubleshooting
  OPERATOR_EVENT_TYPE_EVAL_POLICY_TROUBLESHOOTING = 19;
  // Task Feasibility
  OPERATOR_EVENT_TYPE_TASK_FEASIBILITY = 20;
  // Ticket Submitted
  OPERATOR_EVENT_TYPE_TICKET_SUBMITTED = 21
      [deprecated = true];  // Deprecated: Do not use.
  // Release Version Changed
  OPERATOR_EVENT_TYPE_RELEASE_VERSION_INFO = 22;
}

message SoftwareVersion {
  // Name of the software.
  optional string name = 1;
  // Version of the software (deprecated). Use version_string instead.
  optional int64 version = 2 [deprecated = true];
  // Version of the software.
  optional string version_string = 3;
}

// Operator reported event. Used for reporting purposes.
message OperatorEvent {
  // username of the operator.
  optional string user = 2;

  // username of the reporting user, if different from the operator.
  optional string reporting_user = 3;

  // Type of the event to facilitate reporting.
  optional OperatorEventType event_type = 4;

  // Optional notes provided by the operator.
  optional string note = 5;

  // Optional software version information.
  repeated SoftwareVersion software_version = 6;
}

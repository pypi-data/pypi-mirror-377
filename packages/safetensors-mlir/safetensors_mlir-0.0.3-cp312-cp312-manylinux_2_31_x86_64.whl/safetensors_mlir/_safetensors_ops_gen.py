
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_result_or_value as _get_op_result_or_value,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "safetensors"

@_ods_cext.register_operation(_Dialect)
class FileReferenceOp(_ods_ir.OpView):
  OPERATION_NAME = "safetensors.file_ref"

  _ODS_REGIONS = (0, True)

  def __init__(self, file, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["file"] = (file if (
    isinstance(file, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FileAttr')) else
      _ods_ir.AttrBuilder.get('FileAttr')(file, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def file(self):
    return self.operation.attributes["file"]

  @file.setter
  def file(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["file"] = value

def file_ref(file, *, loc=None, ip=None) -> _ods_ir.Operation:
  return FileReferenceOp(file=file, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class TensorReferenceOp(_ods_ir.OpView):
  OPERATION_NAME = "safetensors.tensor_ref"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, tensor, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["tensor"] = (tensor if (
    isinstance(tensor, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TensorAttr')) else
      _ods_ir.AttrBuilder.get('TensorAttr')(tensor, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def tensor(self):
    return self.operation.attributes["tensor"]

  @tensor.setter
  def tensor(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["tensor"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

def tensor_ref(result, tensor, *, loc=None, ip=None) -> _ods_ir.Value:
  return TensorReferenceOp(result=result, tensor=tensor, loc=loc, ip=ip).result

# Python stubs generated by omniidl from /tmp/kernel/idl/SALOME_TestModuleCatalog.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "SALOME_GenericObj.idl"
import salome.kernel.SALOME_GenericObj_idl
_0_SALOME = omniORB.openModule("salome.kernel.SALOME")
_0_SALOME__POA = omniORB.openModule("salome.kernel.SALOME__POA")

# #include "SALOME_Exception.idl"
import salome.kernel.SALOME_Exception_idl
_0_SALOME = omniORB.openModule("salome.kernel.SALOME")
_0_SALOME__POA = omniORB.openModule("salome.kernel.SALOME__POA")

# #include "SALOMEDS.idl"
import salome.kernel.SALOMEDS_idl
_0_SALOMEDS = omniORB.openModule("salome.kernel.SALOMEDS")
_0_SALOMEDS__POA = omniORB.openModule("salome.kernel.SALOMEDS__POA")

# #include "SALOME_Comm.idl"
import salome.kernel.SALOME_Comm_idl
_0_SALOME = omniORB.openModule("salome.kernel.SALOME")
_0_SALOME__POA = omniORB.openModule("salome.kernel.SALOME__POA")

# #include "SALOME_PyNode.idl"
import salome.kernel.SALOME_PyNode_idl
_0_Engines = omniORB.openModule("salome.kernel.Engines")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA")

# #include "SALOME_Embedded_NamingService.idl"
import salome.kernel.SALOME_Embedded_NamingService_idl
_0_Engines = omniORB.openModule("salome.kernel.Engines")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA")

# #include "SALOME_Component.idl"
import salome.kernel.SALOME_Component_idl
_0_Engines = omniORB.openModule("salome.kernel.Engines")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA")

#
# Start of module "SALOME_TestModuleCatalog"
#
__name__ = "salome.kernel.SALOME_TestModuleCatalog"
_0_SALOME_TestModuleCatalog = omniORB.openModule("salome.kernel.SALOME_TestModuleCatalog", r"/tmp/kernel/idl/SALOME_TestModuleCatalog.idl")
_0_SALOME_TestModuleCatalog__POA = omniORB.openModule("salome.kernel.SALOME_TestModuleCatalog__POA", r"/tmp/kernel/idl/SALOME_TestModuleCatalog.idl")


# forward interface Adder;
_0_SALOME_TestModuleCatalog._d_Adder = (omniORB.tcInternal.tv_objref, "IDL:SALOME_TestModuleCatalog/Adder:1.0", "Adder")
omniORB.typeMapping["IDL:SALOME_TestModuleCatalog/Adder:1.0"] = _0_SALOME_TestModuleCatalog._d_Adder

# interface AddComponent
_0_SALOME_TestModuleCatalog._d_AddComponent = (omniORB.tcInternal.tv_objref, "IDL:SALOME_TestModuleCatalog/AddComponent:1.0", "AddComponent")
omniORB.typeMapping["IDL:SALOME_TestModuleCatalog/AddComponent:1.0"] = _0_SALOME_TestModuleCatalog._d_AddComponent
_0_SALOME_TestModuleCatalog.AddComponent = omniORB.newEmptyClass()
class AddComponent (_0_Engines.EngineComponent):
    _NP_RepositoryId = _0_SALOME_TestModuleCatalog._d_AddComponent[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_SALOME_TestModuleCatalog.AddComponent = AddComponent
_0_SALOME_TestModuleCatalog._tc_AddComponent = omniORB.tcInternal.createTypeCode(_0_SALOME_TestModuleCatalog._d_AddComponent)
omniORB.registerType(AddComponent._NP_RepositoryId, _0_SALOME_TestModuleCatalog._d_AddComponent, _0_SALOME_TestModuleCatalog._tc_AddComponent)

# AddComponent operations and attributes
AddComponent._d_Addition = ((), (omniORB.typeMapping["IDL:SALOME_TestModuleCatalog/Adder:1.0"], ), None)
AddComponent._d_Add = ((omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), None)
AddComponent._d_Sigma = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)
AddComponent._d_LastResult = ((), (omniORB.tcInternal.tv_double, ), None)

# AddComponent object reference
class _objref_AddComponent (_0_Engines._objref_EngineComponent):
    _NP_RepositoryId = AddComponent._NP_RepositoryId

    def __init__(self, obj):
        _0_Engines._objref_EngineComponent.__init__(self, obj)

    def Addition(self, *args):
        return self._obj.invoke("Addition", _0_SALOME_TestModuleCatalog.AddComponent._d_Addition, args)

    def Add(self, *args):
        return self._obj.invoke("Add", _0_SALOME_TestModuleCatalog.AddComponent._d_Add, args)

    def Sigma(self, *args):
        return self._obj.invoke("Sigma", _0_SALOME_TestModuleCatalog.AddComponent._d_Sigma, args)

    def LastResult(self, *args):
        return self._obj.invoke("LastResult", _0_SALOME_TestModuleCatalog.AddComponent._d_LastResult, args)

omniORB.registerObjref(AddComponent._NP_RepositoryId, _objref_AddComponent)
_0_SALOME_TestModuleCatalog._objref_AddComponent = _objref_AddComponent
del AddComponent, _objref_AddComponent

# AddComponent skeleton
__name__ = "salome.kernel.SALOME_TestModuleCatalog__POA"
class AddComponent (_0_Engines__POA.EngineComponent):
    _NP_RepositoryId = _0_SALOME_TestModuleCatalog.AddComponent._NP_RepositoryId


    _omni_op_d = {"Addition": _0_SALOME_TestModuleCatalog.AddComponent._d_Addition, "Add": _0_SALOME_TestModuleCatalog.AddComponent._d_Add, "Sigma": _0_SALOME_TestModuleCatalog.AddComponent._d_Sigma, "LastResult": _0_SALOME_TestModuleCatalog.AddComponent._d_LastResult}
    _omni_op_d.update(_0_Engines__POA.EngineComponent._omni_op_d)

AddComponent._omni_skeleton = AddComponent
_0_SALOME_TestModuleCatalog__POA.AddComponent = AddComponent
omniORB.registerSkeleton(AddComponent._NP_RepositoryId, AddComponent)
del AddComponent
__name__ = "salome.kernel.SALOME_TestModuleCatalog"

# interface Adder
_0_SALOME_TestModuleCatalog._d_Adder = (omniORB.tcInternal.tv_objref, "IDL:SALOME_TestModuleCatalog/Adder:1.0", "Adder")
omniORB.typeMapping["IDL:SALOME_TestModuleCatalog/Adder:1.0"] = _0_SALOME_TestModuleCatalog._d_Adder
_0_SALOME_TestModuleCatalog.Adder = omniORB.newEmptyClass()
class Adder (_0_Engines.EngineComponent):
    _NP_RepositoryId = _0_SALOME_TestModuleCatalog._d_Adder[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_SALOME_TestModuleCatalog.Adder = Adder
_0_SALOME_TestModuleCatalog._tc_Adder = omniORB.tcInternal.createTypeCode(_0_SALOME_TestModuleCatalog._d_Adder)
omniORB.registerType(Adder._NP_RepositoryId, _0_SALOME_TestModuleCatalog._d_Adder, _0_SALOME_TestModuleCatalog._tc_Adder)

# Adder operations and attributes
Adder._d_Add = ((omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), None)
Adder._d_AddAndCompare = ((omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.typeMapping["IDL:SALOME_TestModuleCatalog/Adder:1.0"]), (omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), None)
Adder._d_SetLastResult = ((omniORB.tcInternal.tv_double, ), (), None)
Adder._d_LastResult = ((), (omniORB.tcInternal.tv_double, ), None)

# Adder object reference
class _objref_Adder (_0_Engines._objref_EngineComponent):
    _NP_RepositoryId = Adder._NP_RepositoryId

    def __init__(self, obj):
        _0_Engines._objref_EngineComponent.__init__(self, obj)

    def Add(self, *args):
        return self._obj.invoke("Add", _0_SALOME_TestModuleCatalog.Adder._d_Add, args)

    def AddAndCompare(self, *args):
        return self._obj.invoke("AddAndCompare", _0_SALOME_TestModuleCatalog.Adder._d_AddAndCompare, args)

    def SetLastResult(self, *args):
        return self._obj.invoke("SetLastResult", _0_SALOME_TestModuleCatalog.Adder._d_SetLastResult, args)

    def LastResult(self, *args):
        return self._obj.invoke("LastResult", _0_SALOME_TestModuleCatalog.Adder._d_LastResult, args)

omniORB.registerObjref(Adder._NP_RepositoryId, _objref_Adder)
_0_SALOME_TestModuleCatalog._objref_Adder = _objref_Adder
del Adder, _objref_Adder

# Adder skeleton
__name__ = "salome.kernel.SALOME_TestModuleCatalog__POA"
class Adder (_0_Engines__POA.EngineComponent):
    _NP_RepositoryId = _0_SALOME_TestModuleCatalog.Adder._NP_RepositoryId


    _omni_op_d = {"Add": _0_SALOME_TestModuleCatalog.Adder._d_Add, "AddAndCompare": _0_SALOME_TestModuleCatalog.Adder._d_AddAndCompare, "SetLastResult": _0_SALOME_TestModuleCatalog.Adder._d_SetLastResult, "LastResult": _0_SALOME_TestModuleCatalog.Adder._d_LastResult}
    _omni_op_d.update(_0_Engines__POA.EngineComponent._omni_op_d)

Adder._omni_skeleton = Adder
_0_SALOME_TestModuleCatalog__POA.Adder = Adder
omniORB.registerSkeleton(Adder._NP_RepositoryId, Adder)
del Adder
__name__ = "salome.kernel.SALOME_TestModuleCatalog"

#
# End of module "SALOME_TestModuleCatalog"
#
__name__ = "salome.kernel.SALOME_TestModuleCatalog_idl"

_exported_modules = ( "salome.kernel.SALOME_TestModuleCatalog", )

# The end.

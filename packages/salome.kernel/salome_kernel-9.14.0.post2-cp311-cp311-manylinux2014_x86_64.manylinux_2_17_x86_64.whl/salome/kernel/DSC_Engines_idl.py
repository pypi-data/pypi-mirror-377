# Python stubs generated by omniidl from /tmp/kernel/idl/DSC_Engines.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "SALOME_GenericObj.idl"
import salome.kernel.SALOME_GenericObj_idl
_0_SALOME = omniORB.openModule("salome.kernel.SALOME")
_0_SALOME__POA = omniORB.openModule("salome.kernel.SALOME__POA")

# #include "SALOME_Exception.idl"
import salome.kernel.SALOME_Exception_idl
_0_SALOME = omniORB.openModule("salome.kernel.SALOME")
_0_SALOME__POA = omniORB.openModule("salome.kernel.SALOME__POA")

# #include "SALOMEDS.idl"
import salome.kernel.SALOMEDS_idl
_0_SALOMEDS = omniORB.openModule("salome.kernel.SALOMEDS")
_0_SALOMEDS__POA = omniORB.openModule("salome.kernel.SALOMEDS__POA")

# #include "SALOME_Comm.idl"
import salome.kernel.SALOME_Comm_idl
_0_SALOME = omniORB.openModule("salome.kernel.SALOME")
_0_SALOME__POA = omniORB.openModule("salome.kernel.SALOME__POA")

# #include "SALOME_PyNode.idl"
import salome.kernel.SALOME_PyNode_idl
_0_Engines = omniORB.openModule("salome.kernel.Engines")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA")

# #include "SALOME_Embedded_NamingService.idl"
import salome.kernel.SALOME_Embedded_NamingService_idl
_0_Engines = omniORB.openModule("salome.kernel.Engines")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA")

# #include "SALOME_Component.idl"
import salome.kernel.SALOME_Component_idl
_0_Engines = omniORB.openModule("salome.kernel.Engines")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA")

# #include "SALOME_Ports.idl"
import salome.kernel.SALOME_Ports_idl
_0_Ports = omniORB.openModule("salome.kernel.Ports")
_0_Ports__POA = omniORB.openModule("salome.kernel.Ports__POA")

#
# Start of module "Engines"
#
__name__ = "salome.kernel.Engines"
_0_Engines = omniORB.openModule("salome.kernel.Engines", r"/tmp/kernel/idl/DSC_Engines.idl")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA", r"/tmp/kernel/idl/DSC_Engines.idl")


# interface DSC
_0_Engines._d_DSC = (omniORB.tcInternal.tv_objref, "IDL:Engines/DSC:1.0", "DSC")
omniORB.typeMapping["IDL:Engines/DSC:1.0"] = _0_Engines._d_DSC
_0_Engines.DSC = omniORB.newEmptyClass()
class DSC (_0_Engines.EngineComponent):
    _NP_RepositoryId = _0_Engines._d_DSC[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # typedef ... uses_port
    class uses_port:
        _NP_RepositoryId = "IDL:Engines/DSC/uses_port:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_uses_port  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Ports/Port:1.0"], 0)
    _ad_uses_port = (omniORB.tcInternal.tv_alias, uses_port._NP_RepositoryId, "uses_port", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Ports/Port:1.0"], 0))
    _tc_uses_port = omniORB.tcInternal.createTypeCode(_ad_uses_port)
    omniORB.registerType(uses_port._NP_RepositoryId, _ad_uses_port, _tc_uses_port)
    
    # enum Message
    AddingConnection = omniORB.EnumItem("AddingConnection", 0)
    RemovingConnection = omniORB.EnumItem("RemovingConnection", 1)
    ApplicationError = omniORB.EnumItem("ApplicationError", 2)
    Message = omniORB.Enum("IDL:Engines/DSC/Message:1.0", (AddingConnection, RemovingConnection, ApplicationError,))

    _d_Message  = (omniORB.tcInternal.tv_enum, Message._NP_RepositoryId, "Message", Message._items)
    _tc_Message = omniORB.tcInternal.createTypeCode(_d_Message)
    omniORB.registerType(Message._NP_RepositoryId, _d_Message, _tc_Message)
    
    # exception PortNotDefined
    _0_Engines.DSC.PortNotDefined = omniORB.newEmptyClass()
    class PortNotDefined (CORBA.UserException):
        _NP_RepositoryId = "IDL:Engines/DSC/PortNotDefined:1.0"

        _NP_ClassName = "Engines.DSC.PortNotDefined"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_PortNotDefined  = (omniORB.tcInternal.tv_except, PortNotDefined, PortNotDefined._NP_RepositoryId, "PortNotDefined")
    _tc_PortNotDefined = omniORB.tcInternal.createTypeCode(_d_PortNotDefined)
    omniORB.registerType(PortNotDefined._NP_RepositoryId, _d_PortNotDefined, _tc_PortNotDefined)
    
    # exception PortAlreadyDefined
    _0_Engines.DSC.PortAlreadyDefined = omniORB.newEmptyClass()
    class PortAlreadyDefined (CORBA.UserException):
        _NP_RepositoryId = "IDL:Engines/DSC/PortAlreadyDefined:1.0"

        _NP_ClassName = "Engines.DSC.PortAlreadyDefined"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_PortAlreadyDefined  = (omniORB.tcInternal.tv_except, PortAlreadyDefined, PortAlreadyDefined._NP_RepositoryId, "PortAlreadyDefined")
    _tc_PortAlreadyDefined = omniORB.tcInternal.createTypeCode(_d_PortAlreadyDefined)
    omniORB.registerType(PortAlreadyDefined._NP_RepositoryId, _d_PortAlreadyDefined, _tc_PortAlreadyDefined)
    
    # exception PortNotConnected
    _0_Engines.DSC.PortNotConnected = omniORB.newEmptyClass()
    class PortNotConnected (CORBA.UserException):
        _NP_RepositoryId = "IDL:Engines/DSC/PortNotConnected:1.0"

        _NP_ClassName = "Engines.DSC.PortNotConnected"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_PortNotConnected  = (omniORB.tcInternal.tv_except, PortNotConnected, PortNotConnected._NP_RepositoryId, "PortNotConnected")
    _tc_PortNotConnected = omniORB.tcInternal.createTypeCode(_d_PortNotConnected)
    omniORB.registerType(PortNotConnected._NP_RepositoryId, _d_PortNotConnected, _tc_PortNotConnected)
    
    # exception BadPortType
    _0_Engines.DSC.BadPortType = omniORB.newEmptyClass()
    class BadPortType (CORBA.UserException):
        _NP_RepositoryId = "IDL:Engines/DSC/BadPortType:1.0"

        _NP_ClassName = "Engines.DSC.BadPortType"

        def __init__(self, expected, received):
            CORBA.UserException.__init__(self, expected, received)
            self.expected = expected
            self.received = received
    
    _d_BadPortType  = (omniORB.tcInternal.tv_except, BadPortType, BadPortType._NP_RepositoryId, "BadPortType", "expected", (omniORB.tcInternal.tv_string,0), "received", (omniORB.tcInternal.tv_string,0))
    _tc_BadPortType = omniORB.tcInternal.createTypeCode(_d_BadPortType)
    omniORB.registerType(BadPortType._NP_RepositoryId, _d_BadPortType, _tc_BadPortType)
    
    # exception NilPort
    _0_Engines.DSC.NilPort = omniORB.newEmptyClass()
    class NilPort (CORBA.UserException):
        _NP_RepositoryId = "IDL:Engines/DSC/NilPort:1.0"

        _NP_ClassName = "Engines.DSC.NilPort"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_NilPort  = (omniORB.tcInternal.tv_except, NilPort, NilPort._NP_RepositoryId, "NilPort")
    _tc_NilPort = omniORB.tcInternal.createTypeCode(_d_NilPort)
    omniORB.registerType(NilPort._NP_RepositoryId, _d_NilPort, _tc_NilPort)
    
    # exception BadPortReference
    _0_Engines.DSC.BadPortReference = omniORB.newEmptyClass()
    class BadPortReference (CORBA.UserException):
        _NP_RepositoryId = "IDL:Engines/DSC/BadPortReference:1.0"

        _NP_ClassName = "Engines.DSC.BadPortReference"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_BadPortReference  = (omniORB.tcInternal.tv_except, BadPortReference, BadPortReference._NP_RepositoryId, "BadPortReference")
    _tc_BadPortReference = omniORB.tcInternal.createTypeCode(_d_BadPortReference)
    omniORB.registerType(BadPortReference._NP_RepositoryId, _d_BadPortReference, _tc_BadPortReference)
    
    # exception BadProperty
    _0_Engines.DSC.BadProperty = omniORB.newEmptyClass()
    class BadProperty (CORBA.UserException):
        _NP_RepositoryId = "IDL:Engines/DSC/BadProperty:1.0"

        _NP_ClassName = "Engines.DSC.BadProperty"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_BadProperty  = (omniORB.tcInternal.tv_except, BadProperty, BadProperty._NP_RepositoryId, "BadProperty")
    _tc_BadProperty = omniORB.tcInternal.createTypeCode(_d_BadProperty)
    omniORB.registerType(BadProperty._NP_RepositoryId, _d_BadProperty, _tc_BadProperty)


_0_Engines.DSC = DSC
_0_Engines._tc_DSC = omniORB.tcInternal.createTypeCode(_0_Engines._d_DSC)
omniORB.registerType(DSC._NP_RepositoryId, _0_Engines._d_DSC, _0_Engines._tc_DSC)

# DSC operations and attributes
DSC._d_add_provides_port = ((omniORB.typeMapping["IDL:Ports/Port:1.0"], (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:Ports/PortProperties:1.0"]), (), {_0_Engines.DSC.PortAlreadyDefined._NP_RepositoryId: _0_Engines.DSC._d_PortAlreadyDefined, _0_Engines.DSC.NilPort._NP_RepositoryId: _0_Engines.DSC._d_NilPort, _0_Engines.DSC.BadProperty._NP_RepositoryId: _0_Engines.DSC._d_BadProperty})
DSC._d_add_uses_port = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:Ports/PortProperties:1.0"]), (), {_0_Engines.DSC.PortAlreadyDefined._NP_RepositoryId: _0_Engines.DSC._d_PortAlreadyDefined, _0_Engines.DSC.BadProperty._NP_RepositoryId: _0_Engines.DSC._d_BadProperty})
DSC._d_get_provides_port = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_boolean), (omniORB.typeMapping["IDL:Ports/Port:1.0"], ), {_0_Engines.DSC.PortNotDefined._NP_RepositoryId: _0_Engines.DSC._d_PortNotDefined, _0_Engines.DSC.PortNotConnected._NP_RepositoryId: _0_Engines.DSC._d_PortNotConnected, _0_Engines.DSC.BadPortType._NP_RepositoryId: _0_Engines.DSC._d_BadPortType})
DSC._d_get_uses_port = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:Engines/DSC/uses_port:1.0"], ), {_0_Engines.DSC.PortNotDefined._NP_RepositoryId: _0_Engines.DSC._d_PortNotDefined, _0_Engines.DSC.PortNotConnected._NP_RepositoryId: _0_Engines.DSC._d_PortNotConnected, _0_Engines.DSC.BadPortType._NP_RepositoryId: _0_Engines.DSC._d_BadPortType})
DSC._d_connect_provides_port = (((omniORB.tcInternal.tv_string,0), ), (), {_0_Engines.DSC.PortNotDefined._NP_RepositoryId: _0_Engines.DSC._d_PortNotDefined})
DSC._d_connect_uses_port = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:Ports/Port:1.0"]), (), {_0_Engines.DSC.PortNotDefined._NP_RepositoryId: _0_Engines.DSC._d_PortNotDefined, _0_Engines.DSC.BadPortType._NP_RepositoryId: _0_Engines.DSC._d_BadPortType, _0_Engines.DSC.NilPort._NP_RepositoryId: _0_Engines.DSC._d_NilPort})
DSC._d_is_connected = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), {_0_Engines.DSC.PortNotDefined._NP_RepositoryId: _0_Engines.DSC._d_PortNotDefined})
DSC._d_disconnect_provides_port = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:Engines/DSC/Message:1.0"]), (), {_0_Engines.DSC.PortNotDefined._NP_RepositoryId: _0_Engines.DSC._d_PortNotDefined, _0_Engines.DSC.PortNotConnected._NP_RepositoryId: _0_Engines.DSC._d_PortNotConnected})
DSC._d_disconnect_uses_port = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:Ports/Port:1.0"], omniORB.typeMapping["IDL:Engines/DSC/Message:1.0"]), (), {_0_Engines.DSC.PortNotDefined._NP_RepositoryId: _0_Engines.DSC._d_PortNotDefined, _0_Engines.DSC.PortNotConnected._NP_RepositoryId: _0_Engines.DSC._d_PortNotConnected, _0_Engines.DSC.BadPortReference._NP_RepositoryId: _0_Engines.DSC._d_BadPortReference})
DSC._d_get_port_properties = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:Ports/PortProperties:1.0"], ), {_0_Engines.DSC.PortNotDefined._NP_RepositoryId: _0_Engines.DSC._d_PortNotDefined})

# DSC object reference
class _objref_DSC (_0_Engines._objref_EngineComponent):
    _NP_RepositoryId = DSC._NP_RepositoryId

    def __init__(self, obj):
        _0_Engines._objref_EngineComponent.__init__(self, obj)

    def add_provides_port(self, *args):
        return self._obj.invoke("add_provides_port", _0_Engines.DSC._d_add_provides_port, args)

    def add_uses_port(self, *args):
        return self._obj.invoke("add_uses_port", _0_Engines.DSC._d_add_uses_port, args)

    def get_provides_port(self, *args):
        return self._obj.invoke("get_provides_port", _0_Engines.DSC._d_get_provides_port, args)

    def get_uses_port(self, *args):
        return self._obj.invoke("get_uses_port", _0_Engines.DSC._d_get_uses_port, args)

    def connect_provides_port(self, *args):
        return self._obj.invoke("connect_provides_port", _0_Engines.DSC._d_connect_provides_port, args)

    def connect_uses_port(self, *args):
        return self._obj.invoke("connect_uses_port", _0_Engines.DSC._d_connect_uses_port, args)

    def is_connected(self, *args):
        return self._obj.invoke("is_connected", _0_Engines.DSC._d_is_connected, args)

    def disconnect_provides_port(self, *args):
        return self._obj.invoke("disconnect_provides_port", _0_Engines.DSC._d_disconnect_provides_port, args)

    def disconnect_uses_port(self, *args):
        return self._obj.invoke("disconnect_uses_port", _0_Engines.DSC._d_disconnect_uses_port, args)

    def get_port_properties(self, *args):
        return self._obj.invoke("get_port_properties", _0_Engines.DSC._d_get_port_properties, args)

omniORB.registerObjref(DSC._NP_RepositoryId, _objref_DSC)
_0_Engines._objref_DSC = _objref_DSC
del DSC, _objref_DSC

# DSC skeleton
__name__ = "salome.kernel.Engines__POA"
class DSC (_0_Engines__POA.EngineComponent):
    _NP_RepositoryId = _0_Engines.DSC._NP_RepositoryId


    _omni_op_d = {"add_provides_port": _0_Engines.DSC._d_add_provides_port, "add_uses_port": _0_Engines.DSC._d_add_uses_port, "get_provides_port": _0_Engines.DSC._d_get_provides_port, "get_uses_port": _0_Engines.DSC._d_get_uses_port, "connect_provides_port": _0_Engines.DSC._d_connect_provides_port, "connect_uses_port": _0_Engines.DSC._d_connect_uses_port, "is_connected": _0_Engines.DSC._d_is_connected, "disconnect_provides_port": _0_Engines.DSC._d_disconnect_provides_port, "disconnect_uses_port": _0_Engines.DSC._d_disconnect_uses_port, "get_port_properties": _0_Engines.DSC._d_get_port_properties}
    _omni_op_d.update(_0_Engines__POA.EngineComponent._omni_op_d)

DSC._omni_skeleton = DSC
_0_Engines__POA.DSC = DSC
omniORB.registerSkeleton(DSC._NP_RepositoryId, DSC)
del DSC
__name__ = "salome.kernel.Engines"

# interface ConnectionManager
_0_Engines._d_ConnectionManager = (omniORB.tcInternal.tv_objref, "IDL:Engines/ConnectionManager:1.0", "ConnectionManager")
omniORB.typeMapping["IDL:Engines/ConnectionManager:1.0"] = _0_Engines._d_ConnectionManager
_0_Engines.ConnectionManager = omniORB.newEmptyClass()
class ConnectionManager :
    _NP_RepositoryId = _0_Engines._d_ConnectionManager[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # exception BadId
    _0_Engines.ConnectionManager.BadId = omniORB.newEmptyClass()
    class BadId (CORBA.UserException):
        _NP_RepositoryId = "IDL:Engines/ConnectionManager/BadId:1.0"

        _NP_ClassName = "Engines.ConnectionManager.BadId"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_BadId  = (omniORB.tcInternal.tv_except, BadId, BadId._NP_RepositoryId, "BadId")
    _tc_BadId = omniORB.tcInternal.createTypeCode(_d_BadId)
    omniORB.registerType(BadId._NP_RepositoryId, _d_BadId, _tc_BadId)
    
    # typedef ... connectionId
    class connectionId:
        _NP_RepositoryId = "IDL:Engines/ConnectionManager/connectionId:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_connectionId  = omniORB.tcInternal.tv_short
    _ad_connectionId = (omniORB.tcInternal.tv_alias, connectionId._NP_RepositoryId, "connectionId", omniORB.tcInternal.tv_short)
    _tc_connectionId = omniORB.tcInternal.createTypeCode(_ad_connectionId)
    omniORB.registerType(connectionId._NP_RepositoryId, _ad_connectionId, _tc_connectionId)


_0_Engines.ConnectionManager = ConnectionManager
_0_Engines._tc_ConnectionManager = omniORB.tcInternal.createTypeCode(_0_Engines._d_ConnectionManager)
omniORB.registerType(ConnectionManager._NP_RepositoryId, _0_Engines._d_ConnectionManager, _0_Engines._tc_ConnectionManager)

# ConnectionManager operations and attributes
ConnectionManager._d_connect = ((omniORB.typeMapping["IDL:Engines/DSC:1.0"], (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:Engines/DSC:1.0"], (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:Engines/ConnectionManager/connectionId:1.0"], ), {_0_Engines.DSC.PortNotDefined._NP_RepositoryId: _0_Engines.DSC._d_PortNotDefined, _0_Engines.DSC.BadPortType._NP_RepositoryId: _0_Engines.DSC._d_BadPortType, _0_Engines.DSC.NilPort._NP_RepositoryId: _0_Engines.DSC._d_NilPort})
ConnectionManager._d_disconnect = ((omniORB.typeMapping["IDL:Engines/ConnectionManager/connectionId:1.0"], omniORB.typeMapping["IDL:Engines/DSC/Message:1.0"]), (), {_0_Engines.ConnectionManager.BadId._NP_RepositoryId: _0_Engines.ConnectionManager._d_BadId, _0_Engines.DSC.PortNotDefined._NP_RepositoryId: _0_Engines.DSC._d_PortNotDefined, _0_Engines.DSC.PortNotConnected._NP_RepositoryId: _0_Engines.DSC._d_PortNotConnected, _0_Engines.DSC.BadPortReference._NP_RepositoryId: _0_Engines.DSC._d_BadPortReference})
ConnectionManager._d_ShutdownWithExit = ((), None, None)
ConnectionManager._d_getPID = ((), (omniORB.tcInternal.tv_long, ), None)

# ConnectionManager object reference
class _objref_ConnectionManager (CORBA.Object):
    _NP_RepositoryId = ConnectionManager._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def connect(self, *args):
        return self._obj.invoke("connect", _0_Engines.ConnectionManager._d_connect, args)

    def disconnect(self, *args):
        return self._obj.invoke("disconnect", _0_Engines.ConnectionManager._d_disconnect, args)

    def ShutdownWithExit(self, *args):
        return self._obj.invoke("ShutdownWithExit", _0_Engines.ConnectionManager._d_ShutdownWithExit, args)

    def getPID(self, *args):
        return self._obj.invoke("getPID", _0_Engines.ConnectionManager._d_getPID, args)

omniORB.registerObjref(ConnectionManager._NP_RepositoryId, _objref_ConnectionManager)
_0_Engines._objref_ConnectionManager = _objref_ConnectionManager
del ConnectionManager, _objref_ConnectionManager

# ConnectionManager skeleton
__name__ = "salome.kernel.Engines__POA"
class ConnectionManager (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.ConnectionManager._NP_RepositoryId


    _omni_op_d = {"connect": _0_Engines.ConnectionManager._d_connect, "disconnect": _0_Engines.ConnectionManager._d_disconnect, "ShutdownWithExit": _0_Engines.ConnectionManager._d_ShutdownWithExit, "getPID": _0_Engines.ConnectionManager._d_getPID}

ConnectionManager._omni_skeleton = ConnectionManager
_0_Engines__POA.ConnectionManager = ConnectionManager
omniORB.registerSkeleton(ConnectionManager._NP_RepositoryId, ConnectionManager)
del ConnectionManager
__name__ = "salome.kernel.Engines"

# interface Superv_Component
_0_Engines._d_Superv_Component = (omniORB.tcInternal.tv_objref, "IDL:Engines/Superv_Component:1.0", "Superv_Component")
omniORB.typeMapping["IDL:Engines/Superv_Component:1.0"] = _0_Engines._d_Superv_Component
_0_Engines.Superv_Component = omniORB.newEmptyClass()
class Superv_Component (_0_Engines.DSC):
    _NP_RepositoryId = _0_Engines._d_Superv_Component[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # struct multiple_param
    _0_Engines.Superv_Component.multiple_param = omniORB.newEmptyClass()
    class multiple_param (omniORB.StructBase):
        _NP_RepositoryId = "IDL:Engines/Superv_Component/multiple_param:1.0"

        _NP_ClassName = "Engines.Superv_Component.multiple_param"

        def __init__(self, name, number):
            self.name = name
            self.number = number
    
    _d_multiple_param  = _0_Engines.Superv_Component._d_multiple_param = (omniORB.tcInternal.tv_struct, multiple_param, multiple_param._NP_RepositoryId, "multiple_param", "name", (omniORB.tcInternal.tv_string,0), "number", omniORB.tcInternal.tv_long)
    _tc_multiple_param = omniORB.tcInternal.createTypeCode(_d_multiple_param)
    omniORB.registerType(multiple_param._NP_RepositoryId, _d_multiple_param, _tc_multiple_param)
    
    # typedef ... seq_multiple_param
    class seq_multiple_param:
        _NP_RepositoryId = "IDL:Engines/Superv_Component/seq_multiple_param:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_seq_multiple_param  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Engines/Superv_Component/multiple_param:1.0"], 0)
    _ad_seq_multiple_param = (omniORB.tcInternal.tv_alias, seq_multiple_param._NP_RepositoryId, "seq_multiple_param", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Engines/Superv_Component/multiple_param:1.0"], 0))
    _tc_seq_multiple_param = omniORB.tcInternal.createTypeCode(_ad_seq_multiple_param)
    omniORB.registerType(seq_multiple_param._NP_RepositoryId, _ad_seq_multiple_param, _tc_seq_multiple_param)


_0_Engines.Superv_Component = Superv_Component
_0_Engines._tc_Superv_Component = omniORB.tcInternal.createTypeCode(_0_Engines._d_Superv_Component)
omniORB.registerType(Superv_Component._NP_RepositoryId, _0_Engines._d_Superv_Component, _0_Engines._tc_Superv_Component)

# Superv_Component operations and attributes
Superv_Component._d_init_service = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
Superv_Component._d_init_service_with_multiple = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:Engines/Superv_Component/seq_multiple_param:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)

# Superv_Component object reference
class _objref_Superv_Component (_0_Engines._objref_DSC):
    _NP_RepositoryId = Superv_Component._NP_RepositoryId

    def __init__(self, obj):
        _0_Engines._objref_DSC.__init__(self, obj)

    def init_service(self, *args):
        return self._obj.invoke("init_service", _0_Engines.Superv_Component._d_init_service, args)

    def init_service_with_multiple(self, *args):
        return self._obj.invoke("init_service_with_multiple", _0_Engines.Superv_Component._d_init_service_with_multiple, args)

omniORB.registerObjref(Superv_Component._NP_RepositoryId, _objref_Superv_Component)
_0_Engines._objref_Superv_Component = _objref_Superv_Component
del Superv_Component, _objref_Superv_Component

# Superv_Component skeleton
__name__ = "salome.kernel.Engines__POA"
class Superv_Component (_0_Engines__POA.DSC):
    _NP_RepositoryId = _0_Engines.Superv_Component._NP_RepositoryId


    _omni_op_d = {"init_service": _0_Engines.Superv_Component._d_init_service, "init_service_with_multiple": _0_Engines.Superv_Component._d_init_service_with_multiple}
    _omni_op_d.update(_0_Engines__POA.DSC._omni_op_d)

Superv_Component._omni_skeleton = Superv_Component
_0_Engines__POA.Superv_Component = Superv_Component
omniORB.registerSkeleton(Superv_Component._NP_RepositoryId, Superv_Component)
del Superv_Component
__name__ = "salome.kernel.Engines"

#
# End of module "Engines"
#
__name__ = "salome.kernel.DSC_Engines_idl"

_exported_modules = ( "salome.kernel.Engines", )

# The end.

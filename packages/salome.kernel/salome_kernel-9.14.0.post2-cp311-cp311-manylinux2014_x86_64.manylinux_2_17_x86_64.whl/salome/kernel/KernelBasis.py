# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _KernelBasis
else:
    import _KernelBasis

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _KernelBasis.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _KernelBasis.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _KernelBasis.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _KernelBasis.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _KernelBasis.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _KernelBasis.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _KernelBasis.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _KernelBasis.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _KernelBasis.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _KernelBasis.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _KernelBasis.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _KernelBasis.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _KernelBasis.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _KernelBasis.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _KernelBasis.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _KernelBasis.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _KernelBasis.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _KernelBasis:
_KernelBasis.SwigPyIterator_swigregister(SwigPyIterator)

class dvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _KernelBasis.dvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _KernelBasis.dvec___nonzero__(self)

    def __bool__(self) -> "bool":
        return _KernelBasis.dvec___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _KernelBasis.dvec___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _KernelBasis.dvec___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _KernelBasis.dvec___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _KernelBasis.dvec___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _KernelBasis.dvec___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _KernelBasis.dvec___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _KernelBasis.dvec___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _KernelBasis.dvec_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _KernelBasis.dvec_append(self, x)

    def empty(self) -> "bool":
        return _KernelBasis.dvec_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _KernelBasis.dvec_size(self)

    def swap(self, v: "dvec") -> "void":
        return _KernelBasis.dvec_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _KernelBasis.dvec_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _KernelBasis.dvec_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _KernelBasis.dvec_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _KernelBasis.dvec_rend(self)

    def clear(self) -> "void":
        return _KernelBasis.dvec_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _KernelBasis.dvec_get_allocator(self)

    def pop_back(self) -> "void":
        return _KernelBasis.dvec_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _KernelBasis.dvec_erase(self, *args)

    def __init__(self, *args):
        _KernelBasis.dvec_swiginit(self, _KernelBasis.new_dvec(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _KernelBasis.dvec_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _KernelBasis.dvec_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _KernelBasis.dvec_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _KernelBasis.dvec_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _KernelBasis.dvec_resize(self, *args)

    def insert(self, *args) -> "void":
        return _KernelBasis.dvec_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _KernelBasis.dvec_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _KernelBasis.dvec_capacity(self)
    __swig_destroy__ = _KernelBasis.delete_dvec

# Register dvec in _KernelBasis:
_KernelBasis.dvec_swigregister(dvec)

class strvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _KernelBasis.strvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _KernelBasis.strvec___nonzero__(self)

    def __bool__(self) -> "bool":
        return _KernelBasis.strvec___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _KernelBasis.strvec___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _KernelBasis.strvec___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _KernelBasis.strvec___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _KernelBasis.strvec___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _KernelBasis.strvec___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _KernelBasis.strvec___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _KernelBasis.strvec___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _KernelBasis.strvec_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _KernelBasis.strvec_append(self, x)

    def empty(self) -> "bool":
        return _KernelBasis.strvec_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _KernelBasis.strvec_size(self)

    def swap(self, v: "strvec") -> "void":
        return _KernelBasis.strvec_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _KernelBasis.strvec_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _KernelBasis.strvec_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _KernelBasis.strvec_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _KernelBasis.strvec_rend(self)

    def clear(self) -> "void":
        return _KernelBasis.strvec_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _KernelBasis.strvec_get_allocator(self)

    def pop_back(self) -> "void":
        return _KernelBasis.strvec_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _KernelBasis.strvec_erase(self, *args)

    def __init__(self, *args):
        _KernelBasis.strvec_swiginit(self, _KernelBasis.new_strvec(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _KernelBasis.strvec_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _KernelBasis.strvec_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _KernelBasis.strvec_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _KernelBasis.strvec_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _KernelBasis.strvec_resize(self, *args)

    def insert(self, *args) -> "void":
        return _KernelBasis.strvec_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _KernelBasis.strvec_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _KernelBasis.strvec_capacity(self)
    __swig_destroy__ = _KernelBasis.delete_strvec

# Register strvec in _KernelBasis:
_KernelBasis.strvec_swigregister(strvec)


def getSSLMode() -> "bool":
    return _KernelBasis.getSSLMode()

def setSSLMode(sslMode: "bool") -> "void":
    return _KernelBasis.setSSLMode(sslMode)

def getGUIMode() -> "bool":
    return _KernelBasis.getGUIMode()

def setGUIMode(guiMode: "bool") -> "void":
    return _KernelBasis.setGUIMode(guiMode)

def getIOROfEmbeddedNS() -> "std::string":
    return _KernelBasis.getIOROfEmbeddedNS()

def setIOROfEmbeddedNS(ior: "std::string const &") -> "void":
    return _KernelBasis.setIOROfEmbeddedNS(ior)

def GetTimeAdjustmentCst() -> "double":
    return _KernelBasis.GetTimeAdjustmentCst()

def LaunchMonitoring(pyScriptToEvaluate: "std::string const &") -> "long":
    return _KernelBasis.LaunchMonitoring(pyScriptToEvaluate)

def StopMonitoring(pid: "long") -> "void":
    return _KernelBasis.StopMonitoring(pid)

def VerbosityActivated() -> "bool":
    return _KernelBasis.VerbosityActivated()

def SetVerbosityActivated(flag: "bool") -> "void":
    return _KernelBasis.SetVerbosityActivated(flag)

def IsDebugLevel() -> "bool":
    return _KernelBasis.IsDebugLevel()

def IsInfoLevel() -> "bool":
    return _KernelBasis.IsInfoLevel()

def IsWarningLevel() -> "bool":
    return _KernelBasis.IsWarningLevel()

def IsErrorLevel() -> "bool":
    return _KernelBasis.IsErrorLevel()

def WriteInStdout(msg: "std::string const &") -> "void":
    return _KernelBasis.WriteInStdout(msg)

def WriteInStderr(msg: "std::string const &") -> "void":
    return _KernelBasis.WriteInStderr(msg)

def IncrementRefCounter(obj: "PyObject *") -> "void":
    return _KernelBasis.IncrementRefCounter(obj)

def HeatMarcel(timeAjustment: "double", nbThreads: "unsigned int"=0) -> "PyObject *":
    return _KernelBasis.HeatMarcel(timeAjustment, nbThreads)

def ReadFloatsInFileSwig(fileName: "std::string const &") -> "std::vector< double,std::allocator< double > >":
    return _KernelBasis.ReadFloatsInFileSwig(fileName)

def GetBigObjOnDiskThreshold() -> "int":
    return _KernelBasis.GetBigObjOnDiskThreshold()

def SetBigObjOnDiskThreshold(newThreshold: "int") -> "void":
    return _KernelBasis.SetBigObjOnDiskThreshold(newThreshold)

def SetBigObjOnDiskDirectory(directory: "std::string const &") -> "void":
    return _KernelBasis.SetBigObjOnDiskDirectory(directory)

def BigObjOnDiskDirectoryDefined() -> "bool":
    return _KernelBasis.BigObjOnDiskDirectoryDefined()

def SetNumberOfRetry(nbRetry: "int") -> "void":
    return _KernelBasis.SetNumberOfRetry(nbRetry)

def GetNumberOfRetry() -> "int":
    return _KernelBasis.GetNumberOfRetry()

def SetExecutionTimeOut(timeOutInSecond: "int") -> "void":
    return _KernelBasis.SetExecutionTimeOut(timeOutInSecond)

def GetExecutionTimeOut() -> "int":
    return _KernelBasis.GetExecutionTimeOut()

def GetForwardCurrentDirectoryStatus() -> "bool":
    return _KernelBasis.GetForwardCurrentDirectoryStatus()

def SetForwardCurrentDirectoryStatus(newStatus: "bool") -> "void":
    return _KernelBasis.SetForwardCurrentDirectoryStatus(newStatus)

def GetDirectoryForReplayFiles() -> "std::string":
    return _KernelBasis.GetDirectoryForReplayFiles()

def SetDirectoryForReplayFiles(directory: "std::string const &") -> "void":
    return _KernelBasis.SetDirectoryForReplayFiles(directory)

def BigObjOnDiskProtocolToStr(protocol: "int") -> "std::string":
    return _KernelBasis.BigObjOnDiskProtocolToStr(protocol)

def BigObjOnDiskProtocolFromStr(protocol: "std::string const &") -> "int":
    return _KernelBasis.BigObjOnDiskProtocolFromStr(protocol)

def GetBigObjOnDiskProtocolAndDirectory() -> "PyObject *":
    return _KernelBasis.GetBigObjOnDiskProtocolAndDirectory()

def SetVerbosityLevel(level: "std::string const &") -> "void":
    return _KernelBasis.SetVerbosityLevel(level)

def VerbosityLevel() -> "std::string":
    return _KernelBasis.VerbosityLevel()

def SetPyExecutionMode(mode: "std::string const &") -> "void":
    return _KernelBasis.SetPyExecutionMode(mode)

def GetPyExecutionMode() -> "std::string":
    return _KernelBasis.GetPyExecutionMode()

def GetAllPyExecutionModes() -> "std::vector< std::string,std::allocator< std::string > >":
    return _KernelBasis.GetAllPyExecutionModes()

def ReadFloatsInFile( fileName ):
  ret = ReadFloatsInFileSwig( fileName )
  return ret




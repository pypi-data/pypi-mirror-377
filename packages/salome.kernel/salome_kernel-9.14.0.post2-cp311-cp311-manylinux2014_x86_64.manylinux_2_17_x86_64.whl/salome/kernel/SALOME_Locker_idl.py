# Python stubs generated by omniidl from /tmp/kernel/idl/SALOME_Locker.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "Engines"
#
__name__ = "salome.kernel.Engines"
_0_Engines = omniORB.openModule("salome.kernel.Engines", r"/tmp/kernel/idl/SALOME_Locker.idl")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA", r"/tmp/kernel/idl/SALOME_Locker.idl")


# interface LockServant
_0_Engines._d_LockServant = (omniORB.tcInternal.tv_objref, "IDL:Engines/LockServant:1.0", "LockServant")
omniORB.typeMapping["IDL:Engines/LockServant:1.0"] = _0_Engines._d_LockServant
_0_Engines.LockServant = omniORB.newEmptyClass()
class LockServant :
    _NP_RepositoryId = _0_Engines._d_LockServant[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.LockServant = LockServant
_0_Engines._tc_LockServant = omniORB.tcInternal.createTypeCode(_0_Engines._d_LockServant)
omniORB.registerType(LockServant._NP_RepositoryId, _0_Engines._d_LockServant, _0_Engines._tc_LockServant)

# LockServant operations and attributes
LockServant._d_acquire = ((), (), None)
LockServant._d_release = ((), (), None)

# LockServant object reference
class _objref_LockServant (CORBA.Object):
    _NP_RepositoryId = LockServant._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def acquire(self, *args):
        return self._obj.invoke("acquire", _0_Engines.LockServant._d_acquire, args)

    def release(self, *args):
        return self._obj.invoke("release", _0_Engines.LockServant._d_release, args)

omniORB.registerObjref(LockServant._NP_RepositoryId, _objref_LockServant)
_0_Engines._objref_LockServant = _objref_LockServant
del LockServant, _objref_LockServant

# LockServant skeleton
__name__ = "salome.kernel.Engines__POA"
class LockServant (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.LockServant._NP_RepositoryId


    _omni_op_d = {"acquire": _0_Engines.LockServant._d_acquire, "release": _0_Engines.LockServant._d_release}

LockServant._omni_skeleton = LockServant
_0_Engines__POA.LockServant = LockServant
omniORB.registerSkeleton(LockServant._NP_RepositoryId, LockServant)
del LockServant
__name__ = "salome.kernel.Engines"

# interface RendezVousServant
_0_Engines._d_RendezVousServant = (omniORB.tcInternal.tv_objref, "IDL:Engines/RendezVousServant:1.0", "RendezVousServant")
omniORB.typeMapping["IDL:Engines/RendezVousServant:1.0"] = _0_Engines._d_RendezVousServant
_0_Engines.RendezVousServant = omniORB.newEmptyClass()
class RendezVousServant :
    _NP_RepositoryId = _0_Engines._d_RendezVousServant[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.RendezVousServant = RendezVousServant
_0_Engines._tc_RendezVousServant = omniORB.tcInternal.createTypeCode(_0_Engines._d_RendezVousServant)
omniORB.registerType(RendezVousServant._NP_RepositoryId, _0_Engines._d_RendezVousServant, _0_Engines._tc_RendezVousServant)

# RendezVousServant operations and attributes
RendezVousServant._d_acquire = ((), (), None)

# RendezVousServant object reference
class _objref_RendezVousServant (CORBA.Object):
    _NP_RepositoryId = RendezVousServant._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def acquire(self, *args):
        return self._obj.invoke("acquire", _0_Engines.RendezVousServant._d_acquire, args)

omniORB.registerObjref(RendezVousServant._NP_RepositoryId, _objref_RendezVousServant)
_0_Engines._objref_RendezVousServant = _objref_RendezVousServant
del RendezVousServant, _objref_RendezVousServant

# RendezVousServant skeleton
__name__ = "salome.kernel.Engines__POA"
class RendezVousServant (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.RendezVousServant._NP_RepositoryId


    _omni_op_d = {"acquire": _0_Engines.RendezVousServant._d_acquire}

RendezVousServant._omni_skeleton = RendezVousServant
_0_Engines__POA.RendezVousServant = RendezVousServant
omniORB.registerSkeleton(RendezVousServant._NP_RepositoryId, RendezVousServant)
del RendezVousServant
__name__ = "salome.kernel.Engines"

# interface LockMaster
_0_Engines._d_LockMaster = (omniORB.tcInternal.tv_objref, "IDL:Engines/LockMaster:1.0", "LockMaster")
omniORB.typeMapping["IDL:Engines/LockMaster:1.0"] = _0_Engines._d_LockMaster
_0_Engines.LockMaster = omniORB.newEmptyClass()
class LockMaster :
    _NP_RepositoryId = _0_Engines._d_LockMaster[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.LockMaster = LockMaster
_0_Engines._tc_LockMaster = omniORB.tcInternal.createTypeCode(_0_Engines._d_LockMaster)
omniORB.registerType(LockMaster._NP_RepositoryId, _0_Engines._d_LockMaster, _0_Engines._tc_LockMaster)

# LockMaster operations and attributes
LockMaster._d_getLockerFor = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:Engines/LockServant:1.0"], ), None)
LockMaster._d_buildRendezVous = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:Engines/RendezVousServant:1.0"], ), None)

# LockMaster object reference
class _objref_LockMaster (CORBA.Object):
    _NP_RepositoryId = LockMaster._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def getLockerFor(self, *args):
        return self._obj.invoke("getLockerFor", _0_Engines.LockMaster._d_getLockerFor, args)

    def buildRendezVous(self, *args):
        return self._obj.invoke("buildRendezVous", _0_Engines.LockMaster._d_buildRendezVous, args)

omniORB.registerObjref(LockMaster._NP_RepositoryId, _objref_LockMaster)
_0_Engines._objref_LockMaster = _objref_LockMaster
del LockMaster, _objref_LockMaster

# LockMaster skeleton
__name__ = "salome.kernel.Engines__POA"
class LockMaster (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.LockMaster._NP_RepositoryId


    _omni_op_d = {"getLockerFor": _0_Engines.LockMaster._d_getLockerFor, "buildRendezVous": _0_Engines.LockMaster._d_buildRendezVous}

LockMaster._omni_skeleton = LockMaster
_0_Engines__POA.LockMaster = LockMaster
omniORB.registerSkeleton(LockMaster._NP_RepositoryId, LockMaster)
del LockMaster
__name__ = "salome.kernel.Engines"

#
# End of module "Engines"
#
__name__ = "salome.kernel.SALOME_Locker_idl"

_exported_modules = ( "salome.kernel.Engines", )

# The end.

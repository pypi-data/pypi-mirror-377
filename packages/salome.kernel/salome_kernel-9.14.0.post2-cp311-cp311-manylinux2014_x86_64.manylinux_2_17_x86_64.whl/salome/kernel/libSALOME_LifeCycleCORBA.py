# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libSALOME_LifeCycleCORBA
else:
    import _libSALOME_LifeCycleCORBA

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def makeText(text: "char const *", fileName: "char const *", lineNumber: "unsigned int const") -> "std::string":
    r"""makeText(char const * text, char const * fileName, unsigned int const lineNumber) -> std::string"""
    return _libSALOME_LifeCycleCORBA.makeText(text, fileName, lineNumber)
class SALOME_Exception(object):
    r"""Proxy of C++ SALOME_Exception class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SALOME_Exception self, std::string const & text) -> SALOME_Exception
        __init__(SALOME_Exception self, char const * text, char const * fileName=None, unsigned int const lineNumber=0) -> SALOME_Exception
        """
        _libSALOME_LifeCycleCORBA.SALOME_Exception_swiginit(self, _libSALOME_LifeCycleCORBA.new_SALOME_Exception(*args))
    __swig_destroy__ = _libSALOME_LifeCycleCORBA.delete_SALOME_Exception

    def what(self) -> "char const *":
        r"""what(SALOME_Exception self) -> char const *"""
        return _libSALOME_LifeCycleCORBA.SALOME_Exception_what(self)

# Register SALOME_Exception in _libSALOME_LifeCycleCORBA:
_libSALOME_LifeCycleCORBA.SALOME_Exception_swigregister(SALOME_Exception)

class IncompatibleComponent(SALOME_Exception):
    r"""Proxy of C++ IncompatibleComponent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IncompatibleComponent self) -> IncompatibleComponent
        __init__(IncompatibleComponent self, IncompatibleComponent ex) -> IncompatibleComponent
        """
        _libSALOME_LifeCycleCORBA.IncompatibleComponent_swiginit(self, _libSALOME_LifeCycleCORBA.new_IncompatibleComponent(*args))
    __swig_destroy__ = _libSALOME_LifeCycleCORBA.delete_IncompatibleComponent

# Register IncompatibleComponent in _libSALOME_LifeCycleCORBA:
_libSALOME_LifeCycleCORBA.IncompatibleComponent_swigregister(IncompatibleComponent)

class SALOME_LifeCycleCORBA(object):
    r"""Proxy of C++ SALOME_LifeCycleCORBA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ns: "SALOME_NamingService_Abstract *"=None):
        r"""__init__(SALOME_LifeCycleCORBA self, SALOME_NamingService_Abstract * ns=None) -> SALOME_LifeCycleCORBA"""
        _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_swiginit(self, _libSALOME_LifeCycleCORBA.new_SALOME_LifeCycleCORBA(ns))
    __swig_destroy__ = _libSALOME_LifeCycleCORBA.delete_SALOME_LifeCycleCORBA

    def FindComponent(self, params: "Engines::ContainerParameters const &", componentName: "char const *") -> "Engines::EngineComponent_ptr":
        r"""FindComponent(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName) -> Engines::EngineComponent_ptr"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_FindComponent(self, params, componentName)

    def LoadComponent(self, params: "Engines::ContainerParameters const &", componentName: "char const *") -> "Engines::EngineComponent_ptr":
        r"""LoadComponent(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName) -> Engines::EngineComponent_ptr"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_LoadComponent(self, params, componentName)

    def FindOrLoad_Component(self, *args) -> "Engines::EngineComponent_ptr":
        r"""
        FindOrLoad_Component(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName) -> Engines::EngineComponent_ptr
        FindOrLoad_Component(SALOME_LifeCycleCORBA self, char const * containerName, char const * componentName) -> Engines::EngineComponent_ptr
        """
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_FindOrLoad_Component(self, *args)

    def Load_ParallelComponent(self, params: "Engines::ContainerParameters const &", componentName: "char const *") -> "Engines::EngineComponent_ptr":
        r"""Load_ParallelComponent(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName) -> Engines::EngineComponent_ptr"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_Load_ParallelComponent(self, params, componentName)

    def isKnownComponentClass(self, componentName: "char const *") -> "bool":
        r"""isKnownComponentClass(SALOME_LifeCycleCORBA self, char const * componentName) -> bool"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_isKnownComponentClass(self, componentName)

    def NbProc(self, params: "Engines::ContainerParameters const &") -> "int":
        r"""NbProc(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params) -> int"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_NbProc(self, params)

    @staticmethod
    def preSet(*args) -> "void":
        r"""
        preSet(Engines::ResourceParameters & outparams)
        preSet(Engines::ContainerParameters & outparams)
        """
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_preSet(*args)

    def getContainerManager(self) -> "Engines::ContainerManager_ptr":
        r"""getContainerManager(SALOME_LifeCycleCORBA self) -> Engines::ContainerManager_ptr"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_getContainerManager(self)

    def getResourcesManager(self) -> "Engines::ResourcesManager_ptr":
        r"""getResourcesManager(SALOME_LifeCycleCORBA self) -> Engines::ResourcesManager_ptr"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_getResourcesManager(self)

    def namingService(self) -> "SALOME_NamingService_Abstract *":
        r"""namingService(SALOME_LifeCycleCORBA self) -> SALOME_NamingService_Abstract *"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_namingService(self)

    def orb(self) -> "CORBA::ORB_ptr":
        r"""orb(SALOME_LifeCycleCORBA self) -> CORBA::ORB_ptr"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_orb(self)

    def copyFile(self, hostSrc: "char const *", fileSrc: "char const *", hostDest: "char const *", fileDest: "char const *") -> "void":
        r"""copyFile(SALOME_LifeCycleCORBA self, char const * hostSrc, char const * fileSrc, char const * hostDest, char const * fileDest)"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_copyFile(self, hostSrc, fileSrc, hostDest, fileDest)

    def shutdownServers(self, shutdownLauncher: "bool"=True) -> "void":
        r"""shutdownServers(SALOME_LifeCycleCORBA self, bool shutdownLauncher=True)"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_shutdownServers(self, shutdownLauncher)

    @staticmethod
    def killOmniNames() -> "void":
        r"""killOmniNames()"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_killOmniNames()

# Register SALOME_LifeCycleCORBA in _libSALOME_LifeCycleCORBA:
_libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_swigregister(SALOME_LifeCycleCORBA)

def SALOME_LifeCycleCORBA_preSet(*args) -> "void":
    r"""
    SALOME_LifeCycleCORBA_preSet(Engines::ResourceParameters & outparams)
    SALOME_LifeCycleCORBA_preSet(Engines::ContainerParameters & outparams)
    """
    return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_preSet(*args)

def SALOME_LifeCycleCORBA_killOmniNames() -> "void":
    r"""SALOME_LifeCycleCORBA_killOmniNames()"""
    return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_killOmniNames()

class SALOME_LifeCycleCORBASSL(SALOME_LifeCycleCORBA):
    r"""Proxy of C++ SALOME_LifeCycleCORBASSL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SALOME_LifeCycleCORBASSL self) -> SALOME_LifeCycleCORBASSL"""
        _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBASSL_swiginit(self, _libSALOME_LifeCycleCORBA.new_SALOME_LifeCycleCORBASSL())
    __swig_destroy__ = _libSALOME_LifeCycleCORBA.delete_SALOME_LifeCycleCORBASSL

# Register SALOME_LifeCycleCORBASSL in _libSALOME_LifeCycleCORBA:
_libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBASSL_swigregister(SALOME_LifeCycleCORBASSL)

class SALOME_FileTransferCORBA(object):
    r"""Proxy of C++ SALOME_FileTransferCORBA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SALOME_FileTransferCORBA self) -> SALOME_FileTransferCORBA
        __init__(SALOME_FileTransferCORBA self, Engines::fileRef_ptr aFileRef) -> SALOME_FileTransferCORBA
        __init__(SALOME_FileTransferCORBA self, std::string refMachine, std::string origFileName, std::string containerName="") -> SALOME_FileTransferCORBA
        """
        _libSALOME_LifeCycleCORBA.SALOME_FileTransferCORBA_swiginit(self, _libSALOME_LifeCycleCORBA.new_SALOME_FileTransferCORBA(*args))
    __swig_destroy__ = _libSALOME_LifeCycleCORBA.delete_SALOME_FileTransferCORBA

    def getLocalFile(self, *args) -> "std::string":
        r"""getLocalFile(SALOME_FileTransferCORBA self, std::string localFile="") -> std::string"""
        return _libSALOME_LifeCycleCORBA.SALOME_FileTransferCORBA_getLocalFile(self, *args)

# Register SALOME_FileTransferCORBA in _libSALOME_LifeCycleCORBA:
_libSALOME_LifeCycleCORBA.SALOME_FileTransferCORBA_swigregister(SALOME_FileTransferCORBA)




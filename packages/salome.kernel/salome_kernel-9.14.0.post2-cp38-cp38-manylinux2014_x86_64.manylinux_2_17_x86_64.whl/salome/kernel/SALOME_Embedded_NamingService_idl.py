# Python stubs generated by omniidl from /tmp/kernel/idl/SALOME_Embedded_NamingService.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "Engines"
#
__name__ = "salome.kernel.Engines"
_0_Engines = omniORB.openModule("salome.kernel.Engines", r"/tmp/kernel/idl/SALOME_Embedded_NamingService.idl")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA", r"/tmp/kernel/idl/SALOME_Embedded_NamingService.idl")


# typedef ... IORType
class IORType:
    _NP_RepositoryId = "IDL:Engines/IORType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Engines.IORType = IORType
_0_Engines._d_IORType  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0)
_0_Engines._ad_IORType = (omniORB.tcInternal.tv_alias, IORType._NP_RepositoryId, "IORType", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_Engines._tc_IORType = omniORB.tcInternal.createTypeCode(_0_Engines._ad_IORType)
omniORB.registerType(IORType._NP_RepositoryId, _0_Engines._ad_IORType, _0_Engines._tc_IORType)
del IORType

# typedef ... NSListOfStrings
class NSListOfStrings:
    _NP_RepositoryId = "IDL:Engines/NSListOfStrings:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Engines.NSListOfStrings = NSListOfStrings
_0_Engines._d_NSListOfStrings  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0_Engines._ad_NSListOfStrings = (omniORB.tcInternal.tv_alias, NSListOfStrings._NP_RepositoryId, "NSListOfStrings", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_Engines._tc_NSListOfStrings = omniORB.tcInternal.createTypeCode(_0_Engines._ad_NSListOfStrings)
omniORB.registerType(NSListOfStrings._NP_RepositoryId, _0_Engines._ad_NSListOfStrings, _0_Engines._tc_NSListOfStrings)
del NSListOfStrings

# interface EmbeddedNamingService
_0_Engines._d_EmbeddedNamingService = (omniORB.tcInternal.tv_objref, "IDL:Engines/EmbeddedNamingService:1.0", "EmbeddedNamingService")
omniORB.typeMapping["IDL:Engines/EmbeddedNamingService:1.0"] = _0_Engines._d_EmbeddedNamingService
_0_Engines.EmbeddedNamingService = omniORB.newEmptyClass()
class EmbeddedNamingService :
    _NP_RepositoryId = _0_Engines._d_EmbeddedNamingService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.EmbeddedNamingService = EmbeddedNamingService
_0_Engines._tc_EmbeddedNamingService = omniORB.tcInternal.createTypeCode(_0_Engines._d_EmbeddedNamingService)
omniORB.registerType(EmbeddedNamingService._NP_RepositoryId, _0_Engines._d_EmbeddedNamingService, _0_Engines._tc_EmbeddedNamingService)

# EmbeddedNamingService operations and attributes
EmbeddedNamingService._d_Register = ((omniORB.typeMapping["IDL:Engines/IORType:1.0"], (omniORB.tcInternal.tv_string,0)), (), None)
EmbeddedNamingService._d_Destroy_FullDirectory = (((omniORB.tcInternal.tv_string,0), ), (), None)
EmbeddedNamingService._d_Destroy_Name = (((omniORB.tcInternal.tv_string,0), ), (), None)
EmbeddedNamingService._d_Resolve = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:Engines/IORType:1.0"], ), None)
EmbeddedNamingService._d_ResolveFirst = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:Engines/IORType:1.0"], ), None)
EmbeddedNamingService._d_keys = ((), (omniORB.typeMapping["IDL:Engines/NSListOfStrings:1.0"], ), None)

# EmbeddedNamingService object reference
class _objref_EmbeddedNamingService (CORBA.Object):
    _NP_RepositoryId = EmbeddedNamingService._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def Register(self, *args):
        return self._obj.invoke("Register", _0_Engines.EmbeddedNamingService._d_Register, args)

    def Destroy_FullDirectory(self, *args):
        return self._obj.invoke("Destroy_FullDirectory", _0_Engines.EmbeddedNamingService._d_Destroy_FullDirectory, args)

    def Destroy_Name(self, *args):
        return self._obj.invoke("Destroy_Name", _0_Engines.EmbeddedNamingService._d_Destroy_Name, args)

    def Resolve(self, *args):
        return self._obj.invoke("Resolve", _0_Engines.EmbeddedNamingService._d_Resolve, args)

    def ResolveFirst(self, *args):
        return self._obj.invoke("ResolveFirst", _0_Engines.EmbeddedNamingService._d_ResolveFirst, args)

    def keys(self, *args):
        return self._obj.invoke("keys", _0_Engines.EmbeddedNamingService._d_keys, args)

omniORB.registerObjref(EmbeddedNamingService._NP_RepositoryId, _objref_EmbeddedNamingService)
_0_Engines._objref_EmbeddedNamingService = _objref_EmbeddedNamingService
del EmbeddedNamingService, _objref_EmbeddedNamingService

# EmbeddedNamingService skeleton
__name__ = "salome.kernel.Engines__POA"
class EmbeddedNamingService (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.EmbeddedNamingService._NP_RepositoryId


    _omni_op_d = {"Register": _0_Engines.EmbeddedNamingService._d_Register, "Destroy_FullDirectory": _0_Engines.EmbeddedNamingService._d_Destroy_FullDirectory, "Destroy_Name": _0_Engines.EmbeddedNamingService._d_Destroy_Name, "Resolve": _0_Engines.EmbeddedNamingService._d_Resolve, "ResolveFirst": _0_Engines.EmbeddedNamingService._d_ResolveFirst, "keys": _0_Engines.EmbeddedNamingService._d_keys}

EmbeddedNamingService._omni_skeleton = EmbeddedNamingService
_0_Engines__POA.EmbeddedNamingService = EmbeddedNamingService
omniORB.registerSkeleton(EmbeddedNamingService._NP_RepositoryId, EmbeddedNamingService)
del EmbeddedNamingService
__name__ = "salome.kernel.Engines"

#
# End of module "Engines"
#
__name__ = "salome.kernel.SALOME_Embedded_NamingService_idl"

_exported_modules = ( "salome.kernel.Engines", )

# The end.

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _NamingService
else:
    import _NamingService

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NamingService.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _NamingService.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _NamingService.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _NamingService.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _NamingService.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _NamingService.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _NamingService.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _NamingService.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _NamingService.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _NamingService.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _NamingService.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _NamingService.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _NamingService.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _NamingService.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _NamingService.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _NamingService.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _NamingService.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _NamingService:
_NamingService.SwigPyIterator_swigregister(SwigPyIterator)

class svec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _NamingService.svec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _NamingService.svec___nonzero__(self)

    def __bool__(self) -> "bool":
        return _NamingService.svec___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _NamingService.svec___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _NamingService.svec___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _NamingService.svec___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _NamingService.svec___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _NamingService.svec___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _NamingService.svec___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _NamingService.svec___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _NamingService.svec_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _NamingService.svec_append(self, x)

    def empty(self) -> "bool":
        return _NamingService.svec_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _NamingService.svec_size(self)

    def swap(self, v: "svec") -> "void":
        return _NamingService.svec_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _NamingService.svec_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _NamingService.svec_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _NamingService.svec_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _NamingService.svec_rend(self)

    def clear(self) -> "void":
        return _NamingService.svec_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _NamingService.svec_get_allocator(self)

    def pop_back(self) -> "void":
        return _NamingService.svec_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _NamingService.svec_erase(self, *args)

    def __init__(self, *args):
        _NamingService.svec_swiginit(self, _NamingService.new_svec(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _NamingService.svec_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _NamingService.svec_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _NamingService.svec_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _NamingService.svec_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _NamingService.svec_resize(self, *args)

    def insert(self, *args) -> "void":
        return _NamingService.svec_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _NamingService.svec_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _NamingService.svec_capacity(self)
    __swig_destroy__ = _NamingService.delete_svec

# Register svec in _NamingService:
_NamingService.svec_swigregister(svec)

class SALOME_Exception(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, text: "std::string const &"):
        _NamingService.SALOME_Exception_swiginit(self, _NamingService.new_SALOME_Exception(text))
    __swig_destroy__ = _NamingService.delete_SALOME_Exception

    def what(self) -> "char const *":
        return _NamingService.SALOME_Exception_what(self)

    def __str__(self) -> "std::string":
        return _NamingService.SALOME_Exception___str__(self)

# Register SALOME_Exception in _NamingService:
_NamingService.SALOME_Exception_swigregister(SALOME_Exception)

class NamingService(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _NamingService.NamingService_swiginit(self, _NamingService.new_NamingService())

    def repr(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _NamingService.NamingService_repr(self)

    @staticmethod
    def GetLogContainersFile() -> "std::string":
        return _NamingService.NamingService_GetLogContainersFile()

    @staticmethod
    def FlushLogContainersFile() -> "void":
        return _NamingService.NamingService_FlushLogContainersFile()

    def Destroy_Name(self, Path: "char const *") -> "void":
        return _NamingService.NamingService_Destroy_Name(self, Path)

    def Destroy_FullDirectory(self, Path: "char const *") -> "void":
        return _NamingService.NamingService_Destroy_FullDirectory(self, Path)

    @staticmethod
    def SetLogContainersFileInternal(logFileName: "std::string const &") -> "void":
        return _NamingService.NamingService_SetLogContainersFileInternal(logFileName)

    def _ResolveInternal(self, Path: "char const *") -> "std::string":
        return _NamingService.NamingService__ResolveInternal(self, Path)

    def _RegisterInternal(self, ior: "char const *", Path: "char const *") -> "void":
        return _NamingService.NamingService__RegisterInternal(self, ior, Path)

    def _Resolve_DirInternal(self, Path: "char const *") -> "std::string":
        return _NamingService.NamingService__Resolve_DirInternal(self, Path)

    @staticmethod
    def IOROfNS() -> "std::string":
        return _NamingService.NamingService_IOROfNS()
    __swig_destroy__ = _NamingService.delete_NamingService

# Register NamingService in _NamingService:
_NamingService.NamingService_swigregister(NamingService)

def NamingService_GetLogContainersFile() -> "std::string":
    return _NamingService.NamingService_GetLogContainersFile()

def NamingService_FlushLogContainersFile() -> "void":
    return _NamingService.NamingService_FlushLogContainersFile()

def NamingService_SetLogContainersFileInternal(logFileName: "std::string const &") -> "void":
    return _NamingService.NamingService_SetLogContainersFileInternal(logFileName)

def NamingService_IOROfNS() -> "std::string":
    return _NamingService.NamingService_IOROfNS()


def NamingService_Resolve(self,Path):
  ret = self._ResolveInternal(Path)
  import CORBA
  orb=CORBA.ORB_init([''])
  return orb.string_to_object(ret)
def NamingService_Register(self,obj,Path):
  import CORBA
  orb=CORBA.ORB_init([''])
  self._RegisterInternal( orb.object_to_string(obj) , Path)
def NamingService_Resolve_Dir(self,Path):
  ret = self._Resolve_DirInternal( Path )
  import CORBA
  orb=CORBA.ORB_init([''])
  return orb.string_to_object(ret)
NamingService.Resolve = NamingService_Resolve
NamingService.Register = NamingService_Register
NamingService.Resolve_Dir = NamingService_Resolve_Dir
def NamingService_SetLogContainersFile(cls,logFileName = None):
  if logFileName is None:
    import tempfile
    with tempfile.NamedTemporaryFile() as f:
      logFileName = f.name
  cls.SetLogContainersFileInternal(logFileName)
NamingService.SetLogContainersFile = classmethod(NamingService_SetLogContainersFile)
def NamingService_RefOfNS(cls):
  ret = cls.IOROfNS()
  from salome.kernel import Engines
  import CORBA
  orb=CORBA.ORB_init([''])
  return orb.string_to_object(ret)
NamingService.RefOfNS = classmethod(NamingService_RefOfNS)
def NamingService_DumpIORInFile(cls,iorFileName):
  with open( iorFileName, "w" ) as f:
    f.write( cls.IOROfNS() )
NamingService.DumpIORInFile = classmethod(NamingService_DumpIORInFile)
def NamingService_LoadIORInFile(cls,iorFileName):
  from salome.kernel import Engines
  import CORBA
  orb=CORBA.ORB_init([''])
  with open( iorFileName ) as f:
    ior = f.read()
  ref = orb.string_to_object(ior)
  return ref
NamingService.LoadIORInFile = classmethod( NamingService_LoadIORInFile )
def NamingService_KillContainersInFile(cls,logFileName):
  from salome.kernel import Engines
  import CORBA
  orb=CORBA.ORB_init([''])
  with open(logFileName) as f:
    cont_to_kill = [elt.split(" : ") for elt in f]
    for name,ior in cont_to_kill:
      try:
        ref = orb.string_to_object(ior)
        ref.Shutdown()
      except Exception as e:
        print("Failed to kill container remotely \"{}\"".format(name))
NamingService.KillContainersInFile = classmethod(NamingService_KillContainersInFile)




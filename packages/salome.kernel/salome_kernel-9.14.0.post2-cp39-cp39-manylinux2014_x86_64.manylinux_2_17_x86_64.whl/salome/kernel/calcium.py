# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
CALCIUM python wrapping : Superv_Component class

"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _calcium
else:
    import _calcium

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class intArray(object):
    r"""Proxy of C++ intArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        r"""__init__(intArray self, size_t nelements) -> intArray"""
        _calcium.intArray_swiginit(self, _calcium.new_intArray(nelements))
    __swig_destroy__ = _calcium.delete_intArray

    def __getitem__(self, index: "size_t") -> "int":
        r"""__getitem__(intArray self, size_t index) -> int"""
        return _calcium.intArray___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "int") -> "void":
        r"""__setitem__(intArray self, size_t index, int value)"""
        return _calcium.intArray___setitem__(self, index, value)

    def cast(self) -> "int *":
        r"""cast(intArray self) -> int *"""
        return _calcium.intArray_cast(self)

    @staticmethod
    def frompointer(t: "int *") -> "intArray *":
        r"""frompointer(int * t) -> intArray"""
        return _calcium.intArray_frompointer(t)

# Register intArray in _calcium:
_calcium.intArray_swigregister(intArray)

def intArray_frompointer(t: "int *") -> "intArray *":
    r"""intArray_frompointer(int * t) -> intArray"""
    return _calcium.intArray_frompointer(t)

class longArray(object):
    r"""Proxy of C++ longArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        r"""__init__(longArray self, size_t nelements) -> longArray"""
        _calcium.longArray_swiginit(self, _calcium.new_longArray(nelements))
    __swig_destroy__ = _calcium.delete_longArray

    def __getitem__(self, index: "size_t") -> "long":
        r"""__getitem__(longArray self, size_t index) -> long"""
        return _calcium.longArray___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "long") -> "void":
        r"""__setitem__(longArray self, size_t index, long value)"""
        return _calcium.longArray___setitem__(self, index, value)

    def cast(self) -> "long *":
        r"""cast(longArray self) -> long *"""
        return _calcium.longArray_cast(self)

    @staticmethod
    def frompointer(t: "long *") -> "longArray *":
        r"""frompointer(long * t) -> longArray"""
        return _calcium.longArray_frompointer(t)

# Register longArray in _calcium:
_calcium.longArray_swigregister(longArray)

def longArray_frompointer(t: "long *") -> "longArray *":
    r"""longArray_frompointer(long * t) -> longArray"""
    return _calcium.longArray_frompointer(t)

class floatArray(object):
    r"""Proxy of C++ floatArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        r"""__init__(floatArray self, size_t nelements) -> floatArray"""
        _calcium.floatArray_swiginit(self, _calcium.new_floatArray(nelements))
    __swig_destroy__ = _calcium.delete_floatArray

    def __getitem__(self, index: "size_t") -> "float":
        r"""__getitem__(floatArray self, size_t index) -> float"""
        return _calcium.floatArray___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "float") -> "void":
        r"""__setitem__(floatArray self, size_t index, float value)"""
        return _calcium.floatArray___setitem__(self, index, value)

    def cast(self) -> "float *":
        r"""cast(floatArray self) -> float *"""
        return _calcium.floatArray_cast(self)

    @staticmethod
    def frompointer(t: "float *") -> "floatArray *":
        r"""frompointer(float * t) -> floatArray"""
        return _calcium.floatArray_frompointer(t)

# Register floatArray in _calcium:
_calcium.floatArray_swigregister(floatArray)

def floatArray_frompointer(t: "float *") -> "floatArray *":
    r"""floatArray_frompointer(float * t) -> floatArray"""
    return _calcium.floatArray_frompointer(t)

class doubleArray(object):
    r"""Proxy of C++ doubleArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        r"""__init__(doubleArray self, size_t nelements) -> doubleArray"""
        _calcium.doubleArray_swiginit(self, _calcium.new_doubleArray(nelements))
    __swig_destroy__ = _calcium.delete_doubleArray

    def __getitem__(self, index: "size_t") -> "double":
        r"""__getitem__(doubleArray self, size_t index) -> double"""
        return _calcium.doubleArray___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "double") -> "void":
        r"""__setitem__(doubleArray self, size_t index, double value)"""
        return _calcium.doubleArray___setitem__(self, index, value)

    def cast(self) -> "double *":
        r"""cast(doubleArray self) -> double *"""
        return _calcium.doubleArray_cast(self)

    @staticmethod
    def frompointer(t: "double *") -> "doubleArray *":
        r"""frompointer(double * t) -> doubleArray"""
        return _calcium.doubleArray_frompointer(t)

# Register doubleArray in _calcium:
_calcium.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t: "double *") -> "doubleArray *":
    r"""doubleArray_frompointer(double * t) -> doubleArray"""
    return _calcium.doubleArray_frompointer(t)

class stringArray(object):
    r"""Proxy of C++ stringArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "int", size: "int"=0):
        r"""__init__(stringArray self, int nelements, int size=0) -> stringArray"""
        _calcium.stringArray_swiginit(self, _calcium.new_stringArray(nelements, size))
    __swig_destroy__ = _calcium.delete_stringArray

    def __getitem__(self, index: "int") -> "char *":
        r"""__getitem__(stringArray self, int index) -> char *"""
        return _calcium.stringArray___getitem__(self, index)

    def __setitem__(self, index: "int", value: "char *") -> "void":
        r"""__setitem__(stringArray self, int index, char * value)"""
        return _calcium.stringArray___setitem__(self, index, value)
    data = property(_calcium.stringArray_data_get, _calcium.stringArray_data_set, doc=r"""data : p.p.char""")
    nelem = property(_calcium.stringArray_nelem_get, _calcium.stringArray_nelem_set, doc=r"""nelem : int""")
    size = property(_calcium.stringArray_size_get, _calcium.stringArray_size_set, doc=r"""size : int""")

# Register stringArray in _calcium:
_calcium.stringArray_swigregister(stringArray)

class DSC(object):
    r"""Proxy of C++ Engines::DSC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddingConnection = _calcium.DSC_AddingConnection
    
    RemovingConnection = _calcium.DSC_RemovingConnection
    
    ApplicationError = _calcium.DSC_ApplicationError
    

    def __init__(self):
        r"""__init__(DSC self) -> DSC"""
        _calcium.DSC_swiginit(self, _calcium.new_DSC())
    __swig_destroy__ = _calcium.delete_DSC

# Register DSC in _calcium:
_calcium.DSC_swigregister(DSC)

class PySupervCompo(object):
    r"""Proxy of C++ PySupervCompo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, orb: "CORBA::ORB_ptr", poa: "PortableServer::POA_ptr", contai: "Engines::Container_ptr", instanceName: "char const *", interfaceName: "char const *"):
        r"""__init__(PySupervCompo self, CORBA::ORB_ptr orb, PortableServer::POA_ptr poa, Engines::Container_ptr contai, char const * instanceName, char const * interfaceName) -> PySupervCompo"""
        _calcium.PySupervCompo_swiginit(self, _calcium.new_PySupervCompo(orb, poa, contai, instanceName, interfaceName))
    __swig_destroy__ = _calcium.delete_PySupervCompo

    def init_service(self, service_name: "char const *") -> "CORBA::Boolean":
        r"""init_service(PySupervCompo self, char const * service_name) -> CORBA::Boolean"""
        return _calcium.PySupervCompo_init_service(self, service_name)

    def create_provides_data_port(self, port_fab_type: "char const *") -> "provides_port *":
        r"""create_provides_data_port(PySupervCompo self, char const * port_fab_type) -> provides_port *"""
        return _calcium.PySupervCompo_create_provides_data_port(self, port_fab_type)

    def create_uses_data_port(self, port_fab_type: "char const *") -> "uses_port *":
        r"""create_uses_data_port(PySupervCompo self, char const * port_fab_type) -> uses_port *"""
        return _calcium.PySupervCompo_create_uses_data_port(self, port_fab_type)

    def add_port(self, *args) -> "void":
        r"""
        add_port(PySupervCompo self, char const * port_fab_type, char const * port_type, char const * port_name)
        add_port(PySupervCompo self, provides_port * port, char const * provides_port_name)
        add_port(PySupervCompo self, uses_port * port, char const * uses_port_name)
        """
        return _calcium.PySupervCompo_add_port(self, *args)

    def get_provides_port(self, provides_port_name: "char const *", connection_error: "CORBA::Boolean const") -> "Ports::Port_ptr":
        r"""get_provides_port(PySupervCompo self, char const * provides_port_name, CORBA::Boolean const connection_error) -> Ports::Port_ptr"""
        return _calcium.PySupervCompo_get_provides_port(self, provides_port_name, connection_error)

    def connect_uses_port(self, uses_port_name: "char const *", provides_port_ref: "Ports::Port_ptr") -> "void":
        r"""connect_uses_port(PySupervCompo self, char const * uses_port_name, Ports::Port_ptr provides_port_ref)"""
        return _calcium.PySupervCompo_connect_uses_port(self, uses_port_name, provides_port_ref)

    def connect_provides_port(self, provides_port_name: "char const *") -> "void":
        r"""connect_provides_port(PySupervCompo self, char const * provides_port_name)"""
        return _calcium.PySupervCompo_connect_provides_port(self, provides_port_name)

    def disconnect_provides_port(self, provides_port_name: "char const *", message: "Engines::DSC::Message const") -> "void":
        r"""disconnect_provides_port(PySupervCompo self, char const * provides_port_name, Engines::DSC::Message const message)"""
        return _calcium.PySupervCompo_disconnect_provides_port(self, provides_port_name, message)

    def disconnect_uses_port(self, uses_port_name: "char const *", provides_port_ref: "Ports::Port_ptr", message: "Engines::DSC::Message const") -> "void":
        r"""disconnect_uses_port(PySupervCompo self, char const * uses_port_name, Ports::Port_ptr provides_port_ref, Engines::DSC::Message const message)"""
        return _calcium.PySupervCompo_disconnect_uses_port(self, uses_port_name, provides_port_ref, message)

    def get_port_properties(self, port_name: "char const *") -> "Ports::PortProperties_ptr":
        r"""get_port_properties(PySupervCompo self, char const * port_name) -> Ports::PortProperties_ptr"""
        return _calcium.PySupervCompo_get_port_properties(self, port_name)

    def getInputFileToService(self, service_name: "char const *", Salome_file_name: "char const *") -> "Engines::Salome_file_ptr":
        r"""getInputFileToService(PySupervCompo self, char const * service_name, char const * Salome_file_name) -> Engines::Salome_file_ptr"""
        return _calcium.PySupervCompo_getInputFileToService(self, service_name, Salome_file_name)

    def checkInputFilesToService(self, service_name: "char const *") -> "void":
        r"""checkInputFilesToService(PySupervCompo self, char const * service_name)"""
        return _calcium.PySupervCompo_checkInputFilesToService(self, service_name)

    def setInputFileToService(self, service_name: "char const *", Salome_file_name: "char const *") -> "Engines::Salome_file_ptr":
        r"""setInputFileToService(PySupervCompo self, char const * service_name, char const * Salome_file_name) -> Engines::Salome_file_ptr"""
        return _calcium.PySupervCompo_setInputFileToService(self, service_name, Salome_file_name)

    def getOutputFileToService(self, service_name: "char const *", Salome_file_name: "char const *") -> "Engines::Salome_file_ptr":
        r"""getOutputFileToService(PySupervCompo self, char const * service_name, char const * Salome_file_name) -> Engines::Salome_file_ptr"""
        return _calcium.PySupervCompo_getOutputFileToService(self, service_name, Salome_file_name)

    def checkOutputFilesToService(self, service_name: "char const *") -> "void":
        r"""checkOutputFilesToService(PySupervCompo self, char const * service_name)"""
        return _calcium.PySupervCompo_checkOutputFilesToService(self, service_name)

    def setOutputFileToService(self, service_name: "char const *", Salome_file_name: "char const *") -> "Engines::Salome_file_ptr":
        r"""setOutputFileToService(PySupervCompo self, char const * service_name, char const * Salome_file_name) -> Engines::Salome_file_ptr"""
        return _calcium.PySupervCompo_setOutputFileToService(self, service_name, Salome_file_name)

    def add_provides_port(self, ref: "Ports::Port_ptr", provides_port_name: "char const *", port_prop: "Ports::PortProperties_ptr") -> "void":
        r"""add_provides_port(PySupervCompo self, Ports::Port_ptr ref, char const * provides_port_name, Ports::PortProperties_ptr port_prop)"""
        return _calcium.PySupervCompo_add_provides_port(self, ref, provides_port_name, port_prop)

    def add_uses_port(self, repository_id: "char const *", uses_port_name: "char const *", port_prop: "Ports::PortProperties_ptr") -> "void":
        r"""add_uses_port(PySupervCompo self, char const * repository_id, char const * uses_port_name, Ports::PortProperties_ptr port_prop)"""
        return _calcium.PySupervCompo_add_uses_port(self, repository_id, uses_port_name, port_prop)

    def get_uses_port(self, uses_port_name: "char const *") -> "Engines::DSC::uses_port *":
        r"""get_uses_port(PySupervCompo self, char const * uses_port_name) -> Engines::DSC::uses_port *"""
        return _calcium.PySupervCompo_get_uses_port(self, uses_port_name)

    def is_connected(self, port_name: "char const *") -> "CORBA::Boolean":
        r"""is_connected(PySupervCompo self, char const * port_name) -> CORBA::Boolean"""
        return _calcium.PySupervCompo_is_connected(self, port_name)

    @staticmethod
    def setTimeOut() -> "void":
        r"""setTimeOut()"""
        return _calcium.PySupervCompo_setTimeOut()

    def ptr(self) -> "long":
        r"""ptr(PySupervCompo self) -> long"""
        return _calcium.PySupervCompo_ptr(self)

# Register PySupervCompo in _calcium:
_calcium.PySupervCompo_swigregister(PySupervCompo)

def PySupervCompo_setTimeOut() -> "void":
    r"""PySupervCompo_setTimeOut()"""
    return _calcium.PySupervCompo_setTimeOut()


def create_calcium_port(compo: "Superv_Component_i *", name: "char *", type: "char *", mode: "char *", depend: "char *") -> "void":
    r"""create_calcium_port(Superv_Component_i * compo, char * name, char * type, char * mode, char * depend)"""
    return _calcium.create_calcium_port(compo, name, type, mode, depend)
TRUE = _calcium.TRUE

FALSE = _calcium.FALSE

FORMAT_TEMPS = _calcium.FORMAT_TEMPS

EPSILON = _calcium.EPSILON

VERSION_LEN = _calcium.VERSION_LEN

CODE_LEN = _calcium.CODE_LEN

VARIABLE_LEN = _calcium.VARIABLE_LEN

INSTANCE_LEN = _calcium.INSTANCE_LEN

DRIVER_LEN = _calcium.DRIVER_LEN

ARCHI_LEN = _calcium.ARCHI_LEN

ENV_VAR_LEN = _calcium.ENV_VAR_LEN

ACCC_LEN = _calcium.ACCC_LEN

PVM_LEN = _calcium.PVM_LEN

USER_LEN = _calcium.USER_LEN

MACHINE_LEN = _calcium.MACHINE_LEN

COMMAND_LEN = _calcium.COMMAND_LEN

MAX_LEN = _calcium.MAX_LEN

FICHIER_LEN = _calcium.FICHIER_LEN

NB_LIGNE_ERREUR = _calcium.NB_LIGNE_ERREUR

NB_LIGNE_TRACE = _calcium.NB_LIGNE_TRACE

CP_NORMALE = _calcium.CP_NORMALE

CP_ANORMALE = _calcium.CP_ANORMALE

CP_CONT = _calcium.CP_CONT

CP_ARRET = _calcium.CP_ARRET

CP_INITIAL = _calcium.CP_INITIAL

CP_NON_CONNECTE = _calcium.CP_NON_CONNECTE

CP_ATTENTE = _calcium.CP_ATTENTE

CP_EXECUTION = _calcium.CP_EXECUTION

CP_DECONNECTE = _calcium.CP_DECONNECTE

CP_TERMINE = _calcium.CP_TERMINE

CP_ENTIER = _calcium.CP_ENTIER

CP_REEL = _calcium.CP_REEL

CP_DREEL = _calcium.CP_DREEL

CP_COMPLEXE = _calcium.CP_COMPLEXE

CP_LOGIQUE = _calcium.CP_LOGIQUE

CP_CHAINE = _calcium.CP_CHAINE

CP_TEMPS = _calcium.CP_TEMPS

CP_ITERATION = _calcium.CP_ITERATION

CP_SEQUENTIEL = _calcium.CP_SEQUENTIEL

CP_IN = _calcium.CP_IN

CP_OUT = _calcium.CP_OUT

CP_NORMAL = _calcium.CP_NORMAL

CP_ESPION = _calcium.CP_ESPION

CP_ILLIMITE = _calcium.CP_ILLIMITE

CP_AUTESP = _calcium.CP_AUTESP

CP_SANS = _calcium.CP_SANS

CP_SUCCINCT = _calcium.CP_SUCCINCT

CP_DETAILLE = _calcium.CP_DETAILLE

CP_PAUSE = _calcium.CP_PAUSE

CP_LINEAIRE = _calcium.CP_LINEAIRE

CP_ESCALIER = _calcium.CP_ESCALIER

TI = _calcium.TI

TF = _calcium.TF

CP_TOUTES = _calcium.CP_TOUTES

CP_AUCUNE = _calcium.CP_AUCUNE

CP_PAS = _calcium.CP_PAS

CP_ROUTE = _calcium.CP_ROUTE

CP_ERREURS = _calcium.CP_ERREURS

CP_ROUTE_NORMAL = _calcium.CP_ROUTE_NORMAL

CP_ROUTE_DIRECT = _calcium.CP_ROUTE_DIRECT

CP_AUTO = _calcium.CP_AUTO

CP_BLOCAGE = _calcium.CP_BLOCAGE

CP_MANUEL = _calcium.CP_MANUEL

CP_IMMEDIATE = _calcium.CP_IMMEDIATE

CPLVAV = _calcium.CPLVAV

CPLVAF = _calcium.CPLVAF

CPLVAS = _calcium.CPLVAS

CPLCAV = _calcium.CPLCAV

CPLFAV = _calcium.CPLFAV

ERREUR = _calcium.ERREUR

CONNEXION = _calcium.CONNEXION

EMISSION = _calcium.EMISSION

DECONNEXION = _calcium.DECONNEXION

LECTURE_VARIABLE = _calcium.LECTURE_VARIABLE

ECRITURE_VARIABLE = _calcium.ECRITURE_VARIABLE

FIN_DE_PAS = _calcium.FIN_DE_PAS

AUIN_FIN_DE_PAS = _calcium.AUIN_FIN_DE_PAS

EFFACEMENT = _calcium.EFFACEMENT

MODE_EXEC = _calcium.MODE_EXEC

RUN_N_PAS = _calcium.RUN_N_PAS

DEF_CODE = _calcium.DEF_CODE

DEF_INSTANCE = _calcium.DEF_INSTANCE

DEF_LIEN = _calcium.DEF_LIEN

DEM_VERSION = _calcium.DEM_VERSION

SET_OPTION = _calcium.SET_OPTION

DEM_OPTION = _calcium.DEM_OPTION

DEM_CODES = _calcium.DEM_CODES

DEM_INSTS_DE_CODE = _calcium.DEM_INSTS_DE_CODE

DEM_VARIABLES = _calcium.DEM_VARIABLES

DEM_VARS_DE_CODE = _calcium.DEM_VARS_DE_CODE

DEM_VARS_DE_INST = _calcium.DEM_VARS_DE_INST

DEM_CARS_DE_VARIABLE = _calcium.DEM_CARS_DE_VARIABLE

DEM_CARS_DE_LIEN = _calcium.DEM_CARS_DE_LIEN

ENV_VALEURS_VARIABLE = _calcium.ENV_VALEURS_VARIABLE

ENV_OPTION = _calcium.ENV_OPTION

ENV_CODES = _calcium.ENV_CODES

ENV_INSTS_DE_CODE = _calcium.ENV_INSTS_DE_CODE

ENV_VARIABLES = _calcium.ENV_VARIABLES

ENV_VARS_DE_CODE = _calcium.ENV_VARS_DE_CODE

ENV_VARS_DE_INST = _calcium.ENV_VARS_DE_INST

ENV_CARS_DE_VARIABLE = _calcium.ENV_CARS_DE_VARIABLE

ENV_CARS_DE_LIEN = _calcium.ENV_CARS_DE_LIEN

ENV_TOPOLOGY = _calcium.ENV_TOPOLOGY

R_ENV_TOPOLOGY = _calcium.R_ENV_TOPOLOGY

ENV_MACHINE = _calcium.ENV_MACHINE

R_ENV_MACHINE = _calcium.R_ENV_MACHINE

ENV_CODE = _calcium.ENV_CODE

R_ENV_CODE = _calcium.R_ENV_CODE

ENV_INSTANCE = _calcium.ENV_INSTANCE

R_ENV_INSTANCE = _calcium.R_ENV_INSTANCE

ENV_VAR = _calcium.ENV_VAR

R_ENV_VAR = _calcium.R_ENV_VAR

ENV_LIEN = _calcium.ENV_LIEN

R_ENV_LIEN = _calcium.R_ENV_LIEN

ENV_ATTRIBUTS = _calcium.ENV_ATTRIBUTS

R_ENV_ATTRIBUTS = _calcium.R_ENV_ATTRIBUTS

ENV_VDATA = _calcium.ENV_VDATA

R_ENV_VDATA = _calcium.R_ENV_VDATA

P_HOST_DELETE = _calcium.P_HOST_DELETE

P_TASK_EXIT = _calcium.P_TASK_EXIT

CPOK = _calcium.CPOK

CPERIU = _calcium.CPERIU

CPNMVR = _calcium.CPNMVR

CPIOVR = _calcium.CPIOVR

CPTP = _calcium.CPTP

CPTPVR = _calcium.CPTPVR

CPIT = _calcium.CPIT

CPITVR = _calcium.CPITVR

CPRENA = _calcium.CPRENA

CPDNTP = _calcium.CPDNTP

CPDNDI = _calcium.CPDNDI

CPNMCD = _calcium.CPNMCD

CPNMIN = _calcium.CPNMIN

CPATTENTE = _calcium.CPATTENTE

CPBLOC = _calcium.CPBLOC

CPNTNULL = _calcium.CPNTNULL

CPLGVR = _calcium.CPLGVR

CPSTOP = _calcium.CPSTOP

CPATAL = _calcium.CPATAL

CPNOCP = _calcium.CPNOCP

CPCTVR = _calcium.CPCTVR

CPPASNULL = _calcium.CPPASNULL

CPMACHINE = _calcium.CPMACHINE

CPGRNU = _calcium.CPGRNU

CPGRIN = _calcium.CPGRIN

CPFINFICH = _calcium.CPFINFICH

CPERRFICH = _calcium.CPERRFICH

CPNORERR = _calcium.CPNORERR

CPRUNERR = _calcium.CPRUNERR

CPOPT = _calcium.CPOPT

CPVALOPT = _calcium.CPVALOPT

CPECREFF = _calcium.CPECREFF

CPLIEN = _calcium.CPLIEN

CPINARRET = _calcium.CPINARRET

CPSTOPSEQ = _calcium.CPSTOPSEQ

CPDECL = _calcium.CPDECL

CPINEXEC = _calcium.CPINEXEC

CPPVM = _calcium.CPPVM

CPERRINST = _calcium.CPERRINST

CPMODE = _calcium.CPMODE

CPINSTDEC = _calcium.CPINSTDEC

DEBUT_COUPLAGE = _calcium.DEBUT_COUPLAGE

FIN_COUPLAGE = _calcium.FIN_COUPLAGE

EXEC = _calcium.EXEC

CPCD = _calcium.CPCD

CPALLOW = _calcium.CPALLOW

CPECRI = _calcium.CPECRI

DEB_LECT = _calcium.DEB_LECT

FIN_LECT = _calcium.FIN_LECT

CPFIN = _calcium.CPFIN

CPFINP = _calcium.CPFINP

CPAUFP = _calcium.CPAUFP

CPINFP = _calcium.CPINFP

CPEFF = _calcium.CPEFF

STOP = _calcium.STOP

BLOCAGE = _calcium.BLOCAGE

CPPAUSE = _calcium.CPPAUSE

CPNORMAL = _calcium.CPNORMAL

CPNPAS = _calcium.CPNPAS

CPADCD = _calcium.CPADCD

CPADINCD = _calcium.CPADINCD

CPADLN = _calcium.CPADLN

CPIVERS = _calcium.CPIVERS

CPICD = _calcium.CPICD

CPIINCD = _calcium.CPIINCD

CPIVR = _calcium.CPIVR

CPIVRCD = _calcium.CPIVRCD

CPIVRIN = _calcium.CPIVRIN

CPICAVR = _calcium.CPICAVR

CPIILIEN = _calcium.CPIILIEN

CPSETOPT = _calcium.CPSETOPT

CPGETOPT = _calcium.CPGETOPT

TASK_EXIT = _calcium.TASK_EXIT

HOST_DELETE = _calcium.HOST_DELETE

ENTIER = _calcium.ENTIER

REEL = _calcium.REEL

DREEL = _calcium.DREEL

COMPLEXE = _calcium.COMPLEXE

LOGIQUE = _calcium.LOGIQUE

CHAINE = _calcium.CHAINE


def cp_cd(component: "Superv_Component_i *") -> "char *":
    r"""cp_cd(Superv_Component_i * component) -> int"""
    return _calcium.cp_cd(component)

def cp_een(component: "Superv_Component_i *", dep: "int", t: "float", n: "int", nom: "char *", nval: "int", eval: "int *") -> "int":
    r"""cp_een(Superv_Component_i * component, int dep, float t, int n, char * nom, int nval, int * eval) -> int"""
    return _calcium.cp_een(component, dep, t, n, nom, nval, eval)

def cp_edb(component: "Superv_Component_i *", dep: "int", t: "double", n: "int", nom: "char *", nval: "int", eval: "double *") -> "int":
    r"""cp_edb(Superv_Component_i * component, int dep, double t, int n, char * nom, int nval, double * eval) -> int"""
    return _calcium.cp_edb(component, dep, t, n, nom, nval, eval)

def cp_ere(component: "Superv_Component_i *", dep: "int", t: "float", n: "int", nom: "char *", nval: "int", eval: "float *") -> "int":
    r"""cp_ere(Superv_Component_i * component, int dep, float t, int n, char * nom, int nval, float * eval) -> int"""
    return _calcium.cp_ere(component, dep, t, n, nom, nval, eval)

def cp_erd(component: "Superv_Component_i *", dep: "int", t: "float", n: "int", nom: "char *", nval: "int", eval: "float *") -> "int":
    r"""cp_erd(Superv_Component_i * component, int dep, float t, int n, char * nom, int nval, float * eval) -> int"""
    return _calcium.cp_erd(component, dep, t, n, nom, nval, eval)

def cp_ecp(component: "Superv_Component_i *", dep: "int", t: "float", n: "int", nom: "char *", nval: "int", ecpval: "float *") -> "int":
    r"""cp_ecp(Superv_Component_i * component, int dep, float t, int n, char * nom, int nval, float * ecpval) -> int"""
    return _calcium.cp_ecp(component, dep, t, n, nom, nval, ecpval)

def cp_elo(component: "Superv_Component_i *", dep: "int", t: "float", n: "int", nom: "char *", nval: "int", eval: "int *") -> "int":
    r"""cp_elo(Superv_Component_i * component, int dep, float t, int n, char * nom, int nval, int * eval) -> int"""
    return _calcium.cp_elo(component, dep, t, n, nom, nval, eval)

def cp_ech(component: "Superv_Component_i *", dep: "int", t: "float", n: "int", nom: "char *", nval: "int", eval: "char **") -> "int":
    r"""cp_ech(Superv_Component_i * component, int dep, float t, int n, char * nom, int nval, char ** eval) -> int"""
    return _calcium.cp_ech(component, dep, t, n, nom, nval, eval)

def cp_elg(component: "Superv_Component_i *", dep: "int", t: "float", n: "int", nom: "char *", nval: "int", eval: "long *") -> "int":
    r"""cp_elg(Superv_Component_i * component, int dep, float t, int n, char * nom, int nval, long * eval) -> int"""
    return _calcium.cp_elg(component, dep, t, n, nom, nval, eval)

def cp_eln(component: "Superv_Component_i *", dep: "int", t: "float", n: "int", nom: "char *", nval: "int", eval: "long *") -> "int":
    r"""cp_eln(Superv_Component_i * component, int dep, float t, int n, char * nom, int nval, long * eval) -> int"""
    return _calcium.cp_eln(component, dep, t, n, nom, nval, eval)

def cp_len(component: "Superv_Component_i *", dep: "int", ti: "float *", tf: "float *", niter: "int *", nom: "char *", nmax: "int", lval: "int *") -> "float *, int *, int *":
    r"""cp_len(Superv_Component_i * component, int dep, float * ti, float * tf, int * niter, char * nom, int nmax, int * lval) -> int"""
    return _calcium.cp_len(component, dep, ti, tf, niter, nom, nmax, lval)

def cp_ldb(component: "Superv_Component_i *", dep: "int", ti: "double *", tf: "double *", niter: "int *", nom: "char *", nmax: "int", lval: "double *") -> "double *, int *, int *":
    r"""cp_ldb(Superv_Component_i * component, int dep, double * ti, double * tf, int * niter, char * nom, int nmax, double * lval) -> int"""
    return _calcium.cp_ldb(component, dep, ti, tf, niter, nom, nmax, lval)

def cp_lre(component: "Superv_Component_i *", dep: "int", ti: "float *", tf: "float *", niter: "int *", nom: "char *", nmax: "int", lval: "float *") -> "float *, int *, int *":
    r"""cp_lre(Superv_Component_i * component, int dep, float * ti, float * tf, int * niter, char * nom, int nmax, float * lval) -> int"""
    return _calcium.cp_lre(component, dep, ti, tf, niter, nom, nmax, lval)

def cp_lrd(component: "Superv_Component_i *", dep: "int", ti: "float *", tf: "float *", niter: "int *", nom: "char *", nmax: "int", lval: "float *") -> "float *, int *, int *":
    r"""cp_lrd(Superv_Component_i * component, int dep, float * ti, float * tf, int * niter, char * nom, int nmax, float * lval) -> int"""
    return _calcium.cp_lrd(component, dep, ti, tf, niter, nom, nmax, lval)

def cp_lcp(component: "Superv_Component_i *", dep: "int", ti: "float *", tf: "float *", niter: "int *", nom: "char *", nmax: "int", lcpval: "float *") -> "float *, int *, int *":
    r"""cp_lcp(Superv_Component_i * component, int dep, float * ti, float * tf, int * niter, char * nom, int nmax, float * lcpval) -> int"""
    return _calcium.cp_lcp(component, dep, ti, tf, niter, nom, nmax, lcpval)

def cp_llo(component: "Superv_Component_i *", dep: "int", ti: "float *", tf: "float *", niter: "int *", nom: "char *", nmax: "int", lval: "int *") -> "float *, int *, int *":
    r"""cp_llo(Superv_Component_i * component, int dep, float * ti, float * tf, int * niter, char * nom, int nmax, int * lval) -> int"""
    return _calcium.cp_llo(component, dep, ti, tf, niter, nom, nmax, lval)

def cp_lch(component: "Superv_Component_i *", dep: "int", ti: "float *", tf: "float *", niter: "int *", nom: "char *", nmax: "int", lval: "char **") -> "float *, int *, int *":
    r"""cp_lch(Superv_Component_i * component, int dep, float * ti, float * tf, int * niter, char * nom, int nmax, char ** lval) -> int"""
    return _calcium.cp_lch(component, dep, ti, tf, niter, nom, nmax, lval)

def cp_llg(component: "Superv_Component_i *", dep: "int", ti: "float *", tf: "float *", niter: "int *", nom: "char *", nmax: "int", lval: "long *") -> "float *, int *, int *":
    r"""cp_llg(Superv_Component_i * component, int dep, float * ti, float * tf, int * niter, char * nom, int nmax, long * lval) -> int"""
    return _calcium.cp_llg(component, dep, ti, tf, niter, nom, nmax, lval)

def cp_lln(component: "Superv_Component_i *", dep: "int", ti: "float *", tf: "float *", niter: "int *", nom: "char *", nmax: "int", lval: "long *") -> "float *, int *, int *":
    r"""cp_lln(Superv_Component_i * component, int dep, float * ti, float * tf, int * niter, char * nom, int nmax, long * lval) -> int"""
    return _calcium.cp_lln(component, dep, ti, tf, niter, nom, nmax, lval)

def cp_fini(component: "Superv_Component_i *", nom: "char *", n: "int") -> "int":
    r"""cp_fini(Superv_Component_i * component, char * nom, int n) -> int"""
    return _calcium.cp_fini(component, nom, n)

def cp_fint(component: "Superv_Component_i *", nom: "char *", t: "float") -> "int":
    r"""cp_fint(Superv_Component_i * component, char * nom, float t) -> int"""
    return _calcium.cp_fint(component, nom, t)

def cp_effi(component: "Superv_Component_i *", nom: "char *", n: "int") -> "int":
    r"""cp_effi(Superv_Component_i * component, char * nom, int n) -> int"""
    return _calcium.cp_effi(component, nom, n)

def cp_efft(component: "Superv_Component_i *", nom: "char *", t: "float") -> "int":
    r"""cp_efft(Superv_Component_i * component, char * nom, float t) -> int"""
    return _calcium.cp_efft(component, nom, t)

def cp_fin(component: "Superv_Component_i *", cp_end: "int") -> "int":
    r"""cp_fin(Superv_Component_i * component, int cp_end) -> int"""
    return _calcium.cp_fin(component, cp_end)



# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libNOTIFICATION
else:
    import _libNOTIFICATION

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


NOTIF_WARNING = _libNOTIFICATION.NOTIF_WARNING

NOTIF_STEP = _libNOTIFICATION.NOTIF_STEP

NOTIF_TRACE = _libNOTIFICATION.NOTIF_TRACE

NOTIF_VERBOSE = _libNOTIFICATION.NOTIF_VERBOSE

NOTIFICATION_ChannelName = _libNOTIFICATION.NOTIFICATION_ChannelName


def NOTIFICATION_date() -> "char *":
    r"""NOTIFICATION_date() -> char *"""
    return _libNOTIFICATION.NOTIFICATION_date()

def NOTIFICATION_channel() -> "CosNA_EventChannel_ptr":
    r"""NOTIFICATION_channel() -> CosNA_EventChannel_ptr"""
    return _libNOTIFICATION.NOTIFICATION_channel()
class NOTIFICATION_Supplier_Swig(object):
    r"""Proxy of C++ NOTIFICATION_Supplier_Swig class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instanceName: "char const *", notif: "bool"):
        r"""__init__(NOTIFICATION_Supplier_Swig self, char const * instanceName, bool notif) -> NOTIFICATION_Supplier_Swig"""
        _libNOTIFICATION.NOTIFICATION_Supplier_Swig_swiginit(self, _libNOTIFICATION.new_NOTIFICATION_Supplier_Swig(instanceName, notif))
    __swig_destroy__ = _libNOTIFICATION.delete_NOTIFICATION_Supplier_Swig

    def Send(self, graph: "char const *", node: "char const *", type: "char const *", message: "char const *") -> "void":
        r"""Send(NOTIFICATION_Supplier_Swig self, char const * graph, char const * node, char const * type, char const * message)"""
        return _libNOTIFICATION.NOTIFICATION_Supplier_Swig_Send(self, graph, node, type, message)

# Register NOTIFICATION_Supplier_Swig in _libNOTIFICATION:
_libNOTIFICATION.NOTIFICATION_Supplier_Swig_swigregister(NOTIFICATION_Supplier_Swig)

class NOTIFICATION_Consumer_Swig(object):
    r"""Proxy of C++ NOTIFICATION_Consumer_Swig class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NOTIFICATION_Consumer_Swig self) -> NOTIFICATION_Consumer_Swig"""
        _libNOTIFICATION.NOTIFICATION_Consumer_Swig_swiginit(self, _libNOTIFICATION.new_NOTIFICATION_Consumer_Swig())
    __swig_destroy__ = _libNOTIFICATION.delete_NOTIFICATION_Consumer_Swig

    def Receive(self, graph: "char **", node: "char **", type: "char **", message: "char **", sender: "char **", counter: "long *", date: "char **", stamp: "long *") -> "bool":
        r"""Receive(NOTIFICATION_Consumer_Swig self, char ** graph, char ** node, char ** type, char ** message, char ** sender, long * counter, char ** date, long * stamp) -> bool"""
        return _libNOTIFICATION.NOTIFICATION_Consumer_Swig_Receive(self, graph, node, type, message, sender, counter, date, stamp)

# Register NOTIFICATION_Consumer_Swig in _libNOTIFICATION:
_libNOTIFICATION.NOTIFICATION_Consumer_Swig_swigregister(NOTIFICATION_Consumer_Swig)




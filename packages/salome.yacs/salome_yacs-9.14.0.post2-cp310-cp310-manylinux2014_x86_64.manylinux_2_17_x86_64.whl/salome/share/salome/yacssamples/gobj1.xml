<!--
  Copyright (C) 2006-2019  CEA/DEN, EDF R&D

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

  See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com

-->
<proc>
  <!-- graph of component instances that add and multiply MED fields (GenericObj)
       All the MED Fields must be destroyed on each turn in the loop and on exit
       A med field must exists in the study 1 (read fra.med file)
  -->
    <!--types -->
    <objref name="GEOM/GEOM_Object"/>
    <sequence name="dblevec" content="double"/>
    <struct name="s1" >
      <member name="s" type="double"/>
    </struct>
  <objref name="MED" id="IDL:SALOME_MED/MED:1.0"/>
  <objref name="MESH" id="IDL:SALOME_MED/MESH:1.0"/>
  <objref name="FIELD" id="IDL:SALOME_MED/FIELD:1.0"/>
  <objref name="FIELDDOUBLE" id="IDL:SALOME_MED/FIELDDOUBLE:1.0">
    <base>FIELD</base>
  </objref>

  <container name="A"> </container>
  <container name="B"> </container>
  <container name="C"> </container>



    <!--nodes -->
    <datanode name="s" kind="study" >
      <parameter name="b" type="FIELDDOUBLE" ref="0:1:1:3:2:1"/>
    </datanode>
    <datanode name="d" >
      <parameter name="b" type="double" ><value><double>5.</double></value></parameter>
      <parameter name="c" type="double" ><value><double>-1.</double></value></parameter>
    </datanode>

    <inline name="node0" >
      <script>
        <code>import SALOME_MED</code>
        <code>p1=p1._narrow(SALOME_MED.FIELD)</code>
        <code>print(p1)</code>
      </script>
      <inport name="p1" type="FIELDDOUBLE"/>
      <outport name="p1" type="FIELDDOUBLE"/>
    </inline>

  <forloop name="l" nsteps="5">
   <bloc name="b" >
    <service name="node" >
        <component>Calculator</component>
        <method>Constant</method>
        <load container="A"/>
        <inport name="field" type="FIELDDOUBLE"/>
        <inport name="x" type="double"/>
        <outport name="result" type="FIELDDOUBLE"/>
    </service>
    <service name="node2" >
        <component>Calculator</component>
        <method>Mul</method>
        <load container="A"/>
        <inport name="field" type="FIELDDOUBLE"/>
        <inport name="x" type="double"/>
        <outport name="result" type="FIELDDOUBLE"/>
    </service>
    <service name="node3" >
        <component>Calculator</component>
        <method>Add</method>
        <load container="A"/>
        <inport name="field1" type="FIELDDOUBLE"/>
        <inport name="field2" type="FIELDDOUBLE"/>
        <outport name="result" type="FIELDDOUBLE"/>
    </service>

    <inline name="pyth0" >
      <script>
        <code>print (MEDFIELD:",p1)</code>
        <code>p1.Register()</code>
      </script>
      <inport name="p1" type="FIELDDOUBLE"/>
      <outport name="p1" type="FIELDDOUBLE"/>
    </inline>

    <inline name="pyth1" >
      <script>
        <code>print("MEDFIELD:",p1)</code>
      </script>
      <inport name="p1" type="FIELDDOUBLE"/>
    </inline>

    <datalink>
        <fromnode>node</fromnode><fromport>result</fromport>
        <tonode>node3</tonode> <toport>field1</toport>
    </datalink>
    <datalink>
        <fromnode>node</fromnode><fromport>result</fromport>
        <tonode>node2</tonode> <toport>field</toport>
    </datalink>
    <datalink>
        <fromnode>node2</fromnode><fromport>result</fromport>
        <tonode>node3</tonode> <toport>field2</toport>
    </datalink>
    <datalink>
        <fromnode>node</fromnode><fromport>result</fromport>
        <tonode>pyth0</tonode> <toport>p1</toport>
    </datalink>
    <datalink>
        <fromnode>pyth0</fromnode><fromport>p1</fromport>
        <tonode>pyth1</tonode> <toport>p1</toport>
    </datalink>

   </bloc>
  </forloop>

    <!-- datalink -->
    <datalink>
        <fromnode>d</fromnode><fromport>c</fromport>
        <tonode>l.b.node2</tonode> <toport>x</toport>
    </datalink>
    <datalink>
        <fromnode>s</fromnode><fromport>b</fromport>
        <tonode>node0</tonode> <toport>p1</toport>
    </datalink>
    <datalink>
        <fromnode>d</fromnode><fromport>b</fromport>
        <tonode>l.b.node</tonode> <toport>x</toport>
    </datalink>
    <datalink>
        <fromnode>node0</fromnode><fromport>p1</fromport>
        <tonode>l.b.node</tonode> <toport>field</toport>
    </datalink>

</proc>

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Implementation of nodes for SALOME platform."""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SALOMERuntime
else:
    import _SALOMERuntime

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SALOMERuntime_PySwigIterator(object):
    r"""Proxy of C++ swig::SALOMERuntime_PySwigIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_SALOMERuntime_PySwigIterator

    def value(self):
        r"""value(SALOMERuntime_PySwigIterator self) -> PyObject *"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_value(self)

    def incr(self, n=1):
        r"""incr(SALOMERuntime_PySwigIterator self, size_t n=1) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SALOMERuntime_PySwigIterator self, size_t n=1) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SALOMERuntime_PySwigIterator self, SALOMERuntime_PySwigIterator x) -> ptrdiff_t"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SALOMERuntime_PySwigIterator self, SALOMERuntime_PySwigIterator x) -> bool"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_equal(self, x)

    def copy(self):
        r"""copy(SALOMERuntime_PySwigIterator self) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_copy(self)

    def next(self):
        r"""next(SALOMERuntime_PySwigIterator self) -> PyObject *"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_next(self)

    def __next__(self):
        r"""__next__(SALOMERuntime_PySwigIterator self) -> PyObject *"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___next__(self)

    def previous(self):
        r"""previous(SALOMERuntime_PySwigIterator self) -> PyObject *"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_previous(self)

    def advance(self, n):
        r"""advance(SALOMERuntime_PySwigIterator self, ptrdiff_t n) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SALOMERuntime_PySwigIterator self, SALOMERuntime_PySwigIterator x) -> bool"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SALOMERuntime_PySwigIterator self, SALOMERuntime_PySwigIterator x) -> bool"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SALOMERuntime_PySwigIterator self, ptrdiff_t n) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SALOMERuntime_PySwigIterator self, ptrdiff_t n) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SALOMERuntime_PySwigIterator self, ptrdiff_t n) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SALOMERuntime_PySwigIterator self, ptrdiff_t n) -> SALOMERuntime_PySwigIterator
        __sub__(SALOMERuntime_PySwigIterator self, SALOMERuntime_PySwigIterator x) -> ptrdiff_t
        """
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SALOMERuntime_PySwigIterator in _SALOMERuntime:
_SALOMERuntime.SALOMERuntime_PySwigIterator_swigregister(SALOMERuntime_PySwigIterator)

import salome.yacs.pilot
class SalomeContainer(salome.yacs.pilot.Container):
    r"""Proxy of C++ YACS::ENGINE::SalomeContainer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SalomeContainer self) -> SalomeContainer
        __init__(SalomeContainer self, SalomeContainer other) -> SalomeContainer
        """
        _SALOMERuntime.SalomeContainer_swiginit(self, _SALOMERuntime.new_SalomeContainer(*args))

    def lock(self):
        r"""lock(SalomeContainer self)"""
        return _SALOMERuntime.SalomeContainer_lock(self)

    def unLock(self):
        r"""unLock(SalomeContainer self)"""
        return _SALOMERuntime.SalomeContainer_unLock(self)

    def getKind(self):
        r"""getKind(SalomeContainer self) -> std::string"""
        return _SALOMERuntime.SalomeContainer_getKind(self)

    def isAlreadyStarted(self, askingNode):
        r"""isAlreadyStarted(SalomeContainer self, Task askingNode) -> bool"""
        return _SALOMERuntime.SalomeContainer_isAlreadyStarted(self, askingNode)

    def getContainerPtr(self, askingNode):
        r"""getContainerPtr(SalomeContainer self, Task askingNode) -> Engines::Container_ptr"""
        return _SALOMERuntime.SalomeContainer_getContainerPtr(self, askingNode)

    def start(self, *args):
        r"""
        start(SalomeContainer self, Task askingNode)
        start(SalomeContainer self, Task askingNode, std::string const & resource_name, std::string const & container_name)
        """
        return _SALOMERuntime.SalomeContainer_start(self, *args)

    def canAcceptImposedResource(self):
        r"""canAcceptImposedResource(SalomeContainer self) -> bool"""
        return _SALOMERuntime.SalomeContainer_canAcceptImposedResource(self)

    def clone(self):
        r"""clone(SalomeContainer self) -> Container"""
        return _SALOMERuntime.SalomeContainer_clone(self)

    def cloneAlways(self):
        r"""cloneAlways(SalomeContainer self) -> Container"""
        return _SALOMERuntime.SalomeContainer_cloneAlways(self)

    def getPlacementId(self, askingNode):
        r"""getPlacementId(SalomeContainer self, Task askingNode) -> std::string"""
        return _SALOMERuntime.SalomeContainer_getPlacementId(self, askingNode)

    def getFullPlacementId(self, askingNode):
        r"""getFullPlacementId(SalomeContainer self, Task askingNode) -> std::string"""
        return _SALOMERuntime.SalomeContainer_getFullPlacementId(self, askingNode)

    def checkCapabilityToDealWith(self, inst):
        r"""checkCapabilityToDealWith(SalomeContainer self, ComponentInstance inst)"""
        return _SALOMERuntime.SalomeContainer_checkCapabilityToDealWith(self, inst)

    def setProperty(self, name, value):
        r"""setProperty(SalomeContainer self, std::string const & name, std::string const & value)"""
        return _SALOMERuntime.SalomeContainer_setProperty(self, name, value)

    def getProperty(self, name):
        r"""getProperty(SalomeContainer self, std::string const & name) -> std::string"""
        return _SALOMERuntime.SalomeContainer_getProperty(self, name)

    def clearProperties(self):
        r"""clearProperties(SalomeContainer self)"""
        return _SALOMERuntime.SalomeContainer_clearProperties(self)

    def addComponentName(self, name):
        r"""addComponentName(SalomeContainer self, std::string const & name)"""
        return _SALOMERuntime.SalomeContainer_addComponentName(self, name)

    def addToResourceList(self, name):
        r"""addToResourceList(SalomeContainer self, std::string const & name)"""
        return _SALOMERuntime.SalomeContainer_addToResourceList(self, name)

    def loadComponent(self, inst):
        r"""loadComponent(SalomeContainer self, Task inst) -> CORBA::Object_ptr"""
        return _SALOMERuntime.SalomeContainer_loadComponent(self, inst)

    def shutdown(self, level):
        r"""shutdown(SalomeContainer self, int level)"""
        return _SALOMERuntime.SalomeContainer_shutdown(self, level)

    def getResourceProperties(self, name):
        r"""getResourceProperties(SalomeContainer self, std::string const & name) -> propmap"""
        return _SALOMERuntime.SalomeContainer_getResourceProperties(self, name)

    def getProperties(self):
        r"""getProperties(SalomeContainer self) -> propmap"""
        return _SALOMERuntime.SalomeContainer_getProperties(self)
    __swig_destroy__ = _SALOMERuntime.delete_SalomeContainer

# Register SalomeContainer in _SALOMERuntime:
_SALOMERuntime.SalomeContainer_swigregister(SalomeContainer)
cvar = _SALOMERuntime.cvar
SalomeContainer.KIND = _SALOMERuntime.cvar.SalomeContainer_KIND
SalomeContainer.TYPE_PROPERTY_STR = _SALOMERuntime.cvar.SalomeContainer_TYPE_PROPERTY_STR

class SalomeHPContainer(salome.yacs.pilot.HomogeneousPoolContainer):
    r"""Proxy of C++ YACS::ENGINE::SalomeHPContainer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SalomeHPContainer self) -> SalomeHPContainer
        __init__(SalomeHPContainer self, SalomeHPContainer other) -> SalomeHPContainer
        """
        _SALOMERuntime.SalomeHPContainer_swiginit(self, _SALOMERuntime.new_SalomeHPContainer(*args))

    def assignPG(self, pg):
        r"""assignPG(SalomeHPContainer self, PlayGround pg)"""
        return _SALOMERuntime.SalomeHPContainer_assignPG(self, pg)

    def setSizeOfPool(self, sz):
        r"""setSizeOfPool(SalomeHPContainer self, int sz)"""
        return _SALOMERuntime.SalomeHPContainer_setSizeOfPool(self, sz)

    def getSizeOfPool(self):
        r"""getSizeOfPool(SalomeHPContainer self) -> int"""
        return _SALOMERuntime.SalomeHPContainer_getSizeOfPool(self)

    def getNumberOfFreePlace(self):
        r"""getNumberOfFreePlace(SalomeHPContainer self) -> std::size_t"""
        return _SALOMERuntime.SalomeHPContainer_getNumberOfFreePlace(self)

    def allocateFor(self, nodes):
        r"""allocateFor(SalomeHPContainer self, std::vector< YACS::ENGINE::Task const *,std::allocator< YACS::ENGINE::Task const * > > const & nodes)"""
        return _SALOMERuntime.SalomeHPContainer_allocateFor(self, nodes)

    def release(self, node):
        r"""release(SalomeHPContainer self, Task node)"""
        return _SALOMERuntime.SalomeHPContainer_release(self, node)

    def lock(self):
        r"""lock(SalomeHPContainer self)"""
        return _SALOMERuntime.SalomeHPContainer_lock(self)

    def unLock(self):
        r"""unLock(SalomeHPContainer self)"""
        return _SALOMERuntime.SalomeHPContainer_unLock(self)

    def getKind(self):
        r"""getKind(SalomeHPContainer self) -> std::string"""
        return _SALOMERuntime.SalomeHPContainer_getKind(self)

    def getDiscreminantStrOfThis(self, askingNode):
        r"""getDiscreminantStrOfThis(SalomeHPContainer self, Task askingNode) -> std::string"""
        return _SALOMERuntime.SalomeHPContainer_getDiscreminantStrOfThis(self, askingNode)

    def isAlreadyStarted(self, askingNode):
        r"""isAlreadyStarted(SalomeHPContainer self, Task askingNode) -> bool"""
        return _SALOMERuntime.SalomeHPContainer_isAlreadyStarted(self, askingNode)

    def start(self, askingNode):
        r"""start(SalomeHPContainer self, Task askingNode)"""
        return _SALOMERuntime.SalomeHPContainer_start(self, askingNode)

    def shutdown(self, level):
        r"""shutdown(SalomeHPContainer self, int level)"""
        return _SALOMERuntime.SalomeHPContainer_shutdown(self, level)

    def getPlacementId(self, askingNode):
        r"""getPlacementId(SalomeHPContainer self, Task askingNode) -> std::string"""
        return _SALOMERuntime.SalomeHPContainer_getPlacementId(self, askingNode)

    def getFullPlacementId(self, askingNode):
        r"""getFullPlacementId(SalomeHPContainer self, Task askingNode) -> std::string"""
        return _SALOMERuntime.SalomeHPContainer_getFullPlacementId(self, askingNode)

    def clone(self):
        r"""clone(SalomeHPContainer self) -> Container"""
        return _SALOMERuntime.SalomeHPContainer_clone(self)

    def cloneAlways(self):
        r"""cloneAlways(SalomeHPContainer self) -> Container"""
        return _SALOMERuntime.SalomeHPContainer_cloneAlways(self)

    def setProperty(self, name, value):
        r"""setProperty(SalomeHPContainer self, std::string const & name, std::string const & value)"""
        return _SALOMERuntime.SalomeHPContainer_setProperty(self, name, value)

    def getProperty(self, name):
        r"""getProperty(SalomeHPContainer self, std::string const & name) -> std::string"""
        return _SALOMERuntime.SalomeHPContainer_getProperty(self, name)

    def clearProperties(self):
        r"""clearProperties(SalomeHPContainer self)"""
        return _SALOMERuntime.SalomeHPContainer_clearProperties(self)

    def addComponentName(self, name):
        r"""addComponentName(SalomeHPContainer self, std::string const & name)"""
        return _SALOMERuntime.SalomeHPContainer_addComponentName(self, name)

    def getProperties(self):
        r"""getProperties(SalomeHPContainer self) -> propmap"""
        return _SALOMERuntime.SalomeHPContainer_getProperties(self)

    def getResourceProperties(self, name):
        r"""getResourceProperties(SalomeHPContainer self, std::string const & name) -> propmap"""
        return _SALOMERuntime.SalomeHPContainer_getResourceProperties(self, name)

    def checkCapabilityToDealWith(self, inst):
        r"""checkCapabilityToDealWith(SalomeHPContainer self, ComponentInstance inst)"""
        return _SALOMERuntime.SalomeHPContainer_checkCapabilityToDealWith(self, inst)

    def getKernelContainerNames(self):
        r"""getKernelContainerNames(SalomeHPContainer self) -> strvec"""
        return _SALOMERuntime.SalomeHPContainer_getKernelContainerNames(self)

    def getNumberOfCoresPerWorker(self):
        r"""getNumberOfCoresPerWorker(SalomeHPContainer self) -> int"""
        return _SALOMERuntime.SalomeHPContainer_getNumberOfCoresPerWorker(self)
    __swig_destroy__ = _SALOMERuntime.delete_SalomeHPContainer

# Register SalomeHPContainer in _SALOMERuntime:
_SALOMERuntime.SalomeHPContainer_swigregister(SalomeHPContainer)
SalomeHPContainer.KIND = _SALOMERuntime.cvar.SalomeHPContainer_KIND


def getSALOMERuntime():
    r"""getSALOMERuntime() -> RuntimeSALOME"""
    return _SALOMERuntime.getSALOMERuntime()
class RuntimeSALOME(salome.yacs.pilot.Runtime):
    r"""Proxy of C++ YACS::ENGINE::RuntimeSALOME class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IsPyExt = _SALOMERuntime.RuntimeSALOME_IsPyExt
    
    UsePython = _SALOMERuntime.RuntimeSALOME_UsePython
    
    UseCorba = _SALOMERuntime.RuntimeSALOME_UseCorba
    
    UseXml = _SALOMERuntime.RuntimeSALOME_UseXml
    
    UseCpp = _SALOMERuntime.RuntimeSALOME_UseCpp
    
    UseSalome = _SALOMERuntime.RuntimeSALOME_UseSalome
    
    FLAGS = property(_SALOMERuntime.RuntimeSALOME_FLAGS_get, _SALOMERuntime.RuntimeSALOME_FLAGS_set, doc=r"""FLAGS : enum $unnamed12$""")

    @staticmethod
    def setRuntime(*args):
        r"""setRuntime(long flags=YACS::ENGINE::RuntimeSALOME::UsePython+YACS::ENGINE::RuntimeSALOME::UseCorba+YACS::ENGINE::RuntimeSALOME::UseXml+YACS::ENGINE::RuntimeSALOME::UseCpp+YACS::ENGINE::RuntimeSALOME::UseSalome, int argc=0, char *[] argv=0)"""
        return _SALOMERuntime.RuntimeSALOME_setRuntime(*args)

    def getVersion(self):
        r"""getVersion(RuntimeSALOME self) -> std::string"""
        return _SALOMERuntime.RuntimeSALOME_getVersion(self)

    def init(self, flags, argc, argv):
        r"""init(RuntimeSALOME self, long flags, int argc, char *[] argv)"""
        return _SALOMERuntime.RuntimeSALOME_init(self, flags, argc, argv)

    def fini(self, isFinalizingPython=True):
        r"""fini(RuntimeSALOME self, bool isFinalizingPython=True)"""
        return _SALOMERuntime.RuntimeSALOME_fini(self, isFinalizingPython)

    def launchSubProcess(self, cmds):
        r"""launchSubProcess(RuntimeSALOME self, strvec cmds) -> PyObject *"""
        return _SALOMERuntime.RuntimeSALOME_launchSubProcess(self, cmds)

    def getCatalogOfComputeNodes(self):
        r"""getCatalogOfComputeNodes(RuntimeSALOME self) -> vpsi"""
        return _SALOMERuntime.RuntimeSALOME_getCatalogOfComputeNodes(self)

    def createInputPort(self, name, impl, node, type):
        r"""createInputPort(RuntimeSALOME self, std::string const & name, std::string const & impl, Node node, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_createInputPort(self, name, impl, node, type)

    def createOutputPort(self, name, impl, node, type):
        r"""createOutputPort(RuntimeSALOME self, std::string const & name, std::string const & impl, Node node, TypeCode type) -> OutputPort"""
        return _SALOMERuntime.RuntimeSALOME_createOutputPort(self, name, impl, node, type)

    def createInputDataStreamPort(self, name, node, type):
        r"""createInputDataStreamPort(RuntimeSALOME self, std::string const & name, Node node, TypeCode type) -> InputDataStreamPort"""
        return _SALOMERuntime.RuntimeSALOME_createInputDataStreamPort(self, name, node, type)

    def createOutputDataStreamPort(self, name, node, type):
        r"""createOutputDataStreamPort(RuntimeSALOME self, std::string const & name, Node node, TypeCode type) -> OutputDataStreamPort"""
        return _SALOMERuntime.RuntimeSALOME_createOutputDataStreamPort(self, name, node, type)

    def createInDataNode(self, kind, name):
        r"""createInDataNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> DataNode"""
        return _SALOMERuntime.RuntimeSALOME_createInDataNode(self, kind, name)

    def createOutDataNode(self, kind, name):
        r"""createOutDataNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> DataNode"""
        return _SALOMERuntime.RuntimeSALOME_createOutDataNode(self, kind, name)

    def createFuncNode(self, kind, name):
        r"""createFuncNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> InlineFuncNode"""
        return _SALOMERuntime.RuntimeSALOME_createFuncNode(self, kind, name)

    def createScriptNode(self, kind, name):
        r"""createScriptNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> InlineNode"""
        return _SALOMERuntime.RuntimeSALOME_createScriptNode(self, kind, name)

    def createRefNode(self, kind, name):
        r"""createRefNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> ServiceNode"""
        return _SALOMERuntime.RuntimeSALOME_createRefNode(self, kind, name)

    def createCompoNode(self, kind, name):
        r"""createCompoNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> ServiceNode"""
        return _SALOMERuntime.RuntimeSALOME_createCompoNode(self, kind, name)

    def createSInlineNode(self, kind, name):
        r"""createSInlineNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> ServiceInlineNode"""
        return _SALOMERuntime.RuntimeSALOME_createSInlineNode(self, kind, name)

    def createComponentInstance(self, *args):
        r"""createComponentInstance(RuntimeSALOME self, std::string const & name, std::string const & kind="") -> ComponentInstance"""
        return _SALOMERuntime.RuntimeSALOME_createComponentInstance(self, *args)

    def createWhileLoop(self, name):
        r"""createWhileLoop(RuntimeSALOME self, std::string const & name) -> WhileLoop"""
        return _SALOMERuntime.RuntimeSALOME_createWhileLoop(self, name)

    def createForLoop(self, name):
        r"""createForLoop(RuntimeSALOME self, std::string const & name) -> ForLoop"""
        return _SALOMERuntime.RuntimeSALOME_createForLoop(self, name)

    def createOptimizerLoop(self, *args):
        r"""createOptimizerLoop(RuntimeSALOME self, std::string const & name, std::string const & algLib, std::string const & factoryName, bool algInitOnFile, std::string const & kind="", Proc procForTypes=None) -> OptimizerLoop"""
        return _SALOMERuntime.RuntimeSALOME_createOptimizerLoop(self, *args)

    def createBloc(self, name):
        r"""createBloc(RuntimeSALOME self, std::string const & name) -> Bloc"""
        return _SALOMERuntime.RuntimeSALOME_createBloc(self, name)

    def createProc(self, name):
        r"""createProc(RuntimeSALOME self, std::string const & name) -> Proc"""
        return _SALOMERuntime.RuntimeSALOME_createProc(self, name)

    def createInterfaceTc(self, id, name, ltc):
        r"""createInterfaceTc(RuntimeSALOME self, std::string const & id, std::string const & name, std::list< YACS::ENGINE::TypeCodeObjref *,std::allocator< YACS::ENGINE::TypeCodeObjref * > > ltc) -> TypeCode"""
        return _SALOMERuntime.RuntimeSALOME_createInterfaceTc(self, id, name, ltc)

    def createSequenceTc(self, id, name, content):
        r"""createSequenceTc(RuntimeSALOME self, std::string const & id, std::string const & name, TypeCode content) -> TypeCode"""
        return _SALOMERuntime.RuntimeSALOME_createSequenceTc(self, id, name, content)

    def createStructTc(self, id, name):
        r"""createStructTc(RuntimeSALOME self, std::string const & id, std::string const & name) -> TypeCodeStruct"""
        return _SALOMERuntime.RuntimeSALOME_createStructTc(self, id, name)

    def adaptNeutral(self, source, impl, type, init):
        r"""adaptNeutral(RuntimeSALOME self, InputPort source, std::string const & impl, TypeCode type, bool init) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptNeutral(self, source, impl, type, init)

    def adaptCorbaToCorba(self, source, type):
        r"""adaptCorbaToCorba(RuntimeSALOME self, InputCorbaPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCorbaToCorba(self, source, type)

    def adaptCorbaToNeutral(self, source, type):
        r"""adaptCorbaToNeutral(RuntimeSALOME self, InputCorbaPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCorbaToNeutral(self, source, type)

    def adaptCorbaToPython(self, source, type):
        r"""adaptCorbaToPython(RuntimeSALOME self, InputCorbaPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCorbaToPython(self, source, type)

    def adaptCorbaToCpp(self, source, type):
        r"""adaptCorbaToCpp(RuntimeSALOME self, InputCorbaPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCorbaToCpp(self, source, type)

    def adaptCorbaToXml(self, source, type):
        r"""adaptCorbaToXml(RuntimeSALOME self, InputCorbaPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCorbaToXml(self, source, type)

    def adaptPythonToCorba(self, source, type):
        r"""adaptPythonToCorba(RuntimeSALOME self, InputPyPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptPythonToCorba(self, source, type)

    def adaptPythonToNeutral(self, source, type):
        r"""adaptPythonToNeutral(RuntimeSALOME self, InputPyPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptPythonToNeutral(self, source, type)

    def adaptPythonToPython(self, source, type, init):
        r"""adaptPythonToPython(RuntimeSALOME self, InputPyPort source, TypeCode type, bool init) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptPythonToPython(self, source, type, init)

    def adaptPythonToXml(self, source, type):
        r"""adaptPythonToXml(RuntimeSALOME self, InputPyPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptPythonToXml(self, source, type)

    def adaptPythonToCpp(self, source, type):
        r"""adaptPythonToCpp(RuntimeSALOME self, InputPyPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptPythonToCpp(self, source, type)

    def adaptCppToCorba(self, source, type):
        r"""adaptCppToCorba(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCppToCorba(self, source, type)

    def adaptCppToNeutral(self, source, type):
        r"""adaptCppToNeutral(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCppToNeutral(self, source, type)

    def adaptCppToPython(self, source, type):
        r"""adaptCppToPython(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCppToPython(self, source, type)

    def adaptCppToXml(self, source, type):
        r"""adaptCppToXml(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCppToXml(self, source, type)

    def adaptCppToCpp(self, source, type):
        r"""adaptCppToCpp(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCppToCpp(self, source, type)

    def adapt(self, *args):
        r"""
        adapt(RuntimeSALOME self, InputPort source, std::string const & impl, TypeCode type, bool init=False) -> InputPort
        adapt(RuntimeSALOME self, InPropertyPort source, std::string const & impl, TypeCode type, bool init=False) -> InputPort
        adapt(RuntimeSALOME self, InputCorbaPort source, std::string const & impl, TypeCode type, bool init) -> InputPort
        adapt(RuntimeSALOME self, InputPyPort source, std::string const & impl, TypeCode type, bool init) -> InputPort
        adapt(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, std::string const & impl, TypeCode type, bool init) -> InputPort
        adapt(RuntimeSALOME self, InputXmlPort source, std::string const & impl, TypeCode type, bool init) -> InputPort
        """
        return _SALOMERuntime.RuntimeSALOME_adapt(self, *args)

    def adaptXmlToCorba(self, source, type):
        r"""adaptXmlToCorba(RuntimeSALOME self, InputXmlPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptXmlToCorba(self, source, type)

    def adaptXmlToPython(self, inport, type):
        r"""adaptXmlToPython(RuntimeSALOME self, InputXmlPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptXmlToPython(self, inport, type)

    def adaptXmlToCpp(self, inport, type):
        r"""adaptXmlToCpp(RuntimeSALOME self, InputXmlPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptXmlToCpp(self, inport, type)

    def adaptXmlToNeutral(self, inport, type):
        r"""adaptXmlToNeutral(RuntimeSALOME self, InputXmlPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptXmlToNeutral(self, inport, type)

    def adaptXmlToXml(self, inport, type, init):
        r"""adaptXmlToXml(RuntimeSALOME self, InputXmlPort inport, TypeCode type, bool init) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptXmlToXml(self, inport, type, init)

    def adaptNeutralToXml(self, inport, type):
        r"""adaptNeutralToXml(RuntimeSALOME self, InputPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptNeutralToXml(self, inport, type)

    def adaptNeutralToPython(self, inport, type):
        r"""adaptNeutralToPython(RuntimeSALOME self, InputPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptNeutralToPython(self, inport, type)

    def adaptNeutralToCorba(self, inport, type):
        r"""adaptNeutralToCorba(RuntimeSALOME self, InputPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptNeutralToCorba(self, inport, type)

    def adaptNeutralToCpp(self, inport, type):
        r"""adaptNeutralToCpp(RuntimeSALOME self, InputPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptNeutralToCpp(self, inport, type)

    def convertNeutral(self, type, data):
        r"""convertNeutral(RuntimeSALOME self, TypeCode type, Any data) -> void *"""
        return _SALOMERuntime.RuntimeSALOME_convertNeutral(self, type, data)

    def convertNeutralAsString(self, type, data):
        r"""convertNeutralAsString(RuntimeSALOME self, TypeCode type, Any data) -> std::string"""
        return _SALOMERuntime.RuntimeSALOME_convertNeutralAsString(self, type, data)

    def convertPyObjectToString(self, ob):
        r"""convertPyObjectToString(RuntimeSALOME self, PyObject * ob) -> std::string"""
        return _SALOMERuntime.RuntimeSALOME_convertPyObjectToString(self, ob)

    def convertStringToPyObject(self, s):
        r"""convertStringToPyObject(RuntimeSALOME self, std::string const & s) -> PyObject *"""
        return _SALOMERuntime.RuntimeSALOME_convertStringToPyObject(self, s)
    __swig_destroy__ = _SALOMERuntime.delete_RuntimeSALOME

    def loadModulCatalog(self):
        r"""loadModulCatalog(RuntimeSALOME self)"""
        return _SALOMERuntime.RuntimeSALOME_loadModulCatalog(self)

    def getOrb(self):
        r"""getOrb(RuntimeSALOME self) -> CORBA::ORB_ptr"""
        return _SALOMERuntime.RuntimeSALOME_getOrb(self)

    def getFromNS(self, entry):
        r"""getFromNS(RuntimeSALOME self, char const * entry) -> CORBA::Object_var"""
        return _SALOMERuntime.RuntimeSALOME_getFromNS(self, entry)

    def getPyOrb(self):
        r"""getPyOrb(RuntimeSALOME self) -> PyObject *"""
        return _SALOMERuntime.RuntimeSALOME_getPyOrb(self)

    def getBuiltins(self):
        r"""getBuiltins(RuntimeSALOME self) -> PyObject *"""
        return _SALOMERuntime.RuntimeSALOME_getBuiltins(self)

    def getDynFactory(self):
        r"""getDynFactory(RuntimeSALOME self) -> DynamicAny::DynAnyFactory_ptr"""
        return _SALOMERuntime.RuntimeSALOME_getDynFactory(self)

    def getApi(self):
        r"""getApi(RuntimeSALOME self) -> omniORBpyAPI *"""
        return _SALOMERuntime.RuntimeSALOME_getApi(self)

    def get_omnipy(self):
        r"""get_omnipy(RuntimeSALOME self) -> PyObject *"""
        return _SALOMERuntime.RuntimeSALOME_get_omnipy(self)

    def getConnectionManager(self):
        r"""getConnectionManager(RuntimeSALOME self) -> ConnectionManager &"""
        return _SALOMERuntime.RuntimeSALOME_getConnectionManager(self)

    def createContainer(self, *args):
        r"""createContainer(RuntimeSALOME self, std::string const & kind="") -> PyObject"""
        return _SALOMERuntime.RuntimeSALOME_createContainer(self, *args)

    def createAnyPyObject(self, pyobj):
        r"""createAnyPyObject(RuntimeSALOME self, PyObject * pyobj) -> Any"""
        return _SALOMERuntime.RuntimeSALOME_createAnyPyObject(self, pyobj)

# Register RuntimeSALOME in _SALOMERuntime:
_SALOMERuntime.RuntimeSALOME_swigregister(RuntimeSALOME)

def RuntimeSALOME_setRuntime(*args):
    r"""RuntimeSALOME_setRuntime(long flags=YACS::ENGINE::RuntimeSALOME::UsePython+YACS::ENGINE::RuntimeSALOME::UseCorba+YACS::ENGINE::RuntimeSALOME::UseXml+YACS::ENGINE::RuntimeSALOME::UseCpp+YACS::ENGINE::RuntimeSALOME::UseSalome, int argc=0, char *[] argv=0)"""
    return _SALOMERuntime.RuntimeSALOME_setRuntime(*args)

class SALOMEDispatcher(salome.yacs.pilot.Dispatcher):
    r"""Proxy of C++ YACS::ENGINE::SALOMEDispatcher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SALOMEDispatcher self) -> SALOMEDispatcher"""
        _SALOMERuntime.SALOMEDispatcher_swiginit(self, _SALOMERuntime.new_SALOMEDispatcher())

    def dispatch(self, object, event):
        r"""dispatch(SALOMEDispatcher self, Node object, std::string const & event)"""
        return _SALOMERuntime.SALOMEDispatcher_dispatch(self, object, event)

    def addObserver(self, observer, numid, event):
        r"""addObserver(SALOMEDispatcher self, YACS_ORB::Observer_ptr observer, int numid, std::string event)"""
        return _SALOMERuntime.SALOMEDispatcher_addObserver(self, observer, numid, event)

    @staticmethod
    def setSALOMEDispatcher():
        r"""setSALOMEDispatcher()"""
        return _SALOMERuntime.SALOMEDispatcher_setSALOMEDispatcher()

    @staticmethod
    def getSALOMEDispatcher():
        r"""getSALOMEDispatcher() -> SALOMEDispatcher"""
        return _SALOMERuntime.SALOMEDispatcher_getSALOMEDispatcher()
    __swig_destroy__ = _SALOMERuntime.delete_SALOMEDispatcher

# Register SALOMEDispatcher in _SALOMERuntime:
_SALOMERuntime.SALOMEDispatcher_swigregister(SALOMEDispatcher)

def SALOMEDispatcher_setSALOMEDispatcher():
    r"""SALOMEDispatcher_setSALOMEDispatcher()"""
    return _SALOMERuntime.SALOMEDispatcher_setSALOMEDispatcher()

def SALOMEDispatcher_getSALOMEDispatcher():
    r"""SALOMEDispatcher_getSALOMEDispatcher() -> SALOMEDispatcher"""
    return _SALOMERuntime.SALOMEDispatcher_getSALOMEDispatcher()

class SalomeProc(salome.yacs.pilot.Proc):
    r"""Proxy of C++ YACS::ENGINE::SalomeProc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_SalomeProc

    def createInterfaceTc(self, id, name, ltc):
        r"""createInterfaceTc(SalomeProc self, std::string const & id, std::string const & name, std::list< YACS::ENGINE::TypeCodeObjref *,std::allocator< YACS::ENGINE::TypeCodeObjref * > > ltc) -> TypeCode"""
        return _SALOMERuntime.SalomeProc_createInterfaceTc(self, id, name, ltc)

    def createStructTc(self, id, name):
        r"""createStructTc(SalomeProc self, std::string const & id, std::string const & name) -> TypeCode"""
        return _SALOMERuntime.SalomeProc_createStructTc(self, id, name)

    def typeName(self):
        r"""typeName(SalomeProc self) -> std::string"""
        return _SALOMERuntime.SalomeProc_typeName(self)

    def saveSchema(self, xmlSchemaFile):
        r"""saveSchema(SalomeProc self, std::string xmlSchemaFile)"""
        return _SALOMERuntime.SalomeProc_saveSchema(self, xmlSchemaFile)

    def init(self, start=True):
        r"""init(SalomeProc self, bool start=True)"""
        return _SALOMERuntime.SalomeProc_init(self, start)

# Register SalomeProc in _SALOMERuntime:
_SALOMERuntime.SalomeProc_swigregister(SalomeProc)

class PythonEntry(object):
    r"""Proxy of C++ YACS::ENGINE::PythonEntry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsProxy(ob):
        r"""IsProxy(PyObject * ob) -> bool"""
        return _SALOMERuntime.PythonEntry_IsProxy(ob)

    @staticmethod
    def GetDestroyStatus(ob):
        r"""GetDestroyStatus(PyObject * ob) -> bool"""
        return _SALOMERuntime.PythonEntry_GetDestroyStatus(ob)

    @staticmethod
    def DoNotTouchFileIfProxy(ob):
        r"""DoNotTouchFileIfProxy(PyObject * ob)"""
        return _SALOMERuntime.PythonEntry_DoNotTouchFileIfProxy(ob)

    @staticmethod
    def UnlinkOnDestructorIfProxy(ob):
        r"""UnlinkOnDestructorIfProxy(PyObject * ob)"""
        return _SALOMERuntime.PythonEntry_UnlinkOnDestructorIfProxy(ob)

    @staticmethod
    def IfProxyDoSomething(ob, meth):
        r"""IfProxyDoSomething(PyObject * ob, char const * meth)"""
        return _SALOMERuntime.PythonEntry_IfProxyDoSomething(ob, meth)

# Register PythonEntry in _SALOMERuntime:
_SALOMERuntime.PythonEntry_swigregister(PythonEntry)

def PythonEntry_IsProxy(ob):
    r"""PythonEntry_IsProxy(PyObject * ob) -> bool"""
    return _SALOMERuntime.PythonEntry_IsProxy(ob)

def PythonEntry_GetDestroyStatus(ob):
    r"""PythonEntry_GetDestroyStatus(PyObject * ob) -> bool"""
    return _SALOMERuntime.PythonEntry_GetDestroyStatus(ob)

def PythonEntry_DoNotTouchFileIfProxy(ob):
    r"""PythonEntry_DoNotTouchFileIfProxy(PyObject * ob)"""
    return _SALOMERuntime.PythonEntry_DoNotTouchFileIfProxy(ob)

def PythonEntry_UnlinkOnDestructorIfProxy(ob):
    r"""PythonEntry_UnlinkOnDestructorIfProxy(PyObject * ob)"""
    return _SALOMERuntime.PythonEntry_UnlinkOnDestructorIfProxy(ob)

def PythonEntry_IfProxyDoSomething(ob, meth):
    r"""PythonEntry_IfProxyDoSomething(PyObject * ob, char const * meth)"""
    return _SALOMERuntime.PythonEntry_IfProxyDoSomething(ob, meth)
PythonEntry.SCRIPT_FOR_SIMPLE_SERIALIZATION = _SALOMERuntime.cvar.PythonEntry_SCRIPT_FOR_SIMPLE_SERIALIZATION

class PythonNode(salome.yacs.pilot.InlineNode, PythonEntry):
    r"""Proxy of C++ YACS::ENGINE::PythonNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_PythonNode

    def checkBasicConsistency(self):
        r"""checkBasicConsistency(PythonNode self)"""
        return _SALOMERuntime.PythonNode_checkBasicConsistency(self)

    def execute(self):
        r"""execute(PythonNode self)"""
        return _SALOMERuntime.PythonNode_execute(self)

    def load(self):
        r"""load(PythonNode self)"""
        return _SALOMERuntime.PythonNode_load(self)

    def loadRemote(self):
        r"""loadRemote(PythonNode self)"""
        return _SALOMERuntime.PythonNode_loadRemote(self)

    def loadLocal(self):
        r"""loadLocal(PythonNode self)"""
        return _SALOMERuntime.PythonNode_loadLocal(self)

    def executeRemote(self):
        r"""executeRemote(PythonNode self)"""
        return _SALOMERuntime.PythonNode_executeRemote(self)

    def executeLocal(self):
        r"""executeLocal(PythonNode self)"""
        return _SALOMERuntime.PythonNode_executeLocal(self)

    def shutdown(self, level):
        r"""shutdown(PythonNode self, int level)"""
        return _SALOMERuntime.PythonNode_shutdown(self, level)

    def imposeResource(self, resource_name, container_name):
        r"""imposeResource(PythonNode self, std::string const & resource_name, std::string const & container_name)"""
        return _SALOMERuntime.PythonNode_imposeResource(self, resource_name, container_name)

    def canAcceptImposedResource(self):
        r"""canAcceptImposedResource(PythonNode self) -> bool"""
        return _SALOMERuntime.PythonNode_canAcceptImposedResource(self)

    def hasImposedResource(self):
        r"""hasImposedResource(PythonNode self) -> bool"""
        return _SALOMERuntime.PythonNode_hasImposedResource(self)

    def isUsingPythonCache(self):
        r"""isUsingPythonCache(PythonNode self) -> bool"""
        return _SALOMERuntime.PythonNode_isUsingPythonCache(self)

    def getContainerLog(self):
        r"""getContainerLog(PythonNode self) -> std::string"""
        return _SALOMERuntime.PythonNode_getContainerLog(self)

    def cloneNode(self, name):
        r"""cloneNode(PythonNode self, std::string const & name) -> PythonNode"""
        return _SALOMERuntime.PythonNode_cloneNode(self, name)

    def typeName(self):
        r"""typeName(PythonNode self) -> std::string"""
        return _SALOMERuntime.PythonNode_typeName(self)

    def applyDPLScope(self, gfn):
        r"""applyDPLScope(PythonNode self, ComposedNode gfn)"""
        return _SALOMERuntime.PythonNode_applyDPLScope(self, gfn)

    def setSqueezeStatusWithExceptions(self, sqStatus, squeezeExceptions):
        r"""setSqueezeStatusWithExceptions(PythonNode self, bool sqStatus, strvec squeezeExceptions)"""
        return _SALOMERuntime.PythonNode_setSqueezeStatusWithExceptions(self, sqStatus, squeezeExceptions)

    def setSqueezeStatus(self, sqStatus):
        r"""setSqueezeStatus(PythonNode self, bool sqStatus)"""
        return _SALOMERuntime.PythonNode_setSqueezeStatus(self, sqStatus)

    def getSqueezeStatus(self):
        r"""getSqueezeStatus(PythonNode self) -> bool"""
        return _SALOMERuntime.PythonNode_getSqueezeStatus(self)

    def squeezeMemorySafe(self):
        r"""squeezeMemorySafe(PythonNode self)"""
        return _SALOMERuntime.PythonNode_squeezeMemorySafe(self)

    @staticmethod
    def ExecuteLocalInternal(codeStr, context, errorDetails):
        r"""ExecuteLocalInternal(std::string const & codeStr, PyObject * context, std::string & errorDetails)"""
        return _SALOMERuntime.PythonNode_ExecuteLocalInternal(codeStr, context, errorDetails)

# Register PythonNode in _SALOMERuntime:
_SALOMERuntime.PythonNode_swigregister(PythonNode)

def PythonNode_ExecuteLocalInternal(codeStr, context, errorDetails):
    r"""PythonNode_ExecuteLocalInternal(std::string const & codeStr, PyObject * context, std::string & errorDetails)"""
    return _SALOMERuntime.PythonNode_ExecuteLocalInternal(codeStr, context, errorDetails)
PythonNode.KIND = _SALOMERuntime.cvar.PythonNode_KIND
PythonNode.IMPL_NAME = _SALOMERuntime.cvar.PythonNode_IMPL_NAME
PythonNode.SCRIPT_FOR_SERIALIZATION = _SALOMERuntime.cvar.PythonNode_SCRIPT_FOR_SERIALIZATION
PythonNode.REMOTE_NAME = _SALOMERuntime.cvar.PythonNode_REMOTE_NAME
PythonNode.DPL_INFO_NAME = _SALOMERuntime.cvar.PythonNode_DPL_INFO_NAME

class PyFuncNode(salome.yacs.pilot.InlineFuncNode, PythonEntry):
    r"""Proxy of C++ YACS::ENGINE::PyFuncNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_PyFuncNode

    def init(self, start=True):
        r"""init(PyFuncNode self, bool start=True)"""
        return _SALOMERuntime.PyFuncNode_init(self, start)

    def checkBasicConsistency(self):
        r"""checkBasicConsistency(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_checkBasicConsistency(self)

    def execute(self):
        r"""execute(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_execute(self)

    def load(self):
        r"""load(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_load(self)

    def loadRemote(self):
        r"""loadRemote(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_loadRemote(self)

    def loadLocal(self):
        r"""loadLocal(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_loadLocal(self)

    def executeRemote(self):
        r"""executeRemote(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_executeRemote(self)

    def executeLocal(self):
        r"""executeLocal(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_executeLocal(self)

    def shutdown(self, level):
        r"""shutdown(PyFuncNode self, int level)"""
        return _SALOMERuntime.PyFuncNode_shutdown(self, level)

    def imposeResource(self, resource_name, container_name):
        r"""imposeResource(PyFuncNode self, std::string const & resource_name, std::string const & container_name)"""
        return _SALOMERuntime.PyFuncNode_imposeResource(self, resource_name, container_name)

    def canAcceptImposedResource(self):
        r"""canAcceptImposedResource(PyFuncNode self) -> bool"""
        return _SALOMERuntime.PyFuncNode_canAcceptImposedResource(self)

    def hasImposedResource(self):
        r"""hasImposedResource(PyFuncNode self) -> bool"""
        return _SALOMERuntime.PyFuncNode_hasImposedResource(self)

    def getContainerLog(self):
        r"""getContainerLog(PyFuncNode self) -> std::string"""
        return _SALOMERuntime.PyFuncNode_getContainerLog(self)

    def cloneNode(self, name):
        r"""cloneNode(PyFuncNode self, std::string const & name) -> PyFuncNode"""
        return _SALOMERuntime.PyFuncNode_cloneNode(self, name)

    def typeName(self):
        r"""typeName(PyFuncNode self) -> std::string"""
        return _SALOMERuntime.PyFuncNode_typeName(self)

# Register PyFuncNode in _SALOMERuntime:
_SALOMERuntime.PyFuncNode_swigregister(PyFuncNode)
PyFuncNode.SCRIPT_FOR_SERIALIZATION = _SALOMERuntime.cvar.PyFuncNode_SCRIPT_FOR_SERIALIZATION

class InterpreterUnlocker(object):
    r"""Proxy of C++ YACS::ENGINE::InterpreterUnlocker class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(InterpreterUnlocker self) -> InterpreterUnlocker"""
        _SALOMERuntime.InterpreterUnlocker_swiginit(self, _SALOMERuntime.new_InterpreterUnlocker())
    __swig_destroy__ = _SALOMERuntime.delete_InterpreterUnlocker

# Register InterpreterUnlocker in _SALOMERuntime:
_SALOMERuntime.InterpreterUnlocker_swigregister(InterpreterUnlocker)

class InterpreterSaveThread(object):
    r"""Proxy of C++ YACS::ENGINE::InterpreterSaveThread class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(InterpreterSaveThread self) -> InterpreterSaveThread"""
        _SALOMERuntime.InterpreterSaveThread_swiginit(self, _SALOMERuntime.new_InterpreterSaveThread())
    __swig_destroy__ = _SALOMERuntime.delete_InterpreterSaveThread

    def lock(self):
        r"""lock(InterpreterSaveThread self)"""
        return _SALOMERuntime.InterpreterSaveThread_lock(self)

    def unlock(self):
        r"""unlock(InterpreterSaveThread self)"""
        return _SALOMERuntime.InterpreterSaveThread_unlock(self)

# Register InterpreterSaveThread in _SALOMERuntime:
_SALOMERuntime.InterpreterSaveThread_swigregister(InterpreterSaveThread)

class InputPyPort(salome.yacs.pilot.InputPort):
    r"""Proxy of C++ YACS::ENGINE::InputPyPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InputPyPort self, std::string const & name, Node node, TypeCode type) -> InputPyPort
        __init__(InputPyPort self, InputPyPort other, Node newHelder) -> InputPyPort
        """
        _SALOMERuntime.InputPyPort_swiginit(self, _SALOMERuntime.new_InputPyPort(*args))
    __swig_destroy__ = _SALOMERuntime.delete_InputPyPort

    def edIsManuallyInitialized(self):
        r"""edIsManuallyInitialized(InputPyPort self) -> bool"""
        return _SALOMERuntime.InputPyPort_edIsManuallyInitialized(self)

    def edRemoveManInit(self):
        r"""edRemoveManInit(InputPyPort self)"""
        return _SALOMERuntime.InputPyPort_edRemoveManInit(self)

    def releaseData(self):
        r"""releaseData(InputPyPort self)"""
        return _SALOMERuntime.InputPyPort_releaseData(self)

    def put(self, *args):
        r"""
        put(InputPyPort self, void const * data)
        put(InputPyPort self, PyObject * data)
        """
        return _SALOMERuntime.InputPyPort_put(self, *args)

    def clone(self, newHelder):
        r"""clone(InputPyPort self, Node newHelder) -> InputPort"""
        return _SALOMERuntime.InputPyPort_clone(self, newHelder)

    def getPyObj(self):
        r"""getPyObj(InputPyPort self) -> YACS::ENGINE::PyObj *"""
        return _SALOMERuntime.InputPyPort_getPyObj(self)

    def getAsString(self):
        r"""getAsString(InputPyPort self) -> std::string"""
        return _SALOMERuntime.InputPyPort_getAsString(self)

    def get(self):
        r"""get(InputPyPort self) -> void *"""
        return _SALOMERuntime.InputPyPort_get(self)

    def getHumanRepr(self):
        r"""getHumanRepr(InputPyPort self) -> std::string"""
        return _SALOMERuntime.InputPyPort_getHumanRepr(self)

    def isEmpty(self):
        r"""isEmpty(InputPyPort self) -> bool"""
        return _SALOMERuntime.InputPyPort_isEmpty(self)

    def exSaveInit(self):
        r"""exSaveInit(InputPyPort self)"""
        return _SALOMERuntime.InputPyPort_exSaveInit(self)

    def exRestoreInit(self):
        r"""exRestoreInit(InputPyPort self)"""
        return _SALOMERuntime.InputPyPort_exRestoreInit(self)

    def dump(self):
        r"""dump(InputPyPort self) -> std::string"""
        return _SALOMERuntime.InputPyPort_dump(self)

    def typeName(self):
        r"""typeName(InputPyPort self) -> std::string"""
        return _SALOMERuntime.InputPyPort_typeName(self)

    def valToStr(self):
        r"""valToStr(InputPyPort self) -> std::string"""
        return _SALOMERuntime.InputPyPort_valToStr(self)

    def valFromStr(self, valstr):
        r"""valFromStr(InputPyPort self, std::string valstr)"""
        return _SALOMERuntime.InputPyPort_valFromStr(self, valstr)

# Register InputPyPort in _SALOMERuntime:
_SALOMERuntime.InputPyPort_swigregister(InputPyPort)

class OutputPyPort(salome.yacs.pilot.OutputPort):
    r"""Proxy of C++ YACS::ENGINE::OutputPyPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputPyPort self, std::string const & name, Node node, TypeCode type) -> OutputPyPort
        __init__(OutputPyPort self, OutputPyPort other, Node newHelder) -> OutputPyPort
        """
        _SALOMERuntime.OutputPyPort_swiginit(self, _SALOMERuntime.new_OutputPyPort(*args))
    __swig_destroy__ = _SALOMERuntime.delete_OutputPyPort

    def putWithoutForward(self, data):
        r"""putWithoutForward(OutputPyPort self, PyObject * data)"""
        return _SALOMERuntime.OutputPyPort_putWithoutForward(self, data)

    def put(self, *args):
        r"""
        put(OutputPyPort self, void const * data)
        put(OutputPyPort self, PyObject * data)
        """
        return _SALOMERuntime.OutputPyPort_put(self, *args)

    def clone(self, newHelder):
        r"""clone(OutputPyPort self, Node newHelder) -> OutputPort"""
        return _SALOMERuntime.OutputPyPort_clone(self, newHelder)

    def get(self):
        r"""get(OutputPyPort self) -> PyObject *"""
        return _SALOMERuntime.OutputPyPort_get(self)

    def getPyObj(self):
        r"""getPyObj(OutputPyPort self) -> YACS::ENGINE::PyObj *"""
        return _SALOMERuntime.OutputPyPort_getPyObj(self)

    def getAsString(self):
        r"""getAsString(OutputPyPort self) -> std::string"""
        return _SALOMERuntime.OutputPyPort_getAsString(self)

    def dump(self):
        r"""dump(OutputPyPort self) -> std::string"""
        return _SALOMERuntime.OutputPyPort_dump(self)

    def typeName(self):
        r"""typeName(OutputPyPort self) -> std::string"""
        return _SALOMERuntime.OutputPyPort_typeName(self)

    def valToStr(self):
        r"""valToStr(OutputPyPort self) -> std::string"""
        return _SALOMERuntime.OutputPyPort_valToStr(self)

    def valFromStr(self, valstr):
        r"""valFromStr(OutputPyPort self, std::string valstr)"""
        return _SALOMERuntime.OutputPyPort_valFromStr(self, valstr)

# Register OutputPyPort in _SALOMERuntime:
_SALOMERuntime.OutputPyPort_swigregister(OutputPyPort)

class InputXmlPort(salome.yacs.pilot.InputPort):
    r"""Proxy of C++ YACS::ENGINE::InputXmlPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InputXmlPort self, std::string const & name, Node node, TypeCode type) -> InputXmlPort
        __init__(InputXmlPort self, InputXmlPort other, Node newHelder) -> InputXmlPort
        """
        _SALOMERuntime.InputXmlPort_swiginit(self, _SALOMERuntime.new_InputXmlPort(*args))

    def edIsManuallyInitialized(self):
        r"""edIsManuallyInitialized(InputXmlPort self) -> bool"""
        return _SALOMERuntime.InputXmlPort_edIsManuallyInitialized(self)

    def edRemoveManInit(self):
        r"""edRemoveManInit(InputXmlPort self)"""
        return _SALOMERuntime.InputXmlPort_edRemoveManInit(self)

    def put(self, *args):
        r"""
        put(InputXmlPort self, void const * data)
        put(InputXmlPort self, char const * data)
        """
        return _SALOMERuntime.InputXmlPort_put(self, *args)

    def releaseData(self):
        r"""releaseData(InputXmlPort self)"""
        return _SALOMERuntime.InputXmlPort_releaseData(self)

    def clone(self, newHelder):
        r"""clone(InputXmlPort self, Node newHelder) -> InputPort"""
        return _SALOMERuntime.InputXmlPort_clone(self, newHelder)

    def getXml(self):
        r"""getXml(InputXmlPort self) -> char const *"""
        return _SALOMERuntime.InputXmlPort_getXml(self)

    def get(self):
        r"""get(InputXmlPort self) -> void *"""
        return _SALOMERuntime.InputXmlPort_get(self)

    def isEmpty(self):
        r"""isEmpty(InputXmlPort self) -> bool"""
        return _SALOMERuntime.InputXmlPort_isEmpty(self)

    def exSaveInit(self):
        r"""exSaveInit(InputXmlPort self)"""
        return _SALOMERuntime.InputXmlPort_exSaveInit(self)

    def exRestoreInit(self):
        r"""exRestoreInit(InputXmlPort self)"""
        return _SALOMERuntime.InputXmlPort_exRestoreInit(self)

    def dump(self):
        r"""dump(InputXmlPort self) -> std::string"""
        return _SALOMERuntime.InputXmlPort_dump(self)

    def valToStr(self):
        r"""valToStr(InputXmlPort self) -> std::string"""
        return _SALOMERuntime.InputXmlPort_valToStr(self)

    def valFromStr(self, valstr):
        r"""valFromStr(InputXmlPort self, std::string valstr)"""
        return _SALOMERuntime.InputXmlPort_valFromStr(self, valstr)
    __swig_destroy__ = _SALOMERuntime.delete_InputXmlPort

# Register InputXmlPort in _SALOMERuntime:
_SALOMERuntime.InputXmlPort_swigregister(InputXmlPort)

class OutputXmlPort(salome.yacs.pilot.OutputPort):
    r"""Proxy of C++ YACS::ENGINE::OutputXmlPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputXmlPort self, std::string const & name, Node node, TypeCode type) -> OutputXmlPort
        __init__(OutputXmlPort self, OutputXmlPort other, Node newHelder) -> OutputXmlPort
        """
        _SALOMERuntime.OutputXmlPort_swiginit(self, _SALOMERuntime.new_OutputXmlPort(*args))

    def put(self, *args):
        r"""
        put(OutputXmlPort self, void const * data)
        put(OutputXmlPort self, char const * data)
        """
        return _SALOMERuntime.OutputXmlPort_put(self, *args)

    def get(self):
        r"""get(OutputXmlPort self) -> char const *"""
        return _SALOMERuntime.OutputXmlPort_get(self)

    def clone(self, newHelder):
        r"""clone(OutputXmlPort self, Node newHelder) -> OutputPort"""
        return _SALOMERuntime.OutputXmlPort_clone(self, newHelder)

    def dump(self):
        r"""dump(OutputXmlPort self) -> std::string"""
        return _SALOMERuntime.OutputXmlPort_dump(self)

    def valToStr(self):
        r"""valToStr(OutputXmlPort self) -> std::string"""
        return _SALOMERuntime.OutputXmlPort_valToStr(self)

    def valFromStr(self, valstr):
        r"""valFromStr(OutputXmlPort self, std::string valstr)"""
        return _SALOMERuntime.OutputXmlPort_valFromStr(self, valstr)
    __swig_destroy__ = _SALOMERuntime.delete_OutputXmlPort

# Register OutputXmlPort in _SALOMERuntime:
_SALOMERuntime.OutputXmlPort_swigregister(OutputXmlPort)

class PresetNode(salome.yacs.pilot.DataNode):
    r"""Proxy of C++ YACS::ENGINE::PresetNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def execute(self):
        r"""execute(PresetNode self)"""
        return _SALOMERuntime.PresetNode_execute(self)

    def accept(self, visitor):
        r"""accept(PresetNode self, Visitor visitor)"""
        return _SALOMERuntime.PresetNode_accept(self, visitor)

    def checkBasicConsistency(self):
        r"""checkBasicConsistency(PresetNode self)"""
        return _SALOMERuntime.PresetNode_checkBasicConsistency(self)

    def setData(self, port, data):
        r"""setData(PresetNode self, OutputPort port, std::string const & data)"""
        return _SALOMERuntime.PresetNode_setData(self, port, data)

    def createOutputPort(self, outputPortName, type):
        r"""createOutputPort(PresetNode self, std::string const & outputPortName, TypeCode type) -> OutputPort"""
        return _SALOMERuntime.PresetNode_createOutputPort(self, outputPortName, type)

    def typeName(self):
        r"""typeName(PresetNode self) -> std::string"""
        return _SALOMERuntime.PresetNode_typeName(self)
    __swig_destroy__ = _SALOMERuntime.delete_PresetNode

# Register PresetNode in _SALOMERuntime:
_SALOMERuntime.PresetNode_swigregister(PresetNode)
PresetNode.IMPL_NAME = _SALOMERuntime.cvar.PresetNode_IMPL_NAME

class OutputPresetPort(OutputXmlPort):
    r"""Proxy of C++ YACS::ENGINE::OutputPresetPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputPresetPort self, std::string const & name, Node node, TypeCode type) -> OutputPresetPort
        __init__(OutputPresetPort self, OutputPresetPort other, Node newHelder) -> OutputPresetPort
        """
        _SALOMERuntime.OutputPresetPort_swiginit(self, _SALOMERuntime.new_OutputPresetPort(*args))

    def clone(self, newHelder):
        r"""clone(OutputPresetPort self, Node newHelder) -> OutputPort"""
        return _SALOMERuntime.OutputPresetPort_clone(self, newHelder)

    def setData(self, data):
        r"""setData(OutputPresetPort self, std::string data)"""
        return _SALOMERuntime.OutputPresetPort_setData(self, data)

    def getData(self):
        r"""getData(OutputPresetPort self) -> std::string"""
        return _SALOMERuntime.OutputPresetPort_getData(self)

    def checkBasicConsistency(self):
        r"""checkBasicConsistency(OutputPresetPort self)"""
        return _SALOMERuntime.OutputPresetPort_checkBasicConsistency(self)

    def dump(self):
        r"""dump(OutputPresetPort self) -> std::string"""
        return _SALOMERuntime.OutputPresetPort_dump(self)

    def getAsString(self):
        r"""getAsString(OutputPresetPort self) -> std::string"""
        return _SALOMERuntime.OutputPresetPort_getAsString(self)

    def getPyObj(self):
        r"""getPyObj(OutputPresetPort self) -> PyObject *"""
        return _SALOMERuntime.OutputPresetPort_getPyObj(self)

    def typeName(self):
        r"""typeName(OutputPresetPort self) -> std::string"""
        return _SALOMERuntime.OutputPresetPort_typeName(self)

    def setDataPy(self, ob):
        r"""setDataPy(OutputPresetPort self, PyObject * ob)"""
        return _SALOMERuntime.OutputPresetPort_setDataPy(self, ob)
    __swig_destroy__ = _SALOMERuntime.delete_OutputPresetPort

# Register OutputPresetPort in _SALOMERuntime:
_SALOMERuntime.OutputPresetPort_swigregister(OutputPresetPort)

class InputPresetPort(InputXmlPort):
    r"""Proxy of C++ YACS::ENGINE::InputPresetPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InputPresetPort self, std::string const & name, Node node, TypeCode type) -> InputPresetPort
        __init__(InputPresetPort self, InputPresetPort other, Node newHelder) -> InputPresetPort
        """
        _SALOMERuntime.InputPresetPort_swiginit(self, _SALOMERuntime.new_InputPresetPort(*args))

    def clone(self, newHelder):
        r"""clone(InputPresetPort self, Node newHelder) -> InputPort"""
        return _SALOMERuntime.InputPresetPort_clone(self, newHelder)

    def setData(self, data):
        r"""setData(InputPresetPort self, std::string data)"""
        return _SALOMERuntime.InputPresetPort_setData(self, data)

    def getData(self):
        r"""getData(InputPresetPort self) -> std::string"""
        return _SALOMERuntime.InputPresetPort_getData(self)

    def dump(self):
        r"""dump(InputPresetPort self) -> std::string"""
        return _SALOMERuntime.InputPresetPort_dump(self)

    def getAsString(self):
        r"""getAsString(InputPresetPort self) -> std::string"""
        return _SALOMERuntime.InputPresetPort_getAsString(self)

    def getPyObj(self):
        r"""getPyObj(InputPresetPort self) -> PyObject *"""
        return _SALOMERuntime.InputPresetPort_getPyObj(self)

    def typeName(self):
        r"""typeName(InputPresetPort self) -> std::string"""
        return _SALOMERuntime.InputPresetPort_typeName(self)
    __swig_destroy__ = _SALOMERuntime.delete_InputPresetPort

# Register InputPresetPort in _SALOMERuntime:
_SALOMERuntime.InputPresetPort_swigregister(InputPresetPort)

class CORBANode(salome.yacs.pilot.ServiceNode):
    r"""Proxy of C++ YACS::ENGINE::CORBANode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def execute(self):
        r"""execute(CORBANode self)"""
        return _SALOMERuntime.CORBANode_execute(self)

    def createNode(self, name):
        r"""createNode(CORBANode self, std::string const & name) -> ServiceNode"""
        return _SALOMERuntime.CORBANode_createNode(self, name)

    def getKind(self):
        r"""getKind(CORBANode self) -> std::string"""
        return _SALOMERuntime.CORBANode_getKind(self)

    def typeName(self):
        r"""typeName(CORBANode self) -> std::string"""
        return _SALOMERuntime.CORBANode_typeName(self)
    __swig_destroy__ = _SALOMERuntime.delete_CORBANode

# Register CORBANode in _SALOMERuntime:
_SALOMERuntime.CORBANode_swigregister(CORBANode)
CORBANode.KIND = _SALOMERuntime.cvar.CORBANode_KIND
CORBANode.IMPL_NAME = _SALOMERuntime.cvar.CORBANode_IMPL_NAME

class SalomeNode(salome.yacs.pilot.ServiceNode):
    r"""Proxy of C++ YACS::ENGINE::SalomeNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_SalomeNode

    def execute(self):
        r"""execute(SalomeNode self)"""
        return _SALOMERuntime.SalomeNode_execute(self)

    def createNode(self, name):
        r"""createNode(SalomeNode self, std::string const & name) -> ServiceNode"""
        return _SALOMERuntime.SalomeNode_createNode(self, name)

    def getKind(self):
        r"""getKind(SalomeNode self) -> std::string"""
        return _SALOMERuntime.SalomeNode_getKind(self)

    def typeName(self):
        r"""typeName(SalomeNode self) -> std::string"""
        return _SALOMERuntime.SalomeNode_typeName(self)

    def shutdown(self, level):
        r"""shutdown(SalomeNode self, int level)"""
        return _SALOMERuntime.SalomeNode_shutdown(self, level)

    def getContainerLog(self):
        r"""getContainerLog(SalomeNode self) -> std::string"""
        return _SALOMERuntime.SalomeNode_getContainerLog(self)

# Register SalomeNode in _SALOMERuntime:
_SALOMERuntime.SalomeNode_swigregister(SalomeNode)
SalomeNode.KIND = _SALOMERuntime.cvar.SalomeNode_KIND

class InputCorbaPort(salome.yacs.pilot.InputPort):
    r"""Proxy of C++ YACS::ENGINE::InputCorbaPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InputCorbaPort self, std::string const & name, Node node, TypeCode type) -> InputCorbaPort
        __init__(InputCorbaPort self, InputCorbaPort other, Node newHelder) -> InputCorbaPort
        """
        _SALOMERuntime.InputCorbaPort_swiginit(self, _SALOMERuntime.new_InputCorbaPort(*args))
    __swig_destroy__ = _SALOMERuntime.delete_InputCorbaPort

    def edIsManuallyInitialized(self):
        r"""edIsManuallyInitialized(InputCorbaPort self) -> bool"""
        return _SALOMERuntime.InputCorbaPort_edIsManuallyInitialized(self)

    def edRemoveManInit(self):
        r"""edRemoveManInit(InputCorbaPort self)"""
        return _SALOMERuntime.InputCorbaPort_edRemoveManInit(self)

    def put(self, *args):
        r"""
        put(InputCorbaPort self, void const * data)
        put(InputCorbaPort self, CORBA::Any * data)
        """
        return _SALOMERuntime.InputCorbaPort_put(self, *args)

    def releaseData(self):
        r"""releaseData(InputCorbaPort self)"""
        return _SALOMERuntime.InputCorbaPort_releaseData(self)

    def clone(self, newHelder):
        r"""clone(InputCorbaPort self, Node newHelder) -> InputPort"""
        return _SALOMERuntime.InputCorbaPort_clone(self, newHelder)

    def get(self):
        r"""get(InputCorbaPort self) -> void *"""
        return _SALOMERuntime.InputCorbaPort_get(self)

    def isEmpty(self):
        r"""isEmpty(InputCorbaPort self) -> bool"""
        return _SALOMERuntime.InputCorbaPort_isEmpty(self)

    def getAny(self):
        r"""getAny(InputCorbaPort self) -> CORBA::Any *"""
        return _SALOMERuntime.InputCorbaPort_getAny(self)

    def getAsString(self):
        r"""getAsString(InputCorbaPort self) -> std::string"""
        return _SALOMERuntime.InputCorbaPort_getAsString(self)

    def getPyObj(self):
        r"""getPyObj(InputCorbaPort self) -> PyObject *"""
        return _SALOMERuntime.InputCorbaPort_getPyObj(self)

    def exSaveInit(self):
        r"""exSaveInit(InputCorbaPort self)"""
        return _SALOMERuntime.InputCorbaPort_exSaveInit(self)

    def exRestoreInit(self):
        r"""exRestoreInit(InputCorbaPort self)"""
        return _SALOMERuntime.InputCorbaPort_exRestoreInit(self)

    def dump(self):
        r"""dump(InputCorbaPort self) -> std::string"""
        return _SALOMERuntime.InputCorbaPort_dump(self)

    def typeName(self):
        r"""typeName(InputCorbaPort self) -> std::string"""
        return _SALOMERuntime.InputCorbaPort_typeName(self)

    def valToStr(self):
        r"""valToStr(InputCorbaPort self) -> std::string"""
        return _SALOMERuntime.InputCorbaPort_valToStr(self)

    def valFromStr(self, valstr):
        r"""valFromStr(InputCorbaPort self, std::string valstr)"""
        return _SALOMERuntime.InputCorbaPort_valFromStr(self, valstr)

# Register InputCorbaPort in _SALOMERuntime:
_SALOMERuntime.InputCorbaPort_swigregister(InputCorbaPort)


def __lshift__(os, p):
    r"""__lshift__(std::ostream & os, OutputCorbaPort p) -> std::ostream &"""
    return _SALOMERuntime.__lshift__(os, p)
class OutputCorbaPort(salome.yacs.pilot.OutputPort):
    r"""Proxy of C++ YACS::ENGINE::OutputCorbaPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputCorbaPort self, std::string const & name, Node node, TypeCode type) -> OutputCorbaPort
        __init__(OutputCorbaPort self, OutputCorbaPort other, Node newHelder) -> OutputCorbaPort
        """
        _SALOMERuntime.OutputCorbaPort_swiginit(self, _SALOMERuntime.new_OutputCorbaPort(*args))
    __swig_destroy__ = _SALOMERuntime.delete_OutputCorbaPort

    def put(self, *args):
        r"""
        put(OutputCorbaPort self, void const * data)
        put(OutputCorbaPort self, CORBA::Any * data)
        """
        return _SALOMERuntime.OutputCorbaPort_put(self, *args)

    def clone(self, newHelder):
        r"""clone(OutputCorbaPort self, Node newHelder) -> OutputPort"""
        return _SALOMERuntime.OutputCorbaPort_clone(self, newHelder)

    def getAny(self):
        r"""getAny(OutputCorbaPort self) -> CORBA::Any *"""
        return _SALOMERuntime.OutputCorbaPort_getAny(self)

    def getAnyOut(self):
        r"""getAnyOut(OutputCorbaPort self) -> CORBA::Any *"""
        return _SALOMERuntime.OutputCorbaPort_getAnyOut(self)

    def getAsString(self):
        r"""getAsString(OutputCorbaPort self) -> std::string"""
        return _SALOMERuntime.OutputCorbaPort_getAsString(self)

    def getPyObj(self):
        r"""getPyObj(OutputCorbaPort self) -> PyObject *"""
        return _SALOMERuntime.OutputCorbaPort_getPyObj(self)

    def dump(self):
        r"""dump(OutputCorbaPort self) -> std::string"""
        return _SALOMERuntime.OutputCorbaPort_dump(self)

    def typeName(self):
        r"""typeName(OutputCorbaPort self) -> std::string"""
        return _SALOMERuntime.OutputCorbaPort_typeName(self)

    def valToStr(self):
        r"""valToStr(OutputCorbaPort self) -> std::string"""
        return _SALOMERuntime.OutputCorbaPort_valToStr(self)

    def valFromStr(self, valstr):
        r"""valFromStr(OutputCorbaPort self, std::string valstr)"""
        return _SALOMERuntime.OutputCorbaPort_valFromStr(self, valstr)

# Register OutputCorbaPort in _SALOMERuntime:
_SALOMERuntime.OutputCorbaPort_swigregister(OutputCorbaPort)

class StudyInNode(salome.yacs.pilot.DataNode):
    r"""Proxy of C++ YACS::ENGINE::StudyInNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def execute(self):
        r"""execute(StudyInNode self)"""
        return _SALOMERuntime.StudyInNode_execute(self)

    def accept(self, visitor):
        r"""accept(StudyInNode self, Visitor visitor)"""
        return _SALOMERuntime.StudyInNode_accept(self, visitor)

    def checkBasicConsistency(self):
        r"""checkBasicConsistency(StudyInNode self)"""
        return _SALOMERuntime.StudyInNode_checkBasicConsistency(self)

    def setData(self, port, data):
        r"""setData(StudyInNode self, OutputPort port, std::string const & data)"""
        return _SALOMERuntime.StudyInNode_setData(self, port, data)

    def createOutputPort(self, outputPortName, type):
        r"""createOutputPort(StudyInNode self, std::string const & outputPortName, TypeCode type) -> OutputPort"""
        return _SALOMERuntime.StudyInNode_createOutputPort(self, outputPortName, type)

    def typeName(self):
        r"""typeName(StudyInNode self) -> std::string"""
        return _SALOMERuntime.StudyInNode_typeName(self)
    __swig_destroy__ = _SALOMERuntime.delete_StudyInNode

# Register StudyInNode in _SALOMERuntime:
_SALOMERuntime.StudyInNode_swigregister(StudyInNode)
StudyInNode.IMPL_NAME = _SALOMERuntime.cvar.StudyInNode_IMPL_NAME

class StudyOutNode(salome.yacs.pilot.DataNode):
    r"""Proxy of C++ YACS::ENGINE::StudyOutNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def execute(self):
        r"""execute(StudyOutNode self)"""
        return _SALOMERuntime.StudyOutNode_execute(self)

    def accept(self, visitor):
        r"""accept(StudyOutNode self, Visitor visitor)"""
        return _SALOMERuntime.StudyOutNode_accept(self, visitor)

    def checkBasicConsistency(self):
        r"""checkBasicConsistency(StudyOutNode self)"""
        return _SALOMERuntime.StudyOutNode_checkBasicConsistency(self)

    def setData(self, port, data):
        r"""setData(StudyOutNode self, InputPort port, std::string const & data)"""
        return _SALOMERuntime.StudyOutNode_setData(self, port, data)

    def createInputPort(self, inputPortName, type):
        r"""createInputPort(StudyOutNode self, std::string const & inputPortName, TypeCode type) -> InputPort"""
        return _SALOMERuntime.StudyOutNode_createInputPort(self, inputPortName, type)

    def typeName(self):
        r"""typeName(StudyOutNode self) -> std::string"""
        return _SALOMERuntime.StudyOutNode_typeName(self)
    __swig_destroy__ = _SALOMERuntime.delete_StudyOutNode

# Register StudyOutNode in _SALOMERuntime:
_SALOMERuntime.StudyOutNode_swigregister(StudyOutNode)
StudyOutNode.IMPL_NAME = _SALOMERuntime.cvar.StudyOutNode_IMPL_NAME

class OutputStudyPort(OutputXmlPort):
    r"""Proxy of C++ YACS::ENGINE::OutputStudyPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputStudyPort self, std::string const & name, Node node, TypeCode type) -> OutputStudyPort
        __init__(OutputStudyPort self, OutputStudyPort other, Node newHelder) -> OutputStudyPort
        """
        _SALOMERuntime.OutputStudyPort_swiginit(self, _SALOMERuntime.new_OutputStudyPort(*args))

    def clone(self, newHelder):
        r"""clone(OutputStudyPort self, Node newHelder) -> OutputPort"""
        return _SALOMERuntime.OutputStudyPort_clone(self, newHelder)

    def setData(self, data):
        r"""setData(OutputStudyPort self, std::string const & data)"""
        return _SALOMERuntime.OutputStudyPort_setData(self, data)

    def getData(self):
        r"""getData(OutputStudyPort self) -> std::string"""
        return _SALOMERuntime.OutputStudyPort_getData(self)

    def putIOR(self, ior):
        r"""putIOR(OutputStudyPort self, std::string const & ior)"""
        return _SALOMERuntime.OutputStudyPort_putIOR(self, ior)

    def dump(self):
        r"""dump(OutputStudyPort self) -> std::string"""
        return _SALOMERuntime.OutputStudyPort_dump(self)

    def getPyObj(self):
        r"""getPyObj(OutputStudyPort self) -> std::string"""
        return _SALOMERuntime.OutputStudyPort_getPyObj(self)

    def getAsString(self):
        r"""getAsString(OutputStudyPort self) -> std::string"""
        return _SALOMERuntime.OutputStudyPort_getAsString(self)

    def typeName(self):
        r"""typeName(OutputStudyPort self) -> std::string"""
        return _SALOMERuntime.OutputStudyPort_typeName(self)

    def getDataFromStudy(self):
        r"""getDataFromStudy(OutputStudyPort self)"""
        return _SALOMERuntime.OutputStudyPort_getDataFromStudy(self)
    __swig_destroy__ = _SALOMERuntime.delete_OutputStudyPort

# Register OutputStudyPort in _SALOMERuntime:
_SALOMERuntime.OutputStudyPort_swigregister(OutputStudyPort)

class InputStudyPort(InputXmlPort):
    r"""Proxy of C++ YACS::ENGINE::InputStudyPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InputStudyPort self, std::string const & name, Node node, TypeCode type) -> InputStudyPort
        __init__(InputStudyPort self, InputStudyPort other, Node newHelder) -> InputStudyPort
        """
        _SALOMERuntime.InputStudyPort_swiginit(self, _SALOMERuntime.new_InputStudyPort(*args))

    def clone(self, newHelder):
        r"""clone(InputStudyPort self, Node newHelder) -> InputPort"""
        return _SALOMERuntime.InputStudyPort_clone(self, newHelder)

    def setData(self, data):
        r"""setData(InputStudyPort self, std::string const & data)"""
        return _SALOMERuntime.InputStudyPort_setData(self, data)

    def getData(self):
        r"""getData(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_getData(self)

    def getIOR(self):
        r"""getIOR(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_getIOR(self)

    def splitXML(self, s):
        r"""splitXML(InputStudyPort self, std::string const & s) -> std::string"""
        return _SALOMERuntime.InputStudyPort_splitXML(self, s)

    def dump(self):
        r"""dump(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_dump(self)

    def getPyObj(self):
        r"""getPyObj(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_getPyObj(self)

    def getAsString(self):
        r"""getAsString(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_getAsString(self)

    def typeName(self):
        r"""typeName(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_typeName(self)

    def putDataInStudy(self, aBuilder):
        r"""putDataInStudy(InputStudyPort self, SALOMEDS::StudyBuilder_var aBuilder)"""
        return _SALOMERuntime.InputStudyPort_putDataInStudy(self, aBuilder)
    __swig_destroy__ = _SALOMERuntime.delete_InputStudyPort

# Register InputStudyPort in _SALOMERuntime:
_SALOMERuntime.InputStudyPort_swigregister(InputStudyPort)

class SalomeOptimizerLoop(salome.yacs.pilot.OptimizerLoop):
    r"""Proxy of C++ YACS::ENGINE::SalomeOptimizerLoop class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_SalomeOptimizerLoop

    def typeName(self):
        r"""typeName(SalomeOptimizerLoop self) -> std::string"""
        return _SALOMERuntime.SalomeOptimizerLoop_typeName(self)

# Register SalomeOptimizerLoop in _SALOMERuntime:
_SALOMERuntime.SalomeOptimizerLoop_swigregister(SalomeOptimizerLoop)

class DistributedPythonNode(salome.yacs.pilot.ServerNode):
    r"""Proxy of C++ YACS::ENGINE::DistributedPythonNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_DistributedPythonNode

    def execute(self):
        r"""execute(DistributedPythonNode self)"""
        return _SALOMERuntime.DistributedPythonNode_execute(self)

    def load(self):
        r"""load(DistributedPythonNode self)"""
        return _SALOMERuntime.DistributedPythonNode_load(self)

    def getEffectiveKindOfServer(self):
        r"""getEffectiveKindOfServer(DistributedPythonNode self) -> std::string"""
        return _SALOMERuntime.DistributedPythonNode_getEffectiveKindOfServer(self)

    def getKind(self):
        r"""getKind(DistributedPythonNode self) -> std::string"""
        return _SALOMERuntime.DistributedPythonNode_getKind(self)

    def createNode(self, name):
        r"""createNode(DistributedPythonNode self, std::string const & name) -> ServerNode"""
        return _SALOMERuntime.DistributedPythonNode_createNode(self, name)

    def typeName(self):
        r"""typeName(DistributedPythonNode self) -> std::string"""
        return _SALOMERuntime.DistributedPythonNode_typeName(self)

# Register DistributedPythonNode in _SALOMERuntime:
_SALOMERuntime.DistributedPythonNode_swigregister(DistributedPythonNode)
DistributedPythonNode.KIND = _SALOMERuntime.cvar.DistributedPythonNode_KIND
DistributedPythonNode.IMPL_NAME = _SALOMERuntime.cvar.DistributedPythonNode_IMPL_NAME
DistributedPythonNode.SALOME_CONTAINER_METHOD_IDL = _SALOMERuntime.cvar.DistributedPythonNode_SALOME_CONTAINER_METHOD_IDL


def schemaSaveState(proc, _exec, xmlSchemaFile):
    r"""schemaSaveState(Proc proc, Executor _exec, std::string const & xmlSchemaFile)"""
    return _SALOMERuntime.schemaSaveState(proc, _exec, xmlSchemaFile)

def schemaSaveStateUnsafe(proc, xmlSchemaFile):
    r"""schemaSaveStateUnsafe(Proc proc, std::string const & xmlSchemaFile)"""
    return _SALOMERuntime.schemaSaveStateUnsafe(proc, xmlSchemaFile)

def VisitorSaveSalomeSchemaUnsafe(proc, xmlSchema):
    r"""VisitorSaveSalomeSchemaUnsafe(Proc proc, std::string const & xmlSchema)"""
    return _SALOMERuntime.VisitorSaveSalomeSchemaUnsafe(proc, xmlSchema)
class OptimizerAlgSync(salome.yacs.pilot.OptimizerAlgBase):
    r"""Proxy of C++ YACS::ENGINE::PyOptimizerAlgBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_OptimizerAlgSync

    def getTCForInProxy(self):
        r"""getTCForInProxy(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForInProxy(self)

    def getTCForOutProxy(self):
        r"""getTCForOutProxy(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForOutProxy(self)

    def getTCForAlgoInitProxy(self):
        r"""getTCForAlgoInitProxy(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForAlgoInitProxy(self)

    def getTCForAlgoResultProxy(self):
        r"""getTCForAlgoResultProxy(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForAlgoResultProxy(self)

    def initializeProxy(self, input):
        r"""initializeProxy(OptimizerAlgSync self, Any input)"""
        return _SALOMERuntime.OptimizerAlgSync_initializeProxy(self, input)

    def startProxy(self):
        r"""startProxy(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_startProxy(self)

    def takeDecisionProxy(self):
        r"""takeDecisionProxy(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_takeDecisionProxy(self)

    def finishProxy(self):
        r"""finishProxy(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_finishProxy(self)

    def getAlgoResultProxy(self):
        r"""getAlgoResultProxy(OptimizerAlgSync self) -> Any"""
        return _SALOMERuntime.OptimizerAlgSync_getAlgoResultProxy(self)

    def __init__(self, pool):
        r"""__init__(OptimizerAlgSync self, Pool pool) -> OptimizerAlgSync"""
        if self.__class__ == OptimizerAlgSync:
            _self = None
        else:
            _self = self
        _SALOMERuntime.OptimizerAlgSync_swiginit(self, _SALOMERuntime.new_OptimizerAlgSync(_self, pool))
    def __disown__(self):
        self.this.disown()
        _SALOMERuntime.disown_OptimizerAlgSync(self)
        return weakref.proxy(self)

    def getTCForIn(self):
        r"""getTCForIn(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForIn(self)

    def getTCForOut(self):
        r"""getTCForOut(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForOut(self)

    def getTCForAlgoInit(self):
        r"""getTCForAlgoInit(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForAlgoInit(self)

    def getTCForAlgoResult(self):
        r"""getTCForAlgoResult(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForAlgoResult(self)

    def initialize(self, input):
        r"""initialize(OptimizerAlgSync self, Any input)"""
        return _SALOMERuntime.OptimizerAlgSync_initialize(self, input)

    def start(self):
        r"""start(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_start(self)

    def takeDecision(self):
        r"""takeDecision(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_takeDecision(self)

    def finish(self):
        r"""finish(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_finish(self)

    def getAlgoResult(self):
        r"""getAlgoResult(OptimizerAlgSync self) -> Any"""
        return _SALOMERuntime.OptimizerAlgSync_getAlgoResult(self)

# Register OptimizerAlgSync in _SALOMERuntime:
_SALOMERuntime.OptimizerAlgSync_swigregister(OptimizerAlgSync)

class OptimizerAlgASync(OptimizerAlgSync, salome.yacs.pilot.AlternateThreadPT):
    r"""Proxy of C++ YACS::ENGINE::PyOptimizerAlgASync class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_OptimizerAlgASync

    def startProxy(self):
        r"""startProxy(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_startProxy(self)

    def takeDecisionProxy(self):
        r"""takeDecisionProxy(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_takeDecisionProxy(self)

    def finishProxy(self):
        r"""finishProxy(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_finishProxy(self)

    def signalMasterAndWait(self):
        r"""signalMasterAndWait(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_signalMasterAndWait(self)

    def __init__(self, pool):
        r"""__init__(OptimizerAlgASync self, Pool pool) -> OptimizerAlgASync"""
        if self.__class__ == OptimizerAlgASync:
            _self = None
        else:
            _self = self
        _SALOMERuntime.OptimizerAlgASync_swiginit(self, _SALOMERuntime.new_OptimizerAlgASync(_self, pool))

    def startToTakeDecision(self):
        r"""startToTakeDecision(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_startToTakeDecision(self)
    def __disown__(self):
        self.this.disown()
        _SALOMERuntime.disown_OptimizerAlgASync(self)
        return weakref.proxy(self)

    def getTCForIn(self):
        r"""getTCForIn(OptimizerAlgASync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgASync_getTCForIn(self)

    def getTCForOut(self):
        r"""getTCForOut(OptimizerAlgASync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgASync_getTCForOut(self)

    def getTCForAlgoInit(self):
        r"""getTCForAlgoInit(OptimizerAlgASync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgASync_getTCForAlgoInit(self)

    def getTCForAlgoResult(self):
        r"""getTCForAlgoResult(OptimizerAlgASync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgASync_getTCForAlgoResult(self)

    def initialize(self, input):
        r"""initialize(OptimizerAlgASync self, Any input)"""
        return _SALOMERuntime.OptimizerAlgASync_initialize(self, input)

    def finish(self):
        r"""finish(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_finish(self)

    def getAlgoResult(self):
        r"""getAlgoResult(OptimizerAlgASync self) -> Any"""
        return _SALOMERuntime.OptimizerAlgASync_getAlgoResult(self)

# Register OptimizerAlgASync in _SALOMERuntime:
_SALOMERuntime.OptimizerAlgASync_swigregister(OptimizerAlgASync)

class ThreadDumpState(object):
    r"""Proxy of C++ YACS::ENGINE::ThreadDumpState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, proc, nbSeconds, dumpFile, lockFile):
        r"""__init__(ThreadDumpState self, Proc proc, int nbSeconds, std::string const & dumpFile, std::string const & lockFile) -> ThreadDumpState"""
        _SALOMERuntime.ThreadDumpState_swiginit(self, _SALOMERuntime.new_ThreadDumpState(proc, nbSeconds, dumpFile, lockFile))
    __swig_destroy__ = _SALOMERuntime.delete_ThreadDumpState

    def start(self):
        r"""start(ThreadDumpState self)"""
        return _SALOMERuntime.ThreadDumpState_start(self)

    def join(self):
        r"""join(ThreadDumpState self)"""
        return _SALOMERuntime.ThreadDumpState_join(self)

# Register ThreadDumpState in _SALOMERuntime:
_SALOMERuntime.ThreadDumpState_swigregister(ThreadDumpState)




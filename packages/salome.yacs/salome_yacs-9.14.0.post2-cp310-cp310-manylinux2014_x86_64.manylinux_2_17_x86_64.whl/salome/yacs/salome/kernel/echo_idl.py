# Python stubs generated by omniidl from /tmp/yacs/Demo/echo.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "eo"
#
__name__ = "salome.kernel.eo"
_0_eo = omniORB.openModule("salome.kernel.eo", r"/tmp/yacs/Demo/echo.idl")
_0_eo__POA = omniORB.openModule("salome.kernel.eo__POA", r"/tmp/yacs/Demo/echo.idl")


# enum ExceptionType
_0_eo.COMM = omniORB.EnumItem("COMM", 0)
_0_eo.BAD_PARAM = omniORB.EnumItem("BAD_PARAM", 1)
_0_eo.INTERNAL_ERROR = omniORB.EnumItem("INTERNAL_ERROR", 2)
_0_eo.ExceptionType = omniORB.Enum("IDL:eo/ExceptionType:1.0", (_0_eo.COMM, _0_eo.BAD_PARAM, _0_eo.INTERNAL_ERROR,))

_0_eo._d_ExceptionType  = (omniORB.tcInternal.tv_enum, _0_eo.ExceptionType._NP_RepositoryId, "ExceptionType", _0_eo.ExceptionType._items)
_0_eo._tc_ExceptionType = omniORB.tcInternal.createTypeCode(_0_eo._d_ExceptionType)
omniORB.registerType(_0_eo.ExceptionType._NP_RepositoryId, _0_eo._d_ExceptionType, _0_eo._tc_ExceptionType)

# struct ExceptionStruct
_0_eo.ExceptionStruct = omniORB.newEmptyClass()
class ExceptionStruct (omniORB.StructBase):
    _NP_RepositoryId = "IDL:eo/ExceptionStruct:1.0"

    def __init__(self, type, text, sourceFile, lineNumber):
        self.type = type
        self.text = text
        self.sourceFile = sourceFile
        self.lineNumber = lineNumber

_0_eo.ExceptionStruct = ExceptionStruct
_0_eo._d_ExceptionStruct  = (omniORB.tcInternal.tv_struct, ExceptionStruct, ExceptionStruct._NP_RepositoryId, "ExceptionStruct", "type", omniORB.typeMapping["IDL:eo/ExceptionType:1.0"], "text", (omniORB.tcInternal.tv_string,0), "sourceFile", (omniORB.tcInternal.tv_string,0), "lineNumber", omniORB.tcInternal.tv_ulong)
_0_eo._tc_ExceptionStruct = omniORB.tcInternal.createTypeCode(_0_eo._d_ExceptionStruct)
omniORB.registerType(ExceptionStruct._NP_RepositoryId, _0_eo._d_ExceptionStruct, _0_eo._tc_ExceptionStruct)
del ExceptionStruct

# exception SALOME_Exception
_0_eo.SALOME_Exception = omniORB.newEmptyClass()
class SALOME_Exception (CORBA.UserException):
    _NP_RepositoryId = "IDL:eo/SALOME_Exception:1.0"

    def __init__(self, details):
        CORBA.UserException.__init__(self, details)
        self.details = details

_0_eo.SALOME_Exception = SALOME_Exception
_0_eo._d_SALOME_Exception  = (omniORB.tcInternal.tv_except, SALOME_Exception, SALOME_Exception._NP_RepositoryId, "SALOME_Exception", "details", omniORB.typeMapping["IDL:eo/ExceptionStruct:1.0"])
_0_eo._tc_SALOME_Exception = omniORB.tcInternal.createTypeCode(_0_eo._d_SALOME_Exception)
omniORB.registerType(SALOME_Exception._NP_RepositoryId, _0_eo._d_SALOME_Exception, _0_eo._tc_SALOME_Exception)
del SALOME_Exception

# typedef ... DoubleVec
class DoubleVec:
    _NP_RepositoryId = "IDL:eo/DoubleVec:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_eo.DoubleVec = DoubleVec
_0_eo._d_DoubleVec  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
_0_eo._ad_DoubleVec = (omniORB.tcInternal.tv_alias, DoubleVec._NP_RepositoryId, "DoubleVec", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
_0_eo._tc_DoubleVec = omniORB.tcInternal.createTypeCode(_0_eo._ad_DoubleVec)
omniORB.registerType(DoubleVec._NP_RepositoryId, _0_eo._ad_DoubleVec, _0_eo._tc_DoubleVec)
del DoubleVec

# typedef ... IntVec
class IntVec:
    _NP_RepositoryId = "IDL:eo/IntVec:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_eo.IntVec = IntVec
_0_eo._d_IntVec  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0)
_0_eo._ad_IntVec = (omniORB.tcInternal.tv_alias, IntVec._NP_RepositoryId, "IntVec", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0))
_0_eo._tc_IntVec = omniORB.tcInternal.createTypeCode(_0_eo._ad_IntVec)
omniORB.registerType(IntVec._NP_RepositoryId, _0_eo._ad_IntVec, _0_eo._tc_IntVec)
del IntVec

# typedef ... StrVec
class StrVec:
    _NP_RepositoryId = "IDL:eo/StrVec:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_eo.StrVec = StrVec
_0_eo._d_StrVec  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0_eo._ad_StrVec = (omniORB.tcInternal.tv_alias, StrVec._NP_RepositoryId, "StrVec", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_eo._tc_StrVec = omniORB.tcInternal.createTypeCode(_0_eo._ad_StrVec)
omniORB.registerType(StrVec._NP_RepositoryId, _0_eo._ad_StrVec, _0_eo._tc_StrVec)
del StrVec

# typedef ... ObjectVec
class ObjectVec:
    _NP_RepositoryId = "IDL:eo/ObjectVec:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_eo.ObjectVec = ObjectVec
_0_eo._d_ObjectVec  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], 0)
_0_eo._ad_ObjectVec = (omniORB.tcInternal.tv_alias, ObjectVec._NP_RepositoryId, "ObjectVec", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], 0))
_0_eo._tc_ObjectVec = omniORB.tcInternal.createTypeCode(_0_eo._ad_ObjectVec)
omniORB.registerType(ObjectVec._NP_RepositoryId, _0_eo._ad_ObjectVec, _0_eo._tc_ObjectVec)
del ObjectVec

# typedef ... DoubleVecVec
class DoubleVecVec:
    _NP_RepositoryId = "IDL:eo/DoubleVecVec:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_eo.DoubleVecVec = DoubleVecVec
_0_eo._d_DoubleVecVec  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:eo/DoubleVec:1.0"], 0)
_0_eo._ad_DoubleVecVec = (omniORB.tcInternal.tv_alias, DoubleVecVec._NP_RepositoryId, "DoubleVecVec", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:eo/DoubleVec:1.0"], 0))
_0_eo._tc_DoubleVecVec = omniORB.tcInternal.createTypeCode(_0_eo._ad_DoubleVecVec)
omniORB.registerType(DoubleVecVec._NP_RepositoryId, _0_eo._ad_DoubleVecVec, _0_eo._tc_DoubleVecVec)
del DoubleVecVec

# typedef ... ObjectVecVec
class ObjectVecVec:
    _NP_RepositoryId = "IDL:eo/ObjectVecVec:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_eo.ObjectVecVec = ObjectVecVec
_0_eo._d_ObjectVecVec  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:eo/ObjectVec:1.0"], 0)
_0_eo._ad_ObjectVecVec = (omniORB.tcInternal.tv_alias, ObjectVecVec._NP_RepositoryId, "ObjectVecVec", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:eo/ObjectVec:1.0"], 0))
_0_eo._tc_ObjectVecVec = omniORB.tcInternal.createTypeCode(_0_eo._ad_ObjectVecVec)
omniORB.registerType(ObjectVecVec._NP_RepositoryId, _0_eo._ad_ObjectVecVec, _0_eo._tc_ObjectVecVec)
del ObjectVecVec

# interface Obj
_0_eo._d_Obj = (omniORB.tcInternal.tv_objref, "IDL:eo/Obj:1.0", "Obj")
omniORB.typeMapping["IDL:eo/Obj:1.0"] = _0_eo._d_Obj
_0_eo.Obj = omniORB.newEmptyClass()
class Obj :
    _NP_RepositoryId = _0_eo._d_Obj[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_eo.Obj = Obj
_0_eo._tc_Obj = omniORB.tcInternal.createTypeCode(_0_eo._d_Obj)
omniORB.registerType(Obj._NP_RepositoryId, _0_eo._d_Obj, _0_eo._tc_Obj)

# Obj operations and attributes
Obj._d_echoLong = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)

# Obj object reference
class _objref_Obj (CORBA.Object):
    _NP_RepositoryId = Obj._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def echoLong(self, *args):
        return self._obj.invoke("echoLong", _0_eo.Obj._d_echoLong, args)

omniORB.registerObjref(Obj._NP_RepositoryId, _objref_Obj)
_0_eo._objref_Obj = _objref_Obj
del Obj, _objref_Obj

# Obj skeleton
__name__ = "salome.kernel.eo__POA"
class Obj (PortableServer.Servant):
    _NP_RepositoryId = _0_eo.Obj._NP_RepositoryId


    _omni_op_d = {"echoLong": _0_eo.Obj._d_echoLong}

Obj._omni_skeleton = Obj
_0_eo__POA.Obj = Obj
omniORB.registerSkeleton(Obj._NP_RepositoryId, Obj)
del Obj
__name__ = "salome.kernel.eo"

# interface C
_0_eo._d_C = (omniORB.tcInternal.tv_objref, "IDL:eo/C:1.0", "C")
omniORB.typeMapping["IDL:eo/C:1.0"] = _0_eo._d_C
_0_eo.C = omniORB.newEmptyClass()
class C (_0_eo.Obj):
    _NP_RepositoryId = _0_eo._d_C[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_eo.C = C
_0_eo._tc_C = omniORB.tcInternal.createTypeCode(_0_eo._d_C)
omniORB.registerType(C._NP_RepositoryId, _0_eo._d_C, _0_eo._tc_C)

# C object reference
class _objref_C (_0_eo._objref_Obj):
    _NP_RepositoryId = C._NP_RepositoryId

    def __init__(self, obj):
        _0_eo._objref_Obj.__init__(self, obj)

omniORB.registerObjref(C._NP_RepositoryId, _objref_C)
_0_eo._objref_C = _objref_C
del C, _objref_C

# C skeleton
__name__ = "salome.kernel.eo__POA"
class C (_0_eo__POA.Obj):
    _NP_RepositoryId = _0_eo.C._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_eo__POA.Obj._omni_op_d)

C._omni_skeleton = C
_0_eo__POA.C = C
omniORB.registerSkeleton(C._NP_RepositoryId, C)
del C
__name__ = "salome.kernel.eo"

# interface D
_0_eo._d_D = (omniORB.tcInternal.tv_objref, "IDL:eo/D:1.0", "D")
omniORB.typeMapping["IDL:eo/D:1.0"] = _0_eo._d_D
_0_eo.D = omniORB.newEmptyClass()
class D :
    _NP_RepositoryId = _0_eo._d_D[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_eo.D = D
_0_eo._tc_D = omniORB.tcInternal.createTypeCode(_0_eo._d_D)
omniORB.registerType(D._NP_RepositoryId, _0_eo._d_D, _0_eo._tc_D)

# D operations and attributes
D._d_echoLong2 = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)

# D object reference
class _objref_D (CORBA.Object):
    _NP_RepositoryId = D._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def echoLong2(self, *args):
        return self._obj.invoke("echoLong2", _0_eo.D._d_echoLong2, args)

omniORB.registerObjref(D._NP_RepositoryId, _objref_D)
_0_eo._objref_D = _objref_D
del D, _objref_D

# D skeleton
__name__ = "salome.kernel.eo__POA"
class D (PortableServer.Servant):
    _NP_RepositoryId = _0_eo.D._NP_RepositoryId


    _omni_op_d = {"echoLong2": _0_eo.D._d_echoLong2}

D._omni_skeleton = D
_0_eo__POA.D = D
omniORB.registerSkeleton(D._NP_RepositoryId, D)
del D
__name__ = "salome.kernel.eo"

# interface E
_0_eo._d_E = (omniORB.tcInternal.tv_objref, "IDL:eo/E:1.0", "E")
omniORB.typeMapping["IDL:eo/E:1.0"] = _0_eo._d_E
_0_eo.E = omniORB.newEmptyClass()
class E (_0_eo.C, _0_eo.D):
    _NP_RepositoryId = _0_eo._d_E[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_eo.E = E
_0_eo._tc_E = omniORB.tcInternal.createTypeCode(_0_eo._d_E)
omniORB.registerType(E._NP_RepositoryId, _0_eo._d_E, _0_eo._tc_E)

# E object reference
class _objref_E (_0_eo._objref_C, _0_eo._objref_D):
    _NP_RepositoryId = E._NP_RepositoryId

    def __init__(self, obj):
        _0_eo._objref_C.__init__(self, obj)
        _0_eo._objref_D.__init__(self, obj)

omniORB.registerObjref(E._NP_RepositoryId, _objref_E)
_0_eo._objref_E = _objref_E
del E, _objref_E

# E skeleton
__name__ = "salome.kernel.eo__POA"
class E (_0_eo__POA.C, _0_eo__POA.D):
    _NP_RepositoryId = _0_eo.E._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_eo__POA.C._omni_op_d)
    _omni_op_d.update(_0_eo__POA.D._omni_op_d)

E._omni_skeleton = E
_0_eo__POA.E = E
omniORB.registerSkeleton(E._NP_RepositoryId, E)
del E
__name__ = "salome.kernel.eo"

# typedef ... ObjVec
class ObjVec:
    _NP_RepositoryId = "IDL:eo/ObjVec:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_eo.ObjVec = ObjVec
_0_eo._d_ObjVec  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:eo/Obj:1.0"], 0)
_0_eo._ad_ObjVec = (omniORB.tcInternal.tv_alias, ObjVec._NP_RepositoryId, "ObjVec", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:eo/Obj:1.0"], 0))
_0_eo._tc_ObjVec = omniORB.tcInternal.createTypeCode(_0_eo._ad_ObjVec)
omniORB.registerType(ObjVec._NP_RepositoryId, _0_eo._ad_ObjVec, _0_eo._tc_ObjVec)
del ObjVec

# interface Echo
_0_eo._d_Echo = (omniORB.tcInternal.tv_objref, "IDL:eo/Echo:1.0", "Echo")
omniORB.typeMapping["IDL:eo/Echo:1.0"] = _0_eo._d_Echo
_0_eo.Echo = omniORB.newEmptyClass()
class Echo :
    _NP_RepositoryId = _0_eo._d_Echo[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_eo.Echo = Echo
_0_eo._tc_Echo = omniORB.tcInternal.createTypeCode(_0_eo._d_Echo)
omniORB.registerType(Echo._NP_RepositoryId, _0_eo._d_Echo, _0_eo._tc_Echo)

# Echo operations and attributes
Echo._d_echoString = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Echo._d_echoLong = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), {_0_eo.SALOME_Exception._NP_RepositoryId: _0_eo._d_SALOME_Exception})
Echo._d_echoDouble = ((omniORB.tcInternal.tv_double, ), (omniORB.tcInternal.tv_double, ), None)
Echo._d_echoDoubleVec = ((omniORB.typeMapping["IDL:eo/DoubleVec:1.0"], ), (omniORB.typeMapping["IDL:eo/DoubleVec:1.0"], ), None)
Echo._d_echoDoubleVecVec = ((omniORB.typeMapping["IDL:eo/DoubleVecVec:1.0"], ), (omniORB.typeMapping["IDL:eo/DoubleVecVec:1.0"], ), None)
Echo._d_echoIntVec = ((omniORB.typeMapping["IDL:eo/IntVec:1.0"], ), (omniORB.typeMapping["IDL:eo/IntVec:1.0"], ), None)
Echo._d_echoStrVec = ((omniORB.typeMapping["IDL:eo/StrVec:1.0"], ), (omniORB.typeMapping["IDL:eo/StrVec:1.0"], ), None)
Echo._d_echoObj2 = ((omniORB.typeMapping["IDL:eo/Obj:1.0"], ), (omniORB.typeMapping["IDL:eo/Obj:1.0"], ), None)
Echo._d_echoD = ((omniORB.typeMapping["IDL:eo/D:1.0"], ), (omniORB.typeMapping["IDL:eo/D:1.0"], ), None)
Echo._d_echoC = ((omniORB.typeMapping["IDL:eo/C:1.0"], ), (omniORB.typeMapping["IDL:eo/C:1.0"], ), None)
Echo._d_echoObjectVec = ((omniORB.typeMapping["IDL:eo/ObjectVec:1.0"], ), (omniORB.typeMapping["IDL:eo/ObjectVec:1.0"], ), None)
Echo._d_echoObjectVecVec = ((omniORB.typeMapping["IDL:eo/ObjectVecVec:1.0"], ), (omniORB.typeMapping["IDL:eo/ObjectVecVec:1.0"], ), None)
Echo._d_echoObj = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:eo/Obj:1.0"], omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:eo/Obj:1.0"], omniORB.typeMapping["IDL:eo/Obj:1.0"]), None)
Echo._d_createObj = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:eo/Obj:1.0"], ), None)
Echo._d_createC = ((), (omniORB.typeMapping["IDL:eo/C:1.0"], ), None)
Echo._d_echoAll = ((omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:eo/Obj:1.0"]), (omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:eo/Obj:1.0"]), None)

# Echo object reference
class _objref_Echo (CORBA.Object):
    _NP_RepositoryId = Echo._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def echoString(self, *args):
        return self._obj.invoke("echoString", _0_eo.Echo._d_echoString, args)

    def echoLong(self, *args):
        return self._obj.invoke("echoLong", _0_eo.Echo._d_echoLong, args)

    def echoDouble(self, *args):
        return self._obj.invoke("echoDouble", _0_eo.Echo._d_echoDouble, args)

    def echoDoubleVec(self, *args):
        return self._obj.invoke("echoDoubleVec", _0_eo.Echo._d_echoDoubleVec, args)

    def echoDoubleVecVec(self, *args):
        return self._obj.invoke("echoDoubleVecVec", _0_eo.Echo._d_echoDoubleVecVec, args)

    def echoIntVec(self, *args):
        return self._obj.invoke("echoIntVec", _0_eo.Echo._d_echoIntVec, args)

    def echoStrVec(self, *args):
        return self._obj.invoke("echoStrVec", _0_eo.Echo._d_echoStrVec, args)

    def echoObj2(self, *args):
        return self._obj.invoke("echoObj2", _0_eo.Echo._d_echoObj2, args)

    def echoD(self, *args):
        return self._obj.invoke("echoD", _0_eo.Echo._d_echoD, args)

    def echoC(self, *args):
        return self._obj.invoke("echoC", _0_eo.Echo._d_echoC, args)

    def echoObjectVec(self, *args):
        return self._obj.invoke("echoObjectVec", _0_eo.Echo._d_echoObjectVec, args)

    def echoObjectVecVec(self, *args):
        return self._obj.invoke("echoObjectVecVec", _0_eo.Echo._d_echoObjectVecVec, args)

    def echoObj(self, *args):
        return self._obj.invoke("echoObj", _0_eo.Echo._d_echoObj, args)

    def createObj(self, *args):
        return self._obj.invoke("createObj", _0_eo.Echo._d_createObj, args)

    def createC(self, *args):
        return self._obj.invoke("createC", _0_eo.Echo._d_createC, args)

    def echoAll(self, *args):
        return self._obj.invoke("echoAll", _0_eo.Echo._d_echoAll, args)

omniORB.registerObjref(Echo._NP_RepositoryId, _objref_Echo)
_0_eo._objref_Echo = _objref_Echo
del Echo, _objref_Echo

# Echo skeleton
__name__ = "salome.kernel.eo__POA"
class Echo (PortableServer.Servant):
    _NP_RepositoryId = _0_eo.Echo._NP_RepositoryId


    _omni_op_d = {"echoString": _0_eo.Echo._d_echoString, "echoLong": _0_eo.Echo._d_echoLong, "echoDouble": _0_eo.Echo._d_echoDouble, "echoDoubleVec": _0_eo.Echo._d_echoDoubleVec, "echoDoubleVecVec": _0_eo.Echo._d_echoDoubleVecVec, "echoIntVec": _0_eo.Echo._d_echoIntVec, "echoStrVec": _0_eo.Echo._d_echoStrVec, "echoObj2": _0_eo.Echo._d_echoObj2, "echoD": _0_eo.Echo._d_echoD, "echoC": _0_eo.Echo._d_echoC, "echoObjectVec": _0_eo.Echo._d_echoObjectVec, "echoObjectVecVec": _0_eo.Echo._d_echoObjectVecVec, "echoObj": _0_eo.Echo._d_echoObj, "createObj": _0_eo.Echo._d_createObj, "createC": _0_eo.Echo._d_createC, "echoAll": _0_eo.Echo._d_echoAll}

Echo._omni_skeleton = Echo
_0_eo__POA.Echo = Echo
omniORB.registerSkeleton(Echo._NP_RepositoryId, Echo)
del Echo
__name__ = "salome.kernel.eo"

# interface SubEcho
_0_eo._d_SubEcho = (omniORB.tcInternal.tv_objref, "IDL:eo/SubEcho:1.0", "SubEcho")
omniORB.typeMapping["IDL:eo/SubEcho:1.0"] = _0_eo._d_SubEcho
_0_eo.SubEcho = omniORB.newEmptyClass()
class SubEcho (_0_eo.Echo):
    _NP_RepositoryId = _0_eo._d_SubEcho[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_eo.SubEcho = SubEcho
_0_eo._tc_SubEcho = omniORB.tcInternal.createTypeCode(_0_eo._d_SubEcho)
omniORB.registerType(SubEcho._NP_RepositoryId, _0_eo._d_SubEcho, _0_eo._tc_SubEcho)

# SubEcho object reference
class _objref_SubEcho (_0_eo._objref_Echo):
    _NP_RepositoryId = SubEcho._NP_RepositoryId

    def __init__(self, obj):
        _0_eo._objref_Echo.__init__(self, obj)

omniORB.registerObjref(SubEcho._NP_RepositoryId, _objref_SubEcho)
_0_eo._objref_SubEcho = _objref_SubEcho
del SubEcho, _objref_SubEcho

# SubEcho skeleton
__name__ = "salome.kernel.eo__POA"
class SubEcho (_0_eo__POA.Echo):
    _NP_RepositoryId = _0_eo.SubEcho._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_eo__POA.Echo._omni_op_d)

SubEcho._omni_skeleton = SubEcho
_0_eo__POA.SubEcho = SubEcho
omniORB.registerSkeleton(SubEcho._NP_RepositoryId, SubEcho)
del SubEcho
__name__ = "salome.kernel.eo"

#
# End of module "eo"
#
__name__ = "salome.kernel.echo_idl"

_exported_modules = ( "salome.kernel.eo", )

# The end.

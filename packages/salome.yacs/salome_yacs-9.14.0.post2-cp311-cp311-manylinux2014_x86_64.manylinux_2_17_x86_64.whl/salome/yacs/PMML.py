# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PMML
else:
    import _PMML

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PMML.delete_SwigPyIterator

    def value(self):
        return _PMML.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PMML.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PMML.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PMML.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PMML.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PMML.SwigPyIterator_copy(self)

    def next(self):
        return _PMML.SwigPyIterator_next(self)

    def __next__(self):
        return _PMML.SwigPyIterator___next__(self)

    def previous(self):
        return _PMML.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PMML.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PMML.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PMML.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PMML.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PMML.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PMML.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PMML.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PMML:
_PMML.SwigPyIterator_swigregister(SwigPyIterator)

class ivec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PMML.ivec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PMML.ivec___nonzero__(self)

    def __bool__(self):
        return _PMML.ivec___bool__(self)

    def __len__(self):
        return _PMML.ivec___len__(self)

    def __getslice__(self, i, j):
        return _PMML.ivec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PMML.ivec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PMML.ivec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PMML.ivec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PMML.ivec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PMML.ivec___setitem__(self, *args)

    def pop(self):
        return _PMML.ivec_pop(self)

    def append(self, x):
        return _PMML.ivec_append(self, x)

    def empty(self):
        return _PMML.ivec_empty(self)

    def size(self):
        return _PMML.ivec_size(self)

    def swap(self, v):
        return _PMML.ivec_swap(self, v)

    def begin(self):
        return _PMML.ivec_begin(self)

    def end(self):
        return _PMML.ivec_end(self)

    def rbegin(self):
        return _PMML.ivec_rbegin(self)

    def rend(self):
        return _PMML.ivec_rend(self)

    def clear(self):
        return _PMML.ivec_clear(self)

    def get_allocator(self):
        return _PMML.ivec_get_allocator(self)

    def pop_back(self):
        return _PMML.ivec_pop_back(self)

    def erase(self, *args):
        return _PMML.ivec_erase(self, *args)

    def __init__(self, *args):
        _PMML.ivec_swiginit(self, _PMML.new_ivec(*args))

    def push_back(self, x):
        return _PMML.ivec_push_back(self, x)

    def front(self):
        return _PMML.ivec_front(self)

    def back(self):
        return _PMML.ivec_back(self)

    def assign(self, n, x):
        return _PMML.ivec_assign(self, n, x)

    def resize(self, *args):
        return _PMML.ivec_resize(self, *args)

    def insert(self, *args):
        return _PMML.ivec_insert(self, *args)

    def reserve(self, n):
        return _PMML.ivec_reserve(self, n)

    def capacity(self):
        return _PMML.ivec_capacity(self)
    __swig_destroy__ = _PMML.delete_ivec

# Register ivec in _PMML:
_PMML.ivec_swigregister(ivec)

class dvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PMML.dvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PMML.dvec___nonzero__(self)

    def __bool__(self):
        return _PMML.dvec___bool__(self)

    def __len__(self):
        return _PMML.dvec___len__(self)

    def __getslice__(self, i, j):
        return _PMML.dvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PMML.dvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PMML.dvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PMML.dvec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PMML.dvec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PMML.dvec___setitem__(self, *args)

    def pop(self):
        return _PMML.dvec_pop(self)

    def append(self, x):
        return _PMML.dvec_append(self, x)

    def empty(self):
        return _PMML.dvec_empty(self)

    def size(self):
        return _PMML.dvec_size(self)

    def swap(self, v):
        return _PMML.dvec_swap(self, v)

    def begin(self):
        return _PMML.dvec_begin(self)

    def end(self):
        return _PMML.dvec_end(self)

    def rbegin(self):
        return _PMML.dvec_rbegin(self)

    def rend(self):
        return _PMML.dvec_rend(self)

    def clear(self):
        return _PMML.dvec_clear(self)

    def get_allocator(self):
        return _PMML.dvec_get_allocator(self)

    def pop_back(self):
        return _PMML.dvec_pop_back(self)

    def erase(self, *args):
        return _PMML.dvec_erase(self, *args)

    def __init__(self, *args):
        _PMML.dvec_swiginit(self, _PMML.new_dvec(*args))

    def push_back(self, x):
        return _PMML.dvec_push_back(self, x)

    def front(self):
        return _PMML.dvec_front(self)

    def back(self):
        return _PMML.dvec_back(self)

    def assign(self, n, x):
        return _PMML.dvec_assign(self, n, x)

    def resize(self, *args):
        return _PMML.dvec_resize(self, *args)

    def insert(self, *args):
        return _PMML.dvec_insert(self, *args)

    def reserve(self, n):
        return _PMML.dvec_reserve(self, n)

    def capacity(self):
        return _PMML.dvec_capacity(self)
    __swig_destroy__ = _PMML.delete_dvec

# Register dvec in _PMML:
_PMML.dvec_swigregister(dvec)

class svec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PMML.svec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PMML.svec___nonzero__(self)

    def __bool__(self):
        return _PMML.svec___bool__(self)

    def __len__(self):
        return _PMML.svec___len__(self)

    def __getslice__(self, i, j):
        return _PMML.svec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PMML.svec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PMML.svec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PMML.svec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PMML.svec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PMML.svec___setitem__(self, *args)

    def pop(self):
        return _PMML.svec_pop(self)

    def append(self, x):
        return _PMML.svec_append(self, x)

    def empty(self):
        return _PMML.svec_empty(self)

    def size(self):
        return _PMML.svec_size(self)

    def swap(self, v):
        return _PMML.svec_swap(self, v)

    def begin(self):
        return _PMML.svec_begin(self)

    def end(self):
        return _PMML.svec_end(self)

    def rbegin(self):
        return _PMML.svec_rbegin(self)

    def rend(self):
        return _PMML.svec_rend(self)

    def clear(self):
        return _PMML.svec_clear(self)

    def get_allocator(self):
        return _PMML.svec_get_allocator(self)

    def pop_back(self):
        return _PMML.svec_pop_back(self)

    def erase(self, *args):
        return _PMML.svec_erase(self, *args)

    def __init__(self, *args):
        _PMML.svec_swiginit(self, _PMML.new_svec(*args))

    def push_back(self, x):
        return _PMML.svec_push_back(self, x)

    def front(self):
        return _PMML.svec_front(self)

    def back(self):
        return _PMML.svec_back(self)

    def assign(self, n, x):
        return _PMML.svec_assign(self, n, x)

    def resize(self, *args):
        return _PMML.svec_resize(self, *args)

    def insert(self, *args):
        return _PMML.svec_insert(self, *args)

    def reserve(self, n):
        return _PMML.svec_reserve(self, n)

    def capacity(self):
        return _PMML.svec_capacity(self)
    __swig_destroy__ = _PMML.delete_svec

# Register svec in _PMML:
_PMML.svec_swigregister(svec)

kUNDEFINED = _PMML.kUNDEFINED
kANN = _PMML.kANN
kLR = _PMML.kLR
class PMMLlib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PMML.PMMLlib_swiginit(self, _PMML.new_PMMLlib(*args))
    __swig_destroy__ = _PMML.delete_PMMLlib

    def SetCurrentModel(self, modelName, type):
        return _PMML.PMMLlib_SetCurrentModel(self, modelName, type)

    def ExportPyStr(self, functionName, header):
        return _PMML.PMMLlib_ExportPyStr(self, functionName, header)

    def ExportPython(self, file, functionName, header):
        return _PMML.PMMLlib_ExportPython(self, file, functionName, header)

    def ExportCpp(self, file, functionName, header):
        return _PMML.PMMLlib_ExportCpp(self, file, functionName, header)

    def Write(self, *args):
        return _PMML.PMMLlib_Write(self, *args)

# Register PMMLlib in _PMML:
_PMML.PMMLlib_swigregister(PMMLlib)


import os
__filename=os.environ.get('PYTHONSTARTUP')
if __filename and os.path.isfile(__filename):
  exec(compile(open(__filename).read(), __filename, 'exec'))
  pass




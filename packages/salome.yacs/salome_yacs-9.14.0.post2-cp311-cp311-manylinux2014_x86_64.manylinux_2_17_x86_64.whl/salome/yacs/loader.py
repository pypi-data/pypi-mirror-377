# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Module to load an calculation schema from a XML file."""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _loader
else:
    import _loader

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class loader_PySwigIterator(object):
    r"""Proxy of C++ swig::loader_PySwigIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _loader.delete_loader_PySwigIterator

    def value(self):
        r"""value(loader_PySwigIterator self) -> PyObject *"""
        return _loader.loader_PySwigIterator_value(self)

    def incr(self, n=1):
        r"""incr(loader_PySwigIterator self, size_t n=1) -> loader_PySwigIterator"""
        return _loader.loader_PySwigIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(loader_PySwigIterator self, size_t n=1) -> loader_PySwigIterator"""
        return _loader.loader_PySwigIterator_decr(self, n)

    def distance(self, x):
        r"""distance(loader_PySwigIterator self, loader_PySwigIterator x) -> ptrdiff_t"""
        return _loader.loader_PySwigIterator_distance(self, x)

    def equal(self, x):
        r"""equal(loader_PySwigIterator self, loader_PySwigIterator x) -> bool"""
        return _loader.loader_PySwigIterator_equal(self, x)

    def copy(self):
        r"""copy(loader_PySwigIterator self) -> loader_PySwigIterator"""
        return _loader.loader_PySwigIterator_copy(self)

    def next(self):
        r"""next(loader_PySwigIterator self) -> PyObject *"""
        return _loader.loader_PySwigIterator_next(self)

    def __next__(self):
        r"""__next__(loader_PySwigIterator self) -> PyObject *"""
        return _loader.loader_PySwigIterator___next__(self)

    def previous(self):
        r"""previous(loader_PySwigIterator self) -> PyObject *"""
        return _loader.loader_PySwigIterator_previous(self)

    def advance(self, n):
        r"""advance(loader_PySwigIterator self, ptrdiff_t n) -> loader_PySwigIterator"""
        return _loader.loader_PySwigIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(loader_PySwigIterator self, loader_PySwigIterator x) -> bool"""
        return _loader.loader_PySwigIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(loader_PySwigIterator self, loader_PySwigIterator x) -> bool"""
        return _loader.loader_PySwigIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(loader_PySwigIterator self, ptrdiff_t n) -> loader_PySwigIterator"""
        return _loader.loader_PySwigIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(loader_PySwigIterator self, ptrdiff_t n) -> loader_PySwigIterator"""
        return _loader.loader_PySwigIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(loader_PySwigIterator self, ptrdiff_t n) -> loader_PySwigIterator"""
        return _loader.loader_PySwigIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(loader_PySwigIterator self, ptrdiff_t n) -> loader_PySwigIterator
        __sub__(loader_PySwigIterator self, loader_PySwigIterator x) -> ptrdiff_t
        """
        return _loader.loader_PySwigIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register loader_PySwigIterator in _loader:
_loader.loader_PySwigIterator_swigregister(loader_PySwigIterator)

import salome.yacs.pilot
class YACSLoader(object):
    r"""Proxy of C++ YACS::YACSLoader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(YACSLoader self) -> YACSLoader"""
        _loader.YACSLoader_swiginit(self, _loader.new_YACSLoader())
    __swig_destroy__ = _loader.delete_YACSLoader

    def load(self, filename):
        r"""load(YACSLoader self, char const * filename) -> Proc"""
        return _loader.YACSLoader_load(self, filename)

    def registerProcCataLoader(self):
        r"""registerProcCataLoader(YACSLoader self)"""
        return _loader.YACSLoader_registerProcCataLoader(self)

# Register YACSLoader in _loader:
_loader.YACSLoader_swigregister(YACSLoader)


def loadState(p, xmlStateFile):
    r"""loadState(Proc p, std::string const & xmlStateFile)"""
    return _loader.loadState(p, xmlStateFile)
class stateLoader(object):
    r"""Proxy of C++ YACS::ENGINE::stateLoader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parser, p):
        r"""__init__(stateLoader self, xmlParserBase parser, Proc p) -> stateLoader"""
        _loader.stateLoader_swiginit(self, _loader.new_stateLoader(parser, p))

    def parse(self, xmlState):
        r"""parse(stateLoader self, std::string xmlState)"""
        return _loader.stateLoader_parse(self, xmlState)
    __swig_destroy__ = _loader.delete_stateLoader

# Register stateLoader in _loader:
_loader.stateLoader_swigregister(stateLoader)

XMLNOCONTEXT = _loader.XMLNOCONTEXT

XMLINGRAPH = _loader.XMLINGRAPH

XMLINNODE = _loader.XMLINNODE

XMLINPORT = _loader.XMLINPORT

XMLINVALUE = _loader.XMLINVALUE

XMLDONE = _loader.XMLDONE

XMLFATALERROR = _loader.XMLFATALERROR

class stateParser(object):
    r"""Proxy of C++ YACS::ENGINE::stateParser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _state = property(_loader.stateParser__state_get, _loader.stateParser__state_set, doc=r"""_state : YACS::ENGINE::XMLReadState""")
    _what = property(_loader.stateParser__what_get, _loader.stateParser__what_set, doc=r"""_what : std::string""")

    @staticmethod
    def setProc(p):
        r"""setProc(Proc p)"""
        return _loader.stateParser_setProc(p)

    @staticmethod
    def setRuntime(runtime):
        r"""setRuntime(Runtime runtime)"""
        return _loader.stateParser_setRuntime(runtime)

    def init(self, p, father=None):
        r"""init(stateParser self, xmlChar const ** p, xmlParserBase father=None)"""
        return _loader.stateParser_init(self, p, father)

    def __init__(self):
        r"""__init__(stateParser self) -> stateParser"""
        _loader.stateParser_swiginit(self, _loader.new_stateParser())
    __swig_destroy__ = _loader.delete_stateParser

# Register stateParser in _loader:
_loader.stateParser_swigregister(stateParser)
cvar = _loader.cvar

def stateParser_setProc(p):
    r"""stateParser_setProc(Proc p)"""
    return _loader.stateParser_setProc(p)

def stateParser_setRuntime(runtime):
    r"""stateParser_setRuntime(Runtime runtime)"""
    return _loader.stateParser_setRuntime(runtime)




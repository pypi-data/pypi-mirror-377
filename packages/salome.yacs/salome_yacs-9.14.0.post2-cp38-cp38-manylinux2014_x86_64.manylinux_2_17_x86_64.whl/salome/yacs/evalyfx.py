# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Module to evaluate Y=f(X) easily."""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _evalyfx
else:
    import _evalyfx

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _evalyfx.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _evalyfx.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _evalyfx.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _evalyfx.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _evalyfx.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _evalyfx.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _evalyfx.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _evalyfx.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _evalyfx.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _evalyfx.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _evalyfx.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _evalyfx.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _evalyfx.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _evalyfx.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _evalyfx.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _evalyfx.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _evalyfx.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _evalyfx:
_evalyfx.SwigPyIterator_swigregister(SwigPyIterator)

import loader
import salome.yacs.pilot
class YACSEvalPort(object):
    r"""Proxy of C++ YACSEvalPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTypeOfData(self):
        r"""getTypeOfData(YACSEvalPort self) -> std::string"""
        return _evalyfx.YACSEvalPort_getTypeOfData(self)
    __swig_destroy__ = _evalyfx.delete_YACSEvalPort

# Register YACSEvalPort in _evalyfx:
_evalyfx.YACSEvalPort_swigregister(YACSEvalPort)

class YACSEvalInputPort(YACSEvalPort):
    r"""Proxy of C++ YACSEvalInputPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getName(self):
        r"""getName(YACSEvalInputPort self) -> std::string"""
        return _evalyfx.YACSEvalInputPort_getName(self)

    def hasDefaultValueDefined(self):
        r"""hasDefaultValueDefined(YACSEvalInputPort self) -> bool"""
        return _evalyfx.YACSEvalInputPort_hasDefaultValueDefined(self)

    def getDefaultValueDefined(self):
        r"""getDefaultValueDefined(YACSEvalInputPort self) -> YACSEvalAny *"""
        return _evalyfx.YACSEvalInputPort_getDefaultValueDefined(self)

    def isRandomVar(self):
        r"""isRandomVar(YACSEvalInputPort self) -> bool"""
        return _evalyfx.YACSEvalInputPort_isRandomVar(self)

    def declareRandomnessStatus(self, isRandom):
        r"""declareRandomnessStatus(YACSEvalInputPort self, bool isRandom)"""
        return _evalyfx.YACSEvalInputPort_declareRandomnessStatus(self, isRandom)

    def hasSequenceOfValuesToEval(self):
        r"""hasSequenceOfValuesToEval(YACSEvalInputPort self) -> bool"""
        return _evalyfx.YACSEvalInputPort_hasSequenceOfValuesToEval(self)

    def setDefaultValue(self, parameter):
        r"""setDefaultValue(YACSEvalInputPort self, PyObject * parameter)"""
        return _evalyfx.YACSEvalInputPort_setDefaultValue(self, parameter)

    def setSequenceOfValuesToEval(self, vals):
        r"""setSequenceOfValuesToEval(YACSEvalInputPort self, PyObject * vals)"""
        return _evalyfx.YACSEvalInputPort_setSequenceOfValuesToEval(self, vals)
    __swig_destroy__ = _evalyfx.delete_YACSEvalInputPort

# Register YACSEvalInputPort in _evalyfx:
_evalyfx.YACSEvalInputPort_swigregister(YACSEvalInputPort)

class YACSEvalOutputPort(YACSEvalPort):
    r"""Proxy of C++ YACSEvalOutputPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getName(self):
        r"""getName(YACSEvalOutputPort self) -> std::string"""
        return _evalyfx.YACSEvalOutputPort_getName(self)

    def setQOfInterestStatus(self, newStatus):
        r"""setQOfInterestStatus(YACSEvalOutputPort self, bool newStatus) -> bool"""
        return _evalyfx.YACSEvalOutputPort_setQOfInterestStatus(self, newStatus)

    def isQOfInterest(self):
        r"""isQOfInterest(YACSEvalOutputPort self) -> bool"""
        return _evalyfx.YACSEvalOutputPort_isQOfInterest(self)
    __swig_destroy__ = _evalyfx.delete_YACSEvalOutputPort

# Register YACSEvalOutputPort in _evalyfx:
_evalyfx.YACSEvalOutputPort_swigregister(YACSEvalOutputPort)

class YACSEvalVirtualYACSContainer(object):
    r"""Proxy of C++ YACSEvalVirtualYACSContainer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getChosenMachine(self):
        r"""getChosenMachine(YACSEvalVirtualYACSContainer self) -> std::string"""
        return _evalyfx.YACSEvalVirtualYACSContainer_getChosenMachine(self)

    def setWantedMachine(self, machine):
        r"""setWantedMachine(YACSEvalVirtualYACSContainer self, std::string const & machine)"""
        return _evalyfx.YACSEvalVirtualYACSContainer_setWantedMachine(self, machine)

    def listOfPropertyKeys(self):
        r"""listOfPropertyKeys(YACSEvalVirtualYACSContainer self) -> strvec"""
        return _evalyfx.YACSEvalVirtualYACSContainer_listOfPropertyKeys(self)

    def getValueOfKey(self, key):
        r"""getValueOfKey(YACSEvalVirtualYACSContainer self, char const * key) -> std::string"""
        return _evalyfx.YACSEvalVirtualYACSContainer_getValueOfKey(self, key)

    def setProperty(self, key, value):
        r"""setProperty(YACSEvalVirtualYACSContainer self, std::string const & key, std::string const & value)"""
        return _evalyfx.YACSEvalVirtualYACSContainer_setProperty(self, key, value)

    def getName(self):
        r"""getName(YACSEvalVirtualYACSContainer self) -> std::string"""
        return _evalyfx.YACSEvalVirtualYACSContainer_getName(self)
    __swig_destroy__ = _evalyfx.delete_YACSEvalVirtualYACSContainer

# Register YACSEvalVirtualYACSContainer in _evalyfx:
_evalyfx.YACSEvalVirtualYACSContainer_swigregister(YACSEvalVirtualYACSContainer)

class YACSEvalResource(object):
    r"""Proxy of C++ YACSEvalResource class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getAllChosenMachines(self):
        r"""getAllChosenMachines(YACSEvalResource self) -> strvec"""
        return _evalyfx.YACSEvalResource_getAllChosenMachines(self)

    def getAllFittingMachines(self):
        r"""getAllFittingMachines(YACSEvalResource self) -> strvec"""
        return _evalyfx.YACSEvalResource_getAllFittingMachines(self)

    def setWantedMachine(self, machine):
        r"""setWantedMachine(YACSEvalResource self, std::string const & machine)"""
        return _evalyfx.YACSEvalResource_setWantedMachine(self, machine)

    def size(self):
        r"""size(YACSEvalResource self) -> std::size_t"""
        return _evalyfx.YACSEvalResource_size(self)

    def at(self, i):
        r"""at(YACSEvalResource self, std::size_t i) -> YACSEvalVirtualYACSContainer"""
        return _evalyfx.YACSEvalResource_at(self, i)

    def __len__(self):
        r"""__len__(YACSEvalResource self) -> std::size_t"""
        return _evalyfx.YACSEvalResource___len__(self)

    def __getitem__(self, i):
        r"""__getitem__(YACSEvalResource self, std::size_t i) -> YACSEvalVirtualYACSContainer"""
        return _evalyfx.YACSEvalResource___getitem__(self, i)
    __swig_destroy__ = _evalyfx.delete_YACSEvalResource

# Register YACSEvalResource in _evalyfx:
_evalyfx.YACSEvalResource_swigregister(YACSEvalResource)

class YACSEvalParamsForCluster(object):
    r"""Proxy of C++ YACSEvalParamsForCluster class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getExclusiveness(self):
        r"""getExclusiveness(YACSEvalParamsForCluster self) -> bool"""
        return _evalyfx.YACSEvalParamsForCluster_getExclusiveness(self)

    def setExclusiveness(self, newStatus):
        r"""setExclusiveness(YACSEvalParamsForCluster self, bool newStatus)"""
        return _evalyfx.YACSEvalParamsForCluster_setExclusiveness(self, newStatus)

    def getRemoteWorkingDir(self):
        r"""getRemoteWorkingDir(YACSEvalParamsForCluster self) -> std::string"""
        return _evalyfx.YACSEvalParamsForCluster_getRemoteWorkingDir(self)

    def setRemoteWorkingDir(self, remoteWorkingDir):
        r"""setRemoteWorkingDir(YACSEvalParamsForCluster self, std::string const & remoteWorkingDir)"""
        return _evalyfx.YACSEvalParamsForCluster_setRemoteWorkingDir(self, remoteWorkingDir)

    def getLocalWorkingDir(self):
        r"""getLocalWorkingDir(YACSEvalParamsForCluster self) -> std::string"""
        return _evalyfx.YACSEvalParamsForCluster_getLocalWorkingDir(self)

    def setLocalWorkingDir(self, localWorkingDir):
        r"""setLocalWorkingDir(YACSEvalParamsForCluster self, std::string const & localWorkingDir)"""
        return _evalyfx.YACSEvalParamsForCluster_setLocalWorkingDir(self, localWorkingDir)

    def getWCKey(self):
        r"""getWCKey(YACSEvalParamsForCluster self) -> std::string"""
        return _evalyfx.YACSEvalParamsForCluster_getWCKey(self)

    def setWCKey(self, wcKey):
        r"""setWCKey(YACSEvalParamsForCluster self, std::string const & wcKey)"""
        return _evalyfx.YACSEvalParamsForCluster_setWCKey(self, wcKey)

    def getNbProcs(self):
        r"""getNbProcs(YACSEvalParamsForCluster self) -> unsigned int"""
        return _evalyfx.YACSEvalParamsForCluster_getNbProcs(self)

    def setNbProcs(self, nbProcs):
        r"""setNbProcs(YACSEvalParamsForCluster self, unsigned int nbProcs)"""
        return _evalyfx.YACSEvalParamsForCluster_setNbProcs(self, nbProcs)

    def setMaxDuration(self, maxDuration):
        r"""setMaxDuration(YACSEvalParamsForCluster self, std::string const & maxDuration)"""
        return _evalyfx.YACSEvalParamsForCluster_setMaxDuration(self, maxDuration)

    def getMaxDuration(self):
        r"""getMaxDuration(YACSEvalParamsForCluster self) -> std::string"""
        return _evalyfx.YACSEvalParamsForCluster_getMaxDuration(self)

    def checkConsistency(self):
        r"""checkConsistency(YACSEvalParamsForCluster self)"""
        return _evalyfx.YACSEvalParamsForCluster_checkConsistency(self)
    __swig_destroy__ = _evalyfx.delete_YACSEvalParamsForCluster

# Register YACSEvalParamsForCluster in _evalyfx:
_evalyfx.YACSEvalParamsForCluster_swigregister(YACSEvalParamsForCluster)

class YACSEvalListOfResources(object):
    r"""Proxy of C++ YACSEvalListOfResources class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getAllChosenMachines(self):
        r"""getAllChosenMachines(YACSEvalListOfResources self) -> strvec"""
        return _evalyfx.YACSEvalListOfResources_getAllChosenMachines(self)

    def getAllFittingMachines(self):
        r"""getAllFittingMachines(YACSEvalListOfResources self) -> strvec"""
        return _evalyfx.YACSEvalListOfResources_getAllFittingMachines(self)

    def setWantedMachine(self, machine):
        r"""setWantedMachine(YACSEvalListOfResources self, std::string const & machine)"""
        return _evalyfx.YACSEvalListOfResources_setWantedMachine(self, machine)

    def size(self):
        r"""size(YACSEvalListOfResources self) -> std::size_t"""
        return _evalyfx.YACSEvalListOfResources_size(self)

    def isInteractive(self):
        r"""isInteractive(YACSEvalListOfResources self) -> bool"""
        return _evalyfx.YACSEvalListOfResources_isInteractive(self)

    def isMachineInteractive(self, machine):
        r"""isMachineInteractive(YACSEvalListOfResources self, std::string const & machine) -> bool"""
        return _evalyfx.YACSEvalListOfResources_isMachineInteractive(self, machine)

    def at(self, i):
        r"""at(YACSEvalListOfResources self, std::size_t i) -> YACSEvalResource"""
        return _evalyfx.YACSEvalListOfResources_at(self, i)

    def getNumberOfProcsDeclared(self):
        r"""getNumberOfProcsDeclared(YACSEvalListOfResources self) -> unsigned int"""
        return _evalyfx.YACSEvalListOfResources_getNumberOfProcsDeclared(self)

    def checkOKForRun(self):
        r"""checkOKForRun(YACSEvalListOfResources self)"""
        return _evalyfx.YACSEvalListOfResources_checkOKForRun(self)

    def getAddParamsForCluster(self):
        r"""getAddParamsForCluster(YACSEvalListOfResources self) -> YACSEvalParamsForCluster"""
        return _evalyfx.YACSEvalListOfResources_getAddParamsForCluster(self)

    def __len__(self):
        r"""__len__(YACSEvalListOfResources self) -> std::size_t"""
        return _evalyfx.YACSEvalListOfResources___len__(self)

    def __getitem__(self, i):
        r"""__getitem__(YACSEvalListOfResources self, std::size_t i) -> YACSEvalResource"""
        return _evalyfx.YACSEvalListOfResources___getitem__(self, i)
    __swig_destroy__ = _evalyfx.delete_YACSEvalListOfResources

# Register YACSEvalListOfResources in _evalyfx:
_evalyfx.YACSEvalListOfResources_swigregister(YACSEvalListOfResources)

class YACSEvalSession(object):
    r"""Proxy of C++ YACSEvalSession class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(YACSEvalSession self) -> YACSEvalSession"""
        _evalyfx.YACSEvalSession_swiginit(self, _evalyfx.new_YACSEvalSession())
    __swig_destroy__ = _evalyfx.delete_YACSEvalSession

    def launch(self):
        r"""launch(YACSEvalSession self)"""
        return _evalyfx.YACSEvalSession_launch(self)

    def launchUsingCurrentSession(self):
        r"""launchUsingCurrentSession(YACSEvalSession self)"""
        return _evalyfx.YACSEvalSession_launchUsingCurrentSession(self)

    def isLaunched(self):
        r"""isLaunched(YACSEvalSession self) -> bool"""
        return _evalyfx.YACSEvalSession_isLaunched(self)

    def isAttached(self):
        r"""isAttached(YACSEvalSession self) -> bool"""
        return _evalyfx.YACSEvalSession_isAttached(self)

    def isAlreadyPyThreadSaved(self):
        r"""isAlreadyPyThreadSaved(YACSEvalSession self) -> bool"""
        return _evalyfx.YACSEvalSession_isAlreadyPyThreadSaved(self)

    def getForcedPyThreadSavedStatus(self):
        r"""getForcedPyThreadSavedStatus(YACSEvalSession self) -> bool"""
        return _evalyfx.YACSEvalSession_getForcedPyThreadSavedStatus(self)

    def setForcedPyThreadSavedStatus(self, status):
        r"""setForcedPyThreadSavedStatus(YACSEvalSession self, bool status)"""
        return _evalyfx.YACSEvalSession_setForcedPyThreadSavedStatus(self, status)

    def checkLaunched(self):
        r"""checkLaunched(YACSEvalSession self)"""
        return _evalyfx.YACSEvalSession_checkLaunched(self)

    def getPort(self):
        r"""getPort(YACSEvalSession self) -> int"""
        return _evalyfx.YACSEvalSession_getPort(self)

    def getCorbaConfigFileName(self):
        r"""getCorbaConfigFileName(YACSEvalSession self) -> std::string"""
        return _evalyfx.YACSEvalSession_getCorbaConfigFileName(self)

# Register YACSEvalSession in _evalyfx:
_evalyfx.YACSEvalSession_swigregister(YACSEvalSession)

class YACSEvalExecParams(object):
    r"""Proxy of C++ YACSEvalExecParams class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getStopASAPAfterErrorStatus(self):
        r"""getStopASAPAfterErrorStatus(YACSEvalExecParams self) -> bool"""
        return _evalyfx.YACSEvalExecParams_getStopASAPAfterErrorStatus(self)

    def setStopASAPAfterErrorStatus(self, newStatus):
        r"""setStopASAPAfterErrorStatus(YACSEvalExecParams self, bool newStatus)"""
        return _evalyfx.YACSEvalExecParams_setStopASAPAfterErrorStatus(self, newStatus)

    def getFetchRemoteDirForClusterStatus(self):
        r"""getFetchRemoteDirForClusterStatus(YACSEvalExecParams self) -> bool"""
        return _evalyfx.YACSEvalExecParams_getFetchRemoteDirForClusterStatus(self)

    def setFetchRemoteDirForClusterStatus(self, newStatus):
        r"""setFetchRemoteDirForClusterStatus(YACSEvalExecParams self, bool newStatus)"""
        return _evalyfx.YACSEvalExecParams_setFetchRemoteDirForClusterStatus(self, newStatus)
    __swig_destroy__ = _evalyfx.delete_YACSEvalExecParams

# Register YACSEvalExecParams in _evalyfx:
_evalyfx.YACSEvalExecParams_swigregister(YACSEvalExecParams)

class YACSEvalYFX(object):
    r"""Proxy of C++ YACSEvalYFX class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def BuildFromFile(xmlOfScheme):
        r"""BuildFromFile(std::string const & xmlOfScheme) -> YACSEvalYFX"""
        return _evalyfx.YACSEvalYFX_BuildFromFile(xmlOfScheme)

    @staticmethod
    def BuildFromScheme(schema):
        r"""BuildFromScheme(Proc schema) -> YACSEvalYFX"""
        return _evalyfx.YACSEvalYFX_BuildFromScheme(schema)

    def getParams(self):
        r"""getParams(YACSEvalYFX self) -> YACSEvalExecParams"""
        return _evalyfx.YACSEvalYFX_getParams(self)

    def getFreeInputPorts(self):
        r"""getFreeInputPorts(YACSEvalYFX self) -> std::vector< YACSEvalInputPort *,std::allocator< YACSEvalInputPort * > >"""
        return _evalyfx.YACSEvalYFX_getFreeInputPorts(self)

    def getFreeOutputPorts(self):
        r"""getFreeOutputPorts(YACSEvalYFX self) -> std::vector< YACSEvalOutputPort *,std::allocator< YACSEvalOutputPort * > >"""
        return _evalyfx.YACSEvalYFX_getFreeOutputPorts(self)

    def unlockAll(self):
        r"""unlockAll(YACSEvalYFX self)"""
        return _evalyfx.YACSEvalYFX_unlockAll(self)

    def isLocked(self):
        r"""isLocked(YACSEvalYFX self) -> bool"""
        return _evalyfx.YACSEvalYFX_isLocked(self)

    def getUndergroundGeneratedGraph(self):
        r"""getUndergroundGeneratedGraph(YACSEvalYFX self) -> Proc"""
        return _evalyfx.YACSEvalYFX_getUndergroundGeneratedGraph(self)

    def giveResources(self):
        r"""giveResources(YACSEvalYFX self) -> YACSEvalListOfResources"""
        return _evalyfx.YACSEvalYFX_giveResources(self)

    def getErrorDetailsInCaseOfFailure(self):
        r"""getErrorDetailsInCaseOfFailure(YACSEvalYFX self) -> std::string"""
        return _evalyfx.YACSEvalYFX_getErrorDetailsInCaseOfFailure(self)

    def getStatusOfRunStr(self):
        r"""getStatusOfRunStr(YACSEvalYFX self) -> std::string"""
        return _evalyfx.YACSEvalYFX_getStatusOfRunStr(self)

    def setParallelizeStatus(self, newVal):
        r"""setParallelizeStatus(YACSEvalYFX self, bool newVal)"""
        return _evalyfx.YACSEvalYFX_setParallelizeStatus(self, newVal)

    def getParallelizeStatus(self):
        r"""getParallelizeStatus(YACSEvalYFX self) -> bool"""
        return _evalyfx.YACSEvalYFX_getParallelizeStatus(self)

    def lockPortsForEvaluation(self, inputsOfInterest, outputsOfInterest):
        r"""lockPortsForEvaluation(YACSEvalYFX self, PyObject * inputsOfInterest, PyObject * outputsOfInterest)"""
        return _evalyfx.YACSEvalYFX_lockPortsForEvaluation(self, inputsOfInterest, outputsOfInterest)

    def getResults(self):
        r"""getResults(YACSEvalYFX self) -> PyObject *"""
        return _evalyfx.YACSEvalYFX_getResults(self)

    def getResultsInCaseOfFailure(self):
        r"""getResultsInCaseOfFailure(YACSEvalYFX self) -> PyObject *"""
        return _evalyfx.YACSEvalYFX_getResultsInCaseOfFailure(self)

    def run(self, session):
        r"""run(YACSEvalYFX self, YACSEvalSession session) -> PyObject *"""
        return _evalyfx.YACSEvalYFX_run(self, session)
    __swig_destroy__ = _evalyfx.delete_YACSEvalYFX

# Register YACSEvalYFX in _evalyfx:
_evalyfx.YACSEvalYFX_swigregister(YACSEvalYFX)

def YACSEvalYFX_BuildFromFile(xmlOfScheme):
    r"""YACSEvalYFX_BuildFromFile(std::string const & xmlOfScheme) -> YACSEvalYFX"""
    return _evalyfx.YACSEvalYFX_BuildFromFile(xmlOfScheme)

def YACSEvalYFX_BuildFromScheme(schema):
    r"""YACSEvalYFX_BuildFromScheme(Proc schema) -> YACSEvalYFX"""
    return _evalyfx.YACSEvalYFX_BuildFromScheme(schema)




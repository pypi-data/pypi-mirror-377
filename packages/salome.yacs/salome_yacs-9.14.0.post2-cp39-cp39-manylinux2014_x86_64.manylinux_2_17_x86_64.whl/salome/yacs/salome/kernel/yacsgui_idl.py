# Python stubs generated by omniidl from /tmp/yacs/idl/yacsgui.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "SALOME_GenericObj.idl"
import salome.kernel.SALOME_GenericObj_idl
_0_SALOME = omniORB.openModule("salome.kernel.SALOME")
_0_SALOME__POA = omniORB.openModule("salome.kernel.SALOME__POA")

# #include "SALOME_Exception.idl"
import salome.kernel.SALOME_Exception_idl
_0_SALOME = omniORB.openModule("salome.kernel.SALOME")
_0_SALOME__POA = omniORB.openModule("salome.kernel.SALOME__POA")

# #include "SALOMEDS.idl"
import salome.kernel.SALOMEDS_idl
_0_SALOMEDS = omniORB.openModule("salome.kernel.SALOMEDS")
_0_SALOMEDS__POA = omniORB.openModule("salome.kernel.SALOMEDS__POA")

# #include "SALOME_Comm.idl"
import salome.kernel.SALOME_Comm_idl
_0_SALOME = omniORB.openModule("salome.kernel.SALOME")
_0_SALOME__POA = omniORB.openModule("salome.kernel.SALOME__POA")

# #include "SALOME_PyNode.idl"
import salome.kernel.SALOME_PyNode_idl
_0_Engines = omniORB.openModule("salome.kernel.Engines")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA")

# #include "SALOME_Embedded_NamingService.idl"
import salome.kernel.SALOME_Embedded_NamingService_idl
_0_Engines = omniORB.openModule("salome.kernel.Engines")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA")

# #include "SALOME_Component.idl"
import salome.kernel.SALOME_Component_idl
_0_Engines = omniORB.openModule("salome.kernel.Engines")
_0_Engines__POA = omniORB.openModule("salome.kernel.Engines__POA")

#
# Start of module "YACS_ORB"
#
__name__ = "salome.kernel.YACS_ORB"
_0_YACS_ORB = omniORB.openModule("salome.kernel.YACS_ORB", r"/tmp/yacs/idl/yacsgui.idl")
_0_YACS_ORB__POA = omniORB.openModule("salome.kernel.YACS_ORB__POA", r"/tmp/yacs/idl/yacsgui.idl")


# enum executionMode
_0_YACS_ORB.CONTINUE = omniORB.EnumItem("CONTINUE", 0)
_0_YACS_ORB.STEPBYSTEP = omniORB.EnumItem("STEPBYSTEP", 1)
_0_YACS_ORB.STOPBEFORENODES = omniORB.EnumItem("STOPBEFORENODES", 2)
_0_YACS_ORB.executionMode = omniORB.Enum("IDL:YACS_ORB/executionMode:1.0", (_0_YACS_ORB.CONTINUE, _0_YACS_ORB.STEPBYSTEP, _0_YACS_ORB.STOPBEFORENODES,))

_0_YACS_ORB._d_executionMode  = (omniORB.tcInternal.tv_enum, _0_YACS_ORB.executionMode._NP_RepositoryId, "executionMode", _0_YACS_ORB.executionMode._items)
_0_YACS_ORB._tc_executionMode = omniORB.tcInternal.createTypeCode(_0_YACS_ORB._d_executionMode)
omniORB.registerType(_0_YACS_ORB.executionMode._NP_RepositoryId, _0_YACS_ORB._d_executionMode, _0_YACS_ORB._tc_executionMode)

# typedef ... stringArray
class stringArray:
    _NP_RepositoryId = "IDL:YACS_ORB/stringArray:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_YACS_ORB.stringArray = stringArray
_0_YACS_ORB._d_stringArray  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0_YACS_ORB._ad_stringArray = (omniORB.tcInternal.tv_alias, stringArray._NP_RepositoryId, "stringArray", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_YACS_ORB._tc_stringArray = omniORB.tcInternal.createTypeCode(_0_YACS_ORB._ad_stringArray)
omniORB.registerType(stringArray._NP_RepositoryId, _0_YACS_ORB._ad_stringArray, _0_YACS_ORB._tc_stringArray)
del stringArray

# typedef ... longArray
class longArray:
    _NP_RepositoryId = "IDL:YACS_ORB/longArray:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_YACS_ORB.longArray = longArray
_0_YACS_ORB._d_longArray  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0)
_0_YACS_ORB._ad_longArray = (omniORB.tcInternal.tv_alias, longArray._NP_RepositoryId, "longArray", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0))
_0_YACS_ORB._tc_longArray = omniORB.tcInternal.createTypeCode(_0_YACS_ORB._ad_longArray)
omniORB.registerType(longArray._NP_RepositoryId, _0_YACS_ORB._ad_longArray, _0_YACS_ORB._tc_longArray)
del longArray

# interface Observer
_0_YACS_ORB._d_Observer = (omniORB.tcInternal.tv_objref, "IDL:YACS_ORB/Observer:1.0", "Observer")
omniORB.typeMapping["IDL:YACS_ORB/Observer:1.0"] = _0_YACS_ORB._d_Observer
_0_YACS_ORB.Observer = omniORB.newEmptyClass()
class Observer :
    _NP_RepositoryId = _0_YACS_ORB._d_Observer[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_YACS_ORB.Observer = Observer
_0_YACS_ORB._tc_Observer = omniORB.tcInternal.createTypeCode(_0_YACS_ORB._d_Observer)
omniORB.registerType(Observer._NP_RepositoryId, _0_YACS_ORB._d_Observer, _0_YACS_ORB._tc_Observer)

# Observer operations and attributes
Observer._d_notifyObserver = ((omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0)), (), None)

# Observer object reference
class _objref_Observer (CORBA.Object):
    _NP_RepositoryId = Observer._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def notifyObserver(self, *args):
        return self._obj.invoke("notifyObserver", _0_YACS_ORB.Observer._d_notifyObserver, args)

omniORB.registerObjref(Observer._NP_RepositoryId, _objref_Observer)
_0_YACS_ORB._objref_Observer = _objref_Observer
del Observer, _objref_Observer

# Observer skeleton
__name__ = "salome.kernel.YACS_ORB__POA"
class Observer (PortableServer.Servant):
    _NP_RepositoryId = _0_YACS_ORB.Observer._NP_RepositoryId


    _omni_op_d = {"notifyObserver": _0_YACS_ORB.Observer._d_notifyObserver}

Observer._omni_skeleton = Observer
_0_YACS_ORB__POA.Observer = Observer
omniORB.registerSkeleton(Observer._NP_RepositoryId, Observer)
del Observer
__name__ = "salome.kernel.YACS_ORB"

# interface ProcExec
_0_YACS_ORB._d_ProcExec = (omniORB.tcInternal.tv_objref, "IDL:YACS_ORB/ProcExec:1.0", "ProcExec")
omniORB.typeMapping["IDL:YACS_ORB/ProcExec:1.0"] = _0_YACS_ORB._d_ProcExec
_0_YACS_ORB.ProcExec = omniORB.newEmptyClass()
class ProcExec :
    _NP_RepositoryId = _0_YACS_ORB._d_ProcExec[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_YACS_ORB.ProcExec = ProcExec
_0_YACS_ORB._tc_ProcExec = omniORB.tcInternal.createTypeCode(_0_YACS_ORB._d_ProcExec)
omniORB.registerType(ProcExec._NP_RepositoryId, _0_YACS_ORB._d_ProcExec, _0_YACS_ORB._tc_ProcExec)

# ProcExec operations and attributes
ProcExec._d_getNodeState = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)
ProcExec._d_getNodeProgress = ((omniORB.tcInternal.tv_long, ), ((omniORB.tcInternal.tv_string,0), ), None)
ProcExec._d_getXMLState = ((omniORB.tcInternal.tv_long, ), ((omniORB.tcInternal.tv_string,0), ), None)
ProcExec._d_getInPortValue = ((omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)
ProcExec._d_setInPortValue = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)
ProcExec._d_getOutPortValue = ((omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)
ProcExec._d_getErrorDetails = ((omniORB.tcInternal.tv_long, ), ((omniORB.tcInternal.tv_string,0), ), None)
ProcExec._d_getErrorReport = ((omniORB.tcInternal.tv_long, ), ((omniORB.tcInternal.tv_string,0), ), None)
ProcExec._d_getContainerLog = ((omniORB.tcInternal.tv_long, ), ((omniORB.tcInternal.tv_string,0), ), None)
ProcExec._d_shutdownProc = ((omniORB.tcInternal.tv_long, ), (), None)
ProcExec._d_getExecutorState = ((), (omniORB.tcInternal.tv_long, ), None)
ProcExec._d_getIds = ((), (omniORB.typeMapping["IDL:YACS_ORB/longArray:1.0"], omniORB.typeMapping["IDL:YACS_ORB/stringArray:1.0"]), None)
ProcExec._d_getNumIds = ((), (omniORB.typeMapping["IDL:YACS_ORB/longArray:1.0"], ), None)
ProcExec._d_getNames = ((), (omniORB.typeMapping["IDL:YACS_ORB/stringArray:1.0"], ), None)
ProcExec._d_Run = ((), (), None)
ProcExec._d_RunFromState = (((omniORB.tcInternal.tv_string,0), ), (), None)
ProcExec._d_RestartFromState = (((omniORB.tcInternal.tv_string,0), ), (), None)
ProcExec._d_addObserver = ((omniORB.typeMapping["IDL:YACS_ORB/Observer:1.0"], omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0)), (), None)
ProcExec._d_setExecMode = ((omniORB.typeMapping["IDL:YACS_ORB/executionMode:1.0"], ), (), None)
ProcExec._d_setListOfBreakPoints = ((omniORB.typeMapping["IDL:YACS_ORB/stringArray:1.0"], ), (), None)
ProcExec._d_getTasksToLoad = ((), (omniORB.typeMapping["IDL:YACS_ORB/stringArray:1.0"], ), None)
ProcExec._d_setStepsToExecute = ((omniORB.typeMapping["IDL:YACS_ORB/stringArray:1.0"], ), (omniORB.tcInternal.tv_boolean, ), None)
ProcExec._d_resumeCurrentBreakPoint = ((), (omniORB.tcInternal.tv_boolean, ), None)
ProcExec._d_isNotFinished = ((), (omniORB.tcInternal.tv_boolean, ), None)
ProcExec._d_stopExecution = ((), (), None)
ProcExec._d_saveState = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
ProcExec._d_setStopOnError = ((omniORB.tcInternal.tv_boolean, (omniORB.tcInternal.tv_string,0)), (), None)
ProcExec._d_unsetStopOnError = ((), (), None)

# ProcExec object reference
class _objref_ProcExec (CORBA.Object):
    _NP_RepositoryId = ProcExec._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def getNodeState(self, *args):
        return self._obj.invoke("getNodeState", _0_YACS_ORB.ProcExec._d_getNodeState, args)

    def getNodeProgress(self, *args):
        return self._obj.invoke("getNodeProgress", _0_YACS_ORB.ProcExec._d_getNodeProgress, args)

    def getXMLState(self, *args):
        return self._obj.invoke("getXMLState", _0_YACS_ORB.ProcExec._d_getXMLState, args)

    def getInPortValue(self, *args):
        return self._obj.invoke("getInPortValue", _0_YACS_ORB.ProcExec._d_getInPortValue, args)

    def setInPortValue(self, *args):
        return self._obj.invoke("setInPortValue", _0_YACS_ORB.ProcExec._d_setInPortValue, args)

    def getOutPortValue(self, *args):
        return self._obj.invoke("getOutPortValue", _0_YACS_ORB.ProcExec._d_getOutPortValue, args)

    def getErrorDetails(self, *args):
        return self._obj.invoke("getErrorDetails", _0_YACS_ORB.ProcExec._d_getErrorDetails, args)

    def getErrorReport(self, *args):
        return self._obj.invoke("getErrorReport", _0_YACS_ORB.ProcExec._d_getErrorReport, args)

    def getContainerLog(self, *args):
        return self._obj.invoke("getContainerLog", _0_YACS_ORB.ProcExec._d_getContainerLog, args)

    def shutdownProc(self, *args):
        return self._obj.invoke("shutdownProc", _0_YACS_ORB.ProcExec._d_shutdownProc, args)

    def getExecutorState(self, *args):
        return self._obj.invoke("getExecutorState", _0_YACS_ORB.ProcExec._d_getExecutorState, args)

    def getIds(self, *args):
        return self._obj.invoke("getIds", _0_YACS_ORB.ProcExec._d_getIds, args)

    def getNumIds(self, *args):
        return self._obj.invoke("getNumIds", _0_YACS_ORB.ProcExec._d_getNumIds, args)

    def getNames(self, *args):
        return self._obj.invoke("getNames", _0_YACS_ORB.ProcExec._d_getNames, args)

    def Run(self, *args):
        return self._obj.invoke("Run", _0_YACS_ORB.ProcExec._d_Run, args)

    def RunFromState(self, *args):
        return self._obj.invoke("RunFromState", _0_YACS_ORB.ProcExec._d_RunFromState, args)

    def RestartFromState(self, *args):
        return self._obj.invoke("RestartFromState", _0_YACS_ORB.ProcExec._d_RestartFromState, args)

    def addObserver(self, *args):
        return self._obj.invoke("addObserver", _0_YACS_ORB.ProcExec._d_addObserver, args)

    def setExecMode(self, *args):
        return self._obj.invoke("setExecMode", _0_YACS_ORB.ProcExec._d_setExecMode, args)

    def setListOfBreakPoints(self, *args):
        return self._obj.invoke("setListOfBreakPoints", _0_YACS_ORB.ProcExec._d_setListOfBreakPoints, args)

    def getTasksToLoad(self, *args):
        return self._obj.invoke("getTasksToLoad", _0_YACS_ORB.ProcExec._d_getTasksToLoad, args)

    def setStepsToExecute(self, *args):
        return self._obj.invoke("setStepsToExecute", _0_YACS_ORB.ProcExec._d_setStepsToExecute, args)

    def resumeCurrentBreakPoint(self, *args):
        return self._obj.invoke("resumeCurrentBreakPoint", _0_YACS_ORB.ProcExec._d_resumeCurrentBreakPoint, args)

    def isNotFinished(self, *args):
        return self._obj.invoke("isNotFinished", _0_YACS_ORB.ProcExec._d_isNotFinished, args)

    def stopExecution(self, *args):
        return self._obj.invoke("stopExecution", _0_YACS_ORB.ProcExec._d_stopExecution, args)

    def saveState(self, *args):
        return self._obj.invoke("saveState", _0_YACS_ORB.ProcExec._d_saveState, args)

    def setStopOnError(self, *args):
        return self._obj.invoke("setStopOnError", _0_YACS_ORB.ProcExec._d_setStopOnError, args)

    def unsetStopOnError(self, *args):
        return self._obj.invoke("unsetStopOnError", _0_YACS_ORB.ProcExec._d_unsetStopOnError, args)

omniORB.registerObjref(ProcExec._NP_RepositoryId, _objref_ProcExec)
_0_YACS_ORB._objref_ProcExec = _objref_ProcExec
del ProcExec, _objref_ProcExec

# ProcExec skeleton
__name__ = "salome.kernel.YACS_ORB__POA"
class ProcExec (PortableServer.Servant):
    _NP_RepositoryId = _0_YACS_ORB.ProcExec._NP_RepositoryId


    _omni_op_d = {"getNodeState": _0_YACS_ORB.ProcExec._d_getNodeState, "getNodeProgress": _0_YACS_ORB.ProcExec._d_getNodeProgress, "getXMLState": _0_YACS_ORB.ProcExec._d_getXMLState, "getInPortValue": _0_YACS_ORB.ProcExec._d_getInPortValue, "setInPortValue": _0_YACS_ORB.ProcExec._d_setInPortValue, "getOutPortValue": _0_YACS_ORB.ProcExec._d_getOutPortValue, "getErrorDetails": _0_YACS_ORB.ProcExec._d_getErrorDetails, "getErrorReport": _0_YACS_ORB.ProcExec._d_getErrorReport, "getContainerLog": _0_YACS_ORB.ProcExec._d_getContainerLog, "shutdownProc": _0_YACS_ORB.ProcExec._d_shutdownProc, "getExecutorState": _0_YACS_ORB.ProcExec._d_getExecutorState, "getIds": _0_YACS_ORB.ProcExec._d_getIds, "getNumIds": _0_YACS_ORB.ProcExec._d_getNumIds, "getNames": _0_YACS_ORB.ProcExec._d_getNames, "Run": _0_YACS_ORB.ProcExec._d_Run, "RunFromState": _0_YACS_ORB.ProcExec._d_RunFromState, "RestartFromState": _0_YACS_ORB.ProcExec._d_RestartFromState, "addObserver": _0_YACS_ORB.ProcExec._d_addObserver, "setExecMode": _0_YACS_ORB.ProcExec._d_setExecMode, "setListOfBreakPoints": _0_YACS_ORB.ProcExec._d_setListOfBreakPoints, "getTasksToLoad": _0_YACS_ORB.ProcExec._d_getTasksToLoad, "setStepsToExecute": _0_YACS_ORB.ProcExec._d_setStepsToExecute, "resumeCurrentBreakPoint": _0_YACS_ORB.ProcExec._d_resumeCurrentBreakPoint, "isNotFinished": _0_YACS_ORB.ProcExec._d_isNotFinished, "stopExecution": _0_YACS_ORB.ProcExec._d_stopExecution, "saveState": _0_YACS_ORB.ProcExec._d_saveState, "setStopOnError": _0_YACS_ORB.ProcExec._d_setStopOnError, "unsetStopOnError": _0_YACS_ORB.ProcExec._d_unsetStopOnError}

ProcExec._omni_skeleton = ProcExec
_0_YACS_ORB__POA.ProcExec = ProcExec
omniORB.registerSkeleton(ProcExec._NP_RepositoryId, ProcExec)
del ProcExec
__name__ = "salome.kernel.YACS_ORB"

# interface YACS_Gen
_0_YACS_ORB._d_YACS_Gen = (omniORB.tcInternal.tv_objref, "IDL:YACS_ORB/YACS_Gen:1.0", "YACS_Gen")
omniORB.typeMapping["IDL:YACS_ORB/YACS_Gen:1.0"] = _0_YACS_ORB._d_YACS_Gen
_0_YACS_ORB.YACS_Gen = omniORB.newEmptyClass()
class YACS_Gen (_0_Engines.EngineComponent, _0_SALOMEDS.Driver):
    _NP_RepositoryId = _0_YACS_ORB._d_YACS_Gen[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_YACS_ORB.YACS_Gen = YACS_Gen
_0_YACS_ORB._tc_YACS_Gen = omniORB.tcInternal.createTypeCode(_0_YACS_ORB._d_YACS_Gen)
omniORB.registerType(YACS_Gen._NP_RepositoryId, _0_YACS_ORB._d_YACS_Gen, _0_YACS_ORB._tc_YACS_Gen)

# YACS_Gen operations and attributes
YACS_Gen._d_LoadProc = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:YACS_ORB/ProcExec:1.0"], ), None)
YACS_Gen._d_convertSupervFile = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)

# YACS_Gen object reference
class _objref_YACS_Gen (_0_Engines._objref_EngineComponent, _0_SALOMEDS._objref_Driver):
    _NP_RepositoryId = YACS_Gen._NP_RepositoryId

    def __init__(self, obj):
        _0_Engines._objref_EngineComponent.__init__(self, obj)
        _0_SALOMEDS._objref_Driver.__init__(self, obj)

    def LoadProc(self, *args):
        return self._obj.invoke("LoadProc", _0_YACS_ORB.YACS_Gen._d_LoadProc, args)

    def convertSupervFile(self, *args):
        return self._obj.invoke("convertSupervFile", _0_YACS_ORB.YACS_Gen._d_convertSupervFile, args)

omniORB.registerObjref(YACS_Gen._NP_RepositoryId, _objref_YACS_Gen)
_0_YACS_ORB._objref_YACS_Gen = _objref_YACS_Gen
del YACS_Gen, _objref_YACS_Gen

# YACS_Gen skeleton
__name__ = "salome.kernel.YACS_ORB__POA"
class YACS_Gen (_0_Engines__POA.EngineComponent, _0_SALOMEDS__POA.Driver):
    _NP_RepositoryId = _0_YACS_ORB.YACS_Gen._NP_RepositoryId


    _omni_op_d = {"LoadProc": _0_YACS_ORB.YACS_Gen._d_LoadProc, "convertSupervFile": _0_YACS_ORB.YACS_Gen._d_convertSupervFile}
    _omni_op_d.update(_0_Engines__POA.EngineComponent._omni_op_d)
    _omni_op_d.update(_0_SALOMEDS__POA.Driver._omni_op_d)

YACS_Gen._omni_skeleton = YACS_Gen
_0_YACS_ORB__POA.YACS_Gen = YACS_Gen
omniORB.registerSkeleton(YACS_Gen._NP_RepositoryId, YACS_Gen)
del YACS_Gen
__name__ = "salome.kernel.YACS_ORB"

#
# End of module "YACS_ORB"
#
__name__ = "salome.kernel.yacsgui_idl"

_exported_modules = ( "salome.kernel.YACS_ORB", )

# The end.

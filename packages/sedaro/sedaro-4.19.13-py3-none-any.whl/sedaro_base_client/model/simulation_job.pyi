# coding: utf-8

"""
    Sedaro API

     Allows for consumption of Sedaro services. Read more about Sedaro at [docs.sedaro.com](https://docs.sedaro.com).  ### Clients  **Python:** [sedaro](https://pypi.org/project/sedaro/) - This package provides additional functionality on top of the auto-generated OpenAPI client. See the package docs for more information.  ### API Key  To access the Sedaro service via this API, you will need an API key.  You can generate an API key for your account in the Sedaro [Management Console](https://satellite.sedaro.com/account). Once complete, pass the API key in all requests via the `X_API_KEY` HTTP header.  *API keys grant full access to your account and should never be shared. If you think your API key has been compromised, you can revoke it in the [Management Console](https://satellite.sedaro.com/account).*  ### Jupyter Notebooks  For additional examples of how to use this API for modeling and simulation, see our [Mod-Sim Notebooks](https://github.com/sedaro/modsim-notebooks).  ### Community, Support, Discussion  If you have any issues or suggestions, please reach out:  1. Join the Sedaro Community [Slack](https://join.slack.com/t/sedaro-community/shared_invite/zt-1jps4i711-mXy88AZQ9AV7YcEXr8x7Ow) 2. Email us at support@sedarotech.com  ### Known Issues  - Error responses are more specific than what is shown throughout the documentation.  A 4xx or 5xx error will be returned in all error cases.  Only a `200` status indicates success.  See a given error response for additional details.   # noqa: E501

    The version of the OpenAPI document: 4.11.36
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sedaro_base_client import schemas  # noqa: F401


class SimulationJob(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dataArray",
            "seed",
            "simIndex",
            "snapshotIDs",
            "overrideID",
            "bedRef",
            "startTime",
            "stopTime",
            "id",
            "scenarioHash",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class status(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            ServicesModelSpecModelsSimulationJobStatuses,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            bedRef = schemas.StrSchema
            dataArray = schemas.StrSchema
            seed = schemas.IntSchema
            simIndex = schemas.IntSchema
            overrideID = schemas.StrSchema
            
            
            class snapshotIDs(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'snapshotIDs':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            scenarioHash = schemas.StrSchema
            startTime = schemas.NumberSchema
            stopTime = schemas.NumberSchema
            realTime = schemas.BoolSchema
            progress = schemas.DictSchema
            __annotations__ = {
                "id": id,
                "status": status,
                "bedRef": bedRef,
                "dataArray": dataArray,
                "seed": seed,
                "simIndex": simIndex,
                "overrideID": overrideID,
                "snapshotIDs": snapshotIDs,
                "scenarioHash": scenarioHash,
                "startTime": startTime,
                "stopTime": stopTime,
                "realTime": realTime,
                "progress": progress,
            }
    
    dataArray: MetaOapg.properties.dataArray
    seed: MetaOapg.properties.seed
    simIndex: MetaOapg.properties.simIndex
    snapshotIDs: MetaOapg.properties.snapshotIDs
    overrideID: MetaOapg.properties.overrideID
    bedRef: MetaOapg.properties.bedRef
    startTime: MetaOapg.properties.startTime
    stopTime: MetaOapg.properties.stopTime
    id: MetaOapg.properties.id
    scenarioHash: MetaOapg.properties.scenarioHash
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bedRef"]) -> MetaOapg.properties.bedRef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataArray"]) -> MetaOapg.properties.dataArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seed"]) -> MetaOapg.properties.seed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["simIndex"]) -> MetaOapg.properties.simIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overrideID"]) -> MetaOapg.properties.overrideID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshotIDs"]) -> MetaOapg.properties.snapshotIDs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarioHash"]) -> MetaOapg.properties.scenarioHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopTime"]) -> MetaOapg.properties.stopTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["realTime"]) -> MetaOapg.properties.realTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progress"]) -> MetaOapg.properties.progress: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "bedRef", "dataArray", "seed", "simIndex", "overrideID", "snapshotIDs", "scenarioHash", "startTime", "stopTime", "realTime", "progress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bedRef"]) -> MetaOapg.properties.bedRef: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataArray"]) -> MetaOapg.properties.dataArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seed"]) -> MetaOapg.properties.seed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["simIndex"]) -> MetaOapg.properties.simIndex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overrideID"]) -> MetaOapg.properties.overrideID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshotIDs"]) -> MetaOapg.properties.snapshotIDs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarioHash"]) -> MetaOapg.properties.scenarioHash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopTime"]) -> MetaOapg.properties.stopTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["realTime"]) -> typing.Union[MetaOapg.properties.realTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> typing.Union[MetaOapg.properties.progress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "bedRef", "dataArray", "seed", "simIndex", "overrideID", "snapshotIDs", "scenarioHash", "startTime", "stopTime", "realTime", "progress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dataArray: typing.Union[MetaOapg.properties.dataArray, str, ],
        seed: typing.Union[MetaOapg.properties.seed, decimal.Decimal, int, ],
        simIndex: typing.Union[MetaOapg.properties.simIndex, decimal.Decimal, int, ],
        snapshotIDs: typing.Union[MetaOapg.properties.snapshotIDs, dict, frozendict.frozendict, ],
        overrideID: typing.Union[MetaOapg.properties.overrideID, str, ],
        bedRef: typing.Union[MetaOapg.properties.bedRef, str, ],
        startTime: typing.Union[MetaOapg.properties.startTime, decimal.Decimal, int, float, ],
        stopTime: typing.Union[MetaOapg.properties.stopTime, decimal.Decimal, int, float, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        scenarioHash: typing.Union[MetaOapg.properties.scenarioHash, str, ],
        status: typing.Union[MetaOapg.properties.status, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        realTime: typing.Union[MetaOapg.properties.realTime, bool, schemas.Unset] = schemas.unset,
        progress: typing.Union[MetaOapg.properties.progress, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SimulationJob':
        return super().__new__(
            cls,
            *_args,
            dataArray=dataArray,
            seed=seed,
            simIndex=simIndex,
            snapshotIDs=snapshotIDs,
            overrideID=overrideID,
            bedRef=bedRef,
            startTime=startTime,
            stopTime=stopTime,
            id=id,
            scenarioHash=scenarioHash,
            status=status,
            realTime=realTime,
            progress=progress,
            _configuration=_configuration,
            **kwargs,
        )

from sedaro_base_client.model.services_model_spec_models_simulation_job_statuses import ServicesModelSpecModelsSimulationJobStatuses

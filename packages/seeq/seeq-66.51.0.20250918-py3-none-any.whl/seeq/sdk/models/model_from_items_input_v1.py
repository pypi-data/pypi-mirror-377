# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.51.0-v202509181015-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ModelFromItemsInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'name': 'str',
        'referenced_output_items': 'list[ReferencedOutputItemV1]',
        'scoped_to': 'str'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'referenced_output_items': 'referencedOutputItems',
        'scoped_to': 'scopedTo'
    }

    def __init__(self, description=None, name=None, referenced_output_items=None, scoped_to=None):
        """
        ModelFromItemsInputV1 - a model defined in Swagger
        """

        self._description = None
        self._name = None
        self._referenced_output_items = None
        self._scoped_to = None

        if description is not None:
          self.description = description
        if name is not None:
          self.name = name
        if referenced_output_items is not None:
          self.referenced_output_items = referenced_output_items
        if scoped_to is not None:
          self.scoped_to = scoped_to

    @property
    def description(self):
        """
        Gets the description of this ModelFromItemsInputV1.
        Description of the model

        :return: The description of this ModelFromItemsInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ModelFromItemsInputV1.
        Description of the model

        :param description: The description of this ModelFromItemsInputV1.
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """
        Gets the name of this ModelFromItemsInputV1.
        Name of the model

        :return: The name of this ModelFromItemsInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ModelFromItemsInputV1.
        Name of the model

        :param name: The name of this ModelFromItemsInputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def referenced_output_items(self):
        """
        Gets the referenced_output_items of this ModelFromItemsInputV1.
        List of output IDs to be used for reference to create the model.

        :return: The referenced_output_items of this ModelFromItemsInputV1.
        :rtype: list[ReferencedOutputItemV1]
        """
        return self._referenced_output_items

    @referenced_output_items.setter
    def referenced_output_items(self, referenced_output_items):
        """
        Sets the referenced_output_items of this ModelFromItemsInputV1.
        List of output IDs to be used for reference to create the model.

        :param referenced_output_items: The referenced_output_items of this ModelFromItemsInputV1.
        :type: list[ReferencedOutputItemV1]
        """
        if referenced_output_items is None:
            raise ValueError("Invalid value for `referenced_output_items`, must not be `None`")

        self._referenced_output_items = referenced_output_items

    @property
    def scoped_to(self):
        """
        Gets the scoped_to of this ModelFromItemsInputV1.
        The ID of the workbook to which the model will be scoped. If not provided, the model will have a global scope

        :return: The scoped_to of this ModelFromItemsInputV1.
        :rtype: str
        """
        return self._scoped_to

    @scoped_to.setter
    def scoped_to(self, scoped_to):
        """
        Sets the scoped_to of this ModelFromItemsInputV1.
        The ID of the workbook to which the model will be scoped. If not provided, the model will have a global scope

        :param scoped_to: The scoped_to of this ModelFromItemsInputV1.
        :type: str
        """

        self._scoped_to = scoped_to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ModelFromItemsInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fb

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CameraIntrinsics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CameraIntrinsics()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCameraIntrinsics(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CameraIntrinsics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CameraIntrinsics
    def Header(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from seerep.fb.Header import Header
            obj = Header()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CameraIntrinsics
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CameraIntrinsics
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CameraIntrinsics
    def DistortionModel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CameraIntrinsics
    def Distortion(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CameraIntrinsics
    def DistortionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # CameraIntrinsics
    def DistortionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CameraIntrinsics
    def DistortionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # CameraIntrinsics
    def IntrinsicMatrix(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CameraIntrinsics
    def IntrinsicMatrixAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # CameraIntrinsics
    def IntrinsicMatrixLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CameraIntrinsics
    def IntrinsicMatrixIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # CameraIntrinsics
    def RectificationMatrix(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CameraIntrinsics
    def RectificationMatrixAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # CameraIntrinsics
    def RectificationMatrixLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CameraIntrinsics
    def RectificationMatrixIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # CameraIntrinsics
    def ProjectionMatrix(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CameraIntrinsics
    def ProjectionMatrixAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # CameraIntrinsics
    def ProjectionMatrixLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CameraIntrinsics
    def ProjectionMatrixIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # CameraIntrinsics
    def BinningX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CameraIntrinsics
    def BinningY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CameraIntrinsics
    def RegionOfInterest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from seerep.fb.RegionOfInterest import RegionOfInterest
            obj = RegionOfInterest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CameraIntrinsics
    def MaximumViewingDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(12)
def CameraIntrinsicsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddHeader(builder, header): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(header), 0)
def CameraIntrinsicsAddHeader(builder, header):
    """This method is deprecated. Please switch to AddHeader."""
    return AddHeader(builder, header)
def AddHeight(builder, height): builder.PrependUint32Slot(1, height, 0)
def CameraIntrinsicsAddHeight(builder, height):
    """This method is deprecated. Please switch to AddHeight."""
    return AddHeight(builder, height)
def AddWidth(builder, width): builder.PrependUint32Slot(2, width, 0)
def CameraIntrinsicsAddWidth(builder, width):
    """This method is deprecated. Please switch to AddWidth."""
    return AddWidth(builder, width)
def AddDistortionModel(builder, distortionModel): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(distortionModel), 0)
def CameraIntrinsicsAddDistortionModel(builder, distortionModel):
    """This method is deprecated. Please switch to AddDistortionModel."""
    return AddDistortionModel(builder, distortionModel)
def AddDistortion(builder, distortion): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(distortion), 0)
def CameraIntrinsicsAddDistortion(builder, distortion):
    """This method is deprecated. Please switch to AddDistortion."""
    return AddDistortion(builder, distortion)
def StartDistortionVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CameraIntrinsicsStartDistortionVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDistortionVector(builder, numElems)
def AddIntrinsicMatrix(builder, intrinsicMatrix): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(intrinsicMatrix), 0)
def CameraIntrinsicsAddIntrinsicMatrix(builder, intrinsicMatrix):
    """This method is deprecated. Please switch to AddIntrinsicMatrix."""
    return AddIntrinsicMatrix(builder, intrinsicMatrix)
def StartIntrinsicMatrixVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CameraIntrinsicsStartIntrinsicMatrixVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartIntrinsicMatrixVector(builder, numElems)
def AddRectificationMatrix(builder, rectificationMatrix): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rectificationMatrix), 0)
def CameraIntrinsicsAddRectificationMatrix(builder, rectificationMatrix):
    """This method is deprecated. Please switch to AddRectificationMatrix."""
    return AddRectificationMatrix(builder, rectificationMatrix)
def StartRectificationMatrixVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CameraIntrinsicsStartRectificationMatrixVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRectificationMatrixVector(builder, numElems)
def AddProjectionMatrix(builder, projectionMatrix): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(projectionMatrix), 0)
def CameraIntrinsicsAddProjectionMatrix(builder, projectionMatrix):
    """This method is deprecated. Please switch to AddProjectionMatrix."""
    return AddProjectionMatrix(builder, projectionMatrix)
def StartProjectionMatrixVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CameraIntrinsicsStartProjectionMatrixVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartProjectionMatrixVector(builder, numElems)
def AddBinningX(builder, binningX): builder.PrependUint32Slot(8, binningX, 0)
def CameraIntrinsicsAddBinningX(builder, binningX):
    """This method is deprecated. Please switch to AddBinningX."""
    return AddBinningX(builder, binningX)
def AddBinningY(builder, binningY): builder.PrependUint32Slot(9, binningY, 0)
def CameraIntrinsicsAddBinningY(builder, binningY):
    """This method is deprecated. Please switch to AddBinningY."""
    return AddBinningY(builder, binningY)
def AddRegionOfInterest(builder, regionOfInterest): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(regionOfInterest), 0)
def CameraIntrinsicsAddRegionOfInterest(builder, regionOfInterest):
    """This method is deprecated. Please switch to AddRegionOfInterest."""
    return AddRegionOfInterest(builder, regionOfInterest)
def AddMaximumViewingDistance(builder, maximumViewingDistance): builder.PrependFloat64Slot(11, maximumViewingDistance, 0.0)
def CameraIntrinsicsAddMaximumViewingDistance(builder, maximumViewingDistance):
    """This method is deprecated. Please switch to AddMaximumViewingDistance."""
    return AddMaximumViewingDistance(builder, maximumViewingDistance)
def End(builder): return builder.EndObject()
def CameraIntrinsicsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
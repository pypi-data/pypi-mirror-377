# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fb

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PointCloud2(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PointCloud2()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPointCloud2(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PointCloud2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PointCloud2
    def Header(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from seerep.fb.Header import Header
            obj = Header()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PointCloud2
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PointCloud2
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PointCloud2
    def Fields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from seerep.fb.PointField import PointField
            obj = PointField()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PointCloud2
    def FieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PointCloud2
    def FieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # PointCloud2
    def IsBigendian(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PointCloud2
    def PointStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PointCloud2
    def RowStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PointCloud2
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # PointCloud2
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # PointCloud2
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PointCloud2
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # PointCloud2
    def IsDense(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PointCloud2
    def Labels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from seerep.fb.LabelCategory import LabelCategory
            obj = LabelCategory()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PointCloud2
    def LabelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PointCloud2
    def LabelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def Start(builder): builder.StartObject(10)
def PointCloud2Start(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddHeader(builder, header): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(header), 0)
def PointCloud2AddHeader(builder, header):
    """This method is deprecated. Please switch to AddHeader."""
    return AddHeader(builder, header)
def AddHeight(builder, height): builder.PrependUint32Slot(1, height, 0)
def PointCloud2AddHeight(builder, height):
    """This method is deprecated. Please switch to AddHeight."""
    return AddHeight(builder, height)
def AddWidth(builder, width): builder.PrependUint32Slot(2, width, 0)
def PointCloud2AddWidth(builder, width):
    """This method is deprecated. Please switch to AddWidth."""
    return AddWidth(builder, width)
def AddFields(builder, fields): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fields), 0)
def PointCloud2AddFields(builder, fields):
    """This method is deprecated. Please switch to AddFields."""
    return AddFields(builder, fields)
def StartFieldsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PointCloud2StartFieldsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartFieldsVector(builder, numElems)
def AddIsBigendian(builder, isBigendian): builder.PrependBoolSlot(4, isBigendian, 0)
def PointCloud2AddIsBigendian(builder, isBigendian):
    """This method is deprecated. Please switch to AddIsBigendian."""
    return AddIsBigendian(builder, isBigendian)
def AddPointStep(builder, pointStep): builder.PrependUint32Slot(5, pointStep, 0)
def PointCloud2AddPointStep(builder, pointStep):
    """This method is deprecated. Please switch to AddPointStep."""
    return AddPointStep(builder, pointStep)
def AddRowStep(builder, rowStep): builder.PrependUint32Slot(6, rowStep, 0)
def PointCloud2AddRowStep(builder, rowStep):
    """This method is deprecated. Please switch to AddRowStep."""
    return AddRowStep(builder, rowStep)
def AddData(builder, data): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def PointCloud2AddData(builder, data):
    """This method is deprecated. Please switch to AddData."""
    return AddData(builder, data)
def StartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def PointCloud2StartDataVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDataVector(builder, numElems)
def AddIsDense(builder, isDense): builder.PrependBoolSlot(8, isDense, 0)
def PointCloud2AddIsDense(builder, isDense):
    """This method is deprecated. Please switch to AddIsDense."""
    return AddIsDense(builder, isDense)
def AddLabels(builder, labels): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(labels), 0)
def PointCloud2AddLabels(builder, labels):
    """This method is deprecated. Please switch to AddLabels."""
    return AddLabels(builder, labels)
def StartLabelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PointCloud2StartLabelsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartLabelsVector(builder, numElems)
def End(builder): return builder.EndObject()
def PointCloud2End(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
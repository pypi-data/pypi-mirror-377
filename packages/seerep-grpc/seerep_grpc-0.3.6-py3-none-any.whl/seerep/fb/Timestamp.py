# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fb

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Timestamp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Timestamp()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTimestamp(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Timestamp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Timestamp
    def Seconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Timestamp
    def Nanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(2)
def TimestampStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSeconds(builder, seconds): builder.PrependInt32Slot(0, seconds, 0)
def TimestampAddSeconds(builder, seconds):
    """This method is deprecated. Please switch to AddSeconds."""
    return AddSeconds(builder, seconds)
def AddNanos(builder, nanos): builder.PrependUint32Slot(1, nanos, 0)
def TimestampAddNanos(builder, nanos):
    """This method is deprecated. Please switch to AddNanos."""
    return AddNanos(builder, nanos)
def End(builder): return builder.EndObject()
def TimestampEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
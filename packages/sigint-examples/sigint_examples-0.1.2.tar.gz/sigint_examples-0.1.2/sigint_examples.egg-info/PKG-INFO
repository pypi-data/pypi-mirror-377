Metadata-Version: 2.4
Name: sigint_examples
Version: 0.1.2
Summary: Python SIGINT simulations and analysis tools
Author-email: Jackson Walters <jackson@jacksonwalters.com>
License: MIT License
        
        Copyright (c) 2025 Jackson Walters
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/jacksonwalters/SIGINT
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# SIGINT
[![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)
![basic-tests](https://github.com/jacksonwalters/SIGINT/actions/workflows/python-tests.yml/badge.svg)
![PyPI version](https://img.shields.io/pypi/v/sigint-examples?logo=pypi)
![Python Version](https://img.shields.io/pypi/pyversions/sigint-examples)

A collection of Python modules and tests serving as an introduction to SIGINT (signal intelligence) techniques.

## Dependencies

```bash
pip install -r requirements.txt
```

## Testing

```bash
python -m pytest
```

## Basic Workflow

- `sigint_examples/basic_workflow.py`: generate pulse train, add Gaussian noise, use autocorrelation to estimate PRI

```bash
python -m sigint_examples.basic_workflow --show-plots
```

## Tests

```
python -m pytest tests/test_<specific-case>.py --show-plots
```

- `tests/test_amplitude_modulation.py`: generate a sequence of amplitude-moduled pulses, use filtering and autocorrelation to estimate PRI (pulse repitition interval)
- `tests/test_chirped_pulses.py`: simulates a noisy train of linear chirped pulses, applies a matched filter and autocorrelation to analyze it, and then estimates the PRI and pulse width from the matched filter output
- `tests/test_irregular_pulse_detection.py`: simulates a noisy pulse train with random PRI jitter, applies matched filtering and autocorrelation, and then estimates the mean and variability of the PRI from the detected pulses
- `tests/test_gaussian_jittered.py`: simulates a noisy pulse train with Gaussian PRI jitter, detects the pulses using matched filtering, and estimates the mean and standard deviation of the PRI (with outlier rejection) while visualizing the signal, matched filter output, and PRI statistics over time
- `tests/test_multi_emitter_noisy_jitter.py`: simulates two noisy pulse trains with different PRIs and jitter, combines them, and uses autocorrelation with peak detection and harmonic rejection to estimate the fundamental PRIs of both emitters
- `tests/test_noisy_multi_emitter_jitter.py`: simulates two overlapping pulse trains with different PRIs in noise and uses smoothed autocorrelation with peak detection and harmonic rejection to estimate their fundamental PRIs
- `tests/test_time_difference_of_arrival.py`: simulates two noisy pulse trains received at different times and estimates the delay between them using cross-correlation
- `tests/test_two_pulse_trains.py`: simulates two overlapping pulse trains with different PRIs and uses autocorrelation with harmonic rejection to estimate their fundamental repetition intervals

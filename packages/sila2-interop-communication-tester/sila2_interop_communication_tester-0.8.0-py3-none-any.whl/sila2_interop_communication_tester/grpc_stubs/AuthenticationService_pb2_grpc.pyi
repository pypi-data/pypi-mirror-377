"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import AuthenticationService_pb2
import abc
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AuthenticationServiceStub:
    """This Feature provides SiLA Clients with access tokens based on a user identification and password. 1. the user needs to login with the Login command into the server with a user identification (=user name) and a password 2. after verification, an Access Token with the Token Lifetime information will be generated and provided by the server. 3. the user can log-out from the server with the Logout command - a valid Access Token is required to run this command."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Login: grpc.UnaryUnaryMultiCallable[
        AuthenticationService_pb2.Login_Parameters,
        AuthenticationService_pb2.Login_Responses,
    ]
    """Provides an access token based on user information."""

    Logout: grpc.UnaryUnaryMultiCallable[
        AuthenticationService_pb2.Logout_Parameters,
        AuthenticationService_pb2.Logout_Responses,
    ]
    """Invalidates the given access token immediately."""

class AuthenticationServiceAsyncStub:
    """This Feature provides SiLA Clients with access tokens based on a user identification and password. 1. the user needs to login with the Login command into the server with a user identification (=user name) and a password 2. after verification, an Access Token with the Token Lifetime information will be generated and provided by the server. 3. the user can log-out from the server with the Logout command - a valid Access Token is required to run this command."""

    Login: grpc.aio.UnaryUnaryMultiCallable[
        AuthenticationService_pb2.Login_Parameters,
        AuthenticationService_pb2.Login_Responses,
    ]
    """Provides an access token based on user information."""

    Logout: grpc.aio.UnaryUnaryMultiCallable[
        AuthenticationService_pb2.Logout_Parameters,
        AuthenticationService_pb2.Logout_Responses,
    ]
    """Invalidates the given access token immediately."""

class AuthenticationServiceServicer(metaclass=abc.ABCMeta):
    """This Feature provides SiLA Clients with access tokens based on a user identification and password. 1. the user needs to login with the Login command into the server with a user identification (=user name) and a password 2. after verification, an Access Token with the Token Lifetime information will be generated and provided by the server. 3. the user can log-out from the server with the Logout command - a valid Access Token is required to run this command."""

    @abc.abstractmethod
    def Login(
        self,
        request: AuthenticationService_pb2.Login_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[AuthenticationService_pb2.Login_Responses, collections.abc.Awaitable[AuthenticationService_pb2.Login_Responses]]:
        """Provides an access token based on user information."""

    @abc.abstractmethod
    def Logout(
        self,
        request: AuthenticationService_pb2.Logout_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[AuthenticationService_pb2.Logout_Responses, collections.abc.Awaitable[AuthenticationService_pb2.Logout_Responses]]:
        """Invalidates the given access token immediately."""

def add_AuthenticationServiceServicer_to_server(servicer: AuthenticationServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

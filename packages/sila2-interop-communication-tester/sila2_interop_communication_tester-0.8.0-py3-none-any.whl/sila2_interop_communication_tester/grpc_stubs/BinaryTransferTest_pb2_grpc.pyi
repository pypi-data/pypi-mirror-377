"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import BinaryTransferTest_pb2
import SiLAFramework_pb2
import abc
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class BinaryTransferTestStub:
    """Provides commands and properties to set or respectively get the SiLA Basic Data Type Binary via command parameters or property responses respectively."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    EchoBinaryValue: grpc.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.EchoBinaryValue_Parameters,
        BinaryTransferTest_pb2.EchoBinaryValue_Responses,
    ]
    """Receives a Binary value (transmitted either directly or via binary transfer) and returns the received value."""

    EchoBinariesObservably: grpc.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.EchoBinariesObservably_Parameters,
        SiLAFramework_pb2.CommandConfirmation,
    ]
    """Receives a list of binaries, echoes them individually as intermediate responses with a delay of 1 second, and then returns them as a single joint binary"""

    EchoBinariesObservably_Info: grpc.UnaryStreamMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        SiLAFramework_pb2.ExecutionInfo,
    ]
    """Monitor the state of EchoBinariesObservably"""

    EchoBinariesObservably_Intermediate: grpc.UnaryStreamMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        BinaryTransferTest_pb2.EchoBinariesObservably_IntermediateResponses,
    ]
    """Retrieve intermediate responses of EchoBinariesObservably"""

    EchoBinariesObservably_Result: grpc.UnaryUnaryMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        BinaryTransferTest_pb2.EchoBinariesObservably_Responses,
    ]
    """Retrieve result of EchoBinariesObservably"""

    EchoBinaryAndMetadataString: grpc.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.EchoBinaryAndMetadataString_Parameters,
        BinaryTransferTest_pb2.EchoBinaryAndMetadataString_Responses,
    ]
    """Receives a Binary and requires String Metadata, returns both"""

    Get_BinaryValueDirectly: grpc.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.Get_BinaryValueDirectly_Parameters,
        BinaryTransferTest_pb2.Get_BinaryValueDirectly_Responses,
    ]
    """Returns the UTF-8 encoded string 'SiLA2_Test_String_Value' directly transmitted as Binary value."""

    Get_BinaryValueDownload: grpc.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.Get_BinaryValueDownload_Parameters,
        BinaryTransferTest_pb2.Get_BinaryValueDownload_Responses,
    ]
    """
    Returns the Binary Transfer UUID to be used to download the binary data which is the UTF-8 encoded string
    'A_slightly_longer_SiLA2_Test_String_Value_used_to_demonstrate_the_binary_download', repeated 100,000 times.
    """

    Get_FCPAffectedByMetadata_String: grpc.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.Get_FCPAffectedByMetadata_String_Parameters,
        BinaryTransferTest_pb2.Get_FCPAffectedByMetadata_String_Responses,
    ]
    """Get fully qualified identifiers of all features, commands and properties affected by String"""

class BinaryTransferTestAsyncStub:
    """Provides commands and properties to set or respectively get the SiLA Basic Data Type Binary via command parameters or property responses respectively."""

    EchoBinaryValue: grpc.aio.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.EchoBinaryValue_Parameters,
        BinaryTransferTest_pb2.EchoBinaryValue_Responses,
    ]
    """Receives a Binary value (transmitted either directly or via binary transfer) and returns the received value."""

    EchoBinariesObservably: grpc.aio.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.EchoBinariesObservably_Parameters,
        SiLAFramework_pb2.CommandConfirmation,
    ]
    """Receives a list of binaries, echoes them individually as intermediate responses with a delay of 1 second, and then returns them as a single joint binary"""

    EchoBinariesObservably_Info: grpc.aio.UnaryStreamMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        SiLAFramework_pb2.ExecutionInfo,
    ]
    """Monitor the state of EchoBinariesObservably"""

    EchoBinariesObservably_Intermediate: grpc.aio.UnaryStreamMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        BinaryTransferTest_pb2.EchoBinariesObservably_IntermediateResponses,
    ]
    """Retrieve intermediate responses of EchoBinariesObservably"""

    EchoBinariesObservably_Result: grpc.aio.UnaryUnaryMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        BinaryTransferTest_pb2.EchoBinariesObservably_Responses,
    ]
    """Retrieve result of EchoBinariesObservably"""

    EchoBinaryAndMetadataString: grpc.aio.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.EchoBinaryAndMetadataString_Parameters,
        BinaryTransferTest_pb2.EchoBinaryAndMetadataString_Responses,
    ]
    """Receives a Binary and requires String Metadata, returns both"""

    Get_BinaryValueDirectly: grpc.aio.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.Get_BinaryValueDirectly_Parameters,
        BinaryTransferTest_pb2.Get_BinaryValueDirectly_Responses,
    ]
    """Returns the UTF-8 encoded string 'SiLA2_Test_String_Value' directly transmitted as Binary value."""

    Get_BinaryValueDownload: grpc.aio.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.Get_BinaryValueDownload_Parameters,
        BinaryTransferTest_pb2.Get_BinaryValueDownload_Responses,
    ]
    """
    Returns the Binary Transfer UUID to be used to download the binary data which is the UTF-8 encoded string
    'A_slightly_longer_SiLA2_Test_String_Value_used_to_demonstrate_the_binary_download', repeated 100,000 times.
    """

    Get_FCPAffectedByMetadata_String: grpc.aio.UnaryUnaryMultiCallable[
        BinaryTransferTest_pb2.Get_FCPAffectedByMetadata_String_Parameters,
        BinaryTransferTest_pb2.Get_FCPAffectedByMetadata_String_Responses,
    ]
    """Get fully qualified identifiers of all features, commands and properties affected by String"""

class BinaryTransferTestServicer(metaclass=abc.ABCMeta):
    """Provides commands and properties to set or respectively get the SiLA Basic Data Type Binary via command parameters or property responses respectively."""

    @abc.abstractmethod
    def EchoBinaryValue(
        self,
        request: BinaryTransferTest_pb2.EchoBinaryValue_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[BinaryTransferTest_pb2.EchoBinaryValue_Responses, collections.abc.Awaitable[BinaryTransferTest_pb2.EchoBinaryValue_Responses]]:
        """Receives a Binary value (transmitted either directly or via binary transfer) and returns the received value."""

    @abc.abstractmethod
    def EchoBinariesObservably(
        self,
        request: BinaryTransferTest_pb2.EchoBinariesObservably_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[SiLAFramework_pb2.CommandConfirmation, collections.abc.Awaitable[SiLAFramework_pb2.CommandConfirmation]]:
        """Receives a list of binaries, echoes them individually as intermediate responses with a delay of 1 second, and then returns them as a single joint binary"""

    @abc.abstractmethod
    def EchoBinariesObservably_Info(
        self,
        request: SiLAFramework_pb2.CommandExecutionUUID,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[SiLAFramework_pb2.ExecutionInfo], collections.abc.AsyncIterator[SiLAFramework_pb2.ExecutionInfo]]:
        """Monitor the state of EchoBinariesObservably"""

    @abc.abstractmethod
    def EchoBinariesObservably_Intermediate(
        self,
        request: SiLAFramework_pb2.CommandExecutionUUID,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[BinaryTransferTest_pb2.EchoBinariesObservably_IntermediateResponses], collections.abc.AsyncIterator[BinaryTransferTest_pb2.EchoBinariesObservably_IntermediateResponses]]:
        """Retrieve intermediate responses of EchoBinariesObservably"""

    @abc.abstractmethod
    def EchoBinariesObservably_Result(
        self,
        request: SiLAFramework_pb2.CommandExecutionUUID,
        context: _ServicerContext,
    ) -> typing.Union[BinaryTransferTest_pb2.EchoBinariesObservably_Responses, collections.abc.Awaitable[BinaryTransferTest_pb2.EchoBinariesObservably_Responses]]:
        """Retrieve result of EchoBinariesObservably"""

    @abc.abstractmethod
    def EchoBinaryAndMetadataString(
        self,
        request: BinaryTransferTest_pb2.EchoBinaryAndMetadataString_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[BinaryTransferTest_pb2.EchoBinaryAndMetadataString_Responses, collections.abc.Awaitable[BinaryTransferTest_pb2.EchoBinaryAndMetadataString_Responses]]:
        """Receives a Binary and requires String Metadata, returns both"""

    @abc.abstractmethod
    def Get_BinaryValueDirectly(
        self,
        request: BinaryTransferTest_pb2.Get_BinaryValueDirectly_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[BinaryTransferTest_pb2.Get_BinaryValueDirectly_Responses, collections.abc.Awaitable[BinaryTransferTest_pb2.Get_BinaryValueDirectly_Responses]]:
        """Returns the UTF-8 encoded string 'SiLA2_Test_String_Value' directly transmitted as Binary value."""

    @abc.abstractmethod
    def Get_BinaryValueDownload(
        self,
        request: BinaryTransferTest_pb2.Get_BinaryValueDownload_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[BinaryTransferTest_pb2.Get_BinaryValueDownload_Responses, collections.abc.Awaitable[BinaryTransferTest_pb2.Get_BinaryValueDownload_Responses]]:
        """
        Returns the Binary Transfer UUID to be used to download the binary data which is the UTF-8 encoded string
        'A_slightly_longer_SiLA2_Test_String_Value_used_to_demonstrate_the_binary_download', repeated 100,000 times.
        """

    @abc.abstractmethod
    def Get_FCPAffectedByMetadata_String(
        self,
        request: BinaryTransferTest_pb2.Get_FCPAffectedByMetadata_String_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[BinaryTransferTest_pb2.Get_FCPAffectedByMetadata_String_Responses, collections.abc.Awaitable[BinaryTransferTest_pb2.Get_FCPAffectedByMetadata_String_Responses]]:
        """Get fully qualified identifiers of all features, commands and properties affected by String"""

def add_BinaryTransferTestServicer_to_server(servicer: BinaryTransferTestServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

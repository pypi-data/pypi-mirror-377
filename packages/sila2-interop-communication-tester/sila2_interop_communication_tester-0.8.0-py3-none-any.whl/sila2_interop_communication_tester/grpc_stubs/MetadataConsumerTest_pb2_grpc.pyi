"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import MetadataConsumerTest_pb2
import abc
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class MetadataConsumerTestStub:
    """This feature consumes SiLA Client Metadata from the "Metadata Provider" feature."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    EchoStringMetadata: grpc.UnaryUnaryMultiCallable[
        MetadataConsumerTest_pb2.EchoStringMetadata_Parameters,
        MetadataConsumerTest_pb2.EchoStringMetadata_Responses,
    ]
    """Expects the "String Metadata" metadata from the "Metadata Provider" feature and responds with the metadata value."""

    UnpackMetadata: grpc.UnaryUnaryMultiCallable[
        MetadataConsumerTest_pb2.UnpackMetadata_Parameters,
        MetadataConsumerTest_pb2.UnpackMetadata_Responses,
    ]
    """Expects the "String Metadata" and "Two Integers Metadata" metadata from the "Metadata Provider" feature and responds with all three data items."""

    Get_ReceivedStringMetadata: grpc.UnaryUnaryMultiCallable[
        MetadataConsumerTest_pb2.Get_ReceivedStringMetadata_Parameters,
        MetadataConsumerTest_pb2.Get_ReceivedStringMetadata_Responses,
    ]
    """Expects the "String Metadata" metadata from the "Metadata Provider" feature and returns the metadata value."""

    Subscribe_ReceivedStringMetadataAsCharacters: grpc.UnaryStreamMultiCallable[
        MetadataConsumerTest_pb2.Subscribe_ReceivedStringMetadataAsCharacters_Parameters,
        MetadataConsumerTest_pb2.Subscribe_ReceivedStringMetadataAsCharacters_Responses,
    ]
    """Expects the "String Metadata" metadata from the "Metadata Provider" feature and returns all characters of its string value as separate responses."""

class MetadataConsumerTestAsyncStub:
    """This feature consumes SiLA Client Metadata from the "Metadata Provider" feature."""

    EchoStringMetadata: grpc.aio.UnaryUnaryMultiCallable[
        MetadataConsumerTest_pb2.EchoStringMetadata_Parameters,
        MetadataConsumerTest_pb2.EchoStringMetadata_Responses,
    ]
    """Expects the "String Metadata" metadata from the "Metadata Provider" feature and responds with the metadata value."""

    UnpackMetadata: grpc.aio.UnaryUnaryMultiCallable[
        MetadataConsumerTest_pb2.UnpackMetadata_Parameters,
        MetadataConsumerTest_pb2.UnpackMetadata_Responses,
    ]
    """Expects the "String Metadata" and "Two Integers Metadata" metadata from the "Metadata Provider" feature and responds with all three data items."""

    Get_ReceivedStringMetadata: grpc.aio.UnaryUnaryMultiCallable[
        MetadataConsumerTest_pb2.Get_ReceivedStringMetadata_Parameters,
        MetadataConsumerTest_pb2.Get_ReceivedStringMetadata_Responses,
    ]
    """Expects the "String Metadata" metadata from the "Metadata Provider" feature and returns the metadata value."""

    Subscribe_ReceivedStringMetadataAsCharacters: grpc.aio.UnaryStreamMultiCallable[
        MetadataConsumerTest_pb2.Subscribe_ReceivedStringMetadataAsCharacters_Parameters,
        MetadataConsumerTest_pb2.Subscribe_ReceivedStringMetadataAsCharacters_Responses,
    ]
    """Expects the "String Metadata" metadata from the "Metadata Provider" feature and returns all characters of its string value as separate responses."""

class MetadataConsumerTestServicer(metaclass=abc.ABCMeta):
    """This feature consumes SiLA Client Metadata from the "Metadata Provider" feature."""

    @abc.abstractmethod
    def EchoStringMetadata(
        self,
        request: MetadataConsumerTest_pb2.EchoStringMetadata_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[MetadataConsumerTest_pb2.EchoStringMetadata_Responses, collections.abc.Awaitable[MetadataConsumerTest_pb2.EchoStringMetadata_Responses]]:
        """Expects the "String Metadata" metadata from the "Metadata Provider" feature and responds with the metadata value."""

    @abc.abstractmethod
    def UnpackMetadata(
        self,
        request: MetadataConsumerTest_pb2.UnpackMetadata_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[MetadataConsumerTest_pb2.UnpackMetadata_Responses, collections.abc.Awaitable[MetadataConsumerTest_pb2.UnpackMetadata_Responses]]:
        """Expects the "String Metadata" and "Two Integers Metadata" metadata from the "Metadata Provider" feature and responds with all three data items."""

    @abc.abstractmethod
    def Get_ReceivedStringMetadata(
        self,
        request: MetadataConsumerTest_pb2.Get_ReceivedStringMetadata_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[MetadataConsumerTest_pb2.Get_ReceivedStringMetadata_Responses, collections.abc.Awaitable[MetadataConsumerTest_pb2.Get_ReceivedStringMetadata_Responses]]:
        """Expects the "String Metadata" metadata from the "Metadata Provider" feature and returns the metadata value."""

    @abc.abstractmethod
    def Subscribe_ReceivedStringMetadataAsCharacters(
        self,
        request: MetadataConsumerTest_pb2.Subscribe_ReceivedStringMetadataAsCharacters_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[MetadataConsumerTest_pb2.Subscribe_ReceivedStringMetadataAsCharacters_Responses], collections.abc.AsyncIterator[MetadataConsumerTest_pb2.Subscribe_ReceivedStringMetadataAsCharacters_Responses]]:
        """Expects the "String Metadata" metadata from the "Metadata Provider" feature and returns all characters of its string value as separate responses."""

def add_MetadataConsumerTestServicer_to_server(servicer: MetadataConsumerTestServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

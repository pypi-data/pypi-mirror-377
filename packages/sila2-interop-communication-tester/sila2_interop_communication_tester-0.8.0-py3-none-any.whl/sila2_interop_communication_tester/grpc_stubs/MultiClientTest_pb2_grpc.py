# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import MultiClientTest_pb2 as MultiClientTest__pb2
import SiLAFramework_pb2 as SiLAFramework__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in MultiClientTest_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MultiClientTestStub(object):
    """This is a feature to test different server behaviors when multiple clients request execution of the same command. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunInParallel = channel.unary_unary(
                '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunInParallel',
                request_serializer=MultiClientTest__pb2.RunInParallel_Parameters.SerializeToString,
                response_deserializer=SiLAFramework__pb2.CommandConfirmation.FromString,
                _registered_method=True)
        self.RunInParallel_Info = channel.unary_stream(
                '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunInParallel_Info',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=SiLAFramework__pb2.ExecutionInfo.FromString,
                _registered_method=True)
        self.RunInParallel_Result = channel.unary_unary(
                '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunInParallel_Result',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=MultiClientTest__pb2.RunInParallel_Responses.FromString,
                _registered_method=True)
        self.RunQueued = channel.unary_unary(
                '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunQueued',
                request_serializer=MultiClientTest__pb2.RunQueued_Parameters.SerializeToString,
                response_deserializer=SiLAFramework__pb2.CommandConfirmation.FromString,
                _registered_method=True)
        self.RunQueued_Info = channel.unary_stream(
                '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunQueued_Info',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=SiLAFramework__pb2.ExecutionInfo.FromString,
                _registered_method=True)
        self.RunQueued_Result = channel.unary_unary(
                '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunQueued_Result',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=MultiClientTest__pb2.RunQueued_Responses.FromString,
                _registered_method=True)
        self.RejectParallelExecution = channel.unary_unary(
                '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RejectParallelExecution',
                request_serializer=MultiClientTest__pb2.RejectParallelExecution_Parameters.SerializeToString,
                response_deserializer=SiLAFramework__pb2.CommandConfirmation.FromString,
                _registered_method=True)
        self.RejectParallelExecution_Info = channel.unary_stream(
                '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RejectParallelExecution_Info',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=SiLAFramework__pb2.ExecutionInfo.FromString,
                _registered_method=True)
        self.RejectParallelExecution_Result = channel.unary_unary(
                '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RejectParallelExecution_Result',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=MultiClientTest__pb2.RejectParallelExecution_Responses.FromString,
                _registered_method=True)


class MultiClientTestServicer(object):
    """This is a feature to test different server behaviors when multiple clients request execution of the same command. 
    """

    def RunInParallel(self, request, context):
        """Multiple invocations of this command will be running in parallel 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunInParallel_Info(self, request, context):
        """Monitor the state of RunInParallel 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunInParallel_Result(self, request, context):
        """Retrieve result of RunInParallel 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunQueued(self, request, context):
        """Multiple invocations of this command will be queued 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunQueued_Info(self, request, context):
        """Monitor the state of RunQueued 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunQueued_Result(self, request, context):
        """Retrieve result of RunQueued 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectParallelExecution(self, request, context):
        """Invocations will be rejected, if there is another command instance already running 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectParallelExecution_Info(self, request, context):
        """Monitor the state of RejectParallelExecution 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectParallelExecution_Result(self, request, context):
        """Retrieve result of RejectParallelExecution 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MultiClientTestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunInParallel': grpc.unary_unary_rpc_method_handler(
                    servicer.RunInParallel,
                    request_deserializer=MultiClientTest__pb2.RunInParallel_Parameters.FromString,
                    response_serializer=SiLAFramework__pb2.CommandConfirmation.SerializeToString,
            ),
            'RunInParallel_Info': grpc.unary_stream_rpc_method_handler(
                    servicer.RunInParallel_Info,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=SiLAFramework__pb2.ExecutionInfo.SerializeToString,
            ),
            'RunInParallel_Result': grpc.unary_unary_rpc_method_handler(
                    servicer.RunInParallel_Result,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=MultiClientTest__pb2.RunInParallel_Responses.SerializeToString,
            ),
            'RunQueued': grpc.unary_unary_rpc_method_handler(
                    servicer.RunQueued,
                    request_deserializer=MultiClientTest__pb2.RunQueued_Parameters.FromString,
                    response_serializer=SiLAFramework__pb2.CommandConfirmation.SerializeToString,
            ),
            'RunQueued_Info': grpc.unary_stream_rpc_method_handler(
                    servicer.RunQueued_Info,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=SiLAFramework__pb2.ExecutionInfo.SerializeToString,
            ),
            'RunQueued_Result': grpc.unary_unary_rpc_method_handler(
                    servicer.RunQueued_Result,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=MultiClientTest__pb2.RunQueued_Responses.SerializeToString,
            ),
            'RejectParallelExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.RejectParallelExecution,
                    request_deserializer=MultiClientTest__pb2.RejectParallelExecution_Parameters.FromString,
                    response_serializer=SiLAFramework__pb2.CommandConfirmation.SerializeToString,
            ),
            'RejectParallelExecution_Info': grpc.unary_stream_rpc_method_handler(
                    servicer.RejectParallelExecution_Info,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=SiLAFramework__pb2.ExecutionInfo.SerializeToString,
            ),
            'RejectParallelExecution_Result': grpc.unary_unary_rpc_method_handler(
                    servicer.RejectParallelExecution_Result,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=MultiClientTest__pb2.RejectParallelExecution_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MultiClientTest(object):
    """This is a feature to test different server behaviors when multiple clients request execution of the same command. 
    """

    @staticmethod
    def RunInParallel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunInParallel',
            MultiClientTest__pb2.RunInParallel_Parameters.SerializeToString,
            SiLAFramework__pb2.CommandConfirmation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunInParallel_Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunInParallel_Info',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            SiLAFramework__pb2.ExecutionInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunInParallel_Result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunInParallel_Result',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            MultiClientTest__pb2.RunInParallel_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunQueued(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunQueued',
            MultiClientTest__pb2.RunQueued_Parameters.SerializeToString,
            SiLAFramework__pb2.CommandConfirmation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunQueued_Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunQueued_Info',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            SiLAFramework__pb2.ExecutionInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunQueued_Result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RunQueued_Result',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            MultiClientTest__pb2.RunQueued_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RejectParallelExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RejectParallelExecution',
            MultiClientTest__pb2.RejectParallelExecution_Parameters.SerializeToString,
            SiLAFramework__pb2.CommandConfirmation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RejectParallelExecution_Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RejectParallelExecution_Info',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            SiLAFramework__pb2.ExecutionInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RejectParallelExecution_Result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sila2.org.silastandard.test.multiclienttest.v1.MultiClientTest/RejectParallelExecution_Result',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            MultiClientTest__pb2.RejectParallelExecution_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ObservableCommandTest_pb2 as ObservableCommandTest__pb2
import SiLAFramework_pb2 as SiLAFramework__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ObservableCommandTest_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ObservableCommandTestStub(object):
    """This is a test feature to test observable commands. It specifies various observable commands and returns defined answers to validate against. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Count = channel.unary_unary(
                '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/Count',
                request_serializer=ObservableCommandTest__pb2.Count_Parameters.SerializeToString,
                response_deserializer=SiLAFramework__pb2.CommandConfirmation.FromString,
                _registered_method=True)
        self.Count_Info = channel.unary_stream(
                '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/Count_Info',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=SiLAFramework__pb2.ExecutionInfo.FromString,
                _registered_method=True)
        self.Count_Intermediate = channel.unary_stream(
                '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/Count_Intermediate',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=ObservableCommandTest__pb2.Count_IntermediateResponses.FromString,
                _registered_method=True)
        self.Count_Result = channel.unary_unary(
                '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/Count_Result',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=ObservableCommandTest__pb2.Count_Responses.FromString,
                _registered_method=True)
        self.EchoValueAfterDelay = channel.unary_unary(
                '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/EchoValueAfterDelay',
                request_serializer=ObservableCommandTest__pb2.EchoValueAfterDelay_Parameters.SerializeToString,
                response_deserializer=SiLAFramework__pb2.CommandConfirmation.FromString,
                _registered_method=True)
        self.EchoValueAfterDelay_Info = channel.unary_stream(
                '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/EchoValueAfterDelay_Info',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=SiLAFramework__pb2.ExecutionInfo.FromString,
                _registered_method=True)
        self.EchoValueAfterDelay_Result = channel.unary_unary(
                '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/EchoValueAfterDelay_Result',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=ObservableCommandTest__pb2.EchoValueAfterDelay_Responses.FromString,
                _registered_method=True)


class ObservableCommandTestServicer(object):
    """This is a test feature to test observable commands. It specifies various observable commands and returns defined answers to validate against. 
    """

    def Count(self, request, context):
        """Count from 0 to N-1 and return the current number as intermediate response. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Count_Info(self, request, context):
        """Monitor the state of Count 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Count_Intermediate(self, request, context):
        """Retrieve intermediate responses of Count 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Count_Result(self, request, context):
        """Retrieve result of Count 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoValueAfterDelay(self, request, context):
        """Echo the given value after the specified delay. The command state must be "waiting" until the delay has passed. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoValueAfterDelay_Info(self, request, context):
        """Monitor the state of EchoValueAfterDelay 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoValueAfterDelay_Result(self, request, context):
        """Retrieve result of EchoValueAfterDelay 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ObservableCommandTestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Count': grpc.unary_unary_rpc_method_handler(
                    servicer.Count,
                    request_deserializer=ObservableCommandTest__pb2.Count_Parameters.FromString,
                    response_serializer=SiLAFramework__pb2.CommandConfirmation.SerializeToString,
            ),
            'Count_Info': grpc.unary_stream_rpc_method_handler(
                    servicer.Count_Info,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=SiLAFramework__pb2.ExecutionInfo.SerializeToString,
            ),
            'Count_Intermediate': grpc.unary_stream_rpc_method_handler(
                    servicer.Count_Intermediate,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=ObservableCommandTest__pb2.Count_IntermediateResponses.SerializeToString,
            ),
            'Count_Result': grpc.unary_unary_rpc_method_handler(
                    servicer.Count_Result,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=ObservableCommandTest__pb2.Count_Responses.SerializeToString,
            ),
            'EchoValueAfterDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.EchoValueAfterDelay,
                    request_deserializer=ObservableCommandTest__pb2.EchoValueAfterDelay_Parameters.FromString,
                    response_serializer=SiLAFramework__pb2.CommandConfirmation.SerializeToString,
            ),
            'EchoValueAfterDelay_Info': grpc.unary_stream_rpc_method_handler(
                    servicer.EchoValueAfterDelay_Info,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=SiLAFramework__pb2.ExecutionInfo.SerializeToString,
            ),
            'EchoValueAfterDelay_Result': grpc.unary_unary_rpc_method_handler(
                    servicer.EchoValueAfterDelay_Result,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=ObservableCommandTest__pb2.EchoValueAfterDelay_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ObservableCommandTest(object):
    """This is a test feature to test observable commands. It specifies various observable commands and returns defined answers to validate against. 
    """

    @staticmethod
    def Count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/Count',
            ObservableCommandTest__pb2.Count_Parameters.SerializeToString,
            SiLAFramework__pb2.CommandConfirmation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Count_Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/Count_Info',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            SiLAFramework__pb2.ExecutionInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Count_Intermediate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/Count_Intermediate',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            ObservableCommandTest__pb2.Count_IntermediateResponses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Count_Result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/Count_Result',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            ObservableCommandTest__pb2.Count_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EchoValueAfterDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/EchoValueAfterDelay',
            ObservableCommandTest__pb2.EchoValueAfterDelay_Parameters.SerializeToString,
            SiLAFramework__pb2.CommandConfirmation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EchoValueAfterDelay_Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/EchoValueAfterDelay_Info',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            SiLAFramework__pb2.ExecutionInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EchoValueAfterDelay_Result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sila2.org.silastandard.test.observablecommandtest.v1.ObservableCommandTest/EchoValueAfterDelay_Result',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            ObservableCommandTest__pb2.EchoValueAfterDelay_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

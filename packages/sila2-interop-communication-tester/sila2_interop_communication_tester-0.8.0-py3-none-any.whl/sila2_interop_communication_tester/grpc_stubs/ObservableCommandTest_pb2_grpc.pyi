"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import ObservableCommandTest_pb2
import SiLAFramework_pb2
import abc
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ObservableCommandTestStub:
    """This is a test feature to test observable commands. It specifies various observable commands and returns defined answers to validate against."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Count: grpc.UnaryUnaryMultiCallable[
        ObservableCommandTest_pb2.Count_Parameters,
        SiLAFramework_pb2.CommandConfirmation,
    ]
    """Count from 0 to N-1 and return the current number as intermediate response."""

    Count_Info: grpc.UnaryStreamMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        SiLAFramework_pb2.ExecutionInfo,
    ]
    """Monitor the state of Count"""

    Count_Intermediate: grpc.UnaryStreamMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        ObservableCommandTest_pb2.Count_IntermediateResponses,
    ]
    """Retrieve intermediate responses of Count"""

    Count_Result: grpc.UnaryUnaryMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        ObservableCommandTest_pb2.Count_Responses,
    ]
    """Retrieve result of Count"""

    EchoValueAfterDelay: grpc.UnaryUnaryMultiCallable[
        ObservableCommandTest_pb2.EchoValueAfterDelay_Parameters,
        SiLAFramework_pb2.CommandConfirmation,
    ]
    """Echo the given value after the specified delay. The command state must be "waiting" until the delay has passed."""

    EchoValueAfterDelay_Info: grpc.UnaryStreamMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        SiLAFramework_pb2.ExecutionInfo,
    ]
    """Monitor the state of EchoValueAfterDelay"""

    EchoValueAfterDelay_Result: grpc.UnaryUnaryMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        ObservableCommandTest_pb2.EchoValueAfterDelay_Responses,
    ]
    """Retrieve result of EchoValueAfterDelay"""

class ObservableCommandTestAsyncStub:
    """This is a test feature to test observable commands. It specifies various observable commands and returns defined answers to validate against."""

    Count: grpc.aio.UnaryUnaryMultiCallable[
        ObservableCommandTest_pb2.Count_Parameters,
        SiLAFramework_pb2.CommandConfirmation,
    ]
    """Count from 0 to N-1 and return the current number as intermediate response."""

    Count_Info: grpc.aio.UnaryStreamMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        SiLAFramework_pb2.ExecutionInfo,
    ]
    """Monitor the state of Count"""

    Count_Intermediate: grpc.aio.UnaryStreamMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        ObservableCommandTest_pb2.Count_IntermediateResponses,
    ]
    """Retrieve intermediate responses of Count"""

    Count_Result: grpc.aio.UnaryUnaryMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        ObservableCommandTest_pb2.Count_Responses,
    ]
    """Retrieve result of Count"""

    EchoValueAfterDelay: grpc.aio.UnaryUnaryMultiCallable[
        ObservableCommandTest_pb2.EchoValueAfterDelay_Parameters,
        SiLAFramework_pb2.CommandConfirmation,
    ]
    """Echo the given value after the specified delay. The command state must be "waiting" until the delay has passed."""

    EchoValueAfterDelay_Info: grpc.aio.UnaryStreamMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        SiLAFramework_pb2.ExecutionInfo,
    ]
    """Monitor the state of EchoValueAfterDelay"""

    EchoValueAfterDelay_Result: grpc.aio.UnaryUnaryMultiCallable[
        SiLAFramework_pb2.CommandExecutionUUID,
        ObservableCommandTest_pb2.EchoValueAfterDelay_Responses,
    ]
    """Retrieve result of EchoValueAfterDelay"""

class ObservableCommandTestServicer(metaclass=abc.ABCMeta):
    """This is a test feature to test observable commands. It specifies various observable commands and returns defined answers to validate against."""

    @abc.abstractmethod
    def Count(
        self,
        request: ObservableCommandTest_pb2.Count_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[SiLAFramework_pb2.CommandConfirmation, collections.abc.Awaitable[SiLAFramework_pb2.CommandConfirmation]]:
        """Count from 0 to N-1 and return the current number as intermediate response."""

    @abc.abstractmethod
    def Count_Info(
        self,
        request: SiLAFramework_pb2.CommandExecutionUUID,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[SiLAFramework_pb2.ExecutionInfo], collections.abc.AsyncIterator[SiLAFramework_pb2.ExecutionInfo]]:
        """Monitor the state of Count"""

    @abc.abstractmethod
    def Count_Intermediate(
        self,
        request: SiLAFramework_pb2.CommandExecutionUUID,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[ObservableCommandTest_pb2.Count_IntermediateResponses], collections.abc.AsyncIterator[ObservableCommandTest_pb2.Count_IntermediateResponses]]:
        """Retrieve intermediate responses of Count"""

    @abc.abstractmethod
    def Count_Result(
        self,
        request: SiLAFramework_pb2.CommandExecutionUUID,
        context: _ServicerContext,
    ) -> typing.Union[ObservableCommandTest_pb2.Count_Responses, collections.abc.Awaitable[ObservableCommandTest_pb2.Count_Responses]]:
        """Retrieve result of Count"""

    @abc.abstractmethod
    def EchoValueAfterDelay(
        self,
        request: ObservableCommandTest_pb2.EchoValueAfterDelay_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[SiLAFramework_pb2.CommandConfirmation, collections.abc.Awaitable[SiLAFramework_pb2.CommandConfirmation]]:
        """Echo the given value after the specified delay. The command state must be "waiting" until the delay has passed."""

    @abc.abstractmethod
    def EchoValueAfterDelay_Info(
        self,
        request: SiLAFramework_pb2.CommandExecutionUUID,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[SiLAFramework_pb2.ExecutionInfo], collections.abc.AsyncIterator[SiLAFramework_pb2.ExecutionInfo]]:
        """Monitor the state of EchoValueAfterDelay"""

    @abc.abstractmethod
    def EchoValueAfterDelay_Result(
        self,
        request: SiLAFramework_pb2.CommandExecutionUUID,
        context: _ServicerContext,
    ) -> typing.Union[ObservableCommandTest_pb2.EchoValueAfterDelay_Responses, collections.abc.Awaitable[ObservableCommandTest_pb2.EchoValueAfterDelay_Responses]]:
        """Retrieve result of EchoValueAfterDelay"""

def add_ObservableCommandTestServicer_to_server(servicer: ObservableCommandTestServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

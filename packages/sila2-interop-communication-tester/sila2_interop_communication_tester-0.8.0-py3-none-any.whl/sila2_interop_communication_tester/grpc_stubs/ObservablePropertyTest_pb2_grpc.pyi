"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import ObservablePropertyTest_pb2
import abc
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ObservablePropertyTestStub:
    """This is a test feature to test observable properties."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    SetValue: grpc.UnaryUnaryMultiCallable[
        ObservablePropertyTest_pb2.SetValue_Parameters,
        ObservablePropertyTest_pb2.SetValue_Responses,
    ]
    """Changes the value of Editable"""

    Subscribe_FixedValue: grpc.UnaryStreamMultiCallable[
        ObservablePropertyTest_pb2.Subscribe_FixedValue_Parameters,
        ObservablePropertyTest_pb2.Subscribe_FixedValue_Responses,
    ]
    """Always returns 42 and never changes."""

    Subscribe_Alternating: grpc.UnaryStreamMultiCallable[
        ObservablePropertyTest_pb2.Subscribe_Alternating_Parameters,
        ObservablePropertyTest_pb2.Subscribe_Alternating_Responses,
    ]
    """Switches every second between true and false"""

    Subscribe_Editable: grpc.UnaryStreamMultiCallable[
        ObservablePropertyTest_pb2.Subscribe_Editable_Parameters,
        ObservablePropertyTest_pb2.Subscribe_Editable_Responses,
    ]
    """Can be set through SetValue command"""

class ObservablePropertyTestAsyncStub:
    """This is a test feature to test observable properties."""

    SetValue: grpc.aio.UnaryUnaryMultiCallable[
        ObservablePropertyTest_pb2.SetValue_Parameters,
        ObservablePropertyTest_pb2.SetValue_Responses,
    ]
    """Changes the value of Editable"""

    Subscribe_FixedValue: grpc.aio.UnaryStreamMultiCallable[
        ObservablePropertyTest_pb2.Subscribe_FixedValue_Parameters,
        ObservablePropertyTest_pb2.Subscribe_FixedValue_Responses,
    ]
    """Always returns 42 and never changes."""

    Subscribe_Alternating: grpc.aio.UnaryStreamMultiCallable[
        ObservablePropertyTest_pb2.Subscribe_Alternating_Parameters,
        ObservablePropertyTest_pb2.Subscribe_Alternating_Responses,
    ]
    """Switches every second between true and false"""

    Subscribe_Editable: grpc.aio.UnaryStreamMultiCallable[
        ObservablePropertyTest_pb2.Subscribe_Editable_Parameters,
        ObservablePropertyTest_pb2.Subscribe_Editable_Responses,
    ]
    """Can be set through SetValue command"""

class ObservablePropertyTestServicer(metaclass=abc.ABCMeta):
    """This is a test feature to test observable properties."""

    @abc.abstractmethod
    def SetValue(
        self,
        request: ObservablePropertyTest_pb2.SetValue_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[ObservablePropertyTest_pb2.SetValue_Responses, collections.abc.Awaitable[ObservablePropertyTest_pb2.SetValue_Responses]]:
        """Changes the value of Editable"""

    @abc.abstractmethod
    def Subscribe_FixedValue(
        self,
        request: ObservablePropertyTest_pb2.Subscribe_FixedValue_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[ObservablePropertyTest_pb2.Subscribe_FixedValue_Responses], collections.abc.AsyncIterator[ObservablePropertyTest_pb2.Subscribe_FixedValue_Responses]]:
        """Always returns 42 and never changes."""

    @abc.abstractmethod
    def Subscribe_Alternating(
        self,
        request: ObservablePropertyTest_pb2.Subscribe_Alternating_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[ObservablePropertyTest_pb2.Subscribe_Alternating_Responses], collections.abc.AsyncIterator[ObservablePropertyTest_pb2.Subscribe_Alternating_Responses]]:
        """Switches every second between true and false"""

    @abc.abstractmethod
    def Subscribe_Editable(
        self,
        request: ObservablePropertyTest_pb2.Subscribe_Editable_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[ObservablePropertyTest_pb2.Subscribe_Editable_Responses], collections.abc.AsyncIterator[ObservablePropertyTest_pb2.Subscribe_Editable_Responses]]:
        """Can be set through SetValue command"""

def add_ObservablePropertyTestServicer_to_server(servicer: ObservablePropertyTestServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

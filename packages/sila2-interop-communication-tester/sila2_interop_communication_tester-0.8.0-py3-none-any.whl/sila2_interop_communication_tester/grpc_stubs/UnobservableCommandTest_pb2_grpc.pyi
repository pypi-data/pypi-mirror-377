"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import UnobservableCommandTest_pb2
import abc
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class UnobservableCommandTestStub:
    """Feature for testing unobservable commands"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CommandWithoutParametersAndResponses: grpc.UnaryUnaryMultiCallable[
        UnobservableCommandTest_pb2.CommandWithoutParametersAndResponses_Parameters,
        UnobservableCommandTest_pb2.CommandWithoutParametersAndResponses_Responses,
    ]
    """A command that takes no parameters and returns no responses"""

    ConvertIntegerToString: grpc.UnaryUnaryMultiCallable[
        UnobservableCommandTest_pb2.ConvertIntegerToString_Parameters,
        UnobservableCommandTest_pb2.ConvertIntegerToString_Responses,
    ]
    """A command that takes one integer parameter and returns its string representation."""

    JoinIntegerAndString: grpc.UnaryUnaryMultiCallable[
        UnobservableCommandTest_pb2.JoinIntegerAndString_Parameters,
        UnobservableCommandTest_pb2.JoinIntegerAndString_Responses,
    ]
    """A command which takes an integer and a string parameter and returns a string with both joined (e.g. "123abc")"""

    SplitStringAfterFirstCharacter: grpc.UnaryUnaryMultiCallable[
        UnobservableCommandTest_pb2.SplitStringAfterFirstCharacter_Parameters,
        UnobservableCommandTest_pb2.SplitStringAfterFirstCharacter_Responses,
    ]
    """A command which splits a given string after its first character. Returns empty parts if the input was too short."""

class UnobservableCommandTestAsyncStub:
    """Feature for testing unobservable commands"""

    CommandWithoutParametersAndResponses: grpc.aio.UnaryUnaryMultiCallable[
        UnobservableCommandTest_pb2.CommandWithoutParametersAndResponses_Parameters,
        UnobservableCommandTest_pb2.CommandWithoutParametersAndResponses_Responses,
    ]
    """A command that takes no parameters and returns no responses"""

    ConvertIntegerToString: grpc.aio.UnaryUnaryMultiCallable[
        UnobservableCommandTest_pb2.ConvertIntegerToString_Parameters,
        UnobservableCommandTest_pb2.ConvertIntegerToString_Responses,
    ]
    """A command that takes one integer parameter and returns its string representation."""

    JoinIntegerAndString: grpc.aio.UnaryUnaryMultiCallable[
        UnobservableCommandTest_pb2.JoinIntegerAndString_Parameters,
        UnobservableCommandTest_pb2.JoinIntegerAndString_Responses,
    ]
    """A command which takes an integer and a string parameter and returns a string with both joined (e.g. "123abc")"""

    SplitStringAfterFirstCharacter: grpc.aio.UnaryUnaryMultiCallable[
        UnobservableCommandTest_pb2.SplitStringAfterFirstCharacter_Parameters,
        UnobservableCommandTest_pb2.SplitStringAfterFirstCharacter_Responses,
    ]
    """A command which splits a given string after its first character. Returns empty parts if the input was too short."""

class UnobservableCommandTestServicer(metaclass=abc.ABCMeta):
    """Feature for testing unobservable commands"""

    @abc.abstractmethod
    def CommandWithoutParametersAndResponses(
        self,
        request: UnobservableCommandTest_pb2.CommandWithoutParametersAndResponses_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[UnobservableCommandTest_pb2.CommandWithoutParametersAndResponses_Responses, collections.abc.Awaitable[UnobservableCommandTest_pb2.CommandWithoutParametersAndResponses_Responses]]:
        """A command that takes no parameters and returns no responses"""

    @abc.abstractmethod
    def ConvertIntegerToString(
        self,
        request: UnobservableCommandTest_pb2.ConvertIntegerToString_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[UnobservableCommandTest_pb2.ConvertIntegerToString_Responses, collections.abc.Awaitable[UnobservableCommandTest_pb2.ConvertIntegerToString_Responses]]:
        """A command that takes one integer parameter and returns its string representation."""

    @abc.abstractmethod
    def JoinIntegerAndString(
        self,
        request: UnobservableCommandTest_pb2.JoinIntegerAndString_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[UnobservableCommandTest_pb2.JoinIntegerAndString_Responses, collections.abc.Awaitable[UnobservableCommandTest_pb2.JoinIntegerAndString_Responses]]:
        """A command which takes an integer and a string parameter and returns a string with both joined (e.g. "123abc")"""

    @abc.abstractmethod
    def SplitStringAfterFirstCharacter(
        self,
        request: UnobservableCommandTest_pb2.SplitStringAfterFirstCharacter_Parameters,
        context: _ServicerContext,
    ) -> typing.Union[UnobservableCommandTest_pb2.SplitStringAfterFirstCharacter_Responses, collections.abc.Awaitable[UnobservableCommandTest_pb2.SplitStringAfterFirstCharacter_Responses]]:
        """A command which splits a given string after its first character. Returns empty parts if the input was too short."""

def add_UnobservableCommandTestServicer_to_server(servicer: UnobservableCommandTestServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

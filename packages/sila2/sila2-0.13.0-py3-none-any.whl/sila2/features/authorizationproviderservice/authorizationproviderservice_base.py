# Generated by sila2.code_generator; sila2.__version__: 0.13.0
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict

from .authorizationproviderservice_types import Verify_Responses

if TYPE_CHECKING:

    from typing import TypeVar

    from sila2.server import SilaServer

    Server = TypeVar("Server", bound=SilaServer)


class AuthorizationProviderServiceBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """
        This Feature provides SiLA Servers with the ability to check a given access token.
        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def Verify(
        self, AccessToken: str, RequestedServer: str, RequestedFeature: str, *, metadata: MetadataDict
    ) -> Verify_Responses:
        """
        Verifies that a given token is valid for the requested server.


        :param AccessToken: The token to be used along with accessing a Command or Property on a SiLA Server.

        :param RequestedServer: The server for which an authorization is requested.

        :param RequestedFeature: The feature that is requested to access.

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - TokenLifetime: The lifetime of the provided access token as the maximum validity period after the last SiLA Server request.


        """

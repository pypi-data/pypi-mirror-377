# Generated by sila2.code_generator; sila2.__version__: 0.13.0
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, List, Union

from sila2.framework import Command, Feature, FullyQualifiedIdentifier, Property
from sila2.server import FeatureImplementationBase

if TYPE_CHECKING:

    from typing import TypeVar

    from sila2.server import SilaServer

    Server = TypeVar("Server", bound=SilaServer)


class AuthorizationServiceBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        This Feature provides access control for the implementing server.

        It specifies the SiLA Client Metadata for the access token, that has been provided by the
        AuthenticationService core Feature.

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def get_calls_affected_by_AccessToken(self) -> List[Union[Feature, Command, Property, FullyQualifiedIdentifier]]:
        """
        Returns the fully qualified identifiers of all features, commands and properties affected by the
        SiLA Client Metadata 'AccessToken'.

        **Description of 'AccessToken'**:
        Token to be sent with every call in order to get access to the SiLA Server functionality.

        :return: Fully qualified identifiers of all features, commands and properties affected by the
            SiLA Client Metadata 'AccessToken'.
        """

[project]
name = "solid-checker"
version = "1.0.1"
description = "Smart SOLID principles analyzer with context-aware scoring and adaptive recommendations"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [
    {name = "DaymaNKinG990", email = "xellaopromaster@yandex.ru"}
]
keywords = ["solid", "principles", "code-analysis", "static-analysis", "architecture", "clean-code"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = []

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]

[project.urls]
Homepage = "https://github.com/DaymaNKinG990/solid-checker"
Repository = "https://github.com/DaymaNKinG990/solid-checker.git"
Documentation = "https://github.com/DaymaNKinG990/solid-checker#readme"
Issues = "https://github.com/DaymaNKinG990/solid-checker/issues"

[project.scripts]
solid-checker = "__main__:main"

[tool.setuptools]
packages = ["srp", "ocp", "lsp", "isp", "dip"]
py-modules = ["solid_scorer", "__main__"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.py"]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",       # pycodestyle errors
    "F",       # Pyflakes
    "W",       # pycodestyle warnings
    "I",       # isort
    "N",       # pep8-naming
    "UP",      # pyupgrade
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "SIM",     # flake8-simplify
    "RUF",     # Ruff-specific rules
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "N806",    # variable should be lowercase (for protocols)
    "SIM102",  # Use a single if-statement (sometimes clearer with multiple)
]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

[tool.ruff.lint.isort]
# Organize imports
known-first-party = ["srp", "ocp", "lsp", "isp", "dip"]
force-single-line = false
lines-after-imports = 2

[tool.mypy]
# Python version
python_version = "3.13"

# Error output
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Strictness
strict = true

# Import discovery
namespace_packages = true
explicit_package_bases = true

# Warnings
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Error handling
ignore_missing_imports = false

# Per-module options
[[tool.mypy.overrides]]
module = [
    "tests.*",
]
ignore_errors = true

# For third-party libraries that don't have type stubs
[[tool.mypy.overrides]]
module = [
    "ast.*",  # Built-in modules should be fine, but just in case
]
ignore_missing_imports = true

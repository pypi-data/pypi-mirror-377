{"mappings":"A,C,KCCI,SAAS,EAAuB,CAAa,EACzC,IAAM,EAAI,OAAO,MAAM,CAGvB,AAFgB,EAAE,GAAU,IAAI,CAAC,sCAAsC,GAAG,CAAC,sBAEnE,IAAI,CAAC,SAAS,CAAC,CAAE,CAAO,EAC5B,EAAE,GAAS,OAAO,CAAC,CACf,KAAM,CACF,KAAM,AAAC,GACI,CAAA,CACH,KAAM,EAAO,IAAI,CACjB,KAAM,EAAO,IAAI,CACjB,UAAW,EAAQ,OAAO,CAAC,QAAQ,CACnC,WAAY,EAAQ,OAAO,CAAC,SAAS,CACrC,WAAY,EAAQ,OAAO,CAAC,SAAS,AACzC,CAAA,CAER,EACA,KAAM,CAAA,EACN,UAAW,SAAS,CAAM,EACtB,GAAI,AAAsB,UAAtB,OAAO,EAAO,IAAI,CAAc,OAAO,KAC3C,IAAM,EAAO,EAAO,IAAI,CAAC,IAAI,SAC7B,AAAI,AAAQ,IAAR,EAAmB,KAEhB,CACH,GAAI,CAAC,KAAK,EAAE,EAAA,CAAM,CAClB,KAAM,EACN,OAAQ,CAAA,CACZ,CACJ,CACJ,EACJ,EACJ,CAEA,EAAE,WACE,EAAuB,SAC3B,GAEA,SAAS,gBAAgB,CAAC,gBAAiB,AAAC,IACxC,EAAuB,EAAM,MAAM,CACvC,E,C","sources":["<anon>","src/assets/ts/artist_autocomplete.ts"],"sourcesContent":["(() => {\n{\n    function initArtistAutocomplete(selector) {\n        const $1 = django.jQuery;\n        const select2 = $1(selector).find(\".field-artists .admin-autocomplete\").not(\"[name*=__prefix__]\");\n        select2.each(function(i, element) {\n            $1(element).select2({\n                ajax: {\n                    data: (params)=>{\n                        return {\n                            term: params.term,\n                            page: params.page,\n                            app_label: element.dataset.appLabel,\n                            model_name: element.dataset.modelName,\n                            field_name: element.dataset.fieldName\n                        };\n                    }\n                },\n                tags: true,\n                createTag: function(params) {\n                    if (typeof params.term != \"string\") return null;\n                    const term = params.term.trim();\n                    if (term == \"\") return null;\n                    return {\n                        id: `NEW--${term}`,\n                        text: term,\n                        newTag: true\n                    };\n                }\n            });\n        });\n    }\n    $(function() {\n        initArtistAutocomplete(document);\n    });\n    document.addEventListener(\"formset:added\", (event)=>{\n        initArtistAutocomplete(event.target);\n    });\n}\n})();\n//# sourceMappingURL=artist_autocomplete.js.map\n","{\n    function initArtistAutocomplete(selector: any) {\n        const $ = django.jQuery;\n        const select2 = $(selector).find(\".field-artists .admin-autocomplete\").not(\"[name*=__prefix__]\");\n\n        select2.each(function(i, element) {\n            $(element).select2({\n                ajax: {\n                    data: (params) => {\n                        return {\n                            term: params.term,\n                            page: params.page,\n                            app_label: element.dataset.appLabel,\n                            model_name: element.dataset.modelName,\n                            field_name: element.dataset.fieldName,\n                        };\n                    },\n                },\n                tags: true,\n                createTag: function(params) {\n                    if (typeof params.term != \"string\") return null;\n                    const term = params.term.trim();\n                    if (term == \"\") return null;\n\n                    return {\n                        id: `NEW--${term}`,\n                        text: term,\n                        newTag: true,\n                    };\n                },\n            })\n        })\n    }\n\n    $(function() {\n        initArtistAutocomplete(document);\n    });\n\n    document.addEventListener(\"formset:added\", (event) => {\n        initArtistAutocomplete(event.target);\n    });\n}\n"],"names":["initArtistAutocomplete","selector","$1","django","jQuery","select2","find","not","each","i","element","ajax","data","params","term","page","app_label","dataset","appLabel","model_name","modelName","field_name","fieldName","tags","createTag","trim","id","text","newTag","$","document","addEventListener","event","target"],"version":3,"file":"artist_autocomplete.js.map"}
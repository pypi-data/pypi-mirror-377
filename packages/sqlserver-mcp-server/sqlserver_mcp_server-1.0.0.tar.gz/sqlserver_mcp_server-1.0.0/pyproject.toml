[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sqlserver-mcp-server"
version = "1.0.0"
description = "A comprehensive Model Context Protocol (MCP) server for interacting with SQL Server databases"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "SQL Server MCP Server Team", email = "sqlserver-mcp@example.com"},
]
maintainers = [
    {name = "SQL Server MCP Server Team", email = "sqlserver-mcp@example.com"},
]
keywords = [
    "mcp", 
    "model-context-protocol", 
    "sql-server", 
    "sqlserver", 
    "database", 
    "protocol", 
    "ai", 
    "assistant", 
    "odbc", 
    "pyodbc"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: System :: Networking",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Framework :: AsyncIO",
    "Environment :: Console",
    "Environment :: Web Environment",
]
dependencies = [
    "pyodbc>=4.0.39",
    "pydantic>=2.0.0",
    "structlog>=23.0.0",
    "rich>=13.0.0",
    "click>=8.0.0",
    "mcp>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pytest-benchmark>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.10.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings>=0.20.0",
]

[project.urls]
Homepage = "https://github.com/your-org/sqlserver-mcp-server"
Documentation = "https://github.com/your-org/sqlserver-mcp-server#readme"
Repository = "https://github.com/your-org/sqlserver-mcp-server.git"
Issues = "https://github.com/your-org/sqlserver-mcp-server/issues"
Changelog = "https://github.com/your-org/sqlserver-mcp-server/blob/main/CHANGELOG.md"
Download = "https://pypi.org/project/sqlserver-mcp-server/#files"

[project.scripts]
sqlserver-mcp = "src.cli.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]
include = [
    "src/**/*.py",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "docs/**/*",
    "examples/**/*",
]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "/.github",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "pyproject.toml",
    "requirements.txt",
    "requirements-dev.txt",
    "Makefile",
    "docker-compose.yml",
    "Dockerfile",
]

[tool.hatch.build.hooks.version]
path = "src/__init__.py"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "src.lib.logging"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "src.lib.config"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "contract: Contract tests",
    "slow: Slow running tests",
    "requires_db: Tests that require database connection",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
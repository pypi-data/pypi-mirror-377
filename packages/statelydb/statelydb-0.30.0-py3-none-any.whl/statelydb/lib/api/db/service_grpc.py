# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: db/service.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import continue_list_pb2
from . import continue_scan_pb2
from . import delete_pb2
from . import get_pb2
from . import list_pb2
from . import put_pb2
from . import scan_pb2
from . import sync_list_pb2
from . import transaction_pb2
from . import service_pb2


class DatabaseServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Put(self, stream: 'grpclib.server.Stream[put_pb2.PutRequest, put_pb2.PutResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[get_pb2.GetRequest, get_pb2.GetResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[delete_pb2.DeleteRequest, delete_pb2.DeleteResponse]') -> None:
        pass

    @abc.abstractmethod
    async def BeginList(self, stream: 'grpclib.server.Stream[list_pb2.BeginListRequest, list_pb2.ListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ContinueList(self, stream: 'grpclib.server.Stream[continue_list_pb2.ContinueListRequest, list_pb2.ListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def BeginScan(self, stream: 'grpclib.server.Stream[scan_pb2.BeginScanRequest, list_pb2.ListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ContinueScan(self, stream: 'grpclib.server.Stream[continue_scan_pb2.ContinueScanRequest, list_pb2.ListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SyncList(self, stream: 'grpclib.server.Stream[sync_list_pb2.SyncListRequest, sync_list_pb2.SyncListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Transaction(self, stream: 'grpclib.server.Stream[transaction_pb2.TransactionRequest, transaction_pb2.TransactionResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/stately.db.DatabaseService/Put': grpclib.const.Handler(
                self.Put,
                grpclib.const.Cardinality.UNARY_UNARY,
                put_pb2.PutRequest,
                put_pb2.PutResponse,
            ),
            '/stately.db.DatabaseService/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                get_pb2.GetRequest,
                get_pb2.GetResponse,
            ),
            '/stately.db.DatabaseService/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                delete_pb2.DeleteRequest,
                delete_pb2.DeleteResponse,
            ),
            '/stately.db.DatabaseService/BeginList': grpclib.const.Handler(
                self.BeginList,
                grpclib.const.Cardinality.UNARY_STREAM,
                list_pb2.BeginListRequest,
                list_pb2.ListResponse,
            ),
            '/stately.db.DatabaseService/ContinueList': grpclib.const.Handler(
                self.ContinueList,
                grpclib.const.Cardinality.UNARY_STREAM,
                continue_list_pb2.ContinueListRequest,
                list_pb2.ListResponse,
            ),
            '/stately.db.DatabaseService/BeginScan': grpclib.const.Handler(
                self.BeginScan,
                grpclib.const.Cardinality.UNARY_STREAM,
                scan_pb2.BeginScanRequest,
                list_pb2.ListResponse,
            ),
            '/stately.db.DatabaseService/ContinueScan': grpclib.const.Handler(
                self.ContinueScan,
                grpclib.const.Cardinality.UNARY_STREAM,
                continue_scan_pb2.ContinueScanRequest,
                list_pb2.ListResponse,
            ),
            '/stately.db.DatabaseService/SyncList': grpclib.const.Handler(
                self.SyncList,
                grpclib.const.Cardinality.UNARY_STREAM,
                sync_list_pb2.SyncListRequest,
                sync_list_pb2.SyncListResponse,
            ),
            '/stately.db.DatabaseService/Transaction': grpclib.const.Handler(
                self.Transaction,
                grpclib.const.Cardinality.STREAM_STREAM,
                transaction_pb2.TransactionRequest,
                transaction_pb2.TransactionResponse,
            ),
        }


class DatabaseServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Put = grpclib.client.UnaryUnaryMethod(
            channel,
            '/stately.db.DatabaseService/Put',
            put_pb2.PutRequest,
            put_pb2.PutResponse,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/stately.db.DatabaseService/Get',
            get_pb2.GetRequest,
            get_pb2.GetResponse,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/stately.db.DatabaseService/Delete',
            delete_pb2.DeleteRequest,
            delete_pb2.DeleteResponse,
        )
        self.BeginList = grpclib.client.UnaryStreamMethod(
            channel,
            '/stately.db.DatabaseService/BeginList',
            list_pb2.BeginListRequest,
            list_pb2.ListResponse,
        )
        self.ContinueList = grpclib.client.UnaryStreamMethod(
            channel,
            '/stately.db.DatabaseService/ContinueList',
            continue_list_pb2.ContinueListRequest,
            list_pb2.ListResponse,
        )
        self.BeginScan = grpclib.client.UnaryStreamMethod(
            channel,
            '/stately.db.DatabaseService/BeginScan',
            scan_pb2.BeginScanRequest,
            list_pb2.ListResponse,
        )
        self.ContinueScan = grpclib.client.UnaryStreamMethod(
            channel,
            '/stately.db.DatabaseService/ContinueScan',
            continue_scan_pb2.ContinueScanRequest,
            list_pb2.ListResponse,
        )
        self.SyncList = grpclib.client.UnaryStreamMethod(
            channel,
            '/stately.db.DatabaseService/SyncList',
            sync_list_pb2.SyncListRequest,
            sync_list_pb2.SyncListResponse,
        )
        self.Transaction = grpclib.client.StreamStreamMethod(
            channel,
            '/stately.db.DatabaseService/Transaction',
            transaction_pb2.TransactionRequest,
            transaction_pb2.TransactionResponse,
        )

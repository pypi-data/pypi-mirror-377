[tool.poetry]
name = "strangeworks-optimization"
version = "0.2.41"
description = "This SDK extends the Strangeworks SDK to provide access to the Strangeworks Optimization API."
authors = ["Strange Devs <hello@strangeworks.com>"]
readme = "README.md"
license = "Apache-2.0"
packages = [{include = "strangeworks_optimization"}]


[tool.poetry.dependencies]
python = ">=3.10,<3.14"
strangeworks = "^0.6.1"
strangeworks-optimization-models = "^0.1.67"


[tool.poetry.group.dev.dependencies]
ipykernel = "^6.23.2"
python-dotenv = "^1.0.0"
pytest = "^7.3.1"
ruff = "^0.6.2"
pre-commit = "^3.3.3"
bpython = "^0.24"
rich = "^13.4.2"
mypy = "^1.4.1"
pytest-cov = "^4.1.0"
types-pyyaml = "^6.0.12.20240311"
types-requests = "^2.32.0.20240523"
dwave-hybrid = "^0.6.13"


[tool.black]
line-length = 120

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    "dill",
    "strangeworks.*",
    "strangeworks_core.*"
]
ignore_missing_imports = true

[tool.ruff]
select = ["E", "F", "I"]
ignore = ["E501"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "frontend",
    "fe-react",
    "fe-svelte",
    "example",
]
per-file-ignores = {}

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
markers = [
    "integration_could_cost_money: marks tests as creating a job that could cost some money (deselect with '-m \"not integration_could_cost_money\"')",
    "hardware: marks tests as creating a hardware job that will cost money (deselect with '-m \"not hardware\"')",
    "leap_hybrid: marks tests as creating a hybrid job that will cost money (deselect with '-m \"not leap_hybrid\"')",
]
addopts = '-m "not leap_hybrid"'
testpaths = [
    "tests"
]

# Copyright (C) 2024 Roberto Rossini <roberros@uio.no>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/cache-test-datasets.yml"
      - ".github/workflows/ci.yml"
      - "src/**"
      - "test/**"
      - ".gitignore"
      - "pyproject.toml"

  pull_request:
    paths:
      - ".github/workflows/cache-test-datasets.yml"
      - ".github/workflows/ci.yml"
      - "src/**"
      - "test/**"
      - ".gitignore"
      - "pyproject.toml"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  matrix-factory:
    name: Generate job matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-result.outputs.result }}
    steps:
      - name: Generate matrix
        uses: actions/github-script@v8
        id: set-result
        with:
          script: |
            // Documentation
            // https://docs.github.com/en/actions/learn-github-actions/contexts#fromjson
            // https://github.com/actions/runner/issues/982#issuecomment-809360765

            const platforms = ["windows-latest", "macos-latest", "ubuntu-latest"]
            var python_versions = ["3.9", "3.13"]
            if ("${{github.event_name}}" != "pull_request") {
                python_versions = python_versions.concat(["3.10", "3.11", "3.12"])
            }

            var includes = []
            for (const plat of platforms) {
                for (const ver of python_versions) {
                    includes.push({os: plat, python_version: ver, minimal_install: true})
                    includes.push({os: plat, python_version: ver, minimal_install: false})
                }
            }

            return { include: includes }

  cache-test-datasets:
    name: Cache test datasets
    uses: paulsengroup/StripePy/.github/workflows/cache-test-datasets.yml@b8f02af4c73c53e1ad69458c10f2ad5c02aabbe9

  ci:
    name: CI
    needs: [cache-test-datasets, matrix-factory]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-factory.outputs.matrix) }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Generate dependency file
        run: |
          echo 'os=${{ matrix.os }}' > dep-file.txt
          echo 'python_version=${{ matrix.python_version }}' >> dep-file.txt
          echo 'minimal_install=${{ matrix.minimal_install }}' >> dep-file.txt

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python_version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            dep-file.txt

      - name: Install package
        run: |
          if [[ ${{ matrix.minimal_install }} == 'true' ]]; then
            pip install '.' pytest pytest-cov
          else
            pip install '.[all,test]'
          fi

      - name: Run simple CLI tests
        run: |
          stripepy --help
          stripepy --version

      - name: Restore test dataset
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.cache-test-datasets.outputs.cache-key }}
          path: test/data/
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Run unit tests
        run: |
          python -m pytest \
            --verbose \
            --cov \
            --cov-report=xml \
            --cov-report=term \
            -m unit

      - name: Upload unit test coverage report to Codecov
        if: (! matrix.minimal_install)
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          flags: "tests | unit | python-${{ matrix.python_version }}"
          disable_search: true
          files: coverage/stripepy.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Upload unit test coverage report to Codecov (core)
        if: matrix.minimal_install
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          flags: "tests | unit | python-${{ matrix.python_version }} | core"
          disable_search: true
          files: coverage/stripepy.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
      - name: Run integration tests
        run: |
          rm -f coverage.xml

          python -m pytest \
            --verbose \
            --cov \
            --cov-report=xml \
            --cov-report=term \
            -m end2end

      - name: Upload end2end test coverage report to Codecov
        if: (! matrix.minimal_install)
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          flags: "tests | integration | python-${{ matrix.python_version }}"
          disable_search: true
          files: coverage/stripepy.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Upload end2end test coverage report to Codecov (core)
        if: matrix.minimal_install
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          flags: "tests | integration | python-${{ matrix.python_version }} | core"
          disable_search: true
          files: coverage/stripepy.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  ci-status-check:
    name: Status Check (CI)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - ci
    steps:
      - name: Collect job results
        if: needs.ci.result != 'success'
        run: exit 1

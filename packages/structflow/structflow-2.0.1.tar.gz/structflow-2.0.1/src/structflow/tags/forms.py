from __future__ import annotations

import typing

from .base import Container, Tag, Void

if typing.TYPE_CHECKING:
    from .types import AttributeValue


class form(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        action: typing.Optional[str] = None,
        method: typing.Optional[typing.Literal["get", "post", "dialog"]] = None,
        enctype: typing.Optional[
            typing.Literal[
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "text/plain",
            ]
        ] = None,
        novalidate: typing.Optional[bool] = None,
        target: typing.Optional[
            typing.Literal["_self", "_blank", "_parent", "_top"]
        ] = None,
        autocomplete: typing.Optional[typing.Literal["on", "off"]] = None,
        name: typing.Optional[str] = None,
        accept_charset: typing.Optional[str] = None,
        rel: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            action=action,
            method=method,
            enctype=enctype,
            novalidate=novalidate,
            target=target,
            autocomplete=autocomplete,
            name=name,
            **(
                {"accept-charset": accept_charset} if accept_charset is not None else {}
            ),
            rel=rel,
            **kwargs,
        )


class input(Void):
    def __init__(
        self,
        type: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        value: typing.Optional[AttributeValue] = None,
        placeholder: typing.Optional[str] = None,
        required: typing.Optional[bool] = None,
        disabled: typing.Optional[bool] = None,
        readonly: typing.Optional[bool] = None,
        checked: typing.Optional[bool] = None,
        minlength: typing.Optional[int] = None,
        maxlength: typing.Optional[int] = None,
        min: typing.Optional[AttributeValue] = None,
        max: typing.Optional[AttributeValue] = None,
        step: typing.Optional[AttributeValue] = None,
        size: typing.Optional[int] = None,
        pattern: typing.Optional[str] = None,
        multiple: typing.Optional[bool] = None,
        src: typing.Optional[str] = None,
        alt: typing.Optional[str] = None,
        width: typing.Optional[int] = None,
        height: typing.Optional[int] = None,
        list: typing.Optional[str] = None,
        autocomplete: typing.Optional[str] = None,
        autofocus: typing.Optional[bool] = None,
        form: typing.Optional[str] = None,
        formaction: typing.Optional[str] = None,
        formenctype: typing.Optional[
            typing.Literal[
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "text/plain",
            ]
        ] = None,
        formmethod: typing.Optional[typing.Literal["get", "post", "dialog"]] = None,
        formnovalidate: typing.Optional[bool] = None,
        formtarget: typing.Optional[
            typing.Literal["_self", "_blank", "_parent", "_top"]
        ] = None,
        inputmode: typing.Optional[
            typing.Literal[
                "none",
                "text",
                "decimal",
                "numeric",
                "tel",
                "search",
                "email",
                "url",
            ]
        ] = None,
        enterkeyhint: typing.Optional[
            typing.Literal["enter", "done", "go", "next", "previous", "search", "send"]
        ] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            type=type,
            name=name,
            value=value,
            placeholder=placeholder,
            required=required,
            disabled=disabled,
            readonly=readonly,
            checked=checked,
            minlength=minlength,
            maxlength=maxlength,
            min=min,
            max=max,
            step=step,
            size=size,
            pattern=pattern,
            multiple=multiple,
            src=src,
            alt=alt,
            width=width,
            height=height,
            list=list,
            autocomplete=autocomplete,
            autofocus=autofocus,
            form=form,
            formaction=formaction,
            formenctype=formenctype,
            formmethod=formmethod,
            formnovalidate=formnovalidate,
            formtarget=formtarget,
            inputmode=inputmode,
            enterkeyhint=enterkeyhint,
            **kwargs,
        )


class textarea(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        name: typing.Optional[str] = None,
        rows: typing.Optional[int] = None,
        cols: typing.Optional[int] = None,
        minlength: typing.Optional[int] = None,
        maxlength: typing.Optional[int] = None,
        placeholder: typing.Optional[str] = None,
        required: typing.Optional[bool] = None,
        disabled: typing.Optional[bool] = None,
        readonly: typing.Optional[bool] = None,
        wrap: typing.Optional[typing.Literal["soft", "hard"]] = None,
        autofocus: typing.Optional[bool] = None,
        form: typing.Optional[str] = None,
        spellcheck: typing.Optional[bool] = None,
        autocomplete: typing.Optional[typing.Literal["on", "off"]] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            name=name,
            rows=rows,
            cols=cols,
            minlength=minlength,
            maxlength=maxlength,
            placeholder=placeholder,
            required=required,
            disabled=disabled,
            readonly=readonly,
            wrap=wrap,
            autofocus=autofocus,
            form=form,
            autocomplete=autocomplete,
            **kwargs,
        )


class select(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        name: typing.Optional[str] = None,
        required: typing.Optional[bool] = None,
        disabled: typing.Optional[bool] = None,
        autofocus: typing.Optional[bool] = None,
        form: typing.Optional[str] = None,
        multiple: typing.Optional[bool] = None,
        size: typing.Optional[int] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            name=name,
            required=required,
            disabled=disabled,
            autofocus=autofocus,
            form=form,
            multiple=multiple,
            size=size,
            **kwargs,
        )


class option(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        value: typing.Optional[str] = None,
        label: typing.Optional[str] = None,
        selected: typing.Optional[bool] = None,
        disabled: typing.Optional[bool] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            value=value,
            label=label,
            selected=selected,
            disabled=disabled,
            **kwargs,
        )


class optgroup(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        label: typing.Optional[str] = None,
        disabled: typing.Optional[bool] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            label=label,
            disabled=disabled,
            **kwargs,
        )


class label(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        for_: typing.Optional[str] = None,
        form: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            form=form,
            **kwargs,
        )

        if for_ is not None:
            self._attributes["for"] = for_


class button(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        type: typing.Optional[typing.Literal["submit", "reset", "button"]] = None,
        name: typing.Optional[str] = None,
        value: typing.Optional[AttributeValue] = None,
        disabled: typing.Optional[bool] = None,
        autofocus: typing.Optional[bool] = None,
        form: typing.Optional[str] = None,
        formaction: typing.Optional[str] = None,
        formenctype: typing.Optional[
            typing.Literal[
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "text/plain",
            ]
        ] = None,
        formmethod: typing.Optional[typing.Literal["get", "post", "dialog"]] = None,
        formnovalidate: typing.Optional[bool] = None,
        formtarget: typing.Optional[
            typing.Literal["_self", "_blank", "_parent", "_top"]
        ] = None,
        popovertarget: typing.Optional[str] = None,
        popovertargetaction: typing.Optional[
            typing.Literal["toggle", "show", "hide"]
        ] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            type=type,
            name=name,
            value=value,
            disabled=disabled,
            autofocus=autofocus,
            form=form,
            formaction=formaction,
            formenctype=formenctype,
            formmethod=formmethod,
            formnovalidate=formnovalidate,
            formtarget=formtarget,
            popovertarget=popovertarget,
            popovertargetaction=popovertargetaction,
            **kwargs,
        )


class fieldset(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        disabled: typing.Optional[bool] = None,
        form: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            disabled=disabled,
            form=form,
            name=name,
            **kwargs,
        )


class legend(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            **kwargs,
        )


class datalist(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            **kwargs,
        )


class output(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        name: typing.Optional[str] = None,
        for_: typing.Optional[str] = None,
        form: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            name=name,
            form=form,
            **kwargs,
        )

        if for_ is not None:
            self._attributes["for"] = for_


class meter(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        value: typing.Optional[float] = None,
        min: typing.Optional[float] = None,
        max: typing.Optional[float] = None,
        low: typing.Optional[float] = None,
        high: typing.Optional[float] = None,
        optimum: typing.Optional[float] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            value=value,
            min=min,
            max=max,
            low=low,
            high=high,
            optimum=optimum,
            **kwargs,
        )


class progress(Container):
    def __init__(
        self,
        *children: typing.Union[Tag, str],
        value: typing.Optional[float] = None,
        max: typing.Optional[float] = None,
        id: typing.Optional[str] = None,
        class_: typing.Optional[typing.Union[str, list[str]]] = None,
        style: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        lang: typing.Optional[str] = None,
        dir: typing.Optional[typing.Literal["ltr", "rtl", "auto"]] = None,
        tabindex: typing.Optional[int] = None,
        hidden: typing.Optional[bool] = None,
        draggable: typing.Optional[bool] = None,
        contenteditable: typing.Optional[bool] = None,
        spellcheck: typing.Optional[bool] = None,
        translate: typing.Optional[bool] = None,
        accesskey: typing.Optional[str] = None,
        **kwargs: AttributeValue,
    ):
        super().__init__(
            *children,
            id=id,
            class_=class_,
            style=style,
            title=title,
            lang=lang,
            dir=dir,
            tabindex=tabindex,
            hidden=hidden,
            draggable=draggable,
            contenteditable=contenteditable,
            spellcheck=spellcheck,
            translate=translate,
            accesskey=accesskey,
            value=value,
            max=max,
            **kwargs,
        )

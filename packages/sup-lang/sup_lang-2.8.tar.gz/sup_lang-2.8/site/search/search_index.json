{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sup Language","text":"<p>Sup is an English-like programming language with deterministic semantics and human-friendly errors!!!</p> <ul> <li>Variables, arithmetic, strings</li> <li>Collections (lists, maps)</li> <li>Control flow (if/else, while, for each)</li> <li>Functions</li> <li>Errors and imports</li> <li>Transpiler to Python</li> </ul> <p>Get started:</p> <pre><code>sup sup-lang/examples/06_mixed.sup\n</code></pre>"},{"location":"#safe-mode-capabilities","title":"Safe mode &amp; capabilities","text":"<p>By default, the interpreter blocks potentially dangerous operations. Enable what you need via <code>SUP_CAPS</code> (comma-separated), or disable gating with <code>SUP_UNSAFE=1</code>.</p> <ul> <li>Capabilities: <code>net</code>, <code>process</code>, <code>fs_write</code>, <code>archive</code>, <code>sql</code></li> </ul> <p>Example (PowerShell):</p> <pre><code>$env:SUP_CAPS = \"fs_write,net\"\n</code></pre>"},{"location":"#dev-workflow","title":"Dev workflow","text":"<pre><code>pip install -e ./sup-lang pytest ruff mypy\nruff check sup-lang/sup --fix\nmypy --config-file sup-lang/mypy.ini sup-lang/sup\npytest -q sup-lang\n</code></pre>"},{"location":"#see-also","title":"See also","text":"<ul> <li>Language specification (v1.0): <code>spec.md</code></li> <li>Versioning and stability policy: <code>versioning.md</code></li> </ul>"},{"location":"benchmarks/","title":"Benchmarks","text":""},{"location":"benchmarks/#benchmarks","title":"Benchmarks","text":"<p>High-level microbenchmarks to track performance over time. Automate in CI and publish deltas.</p> <ul> <li>Arithmetic loops and function calls</li> <li>List operations and string joins</li> <li>File IO and JSON parse/stringify</li> </ul> <p>Planned: publish charts and gate regressions per commit.</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#code-of-conduct","title":"Code of Conduct","text":"<p>Be respectful and inclusive. Harassment and discrimination are not tolerated.</p> <p>Report incidents to maintainers. Consequences for violations include warnings or bans.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Thank you for contributing to SUP! Please:</p> <ul> <li>Use <code>pre-commit</code> hooks (Black, Ruff, Isort, Pyupgrade, MyPy where applicable)</li> <li>Write tests (pytest + Hypothesis) and keep coverage healthy</li> <li>Include clear commit messages and small focused PRs</li> <li>Discuss larger changes via an RFC (see RFCs section)</li> </ul>"},{"location":"contributing/#deprecation-policy-and-rfcs","title":"Deprecation policy and RFCs","text":"<ul> <li>Follow the Versioning and Stability policy in <code>versioning.md</code>.</li> <li>Any language removal or breaking change requires an RFC with:</li> <li>Problem statement, alternatives considered, migration path</li> <li>Deprecation horizon (\u22651 MINOR), lint hint or auto-fix if feasible</li> <li>Impact on tooling (LSP/formatter/transpiler) and ecosystem</li> <li>Deprecations must be surfaced in diagnostics and docs; removals only in next MAJOR.</li> </ul> <p>Setup:</p> <pre><code>pip install -r requirements-dev.txt  # or use pipx/venv\npre-commit install\npytest -q\n</code></pre>"},{"location":"cookbook/","title":"How-To Cookbook","text":""},{"location":"cookbook/#how-to-cookbook","title":"How-To Cookbook","text":"<ul> <li>Print Hello World</li> </ul> <pre><code>sup\nprint \"Hello, world!\"\nbye\n</code></pre> <ul> <li>Define and call a function</li> </ul> <pre><code>sup\ndefine function called add with a and b\n  return add a and b\nend function\nprint call add with 2 and 3\nbye\n</code></pre> <ul> <li>Lists and join</li> </ul> <pre><code>sup\nmake list of 1, 2, 3\nprint join of \",\" and list\nbye\n</code></pre> <ul> <li>Files, JSON, and regex</li> </ul> <pre><code>sup\nprint json stringify of make list of 1, 2\nprint regex replace of \"l\" and \"hello\" and \"L\"\nbye\n</code></pre> <ul> <li>Imports and calling a function from a module</li> </ul> <pre><code>sup\nimport mathlib\nprint mathlib.pi\nprint call mathlib.square with 3\nbye\n</code></pre>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#examples-gallery","title":"Examples Gallery","text":"<p>This page links to small SUP programs demonstrating common patterns.</p> <ul> <li>Arithmetic and variables</li> <li>Functions and calls</li> <li>Control flow (<code>if</code>, <code>repeat</code>)</li> <li>Lists and string utilities</li> <li>Files, JSON, regex, env/glob (via builtins)</li> </ul> <p>You can run examples with the CLI:</p> <pre><code>sup path/to/example.sup\n</code></pre>"},{"location":"governance/","title":"Governance","text":""},{"location":"governance/#governance","title":"Governance","text":"<p>Project roles:</p> <ul> <li>Maintainers: triage, review, roadmap, releases</li> <li>Contributors: issues, PRs, docs, examples</li> </ul> <p>Decision process:</p> <ul> <li>Small changes via PR and review</li> <li>Larger changes via RFCs with discussion and acceptance criteria</li> </ul> <p>Releases:</p> <ul> <li>Semantic versioning, with deprecation policy outlined in versioning.md</li> </ul>"},{"location":"modules/","title":"Modules, Imports, and Package Metadata","text":""},{"location":"modules/#resolution","title":"Resolution","text":"<ul> <li>Search order: current working directory, then paths in <code>SUP_PATH</code> (os\u2011path\u2011sep separated).</li> <li>A module <code>foo</code> is sourced from <code>foo.sup</code>.</li> </ul>"},{"location":"modules/#syntax","title":"Syntax","text":"<ul> <li><code>import foo</code> \u2192 binds namespace <code>foo.*</code> in current scope.</li> <li><code>from foo import bar as baz</code> \u2192 binds symbol <code>bar</code> (function/var) as <code>baz</code>.</li> </ul>"},{"location":"modules/#execution-model","title":"Execution model","text":"<ul> <li>On import, the module executes in its own environment; exported top\u2011level variables and functions become available to importers.</li> <li>Circular import detection raises an error.</li> </ul>"},{"location":"modules/#package-metadata-future","title":"Package metadata (future)","text":"<ul> <li><code>sup.json</code> in project root:</li> </ul> <pre><code>{\n  \"name\": \"myapp\",\n  \"version\": \"0.1.0\",\n  \"description\": \"...\",\n  \"entry\": \"main.sup\",\n  \"dependencies\": { \"mathlib\": \"^1.0.0\" }\n}\n</code></pre> <ul> <li>Used by a future package manager to resolve dependencies and publish packages.</li> </ul>"},{"location":"packaging/","title":"Packaging and Project Commands","text":""},{"location":"packaging/#scaffold","title":"Scaffold","text":"<pre><code>sup init myapp\n</code></pre> <p>Creates <code>main.sup</code>, <code>sup.json</code>, and <code>README.md</code>.</p>"},{"location":"packaging/#build-transpile-project","title":"Build (transpile project)","text":"<pre><code>sup build main.sup --out dist_sup\n</code></pre> <p>Produces Python modules and a <code>run.py</code> launcher. Sourcemaps are generated with <code>sourceMappingURL</code>.</p>"},{"location":"packaging/#lockfile","title":"Lockfile","text":"<pre><code>sup lock main.sup\n</code></pre> <p>Writes <code>sup.lock</code> containing module paths and SHA256 hashes for reproducible builds. New projects may also use <code>sup.lock.json</code> (v2) which includes module versions and sources.</p>"},{"location":"packaging/#test-runner","title":"Test runner","text":"<pre><code>sup test tests/\n</code></pre> <p>Runs all <code>.sup</code> files in a directory and reports pass count (zero exit code when all pass).</p>"},{"location":"packaging/#publish-source-tarball","title":"Publish (source tarball)","text":"<pre><code>sup publish .\n</code></pre> <p>Creates <code>dist_sup/&lt;name&gt;-&lt;version&gt;.tar.gz</code> using metadata from <code>sup.json</code>.</p>"},{"location":"packaging/#install-from-a-local-registry","title":"Install from a local registry","text":"<pre><code>sup install mathlib --registry ./registry\n</code></pre> <p>Copies <code>./registry/mathlib.sup</code> into the current project and updates <code>sup.lock</code> (or <code>sup.lock.json</code>) with integrity info.</p>"},{"location":"packaging/#lockfile-format-v1","title":"Lockfile format (v1)","text":"<p>Lines of <code>name:sha256hex</code>. Example:</p> <pre><code>mathlib:7b1a5f...c9\n</code></pre> <p><code>sup lock</code> regenerates it from parsed imports.</p>"},{"location":"packaging/#lockfile-format-v2-json","title":"Lockfile format (v2 JSON)","text":"<pre><code>{\n  \"version\": 2,\n  \"modules\": {\n    \"mathlib\": {\"version\": \"*\", \"sha256\": \"7b1a...\", \"source\": \"local\"}\n  }\n}\n</code></pre>"},{"location":"packaging/#http-registry-experimental","title":"HTTP registry (experimental)","text":"<ul> <li>Install: <code>sup install name@1.2.3 --registry https://registry.example.com</code></li> <li>Publish: <code>sup publish . --registry https://registry.example.com</code> The registry API is expected to expose <code>/resolve?name=&amp;version=</code> and <code>/upload</code> endpoints returning/accepting JSON.</li> </ul>"},{"location":"packaging/#local-demo-registry","title":"Local demo registry","text":"<p>Run the built-in demo server (serves modules from <code>REGISTRY_DIR</code>, default CWD):</p> <pre><code>set REGISTRY_DIR=./registry  # PowerShell: $env:REGISTRY_DIR = \"./registry\"\npython -m sup.tools.registry_server\n</code></pre> <p>Then install from it:</p> <pre><code>sup install mathlib --registry http://127.0.0.1:8080\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#install","title":"Install","text":"<pre><code>pip install sup-lang\n</code></pre>"},{"location":"quickstart/#hello-world","title":"Hello world","text":"<p>Create <code>hello.sup</code>:</p> <pre><code>sup\n  print \"Hello, SUP!\"\nbye\n</code></pre> <p>Run:</p> <pre><code>sup hello.sup\n</code></pre>"},{"location":"quickstart/#variables-and-arithmetic","title":"Variables and arithmetic","text":"<pre><code>sup\n  set x to add 2 and 3\n  print the result\n  print subtract 3 from x\nbye\n</code></pre>"},{"location":"quickstart/#control-flow","title":"Control flow","text":"<pre><code>sup\n  set n to 5\n  if n is greater than 3 then\n    print \"big\"\n  else\n    print \"small\"\n  end if\nbye\n</code></pre>"},{"location":"quickstart/#functions","title":"Functions","text":"<pre><code>sup\n  define function called square with x\n    return multiply x and x\n  end function\n\n  print call square with 7\nbye\n</code></pre>"},{"location":"quickstart/#errors-and-imports","title":"Errors and imports","text":"<pre><code>sup\n  try\n    throw \"oops\"\n  catch e\n    print e\n  finally\n    print \"done\"\n  end try\nbye\n</code></pre>"},{"location":"quickstart/#transpile-to-python","title":"Transpile to Python","text":"<pre><code>sup --emit python hello.sup\n</code></pre>"},{"location":"quickstart/#project-transpile-entry-imports","title":"Project transpile (entry + imports)","text":"<pre><code>sup transpile sup-lang/examples/06_mixed.sup --out dist_py\npython dist_py/run.py\n</code></pre>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Please email security reports privately to security@example.com. Include: - A clear description and proof-of-concept if possible - Impact assessment and affected versions - Preferred credit name</p> <p>We will acknowledge within 3 business days and provide a remediation plan and target timeline.</p>"},{"location":"security/#embargo-and-disclosure","title":"Embargo and Disclosure","text":"<ul> <li>Default embargo window: 90 days from initial report, extendable by mutual agreement.</li> <li>Coordinated disclosure: We will publish a GitHub Security Advisory and release patched versions before public disclosure.</li> <li>CVE: We will request a CVE ID via GitHub Advisories and reference it in the release notes and changelog.</li> </ul>"},{"location":"security/#supported-versions","title":"Supported Versions","text":"<ul> <li>We patch the latest minor release and the previous minor when feasible.</li> </ul>"},{"location":"security/#signing-and-integrity","title":"Signing and Integrity","text":"<ul> <li>Git tags and PyPI artifacts are signed with our GPG release key.</li> <li>Checksums (SHA256SUMS) and a CycloneDX SBOM are attached to GitHub Releases.</li> </ul>"},{"location":"security/#supply-chain","title":"Supply Chain","text":"<ul> <li>CI runs on Linux, macOS, and Windows, with tests and fuzz/property checks.</li> <li>pip-audit scans Python dependencies during CI.</li> </ul>"},{"location":"security/#contact","title":"Contact","text":"<ul> <li>security@example.com</li> </ul>"},{"location":"security/#security-policy_1","title":"Security Policy","text":"<p>Report vulnerabilities privately to maintainers. Avoid filing public issues for undisclosed vulnerabilities.</p> <p>We aim to patch critical issues quickly and issue a security release with notes.</p>"},{"location":"spec/","title":"Language Specification (v1.0)","text":""},{"location":"spec/#grammar","title":"Grammar","text":"<ul> <li>Program starts with <code>sup</code> and ends with <code>bye</code>.</li> <li>Assignments: <code>set x to add 2 and 3</code></li> <li>Print: <code>print the result</code> or <code>print &lt;expr&gt;</code></li> <li>Input: <code>ask for name</code></li> <li>If/Else: <code>if a is greater than b then ... else ... end if</code></li> <li>While: <code>while cond ... end while</code></li> <li>For Each: <code>for each item in list ... end for</code></li> <li>Errors: <code>try ... catch e ... finally ... end try</code>, <code>throw &lt;expr&gt;</code></li> <li>Imports: <code>import foo</code>, <code>from foo import bar as baz</code></li> </ul>"},{"location":"spec/#collections","title":"Collections","text":"<ul> <li><code>make list [of A{, B}*]</code>, <code>make map</code></li> <li><code>push X to list</code>, <code>pop from list</code></li> <li><code>get K from map|list</code>, <code>set K to V in map</code>, <code>delete K from map</code>, <code>length of &lt;expr&gt;</code></li> </ul> <p>Booleans and comparisons: <code>and</code>, <code>or</code>, <code>not</code>, <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>.</p>"},{"location":"spec/#design-goals-faq","title":"Design goals (FAQ)","text":"<ul> <li>Readable: strict grammar that reads like English</li> <li>Deterministic: no magical state; explicit evaluation order</li> <li>Helpful errors: line numbers and suggestions when possible</li> <li>Progressive: interpreter first, transpiler available for ecosystem integration</li> </ul>"},{"location":"spec/#semantics-deterministic","title":"Semantics (deterministic)","text":"<p>Truthiness: - Falsey: <code>0</code>, <code>0.0</code>, empty string <code>\"\"</code>, empty list <code>[]</code>, empty map <code>{}</code>, and <code>False</code>. - Everything else is truthy. <code>not</code> applies Python-like truthiness.</p> <p>Operator table (left to right; grammar restricts precedence):</p> <ul> <li>Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> (numeric operands; division yields float)</li> <li>Comparison: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> (numeric compares for numbers, structural equality for lists/maps)</li> <li>Boolean: <code>and</code>, <code>or</code>, <code>not</code> (short-circuit behavior is preserved by evaluation order)</li> </ul> <p>Strings vs bytes: - Strings are Unicode text (UTF-8 encoded in files). There is no separate bytes type in the MVP. - File IO reads/writes strings. Future versions may add explicit bytes and encoding options.</p> <p>Unicode handling: - Source files must be UTF-8. A UTF-8 BOM is tolerated and stripped. - Identifiers are ASCII in MVP; string literals support full Unicode.</p> <p>Scoping and shadowing: - Variables are lexical within a function body; assignment updates the nearest scope. - Function parameters shadow outer variables of the same name. - Module imports bind names at the top level; <code>import m as mm</code> creates a module namespace <code>mm</code>. - <code>from m import f as g</code> binds <code>g</code> directly in the current scope.</p>"},{"location":"spec/#modules-and-imports","title":"Modules and imports","text":"<ul> <li>Search path: <code>SUP_PATH</code> (pathsep-separated) then current working directory.</li> <li>Circular imports raise a diagnostic naming the module.</li> <li><code>import m</code> loads <code>m.sup</code> into an isolated environment and exposes a namespace.</li> <li><code>from m import f as g</code> binds definitions from that namespace.</li> </ul>"},{"location":"spec/#error-model","title":"Error model","text":"<ul> <li>Runtime errors include a message and (when available) a line number.</li> <li><code>throw &lt;expr&gt;</code> raises an error carrying the evaluated value.</li> <li><code>try/catch/finally</code>: <code>catch name</code> binds the thrown value; <code>finally</code> always runs and rethrows if not caught.</li> </ul>"},{"location":"spec/#determinism-and-numerics","title":"Determinism and numerics","text":"<ul> <li><code>/</code> yields floating\u2011point division; <code>+</code>, <code>-</code>, <code>*</code> are numeric with integer folding when exact.</li> <li>Comparisons on numbers are numeric; lists/maps use structural equality.</li> <li>Truthiness: falsey values are <code>0</code>, <code>0.0</code>, <code>\"\"</code>, <code>[]</code>, <code>{}</code>, and <code>False</code>; everything else is truthy.</li> </ul>"},{"location":"spec/#capability-model-runtime","title":"Capability model (runtime)","text":"<ul> <li>Default safe mode denies: network, subprocess, filesystem writes, archiving, sqlite.</li> <li>Enable capabilities via <code>SUP_CAPS=net,process,fs_write,archive,sql</code> or disable all gates with <code>SUP_UNSAFE=1</code>.</li> <li>Stdlib functions requiring capabilities fail with a clear message when not enabled.</li> </ul>"},{"location":"spec/#resource-limits-sandbox","title":"Resource limits (sandbox)","text":"<ul> <li>Limits are optional and configured via environment variables:</li> <li><code>SUP_LIMIT_WALL_MS</code>: maximum wall-clock time for a single run in milliseconds.</li> <li><code>SUP_LIMIT_STEPS</code>: maximum AST evaluation steps.</li> <li><code>SUP_LIMIT_MEM_MB</code>: soft memory cap (bytes tracked via tracemalloc).</li> <li><code>SUP_LIMIT_FD</code>: maximum concurrently open files/handles counted by the interpreter.</li> <li>Exceeding a limit aborts execution with an error of the form <code>Resource limit exceeded: &lt;kind&gt;</code>.</li> </ul>"},{"location":"spec/#deterministic-mode","title":"Deterministic mode","text":"<ul> <li><code>SUP_DETERMINISTIC=1</code> enables reproducible behavior; <code>SUP_SEED</code> provides a numeric seed.</li> <li>Current effects:</li> <li><code>random_bytes(n)</code>: generated from the seeded PRNG.</li> <li><code>now</code>: returns <code>1970-01-01T00:00:00</code>.</li> <li>Additional APIs may opt into deterministic behavior in future minor releases; such changes are additive.</li> </ul>"},{"location":"stdlib/","title":"Standard Library","text":""},{"location":"stdlib/#math","title":"Math","text":"<ul> <li><code>power of A and B</code></li> <li><code>min of A and B</code>, <code>max of A and B</code></li> <li><code>sqrt of X</code>, <code>floor of X</code>, <code>ceil of X</code></li> </ul>"},{"location":"stdlib/#strings","title":"Strings","text":"<ul> <li><code>upper of S</code>, <code>lower of S</code>, <code>trim of S</code>, <code>concat of A and B</code></li> <li><code>join of SEP and LIST</code></li> </ul>"},{"location":"stdlib/#collections","title":"Collections","text":"<ul> <li><code>make list of ...</code>, <code>push</code>, <code>pop</code>, <code>length of L</code></li> <li><code>make map</code>, <code>set \"k\" to v in map</code>, <code>get \"k\" from map</code>, <code>delete \"k\" from map</code></li> <li><code>get N from list</code></li> </ul>"},{"location":"stdlib/#io-and-json","title":"I/O and JSON","text":"<ul> <li><code>read file of PATH</code>, <code>write file of PATH and DATA</code></li> <li><code>json parse of STRING</code>, <code>json stringify of VALUE</code></li> <li><code>now</code> \u2013 current timestamp (ISO)</li> </ul>"},{"location":"types/","title":"Optional Static Typing (Gradual Types)","text":""},{"location":"types/#goals","title":"Goals","text":"<ul> <li>Preserve SUP\u2019s readability while enabling tooling (errors, IDE, optimization).</li> <li>Opt\u2011in at file/function/variable level; type erasure at runtime unless <code>--typecheck</code> is enabled.</li> </ul>"},{"location":"types/#surface-syntax-proposed","title":"Surface syntax (proposed)","text":"<ul> <li>Type annotations via comment directives on headers:</li> </ul> <pre><code>sup\nnote types: add(a: number, b: number) -&gt; number\ndefine function called add with a and b\n  return add a and b\nend function\nbye\n</code></pre> <ul> <li>Variables (optional): <code>note type: x: number</code></li> <li>Containers: <code>list&lt;number&gt;</code>, <code>map&lt;string, number&gt;</code> (for docs/tooling; enforced by linter/typechecker).</li> </ul>"},{"location":"types/#type-system","title":"Type system","text":"<ul> <li>Primitives: number, string, bool, null</li> <li>Structural containers: list, map <li>Functions: (T1, T2, ...) -&gt; R</li> <li>Union and optional: <code>A | B</code>, <code>optional&lt;T&gt;</code></li>"},{"location":"types/#checker","title":"Checker","text":"<ul> <li>Separate tool <code>suptype</code> (future) validates annotations; LSP uses it for diagnostics if configured.</li> <li>Gradual: missing annotations default to <code>any</code> and don\u2019t block execution.</li> </ul>"},{"location":"versioning/","title":"Versioning, Stability, and Releases","text":""},{"location":"versioning/#versioning-policy-v10-and-beyond","title":"Versioning policy (v1.0 and beyond)","text":"<ul> <li>Semantic Versioning (SemVer): MAJOR.MINOR.PATCH</li> <li>Breaking language changes: MAJOR</li> <li>Backward\u2011compatible features: MINOR</li> <li>Bug fixes/perf improvements: PATCH</li> <li>Stability windows: no breaking changes within a MINOR line; deprecations are announced one MINOR ahead.</li> <li>Reserved words: additions allowed in MINOR only if they don\u2019t collide with existing programs; otherwise MAJOR.</li> <li>Parser/AST compatibility: AST node shapes are stable within a MAJOR; new nodes are additive.</li> </ul>"},{"location":"versioning/#lts-releases","title":"LTS releases","text":"<ul> <li>Designate select MINOR versions as LTS (e.g., 1.4, 2.6) supported for 12\u201318 months with backported fixes.</li> <li>Tooling (compiler/VM/LSP) keeps compatibility with LTS minor within its MAJOR.</li> </ul>"},{"location":"versioning/#deprecations","title":"Deprecations","text":"<ul> <li>Mark features as deprecated in docs and diagnostics; provide migration tips.</li> <li>Remove deprecations only on next MAJOR.</li> <li>Deprecation horizon: minimum one MINOR cycle, preferred two.</li> </ul>"},{"location":"versioning/#migration-policy","title":"Migration policy","text":"<ul> <li>Each deprecation entry includes: affected syntax/API, replacement, examples, and an automated lint fix if feasible.</li> <li>Provide a <code>--migrate</code> tool (future) to rewrite common patterns; changelog links to guides.</li> <li>RFC needed for language removals; include risk &amp; ecosystem impact.</li> </ul>"},{"location":"versioning/#release-cadence","title":"Release cadence","text":"<ul> <li>Regular MINOR releases (4\u20138 weeks), PATCH as needed.</li> <li>RC tags for release candidates; issue a changelog with migration notes.</li> </ul>"},{"location":"versioning/#stability-guarantees-summary","title":"Stability guarantees summary","text":"<ul> <li>Language grammar/semantics: stable within MAJOR; see spec for details.</li> <li>Tooling (CLI/LSP/formatter): config flags may grow; defaults won\u2019t break existing behavior within MINOR.</li> <li>Stdlib: additive within MINOR; capability requirements documented and stable.</li> </ul>"},{"location":"rfcs/","title":"Overview","text":""},{"location":"rfcs/#rfcs","title":"RFCs","text":"<p>Propose significant changes via RFCs. Start by copying <code>0000-template.md</code> and opening a PR for discussion.</p>"},{"location":"rfcs/0000-template/","title":"RFC Template","text":""},{"location":"rfcs/0000-template/#summary","title":"Summary","text":"<p>One paragraph explaining the feature or change.</p>"},{"location":"rfcs/0000-template/#motivation","title":"Motivation","text":"<p>Why we need this and what problems it solves.</p>"},{"location":"rfcs/0000-template/#detailed-design","title":"Detailed design","text":"<p>Syntax, semantics, examples, edge cases.</p>"},{"location":"rfcs/0000-template/#drawbacks","title":"Drawbacks","text":"<p>Potential downsides.</p>"},{"location":"rfcs/0000-template/#alternatives","title":"Alternatives","text":"<p>Other options considered.</p>"},{"location":"rfcs/0000-template/#unresolved-questions","title":"Unresolved questions","text":"<p>Follow-ups and open items.</p>"}]}
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sup Language Sup is an English-like programming language with deterministic semantics and human-friendly errors!!! Variables, arithmetic, strings Collections (lists, maps) Control flow (if/else, while, for each) Functions Errors and imports Transpiler to Python Get started: sup examples/06_mixed.sup","title":"Home"},{"location":"#sup-language","text":"Sup is an English-like programming language with deterministic semantics and human-friendly errors!!! Variables, arithmetic, strings Collections (lists, maps) Control flow (if/else, while, for each) Functions Errors and imports Transpiler to Python Get started: sup examples/06_mixed.sup","title":"Sup Language"},{"location":"benchmarks/","text":"Benchmarks High-level microbenchmarks to track performance over time. Automate in CI and publish deltas. Arithmetic loops and function calls List operations and string joins File IO and JSON parse/stringify Planned: publish charts and gate regressions per commit.","title":"Benchmarks"},{"location":"benchmarks/#benchmarks","text":"High-level microbenchmarks to track performance over time. Automate in CI and publish deltas. Arithmetic loops and function calls List operations and string joins File IO and JSON parse/stringify Planned: publish charts and gate regressions per commit.","title":"Benchmarks"},{"location":"code_of_conduct/","text":"Code of Conduct Be respectful and inclusive. Harassment and discrimination are not tolerated. Report incidents to maintainers. Consequences for violations include warnings or bans.","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"Be respectful and inclusive. Harassment and discrimination are not tolerated. Report incidents to maintainers. Consequences for violations include warnings or bans.","title":"Code of Conduct"},{"location":"contributing/","text":"Contributing Thank you for contributing to SUP! Please: Use pre-commit hooks (Black, Ruff, Isort, Pyupgrade, MyPy where applicable) Write tests (pytest + Hypothesis) and keep coverage healthy Include clear commit messages and small focused PRs Discuss larger changes via an RFC (see RFCs section) Setup: pip install -r requirements-dev.txt # or use pipx/venv pre-commit install pytest -q","title":"Contributing"},{"location":"contributing/#contributing","text":"Thank you for contributing to SUP! Please: Use pre-commit hooks (Black, Ruff, Isort, Pyupgrade, MyPy where applicable) Write tests (pytest + Hypothesis) and keep coverage healthy Include clear commit messages and small focused PRs Discuss larger changes via an RFC (see RFCs section) Setup: pip install -r requirements-dev.txt # or use pipx/venv pre-commit install pytest -q","title":"Contributing"},{"location":"cookbook/","text":"How-To Cookbook Print Hello World sup print \"Hello, world!\" bye Define and call a function sup define function called add with a and b return add a and b end function print call add with 2 and 3 bye Lists and join sup make list of 1, 2, 3 print join of \",\" and list bye Files, JSON, and regex sup print json stringify of make list of 1, 2 print regex replace of \"l\" and \"hello\" and \"L\" bye Imports and calling a function from a module sup import mathlib print mathlib.pi print call mathlib.square with 3 bye","title":"How-To Cookbook"},{"location":"cookbook/#how-to-cookbook","text":"Print Hello World sup print \"Hello, world!\" bye Define and call a function sup define function called add with a and b return add a and b end function print call add with 2 and 3 bye Lists and join sup make list of 1, 2, 3 print join of \",\" and list bye Files, JSON, and regex sup print json stringify of make list of 1, 2 print regex replace of \"l\" and \"hello\" and \"L\" bye Imports and calling a function from a module sup import mathlib print mathlib.pi print call mathlib.square with 3 bye","title":"How-To Cookbook"},{"location":"examples/","text":"Examples Gallery This page links to small SUP programs demonstrating common patterns. Arithmetic and variables Functions and calls Control flow ( if , repeat ) Lists and string utilities Files, JSON, regex, env/glob (via builtins) You can run examples with the CLI: sup path/to/example.sup","title":"Examples"},{"location":"examples/#examples-gallery","text":"This page links to small SUP programs demonstrating common patterns. Arithmetic and variables Functions and calls Control flow ( if , repeat ) Lists and string utilities Files, JSON, regex, env/glob (via builtins) You can run examples with the CLI: sup path/to/example.sup","title":"Examples Gallery"},{"location":"governance/","text":"Governance Project roles: Maintainers: triage, review, roadmap, releases Contributors: issues, PRs, docs, examples Decision process: Small changes via PR and review Larger changes via RFCs with discussion and acceptance criteria Releases: Semantic versioning, with deprecation policy outlined in versioning.md","title":"Governance"},{"location":"governance/#governance","text":"Project roles: Maintainers: triage, review, roadmap, releases Contributors: issues, PRs, docs, examples Decision process: Small changes via PR and review Larger changes via RFCs with discussion and acceptance criteria Releases: Semantic versioning, with deprecation policy outlined in versioning.md","title":"Governance"},{"location":"modules/","text":"Modules, Imports, and Package Metadata Resolution Search order: current working directory, then paths in SUP_PATH (os\u2011path\u2011sep separated). A module foo is sourced from foo.sup . Syntax import foo \u2192 binds namespace foo.* in current scope. from foo import bar as baz \u2192 binds symbol bar (function/var) as baz . Execution model On import, the module executes in its own environment; exported top\u2011level variables and functions become available to importers. Circular import detection raises an error. Package metadata (future) sup.json in project root: { \"name\": \"myapp\", \"version\": \"0.1.0\", \"description\": \"...\", \"entry\": \"main.sup\", \"dependencies\": { \"mathlib\": \"^1.0.0\" } } Used by a future package manager to resolve dependencies and publish packages.","title":"Modules, Imports, and Package Metadata"},{"location":"modules/#modules-imports-and-package-metadata","text":"","title":"Modules, Imports, and Package Metadata"},{"location":"modules/#resolution","text":"Search order: current working directory, then paths in SUP_PATH (os\u2011path\u2011sep separated). A module foo is sourced from foo.sup .","title":"Resolution"},{"location":"modules/#syntax","text":"import foo \u2192 binds namespace foo.* in current scope. from foo import bar as baz \u2192 binds symbol bar (function/var) as baz .","title":"Syntax"},{"location":"modules/#execution-model","text":"On import, the module executes in its own environment; exported top\u2011level variables and functions become available to importers. Circular import detection raises an error.","title":"Execution model"},{"location":"modules/#package-metadata-future","text":"sup.json in project root: { \"name\": \"myapp\", \"version\": \"0.1.0\", \"description\": \"...\", \"entry\": \"main.sup\", \"dependencies\": { \"mathlib\": \"^1.0.0\" } } Used by a future package manager to resolve dependencies and publish packages.","title":"Package metadata (future)"},{"location":"packaging/","text":"Packaging and Project Commands Scaffold sup init myapp Creates main.sup , sup.json , and README.md . Build (transpile project) sup build main.sup --out dist_sup Produces Python modules and a run.py launcher. Sourcemaps are generated with sourceMappingURL . Lockfile sup lock main.sup Writes sup.lock containing module paths and SHA256 hashes for reproducible builds. Test runner sup test tests/ Runs all .sup files in a directory and reports pass count (zero exit code when all pass). Publish (source tarball) sup publish . Creates dist_sup/<name>-<version>.tar.gz using metadata from sup.json .","title":"Packaging and Project Commands"},{"location":"packaging/#packaging-and-project-commands","text":"","title":"Packaging and Project Commands"},{"location":"packaging/#scaffold","text":"sup init myapp Creates main.sup , sup.json , and README.md .","title":"Scaffold"},{"location":"packaging/#build-transpile-project","text":"sup build main.sup --out dist_sup Produces Python modules and a run.py launcher. Sourcemaps are generated with sourceMappingURL .","title":"Build (transpile project)"},{"location":"packaging/#lockfile","text":"sup lock main.sup Writes sup.lock containing module paths and SHA256 hashes for reproducible builds.","title":"Lockfile"},{"location":"packaging/#test-runner","text":"sup test tests/ Runs all .sup files in a directory and reports pass count (zero exit code when all pass).","title":"Test runner"},{"location":"packaging/#publish-source-tarball","text":"sup publish . Creates dist_sup/<name>-<version>.tar.gz using metadata from sup.json .","title":"Publish (source tarball)"},{"location":"quickstart/","text":"Quickstart Install pip install sup-lang Hello world Create hello.sup : sup print \"Hello, SUP!\" bye Run: sup hello.sup Variables and arithmetic sup set x to add 2 and 3 print the result print subtract 3 from x bye Control flow sup set n to 5 if n is greater than 3 then print \"big\" else print \"small\" end if bye Functions sup define function called square with x return multiply x and x end function print call square with 7 bye Errors and imports sup try throw \"oops\" catch e print e finally print \"done\" end try bye Transpile to Python sup --emit python hello.sup Project transpile (entry + imports) sup transpile sup-lang/examples/06_mixed.sup --out dist_py python dist_py/run.py","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#install","text":"pip install sup-lang","title":"Install"},{"location":"quickstart/#hello-world","text":"Create hello.sup : sup print \"Hello, SUP!\" bye Run: sup hello.sup","title":"Hello world"},{"location":"quickstart/#variables-and-arithmetic","text":"sup set x to add 2 and 3 print the result print subtract 3 from x bye","title":"Variables and arithmetic"},{"location":"quickstart/#control-flow","text":"sup set n to 5 if n is greater than 3 then print \"big\" else print \"small\" end if bye","title":"Control flow"},{"location":"quickstart/#functions","text":"sup define function called square with x return multiply x and x end function print call square with 7 bye","title":"Functions"},{"location":"quickstart/#errors-and-imports","text":"sup try throw \"oops\" catch e print e finally print \"done\" end try bye","title":"Errors and imports"},{"location":"quickstart/#transpile-to-python","text":"sup --emit python hello.sup","title":"Transpile to Python"},{"location":"quickstart/#project-transpile-entry-imports","text":"sup transpile sup-lang/examples/06_mixed.sup --out dist_py python dist_py/run.py","title":"Project transpile (entry + imports)"},{"location":"security/","text":"Security Policy Report vulnerabilities privately to maintainers. Avoid filing public issues for undisclosed vulnerabilities. We aim to patch critical issues quickly and issue a security release with notes.","title":"Security"},{"location":"security/#security-policy","text":"Report vulnerabilities privately to maintainers. Avoid filing public issues for undisclosed vulnerabilities. We aim to patch critical issues quickly and issue a security release with notes.","title":"Security Policy"},{"location":"spec/","text":"Language Specification Grammar highlights: - Program starts with sup and ends with bye . - Assignments: set x to add 2 and 3 - Print: print the result or print <expr> - Input: ask for name - If/Else: if a is greater than b then ... else ... end if - While: while cond ... end while - For Each: for each item in list ... end for - Errors: try ... catch e ... finally ... end try , throw <expr> - Imports: import foo , from foo import bar as baz Booleans and comparisons: and , or , not , == , != , < , > , <= , >= . Design goals (FAQ) Readable: strict grammar that reads like English Deterministic: no magical state; explicit evaluation order Helpful errors: line numbers and suggestions when possible Progressive: interpreter first, transpiler available for ecosystem integration Semantics Truthiness: - Falsey: 0 , 0.0 , empty string \"\" , empty list [] , empty map {} , and False . - Everything else is truthy. not applies Python-like truthiness. Operator table (left to right, no precedence mixing beyond what grammar allows): Arithmetic: + , - , * , / (numeric operands; division yields float) Comparison: == , != , < , > , <= , >= (numeric compares for numbers, structural equality for lists/maps) Boolean: and , or , not (short-circuit behavior is preserved by evaluation order) Strings vs bytes: - Strings are Unicode text (UTF-8 encoded in files). There is no separate bytes type in the MVP. - File IO reads/writes strings. Future versions may add explicit bytes and encoding options. Unicode handling: - Source files must be UTF-8. A UTF-8 BOM is tolerated and stripped. - Identifiers are ASCII in MVP; string literals support full Unicode. Scoping and shadowing: - Variables are lexical within a function body; assignment updates the nearest scope. - Function parameters shadow outer variables of the same name. - Module imports bind names at the top level; import m as mm creates a module namespace mm . - from m import f as g binds g directly in the current scope.","title":"Language Spec"},{"location":"spec/#language-specification","text":"Grammar highlights: - Program starts with sup and ends with bye . - Assignments: set x to add 2 and 3 - Print: print the result or print <expr> - Input: ask for name - If/Else: if a is greater than b then ... else ... end if - While: while cond ... end while - For Each: for each item in list ... end for - Errors: try ... catch e ... finally ... end try , throw <expr> - Imports: import foo , from foo import bar as baz Booleans and comparisons: and , or , not , == , != , < , > , <= , >= .","title":"Language Specification"},{"location":"spec/#design-goals-faq","text":"Readable: strict grammar that reads like English Deterministic: no magical state; explicit evaluation order Helpful errors: line numbers and suggestions when possible Progressive: interpreter first, transpiler available for ecosystem integration","title":"Design goals (FAQ)"},{"location":"spec/#semantics","text":"Truthiness: - Falsey: 0 , 0.0 , empty string \"\" , empty list [] , empty map {} , and False . - Everything else is truthy. not applies Python-like truthiness. Operator table (left to right, no precedence mixing beyond what grammar allows): Arithmetic: + , - , * , / (numeric operands; division yields float) Comparison: == , != , < , > , <= , >= (numeric compares for numbers, structural equality for lists/maps) Boolean: and , or , not (short-circuit behavior is preserved by evaluation order) Strings vs bytes: - Strings are Unicode text (UTF-8 encoded in files). There is no separate bytes type in the MVP. - File IO reads/writes strings. Future versions may add explicit bytes and encoding options. Unicode handling: - Source files must be UTF-8. A UTF-8 BOM is tolerated and stripped. - Identifiers are ASCII in MVP; string literals support full Unicode. Scoping and shadowing: - Variables are lexical within a function body; assignment updates the nearest scope. - Function parameters shadow outer variables of the same name. - Module imports bind names at the top level; import m as mm creates a module namespace mm . - from m import f as g binds g directly in the current scope.","title":"Semantics"},{"location":"stdlib/","text":"Standard Library Math power of A and B min of A and B , max of A and B sqrt of X , floor of X , ceil of X Strings upper of S , lower of S , trim of S , concat of A and B join of SEP and LIST Collections make list of ... , push , pop , length of L make map , set \"k\" to v in map , get \"k\" from map , delete \"k\" from map get N from list I/O and JSON read file of PATH , write file of PATH and DATA json parse of STRING , json stringify of VALUE now \u2013 current timestamp (ISO)","title":"Standard Library"},{"location":"stdlib/#standard-library","text":"","title":"Standard Library"},{"location":"stdlib/#math","text":"power of A and B min of A and B , max of A and B sqrt of X , floor of X , ceil of X","title":"Math"},{"location":"stdlib/#strings","text":"upper of S , lower of S , trim of S , concat of A and B join of SEP and LIST","title":"Strings"},{"location":"stdlib/#collections","text":"make list of ... , push , pop , length of L make map , set \"k\" to v in map , get \"k\" from map , delete \"k\" from map get N from list","title":"Collections"},{"location":"stdlib/#io-and-json","text":"read file of PATH , write file of PATH and DATA json parse of STRING , json stringify of VALUE now \u2013 current timestamp (ISO)","title":"I/O and JSON"},{"location":"types/","text":"Optional Static Typing (Gradual Types) Goals Preserve SUP\u2019s readability while enabling tooling (errors, IDE, optimization). Opt\u2011in at file/function/variable level; type erasure at runtime unless --typecheck is enabled. Surface syntax (proposed) Type annotations via comment directives on headers: sup note types: add(a: number, b: number) -> number define function called add with a and b return add a and b end function bye Variables (optional): note type: x: number Containers: list<number> , map<string, number> (for docs/tooling; enforced by linter/typechecker). Type system Primitives: number, string, bool, null Structural containers: list , map Functions: (T1, T2, ...) -> R Union and optional: A | B , optional<T> Checker Separate tool suptype (future) validates annotations; LSP uses it for diagnostics if configured. Gradual: missing annotations default to any and don\u2019t block execution.","title":"Optional Static Typing (Gradual Types)"},{"location":"types/#optional-static-typing-gradual-types","text":"","title":"Optional Static Typing (Gradual Types)"},{"location":"types/#goals","text":"Preserve SUP\u2019s readability while enabling tooling (errors, IDE, optimization). Opt\u2011in at file/function/variable level; type erasure at runtime unless --typecheck is enabled.","title":"Goals"},{"location":"types/#surface-syntax-proposed","text":"Type annotations via comment directives on headers: sup note types: add(a: number, b: number) -> number define function called add with a and b return add a and b end function bye Variables (optional): note type: x: number Containers: list<number> , map<string, number> (for docs/tooling; enforced by linter/typechecker).","title":"Surface syntax (proposed)"},{"location":"types/#type-system","text":"Primitives: number, string, bool, null Structural containers: list , map Functions: (T1, T2, ...) -> R Union and optional: A | B , optional<T>","title":"Type system"},{"location":"types/#checker","text":"Separate tool suptype (future) validates annotations; LSP uses it for diagnostics if configured. Gradual: missing annotations default to any and don\u2019t block execution.","title":"Checker"},{"location":"versioning/","text":"Versioning, Stability, and Releases Versioning policy Semantic Versioning (SemVer): MAJOR.MINOR.PATCH Breaking language changes: MAJOR Backward\u2011compatible features: MINOR Bug fixes/perf improvements: PATCH Stability windows: no breaking changes within a MINOR line; deprecations are announced one MINOR ahead. LTS releases Designate select MINOR versions as LTS (e.g., 1.4, 2.6) supported for 12\u201318 months with backported fixes. Tooling (compiler/VM/LSP) keeps compatibility with LTS minor within its MAJOR. Deprecations Mark features as deprecated in docs and diagnostics; provide migration tips. Remove deprecations only on next MAJOR. Migration policy Each deprecation entry includes: affected syntax/API, replacement, examples, and an automated lint fix if feasible. Provide a --migrate tool (future) to rewrite common patterns; changelog links to guides. Release cadence Regular MINOR releases (4\u20138 weeks), PATCH as needed. RC tags for release candidates; issue a changelog with migration notes.","title":"Versioning, Stability, and Releases"},{"location":"versioning/#versioning-stability-and-releases","text":"","title":"Versioning, Stability, and Releases"},{"location":"versioning/#versioning-policy","text":"Semantic Versioning (SemVer): MAJOR.MINOR.PATCH Breaking language changes: MAJOR Backward\u2011compatible features: MINOR Bug fixes/perf improvements: PATCH Stability windows: no breaking changes within a MINOR line; deprecations are announced one MINOR ahead.","title":"Versioning policy"},{"location":"versioning/#lts-releases","text":"Designate select MINOR versions as LTS (e.g., 1.4, 2.6) supported for 12\u201318 months with backported fixes. Tooling (compiler/VM/LSP) keeps compatibility with LTS minor within its MAJOR.","title":"LTS releases"},{"location":"versioning/#deprecations","text":"Mark features as deprecated in docs and diagnostics; provide migration tips. Remove deprecations only on next MAJOR.","title":"Deprecations"},{"location":"versioning/#migration-policy","text":"Each deprecation entry includes: affected syntax/API, replacement, examples, and an automated lint fix if feasible. Provide a --migrate tool (future) to rewrite common patterns; changelog links to guides.","title":"Migration policy"},{"location":"versioning/#release-cadence","text":"Regular MINOR releases (4\u20138 weeks), PATCH as needed. RC tags for release candidates; issue a changelog with migration notes.","title":"Release cadence"},{"location":"rfcs/","text":"RFCs Propose significant changes via RFCs. Start by copying 0000-template.md and opening a PR for discussion.","title":"Overview"},{"location":"rfcs/#rfcs","text":"Propose significant changes via RFCs. Start by copying 0000-template.md and opening a PR for discussion.","title":"RFCs"},{"location":"rfcs/0000-template/","text":"Summary One paragraph explaining the feature or change. Motivation Why we need this and what problems it solves. Detailed design Syntax, semantics, examples, edge cases. Drawbacks Potential downsides. Alternatives Other options considered. Unresolved questions Follow-ups and open items.","title":"Template"},{"location":"rfcs/0000-template/#summary","text":"One paragraph explaining the feature or change.","title":"Summary"},{"location":"rfcs/0000-template/#motivation","text":"Why we need this and what problems it solves.","title":"Motivation"},{"location":"rfcs/0000-template/#detailed-design","text":"Syntax, semantics, examples, edge cases.","title":"Detailed design"},{"location":"rfcs/0000-template/#drawbacks","text":"Potential downsides.","title":"Drawbacks"},{"location":"rfcs/0000-template/#alternatives","text":"Other options considered.","title":"Alternatives"},{"location":"rfcs/0000-template/#unresolved-questions","text":"Follow-ups and open items.","title":"Unresolved questions"}]}
[tool.poetry]
name = "superlinked-server"
version = "1.56.1" # The version will be dynamically updated
description = "Superlinked server enables fast and scalable vector search and storage"
authors = ["Superlinked Release <release@superlinked.com>"]
license = "Apache-2.0"
include = ["NOTICE"]
readme = "PYPI_README.md"
packages = [{ include = "superlinked" }]

[tool.poetry.dependencies]
python = ">=3.10.3,<=3.12.3"
pandas = "^2.0.3"
fastapi = ">=0.115,<0.117"
uvicorn = ">=0.32,<0.36"
inject = "^5.2.0"
fastapi-restful = "^0.6.0"
pydantic = "^2.6.3"
pydantic-settings = "^2.5.2"
typing-inspect = "^0.9.0"
superlinked = {version = "^37.4.0", extras = ["mongo", "pub-sub", "redis", "storage", "qdrant"]}
python-json-logger = ">=2.0.7,<4.0.0"
asgi-correlation-id = "^4.3.3"
# Both needed to support pandas read from s3:// or gs://
gcsfs = "^2024.10.0"
fsspec = "^2024.10.0"
s3fs = "^2024.10.0"
fastparquet = "^2024.11.0"
sentry-sdk = { extras = ["fastapi"], version = "^2.24.1" }
structlog-sentry = "^2.2.1"
opentelemetry-exporter-otlp-proto-grpc = "^1.36.0"
orjson = "^3.11.3"

[tool.poetry.group.dev.dependencies]
debugpy = "^1.8.9"
typing-extensions = "^4.9.0"
pytest = "^8.3.3"
pytest-mock = "^3.12.0"
pytest-emoji = "^0.2.0"
pytest-md = "^0.2.0"
pytest-asyncio = ">=0.24,<1.3"
types-google-cloud-ndb = "^2.2.0.20240205"
types-jmespath = "^1.0.2.20240106"
types-requests = "^2.27.1"
types-pyyaml = "^6.0.12.12"
mypy = "^1.17.1"
pylint = "^3.1.0"
vermin = "^1.6.0"
black = ">=24.10,<26.0"
isort = ">=5.13.2,<7.0.0"
flake8 = "^7.1.1"
flake8-pyproject = "^1.2.3"
autoflake = "^2.3.1"
detect-secrets = "^1.5.0"
python-semantic-release = ">=9.14,<11.0"
setuptools-git-versioning = "^2.0.0"
pytest-benchmark = "^5.1.0"
pyupgrade = "^3.20.0"

[build-system]
requires = [
    "setuptools>=41",
    "wheel",
    "setuptools-git-versioning<2",
    "poetry-core>=1.0.0",
]
build-backend = "poetry.core.masonry.api"

[tool.setuptools-git-versioning]
enabled = true

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["superlinked*"]
exclude = ["tools*", "test*"]

[tool.mypy]
implicit_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "test.*"
disable_error_code = ["attr-defined"]

[[tool.mypy.overrides]]
module = ["uvicorn.*", "pandas.*", "google.*", "grpc.*"]
ignore_missing_imports = true

[tool.black]
line-length = 120

[tool.flake8]
max-line-length = 120
extend-ignore = "E203"

[tool.pylint.MASTER]
max-args = 6
max-line-length = 120
disable = [
    "import-error",
    "no-name-in-module",
    "too-many-positional-arguments",
    "missing-module-docstring", # do not enforce docstrings
    "missing-class-docstring", # do not enforce docstrings
    "missing-function-docstring", # do not enforce docstrings
    "too-few-public-methods",
    "protected-access",
    "R0801", # Disable duplication check
    "fixme", # We enable TODOs in the code
    "format", # handled by black
    "design", # disables all complexity / design checks
    "similarities" # redundant with R0801, extra cost
]

[tool.pytest.ini_options]
asyncio_mode = "auto"

[semantic_release]
assets = []
commit_message = "[skip ci] {version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "{version}"

[semantic_release.branches.main]
match = "(main)"
prerelease_token = "rc"
prerelease = false

[semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "build"]

[semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[semantic_release.remote.token]
env = "GH_TOKEN"

[semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = false

[tool.isort]
profile = "black"
line_length = 120
known_first_party = ["superlinked"]

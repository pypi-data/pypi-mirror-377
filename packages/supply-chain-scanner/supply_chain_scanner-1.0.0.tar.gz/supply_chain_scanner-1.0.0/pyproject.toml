[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "supply-chain-scanner"
version = "1.0.0"
description = "A comprehensive security tool to detect compromised NPM packages in Git repositories"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Security Community", email = "security@community.org"}
]
maintainers = [
    {name = "Security Community", email = "security@community.org"}
]
keywords = ["security", "supply-chain", "npm", "vulnerability", "scanner", "github", "gitlab"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Security",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: System :: Systems Administration",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.28.0",
    "PyYAML>=6.0",
    "urllib3>=1.26.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "types-requests",
    "types-PyYAML",
    "bandit>=1.7.0",
    "isort>=5.12.0",
    "pre-commit>=2.20.0",
    "build>=0.8.0",
    "twine>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/security-community/supply-chain-scanner"
Documentation = "https://github.com/security-community/supply-chain-scanner/wiki"
Repository = "https://github.com/security-community/supply-chain-scanner.git"
"Bug Reports" = "https://github.com/security-community/supply-chain-scanner/issues"
Changelog = "https://github.com/security-community/supply-chain-scanner/blob/main/CHANGELOG.md"

[project.scripts]
supply-chain-scanner = "scanner:main"
scs = "scanner:main"

[tool.setuptools]
py-modules = ["scanner"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["scanner"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["scanner"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test
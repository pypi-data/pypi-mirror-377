[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "syinfo"
dynamic = ["version"]
description = "A comprehensive Python package for hardware, network, and software information gathering with advanced monitoring capabilities"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Mohit Rajput", email = "mohitrajput901@gmail.com"},
]
maintainers = [
    {name = "Mohit Rajput", email = "mohitrajput901@gmail.com"},
]
keywords = [
    "system", "monitoring", "information", "network", "hardware", 
    "linux", "performance", "analytics", "devops"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering",
    "Environment :: Console",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: POSIX :: Linux",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "psutil>=5.9.5",
    "PyYAML>=5.3.1", 
    "tabulate>=0.9.0",
    "getmac>=0.9.4",
    "GPUtil>=1.4.0",
    "scapy>=2.5.0",
    "py-cpuinfo>=9.0.0",
    "requests>=2.25.0",
    "pandas>=1.5.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.12.0",
    "numpy>=1.21.0",
    "paramiko>=2.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "coverage[toml]>=7.0.0",
    "build>=1.2.1",
    "twine>=5.1.1",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/MR901/syinfo"
Repository = "https://github.com/MR901/syinfo"
Documentation = "https://syinfo.readthedocs.io"
Changelog = "https://github.com/MR901/syinfo/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/MR901/syinfo/issues"

[project.scripts]
syinfo = "syinfo.__main__:main"

[tool.hatch.version]
path = "syinfo/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["syinfo"]

[tool.hatch.build]
only-include = ["syinfo"]

[tool.hatch.build.targets.sdist]
include = [
    "syinfo",
    "docs",
    "tests",
    "examples",
    "README.md",
    "LICENSE"
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["syinfo", "tests"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "psutil.*",
    "GPUtil.*",
    "getmac.*",
    "scapy.*",
    "cpuinfo.*",
    "yaml.*",
    "tabulate.*",
]
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "COM", # flake8-commas
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
    "Q",   # flake8-quotes (enforce double quotes)
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0915", # too many statements
    "PLR0913", # too many arguments
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

# Configure quote style enforcement
[tool.ruff.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"
avoid-escape = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=syinfo",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "slow: Slow running tests",
    "monitoring: Tests requiring monitoring features",
    "network: Tests requiring network access",
    "sudo: Tests requiring sudo privileges",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["syinfo"]
branch = true
parallel = true
omit = [
    "syinfo/__main__.py",
    "tests/*",
    "examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "pragma: no cover",
    "def __repr__",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linter
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]

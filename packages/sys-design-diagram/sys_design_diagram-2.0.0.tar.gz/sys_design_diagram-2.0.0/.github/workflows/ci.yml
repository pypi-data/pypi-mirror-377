name: CI

on:
  push:
    branches: [ main ]
    tags-ignore:
      - '*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci
  cancel-in-progress: true

env:
  ENVIRONMENT_FILE: '.githooks.d/pre-commit_environment.yml'
  PRE_COMMIT_CONFIG: '.githooks.d/.pre-commit-config.yaml'
  TESTS_DATA: 'tests-data'
  MICROMAMBA_ENV_NAME: sys-design-diagram-env
  # Cache key base on github cache rules between branch and pull request
  MICROMAMBA_CACHE_KEY: micromamba-env-key-${{ github.head_ref }}-${{ github.event_name }}

jobs:
  prepare-micromamba-cache:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup micromamba and cache
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: ${{ env.ENVIRONMENT_FILE }}
          cache-environment: true
          cache-downloads: false
          cache-environment-key: ${{ env.MICROMAMBA_CACHE_KEY }}

  run-lint-tests:
    needs: prepare-micromamba-cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: ${{ env.ENVIRONMENT_FILE }}
          cache-environment: true
          cache-downloads: false
          cache-environment-key: ${{ env.MICROMAMBA_CACHE_KEY }}

      - name: Run pre-commit
        run: micromamba run -n ${{ env.MICROMAMBA_ENV_NAME }} pre-commit run --all-files -c ${{ env.PRE_COMMIT_CONFIG }}

  build-docker-image:
    needs: run-lint-tests
    strategy:
      matrix:
        platform: [ linux/amd64, linux/arm64 ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build docker test image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile_local
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          tags: test-image:latest

      - name: Cache Docker Buildx
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-new
          key: buildx-cache-${{ runner.os }}-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            buildx-cache-${{ runner.os }}-${{ matrix.platform }}-

      - name: Generate diagrams in container
        run: |
          set -euxo pipefail
          docker run --rm test-image:latest --version
          docker run --rm test-image:latest --help
          mkdir -p /tmp/tests-output
          chmod 777 /tmp/tests-output
          docker run --rm \
            -v "${GITHUB_WORKSPACE}/${{ env.TESTS_DATA }}:/home/sdd-user/tests-data:ro" \
            -v /tmp/tests-output:/home/sdd-user/sdd-out \
            test-image:latest -v process-all -d /home/sdd-user/tests-data -o /home/sdd-user/sdd-out
          echo "Listing generated files (recursive):"
          find /tmp/tests-output -maxdepth 4 -type f -print || true

      - name: Verify generated diagrams
        run: |
          set -euo pipefail
          echo "Deriving expected output PNGs from source design files..."
          expected_rel_paths=$(find "${GITHUB_WORKSPACE}/${{ env.TESTS_DATA }}" -type f \( -name 'diagrams*.py' -o -name 'diagram*.mmd' \) -printf '%P\n' \
            | sed -E 's#^(design[^/]+)/([^/]+)\.(py|mmd)$#\1/\2.png#')
          echo "Expected relative PNG files:" $expected_rel_paths
          missing=0
          for rel in $expected_rel_paths; do
            target="/tmp/tests-output/$rel"
            if [ ! -s "$target" ]; then
              echo "MISSING or EMPTY: $target" >&2
              missing=$((missing+1))
            else
              echo "OK: $target"
            fi
          done
          expected_min=7
          actual_count=$(find /tmp/tests-output -type f -name '*.png' | wc -l | tr -d ' ')
          echo "Total PNG files found: $actual_count"
          if [ "$actual_count" -lt "$expected_min" ]; then
            echo "ERROR: expected at least $expected_min PNG files, got $actual_count" >&2
            exit 1
          fi
          if [ "$missing" -ne 0 ]; then
            echo "ERROR: $missing expected diagram file(s) missing or empty" >&2
            exit 1
          fi
          echo "All expected diagram files are present and count threshold met."

      - name: Upload generated diagrams (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generated-diagrams-${{ replace(matrix.platform, '/', '-') }}
          path: /tmp/tests-output
          retention-days: 5

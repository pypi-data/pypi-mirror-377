name: Release

on:
  push:
    branches: [ main ]
    tags: ['[0-9]+\.[0-9]+\.[0-9]*']
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

env:
  APP_NAME: sys-design-diagram
  REGISTRY_IMAGE: ${{ secrets.DOCKER_USERNAME }}/sys-design-diagram

concurrency:
  group: release-pipeline
  cancel-in-progress: true

jobs:
  build:
    name: Build pypi package with hatch
    runs-on: ubuntu-latest
    outputs:
      wheel-distribution: ${{ steps.wheel-distribution.outputs.path }}

    defaults:
      run:
        shell: bash -el {0}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: 3.12

      - name: Install hatch
        run: |
          python -m pip install --upgrade pip
          python -m pip install hatch

      - name: Build package
        id: build-package
        run: |
          hatch build

      - name: Upload wheel distribution file as artifacts
        id: wheel-distribution
        uses: actions/upload-artifact@v4
        with:
          name: python-distribution-files
          path: dist/*
          if-no-files-found: error

  publish:
    name: Release pypi package
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    environment: Production

    permissions:
      id-token: write
      # no contents write needed here; release handled in separate job

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Download wheel distribution file
        uses: actions/download-artifact@v5
        with:
          name: python-distribution-files
          path: dist

      - name: Publish Package To PyPi
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          skip-existing: true

  github_release:
    name: Create GitHub release
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code (for changelog / tag context)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Download wheel distribution file
        uses: actions/download-artifact@v5
        with:
          name: python-distribution-files
          path: dist
      - name: Extract version (no leading v)
        id: version
        run: |
          TAG_REF="${GITHUB_REF##*/}"
          CLEAN="${TAG_REF#v}"
          echo "clean=${CLEAN}" >> "$GITHUB_OUTPUT"
      - name: Determine prerelease flag
        id: prerelease_flag
        run: |
          TAG="${GITHUB_REF##*/}"
          if echo "$TAG" | grep -Eiq '(-|\.)((alpha|beta|rc)[0-9]*)'; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Create GitHub Release (softprops)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          prerelease: ${{ steps.prerelease_flag.outputs.is_prerelease }}
          files: |
            dist/*.whl
          generate_release_notes: true
          body: |
            PyPI: https://pypi.org/project/sys-design-diagram/${{ steps.version.outputs.clean }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build-and-push:
    name: Build and Push Docker Images
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    needs: github_release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          # Convert platform to a string suitable for use in a filename
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker Hub
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}

      - name: Build and push image(${{ matrix.platform }}) to Docker Hub
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest ${{ matrix.platform }}
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build-push.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest ${{ matrix.platform }} to Docker Hub
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  docker-merge:
    name: Create Docker Manifest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker Hub
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create manifest list and push to Docker Hub
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image manifest
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

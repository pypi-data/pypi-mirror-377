import os
from typing import Literal, Mapping, Optional 
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq
from Bio import pairwise2
from pathlib import Path
from Bio.SubsMat import MatrixInfo as matlist
from Bio.pairwise2 import format_alignment
import numpy as np
from uuid import uuid1
import subprocess
from dataclasses import dataclass

from ._amino_acids import calculate_blosum62_distance
from ..utils._decorators import AttrDict

dirname = os.path.dirname(__file__)
MODULE_PATH = Path(__file__).parent

HLA_I_PSEUDO_INDEX = [6, 8, 23, 44, 58, 61, 62, 65, 66, 68, 69, 72, 73, 75, 76, 79, 80, 83, 94, 96, 98, 113, 115, 117, 142, 146, 149, 151, 155, 157, 158, 162, 166, 170]

def _get_hla_pseudo_sequence():
    hla = SeqIO.parse( os.path.join(dirname, "./hla_prot/hla_prot.fasta"), 'fasta')
    hla = dict(list(map(lambda x: (x.description.split(" ")[1], str(x.seq)), hla.records)))
    start_prefix = ['DSMR',
        'HAMR',
        'HCMR',
        'HFMR',
        'HPMR',
        'HSIR',
        'HSIS',
        'HSKR',
        'HSKR',
        'HSLR',
        'HSMG',
        'HSMK',
        'HSMM',
        'HSMR',
        'HSMS',
        'HSMT',
        'HSMW',
        'HSRR',
        'HSTK',
        'HSTR',
        'HSVK',
        'HSVR',
        'HTMR',
        'HYMR',
        'LSMR',
        'NSMR',
        'PSMR',
        'QSMR',
        'QSMS',
        'RSMR',
        'YSMR'
    ]
    def truncate_if_exists(seq):
        for i in start_prefix:
            if i in seq:
                return seq[max(0,seq.index(i)-2):]
        return False
    hla = list(filter(lambda z: z[1], map(lambda x: (x[0],truncate_if_exists(x[1])), hla.items())))
    pseudo_index = HLA_I_PSEUDO_INDEX
    hla = list(filter(lambda x: len(x[1]) >= 171, hla))
    hla_pseudo = list(map(lambda x: (x[0], dict(
        pseudosequence = ''.join([x[1][i] for i in pseudo_index]),
        fullsequence = x[1],
    )), hla))
    hla_pseudo = dict(hla_pseudo)
    hla_pseudo_alias = {}
    for k,v in hla_pseudo.items():
        if k.endswith(":01:01:01"):
            hla_pseudo_alias[k[:-6]] = v
        if k.endswith(":01:01"):
            hla_pseudo_alias[k[:-3]] = v
    hla_pseudo.update(hla_pseudo_alias)

    return hla_pseudo

class HLAPseudoSequence:
    def __init__(self):
        self._hla_seq = _get_hla_pseudo_sequence()

    def __getitem__(self, key):
        if key in self._hla_seq:
            return self._hla_seq[key]
        else:
            okey = key
            while okey not in self._hla_seq and len(okey.split(':')) > 1:
                okey = ':'.join(okey.split(':')[:-1])
            if okey in self._hla_seq:
                return self._hla_seq[okey]
            okey = key
            _suffix_count = 0
            while okey not in self._hla_seq and _suffix_count < 2:
                okey += ':01'
                _suffix_count += 1
            if okey in self._hla_seq:
                return self._hla_seq[okey]
            return None

TRA_DEFINITION = ["CDR3a","TRAV","TRAJ"]
TRB_DEFINITION = ["CDR3b","TRBV","TRBJ"]
TRAB_DEFINITION = ["CDR3a","CDR3b","TRAV","TRAJ","TRBV","TRBJ"]


TRA_DEFINITION_ORIG = ["IR_VJ_1_junction_aa",
    "IR_VJ_1_v_call",
    "IR_VJ_1_j_call"
]
TRB_DEFINITION_ORIG = [
    "IR_VDJ_1_junction_aa",
    "IR_VDJ_1_v_call",
    "IR_VDJ_1_j_call"
]
TRAB_DEFINITION_ORIG = [
    "IR_VJ_1_junction_aa",            
    "IR_VDJ_1_junction_aa",
    "IR_VJ_1_v_call",
    "IR_VJ_1_j_call",
    "IR_VDJ_1_v_call",
    "IR_VDJ_1_j_call"
]

TRAV_SEQUENCES = AttrDict({
    "human": {
        'TRAV1-1': 'GQSLEQPSEVTAVEGAIVQINCTYQTSGFYGLSWYQQHDGGAPTFLSYNALDGLEETGRFSSFLSRSDSYGYLLLQELQMKDSASYFCAVR',
        'TRAV1-2': 'GQNIDQPTEMTATEGAIVQINCTYQTSGFNGLFWYQQHAGEAPTFLSYNVLDGLEEKGRFSSFLSRSKGYSYLLLKELQMKDSASYLCAVR',
        'TRAV2': 'KDQVFQPSTVASSEGAVVEIFCNHSVSNAYNFFWYLHFPGCAPRLLVKGSKPSQQGRYNMTYERFSSSLLILQVREADAAVYYCAVE',
        'TRAV3': 'AQSVAQPEDQVNVAEGNPLTVKCTYSVSGNPYLFWYVQYPNRGLQFLLKYITGDNLVKGSYGFEAEFNKSQTSFHLKKPSALVSDSALYFCAVRD',
        'TRAV4': 'LAKTTQPISMDSYEGQEVNITCSHNNIATNDYITWYQQFPSQGPRFIIQGYKTKVTNEVASLFIPADRKSSTLSLPRVSLSDTAVYYCLVGD',
        'TRAV5': 'GEDVEQSLFLSVREGDSSVINCTYTDSSSTYLYWYKQEPGAGLQLLTYIFSNMDMKQDQRLTVLLNKKDKHLSLRIADTQTGDSAIYFCAES',
        'TRAV6': 'SQKIEQNSEALNIQEGKTATLTCNYTNYSPAYLQWYRQDPGRGPVFLLLIRENEKEKRKERLKVTFDTTLKQSLFHITASQPADSATYLCALD',
        'TRAV7': 'ENQVEHSPHFLGPQQGDVASMSCTYSVSRFNNLQWYRQNTGMGPKHLLSMYSAGYEKQKGRLNATLLKNGSSLYITAVQPEDSATYFCAVD',
        'TRAV8-1': 'AQSVSQHNHHVILSEAASLELGCNYSYGGTVNLFWYVQYPGQHLQLLLKYFSGDPLVKGIKGFEAEFIKSKFSFNLRKPSVQWSDTAEYFCAVN',
        'TRAV8-2': 'AQSVTQLDSHVSVSEGTPVLLRCNYSSSYSPSLFWYVQHPNKGLQLLLKYTSAATLVKGINGFEAEFKKSETSFHLTKPSAHMSDAAEYFCVVS',
        'TRAV8-3': 'AQSVTQPDIHITVSEGASLELRCNYSYGATPYLFWYVQSPGQGLQLLLKYFSGDTLVQGIKGFEAEFKRSQSSFNLRKPSVHWSDAAEYFCAVG',
        'TRAV8-4': 'AQSVTQLGSHVSVSEGALVLLRCNYSSSVPPYLFWYVQYPNQGLQLLLKYTSAATLVKGINGFEAEFKKSETSFHLTKPSAHMSDAAEYFCAVS',
        'TRAV8-6': 'AQSVTQLDSQVPVFEEAPVELRCNYSSSVSVYLFWYVQYPNQGLQLLLKYLSGSTLVESINGFEAEFNKSQTSFHLRKPSVHISDTAEYFCAVS',
        'TRAV8-7': 'TQSVTQLDGHITVSEEAPLELKCNYSYSGVPSLFWYVQYSSQSLQLLLKDLTEATQVKGIRGFEAEFKKSETSFYLRKPSTHVSDAAEYFCAVG',
        'TRAV9-1': 'GDSVVQTEGQVLPSEGDSLIVNCSYETTQYPSLFWYVQYPGEGPQLHLKAMKANDKGRNKGFEAMYRKETTSFHLEKDSVQESDSAVYFCALS',
        'TRAV9-2': 'GNSVTQMEGPVTLSEEAFLTINCTYTATGYPSLFWYVQYPGEGLQLLLKATKADDKGSNKGFEATYRKETTSFHLEKGSVQVSDSAVYFCALS',
        'TRAV10': 'KNQVEQSPQSLIILEGKNCTLQCNYTVSPFSNLRWYKQDTGRGPVSLTIMTFSENTKSNGRYTATLDADTKQSSLHITASQLSDSASYICVVS',
        'TRAV11': 'LHTLEQSPSFLNIQEGMHAVLNCTYQERTLFNFHWFRQDPGRRLVSLTLIQSSQKEQGDKYFKELLGKEKFYSVWNIAASHLGDSATYFCAL',
        'TRAV12-1': 'RKEVEQDPGPFNVPEGATVAFNCTYSNSASQSFFWYRQDCRKEPKLLMSVYSSGNEDGRFTAQLNRASQYISLLIRDSKLSDSATYLCVVN',
        'TRAV12-2': 'QKEVEQNSGPLSVPEGAIASLNCTYSDRGSQSFFWYRQYSGKSPELIMFIYSNGDKEDGRFTAQLNKASQYVSLLIRDSQPSDSATYLCAVN',
        'TRAV12-3': 'QKEVEQDPGPLSVPEGAIVSLNCTYSNSAFQYFMWYRQYSRKGPELLMYTYSSGNKEDGRFTAQVDKSSKYISLFIRDSQPSDSATYLCAMS',
        'TRAV13-1': 'GENVEQHPSTLSVQEGDSAVIKCTYSDSASNYFPWYKQELGKGPQLIIDIRSNVGEKKDQRIAVTLNKTAKHFSLHITETQPEDSAVYFCAAS',
        'TRAV13-2': 'GESVGLHLPTLSVQEGDNSIINCAYSNSASDYFIWYKQESGKGPQFIIDIRSNMDKRQGQRVTVLLNKTVKHLSLQIAATQPGDSAVYFCAEN',
        'TRAV14DV4': 'AQKITQTQPGMFVQEKEAVTLDCTYDTSDPSYGLFWYKQPSSGEMIFLIYQGSYDQQNATEGRYSLNFQKARKSANLVISASQLGDSAMYFCAMRE',
        'TRAV16': 'AQRVTQPEKLLSVFKGAPVELKCNYSYSGSPELFWYVQYSRQRLQLLLRHISRESIKGFTADLNKGETSFHLKKPFAQEEDSAMYYCALS',
        'TRAV17': 'SQQGEEDPQALSIQEGENATMNCSYKTSINNLQWYRQNSGRGLVHLILIRSNEREKHSGRLRVTLDTSKKSSSLLITASRAADTASYFCATD',
        'TRAV18': 'GDSVTQTEGPVTLPERAALTLNCTYQSSYSTFLFWYVQYLNKEPELLLKSSENQETDSRGFQASPIKSDSSFHLEKPSVQLSDSAVYYCALR',
        'TRAV19': 'AQKVTQAQTEISVVEKEDVTLDCVYETRDTTYYLFWYKQPPSGELVFLIRRNSFDEQNEISGRYSWNFQKSTSSFNFTITASQVVDSAVYFCALSE',
        'TRAV20': 'EDQVTQSPEALRLQEGESSSLNCSYTVSGLRGLFWYRQDPGKGPEFLFTLYSAGEEKEKERLKATLTKKESFLHITAPKPEDSATYLCAVQ',
        'TRAV21': 'KQEVTQIPAALSVPEGENLVLNCSFTDSAIYNLQWFRQDPGKGLTSLLLIQSSQREQTSGRLNASLDKSSGRSTLYIAASQPGDSATYLCAVR',
        'TRAV22': 'GIQVEQSPPDLILQEGANSTLRCNFSDSVNNLQWFHQNPWGQLINLFYIPSGTKQNGRLSATTVATERYSLLYISSSQTTDSGVYFCAVE',
        'TRAV23DV6': 'QQQVKQSPQSLIVQKGGISIINCAYENTAFDYFPWYQQFPGKGPALLIAIRPDVSEKKEGRFTISFNKSAKQFSLHIMDSQPGDSATYFCAAS',
        'TRAV24': 'ILNVEQSPQSLHVQEGDSTNFTCSFPSSNFYALHWYRWETAKSPEALFVMTLNGDEKKKGRISATLNTKEGYSYLYIKGSQPEDSATYLCAF',
        'TRAV25': 'GQQVMQIPQYQHVQEGEDFTTYCNSSTTLSNIQWYKQRPGGHPVFLIQLVKSGEVKKQKRLTFQFGEAKKNSSLHITATQTTDVGTYFCAG',
        'TRAV26-1': 'DAKTTQPPSMDCAEGRAANLPCNHSTISGNEYVYWYRQIHSQGPQYIIHGLKNNETNEMASLIITEDRKSSTLILPHATLRDTAVYYCIVRV',
        'TRAV26-2': 'DAKTTQPNSMESNEEEPVHLPCNHSTISGTDYIHWYRQLPSQGPEYVIHGLTSNVNNRMASLAIAEDRKSSTLILHRATLRDAAVYYCILRD',
        'TRAV27': 'TQLLEQSPQFLSIQEGENLTVYCNSSSVFSSLQWYRQEPGEGPVLLVTVVTGGEVKKLKRLTFQFGDARKDSSLHITAAQPGDTGLYLCAG',
        'TRAV29DV5': 'DQQVKQNSPSLSVQEGRISILNCDYTNSMFDYFLWYKKYPAEGPTFLISISSIKDKNEDGRFTVFLNKSAKHLSLHIVPSQPGDSAVYFCAAS',
        'TRAV30': 'QQPVQSPQAVILREGEDAVINCSSSKALYSVHWYRQKHGEAPVFLMILLKGGEQKGHEKISASFNEKKQQSSLYLTASQLSYSGTYFCGTE',
        'TRAV34': 'SQELEQSPQSLIVQEGKNLTINCTSSKTLYGLYWYKQKYGEGLIFLMMLQKGGEEKSHEKITAKLDEKKQQSSLHITASQPSHAGIYLCGAD',
        'TRAV35': 'GQQLNQSPQSMFIQEGEDVSMNCTSSSIFNTWLWYKQEPGEGPVLLIALYKAGELTSNGRLTAQFGITRKDSFLNISASIPSDVGIYFCAGQ',
        'TRAV36DV7': 'EDKVVQSPLSLVVHEGDTVTLNCSYEVTNFRSLLWYKQEKKAPTFLFMLTSSGIEKKSGRLSSILDKKELSSILNITATQTGDSAIYLCAVE',
        'TRAV38-1': 'AQTVTQSQPEMSVQEAETVTLSCTYDTSENNYYLFWYKQPPSRQMILVIRQEAYKQQNATENRFSVNFQKAAKSFSLKISDSQLGDTAMYFCAFMK',
        'TRAV38-2DV8': 'AQTVTQSQPEMSVQEAETVTLSCTYDTSESDYYLFWYKQPPSRQMILVIRQEAYKQQNATENRFSVNFQKAAKSFSLKISDSQLGDAAMYFCAYRS',
        'TRAV39': 'ELKVEQNPLFLSMQEGKNYTIYCNYSTTSDRLYWYRQDPGKSLESLFVLLSNGAVKQEGRLMASLDTKARLSTLHITAAVHDLSATYFCAVD',
        'TRAV40': 'SNSVKQTGQITVSEGASVTMNCTYTSTGYPTLFWYVEYPSKPLQLLQRETMENSKNFGGGNIKDKNSPIVKYSVQVSDSAVYYCLLG',
        'TRAV41': 'KNEVEQSPQNLTAQEGEFITINCSYSVGISALHWLQQHPGGGIVSLFMLSSGKKKHGRLIATINIQEKHSSLHITASHPRDSAVYICAVR',
    },
    "mouse": {
        'TRAV1': 'GQGVEQPDNLMSVEGTFARVNCTYSTSGFNGLSWYQQREGHAPVFLSYVVLDGLKDSGHFSTFLSRSNGYSYLLLTELQIKDSASYLCAVR',
        'TRAV2': 'LAKTTQPPSMEAYEGQEVNVSCSHTNIATSEYIYWYRQVPHQGPQFIIQGYKDYVVNEVASLFISADRKLSTLSLPWVSLRDAAVYYCIVTD',
        'TRAV3-1': 'GEQVEQRPPHLSVREGDSAIIICTYTDSATAYFSWYKQEAGAGLQLLMSVLSNVDRKEEQGLTVLLNKKDKRLSLNLTAAHPGDSAVYFCAVS',
        'TRAV3-3': 'GEQVEQRPPHLSVREGDSAVITCTYTDPNSYYFFWYKQEPGASLQLLMKVFSSTEINEGQGFTVLLNKKDKRLSLNLTAAHPGDSAAYFCAVS',
        'TRAV3-4': 'GEQVEQRPPHLSVPEGDSAVIICTYTDSATAYFYWYKQEPGAGLQLLMSVFSNVDRKEEQGLTVLLNKKDKQLSLNLTAAHPGDSAVYFCAVS',
        'TRAV3D-3': 'GEQVEQRPPHLSVREGDSAFITCTYTDPNSYYFFWYKQEPGASLQLLMKVFSSTEINEGQGFTVLLNKKDKRLSLNLTAAHPGDSAAYFCAVS',
        'TRAV3N-3': 'GEQVEQRPPHLSVREGDSAVIICTYTDPNSYYFFWYKQEPGAGLQLLMKVFSSTEINEGQGFTVLLNKKDKQLSLNLTAAHPGDSAVYFCAVS',
        'TRAV4-2': 'GMPVEQNPPALSLYEGADSGLRCNFSTTMKSVQWFQQNHRGRLITLFYLAQGTKENGRLKSTFNSKERYSTLHIKDAQLEDSGTYFCAAE',
        'TRAV4-3': 'GDQVKQSPSALSLQEGTNSALRCNFSIATTTVQWFLQNPRGSLMNLFYLVPGTKENGRLKSTFNSKESYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4-4DV10': 'GDQVEQSPSALSLHEGTDSALRCNFTTTMRSVQWFRQNSRGSLISLFYLASGTKENGRLKSAFDSKERRYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4D-2': 'GMPVEQNPPALSLYEGAESGLRCNFSTTMKGVQWFQQNHRGRFITLFYLAQGTKENGRLKSTFNS*ERYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4D-3': 'GDKVKQSPSALSLQEGTNSALRCNFSIAATTVQWFLQNPRGSLINLFYLVPGTKENGRLKSTFNSKESYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4D-4': 'GDQVEQSPSALSLHEGTSSALRCNFTTTTRSVQWFRQNSRGSLINLFYLASGTKENGRLKSAFDSKELYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4N-3': 'GDKVKQSPSALSLQEGTNSALRCNFSIAATTVQWFLQNPRGSLMNLFYLVPGTKENGRLKSAFDSKESYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4N-4': 'GDQVEQSPSALSLHEGTGSALRCNFTTTMRAVQWFRKNSRGSLINLFYLASGTKENGRLKSAFDSKERYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV5-1': 'GEQVEQLPSSLIVQEGASVLINCSYTDSASVYFPWYKQEPGKRLQFIIDIRSNMERKQNQRLTLLFDKKTKHLSLHITATQPGDSAIYFCSAS',
        'TRAV5-2': 'GKQVEQLPSILRFKEGTNTLKNCIYVNNASLCFLWYKQEPGKHPTFVIDIR*NMERKQSQRFIVLLNKKSKHFSLHNTDNQPQD*AMYFCAES',
        'TRAV5-4': 'GEQVEQLPSILRVQERSSASINCTYENSASNYFPWYKQEPGENPKLIIDIRSNMERKQIQGLIVLLDKKAKRFSLHITDTQPADSAMYFCAAS',
        'TRAV5D-2': 'GKQVELLPSILRFKEGTNTLINCIYVNNALLCFLWYKQEPGKHLTFIIDIC*NMERKQSQRFIVLLNKKSKHFSLHNTDNQPQD*AMYF*K',
        'TRAV5D-4': 'GEQVEQLPSILRVQEGSSASINCTYENSASNYFPWYKQEPGENPKLIIDIRSNMERKQTQGLIVLLDKKAKRFSLHITDTQPGDSAMYFCAAS',
        'TRAV5N-2': 'GKQVELLPSILRFKEETNTLINCIYVNNALLCFLWYKQEPGKHPTFIIDIC*NMERKQSQRFIVLLNKKSKHFSLHNTDNQPQD*AMYF*K',
        'TRAV5N-4': 'GEQVEQLPSILRVQEGSSASINCTYENSASNYFPWYKQEPGENPKLIIDIRSNMERKQTQGLIVLLDKKAKRFSLHITDTQPGDSAMYFCAAS',
        'TRAV6-1': 'GDSVTQMQGQVTLSEDDFLFINCTYSTTWYPTLFWYVQYPGEGPQLLLKVTTANNKGISRGFEATYDKRTTSFHLQKASVQESDSAVYYCVLG',
        'TRAV6-2': 'GNSVTQMQGQVTLSEEEFLFINCTYSTTGYPTLFWYVQYPGEGPQLLLKVTTANNKGSSRGFEATYDKGTTSFHLQKASVQESDSAVYYCVLG',
        'TRAV6-3': 'GDSVIQMQGQVTLSENDFLFINCTYSTTGYPTLFWYVQYSGEGPQLLLQVTTANNKGSSRGFEATYDKGTTSFHLQKTSVQEIDSAVYYCAMR',
        'TRAV6-4': 'GDSVTQKQGQVTLSEDDFLFINCTYSTTTYPTLLWYVQYPGQGPQLLLKVTTANNKGISRGFEATYDKGTTSFHLQKASVQESDSAVYFCALV',
        'TRAV6-5': 'GDSVTQTEGPVTLSEGTSLTVNCSYETKQYPTLFWYVQYPGEGPQLLFKVPKANEKGSSRGFEATYNKEATSFHLQKASVQESDSAVYYCALS',
        'TRAV6-6': 'GDSVTQTEGQVTVSESKSLIINCTYSTTSIAYPNLFWYVRYPGEGLQLLLKVITAGQKGSSRGFEATYNKETTSFHLQKASVQESDSAVYYCALG',
        'TRAV6-7DV9': 'GDSVTQTEGQVALSEEDFLTIHCNYSASGYPALFWYVQYPGEGPQFLFRASRDKEKGSSRGFEATYNKETTSFHLQKASVQESDSAVYYCALG',
        'TRAV6D-3': 'GDSVIQMQGQVTLSENDFLFINCTYSTTGYPTLFWYVQYSGEGPQLLLQVTTANNKGSSRGFEATYDKGTTSFHLQKTSVQEIDSAVYYCAMR',
        'TRAV6D-4': 'GDSVTQKQGQVTLSEDDFLFINCTYSTTTYPTLFWYVQYPGQGPQLLLKVTTANNKGISRGFEATYDKGTTSFHLQKASVQESDSAVYFCALV',
        'TRAV6D-5': 'GDSVTQTEGPVTLSEGTSLTVNCSYETKQYPTLFWYVQYPGEGPQLLFKVPKANEKGSNRGFEATYNKEATSFHLQKASVQESDSAVYYCALG',
        'TRAV6D-6': 'GDSVTQTEGQVTVSESKSLIINCTYSATSIAYPNLFWYVRYPGEGLQLLLKVITAGQKGSSRGFEATYNKETTSFHLQKASVQESDSAVYYCALS',
        'TRAV6D-7': 'GDSVTQTEGQVALSEEDFLTIHCNYSASGYPALFWYVQYPGEGPQFLFRASRDKEKGSSRGFEATYNKEATSFHLQKASVQESDSAVYYCALS',
        'TRAV6N-5': 'GDSVTQTEGPVTLSEGTSLTVNCSYETKQYPTLFWYVQYPGEGPQLLFKVPKANEKGSNRGFEATYNKEATSFHLQKASVQESDSAVYYCALG',
        'TRAV6N-6': 'GDSVTQTEGQVTVSESKSLIINCTYSATSIGYPNLFWYVRYPGEGLQLLLKVITAGQKGSSRGFEATYNKEATSFHLQKASVQESDSAVYYCALS',
        'TRAV6N-7': 'GDSVTQTEGQVALSEEDFLTIHCNYSASGYPALFWYVQYPGEGPQFLFRASRDKEKGSSRGFEATYDKGTTSFHLRKASVQESDSAVYYCALG',
        'TRAV7-1': 'QQKVQQSPESLIVPEGGMASLNCTFSDRNSQYFWWYRQHSGEGPKALMSIFSNGDKKEGRFTAHLNKASLYVSLHIKDSQPSDSALYFCAVS',
        'TRAV7-2': 'QQKVQQSPESLIVPEGGMASLNCTSSDRNVDYFWWYRQRSGKSPKMLMAIFSNGEKEEGRFTVHLNKASLHTSLHIRDSQPSDSALYFCAVS',
        'TRAV7-3': 'QQNVQQSPESLIVPEGARTSLNCTFSDSASQYFWWYRQHSGKAPKALMSIFSNGEKEEGRFTIHLNKASLHFSLHIRDSQPSDSALYLCAVS',
        'TRAV7-4': 'QQKVQQSPESLSVPEGGMASFNCTSSDRNFQYFWWYRQHSGEGPKALMSIFSDGDKKEGRFTAHLNKASLHVSLHIRDSQPSDSALYFCAASE',
        'TRAV7-5': 'QQKVQQSPESLTVSEGAMASLNCTFSDGTSDNFRWYRQHSGKGLEVLVSIFSDGEKEEGRFTAHLNRASLHVSLHIREPQPSDSAVYLCAMS',
        'TRAV7-6': 'QEKVQQSPESLIVPEGAMASLNCTFSNSASQSIWWYQQHPGKGPEALISIFSNGNKKEGRLTVYLNRASLHVSLHIRDSQPTDSAIYLCAVS',
        'TRAV7D-2': 'QQKVQQSPESLIVPEGGMASLNCTSSDRNVDYFWWYRQHSGKSPKMLMSIFSNGEKEEGRFTVHLNKASLHTSLHIRDSQPSDSALYLCAAS',
        'TRAV7D-3': 'QQKVQQSPESLIVPEGAMTSLNCTFSDSASQYFAWYRQHSGKAPKALMSIFSNGEKEEGRFTIHLNKASLHFSLHIRDSQPSDSALYLCAVS',
        'TRAV7D-4': 'QQKVQQSPESLSVPEGGMASLNCTSSDRNFQYFWWYRQHSGEGPKALMSIFSDGDKKEGRFTAHLNKASLHVSLHIRDSQPSDSALYFCAASE',
        'TRAV7D-5': 'QQKVQQSPESLTVSEGAMASLNCTFSDGTSDNFRWYRQHSGKGLEMLVSIFSDGEKEEGRFTAHLNRASLHVSLHIREPQPSDSAVYLCAVS',
        'TRAV7D-6': 'QEKVQQSPESLTVPEGAMASLNCTISDSASQSIWWYQQNPGKGPKALISIFSNGNKKEGRLTVYLNRASLHVSLHIRDSHPSDSAVYLCAAS',
        'TRAV7N-4': 'QQKVQQSPESLSVPEGGMASLNCTSSDRNFQYFWWYRQHSGEGPKALMSIFSDGDKKEGRFTAHLNKASLHVSLHIRDSQPSDSALYFCAVSE',
        'TRAV7N-5': 'QQKVQQSPESLTVSEGAMASLNCTFSDRSSDNFRWYRQHSGKGLEVLVSIFSDGEKEEGSFTAHLNRASLHVFLHIREPQPSDSALYLCAVS',
        'TRAV7N-6': 'QEKVQQSPESLIVPEGAMSSLNCTFSNSASQSIWWYQQHPGKGPEALISIFSNGNKKEGRLTVYLNRASLHVSLHIRDSQPSDSAVYLCAVS',
        'TRAV8-1': 'SQLAEENPWALSVHEGESVTVNCSYKTSITALQWYRQKSGEGPAQLILIRSNEREKRNGRLRATLDTSSQSSSLSITATRCEDTAVYFCATD',
        'TRAV8-2': 'SQWGEENLQALSIQEGEDVTMNCSYKTYTTVVHWYRQDSGRGPALIILIRSNEREKRSGRLRATLDTSSQSSSLSITAAQCEDTAVYFCATD',
        'TRAV8D-1': 'SQLAEENLWALSVHEGESVTVNCSYKTSITALQWYRQKSGEGPAQLILIRSNEREKRNGRLRATLDTSSQSSSLSITATRCEDTAVYFCATD',
        'TRAV8D-2': 'SQWGEENLQALSIQEGEDVTMNCSYKTYTTVVQWYRQKSGKGPALIILIRSNEREKRSGRLRATLDTSSQSSSLSITGTLATDTAVYFCATD',
        'TRAV8N-2': 'SQWGEENLQALSIQEGEDVTMNCSYKTYTTVVQWYRQKSGKGPAQLILIRSNEREKRSGRLRATLDTSSQSSSLSITGTLATDTAVYFCATD',
        'TRAV9-1': 'TQTVSQSDAHVTVFEGDSVELRCNYSYGGSIYLSWYIQHHGRGLQFLLKYYSGNPVVQGVNGFEAEFSKSDSSFHLRKASVHWSDSAVYFCAVS',
        'TRAV9-2': 'AQSVTQPDARVTVSEGASLQLRCKYSYSGTPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSDSSFHLRKASVHWSDSAVYFCAAS',
        'TRAV9-3': 'AQSVTQPDARVTVSEGASLQLRCKYSSSVTPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSNSSFHLRKASVHWSDSAVYFCAVS',
        'TRAV9-4': 'AQSVTQPDARVTVSEGASLQLRCKYSYSATPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSNSSFHLRKASVHWSDSAVYFCAVS',
        'TRAV9D-1': 'TQTVSQSDAHVTVFEGDSVELRCNYSYGGSIYLSWYIQHHGRGLQFLLKYYSGNPVVQGVNGFEAEFSKSDSSFHLRKASVHWSDSAVYFCAAS',
        'TRAV9D-2': 'AQSVTQPDARVTVSQGASLQLRCKYSYSGTPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSNSSFHPRKASVHWSDSAVYFCAVS',
        'TRAV9D-3': 'AQSVTQPDARVTVSEGASLQLRCKYSYSATPYLFWYVQYPRQGLQMLLKYYSGDPVVQGVNGFEAEFSKSDSSFHLRKASVHWSDSAVYFCAVS',
        'TRAV9D-4': 'AQSVTQPDARVTVSEGASLQLRCKYSYSGTPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSNSSFHLRKASVHWSDSAVYFCALS',
        'TRAV9N-2': 'AQSVTQPDARVTVSEGASLQLRCKYSSSGTPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSNSSFHLRKASVHWSDSAVYFCVLS',
        'TRAV9N-3': 'AQSVTQPDARVTVSEGASLQLRCKYSYFGTPYLFWYVQYPRQGLQLLLKYYPGDPVVQGVNGFEAEFSKSNSSFHLRKASVHWSDWAVYFCAVS',
        'TRAV9N-4': 'AQSVTQPDARVTVSEGASLQLRCKYSYSATPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNSFEAEFSKSNSSFHLQKASVHWSDSAVYFCALS',
        'TRAV10': 'GEKVEQHESTLSVREGDSAVINCTYTDTASSYFPWYKQEAGKGLHFVIDIRSNVDRKQSQRLIVLLDKKAKRFSLHITATQPEDSAIYFCAAS',
        'TRAV10D': 'GEKVEQHQSTLSVREGDSAVINCTYTDTASSYFPWYKQEAGKSLHFVIDIRSNVDRKQSQRLTVLLDKKAKRFSLHITATQPEDSAIYFCAAS',
        'TRAV10N': 'GEKVEQHESTLSVREGDSAVINCTYTDTASSYFPWYKQEAGKSLHFVIDIRSNVDRKQSQRLTVLLDKKAKRFSLHITATQPEDSAIYFCAAS',
        'TRAV11': 'KTQVEQSPQSLVVRQGENCVLQCNYSVTPDNHLRWFKQDTGKGLVSLTVLVHENDKTSNGRYSATLDKDAKHSTLHITATLLDDTATYICVVG',
        'TRAV11D': 'KTQVEQSPQSLVVRQGENCVLQCNYSVTPDNHLRWFKQDTGKGLVSLTVLVHENDKTSNGRYSATLDKDAKHSTLHITATLLDDTATYICVVG',
        'TRAV11N': 'KTQVEQSPQSLVVRQGENCVLQCN*SVTPDNHLRWFKQDTGKGLVSLTVLVHQKDKTSNGRYSATLDRDAKHSTLHITATLLDDTATYICVVG',
        'TRAV12-1': 'GDSVTQTEGLVTVTEGLPVMLNCTYQTAYSDVAFFWYVQYLNEAPKLLLRSSTDNKRTEHQGFHATLHKSSSSFHLQKSSVQLSDSALYYCALS',
        'TRAV12-2': 'GDSVTQTEGLVTLTEGLPVMLNCTYQTAYSTFLFWYVQHLNEAPKLLLKSSTDNKRTEHQGFHATLHKSSSSFHLQKSSAQLSDSALYYCALS',
        'TRAV12-3': 'GDSVTQTEGLVTLTEGLPVMLNCTYQTIYSNPFLFWYVHYLNESPRLLLKSSTDNKRTEHQGFHATLHKSSSSFHLQKSSAQLSDSALYYCALS',
        'TRAV12D-1': 'GDSVTQTEGLVTVTEGLPVKLNCTYQTTYLTIAFFWYVQYLNEAPQVLLKSSTDNKRTEHQGFHATLHKSSSSFHLQKSSAQLSDSALYYCALS',
        'TRAV12D-2': 'GDSVTQTEGLVTLTEGLPVMLNCTYQSTYSPFLFWYVQHLNEAPKLLLKSFTDNKRPEHQGFHATLHKSSSSFHLQKSSAQLSDSALYYCALS',
        'TRAV12D-3': 'DSVTQTEGLVTLTEGLPVMLNSTYQTIYSNPYLFWYVQHLNESPRLLLKNFTDNKRTEHQGFHATLHKSSSSSHLQKSSAQLSDSALYCCALS',
        'TRAV12N-1': 'GDSVTQTEGLVTVTEGLPVMLNCTYQTAYSDVAFFWYVQYLNEAPKLLLRSSTDNKRTEHQGFHATLHKSSSSFHLQKSSVQLSDSALYYCALS',
        'TRAV12N-2': 'GDSVTQTEGLVTLTKGLPVMLNCTYQTTYSPFLFWYVQHLNEAPKLLLKSSTDNKRTEHQGFYATLHKSSSSFHLQKSSVQLSDSALYFCALS',
        'TRAV12N-3': 'GDSVTQTEGLVTLTEGLPVMLNCTYQTIYSNPFLFWYVQHLNESPRLLLKSFTDNKRTEHQGFHATLHKSSSSFHLQKSSAQLSDSALYYCALS',
        'TRAV13-1': 'GQQVQQSPASLVLQEGENAELQCNFSTSLNSMQWFYQRPEGSLVSLFYNPSGTKQSGRLTSTTVIKERRSSLHISSSQITDSGTYLCAME',
        'TRAV13-2': 'GQQVQQSPSSLVLQEGENAELQCNFSSTATQLQWFYQSPGGSLVSLLSNPSGTKHTGRLTSTTVTKERRSSLHISSSQTTDSGTYLCAID',
        'TRAV13-3': 'GQQVQQSPASLVLQEGENAELQCTYSTTLNSMQWFYQRPGGRLVSLLYSPSWAEQRGGRLTSSAASNESRSSLHISSSQITDSGTYLCAME',
        'TRAV13-4DV7': 'GQQVQQSPASLVLQEGENAELQCNFSSTATQLQWFYQRPGGSLVSLLYNPSGTKHTGRLTSTTVTKERRSSLHISSSQITDSGTYFCAME',
        'TRAV13-5': 'GQQVQQSPASLVLQEGENAELQCSFSISTNQVQWFYQRPGGRLIGLSYIPGMKPTGKQTSSTVTKGRHSSLTISSSQTTDSGTYFCVLS',
        'TRAV13D-1': 'GQQVQQSPASLVLQEGENAELQCNFSTSLNSMQWFYQRPGGSLVSLFYNPSGTKQSGRLTSTTVIKERRSSLHISSSQTTDSGTYLCAME',
        'TRAV13D-2': 'GQQVQQSPASLVLQEGENAELQCNFSSTATRLQWFYQHPGGRLVSLFYNPSGTKHTGRLTSTTVTNERRGSLHISSSQTTDSGTYFCAID',
        'TRAV13D-3': 'GQQVEQSPASLVLQEGENAELQCTYSTTLNSMQWFYQRPGGRLVSLLYSPSWAEQRGGRLTSSAASNESRSSLHISSSQITDSGTYLCAME',
        'TRAV13D-4': 'EQQVQQSPASLVLQEGENAELQCSFSIFTNQVQWFYQRPGGRLVSLLYNPSGTKQSGRLTSTTVIKERRSSLHISSSQITDSGTYLCAME',
        'TRAV13N-1': 'GQQVQQSPTSLVLQEGENAELQCNFSTSLNSMQWFYQRPGGSLISVFYNPSGTKQSGRLTSTTVIKERRSSLHISSSQITDSGTYLCAME',
        'TRAV13N-2': 'GQQVQQSPASLVLQEGENAELQCNFSSTATQLQWFYQSPGGSLVSLLSNPSGTKHTGRLTSTTVTKERRSSLHISSSQTTDSGTYLCAID',
        'TRAV13N-3': 'GQQVQQSPPASLVLQEGENAELQCTYSTTLNSMQWFYQRPGGRLVSLLYSPSWAEQRGGRLTSSAASNESRSSLHISSSQITDSGTYLCAME',
        'TRAV13N-4': 'EQQVQQSPASLVLQEAENAELQCSFSIFTNQVQWFYQRPGGRLVSLLYNPSGTKQSGRLTSTTVIKERRSSLHISSSQITDSGTYLCAME',
        'TRAV14-1': 'QQQVRQSPQSLTVWEGGTTVLTCSYEDSTFNYFPWYQQFPGEGPALLISILSVSDKKEDGRFTTFFNKREKKLSLHIIDSQPGDSATYFCAAS',
        'TRAV14-2': 'QQQVRQSPQSLTVWEGETAILNCSYEDSTFDYFPWYWQFPRESPALLIAIRPVSNKKEDGRFTIFFNKREKKLSLHITDSQPGDSATYFCAAS',
        'TRAV14-3': 'QQQVRQSPQSLTVWEGETAILNCSYENSAFDYFPWYQQFPGEGPALLISILSVSDKKEDGRFTIFFNKREKKLSLHIADSQPGDSATYFCAAS',
        'TRAV14D-1': 'QQQVRQSPQSLTVWEGETAILNCSYEDSTFNYFPWYQQFPGEGPALLISIRSVSDKKEDGRFTIFFNKREKKLSLHITDSQPGDSATYFCAAS',
        'TRAV14D-2': 'QQQVRQSPQSLTVWEGETTILNCSYEDSTFDYFPWYRQFPGKSPALLIAISLVSNKKEDGRFTIFFNKREKKLSLHITDSQPGDSATYFCAAS',
        'TRAV14D-3DV8': 'QQQVRQSSQSLTVWEGETAILNCSYENSAFDYFPWYQQFPGEGPALLIAIRSVSDKKEDGRFTIFFNKREKNLSLHIKDSQPGDSATYFCAAS',
        'TRAV14N-1': 'QQQVRQSPQSLTVWEGETAILNCSYEDSTFNYFPWYQQFPGEGPALLISIRSVSDKKEDGRFTIFFNKREKKLSLHITDSQPGDSATYFCAAS',
        'TRAV14N-2': 'QQQVRQSPQSLTVWEGETAILNCSYEDSTFDYFPWYWQFPRESPALLIAIRPVSNKKEDGRFTIFFNKREKKLSLHITDSQPGDSATYFCAAS',
        'TRAV14N-3': 'QQQVRQSSQSLTVWEGETAILNCSYENSAFDYFPWYQQFPGEGPALLIAIRSVSDKKEDGRFTIFFNKREKNLSLHIKDSQPGDSATYFCAAS',
        'TRAV15-1DV6-1': 'AQKVIQVWSTTSRQEGEKLTLDCSYKTSQVLYHLFWYKHLLSGEMVLLIRQMPSTIAIERSGRYSVVFQKSRKSISLVISTLQPDDSGKYFCALWEL',
        'TRAV15-2DV6-2': 'AQKVTQVQSTGSSQWGEVTLHCSYETSEYFYVILWYKQLFSGEMVFLIYQTSFDTQNQRNSRYSVVFQKSLKSISLVISASQPEDSGTYFCALSEL',
        'TRAV15D-1DV6D-1': 'AQKVIQVWSTPSRQEGEELTLDCSYETSQVLYHLFWYKHLLSGEMVFLIRQMSSSTAKERSGRYSVVFQKSLKSISLVISALQPDDSGKYFCALWEL',
        'TRAV15D-2DV6D_2': 'AQRVTQVQPTGSSQWGEEVTLDCSYETSEYFYCIIWYRQLFSGEMVFLIYQTSFDTQNQRNGRYSVVFQKSLKSISLVISASQPEDSGTYFCALSEL',
        'TRAV15N-1': 'AEKVIQVWSTASRQEGEELTLDCSYETSQVLYHLFWYKHLLSGEMVFLIRQTSSSTAKERSGRYSVVFQKSLKSISLIISALQPDDSGKYFCALWEL',
        'TRAV15N-2': 'AQRVTQVQPTGSSQWGEEVTLDCSYETSEYFYRIFWYRQLFSGEMVFLIYQPSFDTQNQRSGRYSVVFQKSFKSISLVISASQPEDSGTYFCALSEL',
        'TRAV16': 'AQKVTQTQTSISVMEKTTVTMDCVYETQDSSYFLFWYKQTASGEIVFLIRQDSYKKENATVGHYSLNFQKPKSSIGLIITATQIEDSAVYFCAMRE',
        'TRAV16DDV11': 'AQKVTQTQTSISVMEKTTVTMDCVYETQDSSYFLFWYKQTASGEIVFLIRQDSYKKENATVGHYSLNFQKPKSSIGLIITATQIEDSAVYFCAMRE',
        'TRAV16N': 'AQKVTQTQTSISVVEKTTVTMDCVYETRDSSYFLFWYKQTASGEIVFLIRQDSYKKENATVGHYSLNFQKPKSSIGLIITATQIEDSAVYFCAMRE',
        'TRAV17': 'AQSVDQPDAHVTLYEGASLELRCSYSYSAAPYLFWYVQYPGQSLQFLLKYITGDAVVKGTKGFEAEFRKSNSSFNLKKSPAHWSDSAKYFCALE',
        'TRAV18': 'TQRLEQSPRFLSIQEGQDFTARCSSSTTFPQLYWYRQVPREGPVILVTLVKSGEVKEQKRMTAKFGEARKNSSLFIARAQPGDAGIYFCAG',
        'TRAV19': 'GQQVKQSSPSLTVQEGGILILNCDYENDMFDYFAWYKKYPDNSPTLLISVRSNVDKREDGRFTVFLNKSGKHFSLHITASQPEDTAVYLCAAG',
        'TRAV20': 'QTL*CRALPS*MSGKKETALINCSYTNAATNYFPWYKKEEQKVFTLLIDIRSNVNRKKEGRFEVILDRNVKRVSLHITAARTEDSALYLCAPG',
        'TRAV21DV12': 'DAKTTQPDSMESTEGETVHLPCSHATISGNEYIYWYRQVPLQGPEYVTHGLQQNTTNSMAFLAIASDRKSSTLILTHVSLRDAAVYHCILRV'
    }
})

TRBV_SEQUENCES = AttrDict({
    "human": {
        'TRBV1': 'DTGITQTPKYLVTAMGSKRTMKREHLGHDSMYWYRQKAKKSLEFMFYYNCKEFIENKTVPNHFTPECPDSSRLYLHVVALQQEDSAAYLCTSSQ',
        'TRBV2': 'EPEVTQTPSHQVTQMGQEVILRCVPISNHLYFYWYRQILGQKVEFLVSFYNNEISEKSEIFDDQFSVERPDGSNFTLKIRSTKLEDSAMYFCASSE',
        'TRBV3-1': 'DTAVSQTPKYLVTQMGNDKSIKCEQNLGHDTMYWYKQDSKKFLKIMFSYNNKELIINETVPNRFSPKSPDKAHLNLHINSLELGDSAVYFCASSQ',
        'TRBV3-2': 'DTAVSQTPKYLVTQMGKKESLK_EQNLGHNAMYWYKQDSKKFLKTMFIYSNKEPILNETVPNRFSPDSPDKAHLNLHINSLELGDSAVYFCASSQ',
        'TRBV4-1': 'DTEVTQTPKHLVMGMTNKKSLKCEQHMGHRAMYWYKQKAKKPPELMFVYSYEKLSINESVPSRFSPECPNSSLLNLHLHALQPEDSALYLCASSQ',
        'TRBV4-2': 'ETGVTQTPRHLVMGMTNKKSLKCEQHLGHNAMYWYKQSAKKPLELMFVYNFKEQTENNSVPSRFSPECPNSSHLFLHLHTLQPEDSALYLCASSQ',
        'TRBV4-3': 'ETGVTQTPRHLVMGMTNKKSLKCEQHLGHNAMYWYKQSAKKPLELMFVYSLEERVENNSVPSRFSPECPNSSHLFLHLHTLQPEDSALYLCASSQ',
        'TRBV5-1': 'KAGVTQTPRYLIKTRGQQVTLSCSPISGHRSVSWYQQTPGQGLQFLFEYFSETQRNKGNFPGRFSGRQFSNSRSEMNVSTLELGDSALYLCASSL',
        'TRBV5-3': 'EAGVTQSPTHLIKTRGQQVTLRCSPISGHSSVSWYQQAPGQGPQFIFEYANELRRSEGNFPNRFSGRQFHDCCSEMNVSALELGDSALYLCARSL',
        'TRBV5-4': 'ETGVTQSPTHLIKTRGQQVTLRCSSQSGHNTVSWYQQALGQGPQFIFQYYREEENGRGNFPPRFSGLQFPNYSSELNVNALELDDSALYLCASSL',
        'TRBV5-5': 'DAGVTQSPTHLIKTRGQQVTLRCSPISGHKSVSWYQQVLGQGPQFIFQYYEKEERGRGNFPDRFSARQFPNYSSELNVNALLLGDSALYLCASSL',
        'TRBV5-6': 'DAGVTQSPTHLIKTRGQQVTLRCSPKSGHDTVSWYQQALGQGPQFIFQYYEEEERQRGNFPDRFSGHQFPNYSSELNVNALLLGDSALYLCASSL',
        'TRBV5-7': 'DAGVTQSPTHLIKTRGQHVTLRCSPISGHTSVSSYQQALGQGPQFIFQYYEKEERGRGNFPDQFSGHQFPNYSSELNVNALLLGDSALYLCASSL',
        'TRBV5-8': 'EAGVTQSPTHLIKTRGQQATLRCSPISGHTSVYWYQQALGLGLQFLLWYDEGEERNRGNFPPRFSGRQFPNYSSELNVNALELEDSALYLCASSL',
        'TRBV6-1': 'NAGVTQTPKFQVLKTGQSMTLQCAQDMNHNSMYWYRQDPGMGLRLIYYSASEGTTDKGEVPNGYNVSRLNKREFSLRLESAAPSQTSVYFCASSE',
        'TRBV6-2': 'NAGVTQTPKFRVLKTGQSMTLLCAQDMNHEYMYWYRQDPGMGLRLIHYSVGEGTTAKGEVPDGYNVSRLKKQNFLLGLESAAPSQTSVYFCASSY',
        'TRBV6-3': 'NAGVTQTPKFRVLKTGQSMTLLCAQDMNHEYMYWYRQDPGMGLRLIHYSVGEGTTAKGEVPDGYNVSRLKKQNFLLGLESAAPSQTSVYFCASSY',
        'TRBV6-4': 'IAGITQAPTSQILAAGRRMTLRCTQDMRHNAMYWYRQDLGLGLRLIHYSNTAGTTGKGEVPDGYSVSRANTDDFPLTLASAVPSQTSVYFCASSD',
        'TRBV6-5': 'NAGVTQTPKFQVLKTGQSMTLQCAQDMNHEYMSWYRQDPGMGLRLIHYSVGAGITDQGEVPNGYNVSRSTTEDFPLRLLSAAPSQTSVYFCASSY',
        'TRBV6-6': 'NAGVTQTPKFRILKIGQSMTLQCTQDMNHNYMYWYRQDPGMGLKLIYYSVGAGITDKGEVPNGYNVSRSTTEDFPLRLELAAPSQTSVYFCASSY',
        'TRBV6-7': 'NAGVTQTPKFHVLKTGQSMTLLCAQDMNHEYMYRYRQDPGKGLRLIYYSVAAALTDKGEVPNGYNVSRSNTEDFPLKLESAAPSQTSVYFCASSY',
        'TRBV6-8': 'NAGVTQTPKFHILKTGQSMTLQCAQDMNHGYMSWYRQDPGMGLRLIYYSAAAGTTDKEVPNGYNVSRLNTEDFPLRLVSAAPSQTSVYLCASSY',
        'TRBV6-9': 'NAGVTQTPKFHILKTGQSMTLQCAQDMNHGYLSWYRQDPGMGLRRIHYSVAAGITDKGEVPDGYNVSRSNTEDFPLRLESAAPSQTSVYFCASSY',
        'TRBV7-1': 'GAGVSQSLRHKVAKKGKDVALRYDPISGHNALYWYRQSLGQGLEFPIYFQGKDAADKSGLPRDRFSAQRSEGSISTLKFQRTQQGDLAVYLCASSS',
        'TRBV7-2': 'GAGVSQSPSNKVTEKGKDVELRCDPISGHTALYWYRQSLGQGLEFLIYFQGNSAPDKSGLPSDRFSAERTGGSVSTLTIQRTQQEDSAVYLCASSL',
        'TRBV7-3': 'GAGVSQTPSNKVTEKGKYVELRCDPISGHTALYWYRQSLGQGPEFLIYFQGTGAADDSGLPNDRFFAVRPEGSVSTLKIQRTERGDSAVYLCASSL',
        'TRBV7-4': 'GAGVSQSPRYKVAKRGRDVALRCDSISGHVTLYWYRQTLGQGSEVLTYSQSDAQRDKSGRPSGRFSAERPERSVSTLKIQRTEQGDSAVYLCASSL',
        'TRBV7-6': 'GAGVSQSPRYKVTKRGQDVALRCDPISGHVSLYWYRQALGQGPEFLTYFNYEAQQDKSGLPNDRFSAERPEGSISTLTIQRTEQRDSAMYRCASSL',
        'TRBV7-7': 'GAGVSQSPRYKVTKRGQDVTLRCDPISSHATLYWYQQALGQGPEFLTYFNYEAQPDKSGLPSDRFSAERPEGSISTLTIQRTEQRDSAMYRCASSL',
        'TRBV7-8': 'GAGVSQSPRYKVAKRGQDVALRCDPISGHVSLFWYQQALGQGPEFLTYFQNEAQLDKSGLPSDRFFAERPEGSVSTLKIQRTQQEDSAVYLCASSL',
        'TRBV7-9': 'DTGVSQNPRHKITKRGQNVTFRCDPISEHNRLYWYRQTLGQGPEFLTYFQNEAQLEKSRLLSDRFSAERPKGSFSTLEIQRTEQGDSAMYLCASSL',
        'TRBV9': 'DSGVTQTPKHLITATGQRVTLRCSPRSGDLSVYWYQQSLDQGLQFLIQYYNGEERAKGNILERFSAQQFPDLHSELNLSSLELGDSALYFCASSV',
        'TRBV10-1': 'DAEITQSPRHKITETGRQVTLACHQTWNHNNMFWYRQDLGHGLRLIHYSYGVQDTNKGEVSDGYSVSRSNTEDLPLTLESAASSQTSVYFCASSE',
        'TRBV10-2': 'DAGITQSPRYKITETGRQVTLMCHQTWSHSYMFWYRQDLGHGLRLIYYSAAADITDKGEVPDGYVVSRSKTENFPLTLESATRSQTSVYFCASSE',
        'TRBV10-3': 'DAGITQSPRHKVTETGTPVTLRCHQTENHRYMYWYRQDPGHGLRLIHYSYGVKDTDKGEVSDGYSVSRSKTEDFLLTLESATSSQTSVYFCAISE',
        'TRBV11-1': 'EAEVAQSPRYKITEKSQAVAFWCDPISGHATLYWYRQILGQGPELLVQFQDESVVDDSQLPKDRFSAERLKGVDSTLKIQPAELGDSAMYLCASSL',
        'TRBV11-2': 'EAGVAQSPRYKIIEKRQSVAFWCNPISGHATLYWYQQILGQGPKLLIQFQNNGVVDDSQLPKDRFSAERLKGVDSTLKIQPAKLEDSAVYLCASSL',
        'TRBV11-3': 'EAGVVQSPRYKIIEKKQPVAFWCNPISGHNTLYWYLQNLGQGPELLIRYENEEAVDDSQLPKDRFSAERLKGVDSTLKIQPAELGDSAVYLCASSL',
        'TRBV12-1': 'DAGVIQSPRHKVTEMGQSVTLRCEPISGHNDLLWYRQTFVQGLELLNYFCSWTLVDDSGVSKD_FSAQMPDVSFSTLRIQPMEPRDLGLYFCASSF',
        'TRBV12-2': 'DAGIIQSPKHEVTEMGQTVTLRCEPIFGHNFLFWYRDTFVQGLELLSYFRS_SIIDNAGMPTERFSAERPDGSFSTLKIQPAEQGDSAVYVCASRL',
        'TRBV12-3': 'DAGVIQSPRHEVTEMGQEVTLRCKPISGHNSLFWYRQTMMRGLELLIYFNNNVPIDDSGMPEDRFSAKMPNASFSTLKIQPSEPRDSAVYFCASSL',
        'TRBV12-4': 'DAGVIQSPRHEVTEMGQEVTLRCKPISGHDYLFWYRQTMMRGLELLIYFNNNVPIDDSGMPEDRFSAKMPNASFSTLKIQPSEPRDSAVYFCASSL',
        'TRBV12-5': 'DARVTQTPRHKVTEMGQEVTMRCQPILGHNTVFWYRQTMMQGLELLAYFRNRAPLDDSGMPKDRFSAEMPDATLATLKIQPSEPRDSAVYFCASGL',
        'TRBV13': 'AAGVIQSPRHLIKEKRETATLKCYPIPRHDTVYWYQQGPGQDPQFLISFYEKMQSDKGSIPDRFSAQQFSDYHSELNMSSLELGDSALYFCASSL',
        'TRBV14': 'EAGVTQFPSHSVIEKGQTVTLRCDPISGHDNLYWYRRVMGKEIKFLLHFVKESKQDESGMPNNRFLAERTGGTYSTLKVQPAELEDSGVYFCASSQ',
        'TRBV15': 'DAMVIQNPRYQVTQFGKPVTLSCSQTLNHNVMYWYQQKSSQAPKLLFHYYDKDFNNEADTPDNFQSRRPNTSFCFLDIRSPGLGDTAMYLCATSR',
        'TRBV16': 'GEEVAQTPKHLVRGEGQKAKLYCAPIKGHSYVFWYQQVLKNEFKFLISFQNENVFDETGMPKERFSAKCLPNSPCSLEIQATKLEDSAVYFCASSQ',
        'TRBV17': 'EPGVSQTPRHKVTNMGQEVILRCDPSSGHMFVHWYRQNLRQEMKLLISFQYQNIAVDSGMPKERFTAERPNGTSSTLKIHPAEPRDSAVYLYSSG',
        'TRBV18': 'NAGVMQNPRHLVRRRGQEARLRCSPMKGHSHVYWYRQLPEEGLKFMVYLQKENIIDESGMPKERFSAEFPKEGPSILRIQQVVRGDSAAYFCASSP',
        'TRBV19': 'DGGITQSPKYLFRKEGQNVTLSCEQNLNHDAMYWYRQDPGQGLRLIYYSQIVNDFQKGDIAEGYSVSREKKESFPLTVTSAQKNPTAFYLCASSI',
        'TRBV20-1': 'GAVVSQHPSWVICKSGTSVKIECRSLDFQATTMFWYRQFPKQSLMLMATSNEGSKATYEQGVEKDKFLINHASLTLSTLTVTSAHPEDSSFYICSAR',
        'TRBV21-1': 'DTKVTQRPRLLVKASEQKAKMDCVPIKAHSYVYWYRKKLEEELKFLVYFQNEELIQKAEIINERFLAQCSKNSSCTLEIQSTESGDTALYFCASSK',
        'TRBV23-1': 'HAKVTQTPGHLVKGKGQKTKMDCTPEKGHTFVYWYQQNQNKEFMLLISFQNEQVLQETEMHKKRFSSQCPKNAPCSLAILSSEPGDTALYLCASSQ',
        'TRBV24-1': 'DADVTQTPRNRITKTGKRIMLECSQTKGHDRMYWYRQDPGLGLRLIYYSFDVKDINKGEISDGYSVSRQAQAKFSLSLESAIPNQTALYFCATSDL',
        'TRBV25-1': 'EADIYQTPRYLVIGTGKKITLECSQTMGHDKMYWYQQDPGMELHLIHYSYGVNSTEKGDLSSESTVSRIRTEHFPLTLESARPSHTSQYLCASSE',
        'TRBV26': 'DAVVTQFPRHRIIGTGKEFILQCSQNMNHVTMYWYRQDPGLGLKLVYYSPGTGSTEKGDISEGYHVS_NTIASFPLTLKSASTNQTSVYLYASSS',
        'TRBV27': 'EAQVTQNPRYLITVTGKKLTVTCSQNMNHEYMSWYRQDPGLGLRQIYYSMNVEVTDKGDVPEGYKVSRKEKRNFPLILESPSPNQTSLYFCASSL',
        'TRBV28': 'DVKVTQSSRYLVKRTGEKVFLECVQDMDHENMFWYRQDPGLGLRLIYFSYDVKMKEKGDIPEGYSVSREKKERFSLILESASTNQTSMYLCASSL',
        'TRBV29-1': 'SAVISQKPSRDICQRGTSLTIQCQVDSQVTMMFWYRQQPGQSLTLIATANQGSEATYESGFVIDKFPISRPNLTFSTLTVSNMSPEDSSIYLCSVE',
        'TRBV30': 'SQTIHQWPATLVQPVGSPLSLECTVEGTSNPNLYWYRQAAGRGLQLLFYSVGIGQISSEVPQNLSASRPQDRQFILSSKKLLLSDSGFYLCAWS'
    },
    'mouse': {
        'TRBV1': 'VTLLEQNPRWRLVPRGQAVNLRCILKNSQYPWMSWYQQDLQKQLQWLFTLRSPGDKEVKSLPGADYLATRVTDTELRLQVANMSQGRTLYCTCSA',
        'TRBV2': 'DPKIIQKPKYLVAVTGSEKILICEQYLGHNAMYWYRQSAKKPLEFMFSYSYQKLMDNQTASSRFQPQSSKKNHLDLQITALKPDDSATYFCASSQ',
        'TRBV3': 'GPKVLQIPSHQIIDMGQMVTLNCDPVSNHLYFYWYKQILGQQMEFLVNFYNGKVMEKSKLFKDQFSVERPDGSYFTLKIQPTALEDSAVYFCASSL',
        'TRBV4': 'ETAVFQTPNYHVTQVGNEVSFNCKQTLGHDTMYWYKQDSKKLLKIMFSYNNKQLIVNETVPRRFSPQSSDKAHLNLRIKSVEPEDSAVYLCASS*',
        'TRBV5': 'NTKITQSPRYLILGRANKSLECEQHLGHNAMYWYKQSAEKPPELMFLYNLKQLIRNETVPSRFIPECPDSSKLLLHISAVDPEDSAVYFCASSQ',
        'TRBV8': 'SAGIIQTPKSLILKAGQHVTIKCTQDMKHDSMLWYRQDPWLELRVI*YSYDAGIIDKEEVSKGYNVSRSCTEDFTFTVELASPSQTSVYFGASSS',
        'TRBV9': 'SAEFSQYPMYRVTKRG*DVVIKCDTISGPTGLYCY*QNSR*GPVFLVNFQGEFISTKSGMPSDHFSAVRPEGSFSMLKSQSTHQEDLGIYLCARSL',
        'TRBV10': 'DGGITQTPRYWITQTSRKIILNYSQDMNHYRMFWYQQDAGQGLKLIHYSVGTDRTTKSDVPEGYSAFRNEIQSFPLTLESTSSNQTSMYFWASSEQ',
        'TRBV12-1': 'DSGVVQSPRHIIKEKGGRSVLTCIPISGHSNVVWYQQTLGKELKFLIQHYEKVERDKGFLPSRFSVQQFDDYHSEMNMSALELEDSAMYFCASSL',
        'TRBV12-2': 'NSGVVQSPRYIIKGKGERSILKCIPISGHLSVAWYQQTQGQELKFFIQHYDKMERDKGNLPSRFSVQQFDDYHSEMNMSALELEDSAVYFCASSL',
        'TRBV13-1': 'EAAVTQSPRNKVTVTGGNVTLSCRQTNSHNYMYWYRQDTGHGLRLIHYSYGAGNLRIGDVPDGYKATRTTQEDFFLLLELASPSQTSLYFCASSD',
        'TRBV13-2': 'EAAVTQSPRNKVAVTGGKVTLSCNQTNNHNNMYWYRQDTGHGLRLIHYSYGAGSTEKGDIPDGYKASRPSQENFSLILELATPSQTSVYFCASGD',
        'TRBV13-3': 'EAAVTQSPRSKVAVTGGKVTLSCHQTNNHDYMYWYRQDTGHGLRLIHYSYVADSTEKGDIPDGYKASRPSQENFSLILELASLSQTAVYFCASSD',
        'TRBV14': 'EAGVTQSPRYAVLQEGQAVSFWCDPISGHDTLYWYQQPRDQGPQLLVYFRDEAVIDNSQLPSDRFSAVRPKGTNSTLKIQSAKQGDTATYLCASSF',
        'TRBV15': 'DAGVTQTPRHEVAEKGQTIILKCEPVSGHNDLFWYRQTKIQGLELLSYFRSKSLMEDGGAFKDRFKAEMLNSSFSTLKIQPTEPKDSAVYLCASSL',
        'TRBV16': 'NAGVIQTPRHKVTGKGQEATLWCEPISGHSAVFWYRQTIVQGLEFLTYFRNQAPIDDSGMPKERFSAQMPNQSHSTLKIQSTQPQDSAVYLCASSL',
        'TRBV17': 'DTTVKQNPRYKLARVGKPVNLICSQTMNHDTMYWYQKKPNQAPKLLLFYYDKILNREADTFEKFQSSRPNNSFCSLYIGSAGLEYSAMYLCASSR',
        'TRBV19': 'GGIITQTPKFLIGQEGQKLTLKCQQNFNHDTMYWYRQDSGKGLRLIYYSITENDLQKGDLSEGYDASREKKSSFSLTVTSAQKNEMAVFLCASSI',
        'TRBV20': 'GALVYQYPRRTICKSGTSMRMECQAVGFQATSVAWYRQSPQKTFELIALSTVNSAIKYEQNFTQEKFPISHPNLSFSSMTVLNAYLEDRGLYLCGAR',
        'TRBV21': 'DSGVVQNPRHLVKGKEQKAKMDCTPINGHSYVYWYYKKPGEELKFLVYFQNEDIIDKIDMIGKNISAKCPAKKPCTIEIQSSKLTDSAVYFCASSQ',
        'TRBV23': 'DAAVTQKPRYLIKMKGQEAEMKCIPEKGHTAVFWYQQKQSKELKFLIYFQNQQPLDQIDMVKERFSAVCPSSSLCSLGIRTCEAEDSALYLCSSSQ',
        'TRBV24': 'VAGVTQTPRYLVKEKGQKAHMSCSPEKGHTAFYWYQQNQKQELTFLISFRNEEIMEQTDLVKKRFSAKCSSNSRCILEILSSEEDDSALYLCASSL',
        'TRBV26': 'NSKVIQTPRYLVKGQGQKAKMRCIPEKGHPVVFWYQQNKNNEFKFLINFQNQEVLQQIDMTEKRFSAECPSNSPCSLEIQSSEAGDSALYLCASSL',
        'TRBV29': 'DMKVTQMPRYLIKRMGENVLLECGQDMSHETMYWYRQDPGLGLQLIYISYDVDSNSEGDIPKGYRVSRKKREHFSLILDSAKTNQTSVYFCASSL',
        'TRBV30': 'SVLLYQKPNRDICQSGTSLKIQCVADSQVVSMFWYQQFQEQSLMLMATANEGSEATYESGFTKDKFPISRPNLTFSTLTVNNARPGDSSIYFCSSR',
        'TRBV31': 'AQTIHQWPVAEIKAVGSPLSLGCTIKGKSSPNLYWYWQATGGTLQQLFYSITVGQVESVVQLNLSASRPKDDQFILSTEKLLLSHSGFYLCAWS'
    }
})

J_MOTIFS = ['LQF', 'DKLTF', 'SKIIF', 'NKLIF', 'RALTF', 'YIPTF', 'NRLAF', 'NTGF', 'NTGGF', 'NKLTF', 'STLTF', 'YKLIF', 'QKVTF', 'IYSTF', 'TALIF', 'QKLLF', 'NKLTF', 'GRLYF', 'YQRF', 'YKLSF', 'YNF', 'RQLTF', 'GKLIF', 'SWGKF', 'EGQGF', 'YGQNF', 'GKSTF', 'YQLTF', 'TPLVF', 'DKIIF', 'ARLMF', 'NKLIF', 'QLIW', 'DKLIF', 'IGF', 'ANNLF', 'GKLIF', 'KLIW', 'NMLTF', 'YKYIF', 'YALNF', 'GNLIF', 'NDMRF', 'SKLTF', 'DGLTF', 'DKLTF', 'NKLVF', 'SNF', 'TGNQF', 'DKVIF', 'EKLIF', 'GKLTF', 'YKLTF', 'QKLVF', 'KCW', 'SKLTF', 'EKLVF', 'SRLTF', 'GNRKF', 'TMLNF', 'RKLTF', 'GKLTF', 'KLIF', 'LSGSF', 'GQLTF', 'YKPTF', 'RLTL', 'YKLTF', 'NKLTF', 'YKVVF', 'TYQRF', 'RALIF', 'QKLVF', 'NKLTF', 'GRLHF', 'IYRGF', 'NYKL', 'NVLYF', 'WQLIF', 'GKLIF', 'GKLQF', 'VSSVF', 'QGLTF', 'GKLTF', 'NRLTF', 'ELVL', 'YKVIF', 'NNRIF', 'NKLIF', 'QLIW', 'DKVVF', 'QTGF', 'KKKL', 'GKLIF', 'KLIW', 'AKLTF', 'YKYVF', 'SSML', 'AKLTF', 'NAPRF', 'KLTL', 'DRLTF', 'RHAGF', 'ICGL', 'EKITF', 'GYQNF', 'ASSSF', 'GKLTF', 'YKLTF', 'KRPGF', 'NKLTF', 'AKLIF', 'SKLSF', 'DKATF', 'KDLYF', 'EIGIF', 'NTEAF', 'YGYTF', 'NTIYF', 'NEKLF', 'QPQHF', 'SPLHF', 'YNEQF', 'TGELF', 'DTQYF', 'NIQYF', 'ETQYF', 'NVLTF', 'YEQYF', 'TEVF', 'DYTF', 'TLYF', 'ERLF', 'APLF', 'PLYF', 'DHGL', 'AEQF', 'QLYF', 'TLYF', 'TLYF', 'TQYF', 'LTDW', 'EQYF']

TRAJ_SEQUENCES = AttrDict({
    "human": {
        'TRAJ1': 'YESITSQLQFGKGTRVSTSP',
        'TRAJ2': 'NTGGTIDKLTFGKGTHVFIIS',
        'TRAJ3': 'GYSSASKIIFGSGTRLSIRP',
        'TRAJ4': 'FSGGYNKLIFGAGTRLAVHP',
        'TRAJ5': 'DTGRRALTFGSGTRLQVQP',
        'TRAJ6': 'ASGGSYIPTFGRGTSLIVHP',
        'TRAJ7': 'DYGNNRLAFGKGNQVVVIP',
        'TRAJ8': 'NTGFQKLVFGTGTRLLVSP',
        'TRAJ9': 'GNTGGFKTIFGAGTRLFVKA',
        'TRAJ10': 'ILTGGGNKLTFGTGTQLKVEL',
        'TRAJ11': 'NSGYSTLTFGKGTMLLVSP',
        'TRAJ12': 'MDSSYKLIFGSGTRLLVRP',
        'TRAJ13': 'NSGGYQKVTFGIGTKLQVIP',
        'TRAJ14': 'IYSTFIFGSGTRLSVKP',
        'TRAJ15': 'NQAGTALIFGKGTTLSVSS',
        'TRAJ16': 'FSDGQKLLFARGTMLKVDL',
        'TRAJ17': 'IKAAGNKLTFGGGTRVLVKP',
        'TRAJ18': 'DRGSTLGRLYFGRGTQLTVWP',
        'TRAJ19': 'YQRFYNFTFGKGSKHNVTP',
        'TRAJ20': 'SNDYKLSFGAGTTVTVRA',
        'TRAJ21': 'YNFNKFYFGSGTKLNVKP',
        'TRAJ22': 'SSGSARQLTFGSGTQLTVLP',
        'TRAJ23': 'IYNQGGKLIFGQGTELSVKP',
        'TRAJ24': 'TTDSWGKFEFGAGTQVVVTP',
        'TRAJ25': 'EGQGFSFIFGKGTRLLVKP',
        'TRAJ26': 'DNYGQNFVFGPGTRLSVLP',
        'TRAJ27': 'NTNAGKSTFGDGTTLTVKP',
        'TRAJ28': 'YSGAGSYQLTFGKGTKLSVIP',
        'TRAJ29': 'NSGNTPLVFGKGTRLSVIA',
        'TRAJ30': 'NRDDKIIFGKGTRLHILP',
        'TRAJ31': 'NNNARLMFGDGTQLVVKP',
        'TRAJ32': 'NYGGATNKLIFGTGTLLAVQP',
        'TRAJ33': 'DSNYQLIWGAGTKLIIKP',
        'TRAJ34': 'SYNTDKLIF',
        'TRAJ35': 'IGFGNVLHCGSGTQVIVLP',
        'TRAJ36': 'QTGANNLFFGTGTRLTVIP',
        'TRAJ37': 'GSGNTGKLIFGQGTTLQVKP',
        'TRAJ38': 'NAGNNRKLIWGLGTSLAVNP',
        'TRAJ39': 'NNNAGNMLTFGGGTRLMVKP',
        'TRAJ40': 'TTSGTYKYIFGTGTRLKVLA',
        'TRAJ41': 'NSNSGYALNFGKGTSLLVTP',
        'TRAJ42': 'NYGGSQGNLIFGKGTKLSVKP',
        'TRAJ43': 'NNNDMRFGAGTRLTVKP',
        'TRAJ44': 'NTGTASKLTFGTGTRLQVTL',
        'TRAJ45': 'YSGGGADGLTFGKGTHLIIQP',
        'TRAJ46': 'KKSSGDKLTFGTGTRLAVRP',
        'TRAJ47': 'EYGNKLVFGAGTILRVKS',
        'TRAJ48': 'SNFGNEKLTFGTGTRLTIIPN',
        'TRAJ49': 'NTGNQFYFGTGTSLTVIP',
        'TRAJ50': 'KTSYDKVIFGPGTSLSVIP',
        'TRAJ51': 'MRDSYEKLIFGKETLTVKP',
        'TRAJ52': 'NAGGTSYGKLTFGQGTILTVHP',
        'TRAJ53': 'NSGGSNYKLTFGKGTLLTVNP',
        'TRAJ54': 'IQGAQKLVFGQGTRLTINP',
        'TRAJ55': 'KCW*CSCWGKGMSTKINP',
        'TRAJ56': 'YTGANSKLTFGKGITLSVRP',
        'TRAJ57': 'TQGGSEKLVFGKGTKLTVNP',
        'TRAJ58': 'ETSGSRLTFGEGTQLTVNP',
        'TRAJ59': 'KEGNRKFTFGMGTQVRVKL',
        'TRAJ60': 'KITMLNFGKGTELIVSL',
        'TRAJ61': 'YRVNRKLTFGANTRGIMKL'
    },
    'mouse': {
        'TRAJ2': 'NTGGLSGKLTFGEGTQVTVIS',
        'TRAJ3': 'EFSYSSKLIFGAETKLRNPP',
        'TRAJ4': 'LSGSFNKLTFGAGTRLLCAH',
        'TRAJ5': 'GTQVVGQLTFGRGTRLQVYA',
        'TRAJ6': 'TSGGNYKPTFGKGTSLVVHP',
        'TRAJ7': 'DYSNNRLTLGKGTQVVVLP',
        'TRAJ9': 'RNMGYKLTFGTGTSLLVDP',
        'TRAJ11': 'DSGYNKLTFGKGTVLLVSP',
        'TRAJ12': 'GTGGYKVVFGSGTRLLVSP',
        'TRAJ13': 'NSGTYQRFGTGTKLQVVP',
        'TRAJ15': 'YQGGRALIFGTGTTVSVSP',
        'TRAJ16': 'ATSSGQKLVFGQGTILKVYL',
        'TRAJ17': 'TNSAGNKLTFGIGTRVLVRP',
        'TRAJ18': 'DRGSALGRLHFGAGTQLIVIP',
        'TRAJ19': 'IYRGFHKFSSGIESKHNVSP',
        'TRAJ20': 'SGNYKLGVESVTMMSVRA',
        'TRAJ21': 'SNYNVLYFGSGTKLTVEP',
        'TRAJ22': 'SSGSWQLIFGSGTQLTVMP',
        'TRAJ23': 'NYNQGKLIFGQGTKLSIKP',
        'TRAJ24': 'ELASLGKLQFGTGTQVVVTP',
        'TRAJ25': 'RTKVSSVFGTWRRLLVKP',
        'TRAJ26': 'NNYAQGLTFGLGTRVSVFP',
        'TRAJ27': 'NTNTGKLTFGDGTVLTVKP',
        'TRAJ28': 'LPGTGSNRLTFGKGTKFSLIP',
        'TRAJ29': 'NSGSRELVLGREARLSMIE',
        'TRAJ30': 'DTNAYKVIFGKGTHLHVLP',
        'TRAJ31': 'NSNNRIFFGDGTQLVVKP',
        'TRAJ32': 'NYGSSGNKLIFGIGTLLSVKP',
        'TRAJ33': 'DSNYQLIWGSGTKLIIKP',
        'TRAJ34': 'SSNTDKVVFGTGTRLQVSP',
        'TRAJ35': 'QTGFASALTFGSGTKVIPCLP',
        'TRAJ36': 'NI*GKKKLVSGTRTRLTIIP',
        'TRAJ37': 'TGNTGKLIFGLGTTLQVQP',
        'TRAJ38': 'NVGDNSKLIWGLGTSLVVNP',
        'TRAJ39': 'NNNAGAKLTFGGGTRLTVRP',
        'TRAJ40': 'VNTGNYKYVFGAGTRLKVIA',
        'TRAJ41': 'VSNTSSMLAEAPHYWSHP',
        'TRAJ42': 'NSGGSNAKLTFGKGTKLSVKS',
        'TRAJ43': 'NNNNAPRFGAGTKLSVKP',
        'TRAJ44': 'VTGSGGKLTLGAGTRLQVNL',
        'TRAJ45': 'NTEGADRLTFGKGTQLIIQP',
        'TRAJ46': 'RRQQCRHAGFGDGDELGVST',
        'TRAJ47': 'HYANKMICGLGTILRVRP',
        'TRAJ48': 'ANYGNEKITFGAGTKLTIKP',
        'TRAJ49': 'NTGYQNFYFGKGTSLTVIP',
        'TRAJ50': 'ASSSFSKLVFGQGTSLSVVP',
        'TRAJ52': 'NTGANTGKLTFGHGTILRVHP',
        'TRAJ53': 'NSGGSNYKLTFGKGTLLTVTP',
        'TRAJ54': 'KRPGF*KLVFGQGTG*P',
        'TRAJ56': 'ATGGNNKLTFGQGTVLSVIP',
        'TRAJ57': 'NQGGSAKLIFGEGTKLTVSS',
        'TRAJ58': 'QQGTGSKLSFGKGAKLTVSP',
        'TRAJ59': 'LLKREDKATFATGGYEAEED',
        'TRAJ60': 'RSTKDLYFR*ELSSSSA',
        'TRAJ61': 'VQNEIGIFFFGAMTGRLMKLS'
    }
})

TRBJ_SEQUENCES = AttrDict({
    'human': {
        'TRBJ1-1': 'NTEAFFGQGTRLTVV',
        'TRBJ1-2': 'NYGYTFGSGTRLTVV',
        'TRBJ1-3': 'SGNTIYFGEGSWLTVV',
        'TRBJ1-4': 'TNEKLFFGSGTQLSVL',
        'TRBJ1-5': 'SNQPQHFGDGTRLSIL',
        'TRBJ1-6': 'SYNSPLHFGNGTRLTVT',
        'TRBJ2-1': 'SYNEQFFGPGTRLTVL',
        'TRBJ2-2': 'NTGELFFGEGSRLTVL',
        'TRBJ2-3': 'STDTQYFGPGTRLTVL',
        'TRBJ2-4': 'AKTNIQYFGAGTRLSVL',
        'TRBJ2-5': 'QETQYFGPGTRLLVL',
        'TRBJ2-6': 'SGANVLTFGAGSRLTVL',
        'TRBJ2-7': 'SYEQYFGPGTRLTVT'
    },
    'mouse': {
        'TRBJ1-1': 'NTEVFFGKGTRLTVV',
        'TRBJ1-2': 'NSDYTFGSGTRLLVI',
        'TRBJ1-3': 'SGNTLYFGEGSRLIVV',
        'TRBJ1-4': 'SNERLFFGHGTKLSVL',
        'TRBJ1-5': 'NNQAPLFGEGTRLSVL',
        'TRBJ1-6': 'SYNSPLYFAAGTRLTVT',
        'TRBJ1-7': 'PVLDDHGLGKELRYK',
        'TRBJ2-1': 'NYAEQFFGPGTRLTVL',
        'TRBJ2-2': 'NTGQLYFGEGSKLTVL',
        'TRBJ2-3': 'SAETLYFGSGTRLTVL',
        'TRBJ2-4': 'SQNTLYFGAGTRLSVL',
        'TRBJ2-5': 'NQDTQYFGPGTRLLVL',
        'TRBJ2-6': 'ALALTDWQPIEQPMR',
        'TRBJ2-7': 'SYEQYFGPGTRLTVL'
    }
})


@dataclass
class MouseTCRAnnotations:
    TRBV_CDR3_REGION_SEQUENCE = {
        'TRBV1': 'CTCSA',
        'TRBV2': 'CASSQ',
        'TRBV3': 'CASSL',
        'TRBV4': 'CASS*',
        'TRBV5': 'CASSQ',
        'TRBV8': 'GASSS',
        'TRBV9': 'CARSL',
        'TRBV10': 'ASSEQ',
        'TRBV12-1': 'CASSL',
        'TRBV12-2': 'CASSL',
        'TRBV13-1': 'CASSD',
        'TRBV13-2': 'CASGD',
        'TRBV13-3': 'CASSD',
        'TRBV14': 'CASSF',
        'TRBV15': 'CASSL',
        'TRBV16': 'CASSL',
        'TRBV17': 'CASSR',
        'TRBV19': 'CASSI',
        'TRBV20': 'CGAR',
        'TRBV21': 'CASSQ',
        'TRBV23': 'CSSSQ',
        'TRBV24': 'CASSL',
        'TRBV26': 'CASSL',
        'TRBV29': 'CASSL',
        'TRBV30': 'CSSR',
        'TRBV31': 'CAWS'
    }

    TRAV_CDR3_REGION_SEQUENCE = {
        'TRAV1': 'CAVR',
        'TRAV2': 'CIVTD',
        'TRAV3-1': 'CAVS',
        'TRAV3-3': 'CAVS',
        'TRAV3-4': 'CAVS',
        'TRAV3D-3': 'CAVS',
        'TRAV3N-3': 'CAVS',
        'TRAV4-2': 'CAAE',
        'TRAV4-3': 'CAAE',
        'TRAV4-4-DV10': 'CAAE',
        'TRAV4D-2': 'CAAE',
        'TRAV4D-3': 'CAAE',
        'TRAV4D-4': 'CAAE',
        'TRAV4N-3': 'CAAE',
        'TRAV4N-4': 'CAAE',
        'TRAV5-1': 'CSAS',
        'TRAV5-2': 'CAES',
        'TRAV5-4': 'CAAS',
        'TRAV5D-2': '*K',
        'TRAV5D-4': 'CAAS',
        'TRAV5N-2': '*K',
        'TRAV5N-4': 'CAAS',
        'TRAV6-1': 'CVLG',
        'TRAV6-2': 'CVLG',
        'TRAV6-3': 'CAMR',
        'TRAV6-4': 'CALV',
        'TRAV6-5': 'CALS',
        'TRAV6-6': 'CALG',
        'TRAV6-7-DV9': 'CALG',
        'TRAV6D-3': 'CAMR',
        'TRAV6D-4': 'CALV',
        'TRAV6D-5': 'CALG',
        'TRAV6D-6': 'CALS',
        'TRAV6D-7': 'CALS',
        'TRAV6N-5': 'CALG',
        'TRAV6N-6': 'CALS',
        'TRAV6N-7': 'CALG',
        'TRAV7-1': 'CAVS',
        'TRAV7-2': 'CAVS',
        'TRAV7-3': 'CAVS',
        'TRAV7-4': 'CAASE',
        'TRAV7-5': 'CAMS',
        'TRAV7-6': 'CAVS',
        'TRAV7D-2': 'CAAS',
        'TRAV7D-3': 'CAVS',
        'TRAV7D-4': 'CAASE',
        'TRAV7D-5': 'CAVS',
        'TRAV7D-6': 'CAAS',
        'TRAV7N-4': 'CAVSE',
        'TRAV7N-5': 'CAVS',
        'TRAV7N-6': 'CAVS',
        'TRAV8-1': 'CATD',
        'TRAV8-2': 'CATD',
        'TRAV8D-1': 'CATD',
        'TRAV8D-2': 'CATD',
        'TRAV8N-2': 'CATD',
        'TRAV9-1': 'CAVS',
        'TRAV9-2': 'CAAS',
        'TRAV9-3': 'CAVS',
        'TRAV9-4': 'CAVS',
        'TRAV9D-1': 'CAAS',
        'TRAV9D-2': 'CAVS',
        'TRAV9D-3': 'CAVS',
        'TRAV9D-4': 'CALS',
        'TRAV9N-2': 'CVLS',
        'TRAV9N-3': 'CAVS',
        'TRAV9N-4': 'CALS',
        'TRAV10': 'CAAS',
        'TRAV10D': 'CAAS',
        'TRAV10N': 'CAAS',
        'TRAV11': 'CVVG',
        'TRAV11D': 'CVVG',
        'TRAV11N': 'CVVG',
        'TRAV12-1': 'CALS',
        'TRAV12-2': 'CALS',
        'TRAV12-3': 'CALS',
        'TRAV12D-1': 'CALS',
        'TRAV12D-2': 'CALS',
        'TRAV12D-3': 'CALS',
        'TRAV12N-1': 'CALS',
        'TRAV12N-2': 'CALS',
        'TRAV12N-3': 'CALS',
        'TRAV13-1': 'CAME',
        'TRAV13-2': 'CAID',
        'TRAV13-3': 'CAME',
        'TRAV13-4-DV7': 'CAME',
        'TRAV13-5': 'CVLS',
        'TRAV13D-1': 'CAME',
        'TRAV13D-2': 'CAID',
        'TRAV13D-3': 'CAME',
        'TRAV13D-4': 'CAME',
        'TRAV13N-1': 'CAME',
        'TRAV13N-2': 'CAID',
        'TRAV13N-3': 'CAME',
        'TRAV13N-4': 'CAME',
        'TRAV14-1': 'CAAS',
        'TRAV14-2': 'CAAS',
        'TRAV14-3': 'CAAS',
        'TRAV14D-1': 'CAAS',
        'TRAV14D-2': 'CAAS',
        'TRAV14D-3-DV8': 'CAAS',
        'TRAV14N-1': 'CAAS',
        'TRAV14N-2': 'CAAS',
        'TRAV14N-3': 'CAAS',
        'TRAV15-1-DV6-1': 'CALWEL',
        'TRAV15-2-DV6-2': 'CALSEL',
        'TRAV15D-1-DV6D-1': 'CALWEL',
        'TRAV15D-2-DV6D-2': 'CALSEL',
        'TRAV15N-1': 'CALWEL',
        'TRAV15N-2': 'CALSEL',
        'TRAV16': 'CAMRE',
        'TRAV16D-DV11': 'CAMRE',
        'TRAV16N': 'CAMRE',
        'TRAV17': 'CALE',
        'TRAV18': 'CAG',
        'TRAV19': 'CAAG',
        'TRAV20': 'CAPG',
        'TRAV21-DV12': 'CILRV'
    }
    TRAJ_CDR3_REGION_SEQUENCE = {
        'TRAJ2': 'NTGGLSGKLTFGEGTQVTVIS',
        'TRAJ3': 'EFSYSSKLIFGAETKLRNPP',
        'TRAJ4': 'LSGSFNKLTFGAGTRLLCAH',
        'TRAJ5': 'GTQVVGQLTFGRGTRLQVYA',
        'TRAJ6': 'TSGGNYKPTFGKGTSLVVHP',
        'TRAJ7': 'DYSNNRLTLGKGTQVVVLP',
        'TRAJ9': 'RNMGYKLTFGTGTSLLVDP',
        'TRAJ11': 'DSGYNKLTFGKGTVLLVSP',
        'TRAJ12': 'GTGGYKVVFGSGTRLLVSP',
        'TRAJ13': 'NSGTYQRFGTGTKLQVVP',
        'TRAJ15': 'YQGGRALIFGTGTTVSVSP',
        'TRAJ16': 'ATSSGQKLVFGQGTILKVYL',
        'TRAJ17': 'TNSAGNKLTFGIGTRVLVRP',
        'TRAJ18': 'DRGSALGRLHFGAGTQLIVIP',
        'TRAJ19': 'IYRGFHKFSSGIESKHNVSP',
        'TRAJ20': 'SGNYKLGVESVTMMSVRA',
        'TRAJ21': 'SNYNVLYFGSGTKLTVEP',
        'TRAJ22': 'SSGSWQLIFGSGTQLTVMP',
        'TRAJ23': ['NYNQGKLIFGQGTKLSIKP', 'PQGKLIF'],
        'TRAJ24': 'ELASLGKLQFGTGTQVVVTP',
        'TRAJ25': 'RTKVSSVFGTWRRLLVKP',
        'TRAJ26': 'NNYAQGLTFGLGTRVSVFP',
        'TRAJ27': 'NTNTGKLTFGDGTVLTVKP',
        'TRAJ28': 'LPGTGSNRLTFGKGTKFSLIP',
        'TRAJ29': 'NSGSRELVLGREARLSMIE',
        'TRAJ30': 'DTNAYKVIFGKGTHLHVLP',
        'TRAJ31': 'NSNNRIFFGDGTQLVVKP',
        'TRAJ32': 'NYGSSGNKLIFGIGTLLSVKP',
        'TRAJ33': ['DSNYQLIWGSGTKLIIKP', 'DGSNYQLIWGSGTKLIIKP'],
        'TRAJ34': ['SSNTDKVVFGTGTRLQVSP', 'SSNTNKVVFGTGTRLQVSP'],
        'TRAJ35': 'QTGFASALTFGSGTKVIPCLP',
        'TRAJ36': 'NIGKKKLVSGTRTRLTIIP',
        'TRAJ37': 'TGNTGKLIFGLGTTLQVQP',
        'TRAJ38': 'NVGDNSKLIWGLGTSLVVNP',
        'TRAJ39': 'NNNAGAKLTFGGGTRLTVRP',
        'TRAJ40': 'VNTGNYKYVFGAGTRLKVIA',
        'TRAJ41': 'VSNTSSMLAEAPHYWSHP',
        'TRAJ42': 'NSGGSNAKLTFGKGTKLSVKS',
        'TRAJ43': 'NNNNAPRFGAGTKLSVKP',
        'TRAJ44': 'VTGSGGKLTLGAGTRLQVNL',
        'TRAJ45': 'NTEGADRLTFGKGTQLIIQP',
        'TRAJ46': 'RRQQCRHAGFGDGDELGVST',
        'TRAJ47': 'HYANKMICGLGTILRVRP',
        'TRAJ48': 'ANYGNEKITFGAGTKLTIKP',
        'TRAJ49': 'NTGYQNFYFGKGTSLTVIP',
        'TRAJ50': 'ASSSFSKLVFGQGTSLSVVP',
        'TRAJ52': 'NTGANTGKLTFGHGTILRVHP',
        'TRAJ53': 'NSGGSNYKLTFGKGTLLTVTP',
        'TRAJ54': 'KRPGFKLVFGQGTGP',
        'TRAJ56': 'ATGGNNKLTFGQGTVLSVIP',
        'TRAJ57': 'NQGGSAKLIFGEGTKLTVSS',
        'TRAJ58': 'QQGTGSKLSFGKGAKLTVSP',
        'TRAJ59': 'LLKREDKATFATGGYEAEED',
        'TRAJ60': 'RSTKDLYFRELSSSSA',
        'TRAJ61': 'VQNEIGIFFFGAMTGRLMKLS'
    }
    TRBJ_CDR3_REGION_SEQUENCE = {
        'TRBJ1-1': 'NTEVFFGKGTRLTVV',
        'TRBJ1-2': 'NSDYTFGSGTRLLVI',
        'TRBJ1-3': 'SGNTLYFGEGSRLIVV',
        'TRBJ1-4': 'SNERLFFGHGTKLSVL',
        'TRBJ1-5': 'NNQAPLFGEGTRLSVL',
        'TRBJ1-6': 'SYNSPLYFAAGTRLTVT',
        'TRBJ1-7': 'PVLDDHGLGKELRYK',
        'TRBJ2-1': 'NYAEQFFGPGTRLTVL',
        'TRBJ2-2': 'NTGQLYFGEGSKLTVL',
        'TRBJ2-3': 'SAETLYFGSGTRLTVL',
        'TRBJ2-4': 'SQNTLYFGAGTRLSVL',
        'TRBJ2-5': 'NQDTQYFGPGTRLLVL',
        'TRBJ2-6': 'ALALTDWQPIEQPMR',
        'TRBJ2-7': 'SYEQYFGPGTRLTVL'
    }
    VJ_GENES = list(TRAV_CDR3_REGION_SEQUENCE.keys()) + list(TRAJ_CDR3_REGION_SEQUENCE.keys()) + list(TRBV_CDR3_REGION_SEQUENCE.keys()) + list(TRBJ_CDR3_REGION_SEQUENCE.keys())

    TRAV_GENES = list(filter(lambda x: x.startswith("TRAV"), VJ_GENES))
    TRAJ_GENES = list(filter(lambda x: x.startswith("TRAJ"), VJ_GENES))
    TRBV_GENES = list(filter(lambda x: x.startswith("TRBV"), VJ_GENES))
    TRBJ_GENES = list(filter(lambda x: x.startswith("TRBJ"), VJ_GENES))

    VJ_GENES2INDEX = dict(zip(VJ_GENES, range(len(VJ_GENES))))
    VJ_GENES2INDEX_REVERSE = {v:k for k,v in VJ_GENES2INDEX.items()}

    CDR1a = [
        "TSGFNG",
        "NIATSEY",
        "DSATAY",
        "DPNSYY",
        "DSATAY",
        "DPNSYY",
        "DPNSYY",
        "TTMKS",
        "IATTT",
        "TTMRS",
        "TTMKG",
        "IAATT",
        "TTTRS",
        "IAATT",
        "TTMRA",
        "DSASVY",
        "NNASLC",
        "NSASNY",
        "NNALLC",
        "NSASNY",
        "NNALLC",
        "NSASNY",
        "TTWYPT",
        "TTGYPT",
        "TTGYPT",
        "TTTYPT",
        "TKQYPT",
        "TTSIAYPN",
        "ASGYPA",
        "TTGYPT",
        "TTTYPT",
        "TKQYPT",
        "ATSIAYPN",
        "ASGYPA",
        "TKQYPT",
        "ATSIGYPN",
        "ASGYPA",
        "DRNSQY",
        "DRNVDY",
        "DSASQY",
        "DRNFQY",
        "DGTSDN",
        "NSASQS",
        "DRNVDY",
        "DSASQY",
        "DRNFQY",
        "DGTSDN",
        "DSASQS",
        "DRNFQY",
        "DRSSDN",
        "NSASQS",
        "TSITA",
        "TYTTV",
        "TSITA",
        "TYTTV",
        "TYTTV",
        "YGGSIY",
        "YSGTPY",
        "SSVTPY",
        "YSATPY",
        "YGGSIY",
        "YSGTPY",
        "YSATPY",
        "YSGTPY",
        "SSGTPY",
        "YFGTPY",
        "YSATPY",
        "DTASSY",
        "DTASSY",
        "DTASSY",
        "VTPDNH",
        "VTPDNH",
        "VTPDNH",
        "TAYSDVA",
        "TAYSTF",
        "TIYSNPF",
        "TTYLTIA",
        "STYSPF",
        "TIYSNPY",
        "TAYSDVA",
        "TTYSPF",
        "TIYSNPF",
        "TSLNS",
        "STATQ",
        "TTLNS",
        "STATQ",
        "ISTNQ",
        "TSLNS",
        "STATR",
        "TTLNS",
        "IFTNQ",
        "TSLNS",
        "STATQ",
        "TTLNS",
        "IFTNQ",
        "DSTFNY",
        "DSTFDY",
        "NSAFDY",
        "DSTFNY",
        "DSTFDY",
        "NSAFDY",
        "DSTFNY",
        "DSTFDY",
        "NSAFDY",
        "TSQVLYH",
        "TSEYFYV",
        "TSQVLYH",
        "TSEYFYC",
        "TSQVLYH",
        "TSEYFYR",
        "TQDSSYF",
        "TQDSSYF",
        "TRDSSYF",
        "YSAAPY",
        "TTFPQ",
        "NDMFDY",
        "NAATNY",
        "TISGNEY",
    ]

    CDR2a = [
        "VVLDGL",
        "GYKDY",
        "VLSNVDR",
        "VFSSTEI",
        "VFSNVDR",
        "VFSSTEI",
        "VFSSTEI",
        "LAQGT",
        "LVPGT",
        "LASGT",
        "LAQGT",
        "LVPGT",
        "LASGT",
        "LVPGT",
        "LASGT",
        "IRSNMER",
        "IR*NMER",
        "IRSNMER",
        "IC*NMER",
        "IRSNMER",
        "IC*NMER",
        "IRSNMER",
        "VTTANNK",
        "VTTANNK",
        "VTTANNK",
        "VTTANNK",
        "VPKANEK",
        "VITAGQK",
        "ASRDKEK",
        "VTTANNK",
        "VTTANNK",
        "VPKANEK",
        "VITAGQK",
        "ASRDKEK",
        "VPKANEK",
        "VITAGQK",
        "ASRDKEK",
        "IFSNGD",
        "IFSNGE",
        "IFSNGE",
        "IFSDGD",
        "IFSDGE",
        "IFSNGN",
        "IFSNGE",
        "IFSNGE",
        "IFSDGD",
        "IFSDGE",
        "IFSNGN",
        "IFSDGD",
        "IFSDGE",
        "IFSNGN",
        "IRSNERE",
        "IRSNERE",
        "IRSNERE",
        "IRSNERE",
        "IRSNERE",
        "YYSGNPVV",
        "YYSGDPVV",
        "YYSGDPVV",
        "YYSGDPVV",
        "YYSGNPVV",
        "YYSGDPVV",
        "YYSGDPVV",
        "YYSGDPVV",
        "YYSGDPVV",
        "YYPGDPVV",
        "YYSGDPVV",
        "IRSNVDR",
        "IRSNVDR",
        "IRSNVDR",
        "LVHENDK",
        "LVHENDK",
        "LVHQKDK",
        "SSTDNKR",
        "SSTDNKR",
        "SSTDNKR",
        "SSTDNKR",
        "SFTDNKR",
        "NFTDNKR",
        "SSTDNKR",
        "SSTDNKR",
        "SFTDNKR",
        "NPSGT",
        "NPSGT",
        "SPSWAE",
        "NPSGT",
        "IPGM",
        "NPSGT",
        "NPSGT",
        "SPSWAE",
        "NPSGT",
        "NPSGT",
        "NPSGT",
        "SPSWAE",
        "NPSGT",
        "ILSVSDK",
        "IRPVSNK",
        "ILSVSDK",
        "IRSVSDK",
        "ISLVSNK",
        "IRSVSDK",
        "IRSVSDK",
        "IRPVSNK",
        "IRSVSDK",
        "QMPSTIAI",
        "QTSFDTQN",
        "QMSSSTAK",
        "QTSFDTQN",
        "QTSSSTAK",
        "QPSFDTQN",
        "QDSYKKEN",
        "QDSYKKEN",
        "QDSYKKEN",
        "YITGDAVV",
        "LVKSGEV",
        "VRSNVDK",
        "IRSNVNR",
        "GLQQN",
    ]

    CDR1b = [
        "NSQYPW",
        "LGHNA",
        "SNHLY",
        "LGHDT",
        "LGHNA",
        "MKHDS",
        "SGPTG",
        "MNHYR",
        "SGHSN",
        "SGHLS",
        "NSHNY",
        "NNHNN",
        "NNHDY",
        "SGHDT",
        "SGHND",
        "SGHSA",
        "MNHDT",
        "FNHDT",
        "GFQATS",
        "NGHSY",
        "KGHTA",
        "KGHTA",
        "KGHPV",
        "MSHET",
        "SQVVS",
        "GKSSPN",
    ]

    CDR2b = [
        "LRSPGD",
        "YSYQKL",
        "FYNGKV",
        "YNNKQL",
        "YNLKQL",
        "SYDAGI",
        "FQGEFI",
        "SVGTDR",
        "HYEKVE",
        "HYDKME",
        "SYGAGN",
        "SYGAGS",
        "SYVADS",
        "FRDEAV",
        "FRSKSL",
        "FRNQAP",
        "YYDKIL",
        "SITEND",
        "STVNSAI",
        "FQNEDI",
        "FQNQQP",
        "FRNEEI",
        "FQNQEV",
        "SYDVDS",
        "ANEGSEA",
        "SITVG",
    ]

    TRAV_KEYS = [
        "TRAV1",
        "TRAV2",
        "TRAV3-1",
        "TRAV3-3",
        "TRAV3-4",
        "TRAV3D-3",
        "TRAV3N-3",
        "TRAV4-2",
        "TRAV4-3",
        "TRAV4-4DV10",
        "TRAV4D-2",
        "TRAV4D-3",
        "TRAV4D-4",
        "TRAV4N-3",
        "TRAV4N-4",
        "TRAV5-1",
        "TRAV5-2",
        "TRAV5-4",
        "TRAV5D-2",
        "TRAV5D-4",
        "TRAV5N-2",
        "TRAV5N-4",
        "TRAV6-1",
        "TRAV6-2",
        "TRAV6-3",
        "TRAV6-4",
        "TRAV6-5",
        "TRAV6-6",
        "TRAV6-7DV9",
        "TRAV6D-3",
        "TRAV6D-4",
        "TRAV6D-5",
        "TRAV6D-6",
        "TRAV6D-7",
        "TRAV6N-5",
        "TRAV6N-6",
        "TRAV6N-7",
        "TRAV7-1",
        "TRAV7-2",
        "TRAV7-3",
        "TRAV7-4",
        "TRAV7-5",
        "TRAV7-6",
        "TRAV7D-2",
        "TRAV7D-3",
        "TRAV7D-4",
        "TRAV7D-5",
        "TRAV7D-6",
        "TRAV7N-4",
        "TRAV7N-5",
        "TRAV7N-6",
        "TRAV8-1",
        "TRAV8-2",
        "TRAV8D-1",
        "TRAV8D-2",
        "TRAV8N-2",
        "TRAV9-1",
        "TRAV9-2",
        "TRAV9-3",
        "TRAV9-4",
        "TRAV9D-1",
        "TRAV9D-2",
        "TRAV9D-3",
        "TRAV9D-4",
        "TRAV9N-2",
        "TRAV9N-3",
        "TRAV9N-4",
        "TRAV10",
        "TRAV10D",
        "TRAV10N",
        "TRAV11",
        "TRAV11D",
        "TRAV11N",
        "TRAV12-1",
        "TRAV12-2",
        "TRAV12-3",
        "TRAV12D-1",
        "TRAV12D-2",
        "TRAV12D-3",
        "TRAV12N-1",
        "TRAV12N-2",
        "TRAV12N-3",
        "TRAV13-1",
        "TRAV13-2",
        "TRAV13-3",
        "TRAV13-4DV7",
        "TRAV13-5",
        "TRAV13D-1",
        "TRAV13D-2",
        "TRAV13D-3",
        "TRAV13D-4",
        "TRAV13N-1",
        "TRAV13N-2",
        "TRAV13N-3",
        "TRAV13N-4",
        "TRAV14-1",
        "TRAV14-2",
        "TRAV14-3",
        "TRAV14D-1",
        "TRAV14D-2",
        "TRAV14D-3DV8",
        "TRAV14N-1",
        "TRAV14N-2",
        "TRAV14N-3",
        "TRAV15-1DV6-1",
        "TRAV15-2DV6-2",
        "TRAV15D-1DV6D-1",
        "TRAV15D-2DV6D-2",
        "TRAV15N-1",
        "TRAV15N-2",
        "TRAV16",
        "TRAV16DDV11",
        "TRAV16N",
        "TRAV17",
        "TRAV18",
        "TRAV19",
        "TRAV20",
        "TRAV21DV12",
    ]

    TRBV_KEYS = [
        "TRBV1",
        "TRBV2",
        "TRBV3",
        "TRBV4",
        "TRBV5",
        "TRBV8",
        "TRBV9",
        "TRBV10",
        "TRBV12-1",
        "TRBV12-2",
        "TRBV13-1",
        "TRBV13-2",
        "TRBV13-3",
        "TRBV14",
        "TRBV15",
        "TRBV16",
        "TRBV17",
        "TRBV19",
        "TRBV20",
        "TRBV21",
        "TRBV23",
        "TRBV24",
        "TRBV26",
        "TRBV29",
        "TRBV30",
        "TRBV31",
    ]

    TRAV2CDR1a = dict(zip(TRAV_KEYS, CDR1a))
    TRAV2CDR2a = dict(zip(TRAV_KEYS, CDR2a))
    TRBV2CDR1b = dict(zip(TRBV_KEYS, CDR1b))
    TRBV2CDR2b = dict(zip(TRBV_KEYS, CDR2b))

@dataclass
class HumanTCRAnnotations:
    IMGT_TRAV = [r.id.split('|')[1] for r in SeqIO.parse( MODULE_PATH / "../data/imgt/TRAV.fasta", "fasta")]
    IMGT_TRAJ = [r.id.split('|')[1] for r in SeqIO.parse( MODULE_PATH / "../data/imgt/TRAJ.fasta", "fasta")]
    IMGT_TRBV = [r.id.split('|')[1] for r in SeqIO.parse( MODULE_PATH / "../data/imgt/TRBV.fasta", "fasta")]
    IMGT_TRBD = [r.id.split('|')[1] for r in SeqIO.parse( MODULE_PATH / "../data/imgt/TRBD.fasta", "fasta")]
    IMGT_TRBJ = [r.id.split('|')[1] for r in SeqIO.parse( MODULE_PATH / "../data/imgt/TRBJ.fasta", "fasta")]
    IMGT_VJ_GENES = IMGT_TRAV + IMGT_TRAJ + IMGT_TRBV + IMGT_TRBJ

    TRBV_CDR3_REGION_SEQUENCE = {
        'TRBV1': 'CTSSQ',
        'TRBV2': 'CASSE',
        'TRBV3-1': 'CASSQ',
        'TRBV3-2': 'CASSQ',
        'TRBV4-1': 'CASSQ',
        'TRBV4-2': 'CASSQ',
        'TRBV4-3': 'CASSQ',
        'TRBV5-1': 'CASSL',
        'TRBV5-3': 'CARSL',
        'TRBV5-4': 'CASSL',
        'TRBV5-5': 'CASSL',
        'TRBV5-6': 'CASSL',
        'TRBV5-7': 'CASSL',
        'TRBV5-8': 'CASSL',
        'TRBV6-1': 'CASSE',
        'TRBV6-2': 'CASSY',
        'TRBV6-3': 'CASSY',
        'TRBV6-4': 'CASSD',
        'TRBV6-5': 'CASSY',
        'TRBV6-6': 'CASSY',
        'TRBV6-7': 'CASSY',
        'TRBV6-8': 'CASSY',
        'TRBV6-9': 'CASSY',
        'TRBV7-1': 'CASSS',
        'TRBV7-2': 'CASSL',
        'TRBV7-3': 'CASSL',
        'TRBV7-4': 'CASSL',
        'TRBV7-6': 'CASSL',
        'TRBV7-7': 'CASSL',
        'TRBV7-8': 'CASSL',
        'TRBV7-9': 'CASSL',
        'TRBV9': 'CASSV',
        'TRBV20OR9-2': 'CSAR',
        'TRBV10-1': 'CASSE',
        'TRBV10-2': 'CASSE',
        'TRBV10-3': 'CAISE',
        'TRBV11-1': 'CASSL',
        'TRBV11-2': 'CASSL',
        'TRBV11-3': 'CASSL',
        'TRBV12-1': 'CASSF',
        'TRBV12-2': 'CASRL',
        'TRBV12-3': 'CASSL',
        'TRBV12-4': 'CASSL',
        'TRBV12-5': 'CASGL',
        'TRBV13': 'CASSL',
        'TRBV14': 'CASSQ',
        'TRBV15': 'CATSR',
        'TRBV16': 'CASSQ',
        'TRBV17': 'YSSG',
        'TRBV18': 'CASSP',
        'TRBV19': 'CASSI',
        'TRBV20': 'CSAR',
        'TRBV20-1': 'CSAR',
        'TRBV21-1': 'CASSK',
        'TRBV23-1': 'CASSQ',
        'TRBV24-1': 'CATSDL',
        'TRBV25-1': 'CASSE',
        'TRBV26': 'YASSS',
        'TRBV27': 'CASSL',
        'TRBV28': 'CASSL',
        'TRBV29-1': 'CSVE',
        'TRBV30': 'CAWS'
    }

    TRBJ_CDR3_REGION_SEQUENCE = {
        'TRBJ1-1': 'NTEAFFGQGTRLTVV',
        'TRBJ1-2': 'NYGYTFGSGTRLTVV',
        'TRBJ1-3': 'SGNTIYFGEGSWLTVV',
        'TRBJ1-4': 'TNEKLFFGSGTQLSVL',
        'TRBJ1-5': 'SNQPQHFGDGTRLSIL',
        'TRBJ1-6': 'SYNSPLHFGNGTRLTVT',
        'TRBJ2-1': 'SYNEQFFGPGTRLTVL',
        'TRBJ2-2': 'NTGELFFGEGSRLTVL',
        'TRBJ2-3': 'STDTQYFGPGTRLTVL',
        'TRBJ2-4': 'AKNIQYFGAGTRLSVL',
        'TRBJ2-5': 'QETQYFGPGTRLLVL',
        'TRBJ2-6': 'SGANVLTFGAGSRLTVL',
        'TRBJ2-7': 'SYEQYFGPGTRLTVT'
    }

    TRAV_CDR3_REGION_SEQUENCE = {
    'TRAV1-1': 'CAVR',
    'TRAV1-2': 'CAVR',
    'TRAV2': 'CAVE',
    'TRAV3': 'CAVRD',
    'TRAV4': 'CLVGD',
    'TRAV5': 'CAES',
    'TRAV6': 'CALD',
    'TRAV7': 'CAVD',
    'TRAV8-1': 'CAVN',
    'TRAV8-2': 'CVVS',
    'TRAV8-3': 'CAVG',
    'TRAV8-4': 'CAVS',
    'TRAV8-6': 'CAVS',
    'TRAV8-7': 'CAVG',
    'TRAV9-1': 'CALS',
    'TRAV9-2': 'CALS',
    'TRAV10': 'CVVS',
    'TRAV11': 'CAL',
    'TRAV12-1': 'CVVN',
    'TRAV12-2': 'CAVN',
    'TRAV12-3': 'CAMS',
    'TRAV13-1': 'CAAS',
    'TRAV13-2': 'CAEN',
    'TRAV14DV4': 'CAMRE',
    'TRAV16': 'CALS',
    'TRAV17': 'CATD',
    'TRAV18': 'CALR',
    'TRAV19': 'CALSE',
    'TRAV20': 'CAVQ',
    'TRAV21': 'CAVR',
    'TRAV22': 'CAVE',
    'TRAV23DV6': 'CAAS',
    'TRAV24': 'CAF',
    'TRAV25': 'CAG',
    'TRAV26-1': 'CIVRV',
    'TRAV26-2': 'CILRD',
    'TRAV27': 'CAG',
    'TRAV29DV5': 'CAAS',
    'TRAV30': 'CGTE',
    'TRAV34': 'CGAD',
    'TRAV35': 'CAGQ',
    'TRAV36DV7': 'CAVE',
    'TRAV38-1': 'CAFMK',
    'TRAV38-2DV8': 'CAYRS',
    'TRAV39': 'CAVD',
    'TRAV40': 'CLLG',
    'TRAV41': 'CAVR'
    }

    TRAJ_CDR3_REGION_SEQUENCE = {
        'TRAJ1': 'YESITSQLQFGKGTRVSTSP',
        'TRAJ2': 'NTGGTIDKLTFGKGTHVFIIS',
        'TRAJ3': 'GYSSASKIIFGSGTRLSIRP',
        'TRAJ4': 'FSGGYNKLIFGAGTRLAVHP',
        'TRAJ5': 'DTGRRALTFGSGTRLQVQP',
        'TRAJ6': 'ASGGSYIPTFGRGTSLIVHP',
        'TRAJ7': 'DYGNNRLAFGKGNQVVVIP',
        'TRAJ8': 'NTGFQKLVFGTGTRLLVSP',
        'TRAJ9': 'GNTGGFKTIFGAGTRLFVKA',
        'TRAJ10': 'ILTGGGNKLTFGTGTQLKVEL',
        'TRAJ11': 'NSGYSTLTFGKGTMLLVSP',
        'TRAJ12': 'MDSSYKLIFGSGTRLLVRP',
        'TRAJ13': 'NSGGYQKVTFGIGTKLQVIP',
        'TRAJ14': 'IYSTFIFGSGTRLSVKP',
        'TRAJ15': 'NQAGTALIFGKGTTLSVSS',
        'TRAJ16': 'FSDGQKLLFARGTMLKVDL',
        'TRAJ17': 'IKAAGNKLTFGGGTRVLVKP',
        'TRAJ18': 'DRGSTLGRLYFGRGTQLTVWP',
        'TRAJ19': 'YQRFYNFTFGKGSKHNVTP',
        'TRAJ20': 'SNDYKLSFGAGTTVTVRA',
        'TRAJ21': 'YNFNKFYFGSGTKLNVKP',
        'TRAJ22': 'SSGSARQLTFGSGTQLTVLP',
        'TRAJ23': 'IYNQGGKLIFGQGTELSVKP',
        'TRAJ24': 'TTDSWGKFEFGAGTQVVVTP',
        'TRAJ25': 'EGQGFSFIFGKGTRLLVKP',
        'TRAJ26': 'DNYGQNFVFGPGTRLSVLP',
        'TRAJ27': 'NTNAGKSTFGDGTTLTVKP',
        'TRAJ28': 'YSGAGSYQLTFGKGTKLSVIP',
        'TRAJ29': 'NSGNTPLVFGKGTRLSVIA',
        'TRAJ30': 'NRDDKIIFGKGTRLHILP',
        'TRAJ31': 'NNNARLMFGDGTQLVVKP',
        'TRAJ32': 'NYGGATNKLIFGTGTLLAVQP',
        'TRAJ33': 'DSNYQLIWGAGTKLIIKP',
        'TRAJ34': 'SYNTDKLIFGTGTRLQVFP',
        'TRAJ35': 'IGFGNVLHCGSGTQVIVLP',
        'TRAJ36': 'QTGANNLFFGTGTRLTVIP',
        'TRAJ37': 'GSGNTGKLIFGQGTTLQVKP',
        'TRAJ38': 'NAGNNRKLIWGLGTSLAVNP',
        'TRAJ39': 'NNNAGNMLTFGGGTRLMVKP',
        'TRAJ40': 'TTSGTYKYIFGTGTRLKVLA',
        'TRAJ41': 'NSNSGYALNFGKGTSLLVTP',
        'TRAJ42': 'NYGGSQGNLIFGKGTKLSVKP',
        'TRAJ43': 'NNNDMRFGAGTRLTVKP',
        'TRAJ44': 'NTGTASKLTFGTGTRLQVTL',
        'TRAJ45': 'YSGGGADGLTFGKGTHLIIQP',
        'TRAJ46': 'KKSSGDKLTFGTGTRLAVRP',
        'TRAJ47': 'EYGNKLVFGAGTILRVKS',
        'TRAJ48': 'SNFGNEKLTFGTGTRLTIIP',
        'TRAJ49': 'NTGNQFYFGTGTSLTVIP',
        'TRAJ50': 'KTSYDKVIFGPGTSLSVIP',
        'TRAJ51': 'MRDSYEKLIFGKETLTVKP',
        'TRAJ52': 'NAGGTSYGKLTFGQGTILTVHP',
        'TRAJ53': 'NSGGSNYKLTFGKGTLLTVNP',
        'TRAJ54': 'IQGAQKLVFGQGTRLTINP',
        'TRAJ55': 'KCWCSCWGKGMSTKINP',
        'TRAJ56': 'YTGANSKLTFGKGITLSVRP',
        'TRAJ57': 'TQGGSEKLVFGKGTKLTVNP',
        'TRAJ58': 'ETSGSRLTFGEGTQLTVNP',
        'TRAJ59': 'KEGNRKFTFGMGTQVRVKL',
        'TRAJ60': 'KITMLNFGKGTELIVSL',
        'TRAJ61': 'YRVNRKLTFGANTRGIMKL',
    }

    VJ_GENES = list(TRAV_CDR3_REGION_SEQUENCE.keys()) + list(TRAJ_CDR3_REGION_SEQUENCE.keys()) + list(TRBV_CDR3_REGION_SEQUENCE.keys()) + list(TRBJ_CDR3_REGION_SEQUENCE.keys())

    TRAV_GENES = list(filter(lambda x: x.startswith("TRAV"), VJ_GENES))
    TRAJ_GENES = list(filter(lambda x: x.startswith("TRAJ"), VJ_GENES))
    TRBV_GENES = list(filter(lambda x: x.startswith("TRBV"), VJ_GENES))
    TRBJ_GENES = list(filter(lambda x: x.startswith("TRBJ"), VJ_GENES))

    VJ_GENES2INDEX = dict(zip(VJ_GENES, range(len(VJ_GENES))))
    VJ_GENES2INDEX_REVERSE = {v:k for k,v in VJ_GENES2INDEX.items()}

    CDR1a = [
        'TSGFYG',
        'TSGFNG',
        'VSNAYN',
        'VSGNPY',
        'NIATNDY',
        'DSSSTY',
        'NYSPAY',
        'VSRFNN',
        'YGGTVN',
        'SSYSPS',
        'YGATPY',
        'SSVPPY',
        'SSVSVY',
        'YSGVPS',
        'TTQYPS',
        'ATGYPS',
        'VSPFSN',
        'ERTLFN',
        'NSASQS',
        'DRGSQS',
        'NSAFQY',
        'DSASNY',
        'NSASDY',
        'TSDPSYG',
        'YSGSPE',
        'TSINN',
        'SSYSTF',
        'TRDTTYY',
        'VSGLRG',
        'DSAIYN',
        'DSVNN',
        'NTAFDY',
        'SSNFYA',
        'TTLSN',
        'TISGNEY',
        'TISGTDY',
        'SVFSS',
        'NSMFDY',
        'KALYS',
        'KTLYG',
        'SIFNT',
        'VTNFRS',
        'TSENNYY',
        'TSESDYY',
        'TTSDR',
        'STGYPT',
        'VGISA'
    ]

    CDR2a = ['NALDGL',
    'NVLDGL',
    'GSKP',
    'YITGDNLV',
    'GYKTK',
    'IFSNMDM',
    'IRENEKE',
    'MYSAGYE',
    'YFSGDPLV',
    'YTSAATLV',
    'YFSGDTLV',
    'YTSAATLV',
    'YLSGSTLV',
    'DLTEATQV',
    'AMKANDK',
    'ATKADDK',
    'MTFSENT',
    'IQSSQKE',
    'VYSSGN',
    'IYSNGD',
    'TYSSGN',
    'IRSNVGE',
    'IRSNMDK',
    'QGSYDQQN',
    'HISR',
    'IRSNERE',
    'SSENQE',
    'RNSFDEQN',
    'LYSAGEE',
    'IQSSQRE',
    'IPSGT',
    'IRPDVSE',
    'MTLNGDE',
    'LVKSGEV',
    'GLKNN',
    'GLTSN',
    'VVTGGEV',
    'ISSIKDK',
    'LLKGGEQ',
    'LQKGGEE',
    'LYKAGEL',
    'LTSSGIE',
    'QEAYKQQN',
    'QEAYKQQN',
    'LLSNGAV',
    'ETME',
    'LSSGK']

    CDR1b = ['GHDS',
    'SNHLY',
    'LGHDT',
    'LGHNA',
    'MGHRA',
    'LGHNA',
    'LGHNA',
    'SGHRS',
    'SGHSS',
    'SGHNT',
    'SGHKS',
    'SGHDT',
    'SGHTS',
    'SGHTS',
    'MNHNS',
    'MNHEY',
    'MNHEY',
    'MRHNA',
    'MNHEY',
    'MNHNY',
    'MNHEY',
    'MNHGY',
    'MNHGY',
    'SGHNA',
    'SGHTA',
    'SGHTA',
    'SGHVT',
    'SGHVS',
    'SSHAT',
    'SGHVS',
    'SEHNR',
    'SGDLS',
    'WNHNN',
    'WSHSY',
    'ENHRY',
    'SGHAT',
    'SGHAT',
    'SGHNT',
    'SGHND',
    'FGHNF',
    'SGHNS',
    'SGHDY',
    'LGHNT',
    'PRHDT',
    'SGHDN',
    'LNHNV',
    'KGHSY',
    'SGHMF',
    'KGHSH',
    'LNHDA',
    'DFQATT',
    'KAHSY',
    'KGHTF',
    'KGHDR',
    'MGHDK',
    'MNHVT',
    'MNHEY',
    'MDHEN',
    'SQVTM',
    'GTSNPN']

    CDR2b = ['YNCKEF',
    'FYNNEI',
    'YNNKEL',
    'YSNKEP',
    'YSYEKL',
    'YNFKEQ',
    'YSLEER',
    'YFSETQ',
    'YANELR',
    'YYREEE',
    'YYEKEE',
    'YYEEEE',
    'YYEKEE',
    'YDEGEE',
    'SASEGT',
    'SVGEGT',
    'SVGEGT',
    'SNTAGT',
    'SVGAGI',
    'SVGAGI',
    'SVAAAL',
    'SAAAGT',
    'SVAAGI',
    'FQGKDA',
    'FQGNSA',
    'FQGTGA',
    'SQSDAQ',
    'FNYEAQ',
    'FNYEAQ',
    'FQNEAQ',
    'FQNEAQ',
    'YYNGEE',
    'SYGVQD',
    'SAAADI',
    'SYGVKD',
    'FQDESV',
    'FQNNGV',
    'YENEEA',
    'FCSWTL',
    'FRS*SI',
    'FNNNVP',
    'FNNNVP',
    'FRNRAP',
    'FYEKMQ',
    'FVKESK',
    'YYDKDF',
    'FQNENV',
    'FQYQNI',
    'LQKENI',
    'SQIVND',
    'SNEGSKA',
    'FQNEEL',
    'FQNEQV',
    'SFDVKD',
    'SYGVNS',
    'SPGTGS',
    'SMNVEV',
    'SYDVKM',
    'ANQGSEA',
    'SVGIG']

    TRAV_KEYS = ['TRAV1-1',
    'TRAV1-2',
    'TRAV2',
    'TRAV3',
    'TRAV4',
    'TRAV5',
    'TRAV6',
    'TRAV7',
    'TRAV8-1',
    'TRAV8-2',
    'TRAV8-3',
    'TRAV8-4',
    'TRAV8-6',
    'TRAV8-7',
    'TRAV9-1',
    'TRAV9-2',
    'TRAV10',
    'TRAV11',
    'TRAV12-1',
    'TRAV12-2',
    'TRAV12-3',
    'TRAV13-1',
    'TRAV13-2',
    'TRAV14DV4',
    'TRAV16',
    'TRAV17',
    'TRAV18',
    'TRAV19',
    'TRAV20',
    'TRAV21',
    'TRAV22',
    'TRAV23DV6',
    'TRAV24',
    'TRAV25',
    'TRAV26-1',
    'TRAV26-2',
    'TRAV27',
    'TRAV29DV5',
    'TRAV30',
    'TRAV34',
    'TRAV35',
    'TRAV36DV7',
    'TRAV38-1',
    'TRAV38-2DV8',
    'TRAV39',
    'TRAV40',
    'TRAV41',]

    TRBV_KEYS = ['TRBV1',
    'TRBV2',
    'TRBV3-1',
    'TRBV3-2',
    'TRBV4-1',
    'TRBV4-2',
    'TRBV4-3',
    'TRBV5-1',
    'TRBV5-3',
    'TRBV5-4',
    'TRBV5-5',
    'TRBV5-6',
    'TRBV5-7',
    'TRBV5-8',
    'TRBV6-1',
    'TRBV6-2',
    'TRBV6-3',
    'TRBV6-4',
    'TRBV6-5',
    'TRBV6-6',
    'TRBV6-7',
    'TRBV6-8',
    'TRBV6-9',
    'TRBV7-1',
    'TRBV7-2',
    'TRBV7-3',
    'TRBV7-4',
    'TRBV7-6',
    'TRBV7-7',
    'TRBV7-8',
    'TRBV7-9',
    'TRBV9',
    'TRBV10-1',
    'TRBV10-2',
    'TRBV10-3',
    'TRBV11-1',
    'TRBV11-2',
    'TRBV11-3',
    'TRBV12-1',
    'TRBV12-2',
    'TRBV12-3',
    'TRBV12-4',
    'TRBV12-5',
    'TRBV13',
    'TRBV14',
    'TRBV15',
    'TRBV16',
    'TRBV17',
    'TRBV18',
    'TRBV19',
    'TRBV20-1',
    'TRBV21-1',
    'TRBV23-1',
    'TRBV24-1',
    'TRBV25-1',
    'TRBV26',
    'TRBV27',
    'TRBV28',
    'TRBV29-1',
    'TRBV30',]

    TRAV2CDR1a = dict(zip(TRAV_KEYS, CDR1a))
    TRAV2CDR2a = dict(zip(TRAV_KEYS, CDR2a))
    TRBV2CDR1b = dict(zip(TRBV_KEYS, CDR1b))
    TRBV2CDR2b = dict(zip(TRBV_KEYS, CDR2b))

@dataclass
class TCRAnnotations:
    human = HumanTCRAnnotations
    mouse = MouseTCRAnnotations


class TCRConstructor:
    def __init__(
        self, 
        alpha_sequence: Optional[str] = None, 
        beta_sequence: Optional[str] = None,
        species: Literal['human','mouse'] = 'human',
        alpha_cdr3: Optional[str] = None,
        beta_cdr3: Optional[str] = None,
        alpha_v_gene: Optional[str] = None,
        alpha_j_gene: Optional[str] = None,
        beta_v_gene: Optional[str] = None,
        beta_j_gene: Optional[str] = None,
        kalign_binary_path: str = None,
        alpha_mmcif_feature_dict: Optional[Mapping[str, np.ndarray]] = None,
        beta_mmcif_feature_dict: Optional[Mapping[str, np.ndarray]] = None
    ):
        """
        TCR class for aligning alpha and beta chains and extracting features

        :param alpha_sequence: alpha chain amino acid sequence
        :param beta_sequence: beta chain amino acid sequence
        :param species: species of TCR
        :param alpha_cdr3: alpha chain CDR3 amino acid sequence
        :param beta_cdr3: beta chain CDR3 amino acid sequence
        :param alpha_v_gene: alpha chain V gene name
        :param alpha_j_gene: alpha chain J gene name
        :param beta_v_gene: beta chain V gene name
        :param beta_j_gene: beta chain J gene name
        :param alignment_args: arguments for aligning alpha and beta chains
        :param alpha_mmcif_feature_dict: dictionary of alpha chain features
        :param beta_mmcif_feature_dict: dictionary of beta chain features
        """
        self.alpha_sequence = alpha_sequence
        self.beta_sequence = beta_sequence
        self.alpha_cdr3 = alpha_cdr3 
        self.beta_cdr3 = beta_cdr3
        self.alpha_v_gene = alpha_v_gene
        self.alpha_j_gene = alpha_j_gene
        self.beta_v_gene = beta_v_gene
        self.beta_j_gene = beta_j_gene
        self.species = species
        self.alpha_mmcif_feature_dict = alpha_mmcif_feature_dict
        self.beta_mmcif_feature_dict = beta_mmcif_feature_dict

        if self.alpha_sequence and self.beta_sequence:
            self.impute_j_gene()
        
        if self.alpha_sequence:
            self.alpha_cdr3 = self.fetch_cdr3a(self.alpha_sequence)
        if self.beta_sequence:
            self.beta_cdr3 = self.fetch_cdr3b(self.beta_sequence)
        
        self.align_v_genes(kalign_binary_path = kalign_binary_path)

        if self.alpha_cdr3:
            self.alpha_sequence = self.fill_up_cdr3(
                self.alpha_cdr3,
                TRAV_SEQUENCES[self.species][self.alpha_v_gene],
                TRAJ_SEQUENCES[self.species][self.alpha_j_gene]
            )
        if self.beta_cdr3:
            self.beta_sequence = self.fill_up_cdr3(
                self.beta_cdr3,
                TRBV_SEQUENCES[self.species][self.beta_v_gene],
                TRBJ_SEQUENCES[self.species][self.beta_j_gene]
            )
        
            # self.align_v_genes(kalign_binary_path = kalign_binary_path)

    def fill_up_cdr3(self, cdr3: str, v_gene: str, j_gene: str):
        """
        Fill up CDR3 sequence with V and J gene sequences

        :param cdr3: CDR3 amino acid sequence
        :param v_gene: V gene amino acid sequence
        :param j_gene: J gene amino acid sequence
        """
        overlap = ''
        fl = False
        for n in range(len(j_gene)):
            if fl:
                break
            for i in range(1,n):
                if cdr3.endswith(j_gene[i:n+1]):
                    overlap = j_gene[i-1:n+1]
                    fl = True
                    break
        cdr3 = cdr3 + j_gene[j_gene.index(overlap)+len(overlap):]
        fl = False
        for n in range(len(v_gene), -1, -1):
            if fl:
                break
            for i in range(1,n):
                if cdr3.startswith(v_gene[n-i:n]):
                    overlap = v_gene[n-i:n]
                    fl = True
                    break
                
        cdr3 = v_gene[:v_gene.index(overlap)] + cdr3
        return cdr3
    
    def fetch_cdr3a(self, seq):
        seq = seq[:seq.index(self.alpha_j_motif)+len(self.alpha_j_motif)]
        seq = seq[::-1]
        cdr3 = ''
        fl = False
        for e,i in enumerate(seq):
            if not fl and i == 'F' or i == 'W' or i == 'L':
                fl = True
            if fl and i == 'F' and e < len(self.beta_j_motif):
                cdr3 = ''
            if fl and i == 'C':
                fl = False
                cdr3 = f'C{cdr3}'
                break
            if fl:
                cdr3 = i + cdr3
        return cdr3

    def fetch_cdr3b(self, seq):
        seq = seq[:seq.index(self.beta_j_motif)+len(self.beta_j_motif)]
        seq = seq[::-1]
        cdr3 = ''
        fl = False
        for e,i in enumerate(seq):
            if not fl and i == 'F' or i == 'W' or i == 'L':
                fl = True
            if fl and i == 'F' and e < len(self.beta_j_motif):
                cdr3 = ''
            if fl and i == 'C':
                fl = False
                cdr3 = f'C{cdr3}'
                break
            if fl:
                cdr3 = i + cdr3
        return cdr3
    

    @classmethod 
    def from_tcr_string(cls, tcr_string: str):
        """
        Create TCR object from string

        :param tcr_string: string of TCR. Example "human TRA:TRAV21=CAVSNF=TRAJ21 TRB:TRBV9=CASSVATYSTDTQYF=TRBJ2-3"
        """
        if 'TRA:' in tcr_string and 'TRB:' in tcr_string:
            beta = tcr_string.split(" ")[-1].split('TRB:')[1]
            alpha = tcr_string.split(" ")[1].split('TRA:')[1]
            species = tcr_string.split(" ")[0]
            alpha_v_gene, alpha_cdr3, alpha_j_gene = alpha.split('=')
            beta_v_gene, beta_cdr3, beta_j_gene = beta.split('=')
        elif 'TRA:' in tcr_string:
            alpha = tcr_string.split(" ")[1].split('TRA:')[1]
            species = tcr_string.split(" ")[0]
            alpha_v_gene, alpha_cdr3, alpha_j_gene = alpha.split('=')
            beta_v_gene, beta_cdr3, beta_j_gene = None, None, None
        elif 'TRB:' in tcr_string:
            beta = tcr_string.split(" ")[-1].split('TRB:')[1]
            species = tcr_string.split(" ")[0]
            beta_v_gene, beta_cdr3, beta_j_gene = beta.split('=')
            alpha_v_gene, alpha_cdr3, alpha_j_gene = None, None, None
        else:
            raise ValueError("Invalid TCR string")
        
        return cls(
            alpha_sequence = None,
            beta_sequence = None,
            species = species,
            alpha_cdr3 = alpha_cdr3,
            beta_cdr3 = beta_cdr3,
            alpha_v_gene = alpha_v_gene,
            alpha_j_gene = alpha_j_gene,
            beta_v_gene = beta_v_gene,
            beta_j_gene = beta_j_gene,
        )
    

    def pseudo_sequence(self, place_trb_before_tra: bool = False):
        """
        Get pseudo sequence of TCR
        """
        if self.species == 'human':
            if place_trb_before_tra:
                return ':'.join([
                    HumanTCRAnnotations.TRBV2CDR1b[self.beta_v_gene] if self.beta_v_gene else '',
                    HumanTCRAnnotations.TRBV2CDR2b[self.beta_v_gene] if self.beta_v_gene else '',
                    self.beta_cdr3 if self.beta_cdr3 else '',
                    HumanTCRAnnotations.TRAV2CDR1a[self.alpha_v_gene] if self.alpha_v_gene else '',
                    HumanTCRAnnotations.TRAV2CDR2a[self.alpha_v_gene] if self.alpha_v_gene else '',
                    self.alpha_cdr3 if self.alpha_cdr3 else '',
                ])
            else:
                return ':'.join([
                    HumanTCRAnnotations.TRAV2CDR1a[self.alpha_v_gene] if self.alpha_v_gene else '',
                    HumanTCRAnnotations.TRAV2CDR2a[self.alpha_v_gene] if self.alpha_v_gene else '',
                    self.alpha_cdr3 if self.alpha_cdr3 else '',
                    HumanTCRAnnotations.TRBV2CDR1b[self.beta_v_gene] if self.beta_v_gene else '',
                    HumanTCRAnnotations.TRBV2CDR2b[self.beta_v_gene] if self.beta_v_gene else '',
                    self.beta_cdr3 if self.beta_cdr3 else ''
                ])
        elif self.species == 'mouse':
            if place_trb_before_tra:
                return ':'.join([
                    MouseTCRAnnotations.TRBV2CDR1b[self.beta_v_gene] if self.beta_v_gene else '',
                    MouseTCRAnnotations.TRBV2CDR2b[self.beta_v_gene] if self.beta_v_gene else '',
                    self.beta_cdr3 if self.beta_cdr3 else '',
                    MouseTCRAnnotations.TRAV2CDR1a[self.alpha_v_gene] if self.alpha_v_gene else '',
                    MouseTCRAnnotations.TRAV2CDR2a[self.alpha_v_gene] if self.alpha_v_gene else '',
                    self.alpha_cdr3 if self.alpha_cdr3 else '',
                ])
            else:
                return ':'.join([
                    MouseTCRAnnotations.TRAV2CDR1a[self.alpha_v_gene] if self.alpha_v_gene else '',
                    MouseTCRAnnotations.TRAV2CDR2a[self.alpha_v_gene] if self.alpha_v_gene else '',
                    self.alpha_cdr3 if self.alpha_cdr3 else '',
                    MouseTCRAnnotations.TRBV2CDR1b[self.beta_v_gene] if self.beta_v_gene else '',
                    MouseTCRAnnotations.TRBV2CDR2b[self.beta_v_gene] if self.beta_v_gene else '',
                    self.beta_cdr3 if self.beta_cdr3 else ''
                ])
    
    def align_v_genes(self, kalign_binary_path):
        if self.alpha_sequence is not None:
            v_sequences = TRAV_SEQUENCES[self.species]
            uid = str(uuid1())
            tmp_fasta = os.path.join("/tmp", f'{uid}.fasta')
            with open(tmp_fasta, "w+") as f:
                f.write('>query\n' + self.alpha_sequence + '\n')
                for k,v in v_sequences.items():
                    f.write(f'>{k}\n{v}\n')

            cmd = [
                    kalign_binary_path,
                    "-i",
                    tmp_fasta,
                    "-o",
                    tmp_fasta.replace('fasta','kaln'),
                    "-format",
                    "fasta",
            ]
            process = subprocess.Popen(
                cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
            )
            stdout, stderr = process.communicate()
            retcode = process.wait()
            alignment = SeqIO.parse(tmp_fasta.replace('fasta','kaln'), 'fasta')
            alignment = list(map(lambda x: (x.description, str(x.seq)), alignment))
            alpha_sequence = alignment[0][1]
            alignment = sorted(list(map(lambda x: (x[0],x[1], calculate_blosum62_distance(alpha_sequence, x[1])), alignment[1:])), key=lambda x: -x[-1])
            most_likely_alpha_v_gene = alignment[0][0]
            most_likely_alpha_v_sequence = alignment[0][1]

            self.alpha_v_gene = most_likely_alpha_v_gene
            self._alpha_aligned_sequence = alpha_sequence
            self._alpha_v_sequence = most_likely_alpha_v_sequence

            _alpha_alignment = list(
                filter(
                    lambda x: x[0] != '-' or x[1] != '-',
                    zip(self._alpha_v_sequence, self._alpha_aligned_sequence),
                )
            )
            self._alpha_v_sequence = ''.join(list(map(lambda x: x[0], _alpha_alignment)))
            self._alpha_aligned_sequence = ''.join(list(map(lambda x: x[1], _alpha_alignment)))

        if self.beta_sequence is not None:
            v_sequences = TRBV_SEQUENCES[self.species]
            os.system(f"rm {tmp_fasta}")
            uid = str(uuid1())
            tmp_fasta = os.path.join("/tmp", f'{uid}.fasta')
            with open(tmp_fasta, "w+") as f:
                f.write('>query\n' + self.beta_sequence + '\n')
                for k,v in v_sequences.items():
                    f.write(f'>{k}\n{v}\n')
            cmd = [
                    kalign_binary_path,
                    "-i",
                    tmp_fasta,
                    "-o",
                    tmp_fasta.replace('fasta','kaln'),
                    "-format",
                    "fasta",
            ]
            process = subprocess.Popen(
                cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
            )
            stdout, stderr = process.communicate()
            retcode = process.wait()
            alignment = SeqIO.parse(tmp_fasta.replace('fasta','kaln'), 'fasta')
            alignment = list(map(lambda x: (x.description, str(x.seq)), alignment))
            beta_sequence = alignment[0][1]
            alignment = sorted(list(map(lambda x: (x[0],x[1], calculate_blosum62_distance(beta_sequence, x[1])), alignment[1:])), key=lambda x: -x[-1])
            os.system(f"rm {tmp_fasta}")
            most_likely_beta_v_gene = alignment[0][0]
            most_likely_beta_v_sequence = alignment[0][1]
        
        
            self.beta_v_gene = most_likely_beta_v_gene
            self._beta_aligned_sequence = beta_sequence
            self._beta_v_sequence = most_likely_beta_v_sequence

            _beta_alignment = list(
                filter(
                    lambda x: x[0] != '-' or x[1] != '-',
                    zip(self._beta_v_sequence, self._beta_aligned_sequence),
                )
            )
            self._beta_v_sequence = ''.join(list(map(lambda x: x[0], _beta_alignment)))
            self._beta_aligned_sequence = ''.join(list(map(lambda x: x[1], _beta_alignment)))
        
    def impute_j_gene(self):
        def get_overlap(s1, s2):
            import difflib
            s = difflib.SequenceMatcher(None, s1, s2)
            pos_a, pos_b, size = s.find_longest_match(0, len(s1), 0, len(s2))
            return s1[pos_a:pos_a+size]
        l = 0
        if self.alpha_sequence is not None:
            for k,v in TRAJ_SEQUENCES[self.species].items():
                overlap = get_overlap(self.alpha_sequence, v)
                if len(overlap) > l:
                    l = len(overlap)
                    self.alpha_j_gene = k
                    self.alpha_j_motif = overlap
        l = 0
        if self.beta_sequence is not None:
            for k,v in TRBJ_SEQUENCES[self.species].items():
                overlap = get_overlap(self.beta_sequence, v)
                if len(overlap) > l:
                    l = len(overlap)
                    self.beta_j_gene = k
                    self.beta_j_motif = overlap

    def to_string(self):
        return f'{self.species} TRA:{self.alpha_v_gene}={self.alpha_cdr3}={self.alpha_j_gene} TRB:{self.beta_v_gene}={self.beta_cdr3}={self.beta_j_gene}'

    def __repr__(self) -> str:
        return f"TCR object from {self.species}\n" + \
            f"    TRAV: {self.alpha_v_gene}\n" + \
            f"    CDR3a: {self.alpha_cdr3}\n" + \
            f"    TRAJ: {self.alpha_j_gene}\n" + \
            f"    TRBV: {self.beta_v_gene}\n" + \
            f"    CDR3b: {self.beta_cdr3}\n" + \
            f"    TRBJ: {self.beta_j_gene}\n"


def get_overlap(s1, s2):
    import difflib
    s = difflib.SequenceMatcher(None, s1, s2)
    pos_a, pos_b, size = s.find_longest_match(0, len(s1), 0, len(s2))
    return s1[pos_a:pos_a+size]


def getCDR3amr(cdr3a, v, j, species: Literal['human','mouse'] = "human"):
    if species == "human":
        vsequence = HumanTCRAnnotations.TRAV_CDR3_REGION_SEQUENCE[v]
        jsequence = HumanTCRAnnotations.TRAJ_CDR3_REGION_SEQUENCE[j]
    else:
        vsequence = MouseTCRAnnotations.TRAV_CDR3_REGION_SEQUENCE[v]
        jsequence = MouseTCRAnnotations.TRAJ_CDR3_REGION_SEQUENCE[j]
    vmotif = get_overlap(cdr3a, vsequence)
    jmotif = get_overlap(cdr3a, jsequence)
    return cdr3a[cdr3a.index(vmotif)+len(vmotif):cdr3a.index(jmotif)]


def getCDR3bmr(cdr3b, v, j, species: Literal['human','mouse'] = "human"):
    if species == "human":
        vsequence = HumanTCRAnnotations.TRBV_CDR3_REGION_SEQUENCE[v]
        jsequence = HumanTCRAnnotations.TRBJ_CDR3_REGION_SEQUENCE[j]
    else:
        vsequence = MouseTCRAnnotations.TRBV_CDR3_REGION_SEQUENCE[v]
        jsequence = MouseTCRAnnotations.TRBJ_CDR3_REGION_SEQUENCE[j]
    vmotif = get_overlap(cdr3b, vsequence)
    jmotif = get_overlap(cdr3b, jsequence)
    return cdr3b[cdr3b.index(vmotif)+len(vmotif):cdr3b.index(jmotif)]

def getCDR3amr_indices(cdr3a, v, j, species: Literal['human','mouse'] = "human"):
    if species == "human":
        vsequence = HumanTCRAnnotations.TRAV_CDR3_REGION_SEQUENCE[v]
        jsequence = HumanTCRAnnotations.TRAJ_CDR3_REGION_SEQUENCE[j]
    else:
        vsequence = MouseTCRAnnotations.TRAV_CDR3_REGION_SEQUENCE[v]
        jsequence = MouseTCRAnnotations.TRAJ_CDR3_REGION_SEQUENCE[j]
    vmotif = get_overlap(cdr3a, vsequence)
    jmotif = get_overlap(cdr3a, jsequence)
    return cdr3a.index(vmotif)+len(vmotif),cdr3a.index(jmotif)


def getCDR3bmr_indices(cdr3b, v, j, species: Literal['human','mouse'] = "human"):
    if species == "human":
        vsequence = HumanTCRAnnotations.TRBV_CDR3_REGION_SEQUENCE[v]
        jsequence = HumanTCRAnnotations.TRBJ_CDR3_REGION_SEQUENCE[j]
    else:
        vsequence = MouseTCRAnnotations.TRBV_CDR3_REGION_SEQUENCE[v]
        jsequence = MouseTCRAnnotations.TRBJ_CDR3_REGION_SEQUENCE[j]
    vmotif = get_overlap(cdr3b, vsequence)
    jmotif = get_overlap(cdr3b, jsequence)
    return cdr3b.index(vmotif)+len(vmotif),cdr3b.index(jmotif)

def encode_mr_mask(cdr3a, cdr3b, va_gene, ja_gene, vb_gene, jb_gene, length=48, species="human"):
    a = np.zeros(length)
    i,j = getCDR3amr_indices(cdr3a, va_gene, ja_gene, species=species)
    a[i+2:j+2] = 1
    b = np.zeros(length)
    i,j = getCDR3bmr_indices(cdr3b, vb_gene, jb_gene, species=species)
    b[i+2:j+2] = 1
    return np.hstack([a,b])


TRAV2INDEX = AttrDict({
    'human': {k: v for k, v in zip(HumanTCRAnnotations.TRAV_GENES, range(len(HumanTCRAnnotations.IMGT_TRAV)))},
    'mouse': {k: v for k, v in zip(MouseTCRAnnotations.TRAV_GENES, range(len(MouseTCRAnnotations.TRAV_GENES)))}
})

TRAJ2INDEX = AttrDict({
    'human': {k: v for k, v in zip(HumanTCRAnnotations.TRAJ_GENES, range(len(HumanTCRAnnotations.IMGT_TRAJ)))},
    'mouse': {k: v for k, v in zip(MouseTCRAnnotations.TRAJ_GENES, range(len(MouseTCRAnnotations.TRAJ_GENES)))}
})

TRBV2INDEX = AttrDict({
    'human': {k: v for k, v in zip(HumanTCRAnnotations.TRBV_GENES, range(len(HumanTCRAnnotations.IMGT_TRBV)))},
    'mouse': {k: v for k, v in zip(MouseTCRAnnotations.TRBV_GENES, range(len(MouseTCRAnnotations.TRBV_GENES)))}
})

TRBJ2INDEX = AttrDict({
    'human': {k: v for k, v in zip(HumanTCRAnnotations.TRBJ_GENES, range(len(HumanTCRAnnotations.IMGT_TRBJ)))},
    'mouse': {k: v for k, v in zip(MouseTCRAnnotations.TRBJ_GENES, range(len(MouseTCRAnnotations.TRBJ_GENES)))}
})

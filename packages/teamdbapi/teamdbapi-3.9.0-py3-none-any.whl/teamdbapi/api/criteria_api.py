# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teamdbapi.api_client import ApiClient


class CriteriaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_criteria_set(self, criteria_set, **kwargs):  # noqa: E501
        """Create a new Criteria set.  # noqa: E501

        Leave Id empty (00000000-0000-0000-0000-000000000000). LastUpdateDateUtc, LastUpdateUser will be automatically set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_criteria_set(criteria_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CriteriaSet criteria_set: The criteria set to create (required)
        :return: CriteriaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_criteria_set_with_http_info(criteria_set, **kwargs)  # noqa: E501
        else:
            (data) = self.create_criteria_set_with_http_info(criteria_set, **kwargs)  # noqa: E501
            return data

    def create_criteria_set_with_http_info(self, criteria_set, **kwargs):  # noqa: E501
        """Create a new Criteria set.  # noqa: E501

        Leave Id empty (00000000-0000-0000-0000-000000000000). LastUpdateDateUtc, LastUpdateUser will be automatically set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_criteria_set_with_http_info(criteria_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CriteriaSet criteria_set: The criteria set to create (required)
        :return: CriteriaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['criteria_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_criteria_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'criteria_set' is set
        if self.api_client.client_side_validation and ('criteria_set' not in params or
                                                       params['criteria_set'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `criteria_set` when calling `create_criteria_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'criteria_set' in params:
            body_params = params['criteria_set']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/criteriaset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CriteriaSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_criteria(self, **kwargs):  # noqa: E501
        """Get all criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_criteria(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Criteria]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_criteria_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_criteria_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_criteria_with_http_info(self, **kwargs):  # noqa: E501
        """Get all criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_criteria_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Criteria]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_criteria" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/criteria', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Criteria]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_criteria_set(self, **kwargs):  # noqa: E501
        """Get all criteria sets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_criteria_set(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CriteriaSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_criteria_set_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_criteria_set_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_criteria_set_with_http_info(self, **kwargs):  # noqa: E501
        """Get all criteria sets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_criteria_set_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CriteriaSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_criteria_set" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/criteriaset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CriteriaSet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_criteria(self, criteria_id, **kwargs):  # noqa: E501
        """Get a criteria from its unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_criteria(criteria_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str criteria_id: The unique identifier of the criteria to retrieve. (required)
        :return: Criteria
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_criteria_with_http_info(criteria_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_criteria_with_http_info(criteria_id, **kwargs)  # noqa: E501
            return data

    def get_criteria_with_http_info(self, criteria_id, **kwargs):  # noqa: E501
        """Get a criteria from its unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_criteria_with_http_info(criteria_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str criteria_id: The unique identifier of the criteria to retrieve. (required)
        :return: Criteria
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['criteria_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_criteria" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'criteria_id' is set
        if self.api_client.client_side_validation and ('criteria_id' not in params or
                                                       params['criteria_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `criteria_id` when calling `get_criteria`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'criteria_id' in params:
            path_params['criteriaId'] = params['criteria_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/criteria/{criteriaId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Criteria',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_criteria_set(self, criteriaset_id, **kwargs):  # noqa: E501
        """Get a criteria set given by its unique identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_criteria_set(criteriaset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str criteriaset_id: The criteria set unique identifier (required)
        :return: CriteriaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_criteria_set_with_http_info(criteriaset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_criteria_set_with_http_info(criteriaset_id, **kwargs)  # noqa: E501
            return data

    def get_criteria_set_with_http_info(self, criteriaset_id, **kwargs):  # noqa: E501
        """Get a criteria set given by its unique identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_criteria_set_with_http_info(criteriaset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str criteriaset_id: The criteria set unique identifier (required)
        :return: CriteriaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['criteriaset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_criteria_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'criteriaset_id' is set
        if self.api_client.client_side_validation and ('criteriaset_id' not in params or
                                                       params['criteriaset_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `criteriaset_id` when calling `get_criteria_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'criteriaset_id' in params:
            path_params['criteriasetId'] = params['criteriaset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/criteriaset/{criteriasetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CriteriaSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_criteria_set(self, criteria_set, **kwargs):  # noqa: E501
        """Upate an existing Criteria set.  LastUpdateDateUtc, LastUpdateUser will be automatically set.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_criteria_set(criteria_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CriteriaSet criteria_set: The criteria set to update (required)
        :return: CriteriaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_criteria_set_with_http_info(criteria_set, **kwargs)  # noqa: E501
        else:
            (data) = self.update_criteria_set_with_http_info(criteria_set, **kwargs)  # noqa: E501
            return data

    def update_criteria_set_with_http_info(self, criteria_set, **kwargs):  # noqa: E501
        """Upate an existing Criteria set.  LastUpdateDateUtc, LastUpdateUser will be automatically set.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_criteria_set_with_http_info(criteria_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CriteriaSet criteria_set: The criteria set to update (required)
        :return: CriteriaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['criteria_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_criteria_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'criteria_set' is set
        if self.api_client.client_side_validation and ('criteria_set' not in params or
                                                       params['criteria_set'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `criteria_set` when calling `update_criteria_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'criteria_set' in params:
            body_params = params['criteria_set']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/criteriaset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CriteriaSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

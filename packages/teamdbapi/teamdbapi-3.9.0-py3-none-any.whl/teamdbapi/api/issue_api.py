# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teamdbapi.api_client import ApiClient


class IssueApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_issue(self, issue_to_create, **kwargs):  # noqa: E501
        """Create a new Issue. Field \"IssueId\" must be 00000000-0000-0000-0000-000000000000.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_issue(issue_to_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Issue issue_to_create: The Issue to create (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_issue_with_http_info(issue_to_create, **kwargs)  # noqa: E501
        else:
            (data) = self.create_issue_with_http_info(issue_to_create, **kwargs)  # noqa: E501
            return data

    def create_issue_with_http_info(self, issue_to_create, **kwargs):  # noqa: E501
        """Create a new Issue. Field \"IssueId\" must be 00000000-0000-0000-0000-000000000000.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_issue_with_http_info(issue_to_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Issue issue_to_create: The Issue to create (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_to_create']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_issue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_to_create' is set
        if self.api_client.client_side_validation and ('issue_to_create' not in params or
                                                       params['issue_to_create'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `issue_to_create` when calling `create_issue`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'issue_to_create' in params:
            body_params = params['issue_to_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/issue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Issue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_custom_fields(self, workflow_id, **kwargs):  # noqa: E501
        """Get all custom fields avaliable for a specific workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_custom_fields(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique identifier of the workflow from which you wish to retrieve custom fields. (required)
        :return: list[IssueCustomFieldValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_custom_fields_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_custom_fields_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def get_all_custom_fields_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """Get all custom fields avaliable for a specific workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_custom_fields_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique identifier of the workflow from which you wish to retrieve custom fields. (required)
        :return: list[IssueCustomFieldValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if self.api_client.client_side_validation and ('workflow_id' not in params or
                                                       params['workflow_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_id` when calling `get_all_custom_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflowId'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/workflows/{workflowId}/customfields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IssueCustomFieldValue]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_issue_priorities(self, workflow_id, **kwargs):  # noqa: E501
        """Get a list of all available priorities for a workflow.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_priorities(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique identifier of the workflow from which you wish to retrieve priorities. (required)
        :return: list[IssuePriority]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_issue_priorities_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_issue_priorities_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def get_all_issue_priorities_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """Get a list of all available priorities for a workflow.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_priorities_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique identifier of the workflow from which you wish to retrieve priorities. (required)
        :return: list[IssuePriority]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_issue_priorities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if self.api_client.client_side_validation and ('workflow_id' not in params or
                                                       params['workflow_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_id` when calling `get_all_issue_priorities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflowId'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/workflows/{workflowId}/priorities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IssuePriority]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_issue_projects(self, **kwargs):  # noqa: E501
        """Get a list of all Issue projects.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_projects(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IssueProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_issue_projects_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_issue_projects_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_issue_projects_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all Issue projects.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_projects_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IssueProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_issue_projects" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IssueProject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_issue_sectors(self, workflow_id, **kwargs):  # noqa: E501
        """Get a list of all available sectors for a workflow.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_sectors(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique identifier of the workflow from which you wish to retrieve sectors. (required)
        :return: list[IssueSector]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_issue_sectors_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_issue_sectors_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def get_all_issue_sectors_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """Get a list of all available sectors for a workflow.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_sectors_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique identifier of the workflow from which you wish to retrieve sectors. (required)
        :return: list[IssueSector]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_issue_sectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if self.api_client.client_side_validation and ('workflow_id' not in params or
                                                       params['workflow_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_id` when calling `get_all_issue_sectors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflowId'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/workflows/{workflowId}/sectors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IssueSector]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_issue_status(self, workflow_id, **kwargs):  # noqa: E501
        """Get a list of all available status for a workflow.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_status(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique identifier of the workflow from which you wish to retrieve status. (required)
        :return: list[IssueStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_issue_status_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_issue_status_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def get_all_issue_status_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """Get a list of all available status for a workflow.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_status_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique identifier of the workflow from which you wish to retrieve status. (required)
        :return: list[IssueStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_issue_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if self.api_client.client_side_validation and ('workflow_id' not in params or
                                                       params['workflow_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_id` when calling `get_all_issue_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflowId'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/workflows/{workflowId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IssueStatus]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_issue_types(self, workflow_id, **kwargs):  # noqa: E501
        """Get a list of all available types for a workflow.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_types(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique identifier of the workflow from which you wish to retrieve types. (required)
        :return: list[IssueType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_issue_types_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_issue_types_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def get_all_issue_types_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """Get a list of all available types for a workflow.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_types_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique identifier of the workflow from which you wish to retrieve types. (required)
        :return: list[IssueType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_issue_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if self.api_client.client_side_validation and ('workflow_id' not in params or
                                                       params['workflow_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_id` when calling `get_all_issue_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflowId'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/workflows/{workflowId}/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IssueType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_issue_workflows(self, **kwargs):  # noqa: E501
        """Get a list of all Issue workflows.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_workflows(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IssueWorkflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_issue_workflows_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_issue_workflows_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_issue_workflows_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all Issue workflows.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_workflows_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IssueWorkflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_issue_workflows" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/workflows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IssueWorkflow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_issues(self, **kwargs):  # noqa: E501
        """Get the list of all Issues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issues(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Issue]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_issues_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_issues_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_issues_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of all Issues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issues_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Issue]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_issues" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/issues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Issue]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_issue(self, **kwargs):  # noqa: E501
        """Get the current Issue.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_issue(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_issue_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_current_issue_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_current_issue_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current Issue.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_issue_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_issue" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/issue/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Issue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_issue(self, issue_id, **kwargs):  # noqa: E501
        """Get an Issue via its id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue(issue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the Issue you want to retrieve. (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_issue_with_http_info(issue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_issue_with_http_info(issue_id, **kwargs)  # noqa: E501
            return data

    def get_issue_with_http_info(self, issue_id, **kwargs):  # noqa: E501
        """Get an Issue via its id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_with_http_info(issue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the Issue you want to retrieve. (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_id' is set
        if self.api_client.client_side_validation and ('issue_id' not in params or
                                                       params['issue_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `issue_id` when calling `get_issue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_id' in params:
            path_params['issueId'] = params['issue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/issue/{issueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Issue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_issue_by_human_id(self, human_id, **kwargs):  # noqa: E501
        """Get an Issue via its human id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_by_human_id(human_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str human_id: The HumanId of the Issue you want to retrieve. (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_issue_by_human_id_with_http_info(human_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_issue_by_human_id_with_http_info(human_id, **kwargs)  # noqa: E501
            return data

    def get_issue_by_human_id_with_http_info(self, human_id, **kwargs):  # noqa: E501
        """Get an Issue via its human id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_by_human_id_with_http_info(human_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str human_id: The HumanId of the Issue you want to retrieve. (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['human_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_by_human_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'human_id' is set
        if self.api_client.client_side_validation and ('human_id' not in params or
                                                       params['human_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `human_id` when calling `get_issue_by_human_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'human_id' in params:
            path_params['humanId'] = params['human_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/issue/humanId/{humanId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Issue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_issue_children(self, issue_id, **kwargs):  # noqa: E501
        """Get an Issue children IDs list.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_children(issue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the Issue you want to retrieve the children from. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_issue_children_with_http_info(issue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_issue_children_with_http_info(issue_id, **kwargs)  # noqa: E501
            return data

    def get_issue_children_with_http_info(self, issue_id, **kwargs):  # noqa: E501
        """Get an Issue children IDs list.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_children_with_http_info(issue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the Issue you want to retrieve the children from. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_id' is set
        if self.api_client.client_side_validation and ('issue_id' not in params or
                                                       params['issue_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `issue_id` when calling `get_issue_children`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_id' in params:
            path_params['issueId'] = params['issue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/issue/{issueId}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_issue_parents(self, issue_id, **kwargs):  # noqa: E501
        """Get an Issue parents IDs list.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_parents(issue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the Issue you want to retrieve the parents from. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_issue_parents_with_http_info(issue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_issue_parents_with_http_info(issue_id, **kwargs)  # noqa: E501
            return data

    def get_issue_parents_with_http_info(self, issue_id, **kwargs):  # noqa: E501
        """Get an Issue parents IDs list.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_parents_with_http_info(issue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the Issue you want to retrieve the parents from. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_parents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_id' is set
        if self.api_client.client_side_validation and ('issue_id' not in params or
                                                       params['issue_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `issue_id` when calling `get_issue_parents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_id' in params:
            path_params['issueId'] = params['issue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/issue/{issueId}/parents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def link_child_issue(self, issue_id, child_issues_to_link, **kwargs):  # noqa: E501
        """[Command] Link a child issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.link_child_issue(issue_id, child_issues_to_link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the parent Issue to link from (required)
        :param list[str] child_issues_to_link: The list of Issues (identified by their IssueId) to link as child Issue (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.link_child_issue_with_http_info(issue_id, child_issues_to_link, **kwargs)  # noqa: E501
        else:
            (data) = self.link_child_issue_with_http_info(issue_id, child_issues_to_link, **kwargs)  # noqa: E501
            return data

    def link_child_issue_with_http_info(self, issue_id, child_issues_to_link, **kwargs):  # noqa: E501
        """[Command] Link a child issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.link_child_issue_with_http_info(issue_id, child_issues_to_link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the parent Issue to link from (required)
        :param list[str] child_issues_to_link: The list of Issues (identified by their IssueId) to link as child Issue (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id', 'child_issues_to_link']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method link_child_issue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_id' is set
        if self.api_client.client_side_validation and ('issue_id' not in params or
                                                       params['issue_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `issue_id` when calling `link_child_issue`")  # noqa: E501
        # verify the required parameter 'child_issues_to_link' is set
        if self.api_client.client_side_validation and ('child_issues_to_link' not in params or
                                                       params['child_issues_to_link'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `child_issues_to_link` when calling `link_child_issue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_id' in params:
            path_params['issueId'] = params['issue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'child_issues_to_link' in params:
            body_params = params['child_issues_to_link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/issue/{issueId}/link', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlink_child_issue(self, issue_id, child_issues_to_unlink, **kwargs):  # noqa: E501
        """[Command] Unlink a child issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_child_issue(issue_id, child_issues_to_unlink, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the parent Issue to unlink from (required)
        :param list[str] child_issues_to_unlink: The list of Issues (identified by their IssueId) to unlink from parent Issue (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlink_child_issue_with_http_info(issue_id, child_issues_to_unlink, **kwargs)  # noqa: E501
        else:
            (data) = self.unlink_child_issue_with_http_info(issue_id, child_issues_to_unlink, **kwargs)  # noqa: E501
            return data

    def unlink_child_issue_with_http_info(self, issue_id, child_issues_to_unlink, **kwargs):  # noqa: E501
        """[Command] Unlink a child issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_child_issue_with_http_info(issue_id, child_issues_to_unlink, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the parent Issue to unlink from (required)
        :param list[str] child_issues_to_unlink: The list of Issues (identified by their IssueId) to unlink from parent Issue (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id', 'child_issues_to_unlink']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlink_child_issue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_id' is set
        if self.api_client.client_side_validation and ('issue_id' not in params or
                                                       params['issue_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `issue_id` when calling `unlink_child_issue`")  # noqa: E501
        # verify the required parameter 'child_issues_to_unlink' is set
        if self.api_client.client_side_validation and ('child_issues_to_unlink' not in params or
                                                       params['child_issues_to_unlink'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `child_issues_to_unlink` when calling `unlink_child_issue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_id' in params:
            path_params['issueId'] = params['issue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'child_issues_to_unlink' in params:
            body_params = params['child_issues_to_unlink']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/issue/{issueId}/unlink', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_issue(self, issue_id, issue_to_update, **kwargs):  # noqa: E501
        """Update an Issue.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_issue(issue_id, issue_to_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the Issue you want to update (required)
        :param Issue issue_to_update: The updated Issue (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_issue_with_http_info(issue_id, issue_to_update, **kwargs)  # noqa: E501
        else:
            (data) = self.update_issue_with_http_info(issue_id, issue_to_update, **kwargs)  # noqa: E501
            return data

    def update_issue_with_http_info(self, issue_id, issue_to_update, **kwargs):  # noqa: E501
        """Update an Issue.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_issue_with_http_info(issue_id, issue_to_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id: The IssueId of the Issue you want to update (required)
        :param Issue issue_to_update: The updated Issue (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id', 'issue_to_update']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_issue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_id' is set
        if self.api_client.client_side_validation and ('issue_id' not in params or
                                                       params['issue_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `issue_id` when calling `update_issue`")  # noqa: E501
        # verify the required parameter 'issue_to_update' is set
        if self.api_client.client_side_validation and ('issue_to_update' not in params or
                                                       params['issue_to_update'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `issue_to_update` when calling `update_issue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_id' in params:
            path_params['issueId'] = params['issue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'issue_to_update' in params:
            body_params = params['issue_to_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/issue/{issueId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Issue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

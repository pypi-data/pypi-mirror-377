# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teamdbapi.api_client import ApiClient


class MountingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_current_mounting_revision(self, run_id, **kwargs):  # noqa: E501
        """Gets run-related mounting revision.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_mounting_revision(run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str run_id: The unique identifier of the run for which you wish to obtain the mounting revision. (required)
        :return: Mounting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_mounting_revision_with_http_info(run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_mounting_revision_with_http_info(run_id, **kwargs)  # noqa: E501
            return data

    def get_current_mounting_revision_with_http_info(self, run_id, **kwargs):  # noqa: E501
        """Gets run-related mounting revision.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_mounting_revision_with_http_info(run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str run_id: The unique identifier of the run for which you wish to obtain the mounting revision. (required)
        :return: Mounting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_mounting_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'run_id' is set
        if self.api_client.client_side_validation and ('run_id' not in params or
                                                       params['run_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `run_id` when calling `get_current_mounting_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/run/{runId}/mounting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mounting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mounting_revision_content(self, revision_id, **kwargs):  # noqa: E501
        """Gets the list of first-level components of a mounting revision.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mounting_revision_content(revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The unique identifier of the mounting revision for which you wish to obtain the list of first-level components. (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mounting_revision_content_with_http_info(revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mounting_revision_content_with_http_info(revision_id, **kwargs)  # noqa: E501
            return data

    def get_mounting_revision_content_with_http_info(self, revision_id, **kwargs):  # noqa: E501
        """Gets the list of first-level components of a mounting revision.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mounting_revision_content_with_http_info(revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The unique identifier of the mounting revision for which you wish to obtain the list of first-level components. (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mounting_revision_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `get_mounting_revision_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/mounting/{revisionId}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mounting_revision_content_with_missing(self, revision_id, **kwargs):  # noqa: E501
        """Gets the list of first-level components of a mounting revision. And includes missing components.  Missing component properties will be empty or equal to defaut values. Only the parent part properties will be filled.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mounting_revision_content_with_missing(revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The unique identifier of the mounting revision for which you wish to obtain the list of first-level components. (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mounting_revision_content_with_missing_with_http_info(revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mounting_revision_content_with_missing_with_http_info(revision_id, **kwargs)  # noqa: E501
            return data

    def get_mounting_revision_content_with_missing_with_http_info(self, revision_id, **kwargs):  # noqa: E501
        """Gets the list of first-level components of a mounting revision. And includes missing components.  Missing component properties will be empty or equal to defaut values. Only the parent part properties will be filled.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mounting_revision_content_with_missing_with_http_info(revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The unique identifier of the mounting revision for which you wish to obtain the list of first-level components. (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mounting_revision_content_with_missing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `get_mounting_revision_content_with_missing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/mounting/{revisionId}/includemissings/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

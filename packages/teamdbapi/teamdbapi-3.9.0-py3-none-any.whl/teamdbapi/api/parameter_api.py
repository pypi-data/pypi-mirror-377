# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teamdbapi.api_client import ApiClient


class ParameterApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_current_context_parameter_by_name(self, param_name_or_reference, **kwargs):  # noqa: E501
        """Get the parameter for a given parameter name or reference and the current selected version in the Parameters Editor view.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_context_parameter_by_name(param_name_or_reference, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str param_name_or_reference: The parameter name or reference to find. (required)
        :return: Parameter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_context_parameter_by_name_with_http_info(param_name_or_reference, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_context_parameter_by_name_with_http_info(param_name_or_reference, **kwargs)  # noqa: E501
            return data

    def get_current_context_parameter_by_name_with_http_info(self, param_name_or_reference, **kwargs):  # noqa: E501
        """Get the parameter for a given parameter name or reference and the current selected version in the Parameters Editor view.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_context_parameter_by_name_with_http_info(param_name_or_reference, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str param_name_or_reference: The parameter name or reference to find. (required)
        :return: Parameter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['param_name_or_reference']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_context_parameter_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'param_name_or_reference' is set
        if self.api_client.client_side_validation and ('param_name_or_reference' not in params or
                                                       params['param_name_or_reference'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `param_name_or_reference` when calling `get_current_context_parameter_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'param_name_or_reference' in params:
            query_params.append(('paramNameOrReference', params['param_name_or_reference']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/currentVersion/parameter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Parameter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parameter(self, param_id, version_id, **kwargs):  # noqa: E501
        """Get a parameter for a given version id.  A parameter can be linked to different versions with the same definition... or not (for ex: new parameter size, format...).  For this reason, you have to specify the version to which you want to get the paramater definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter(param_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str param_id: The unique parameter id to get. (required)
        :param str version_id: The version id to which you want to get the parameter definition (required)
        :return: Parameter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_parameter_with_http_info(param_id, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_parameter_with_http_info(param_id, version_id, **kwargs)  # noqa: E501
            return data

    def get_parameter_with_http_info(self, param_id, version_id, **kwargs):  # noqa: E501
        """Get a parameter for a given version id.  A parameter can be linked to different versions with the same definition... or not (for ex: new parameter size, format...).  For this reason, you have to specify the version to which you want to get the paramater definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_with_http_info(param_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str param_id: The unique parameter id to get. (required)
        :param str version_id: The version id to which you want to get the parameter definition (required)
        :return: Parameter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['param_id', 'version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'param_id' is set
        if self.api_client.client_side_validation and ('param_id' not in params or
                                                       params['param_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `param_id` when calling `get_parameter`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `get_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'param_id' in params:
            path_params['paramId'] = params['param_id']  # noqa: E501
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/parameter/{paramId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Parameter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parameter_by_name_for_version(self, version_id, param_name_or_reference, **kwargs):  # noqa: E501
        """Get the parameter for a given parameter name or reference and a version unique id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_by_name_for_version(version_id, param_name_or_reference, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The unique version Id containing the parameter (required)
        :param str param_name_or_reference: The parameter name or reference to find. (required)
        :return: Parameter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_parameter_by_name_for_version_with_http_info(version_id, param_name_or_reference, **kwargs)  # noqa: E501
        else:
            (data) = self.get_parameter_by_name_for_version_with_http_info(version_id, param_name_or_reference, **kwargs)  # noqa: E501
            return data

    def get_parameter_by_name_for_version_with_http_info(self, version_id, param_name_or_reference, **kwargs):  # noqa: E501
        """Get the parameter for a given parameter name or reference and a version unique id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_by_name_for_version_with_http_info(version_id, param_name_or_reference, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The unique version Id containing the parameter (required)
        :param str param_name_or_reference: The parameter name or reference to find. (required)
        :return: Parameter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'param_name_or_reference']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_by_name_for_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `get_parameter_by_name_for_version`")  # noqa: E501
        # verify the required parameter 'param_name_or_reference' is set
        if self.api_client.client_side_validation and ('param_name_or_reference' not in params or
                                                       params['param_name_or_reference'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `param_name_or_reference` when calling `get_parameter_by_name_for_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []
        if 'param_name_or_reference' in params:
            query_params.append(('paramNameOrReference', params['param_name_or_reference']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/parameter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Parameter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parameters(self, version_id, **kwargs):  # noqa: E501
        """Get all parameters for a given version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameters(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The unique version id to which you want the parameters. (required)
        :return: list[Parameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_parameters_with_http_info(version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_parameters_with_http_info(version_id, **kwargs)  # noqa: E501
            return data

    def get_parameters_with_http_info(self, version_id, **kwargs):  # noqa: E501
        """Get all parameters for a given version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameters_with_http_info(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The unique version id to which you want the parameters. (required)
        :return: list[Parameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `get_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Parameter]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parameters_in_group(self, version_id, group_id, **kwargs):  # noqa: E501
        """Get all parameters contained inside a group, including the parameters inside the child groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameters_in_group(version_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The unique version id to which the group belongs. (required)
        :param str group_id: The unique group id to which you want the parameters. (required)
        :return: list[Parameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_parameters_in_group_with_http_info(version_id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_parameters_in_group_with_http_info(version_id, group_id, **kwargs)  # noqa: E501
            return data

    def get_parameters_in_group_with_http_info(self, version_id, group_id, **kwargs):  # noqa: E501
        """Get all parameters contained inside a group, including the parameters inside the child groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameters_in_group_with_http_info(version_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The unique version id to which the group belongs. (required)
        :param str group_id: The unique group id to which you want the parameters. (required)
        :return: list[Parameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameters_in_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `get_parameters_in_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `get_parameters_in_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/group/{groupId}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Parameter]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_parameters(self, version_id, import_options, **kwargs):  # noqa: E501
        """Import parameter files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_parameters(version_id, import_options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The unique id of the version to which the paramterers will be imported. (required)
        :param ImportParametersArgs import_options: The import options (required)
        :return: ImportParametersResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_parameters_with_http_info(version_id, import_options, **kwargs)  # noqa: E501
        else:
            (data) = self.import_parameters_with_http_info(version_id, import_options, **kwargs)  # noqa: E501
            return data

    def import_parameters_with_http_info(self, version_id, import_options, **kwargs):  # noqa: E501
        """Import parameter files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_parameters_with_http_info(version_id, import_options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The unique id of the version to which the paramterers will be imported. (required)
        :param ImportParametersArgs import_options: The import options (required)
        :return: ImportParametersResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'import_options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `import_parameters`")  # noqa: E501
        # verify the required parameter 'import_options' is set
        if self.api_client.client_side_validation and ('import_options' not in params or
                                                       params['import_options'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_options` when calling `import_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'import_options' in params:
            body_params = params['import_options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/parameter/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImportParametersResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_parameter(self, version_id, group_id, param_ids, **kwargs):  # noqa: E501
        """[Command] Move one or more parameters to a group  # noqa: E501

        Set groupId to 00000000-0000-0000-0000-000000000000 in order to move the parameter on the root.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_parameter(version_id, group_id, param_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version id on which you are working (required)
        :param str group_id: The destination group id where to move the parameters (required)
        :param list[str] param_ids: The list of unique parameter ids to move inside the destination group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_parameter_with_http_info(version_id, group_id, param_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.move_parameter_with_http_info(version_id, group_id, param_ids, **kwargs)  # noqa: E501
            return data

    def move_parameter_with_http_info(self, version_id, group_id, param_ids, **kwargs):  # noqa: E501
        """[Command] Move one or more parameters to a group  # noqa: E501

        Set groupId to 00000000-0000-0000-0000-000000000000 in order to move the parameter on the root.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_parameter_with_http_info(version_id, group_id, param_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version id on which you are working (required)
        :param str group_id: The destination group id where to move the parameters (required)
        :param list[str] param_ids: The list of unique parameter ids to move inside the destination group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'group_id', 'param_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `move_parameter`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `move_parameter`")  # noqa: E501
        # verify the required parameter 'param_ids' is set
        if self.api_client.client_side_validation and ('param_ids' not in params or
                                                       params['param_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `param_ids` when calling `move_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param_ids' in params:
            body_params = params['param_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/group/{groupId}/moveparameter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_parameter_update_revision(self, version_id, group_id, reference_assembly_id, param_ids, **kwargs):  # noqa: E501
        """Move a parameter inside a group and update the involved group revisions based on the reference assembly given in argument  # noqa: E501

        Set groupId to 00000000-0000-0000-0000-000000000000 in order to move the parameter on the root.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_parameter_update_revision(version_id, group_id, reference_assembly_id, param_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version id on which you are working (required)
        :param str group_id: The destination group id where to move the parameters (required)
        :param str reference_assembly_id: The assembly id used as a reference in order to update the group revision potentially involved in the process. (required)
        :param list[str] param_ids: The list of unique parameter ids to move inside the destination group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_parameter_update_revision_with_http_info(version_id, group_id, reference_assembly_id, param_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.move_parameter_update_revision_with_http_info(version_id, group_id, reference_assembly_id, param_ids, **kwargs)  # noqa: E501
            return data

    def move_parameter_update_revision_with_http_info(self, version_id, group_id, reference_assembly_id, param_ids, **kwargs):  # noqa: E501
        """Move a parameter inside a group and update the involved group revisions based on the reference assembly given in argument  # noqa: E501

        Set groupId to 00000000-0000-0000-0000-000000000000 in order to move the parameter on the root.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_parameter_update_revision_with_http_info(version_id, group_id, reference_assembly_id, param_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version id on which you are working (required)
        :param str group_id: The destination group id where to move the parameters (required)
        :param str reference_assembly_id: The assembly id used as a reference in order to update the group revision potentially involved in the process. (required)
        :param list[str] param_ids: The list of unique parameter ids to move inside the destination group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'group_id', 'reference_assembly_id', 'param_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_parameter_update_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `move_parameter_update_revision`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `move_parameter_update_revision`")  # noqa: E501
        # verify the required parameter 'reference_assembly_id' is set
        if self.api_client.client_side_validation and ('reference_assembly_id' not in params or
                                                       params['reference_assembly_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reference_assembly_id` when calling `move_parameter_update_revision`")  # noqa: E501
        # verify the required parameter 'param_ids' is set
        if self.api_client.client_side_validation and ('param_ids' not in params or
                                                       params['param_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `param_ids` when calling `move_parameter_update_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'reference_assembly_id' in params:
            query_params.append(('referenceAssemblyId', params['reference_assembly_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param_ids' in params:
            body_params = params['param_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/group/{groupId}/moveparameterupdaterevision', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_responsibles(self, version_id, param_ids, **kwargs):  # noqa: E501
        """Reset the responsibles for a given version and a list of parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_responsibles(version_id, param_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version unique id to which the responsibles will be reseted (required)
        :param list[str] param_ids: The parameters list to which the responsibles will be reseted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_responsibles_with_http_info(version_id, param_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_responsibles_with_http_info(version_id, param_ids, **kwargs)  # noqa: E501
            return data

    def reset_responsibles_with_http_info(self, version_id, param_ids, **kwargs):  # noqa: E501
        """Reset the responsibles for a given version and a list of parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_responsibles_with_http_info(version_id, param_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version unique id to which the responsibles will be reseted (required)
        :param list[str] param_ids: The parameters list to which the responsibles will be reseted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'param_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_responsibles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `reset_responsibles`")  # noqa: E501
        # verify the required parameter 'param_ids' is set
        if self.api_client.client_side_validation and ('param_ids' not in params or
                                                       params['param_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `param_ids` when calling `reset_responsibles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param_ids' in params:
            body_params = params['param_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/parameter/resetresponsible', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def select_parameter_by_id(self, parameter_id, **kwargs):  # noqa: E501
        """[Command] Select the given parameter in the Edit Car Parameters view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.select_parameter_by_id(parameter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parameter_id: The parameter unique Id to select in the Edit Car Parameters view (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.select_parameter_by_id_with_http_info(parameter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.select_parameter_by_id_with_http_info(parameter_id, **kwargs)  # noqa: E501
            return data

    def select_parameter_by_id_with_http_info(self, parameter_id, **kwargs):  # noqa: E501
        """[Command] Select the given parameter in the Edit Car Parameters view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.select_parameter_by_id_with_http_info(parameter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parameter_id: The parameter unique Id to select in the Edit Car Parameters view (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method select_parameter_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameter_id' is set
        if self.api_client.client_side_validation and ('parameter_id' not in params or
                                                       params['parameter_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_id` when calling `select_parameter_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parameter_id' in params:
            path_params['parameterId'] = params['parameter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/parameter/{parameterId}/select', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_responsibles(self, version_id, responsibles, param_ids, **kwargs):  # noqa: E501
        """[Command] Set the responsibles for a given version and a list of parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_responsibles(version_id, responsibles, param_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version unique id to which the responsible will be affected (required)
        :param str responsibles: The responsibles names. Must be a Teamdb User name. Each responsible should be separated by; (required)
        :param list[str] param_ids: The parameters list to which the responsible will be in charge (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_responsibles_with_http_info(version_id, responsibles, param_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.set_responsibles_with_http_info(version_id, responsibles, param_ids, **kwargs)  # noqa: E501
            return data

    def set_responsibles_with_http_info(self, version_id, responsibles, param_ids, **kwargs):  # noqa: E501
        """[Command] Set the responsibles for a given version and a list of parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_responsibles_with_http_info(version_id, responsibles, param_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version unique id to which the responsible will be affected (required)
        :param str responsibles: The responsibles names. Must be a Teamdb User name. Each responsible should be separated by; (required)
        :param list[str] param_ids: The parameters list to which the responsible will be in charge (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'responsibles', 'param_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_responsibles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `set_responsibles`")  # noqa: E501
        # verify the required parameter 'responsibles' is set
        if self.api_client.client_side_validation and ('responsibles' not in params or
                                                       params['responsibles'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `responsibles` when calling `set_responsibles`")  # noqa: E501
        # verify the required parameter 'param_ids' is set
        if self.api_client.client_side_validation and ('param_ids' not in params or
                                                       params['param_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `param_ids` when calling `set_responsibles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []
        if 'responsibles' in params:
            query_params.append(('responsibles', params['responsibles']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param_ids' in params:
            body_params = params['param_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/parameter/setresponsible', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

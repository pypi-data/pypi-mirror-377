# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teamdbapi.api_client import ApiClient


class ParameterBindingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_parameter_binding(self, parameter_binding, **kwargs):  # noqa: E501
        """Create a new ParameterBinding.  # noqa: E501

        Set ParameterBinding.Id empty (00000000-0000-0000-0000-000000000000) in order to create a new ParameterBinding.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_parameter_binding(parameter_binding, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ParameterBinding parameter_binding: The ParameterBinding to create. (required)
        :return: ParameterBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_parameter_binding_with_http_info(parameter_binding, **kwargs)  # noqa: E501
        else:
            (data) = self.create_parameter_binding_with_http_info(parameter_binding, **kwargs)  # noqa: E501
            return data

    def create_parameter_binding_with_http_info(self, parameter_binding, **kwargs):  # noqa: E501
        """Create a new ParameterBinding.  # noqa: E501

        Set ParameterBinding.Id empty (00000000-0000-0000-0000-000000000000) in order to create a new ParameterBinding.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_parameter_binding_with_http_info(parameter_binding, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ParameterBinding parameter_binding: The ParameterBinding to create. (required)
        :return: ParameterBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameter_binding']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_parameter_binding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameter_binding' is set
        if self.api_client.client_side_validation and ('parameter_binding' not in params or
                                                       params['parameter_binding'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_binding` when calling `create_parameter_binding`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameter_binding' in params:
            body_params = params['parameter_binding']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/parameterbinding', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParameterBinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_parameter_binding(self, parameter_binding_id, **kwargs):  # noqa: E501
        """Delete a ParameterBinding based on it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_parameter_binding(parameter_binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parameter_binding_id: The unique identifier of the ParameterBinding to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_parameter_binding_with_http_info(parameter_binding_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_parameter_binding_with_http_info(parameter_binding_id, **kwargs)  # noqa: E501
            return data

    def delete_parameter_binding_with_http_info(self, parameter_binding_id, **kwargs):  # noqa: E501
        """Delete a ParameterBinding based on it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_parameter_binding_with_http_info(parameter_binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parameter_binding_id: The unique identifier of the ParameterBinding to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameter_binding_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_parameter_binding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameter_binding_id' is set
        if self.api_client.client_side_validation and ('parameter_binding_id' not in params or
                                                       params['parameter_binding_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_binding_id` when calling `delete_parameter_binding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parameter_binding_id' in params:
            path_params['parameterBindingId'] = params['parameter_binding_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/parameterbinding/{parameterBindingId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_parameter_bindings(self, **kwargs):  # noqa: E501
        """Get all the ParameterBindings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_parameter_bindings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ParameterBinding]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_parameter_bindings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_parameter_bindings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_parameter_bindings_with_http_info(self, **kwargs):  # noqa: E501
        """Get all the ParameterBindings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_parameter_bindings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ParameterBinding]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_parameter_bindings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/parameterbindings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ParameterBinding]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parameter_binding(self, parameter_binding_id, **kwargs):  # noqa: E501
        """Get a ParameterBinding from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_binding(parameter_binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parameter_binding_id: The unique identifier of the ParameterBinding to retrieve. (required)
        :return: ParameterBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_parameter_binding_with_http_info(parameter_binding_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_parameter_binding_with_http_info(parameter_binding_id, **kwargs)  # noqa: E501
            return data

    def get_parameter_binding_with_http_info(self, parameter_binding_id, **kwargs):  # noqa: E501
        """Get a ParameterBinding from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_binding_with_http_info(parameter_binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parameter_binding_id: The unique identifier of the ParameterBinding to retrieve. (required)
        :return: ParameterBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameter_binding_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_binding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameter_binding_id' is set
        if self.api_client.client_side_validation and ('parameter_binding_id' not in params or
                                                       params['parameter_binding_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_binding_id` when calling `get_parameter_binding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parameter_binding_id' in params:
            path_params['parameterBindingId'] = params['parameter_binding_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/parameterbinding/{parameterBindingId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParameterBinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_parameter_binding(self, parameter_binding_id, parameter_binding, **kwargs):  # noqa: E501
        """Update a ParameterBinding.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_parameter_binding(parameter_binding_id, parameter_binding, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parameter_binding_id: The unique identifier of the ParameterBinding to update. (required)
        :param ParameterBinding parameter_binding: The properties of the ParameterBinding to update. (required)
        :return: ParameterBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_parameter_binding_with_http_info(parameter_binding_id, parameter_binding, **kwargs)  # noqa: E501
        else:
            (data) = self.update_parameter_binding_with_http_info(parameter_binding_id, parameter_binding, **kwargs)  # noqa: E501
            return data

    def update_parameter_binding_with_http_info(self, parameter_binding_id, parameter_binding, **kwargs):  # noqa: E501
        """Update a ParameterBinding.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_parameter_binding_with_http_info(parameter_binding_id, parameter_binding, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parameter_binding_id: The unique identifier of the ParameterBinding to update. (required)
        :param ParameterBinding parameter_binding: The properties of the ParameterBinding to update. (required)
        :return: ParameterBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameter_binding_id', 'parameter_binding']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_parameter_binding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameter_binding_id' is set
        if self.api_client.client_side_validation and ('parameter_binding_id' not in params or
                                                       params['parameter_binding_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_binding_id` when calling `update_parameter_binding`")  # noqa: E501
        # verify the required parameter 'parameter_binding' is set
        if self.api_client.client_side_validation and ('parameter_binding' not in params or
                                                       params['parameter_binding'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_binding` when calling `update_parameter_binding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parameter_binding_id' in params:
            path_params['parameterBindingId'] = params['parameter_binding_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameter_binding' in params:
            body_params = params['parameter_binding']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/parameterbinding/{parameterBindingId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParameterBinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

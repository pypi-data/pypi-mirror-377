# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teamdbapi.api_client import ApiClient


class RevisionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_revision(self, version_id, revision, **kwargs):  # noqa: E501
        """Create a revision. You have to specify a version id to which the revision is created.  This is mandatory because the system needs to ensure that the revision data are consistent with the version definition.  # noqa: E501

        Set the Revision.Id to empty (00000000-0000-0000-0000-000000000000), it will be generated by the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_revision(version_id, revision, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version id to which the revision was created (required)
        :param Revision revision: The revision you want to create (required)
        :return: Revision
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_revision_with_http_info(version_id, revision, **kwargs)  # noqa: E501
        else:
            (data) = self.create_revision_with_http_info(version_id, revision, **kwargs)  # noqa: E501
            return data

    def create_revision_with_http_info(self, version_id, revision, **kwargs):  # noqa: E501
        """Create a revision. You have to specify a version id to which the revision is created.  This is mandatory because the system needs to ensure that the revision data are consistent with the version definition.  # noqa: E501

        Set the Revision.Id to empty (00000000-0000-0000-0000-000000000000), it will be generated by the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_revision_with_http_info(version_id, revision, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version id to which the revision was created (required)
        :param Revision revision: The revision you want to create (required)
        :return: Revision
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'revision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `create_revision`")  # noqa: E501
        # verify the required parameter 'revision' is set
        if self.api_client.client_side_validation and ('revision' not in params or
                                                       params['revision'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision` when calling `create_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'revision' in params:
            body_params = params['revision']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/revision', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Revision',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_revision_for_component(self, part_number, serial_number, parameter_path, target_name, revision, **kwargs):  # noqa: E501
        """Create a revision for a Lifing component identified with its partNumber and serial number.    This is mandatory because the system needs to ensure that the revision data are consistent with the version definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_revision_for_component(part_number, serial_number, parameter_path, target_name, revision, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_number: The lifing component's part number (required)
        :param str serial_number: The lifing component's serial number (required)
        :param str parameter_path: The parameter path identifying the parameter. (required)
        :param str target_name: The target to which the parameter is associated (required)
        :param RevisionValue revision: The revision value you want to create (required)
        :return: Revision
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_revision_for_component_with_http_info(part_number, serial_number, parameter_path, target_name, revision, **kwargs)  # noqa: E501
        else:
            (data) = self.create_revision_for_component_with_http_info(part_number, serial_number, parameter_path, target_name, revision, **kwargs)  # noqa: E501
            return data

    def create_revision_for_component_with_http_info(self, part_number, serial_number, parameter_path, target_name, revision, **kwargs):  # noqa: E501
        """Create a revision for a Lifing component identified with its partNumber and serial number.    This is mandatory because the system needs to ensure that the revision data are consistent with the version definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_revision_for_component_with_http_info(part_number, serial_number, parameter_path, target_name, revision, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_number: The lifing component's part number (required)
        :param str serial_number: The lifing component's serial number (required)
        :param str parameter_path: The parameter path identifying the parameter. (required)
        :param str target_name: The target to which the parameter is associated (required)
        :param RevisionValue revision: The revision value you want to create (required)
        :return: Revision
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_number', 'serial_number', 'parameter_path', 'target_name', 'revision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_revision_for_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_number' is set
        if self.api_client.client_side_validation and ('part_number' not in params or
                                                       params['part_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_number` when calling `create_revision_for_component`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if self.api_client.client_side_validation and ('serial_number' not in params or
                                                       params['serial_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serial_number` when calling `create_revision_for_component`")  # noqa: E501
        # verify the required parameter 'parameter_path' is set
        if self.api_client.client_side_validation and ('parameter_path' not in params or
                                                       params['parameter_path'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_path` when calling `create_revision_for_component`")  # noqa: E501
        # verify the required parameter 'target_name' is set
        if self.api_client.client_side_validation and ('target_name' not in params or
                                                       params['target_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_name` when calling `create_revision_for_component`")  # noqa: E501
        # verify the required parameter 'revision' is set
        if self.api_client.client_side_validation and ('revision' not in params or
                                                       params['revision'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision` when calling `create_revision_for_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_number' in params:
            path_params['partNumber'] = params['part_number']  # noqa: E501
        if 'serial_number' in params:
            path_params['serialNumber'] = params['serial_number']  # noqa: E501
        if 'parameter_path' in params:
            path_params['parameterPath'] = params['parameter_path']  # noqa: E501
        if 'target_name' in params:
            path_params['targetName'] = params['target_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'revision' in params:
            body_params = params['revision']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/partNumber/{partNumber}/serialNumber/{serialNumber}/parameterPath/{parameterPath}/targetName/{targetName}/revision', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Revision',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_revision(self, revision_id, **kwargs):  # noqa: E501
        """Remove a revision corresponding to a given id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_revision(revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The revision id you want to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_revision_with_http_info(revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_revision_with_http_info(revision_id, **kwargs)  # noqa: E501
            return data

    def delete_revision_with_http_info(self, revision_id, **kwargs):  # noqa: E501
        """Remove a revision corresponding to a given id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_revision_with_http_info(revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The revision id you want to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `delete_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/revision/{revisionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_revision(self, revision_id, version_id, output_file_path, **kwargs):  # noqa: E501
        """[Command] Export a revision into a file. You need to specify the version to which you want to export the revision value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_revision(revision_id, version_id, output_file_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The revision id to export. (required)
        :param str version_id: The version id to which you want to export the revision value. (required)
        :param str output_file_path: The path to the file to create. You have to provide the file extension for example : C:/path/MyFile.m (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_revision_with_http_info(revision_id, version_id, output_file_path, **kwargs)  # noqa: E501
        else:
            (data) = self.export_revision_with_http_info(revision_id, version_id, output_file_path, **kwargs)  # noqa: E501
            return data

    def export_revision_with_http_info(self, revision_id, version_id, output_file_path, **kwargs):  # noqa: E501
        """[Command] Export a revision into a file. You need to specify the version to which you want to export the revision value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_revision_with_http_info(revision_id, version_id, output_file_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The revision id to export. (required)
        :param str version_id: The version id to which you want to export the revision value. (required)
        :param str output_file_path: The path to the file to create. You have to provide the file extension for example : C:/path/MyFile.m (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['revision_id', 'version_id', 'output_file_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `export_revision`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `export_revision`")  # noqa: E501
        # verify the required parameter 'output_file_path' is set
        if self.api_client.client_side_validation and ('output_file_path' not in params or
                                                       params['output_file_path'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `output_file_path` when calling `export_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []
        if 'version_id' in params:
            query_params.append(('versionId', params['version_id']))  # noqa: E501
        if 'output_file_path' in params:
            query_params.append(('outputFilePath', params['output_file_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/revision/{revisionId}/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_parameter_revisions(self, part_number, serial_number, **kwargs):  # noqa: E501
        """Get all the parameter revisions associated with a Lifing component. You need to specify the part number, the component serial number to identify the  component for which you want all the revisions associated with.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_parameter_revisions(part_number, serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_number: The lifing component's part number (required)
        :param str serial_number: The lifing component's serial number (required)
        :return: list[Revision]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_parameter_revisions_with_http_info(part_number, serial_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_parameter_revisions_with_http_info(part_number, serial_number, **kwargs)  # noqa: E501
            return data

    def get_component_parameter_revisions_with_http_info(self, part_number, serial_number, **kwargs):  # noqa: E501
        """Get all the parameter revisions associated with a Lifing component. You need to specify the part number, the component serial number to identify the  component for which you want all the revisions associated with.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_parameter_revisions_with_http_info(part_number, serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_number: The lifing component's part number (required)
        :param str serial_number: The lifing component's serial number (required)
        :return: list[Revision]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_number', 'serial_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_parameter_revisions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_number' is set
        if self.api_client.client_side_validation and ('part_number' not in params or
                                                       params['part_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_number` when calling `get_component_parameter_revisions`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if self.api_client.client_side_validation and ('serial_number' not in params or
                                                       params['serial_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serial_number` when calling `get_component_parameter_revisions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_number' in params:
            path_params['partNumber'] = params['part_number']  # noqa: E501
        if 'serial_number' in params:
            path_params['serialNumber'] = params['serial_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/partNumber/{partNumber}/serialNumber/{serialNumber}/revisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Revision]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_revisions_by_parameter(self, part_number, serial_number, parameter_path, target_name, **kwargs):  # noqa: E501
        """Get all component's revisions for a given parameter and target. You need to specify the part number, the component serial number, a target and  the parameter path for which you want the revisions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revisions_by_parameter(part_number, serial_number, parameter_path, target_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_number: The lifing component's part number (required)
        :param str serial_number: The lifing component's serial number (required)
        :param str parameter_path: The parameter path identifying the parameter. (required)
        :param str target_name: The target to which the parameter is associated (required)
        :return: list[Revision]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_revisions_by_parameter_with_http_info(part_number, serial_number, parameter_path, target_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_revisions_by_parameter_with_http_info(part_number, serial_number, parameter_path, target_name, **kwargs)  # noqa: E501
            return data

    def get_component_revisions_by_parameter_with_http_info(self, part_number, serial_number, parameter_path, target_name, **kwargs):  # noqa: E501
        """Get all component's revisions for a given parameter and target. You need to specify the part number, the component serial number, a target and  the parameter path for which you want the revisions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revisions_by_parameter_with_http_info(part_number, serial_number, parameter_path, target_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_number: The lifing component's part number (required)
        :param str serial_number: The lifing component's serial number (required)
        :param str parameter_path: The parameter path identifying the parameter. (required)
        :param str target_name: The target to which the parameter is associated (required)
        :return: list[Revision]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_number', 'serial_number', 'parameter_path', 'target_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_revisions_by_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_number' is set
        if self.api_client.client_side_validation and ('part_number' not in params or
                                                       params['part_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_number` when calling `get_component_revisions_by_parameter`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if self.api_client.client_side_validation and ('serial_number' not in params or
                                                       params['serial_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serial_number` when calling `get_component_revisions_by_parameter`")  # noqa: E501
        # verify the required parameter 'parameter_path' is set
        if self.api_client.client_side_validation and ('parameter_path' not in params or
                                                       params['parameter_path'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_path` when calling `get_component_revisions_by_parameter`")  # noqa: E501
        # verify the required parameter 'target_name' is set
        if self.api_client.client_side_validation and ('target_name' not in params or
                                                       params['target_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_name` when calling `get_component_revisions_by_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_number' in params:
            path_params['partNumber'] = params['part_number']  # noqa: E501
        if 'serial_number' in params:
            path_params['serialNumber'] = params['serial_number']  # noqa: E501
        if 'parameter_path' in params:
            path_params['parameterPath'] = params['parameter_path']  # noqa: E501
        if 'target_name' in params:
            path_params['targetName'] = params['target_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/partNumber/{partNumber}/serialNumber/{serialNumber}/parameterPath/{parameterPath}/targetName/{targetName}/revisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Revision]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_revision(self, revision_id, **kwargs):  # noqa: E501
        """Get a revision corresponding to a unique Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision(revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The unique revision id to which you want to get the revision (required)
        :return: Revision
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_revision_with_http_info(revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_revision_with_http_info(revision_id, **kwargs)  # noqa: E501
            return data

    def get_revision_with_http_info(self, revision_id, **kwargs):  # noqa: E501
        """Get a revision corresponding to a unique Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_with_http_info(revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The unique revision id to which you want to get the revision (required)
        :return: Revision
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `get_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/revision/{revisionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Revision',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_revision_by_param_and_assembly(self, assembly_id, parameter_id, **kwargs):  # noqa: E501
        """Get the revision selected in an assembly for a given parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_by_param_and_assembly(assembly_id, parameter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assembly_id: The assembly id to which you want to get the revision value (required)
        :param str parameter_id: The parameter id to which you want the revisions (required)
        :return: Revision
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_revision_by_param_and_assembly_with_http_info(assembly_id, parameter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_revision_by_param_and_assembly_with_http_info(assembly_id, parameter_id, **kwargs)  # noqa: E501
            return data

    def get_revision_by_param_and_assembly_with_http_info(self, assembly_id, parameter_id, **kwargs):  # noqa: E501
        """Get the revision selected in an assembly for a given parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_by_param_and_assembly_with_http_info(assembly_id, parameter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assembly_id: The assembly id to which you want to get the revision value (required)
        :param str parameter_id: The parameter id to which you want the revisions (required)
        :return: Revision
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assembly_id', 'parameter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_revision_by_param_and_assembly" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assembly_id' is set
        if self.api_client.client_side_validation and ('assembly_id' not in params or
                                                       params['assembly_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assembly_id` when calling `get_revision_by_param_and_assembly`")  # noqa: E501
        # verify the required parameter 'parameter_id' is set
        if self.api_client.client_side_validation and ('parameter_id' not in params or
                                                       params['parameter_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_id` when calling `get_revision_by_param_and_assembly`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assembly_id' in params:
            path_params['assemblyId'] = params['assembly_id']  # noqa: E501
        if 'parameter_id' in params:
            path_params['parameterId'] = params['parameter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/assembly/{assemblyId}/parameter/{parameterId}/revision', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Revision',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_revisions(self, version_id, **kwargs):  # noqa: E501
        """Get all the revisions for a given version. This will retreive all revisions for all the parameters of a given version.  Only revisions that match the version definition will be returned.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revisions(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version id to which you want all the revisions (required)
        :return: list[Revision]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_revisions_with_http_info(version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_revisions_with_http_info(version_id, **kwargs)  # noqa: E501
            return data

    def get_revisions_with_http_info(self, version_id, **kwargs):  # noqa: E501
        """Get all the revisions for a given version. This will retreive all revisions for all the parameters of a given version.  Only revisions that match the version definition will be returned.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revisions_with_http_info(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version id to which you want all the revisions (required)
        :return: list[Revision]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_revisions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `get_revisions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/revisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Revision]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_revisions_by_parameter(self, parameter_id, version_id, **kwargs):  # noqa: E501
        """Get all revisions for a given parameter and version. You need to specify a version in order to  get the revisions that match the version definition (size, format...)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revisions_by_parameter(parameter_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parameter_id: The parameter id to which you want the revisions (required)
        :param str version_id: The version id to which you want to get the revision value (required)
        :return: list[Revision]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_revisions_by_parameter_with_http_info(parameter_id, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_revisions_by_parameter_with_http_info(parameter_id, version_id, **kwargs)  # noqa: E501
            return data

    def get_revisions_by_parameter_with_http_info(self, parameter_id, version_id, **kwargs):  # noqa: E501
        """Get all revisions for a given parameter and version. You need to specify a version in order to  get the revisions that match the version definition (size, format...)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revisions_by_parameter_with_http_info(parameter_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parameter_id: The parameter id to which you want the revisions (required)
        :param str version_id: The version id to which you want to get the revision value (required)
        :return: list[Revision]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameter_id', 'version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_revisions_by_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameter_id' is set
        if self.api_client.client_side_validation and ('parameter_id' not in params or
                                                       params['parameter_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_id` when calling `get_revisions_by_parameter`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `get_revisions_by_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parameter_id' in params:
            path_params['parameterId'] = params['parameter_id']  # noqa: E501
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/parameter/{parameterId}/revisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Revision]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_revision_from_parameter_list(self, version_from_id, version_to_id, copy_group_revisions, parameters_table, **kwargs):  # noqa: E501
        """Import all revisions from a version to another version for a given cross table parameters list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_revision_from_parameter_list(version_from_id, version_to_id, copy_group_revisions, parameters_table, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_from_id: The version id from which the revisions come from (required)
        :param str version_to_id: The version id to which the revisions are created (required)
        :param bool copy_group_revisions: True to update the group revisions involved by the reivisions copy (required)
        :param list[ParameterCrossTable] parameters_table: The parameters crosstable that provides the mapping between the parameters From and To (required)
        :return: list[Revision]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_revision_from_parameter_list_with_http_info(version_from_id, version_to_id, copy_group_revisions, parameters_table, **kwargs)  # noqa: E501
        else:
            (data) = self.import_revision_from_parameter_list_with_http_info(version_from_id, version_to_id, copy_group_revisions, parameters_table, **kwargs)  # noqa: E501
            return data

    def import_revision_from_parameter_list_with_http_info(self, version_from_id, version_to_id, copy_group_revisions, parameters_table, **kwargs):  # noqa: E501
        """Import all revisions from a version to another version for a given cross table parameters list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_revision_from_parameter_list_with_http_info(version_from_id, version_to_id, copy_group_revisions, parameters_table, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_from_id: The version id from which the revisions come from (required)
        :param str version_to_id: The version id to which the revisions are created (required)
        :param bool copy_group_revisions: True to update the group revisions involved by the reivisions copy (required)
        :param list[ParameterCrossTable] parameters_table: The parameters crosstable that provides the mapping between the parameters From and To (required)
        :return: list[Revision]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_from_id', 'version_to_id', 'copy_group_revisions', 'parameters_table']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_revision_from_parameter_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_from_id' is set
        if self.api_client.client_side_validation and ('version_from_id' not in params or
                                                       params['version_from_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_from_id` when calling `import_revision_from_parameter_list`")  # noqa: E501
        # verify the required parameter 'version_to_id' is set
        if self.api_client.client_side_validation and ('version_to_id' not in params or
                                                       params['version_to_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_to_id` when calling `import_revision_from_parameter_list`")  # noqa: E501
        # verify the required parameter 'copy_group_revisions' is set
        if self.api_client.client_side_validation and ('copy_group_revisions' not in params or
                                                       params['copy_group_revisions'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `copy_group_revisions` when calling `import_revision_from_parameter_list`")  # noqa: E501
        # verify the required parameter 'parameters_table' is set
        if self.api_client.client_side_validation and ('parameters_table' not in params or
                                                       params['parameters_table'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameters_table` when calling `import_revision_from_parameter_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_from_id' in params:
            path_params['versionFromId'] = params['version_from_id']  # noqa: E501
        if 'version_to_id' in params:
            path_params['versionToId'] = params['version_to_id']  # noqa: E501
        if 'copy_group_revisions' in params:
            path_params['copyGroupRevisions'] = params['copy_group_revisions']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameters_table' in params:
            body_params = params['parameters_table']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/versionFrom/{versionFromId}/versionTo/{versionToId}/withGroupRevisionCopy/{copyGroupRevisions}/revisions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Revision]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_revisions(self, version_id, import_options, **kwargs):  # noqa: E501
        """Import revisions from files for a given car parameters version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_revisions(version_id, import_options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The unique id of the version to which the revisions will be imported. (required)
        :param ImportRevisionsArgs import_options: The import options (required)
        :return: ImportRevisionsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_revisions_with_http_info(version_id, import_options, **kwargs)  # noqa: E501
        else:
            (data) = self.import_revisions_with_http_info(version_id, import_options, **kwargs)  # noqa: E501
            return data

    def import_revisions_with_http_info(self, version_id, import_options, **kwargs):  # noqa: E501
        """Import revisions from files for a given car parameters version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_revisions_with_http_info(version_id, import_options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The unique id of the version to which the revisions will be imported. (required)
        :param ImportRevisionsArgs import_options: The import options (required)
        :return: ImportRevisionsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'import_options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_revisions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `import_revisions`")  # noqa: E501
        # verify the required parameter 'import_options' is set
        if self.api_client.client_side_validation and ('import_options' not in params or
                                                       params['import_options'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_options` when calling `import_revisions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'import_options' in params:
            body_params = params['import_options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/revisions/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImportRevisionsResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def try_get_revision(self, version_id, revision, **kwargs):  # noqa: E501
        """Check whether the revision with the same data already exists for a given version.  Returns the revision unique ID already existing or empty (00000000-0000-0000-0000-000000000000) if not found.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.try_get_revision(version_id, revision, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version id to which the revision must belong (required)
        :param Revision revision: The revision you want to check. The research is based on the data not the revision id. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.try_get_revision_with_http_info(version_id, revision, **kwargs)  # noqa: E501
        else:
            (data) = self.try_get_revision_with_http_info(version_id, revision, **kwargs)  # noqa: E501
            return data

    def try_get_revision_with_http_info(self, version_id, revision, **kwargs):  # noqa: E501
        """Check whether the revision with the same data already exists for a given version.  Returns the revision unique ID already existing or empty (00000000-0000-0000-0000-000000000000) if not found.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.try_get_revision_with_http_info(version_id, revision, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: The version id to which the revision must belong (required)
        :param Revision revision: The revision you want to check. The research is based on the data not the revision id. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'revision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method try_get_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `try_get_revision`")  # noqa: E501
        # verify the required parameter 'revision' is set
        if self.api_client.client_side_validation and ('revision' not in params or
                                                       params['revision'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision` when calling `try_get_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'revision' in params:
            body_params = params['revision']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/revision/exists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_revision(self, revision_id, version_id, revision, **kwargs):  # noqa: E501
        """Update a revision. You have to specify a version id to which the revision is updated.  This is mandatory because the system needs to ensure that the revision data are consistent with the version definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_revision(revision_id, version_id, revision, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The revision id corresponding to the revision you want to update (required)
        :param str version_id: The version id to which the revision was created (required)
        :param Revision revision: The revision you want to update (required)
        :param bool allow_update_revision_fields: Allows to update the all the revision description fields except the data from a locked revision.
        :return: Revision
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_revision_with_http_info(revision_id, version_id, revision, **kwargs)  # noqa: E501
        else:
            (data) = self.update_revision_with_http_info(revision_id, version_id, revision, **kwargs)  # noqa: E501
            return data

    def update_revision_with_http_info(self, revision_id, version_id, revision, **kwargs):  # noqa: E501
        """Update a revision. You have to specify a version id to which the revision is updated.  This is mandatory because the system needs to ensure that the revision data are consistent with the version definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_revision_with_http_info(revision_id, version_id, revision, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str revision_id: The revision id corresponding to the revision you want to update (required)
        :param str version_id: The version id to which the revision was created (required)
        :param Revision revision: The revision you want to update (required)
        :param bool allow_update_revision_fields: Allows to update the all the revision description fields except the data from a locked revision.
        :return: Revision
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['revision_id', 'version_id', 'revision', 'allow_update_revision_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `update_revision`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `update_revision`")  # noqa: E501
        # verify the required parameter 'revision' is set
        if self.api_client.client_side_validation and ('revision' not in params or
                                                       params['revision'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision` when calling `update_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []
        if 'allow_update_revision_fields' in params:
            query_params.append(('allowUpdateRevisionFields', params['allow_update_revision_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'revision' in params:
            body_params = params['revision']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/version/{versionId}/revision/{revisionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Revision',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

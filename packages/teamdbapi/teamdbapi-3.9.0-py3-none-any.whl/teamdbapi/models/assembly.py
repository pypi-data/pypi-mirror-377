# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Assembly(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'DateAssembly': 'datetime',
        'VersionId': 'str',
        'RevisionList': 'list[str]',
        'Description': 'str',
        'GroupId': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'RevisionLastUpdateDateUtc': 'datetime',
        'RevisionLastUpdateUser': 'str',
        'IsLocked': 'bool',
        'IsNew': 'bool',
        'IsObsolete': 'bool',
        'IsPartial': 'bool',
        'IsDraft': 'bool',
        'GlobalAssemblyTag': 'str',
        'Tags': 'list[str]'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'DateAssembly': 'DateAssembly',
        'VersionId': 'VersionId',
        'RevisionList': 'RevisionList',
        'Description': 'Description',
        'GroupId': 'GroupId',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'RevisionLastUpdateDateUtc': 'RevisionLastUpdateDateUtc',
        'RevisionLastUpdateUser': 'RevisionLastUpdateUser',
        'IsLocked': 'IsLocked',
        'IsNew': 'IsNew',
        'IsObsolete': 'IsObsolete',
        'IsPartial': 'IsPartial',
        'IsDraft': 'IsDraft',
        'GlobalAssemblyTag': 'GlobalAssemblyTag',
        'Tags': 'Tags'
    }

    def __init__(self, Id=None, Name=None, DateAssembly=None, VersionId=None, RevisionList=None, Description=None, GroupId=None, LastUpdateDateUtc=None, LastUpdateUser=None, RevisionLastUpdateDateUtc=None, RevisionLastUpdateUser=None, IsLocked=None, IsNew=None, IsObsolete=None, IsPartial=None, IsDraft=None, GlobalAssemblyTag=None, Tags=None, _configuration=None):  # noqa: E501
        """Assembly - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._DateAssembly = None
        self._VersionId = None
        self._RevisionList = None
        self._Description = None
        self._GroupId = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._RevisionLastUpdateDateUtc = None
        self._RevisionLastUpdateUser = None
        self._IsLocked = None
        self._IsNew = None
        self._IsObsolete = None
        self._IsPartial = None
        self._IsDraft = None
        self._GlobalAssemblyTag = None
        self._Tags = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        self.DateAssembly = DateAssembly
        self.VersionId = VersionId
        if RevisionList is not None:
            self.RevisionList = RevisionList
        if Description is not None:
            self.Description = Description
        if GroupId is not None:
            self.GroupId = GroupId
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if RevisionLastUpdateDateUtc is not None:
            self.RevisionLastUpdateDateUtc = RevisionLastUpdateDateUtc
        if RevisionLastUpdateUser is not None:
            self.RevisionLastUpdateUser = RevisionLastUpdateUser
        if IsLocked is not None:
            self.IsLocked = IsLocked
        if IsNew is not None:
            self.IsNew = IsNew
        if IsObsolete is not None:
            self.IsObsolete = IsObsolete
        if IsPartial is not None:
            self.IsPartial = IsPartial
        if IsDraft is not None:
            self.IsDraft = IsDraft
        if GlobalAssemblyTag is not None:
            self.GlobalAssemblyTag = GlobalAssemblyTag
        if Tags is not None:
            self.Tags = Tags

    @property
    def Id(self):
        """Gets the Id of this Assembly.  # noqa: E501

        The unique assembly Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Assembly.  # noqa: E501

        :return: The Id of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Assembly.

        The unique assembly Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Assembly.  # noqa: E501

        :param Id: The Id of this Assembly.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this Assembly.  # noqa: E501

        The assembly name  # noqa: E501

        :return: The Name of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Assembly.

        The assembly name  # noqa: E501

        :param Name: The Name of this Assembly.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def DateAssembly(self):
        """Gets the DateAssembly of this Assembly.  # noqa: E501

        The creation date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :return: The DateAssembly of this Assembly.  # noqa: E501
        :rtype: datetime
        """
        return self._DateAssembly

    @DateAssembly.setter
    def DateAssembly(self, DateAssembly):
        """Sets the DateAssembly of this Assembly.

        The creation date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :param DateAssembly: The DateAssembly of this Assembly.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and DateAssembly is None:
            raise ValueError("Invalid value for `DateAssembly`, must not be `None`")  # noqa: E501

        self._DateAssembly = DateAssembly

    @property
    def VersionId(self):
        """Gets the VersionId of this Assembly.  # noqa: E501

        The version to which the assembly belongs to  # noqa: E501

        :return: The VersionId of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._VersionId

    @VersionId.setter
    def VersionId(self, VersionId):
        """Sets the VersionId of this Assembly.

        The version to which the assembly belongs to  # noqa: E501

        :param VersionId: The VersionId of this Assembly.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and VersionId is None:
            raise ValueError("Invalid value for `VersionId`, must not be `None`")  # noqa: E501

        self._VersionId = VersionId

    @property
    def RevisionList(self):
        """Gets the RevisionList of this Assembly.  # noqa: E501

        The revision ids associated to the assembly  # noqa: E501

        :return: The RevisionList of this Assembly.  # noqa: E501
        :rtype: list[str]
        """
        return self._RevisionList

    @RevisionList.setter
    def RevisionList(self, RevisionList):
        """Sets the RevisionList of this Assembly.

        The revision ids associated to the assembly  # noqa: E501

        :param RevisionList: The RevisionList of this Assembly.  # noqa: E501
        :type: list[str]
        """

        self._RevisionList = RevisionList

    @property
    def Description(self):
        """Gets the Description of this Assembly.  # noqa: E501

        The assembly description  # noqa: E501

        :return: The Description of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        """Sets the Description of this Assembly.

        The assembly description  # noqa: E501

        :param Description: The Description of this Assembly.  # noqa: E501
        :type: str
        """

        self._Description = Description

    @property
    def GroupId(self):
        """Gets the GroupId of this Assembly.  # noqa: E501

        If the assembly represents a group revision: the group id to which belongs the group revision.  Otherwise leave the property to Guid.Empty : 00000000-0000-0000-0000-000000000000  # noqa: E501

        :return: The GroupId of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._GroupId

    @GroupId.setter
    def GroupId(self, GroupId):
        """Sets the GroupId of this Assembly.

        If the assembly represents a group revision: the group id to which belongs the group revision.  Otherwise leave the property to Guid.Empty : 00000000-0000-0000-0000-000000000000  # noqa: E501

        :param GroupId: The GroupId of this Assembly.  # noqa: E501
        :type: str
        """

        self._GroupId = GroupId

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Assembly.  # noqa: E501

        The last utc date time when the properties of the assembly have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this Assembly.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Assembly.

        The last utc date time when the properties of the assembly have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Assembly.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Assembly.  # noqa: E501

        The name of the last user having updated the assembly  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateUser of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Assembly.

        The name of the last user having updated the assembly  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Assembly.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def RevisionLastUpdateDateUtc(self):
        """Gets the RevisionLastUpdateDateUtc of this Assembly.  # noqa: E501

        The last utc date time when the revisions list has been updated  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The RevisionLastUpdateDateUtc of this Assembly.  # noqa: E501
        :rtype: datetime
        """
        return self._RevisionLastUpdateDateUtc

    @RevisionLastUpdateDateUtc.setter
    def RevisionLastUpdateDateUtc(self, RevisionLastUpdateDateUtc):
        """Sets the RevisionLastUpdateDateUtc of this Assembly.

        The last utc date time when the revisions list has been updated  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param RevisionLastUpdateDateUtc: The RevisionLastUpdateDateUtc of this Assembly.  # noqa: E501
        :type: datetime
        """

        self._RevisionLastUpdateDateUtc = RevisionLastUpdateDateUtc

    @property
    def RevisionLastUpdateUser(self):
        """Gets the RevisionLastUpdateUser of this Assembly.  # noqa: E501

        The name of the last user having updated the revisions list   This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The RevisionLastUpdateUser of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._RevisionLastUpdateUser

    @RevisionLastUpdateUser.setter
    def RevisionLastUpdateUser(self, RevisionLastUpdateUser):
        """Sets the RevisionLastUpdateUser of this Assembly.

        The name of the last user having updated the revisions list   This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param RevisionLastUpdateUser: The RevisionLastUpdateUser of this Assembly.  # noqa: E501
        :type: str
        """

        self._RevisionLastUpdateUser = RevisionLastUpdateUser

    @property
    def IsLocked(self):
        """Gets the IsLocked of this Assembly.  # noqa: E501

        Return true if the assembly is locked  # noqa: E501

        :return: The IsLocked of this Assembly.  # noqa: E501
        :rtype: bool
        """
        return self._IsLocked

    @IsLocked.setter
    def IsLocked(self, IsLocked):
        """Sets the IsLocked of this Assembly.

        Return true if the assembly is locked  # noqa: E501

        :param IsLocked: The IsLocked of this Assembly.  # noqa: E501
        :type: bool
        """

        self._IsLocked = IsLocked

    @property
    def IsNew(self):
        """Gets the IsNew of this Assembly.  # noqa: E501

        Return true if the assembly is new  # noqa: E501

        :return: The IsNew of this Assembly.  # noqa: E501
        :rtype: bool
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        """Sets the IsNew of this Assembly.

        Return true if the assembly is new  # noqa: E501

        :param IsNew: The IsNew of this Assembly.  # noqa: E501
        :type: bool
        """

        self._IsNew = IsNew

    @property
    def IsObsolete(self):
        """Gets the IsObsolete of this Assembly.  # noqa: E501

        Return true if the assembly is obsolete  # noqa: E501

        :return: The IsObsolete of this Assembly.  # noqa: E501
        :rtype: bool
        """
        return self._IsObsolete

    @IsObsolete.setter
    def IsObsolete(self, IsObsolete):
        """Sets the IsObsolete of this Assembly.

        Return true if the assembly is obsolete  # noqa: E501

        :param IsObsolete: The IsObsolete of this Assembly.  # noqa: E501
        :type: bool
        """

        self._IsObsolete = IsObsolete

    @property
    def IsPartial(self):
        """Gets the IsPartial of this Assembly.  # noqa: E501

        Return true if the assembly is partial  # noqa: E501

        :return: The IsPartial of this Assembly.  # noqa: E501
        :rtype: bool
        """
        return self._IsPartial

    @IsPartial.setter
    def IsPartial(self, IsPartial):
        """Sets the IsPartial of this Assembly.

        Return true if the assembly is partial  # noqa: E501

        :param IsPartial: The IsPartial of this Assembly.  # noqa: E501
        :type: bool
        """

        self._IsPartial = IsPartial

    @property
    def IsDraft(self):
        """Gets the IsDraft of this Assembly.  # noqa: E501

        Return true if the assembly is draft  # noqa: E501

        :return: The IsDraft of this Assembly.  # noqa: E501
        :rtype: bool
        """
        return self._IsDraft

    @IsDraft.setter
    def IsDraft(self, IsDraft):
        """Sets the IsDraft of this Assembly.

        Return true if the assembly is draft  # noqa: E501

        :param IsDraft: The IsDraft of this Assembly.  # noqa: E501
        :type: bool
        """

        self._IsDraft = IsDraft

    @property
    def GlobalAssemblyTag(self):
        """Gets the GlobalAssemblyTag of this Assembly.  # noqa: E501

        Obsolete: No longer used anymore. Return the global export tag  # noqa: E501

        :return: The GlobalAssemblyTag of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._GlobalAssemblyTag

    @GlobalAssemblyTag.setter
    def GlobalAssemblyTag(self, GlobalAssemblyTag):
        """Sets the GlobalAssemblyTag of this Assembly.

        Obsolete: No longer used anymore. Return the global export tag  # noqa: E501

        :param GlobalAssemblyTag: The GlobalAssemblyTag of this Assembly.  # noqa: E501
        :type: str
        """

        self._GlobalAssemblyTag = GlobalAssemblyTag

    @property
    def Tags(self):
        """Gets the Tags of this Assembly.  # noqa: E501

        Return the list of tags used to perform research on assemblies  # noqa: E501

        :return: The Tags of this Assembly.  # noqa: E501
        :rtype: list[str]
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        """Sets the Tags of this Assembly.

        Return the list of tags used to perform research on assemblies  # noqa: E501

        :param Tags: The Tags of this Assembly.  # noqa: E501
        :type: list[str]
        """

        self._Tags = Tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Assembly, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assembly):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Assembly):
            return True

        return self.to_dict() != other.to_dict()

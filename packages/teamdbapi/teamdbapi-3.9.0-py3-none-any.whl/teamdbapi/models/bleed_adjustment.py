# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class BleedAdjustment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Value': 'float',
        'Type': 'str'
    }

    attribute_map = {
        'Value': 'Value',
        'Type': 'Type'
    }

    def __init__(self, Value=None, Type=None, _configuration=None):  # noqa: E501
        """BleedAdjustment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Value = None
        self._Type = None
        self.discriminator = None

        self.Value = Value
        self.Type = Type

    @property
    def Value(self):
        """Gets the Value of this BleedAdjustment.  # noqa: E501

        The adjustement value  # noqa: E501

        :return: The Value of this BleedAdjustment.  # noqa: E501
        :rtype: float
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        """Sets the Value of this BleedAdjustment.

        The adjustement value  # noqa: E501

        :param Value: The Value of this BleedAdjustment.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and Value is None:
            raise ValueError("Invalid value for `Value`, must not be `None`")  # noqa: E501

        self._Value = Value

    @property
    def Type(self):
        """Gets the Type of this BleedAdjustment.  # noqa: E501

        The adjustment type (value from BleedAdjustmentType enumeration)  # noqa: E501

        :return: The Type of this BleedAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        """Sets the Type of this BleedAdjustment.

        The adjustment type (value from BleedAdjustmentType enumeration)  # noqa: E501

        :param Type: The Type of this BleedAdjustment.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Type is None:
            raise ValueError("Invalid value for `Type`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "Cold", "Hot"]  # noqa: E501
        if (self._configuration.client_side_validation and
                Type not in allowed_values):
            raise ValueError(
                "Invalid value for `Type` ({0}), must be one of {1}"  # noqa: E501
                .format(Type, allowed_values)
            )

        self._Type = Type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BleedAdjustment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BleedAdjustment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BleedAdjustment):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class CarParametersContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'TargetId': 'str',
        'VersionId': 'str',
        'AssemblyId': 'str',
        'Name': 'str'
    }

    attribute_map = {
        'TargetId': 'TargetId',
        'VersionId': 'VersionId',
        'AssemblyId': 'AssemblyId',
        'Name': 'Name'
    }

    def __init__(self, TargetId=None, VersionId=None, AssemblyId=None, Name=None, _configuration=None):  # noqa: E501
        """CarParametersContext - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._TargetId = None
        self._VersionId = None
        self._AssemblyId = None
        self._Name = None
        self.discriminator = None

        if TargetId is not None:
            self.TargetId = TargetId
        if VersionId is not None:
            self.VersionId = VersionId
        if AssemblyId is not None:
            self.AssemblyId = AssemblyId
        if Name is not None:
            self.Name = Name

    @property
    def TargetId(self):
        """Gets the TargetId of this CarParametersContext.  # noqa: E501

        Target unique Id  # noqa: E501

        :return: The TargetId of this CarParametersContext.  # noqa: E501
        :rtype: str
        """
        return self._TargetId

    @TargetId.setter
    def TargetId(self, TargetId):
        """Sets the TargetId of this CarParametersContext.

        Target unique Id  # noqa: E501

        :param TargetId: The TargetId of this CarParametersContext.  # noqa: E501
        :type: str
        """

        self._TargetId = TargetId

    @property
    def VersionId(self):
        """Gets the VersionId of this CarParametersContext.  # noqa: E501

        Version unique Id  # noqa: E501

        :return: The VersionId of this CarParametersContext.  # noqa: E501
        :rtype: str
        """
        return self._VersionId

    @VersionId.setter
    def VersionId(self, VersionId):
        """Sets the VersionId of this CarParametersContext.

        Version unique Id  # noqa: E501

        :param VersionId: The VersionId of this CarParametersContext.  # noqa: E501
        :type: str
        """

        self._VersionId = VersionId

    @property
    def AssemblyId(self):
        """Gets the AssemblyId of this CarParametersContext.  # noqa: E501

        Assembly unique id  # noqa: E501

        :return: The AssemblyId of this CarParametersContext.  # noqa: E501
        :rtype: str
        """
        return self._AssemblyId

    @AssemblyId.setter
    def AssemblyId(self, AssemblyId):
        """Sets the AssemblyId of this CarParametersContext.

        Assembly unique id  # noqa: E501

        :param AssemblyId: The AssemblyId of this CarParametersContext.  # noqa: E501
        :type: str
        """

        self._AssemblyId = AssemblyId

    @property
    def Name(self):
        """Gets the Name of this CarParametersContext.  # noqa: E501

        Context name (ie the layout name) or GLOBAL_CONTEXT for the global context  # noqa: E501

        :return: The Name of this CarParametersContext.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this CarParametersContext.

        Context name (ie the layout name) or GLOBAL_CONTEXT for the global context  # noqa: E501

        :param Name: The Name of this CarParametersContext.  # noqa: E501
        :type: str
        """

        self._Name = Name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarParametersContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarParametersContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CarParametersContext):
            return True

        return self.to_dict() != other.to_dict()

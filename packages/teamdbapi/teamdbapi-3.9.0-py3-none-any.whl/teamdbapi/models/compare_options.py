# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class CompareOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ParametersSelectionFilters': 'list[str]',
        'ExcludeParametersInSelection': 'bool',
        'DiffFilePath': 'str',
        'DiffGroup': 'str'
    }

    attribute_map = {
        'ParametersSelectionFilters': 'ParametersSelectionFilters',
        'ExcludeParametersInSelection': 'ExcludeParametersInSelection',
        'DiffFilePath': 'DiffFilePath',
        'DiffGroup': 'DiffGroup'
    }

    def __init__(self, ParametersSelectionFilters=None, ExcludeParametersInSelection=None, DiffFilePath=None, DiffGroup=None, _configuration=None):  # noqa: E501
        """CompareOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ParametersSelectionFilters = None
        self._ExcludeParametersInSelection = None
        self._DiffFilePath = None
        self._DiffGroup = None
        self.discriminator = None

        if ParametersSelectionFilters is not None:
            self.ParametersSelectionFilters = ParametersSelectionFilters
        if ExcludeParametersInSelection is not None:
            self.ExcludeParametersInSelection = ExcludeParametersInSelection
        if DiffFilePath is not None:
            self.DiffFilePath = DiffFilePath
        if DiffGroup is not None:
            self.DiffGroup = DiffGroup

    @property
    def ParametersSelectionFilters(self):
        """Gets the ParametersSelectionFilters of this CompareOptions.  # noqa: E501

        The parameters selection filter  # noqa: E501

        :return: The ParametersSelectionFilters of this CompareOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._ParametersSelectionFilters

    @ParametersSelectionFilters.setter
    def ParametersSelectionFilters(self, ParametersSelectionFilters):
        """Sets the ParametersSelectionFilters of this CompareOptions.

        The parameters selection filter  # noqa: E501

        :param ParametersSelectionFilters: The ParametersSelectionFilters of this CompareOptions.  # noqa: E501
        :type: list[str]
        """

        self._ParametersSelectionFilters = ParametersSelectionFilters

    @property
    def ExcludeParametersInSelection(self):
        """Gets the ExcludeParametersInSelection of this CompareOptions.  # noqa: E501

        Exclude the parameters in the selection  # noqa: E501

        :return: The ExcludeParametersInSelection of this CompareOptions.  # noqa: E501
        :rtype: bool
        """
        return self._ExcludeParametersInSelection

    @ExcludeParametersInSelection.setter
    def ExcludeParametersInSelection(self, ExcludeParametersInSelection):
        """Sets the ExcludeParametersInSelection of this CompareOptions.

        Exclude the parameters in the selection  # noqa: E501

        :param ExcludeParametersInSelection: The ExcludeParametersInSelection of this CompareOptions.  # noqa: E501
        :type: bool
        """

        self._ExcludeParametersInSelection = ExcludeParametersInSelection

    @property
    def DiffFilePath(self):
        """Gets the DiffFilePath of this CompareOptions.  # noqa: E501

        The output file path contenaing the differences.   The path must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The DiffFilePath of this CompareOptions.  # noqa: E501
        :rtype: str
        """
        return self._DiffFilePath

    @DiffFilePath.setter
    def DiffFilePath(self, DiffFilePath):
        """Sets the DiffFilePath of this CompareOptions.

        The output file path contenaing the differences.   The path must be described only by / or \\\\\\\\.  # noqa: E501

        :param DiffFilePath: The DiffFilePath of this CompareOptions.  # noqa: E501
        :type: str
        """

        self._DiffFilePath = DiffFilePath

    @property
    def DiffGroup(self):
        """Gets the DiffGroup of this CompareOptions.  # noqa: E501

        The diffence group (A or B) to use to generate the diff file when DiffFilePath is filled  # noqa: E501

        :return: The DiffGroup of this CompareOptions.  # noqa: E501
        :rtype: str
        """
        return self._DiffGroup

    @DiffGroup.setter
    def DiffGroup(self, DiffGroup):
        """Sets the DiffGroup of this CompareOptions.

        The diffence group (A or B) to use to generate the diff file when DiffFilePath is filled  # noqa: E501

        :param DiffGroup: The DiffGroup of this CompareOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "B"]  # noqa: E501
        if (self._configuration.client_side_validation and
                DiffGroup not in allowed_values):
            raise ValueError(
                "Invalid value for `DiffGroup` ({0}), must be one of {1}"  # noqa: E501
                .format(DiffGroup, allowed_values)
            )

        self._DiffGroup = DiffGroup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompareOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompareOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompareOptions):
            return True

        return self.to_dict() != other.to_dict()

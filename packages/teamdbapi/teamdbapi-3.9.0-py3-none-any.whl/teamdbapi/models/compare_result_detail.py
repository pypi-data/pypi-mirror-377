# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class CompareResultDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Reference': 'str',
        'AssemblyADetail': 'CompareResult',
        'AssemblyBDetail': 'CompareResult',
        'DiffType': 'str'
    }

    attribute_map = {
        'Reference': 'Reference',
        'AssemblyADetail': 'AssemblyADetail',
        'AssemblyBDetail': 'AssemblyBDetail',
        'DiffType': 'DiffType'
    }

    def __init__(self, Reference=None, AssemblyADetail=None, AssemblyBDetail=None, DiffType=None, _configuration=None):  # noqa: E501
        """CompareResultDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Reference = None
        self._AssemblyADetail = None
        self._AssemblyBDetail = None
        self._DiffType = None
        self.discriminator = None

        if Reference is not None:
            self.Reference = Reference
        if AssemblyADetail is not None:
            self.AssemblyADetail = AssemblyADetail
        if AssemblyBDetail is not None:
            self.AssemblyBDetail = AssemblyBDetail
        if DiffType is not None:
            self.DiffType = DiffType

    @property
    def Reference(self):
        """Gets the Reference of this CompareResultDetail.  # noqa: E501

        Parameter reference  # noqa: E501

        :return: The Reference of this CompareResultDetail.  # noqa: E501
        :rtype: str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        """Sets the Reference of this CompareResultDetail.

        Parameter reference  # noqa: E501

        :param Reference: The Reference of this CompareResultDetail.  # noqa: E501
        :type: str
        """

        self._Reference = Reference

    @property
    def AssemblyADetail(self):
        """Gets the AssemblyADetail of this CompareResultDetail.  # noqa: E501


        :return: The AssemblyADetail of this CompareResultDetail.  # noqa: E501
        :rtype: CompareResult
        """
        return self._AssemblyADetail

    @AssemblyADetail.setter
    def AssemblyADetail(self, AssemblyADetail):
        """Sets the AssemblyADetail of this CompareResultDetail.


        :param AssemblyADetail: The AssemblyADetail of this CompareResultDetail.  # noqa: E501
        :type: CompareResult
        """

        self._AssemblyADetail = AssemblyADetail

    @property
    def AssemblyBDetail(self):
        """Gets the AssemblyBDetail of this CompareResultDetail.  # noqa: E501


        :return: The AssemblyBDetail of this CompareResultDetail.  # noqa: E501
        :rtype: CompareResult
        """
        return self._AssemblyBDetail

    @AssemblyBDetail.setter
    def AssemblyBDetail(self, AssemblyBDetail):
        """Sets the AssemblyBDetail of this CompareResultDetail.


        :param AssemblyBDetail: The AssemblyBDetail of this CompareResultDetail.  # noqa: E501
        :type: CompareResult
        """

        self._AssemblyBDetail = AssemblyBDetail

    @property
    def DiffType(self):
        """Gets the DiffType of this CompareResultDetail.  # noqa: E501

        The difference type detected between A and B  # noqa: E501

        :return: The DiffType of this CompareResultDetail.  # noqa: E501
        :rtype: str
        """
        return self._DiffType

    @DiffType.setter
    def DiffType(self, DiffType):
        """Sets the DiffType of this CompareResultDetail.

        The difference type detected between A and B  # noqa: E501

        :param DiffType: The DiffType of this CompareResultDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["A_Missing", "B_Missing", "Difference"]  # noqa: E501
        if (self._configuration.client_side_validation and
                DiffType not in allowed_values):
            raise ValueError(
                "Invalid value for `DiffType` ({0}), must be one of {1}"  # noqa: E501
                .format(DiffType, allowed_values)
            )

        self._DiffType = DiffType

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompareResultDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompareResultDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompareResultDetail):
            return True

        return self.to_dict() != other.to_dict()

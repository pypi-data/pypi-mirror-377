# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Criteria(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'Description': 'str',
        'FieldId': 'str',
        'AggregationType': 'str',
        'Unit': 'str',
        'TargetValueDouble': 'float',
        'TargetValueInt': 'int',
        'TargetValueTime': 'int',
        'DecimalNumber': 'int',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'Description': 'Description',
        'FieldId': 'FieldId',
        'AggregationType': 'AggregationType',
        'Unit': 'Unit',
        'TargetValueDouble': 'TargetValueDouble',
        'TargetValueInt': 'TargetValueInt',
        'TargetValueTime': 'TargetValueTime',
        'DecimalNumber': 'DecimalNumber',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser'
    }

    def __init__(self, Id=None, Name=None, Description=None, FieldId=None, AggregationType=None, Unit=None, TargetValueDouble=None, TargetValueInt=None, TargetValueTime=None, DecimalNumber=None, LastUpdateDateUtc=None, LastUpdateUser=None, _configuration=None):  # noqa: E501
        """Criteria - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._Description = None
        self._FieldId = None
        self._AggregationType = None
        self._Unit = None
        self._TargetValueDouble = None
        self._TargetValueInt = None
        self._TargetValueTime = None
        self._DecimalNumber = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        if Description is not None:
            self.Description = Description
        self.FieldId = FieldId
        if AggregationType is not None:
            self.AggregationType = AggregationType
        if Unit is not None:
            self.Unit = Unit
        if TargetValueDouble is not None:
            self.TargetValueDouble = TargetValueDouble
        if TargetValueInt is not None:
            self.TargetValueInt = TargetValueInt
        if TargetValueTime is not None:
            self.TargetValueTime = TargetValueTime
        if DecimalNumber is not None:
            self.DecimalNumber = DecimalNumber
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser

    @property
    def Id(self):
        """Gets the Id of this Criteria.  # noqa: E501

        Criteria unique identifier.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new criteria.  # noqa: E501

        :return: The Id of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Criteria.

        Criteria unique identifier.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new criteria.  # noqa: E501

        :param Id: The Id of this Criteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this Criteria.  # noqa: E501

        Name of the criteria  # noqa: E501

        :return: The Name of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Criteria.

        Name of the criteria  # noqa: E501

        :param Name: The Name of this Criteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def Description(self):
        """Gets the Description of this Criteria.  # noqa: E501

        Description of the criteria  # noqa: E501

        :return: The Description of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        """Sets the Description of this Criteria.

        Description of the criteria  # noqa: E501

        :param Description: The Description of this Criteria.  # noqa: E501
        :type: str
        """

        self._Description = Description

    @property
    def FieldId(self):
        """Gets the FieldId of this Criteria.  # noqa: E501

        Field associated with the criteria  # noqa: E501

        :return: The FieldId of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._FieldId

    @FieldId.setter
    def FieldId(self, FieldId):
        """Sets the FieldId of this Criteria.

        Field associated with the criteria  # noqa: E501

        :param FieldId: The FieldId of this Criteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and FieldId is None:
            raise ValueError("Invalid value for `FieldId`, must not be `None`")  # noqa: E501

        self._FieldId = FieldId

    @property
    def AggregationType(self):
        """Gets the AggregationType of this Criteria.  # noqa: E501

        Type of criteria aggregation  # noqa: E501

        :return: The AggregationType of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._AggregationType

    @AggregationType.setter
    def AggregationType(self, AggregationType):
        """Sets the AggregationType of this Criteria.

        Type of criteria aggregation  # noqa: E501

        :param AggregationType: The AggregationType of this Criteria.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Sum", "Min", "Max", "First", "Last", "FirstNotNull", "LastNotNull"]  # noqa: E501
        if (self._configuration.client_side_validation and
                AggregationType not in allowed_values):
            raise ValueError(
                "Invalid value for `AggregationType` ({0}), must be one of {1}"  # noqa: E501
                .format(AggregationType, allowed_values)
            )

        self._AggregationType = AggregationType

    @property
    def Unit(self):
        """Gets the Unit of this Criteria.  # noqa: E501

        Criteria value unit  # noqa: E501

        :return: The Unit of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._Unit

    @Unit.setter
    def Unit(self, Unit):
        """Sets the Unit of this Criteria.

        Criteria value unit  # noqa: E501

        :param Unit: The Unit of this Criteria.  # noqa: E501
        :type: str
        """

        self._Unit = Unit

    @property
    def TargetValueDouble(self):
        """Gets the TargetValueDouble of this Criteria.  # noqa: E501

        The target value of the criteria (in double)  # noqa: E501

        :return: The TargetValueDouble of this Criteria.  # noqa: E501
        :rtype: float
        """
        return self._TargetValueDouble

    @TargetValueDouble.setter
    def TargetValueDouble(self, TargetValueDouble):
        """Sets the TargetValueDouble of this Criteria.

        The target value of the criteria (in double)  # noqa: E501

        :param TargetValueDouble: The TargetValueDouble of this Criteria.  # noqa: E501
        :type: float
        """

        self._TargetValueDouble = TargetValueDouble

    @property
    def TargetValueInt(self):
        """Gets the TargetValueInt of this Criteria.  # noqa: E501

        The target value of the criteria (in integer)  # noqa: E501

        :return: The TargetValueInt of this Criteria.  # noqa: E501
        :rtype: int
        """
        return self._TargetValueInt

    @TargetValueInt.setter
    def TargetValueInt(self, TargetValueInt):
        """Sets the TargetValueInt of this Criteria.

        The target value of the criteria (in integer)  # noqa: E501

        :param TargetValueInt: The TargetValueInt of this Criteria.  # noqa: E501
        :type: int
        """

        self._TargetValueInt = TargetValueInt

    @property
    def TargetValueTime(self):
        """Gets the TargetValueTime of this Criteria.  # noqa: E501

        The target value of the criteria (in time)  # noqa: E501

        :return: The TargetValueTime of this Criteria.  # noqa: E501
        :rtype: int
        """
        return self._TargetValueTime

    @TargetValueTime.setter
    def TargetValueTime(self, TargetValueTime):
        """Sets the TargetValueTime of this Criteria.

        The target value of the criteria (in time)  # noqa: E501

        :param TargetValueTime: The TargetValueTime of this Criteria.  # noqa: E501
        :type: int
        """

        self._TargetValueTime = TargetValueTime

    @property
    def DecimalNumber(self):
        """Gets the DecimalNumber of this Criteria.  # noqa: E501

        The number of decimal places for the double value of the criteria  # noqa: E501

        :return: The DecimalNumber of this Criteria.  # noqa: E501
        :rtype: int
        """
        return self._DecimalNumber

    @DecimalNumber.setter
    def DecimalNumber(self, DecimalNumber):
        """Sets the DecimalNumber of this Criteria.

        The number of decimal places for the double value of the criteria  # noqa: E501

        :param DecimalNumber: The DecimalNumber of this Criteria.  # noqa: E501
        :type: int
        """

        self._DecimalNumber = DecimalNumber

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Criteria.  # noqa: E501

        Last update utc date of the criteria  # noqa: E501

        :return: The LastUpdateDateUtc of this Criteria.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Criteria.

        Last update utc date of the criteria  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Criteria.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Criteria.  # noqa: E501

        The name of the user who performed the last update on the criteria  # noqa: E501

        :return: The LastUpdateUser of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Criteria.

        The name of the user who performed the last update on the criteria  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Criteria.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Criteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Criteria):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Criteria):
            return True

        return self.to_dict() != other.to_dict()

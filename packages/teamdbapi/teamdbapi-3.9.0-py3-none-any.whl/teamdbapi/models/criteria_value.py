# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class CriteriaValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'CriteriaId': 'str',
        'ValueDouble': 'float',
        'ValueInt': 'int',
        'ValueTime': 'int'
    }

    attribute_map = {
        'CriteriaId': 'CriteriaId',
        'ValueDouble': 'ValueDouble',
        'ValueInt': 'ValueInt',
        'ValueTime': 'ValueTime'
    }

    def __init__(self, CriteriaId=None, ValueDouble=None, ValueInt=None, ValueTime=None, _configuration=None):  # noqa: E501
        """CriteriaValue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._CriteriaId = None
        self._ValueDouble = None
        self._ValueInt = None
        self._ValueTime = None
        self.discriminator = None

        if CriteriaId is not None:
            self.CriteriaId = CriteriaId
        if ValueDouble is not None:
            self.ValueDouble = ValueDouble
        if ValueInt is not None:
            self.ValueInt = ValueInt
        if ValueTime is not None:
            self.ValueTime = ValueTime

    @property
    def CriteriaId(self):
        """Gets the CriteriaId of this CriteriaValue.  # noqa: E501

        The criteria unique identifier  # noqa: E501

        :return: The CriteriaId of this CriteriaValue.  # noqa: E501
        :rtype: str
        """
        return self._CriteriaId

    @CriteriaId.setter
    def CriteriaId(self, CriteriaId):
        """Sets the CriteriaId of this CriteriaValue.

        The criteria unique identifier  # noqa: E501

        :param CriteriaId: The CriteriaId of this CriteriaValue.  # noqa: E501
        :type: str
        """

        self._CriteriaId = CriteriaId

    @property
    def ValueDouble(self):
        """Gets the ValueDouble of this CriteriaValue.  # noqa: E501

        The double value for the criteria  # noqa: E501

        :return: The ValueDouble of this CriteriaValue.  # noqa: E501
        :rtype: float
        """
        return self._ValueDouble

    @ValueDouble.setter
    def ValueDouble(self, ValueDouble):
        """Sets the ValueDouble of this CriteriaValue.

        The double value for the criteria  # noqa: E501

        :param ValueDouble: The ValueDouble of this CriteriaValue.  # noqa: E501
        :type: float
        """

        self._ValueDouble = ValueDouble

    @property
    def ValueInt(self):
        """Gets the ValueInt of this CriteriaValue.  # noqa: E501

        The integer value for the criteria  # noqa: E501

        :return: The ValueInt of this CriteriaValue.  # noqa: E501
        :rtype: int
        """
        return self._ValueInt

    @ValueInt.setter
    def ValueInt(self, ValueInt):
        """Sets the ValueInt of this CriteriaValue.

        The integer value for the criteria  # noqa: E501

        :param ValueInt: The ValueInt of this CriteriaValue.  # noqa: E501
        :type: int
        """

        self._ValueInt = ValueInt

    @property
    def ValueTime(self):
        """Gets the ValueTime of this CriteriaValue.  # noqa: E501

        The timespan value for the criteria  # noqa: E501

        :return: The ValueTime of this CriteriaValue.  # noqa: E501
        :rtype: int
        """
        return self._ValueTime

    @ValueTime.setter
    def ValueTime(self, ValueTime):
        """Sets the ValueTime of this CriteriaValue.

        The timespan value for the criteria  # noqa: E501

        :param ValueTime: The ValueTime of this CriteriaValue.  # noqa: E501
        :type: int
        """

        self._ValueTime = ValueTime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CriteriaValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CriteriaValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CriteriaValue):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class CriteriaValueDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ValuesDateUtc': 'datetime',
        'EventId': 'str',
        'EventName': 'str',
        'CarId': 'str',
        'CarName': 'str',
        'SessionId': 'str',
        'SessionName': 'str',
        'RunId': 'str',
        'RunName': 'str',
        'ComponentId': 'str',
        'CriteriaId': 'str',
        'ValueDouble': 'float',
        'ValueInt': 'int',
        'ValueTime': 'float',
        'CriterionName': 'str',
        'DistanceRun': 'float',
        'TimeRun': 'float',
        'DistanceRunFactored': 'float',
        'DistanceRunPower': 'float',
        'TimeRunPower': 'float',
        'EnergyRun': 'float'
    }

    attribute_map = {
        'ValuesDateUtc': 'ValuesDateUtc',
        'EventId': 'EventId',
        'EventName': 'EventName',
        'CarId': 'CarId',
        'CarName': 'CarName',
        'SessionId': 'SessionId',
        'SessionName': 'SessionName',
        'RunId': 'RunId',
        'RunName': 'RunName',
        'ComponentId': 'ComponentId',
        'CriteriaId': 'CriteriaId',
        'ValueDouble': 'ValueDouble',
        'ValueInt': 'ValueInt',
        'ValueTime': 'ValueTime',
        'CriterionName': 'CriterionName',
        'DistanceRun': 'DistanceRun',
        'TimeRun': 'TimeRun',
        'DistanceRunFactored': 'DistanceRunFactored',
        'DistanceRunPower': 'DistanceRunPower',
        'TimeRunPower': 'TimeRunPower',
        'EnergyRun': 'EnergyRun'
    }

    def __init__(self, ValuesDateUtc=None, EventId=None, EventName=None, CarId=None, CarName=None, SessionId=None, SessionName=None, RunId=None, RunName=None, ComponentId=None, CriteriaId=None, ValueDouble=None, ValueInt=None, ValueTime=None, CriterionName=None, DistanceRun=None, TimeRun=None, DistanceRunFactored=None, DistanceRunPower=None, TimeRunPower=None, EnergyRun=None, _configuration=None):  # noqa: E501
        """CriteriaValueDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ValuesDateUtc = None
        self._EventId = None
        self._EventName = None
        self._CarId = None
        self._CarName = None
        self._SessionId = None
        self._SessionName = None
        self._RunId = None
        self._RunName = None
        self._ComponentId = None
        self._CriteriaId = None
        self._ValueDouble = None
        self._ValueInt = None
        self._ValueTime = None
        self._CriterionName = None
        self._DistanceRun = None
        self._TimeRun = None
        self._DistanceRunFactored = None
        self._DistanceRunPower = None
        self._TimeRunPower = None
        self._EnergyRun = None
        self.discriminator = None

        if ValuesDateUtc is not None:
            self.ValuesDateUtc = ValuesDateUtc
        if EventId is not None:
            self.EventId = EventId
        if EventName is not None:
            self.EventName = EventName
        if CarId is not None:
            self.CarId = CarId
        if CarName is not None:
            self.CarName = CarName
        if SessionId is not None:
            self.SessionId = SessionId
        if SessionName is not None:
            self.SessionName = SessionName
        if RunId is not None:
            self.RunId = RunId
        if RunName is not None:
            self.RunName = RunName
        if ComponentId is not None:
            self.ComponentId = ComponentId
        if CriteriaId is not None:
            self.CriteriaId = CriteriaId
        if ValueDouble is not None:
            self.ValueDouble = ValueDouble
        if ValueInt is not None:
            self.ValueInt = ValueInt
        if ValueTime is not None:
            self.ValueTime = ValueTime
        if CriterionName is not None:
            self.CriterionName = CriterionName
        if DistanceRun is not None:
            self.DistanceRun = DistanceRun
        if TimeRun is not None:
            self.TimeRun = TimeRun
        if DistanceRunFactored is not None:
            self.DistanceRunFactored = DistanceRunFactored
        if DistanceRunPower is not None:
            self.DistanceRunPower = DistanceRunPower
        if TimeRunPower is not None:
            self.TimeRunPower = TimeRunPower
        if EnergyRun is not None:
            self.EnergyRun = EnergyRun

    @property
    def ValuesDateUtc(self):
        """Gets the ValuesDateUtc of this CriteriaValueDetail.  # noqa: E501

        The criterion date UTC  # noqa: E501

        :return: The ValuesDateUtc of this CriteriaValueDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._ValuesDateUtc

    @ValuesDateUtc.setter
    def ValuesDateUtc(self, ValuesDateUtc):
        """Sets the ValuesDateUtc of this CriteriaValueDetail.

        The criterion date UTC  # noqa: E501

        :param ValuesDateUtc: The ValuesDateUtc of this CriteriaValueDetail.  # noqa: E501
        :type: datetime
        """

        self._ValuesDateUtc = ValuesDateUtc

    @property
    def EventId(self):
        """Gets the EventId of this CriteriaValueDetail.  # noqa: E501

        The event unique identifier  # noqa: E501

        :return: The EventId of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        """Sets the EventId of this CriteriaValueDetail.

        The event unique identifier  # noqa: E501

        :param EventId: The EventId of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._EventId = EventId

    @property
    def EventName(self):
        """Gets the EventName of this CriteriaValueDetail.  # noqa: E501

        The event name  # noqa: E501

        :return: The EventName of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._EventName

    @EventName.setter
    def EventName(self, EventName):
        """Sets the EventName of this CriteriaValueDetail.

        The event name  # noqa: E501

        :param EventName: The EventName of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._EventName = EventName

    @property
    def CarId(self):
        """Gets the CarId of this CriteriaValueDetail.  # noqa: E501

        Car unique identifier  # noqa: E501

        :return: The CarId of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._CarId

    @CarId.setter
    def CarId(self, CarId):
        """Sets the CarId of this CriteriaValueDetail.

        Car unique identifier  # noqa: E501

        :param CarId: The CarId of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._CarId = CarId

    @property
    def CarName(self):
        """Gets the CarName of this CriteriaValueDetail.  # noqa: E501

        The car name  # noqa: E501

        :return: The CarName of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._CarName

    @CarName.setter
    def CarName(self, CarName):
        """Sets the CarName of this CriteriaValueDetail.

        The car name  # noqa: E501

        :param CarName: The CarName of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._CarName = CarName

    @property
    def SessionId(self):
        """Gets the SessionId of this CriteriaValueDetail.  # noqa: E501

        The session unique identifier  # noqa: E501

        :return: The SessionId of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._SessionId

    @SessionId.setter
    def SessionId(self, SessionId):
        """Sets the SessionId of this CriteriaValueDetail.

        The session unique identifier  # noqa: E501

        :param SessionId: The SessionId of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._SessionId = SessionId

    @property
    def SessionName(self):
        """Gets the SessionName of this CriteriaValueDetail.  # noqa: E501

        The session name  # noqa: E501

        :return: The SessionName of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._SessionName

    @SessionName.setter
    def SessionName(self, SessionName):
        """Sets the SessionName of this CriteriaValueDetail.

        The session name  # noqa: E501

        :param SessionName: The SessionName of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._SessionName = SessionName

    @property
    def RunId(self):
        """Gets the RunId of this CriteriaValueDetail.  # noqa: E501

        The run unique identifier  # noqa: E501

        :return: The RunId of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._RunId

    @RunId.setter
    def RunId(self, RunId):
        """Sets the RunId of this CriteriaValueDetail.

        The run unique identifier  # noqa: E501

        :param RunId: The RunId of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._RunId = RunId

    @property
    def RunName(self):
        """Gets the RunName of this CriteriaValueDetail.  # noqa: E501

        The run name  # noqa: E501

        :return: The RunName of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._RunName

    @RunName.setter
    def RunName(self, RunName):
        """Sets the RunName of this CriteriaValueDetail.

        The run name  # noqa: E501

        :param RunName: The RunName of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._RunName = RunName

    @property
    def ComponentId(self):
        """Gets the ComponentId of this CriteriaValueDetail.  # noqa: E501

        Component unique identifier (corresponing to the component's revision)  # noqa: E501

        :return: The ComponentId of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._ComponentId

    @ComponentId.setter
    def ComponentId(self, ComponentId):
        """Sets the ComponentId of this CriteriaValueDetail.

        Component unique identifier (corresponing to the component's revision)  # noqa: E501

        :param ComponentId: The ComponentId of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._ComponentId = ComponentId

    @property
    def CriteriaId(self):
        """Gets the CriteriaId of this CriteriaValueDetail.  # noqa: E501

        Criterion unique identifier  # noqa: E501

        :return: The CriteriaId of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._CriteriaId

    @CriteriaId.setter
    def CriteriaId(self, CriteriaId):
        """Sets the CriteriaId of this CriteriaValueDetail.

        Criterion unique identifier  # noqa: E501

        :param CriteriaId: The CriteriaId of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._CriteriaId = CriteriaId

    @property
    def ValueDouble(self):
        """Gets the ValueDouble of this CriteriaValueDetail.  # noqa: E501

        Criterion value of type double  # noqa: E501

        :return: The ValueDouble of this CriteriaValueDetail.  # noqa: E501
        :rtype: float
        """
        return self._ValueDouble

    @ValueDouble.setter
    def ValueDouble(self, ValueDouble):
        """Sets the ValueDouble of this CriteriaValueDetail.

        Criterion value of type double  # noqa: E501

        :param ValueDouble: The ValueDouble of this CriteriaValueDetail.  # noqa: E501
        :type: float
        """

        self._ValueDouble = ValueDouble

    @property
    def ValueInt(self):
        """Gets the ValueInt of this CriteriaValueDetail.  # noqa: E501

        Criterion value of type int  # noqa: E501

        :return: The ValueInt of this CriteriaValueDetail.  # noqa: E501
        :rtype: int
        """
        return self._ValueInt

    @ValueInt.setter
    def ValueInt(self, ValueInt):
        """Sets the ValueInt of this CriteriaValueDetail.

        Criterion value of type int  # noqa: E501

        :param ValueInt: The ValueInt of this CriteriaValueDetail.  # noqa: E501
        :type: int
        """

        self._ValueInt = ValueInt

    @property
    def ValueTime(self):
        """Gets the ValueTime of this CriteriaValueDetail.  # noqa: E501

        Criterion value of type double (in seconds)  # noqa: E501

        :return: The ValueTime of this CriteriaValueDetail.  # noqa: E501
        :rtype: float
        """
        return self._ValueTime

    @ValueTime.setter
    def ValueTime(self, ValueTime):
        """Sets the ValueTime of this CriteriaValueDetail.

        Criterion value of type double (in seconds)  # noqa: E501

        :param ValueTime: The ValueTime of this CriteriaValueDetail.  # noqa: E501
        :type: float
        """

        self._ValueTime = ValueTime

    @property
    def CriterionName(self):
        """Gets the CriterionName of this CriteriaValueDetail.  # noqa: E501

        Criterion name  # noqa: E501

        :return: The CriterionName of this CriteriaValueDetail.  # noqa: E501
        :rtype: str
        """
        return self._CriterionName

    @CriterionName.setter
    def CriterionName(self, CriterionName):
        """Sets the CriterionName of this CriteriaValueDetail.

        Criterion name  # noqa: E501

        :param CriterionName: The CriterionName of this CriteriaValueDetail.  # noqa: E501
        :type: str
        """

        self._CriterionName = CriterionName

    @property
    def DistanceRun(self):
        """Gets the DistanceRun of this CriteriaValueDetail.  # noqa: E501

        Distance realized on the run  # noqa: E501

        :return: The DistanceRun of this CriteriaValueDetail.  # noqa: E501
        :rtype: float
        """
        return self._DistanceRun

    @DistanceRun.setter
    def DistanceRun(self, DistanceRun):
        """Sets the DistanceRun of this CriteriaValueDetail.

        Distance realized on the run  # noqa: E501

        :param DistanceRun: The DistanceRun of this CriteriaValueDetail.  # noqa: E501
        :type: float
        """

        self._DistanceRun = DistanceRun

    @property
    def TimeRun(self):
        """Gets the TimeRun of this CriteriaValueDetail.  # noqa: E501

        Time elapsed in seconds on the run  # noqa: E501

        :return: The TimeRun of this CriteriaValueDetail.  # noqa: E501
        :rtype: float
        """
        return self._TimeRun

    @TimeRun.setter
    def TimeRun(self, TimeRun):
        """Sets the TimeRun of this CriteriaValueDetail.

        Time elapsed in seconds on the run  # noqa: E501

        :param TimeRun: The TimeRun of this CriteriaValueDetail.  # noqa: E501
        :type: float
        """

        self._TimeRun = TimeRun

    @property
    def DistanceRunFactored(self):
        """Gets the DistanceRunFactored of this CriteriaValueDetail.  # noqa: E501

        Factored distance realized on the run  # noqa: E501

        :return: The DistanceRunFactored of this CriteriaValueDetail.  # noqa: E501
        :rtype: float
        """
        return self._DistanceRunFactored

    @DistanceRunFactored.setter
    def DistanceRunFactored(self, DistanceRunFactored):
        """Sets the DistanceRunFactored of this CriteriaValueDetail.

        Factored distance realized on the run  # noqa: E501

        :param DistanceRunFactored: The DistanceRunFactored of this CriteriaValueDetail.  # noqa: E501
        :type: float
        """

        self._DistanceRunFactored = DistanceRunFactored

    @property
    def DistanceRunPower(self):
        """Gets the DistanceRunPower of this CriteriaValueDetail.  # noqa: E501

        La distance pleine charge parcourue par le component  # noqa: E501

        :return: The DistanceRunPower of this CriteriaValueDetail.  # noqa: E501
        :rtype: float
        """
        return self._DistanceRunPower

    @DistanceRunPower.setter
    def DistanceRunPower(self, DistanceRunPower):
        """Sets the DistanceRunPower of this CriteriaValueDetail.

        La distance pleine charge parcourue par le component  # noqa: E501

        :param DistanceRunPower: The DistanceRunPower of this CriteriaValueDetail.  # noqa: E501
        :type: float
        """

        self._DistanceRunPower = DistanceRunPower

    @property
    def TimeRunPower(self):
        """Gets the TimeRunPower of this CriteriaValueDetail.  # noqa: E501

        Time elapsed in seconds during power mode on the run  # noqa: E501

        :return: The TimeRunPower of this CriteriaValueDetail.  # noqa: E501
        :rtype: float
        """
        return self._TimeRunPower

    @TimeRunPower.setter
    def TimeRunPower(self, TimeRunPower):
        """Sets the TimeRunPower of this CriteriaValueDetail.

        Time elapsed in seconds during power mode on the run  # noqa: E501

        :param TimeRunPower: The TimeRunPower of this CriteriaValueDetail.  # noqa: E501
        :type: float
        """

        self._TimeRunPower = TimeRunPower

    @property
    def EnergyRun(self):
        """Gets the EnergyRun of this CriteriaValueDetail.  # noqa: E501

        Energy level on the run  # noqa: E501

        :return: The EnergyRun of this CriteriaValueDetail.  # noqa: E501
        :rtype: float
        """
        return self._EnergyRun

    @EnergyRun.setter
    def EnergyRun(self, EnergyRun):
        """Sets the EnergyRun of this CriteriaValueDetail.

        Energy level on the run  # noqa: E501

        :param EnergyRun: The EnergyRun of this CriteriaValueDetail.  # noqa: E501
        :type: float
        """

        self._EnergyRun = EnergyRun

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CriteriaValueDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CriteriaValueDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CriteriaValueDetail):
            return True

        return self.to_dict() != other.to_dict()

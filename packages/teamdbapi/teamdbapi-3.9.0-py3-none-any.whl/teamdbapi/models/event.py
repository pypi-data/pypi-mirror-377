# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'EventDate': 'datetime',
        'TrackId': 'str',
        'EventType': 'str',
        'LockStatus': 'str',
        'LockHostName': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'Revision': 'int',
        'ReplicationFilter': 'str'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'EventDate': 'EventDate',
        'TrackId': 'TrackId',
        'EventType': 'EventType',
        'LockStatus': 'LockStatus',
        'LockHostName': 'LockHostName',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'Revision': 'Revision',
        'ReplicationFilter': 'ReplicationFilter'
    }

    def __init__(self, Id=None, Name=None, EventDate=None, TrackId=None, EventType=None, LockStatus=None, LockHostName=None, LastUpdateDateUtc=None, LastUpdateUser=None, Revision=None, ReplicationFilter=None, _configuration=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._EventDate = None
        self._TrackId = None
        self._EventType = None
        self._LockStatus = None
        self._LockHostName = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._Revision = None
        self._ReplicationFilter = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        self.EventDate = EventDate
        self.TrackId = TrackId
        if EventType is not None:
            self.EventType = EventType
        if LockStatus is not None:
            self.LockStatus = LockStatus
        if LockHostName is not None:
            self.LockHostName = LockHostName
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if Revision is not None:
            self.Revision = Revision
        if ReplicationFilter is not None:
            self.ReplicationFilter = ReplicationFilter

    @property
    def Id(self):
        """Gets the Id of this Event.  # noqa: E501

        The unique event Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Event.  # noqa: E501

        :return: The Id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Event.

        The unique event Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Event.  # noqa: E501

        :param Id: The Id of this Event.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this Event.  # noqa: E501

        The event name  # noqa: E501

        :return: The Name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Event.

        The event name  # noqa: E501

        :param Name: The Name of this Event.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def EventDate(self):
        """Gets the EventDate of this Event.  # noqa: E501

        The event date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :return: The EventDate of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._EventDate

    @EventDate.setter
    def EventDate(self, EventDate):
        """Sets the EventDate of this Event.

        The event date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :param EventDate: The EventDate of this Event.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and EventDate is None:
            raise ValueError("Invalid value for `EventDate`, must not be `None`")  # noqa: E501

        self._EventDate = EventDate

    @property
    def TrackId(self):
        """Gets the TrackId of this Event.  # noqa: E501

        The track unique id where the event takes place.  # noqa: E501

        :return: The TrackId of this Event.  # noqa: E501
        :rtype: str
        """
        return self._TrackId

    @TrackId.setter
    def TrackId(self, TrackId):
        """Sets the TrackId of this Event.

        The track unique id where the event takes place.  # noqa: E501

        :param TrackId: The TrackId of this Event.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and TrackId is None:
            raise ValueError("Invalid value for `TrackId`, must not be `None`")  # noqa: E501

        self._TrackId = TrackId

    @property
    def EventType(self):
        """Gets the EventType of this Event.  # noqa: E501

        The type of the event.  # noqa: E501

        :return: The EventType of this Event.  # noqa: E501
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        """Sets the EventType of this Event.

        The type of the event.  # noqa: E501

        :param EventType: The EventType of this Event.  # noqa: E501
        :type: str
        """

        self._EventType = EventType

    @property
    def LockStatus(self):
        """Gets the LockStatus of this Event.  # noqa: E501

        The lock status of the event.  # noqa: E501

        :return: The LockStatus of this Event.  # noqa: E501
        :rtype: str
        """
        return self._LockStatus

    @LockStatus.setter
    def LockStatus(self, LockStatus):
        """Sets the LockStatus of this Event.

        The lock status of the event.  # noqa: E501

        :param LockStatus: The LockStatus of this Event.  # noqa: E501
        :type: str
        """
        allowed_values = ["Free", "LockedByAnotherServer", "LockedByMyServer"]  # noqa: E501
        if (self._configuration.client_side_validation and
                LockStatus not in allowed_values):
            raise ValueError(
                "Invalid value for `LockStatus` ({0}), must be one of {1}"  # noqa: E501
                .format(LockStatus, allowed_values)
            )

        self._LockStatus = LockStatus

    @property
    def LockHostName(self):
        """Gets the LockHostName of this Event.  # noqa: E501

        The name of the serveur which has locked the event.  # noqa: E501

        :return: The LockHostName of this Event.  # noqa: E501
        :rtype: str
        """
        return self._LockHostName

    @LockHostName.setter
    def LockHostName(self, LockHostName):
        """Sets the LockHostName of this Event.

        The name of the serveur which has locked the event.  # noqa: E501

        :param LockHostName: The LockHostName of this Event.  # noqa: E501
        :type: str
        """

        self._LockHostName = LockHostName

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Event.  # noqa: E501

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Event.

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Event.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Event.  # noqa: E501

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateUser of this Event.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Event.

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Event.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def Revision(self):
        """Gets the Revision of this Event.  # noqa: E501

        The revision number of the object.  # noqa: E501

        :return: The Revision of this Event.  # noqa: E501
        :rtype: int
        """
        return self._Revision

    @Revision.setter
    def Revision(self, Revision):
        """Sets the Revision of this Event.

        The revision number of the object.  # noqa: E501

        :param Revision: The Revision of this Event.  # noqa: E501
        :type: int
        """

        self._Revision = Revision

    @property
    def ReplicationFilter(self):
        """Gets the ReplicationFilter of this Event.  # noqa: E501

        The level of the filter used for the replication  # noqa: E501

        :return: The ReplicationFilter of this Event.  # noqa: E501
        :rtype: str
        """
        return self._ReplicationFilter

    @ReplicationFilter.setter
    def ReplicationFilter(self, ReplicationFilter):
        """Sets the ReplicationFilter of this Event.

        The level of the filter used for the replication  # noqa: E501

        :param ReplicationFilter: The ReplicationFilter of this Event.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotForReplication", "ForReplication"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ReplicationFilter not in allowed_values):
            raise ValueError(
                "Invalid value for `ReplicationFilter` ({0}), must be one of {1}"  # noqa: E501
                .format(ReplicationFilter, allowed_values)
            )

        self._ReplicationFilter = ReplicationFilter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class FileRevisionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'FilePath': 'str',
        'RevisionName': 'str',
        'RevisionMaturity': 'int',
        'RevisionComment': 'str'
    }

    attribute_map = {
        'FilePath': 'FilePath',
        'RevisionName': 'RevisionName',
        'RevisionMaturity': 'RevisionMaturity',
        'RevisionComment': 'RevisionComment'
    }

    def __init__(self, FilePath=None, RevisionName=None, RevisionMaturity=None, RevisionComment=None, _configuration=None):  # noqa: E501
        """FileRevisionInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._FilePath = None
        self._RevisionName = None
        self._RevisionMaturity = None
        self._RevisionComment = None
        self.discriminator = None

        self.FilePath = FilePath
        self.RevisionName = RevisionName
        if RevisionMaturity is not None:
            self.RevisionMaturity = RevisionMaturity
        if RevisionComment is not None:
            self.RevisionComment = RevisionComment

    @property
    def FilePath(self):
        """Gets the FilePath of this FileRevisionInfo.  # noqa: E501

        The path to the file containing the revisions to import  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The FilePath of this FileRevisionInfo.  # noqa: E501
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        """Sets the FilePath of this FileRevisionInfo.

        The path to the file containing the revisions to import  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :param FilePath: The FilePath of this FileRevisionInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and FilePath is None:
            raise ValueError("Invalid value for `FilePath`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                FilePath is not None and len(FilePath) < 1):
            raise ValueError("Invalid value for `FilePath`, length must be greater than or equal to `1`")  # noqa: E501

        self._FilePath = FilePath

    @property
    def RevisionName(self):
        """Gets the RevisionName of this FileRevisionInfo.  # noqa: E501

        The revision name used to create new revisions  # noqa: E501

        :return: The RevisionName of this FileRevisionInfo.  # noqa: E501
        :rtype: str
        """
        return self._RevisionName

    @RevisionName.setter
    def RevisionName(self, RevisionName):
        """Sets the RevisionName of this FileRevisionInfo.

        The revision name used to create new revisions  # noqa: E501

        :param RevisionName: The RevisionName of this FileRevisionInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and RevisionName is None:
            raise ValueError("Invalid value for `RevisionName`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                RevisionName is not None and len(RevisionName) < 1):
            raise ValueError("Invalid value for `RevisionName`, length must be greater than or equal to `1`")  # noqa: E501

        self._RevisionName = RevisionName

    @property
    def RevisionMaturity(self):
        """Gets the RevisionMaturity of this FileRevisionInfo.  # noqa: E501

        The revision maturity used when new revisions are created or null is not needed  # noqa: E501

        :return: The RevisionMaturity of this FileRevisionInfo.  # noqa: E501
        :rtype: int
        """
        return self._RevisionMaturity

    @RevisionMaturity.setter
    def RevisionMaturity(self, RevisionMaturity):
        """Sets the RevisionMaturity of this FileRevisionInfo.

        The revision maturity used when new revisions are created or null is not needed  # noqa: E501

        :param RevisionMaturity: The RevisionMaturity of this FileRevisionInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                RevisionMaturity is not None and RevisionMaturity > 100):  # noqa: E501
            raise ValueError("Invalid value for `RevisionMaturity`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                RevisionMaturity is not None and RevisionMaturity < 0):  # noqa: E501
            raise ValueError("Invalid value for `RevisionMaturity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._RevisionMaturity = RevisionMaturity

    @property
    def RevisionComment(self):
        """Gets the RevisionComment of this FileRevisionInfo.  # noqa: E501

        The revision comment used when new revisions are created or null is not needed  # noqa: E501

        :return: The RevisionComment of this FileRevisionInfo.  # noqa: E501
        :rtype: str
        """
        return self._RevisionComment

    @RevisionComment.setter
    def RevisionComment(self, RevisionComment):
        """Sets the RevisionComment of this FileRevisionInfo.

        The revision comment used when new revisions are created or null is not needed  # noqa: E501

        :param RevisionComment: The RevisionComment of this FileRevisionInfo.  # noqa: E501
        :type: str
        """

        self._RevisionComment = RevisionComment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileRevisionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileRevisionInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileRevisionInfo):
            return True

        return self.to_dict() != other.to_dict()

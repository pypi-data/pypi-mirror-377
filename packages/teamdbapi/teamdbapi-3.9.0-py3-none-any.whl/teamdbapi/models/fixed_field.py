# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class FixedField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'DisplayName': 'str',
        'PropertyName': 'str',
        'EntityType': 'str',
        'ValueType': 'str',
        'ReadOnly': 'bool',
        'TableReference': 'str',
        'IsComputable': 'bool',
        'Description': 'str'
    }

    attribute_map = {
        'Id': 'Id',
        'DisplayName': 'DisplayName',
        'PropertyName': 'PropertyName',
        'EntityType': 'EntityType',
        'ValueType': 'ValueType',
        'ReadOnly': 'ReadOnly',
        'TableReference': 'TableReference',
        'IsComputable': 'IsComputable',
        'Description': 'Description'
    }

    def __init__(self, Id=None, DisplayName=None, PropertyName=None, EntityType=None, ValueType=None, ReadOnly=None, TableReference=None, IsComputable=None, Description=None, _configuration=None):  # noqa: E501
        """FixedField - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._DisplayName = None
        self._PropertyName = None
        self._EntityType = None
        self._ValueType = None
        self._ReadOnly = None
        self._TableReference = None
        self._IsComputable = None
        self._Description = None
        self.discriminator = None

        self.Id = Id
        self.DisplayName = DisplayName
        self.PropertyName = PropertyName
        self.EntityType = EntityType
        self.ValueType = ValueType
        if ReadOnly is not None:
            self.ReadOnly = ReadOnly
        if TableReference is not None:
            self.TableReference = TableReference
        if IsComputable is not None:
            self.IsComputable = IsComputable
        if Description is not None:
            self.Description = Description

    @property
    def Id(self):
        """Gets the Id of this FixedField.  # noqa: E501

        The unique fixed field Id.  # noqa: E501

        :return: The Id of this FixedField.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this FixedField.

        The unique fixed field Id.  # noqa: E501

        :param Id: The Id of this FixedField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def DisplayName(self):
        """Gets the DisplayName of this FixedField.  # noqa: E501

        The fixed field display name.  # noqa: E501

        :return: The DisplayName of this FixedField.  # noqa: E501
        :rtype: str
        """
        return self._DisplayName

    @DisplayName.setter
    def DisplayName(self, DisplayName):
        """Sets the DisplayName of this FixedField.

        The fixed field display name.  # noqa: E501

        :param DisplayName: The DisplayName of this FixedField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and DisplayName is None:
            raise ValueError("Invalid value for `DisplayName`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                DisplayName is not None and len(DisplayName) < 1):
            raise ValueError("Invalid value for `DisplayName`, length must be greater than or equal to `1`")  # noqa: E501

        self._DisplayName = DisplayName

    @property
    def PropertyName(self):
        """Gets the PropertyName of this FixedField.  # noqa: E501

        The name of the property associated with the fixed field.  # noqa: E501

        :return: The PropertyName of this FixedField.  # noqa: E501
        :rtype: str
        """
        return self._PropertyName

    @PropertyName.setter
    def PropertyName(self, PropertyName):
        """Sets the PropertyName of this FixedField.

        The name of the property associated with the fixed field.  # noqa: E501

        :param PropertyName: The PropertyName of this FixedField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and PropertyName is None:
            raise ValueError("Invalid value for `PropertyName`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                PropertyName is not None and len(PropertyName) < 1):
            raise ValueError("Invalid value for `PropertyName`, length must be greater than or equal to `1`")  # noqa: E501

        self._PropertyName = PropertyName

    @property
    def EntityType(self):
        """Gets the EntityType of this FixedField.  # noqa: E501

        The entity type which contains the fixed field.  # noqa: E501

        :return: The EntityType of this FixedField.  # noqa: E501
        :rtype: str
        """
        return self._EntityType

    @EntityType.setter
    def EntityType(self, EntityType):
        """Sets the EntityType of this FixedField.

        The entity type which contains the fixed field.  # noqa: E501

        :param EntityType: The EntityType of this FixedField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and EntityType is None:
            raise ValueError("Invalid value for `EntityType`, must not be `None`")  # noqa: E501
        allowed_values = ["Event", "Session", "Run", "Lap", "Car", "Overall"]  # noqa: E501
        if (self._configuration.client_side_validation and
                EntityType not in allowed_values):
            raise ValueError(
                "Invalid value for `EntityType` ({0}), must be one of {1}"  # noqa: E501
                .format(EntityType, allowed_values)
            )

        self._EntityType = EntityType

    @property
    def ValueType(self):
        """Gets the ValueType of this FixedField.  # noqa: E501

        The fixed field value type.  # noqa: E501

        :return: The ValueType of this FixedField.  # noqa: E501
        :rtype: str
        """
        return self._ValueType

    @ValueType.setter
    def ValueType(self, ValueType):
        """Sets the ValueType of this FixedField.

        The fixed field value type.  # noqa: E501

        :param ValueType: The ValueType of this FixedField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ValueType is None:
            raise ValueError("Invalid value for `ValueType`, must not be `None`")  # noqa: E501
        allowed_values = ["Double", "String", "Bool", "TimeSpan", "DateTime", "TeamDBList", "Int", "Rtf", "StringMultiline", "TeamDBGrid", "Image", "File", "RevisionSelector", "RevisionEditor", "HyperlinkTextBox", "HyperlinkIntTextBox", "LifingRunMountingDiff", "Files", "Text", "Spreadsheet"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ValueType not in allowed_values):
            raise ValueError(
                "Invalid value for `ValueType` ({0}), must be one of {1}"  # noqa: E501
                .format(ValueType, allowed_values)
            )

        self._ValueType = ValueType

    @property
    def ReadOnly(self):
        """Gets the ReadOnly of this FixedField.  # noqa: E501

        Set to True for a read only fixed field.  # noqa: E501

        :return: The ReadOnly of this FixedField.  # noqa: E501
        :rtype: bool
        """
        return self._ReadOnly

    @ReadOnly.setter
    def ReadOnly(self, ReadOnly):
        """Sets the ReadOnly of this FixedField.

        Set to True for a read only fixed field.  # noqa: E501

        :param ReadOnly: The ReadOnly of this FixedField.  # noqa: E501
        :type: bool
        """

        self._ReadOnly = ReadOnly

    @property
    def TableReference(self):
        """Gets the TableReference of this FixedField.  # noqa: E501

        The table name if referenced for the data.  # noqa: E501

        :return: The TableReference of this FixedField.  # noqa: E501
        :rtype: str
        """
        return self._TableReference

    @TableReference.setter
    def TableReference(self, TableReference):
        """Sets the TableReference of this FixedField.

        The table name if referenced for the data.  # noqa: E501

        :param TableReference: The TableReference of this FixedField.  # noqa: E501
        :type: str
        """

        self._TableReference = TableReference

    @property
    def IsComputable(self):
        """Gets the IsComputable of this FixedField.  # noqa: E501

        Set to True if the fixed field can be used for a computed field.  # noqa: E501

        :return: The IsComputable of this FixedField.  # noqa: E501
        :rtype: bool
        """
        return self._IsComputable

    @IsComputable.setter
    def IsComputable(self, IsComputable):
        """Sets the IsComputable of this FixedField.

        Set to True if the fixed field can be used for a computed field.  # noqa: E501

        :param IsComputable: The IsComputable of this FixedField.  # noqa: E501
        :type: bool
        """

        self._IsComputable = IsComputable

    @property
    def Description(self):
        """Gets the Description of this FixedField.  # noqa: E501

        Description du FixedField  # noqa: E501

        :return: The Description of this FixedField.  # noqa: E501
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        """Sets the Description of this FixedField.

        Description du FixedField  # noqa: E501

        :param Description: The Description of this FixedField.  # noqa: E501
        :type: str
        """

        self._Description = Description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FixedField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FixedField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FixedField):
            return True

        return self.to_dict() != other.to_dict()

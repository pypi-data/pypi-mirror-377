# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class ImportParametersArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'VersionId': 'str',
        'FilePaths': 'list[str]',
        'RevisionName': 'str',
        'RevisionMaturity': 'int',
        'RevisionComment': 'str',
        'UseRevisionNamesFromAssembly': 'bool',
        'RevisionNamesFromAssemblyId': 'str',
        'UseRevisionCommentsFromAssembly': 'bool',
        'CreateAssembly': 'bool',
        'CreatedAssemblyName': 'str',
        'CreatedGroupRevisionsLikeSpecifiedVersion': 'bool',
        'IgnoreLoadFileWarning': 'bool'
    }

    attribute_map = {
        'VersionId': 'VersionId',
        'FilePaths': 'FilePaths',
        'RevisionName': 'RevisionName',
        'RevisionMaturity': 'RevisionMaturity',
        'RevisionComment': 'RevisionComment',
        'UseRevisionNamesFromAssembly': 'UseRevisionNamesFromAssembly',
        'RevisionNamesFromAssemblyId': 'RevisionNamesFromAssemblyId',
        'UseRevisionCommentsFromAssembly': 'UseRevisionCommentsFromAssembly',
        'CreateAssembly': 'CreateAssembly',
        'CreatedAssemblyName': 'CreatedAssemblyName',
        'CreatedGroupRevisionsLikeSpecifiedVersion': 'CreatedGroupRevisionsLikeSpecifiedVersion',
        'IgnoreLoadFileWarning': 'IgnoreLoadFileWarning'
    }

    def __init__(self, VersionId=None, FilePaths=None, RevisionName=None, RevisionMaturity=None, RevisionComment=None, UseRevisionNamesFromAssembly=None, RevisionNamesFromAssemblyId=None, UseRevisionCommentsFromAssembly=None, CreateAssembly=None, CreatedAssemblyName=None, CreatedGroupRevisionsLikeSpecifiedVersion=None, IgnoreLoadFileWarning=None, _configuration=None):  # noqa: E501
        """ImportParametersArgs - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._VersionId = None
        self._FilePaths = None
        self._RevisionName = None
        self._RevisionMaturity = None
        self._RevisionComment = None
        self._UseRevisionNamesFromAssembly = None
        self._RevisionNamesFromAssemblyId = None
        self._UseRevisionCommentsFromAssembly = None
        self._CreateAssembly = None
        self._CreatedAssemblyName = None
        self._CreatedGroupRevisionsLikeSpecifiedVersion = None
        self._IgnoreLoadFileWarning = None
        self.discriminator = None

        self.VersionId = VersionId
        self.FilePaths = FilePaths
        self.RevisionName = RevisionName
        if RevisionMaturity is not None:
            self.RevisionMaturity = RevisionMaturity
        if RevisionComment is not None:
            self.RevisionComment = RevisionComment
        self.UseRevisionNamesFromAssembly = UseRevisionNamesFromAssembly
        if RevisionNamesFromAssemblyId is not None:
            self.RevisionNamesFromAssemblyId = RevisionNamesFromAssemblyId
        if UseRevisionCommentsFromAssembly is not None:
            self.UseRevisionCommentsFromAssembly = UseRevisionCommentsFromAssembly
        self.CreateAssembly = CreateAssembly
        if CreatedAssemblyName is not None:
            self.CreatedAssemblyName = CreatedAssemblyName
        self.CreatedGroupRevisionsLikeSpecifiedVersion = CreatedGroupRevisionsLikeSpecifiedVersion
        self.IgnoreLoadFileWarning = IgnoreLoadFileWarning

    @property
    def VersionId(self):
        """Gets the VersionId of this ImportParametersArgs.  # noqa: E501

        The version unique identifier to which import the data  # noqa: E501

        :return: The VersionId of this ImportParametersArgs.  # noqa: E501
        :rtype: str
        """
        return self._VersionId

    @VersionId.setter
    def VersionId(self, VersionId):
        """Sets the VersionId of this ImportParametersArgs.

        The version unique identifier to which import the data  # noqa: E501

        :param VersionId: The VersionId of this ImportParametersArgs.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and VersionId is None:
            raise ValueError("Invalid value for `VersionId`, must not be `None`")  # noqa: E501

        self._VersionId = VersionId

    @property
    def FilePaths(self):
        """Gets the FilePaths of this ImportParametersArgs.  # noqa: E501

        The paths to the files to import  The paths must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The FilePaths of this ImportParametersArgs.  # noqa: E501
        :rtype: list[str]
        """
        return self._FilePaths

    @FilePaths.setter
    def FilePaths(self, FilePaths):
        """Sets the FilePaths of this ImportParametersArgs.

        The paths to the files to import  The paths must be described only by / or \\\\\\\\.  # noqa: E501

        :param FilePaths: The FilePaths of this ImportParametersArgs.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and FilePaths is None:
            raise ValueError("Invalid value for `FilePaths`, must not be `None`")  # noqa: E501

        self._FilePaths = FilePaths

    @property
    def RevisionName(self):
        """Gets the RevisionName of this ImportParametersArgs.  # noqa: E501

        The revision name used to create new revisions  # noqa: E501

        :return: The RevisionName of this ImportParametersArgs.  # noqa: E501
        :rtype: str
        """
        return self._RevisionName

    @RevisionName.setter
    def RevisionName(self, RevisionName):
        """Sets the RevisionName of this ImportParametersArgs.

        The revision name used to create new revisions  # noqa: E501

        :param RevisionName: The RevisionName of this ImportParametersArgs.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and RevisionName is None:
            raise ValueError("Invalid value for `RevisionName`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                RevisionName is not None and len(RevisionName) < 1):
            raise ValueError("Invalid value for `RevisionName`, length must be greater than or equal to `1`")  # noqa: E501

        self._RevisionName = RevisionName

    @property
    def RevisionMaturity(self):
        """Gets the RevisionMaturity of this ImportParametersArgs.  # noqa: E501

        The revision maturity used when new revisions are created or null is not needed  # noqa: E501

        :return: The RevisionMaturity of this ImportParametersArgs.  # noqa: E501
        :rtype: int
        """
        return self._RevisionMaturity

    @RevisionMaturity.setter
    def RevisionMaturity(self, RevisionMaturity):
        """Sets the RevisionMaturity of this ImportParametersArgs.

        The revision maturity used when new revisions are created or null is not needed  # noqa: E501

        :param RevisionMaturity: The RevisionMaturity of this ImportParametersArgs.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                RevisionMaturity is not None and RevisionMaturity > 100):  # noqa: E501
            raise ValueError("Invalid value for `RevisionMaturity`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                RevisionMaturity is not None and RevisionMaturity < 0):  # noqa: E501
            raise ValueError("Invalid value for `RevisionMaturity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._RevisionMaturity = RevisionMaturity

    @property
    def RevisionComment(self):
        """Gets the RevisionComment of this ImportParametersArgs.  # noqa: E501

        The revision comment used when new revisions are created or null is not needed  # noqa: E501

        :return: The RevisionComment of this ImportParametersArgs.  # noqa: E501
        :rtype: str
        """
        return self._RevisionComment

    @RevisionComment.setter
    def RevisionComment(self, RevisionComment):
        """Sets the RevisionComment of this ImportParametersArgs.

        The revision comment used when new revisions are created or null is not needed  # noqa: E501

        :param RevisionComment: The RevisionComment of this ImportParametersArgs.  # noqa: E501
        :type: str
        """

        self._RevisionComment = RevisionComment

    @property
    def UseRevisionNamesFromAssembly(self):
        """Gets the UseRevisionNamesFromAssembly of this ImportParametersArgs.  # noqa: E501

        Specify if the revision names used to create new revisions are generated from the assembly specified by RevisionNamesFromAssemblyId  # noqa: E501

        :return: The UseRevisionNamesFromAssembly of this ImportParametersArgs.  # noqa: E501
        :rtype: bool
        """
        return self._UseRevisionNamesFromAssembly

    @UseRevisionNamesFromAssembly.setter
    def UseRevisionNamesFromAssembly(self, UseRevisionNamesFromAssembly):
        """Sets the UseRevisionNamesFromAssembly of this ImportParametersArgs.

        Specify if the revision names used to create new revisions are generated from the assembly specified by RevisionNamesFromAssemblyId  # noqa: E501

        :param UseRevisionNamesFromAssembly: The UseRevisionNamesFromAssembly of this ImportParametersArgs.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and UseRevisionNamesFromAssembly is None:
            raise ValueError("Invalid value for `UseRevisionNamesFromAssembly`, must not be `None`")  # noqa: E501

        self._UseRevisionNamesFromAssembly = UseRevisionNamesFromAssembly

    @property
    def RevisionNamesFromAssemblyId(self):
        """Gets the RevisionNamesFromAssemblyId of this ImportParametersArgs.  # noqa: E501

        The assembly unique identifier used to generate the revision names when UseRevisionNamesFromAssembly is true  # noqa: E501

        :return: The RevisionNamesFromAssemblyId of this ImportParametersArgs.  # noqa: E501
        :rtype: str
        """
        return self._RevisionNamesFromAssemblyId

    @RevisionNamesFromAssemblyId.setter
    def RevisionNamesFromAssemblyId(self, RevisionNamesFromAssemblyId):
        """Sets the RevisionNamesFromAssemblyId of this ImportParametersArgs.

        The assembly unique identifier used to generate the revision names when UseRevisionNamesFromAssembly is true  # noqa: E501

        :param RevisionNamesFromAssemblyId: The RevisionNamesFromAssemblyId of this ImportParametersArgs.  # noqa: E501
        :type: str
        """

        self._RevisionNamesFromAssemblyId = RevisionNamesFromAssemblyId

    @property
    def UseRevisionCommentsFromAssembly(self):
        """Gets the UseRevisionCommentsFromAssembly of this ImportParametersArgs.  # noqa: E501

        Specify if the revision comments are copied from the assembly defined by RevisionNamesFromAssemblyId  # noqa: E501

        :return: The UseRevisionCommentsFromAssembly of this ImportParametersArgs.  # noqa: E501
        :rtype: bool
        """
        return self._UseRevisionCommentsFromAssembly

    @UseRevisionCommentsFromAssembly.setter
    def UseRevisionCommentsFromAssembly(self, UseRevisionCommentsFromAssembly):
        """Sets the UseRevisionCommentsFromAssembly of this ImportParametersArgs.

        Specify if the revision comments are copied from the assembly defined by RevisionNamesFromAssemblyId  # noqa: E501

        :param UseRevisionCommentsFromAssembly: The UseRevisionCommentsFromAssembly of this ImportParametersArgs.  # noqa: E501
        :type: bool
        """

        self._UseRevisionCommentsFromAssembly = UseRevisionCommentsFromAssembly

    @property
    def CreateAssembly(self):
        """Gets the CreateAssembly of this ImportParametersArgs.  # noqa: E501

        Specify if a new assembly must be created during the import  # noqa: E501

        :return: The CreateAssembly of this ImportParametersArgs.  # noqa: E501
        :rtype: bool
        """
        return self._CreateAssembly

    @CreateAssembly.setter
    def CreateAssembly(self, CreateAssembly):
        """Sets the CreateAssembly of this ImportParametersArgs.

        Specify if a new assembly must be created during the import  # noqa: E501

        :param CreateAssembly: The CreateAssembly of this ImportParametersArgs.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and CreateAssembly is None:
            raise ValueError("Invalid value for `CreateAssembly`, must not be `None`")  # noqa: E501

        self._CreateAssembly = CreateAssembly

    @property
    def CreatedAssemblyName(self):
        """Gets the CreatedAssemblyName of this ImportParametersArgs.  # noqa: E501

        The name used to create the new assembly when CreateAssembly is true  # noqa: E501

        :return: The CreatedAssemblyName of this ImportParametersArgs.  # noqa: E501
        :rtype: str
        """
        return self._CreatedAssemblyName

    @CreatedAssemblyName.setter
    def CreatedAssemblyName(self, CreatedAssemblyName):
        """Sets the CreatedAssemblyName of this ImportParametersArgs.

        The name used to create the new assembly when CreateAssembly is true  # noqa: E501

        :param CreatedAssemblyName: The CreatedAssemblyName of this ImportParametersArgs.  # noqa: E501
        :type: str
        """

        self._CreatedAssemblyName = CreatedAssemblyName

    @property
    def CreatedGroupRevisionsLikeSpecifiedVersion(self):
        """Gets the CreatedGroupRevisionsLikeSpecifiedVersion of this ImportParametersArgs.  # noqa: E501

        Specify if new group revision must be created automatically like those existing in the version.  # noqa: E501

        :return: The CreatedGroupRevisionsLikeSpecifiedVersion of this ImportParametersArgs.  # noqa: E501
        :rtype: bool
        """
        return self._CreatedGroupRevisionsLikeSpecifiedVersion

    @CreatedGroupRevisionsLikeSpecifiedVersion.setter
    def CreatedGroupRevisionsLikeSpecifiedVersion(self, CreatedGroupRevisionsLikeSpecifiedVersion):
        """Sets the CreatedGroupRevisionsLikeSpecifiedVersion of this ImportParametersArgs.

        Specify if new group revision must be created automatically like those existing in the version.  # noqa: E501

        :param CreatedGroupRevisionsLikeSpecifiedVersion: The CreatedGroupRevisionsLikeSpecifiedVersion of this ImportParametersArgs.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and CreatedGroupRevisionsLikeSpecifiedVersion is None:
            raise ValueError("Invalid value for `CreatedGroupRevisionsLikeSpecifiedVersion`, must not be `None`")  # noqa: E501

        self._CreatedGroupRevisionsLikeSpecifiedVersion = CreatedGroupRevisionsLikeSpecifiedVersion

    @property
    def IgnoreLoadFileWarning(self):
        """Gets the IgnoreLoadFileWarning of this ImportParametersArgs.  # noqa: E501

        True to ignore the warnings detected before importing the file and continue the import process if they are not blocking.  False to stop the import if a warning is detected.  # noqa: E501

        :return: The IgnoreLoadFileWarning of this ImportParametersArgs.  # noqa: E501
        :rtype: bool
        """
        return self._IgnoreLoadFileWarning

    @IgnoreLoadFileWarning.setter
    def IgnoreLoadFileWarning(self, IgnoreLoadFileWarning):
        """Sets the IgnoreLoadFileWarning of this ImportParametersArgs.

        True to ignore the warnings detected before importing the file and continue the import process if they are not blocking.  False to stop the import if a warning is detected.  # noqa: E501

        :param IgnoreLoadFileWarning: The IgnoreLoadFileWarning of this ImportParametersArgs.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and IgnoreLoadFileWarning is None:
            raise ValueError("Invalid value for `IgnoreLoadFileWarning`, must not be `None`")  # noqa: E501

        self._IgnoreLoadFileWarning = IgnoreLoadFileWarning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportParametersArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportParametersArgs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportParametersArgs):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class ImportRevisionsArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'VersionId': 'str',
        'FileRevisionInfos': 'list[FileRevisionInfo]',
        'IgnoreLoadFileWarning': 'bool'
    }

    attribute_map = {
        'VersionId': 'VersionId',
        'FileRevisionInfos': 'FileRevisionInfos',
        'IgnoreLoadFileWarning': 'IgnoreLoadFileWarning'
    }

    def __init__(self, VersionId=None, FileRevisionInfos=None, IgnoreLoadFileWarning=None, _configuration=None):  # noqa: E501
        """ImportRevisionsArgs - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._VersionId = None
        self._FileRevisionInfos = None
        self._IgnoreLoadFileWarning = None
        self.discriminator = None

        self.VersionId = VersionId
        self.FileRevisionInfos = FileRevisionInfos
        self.IgnoreLoadFileWarning = IgnoreLoadFileWarning

    @property
    def VersionId(self):
        """Gets the VersionId of this ImportRevisionsArgs.  # noqa: E501

        The version unique identifier to which import the data  # noqa: E501

        :return: The VersionId of this ImportRevisionsArgs.  # noqa: E501
        :rtype: str
        """
        return self._VersionId

    @VersionId.setter
    def VersionId(self, VersionId):
        """Sets the VersionId of this ImportRevisionsArgs.

        The version unique identifier to which import the data  # noqa: E501

        :param VersionId: The VersionId of this ImportRevisionsArgs.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and VersionId is None:
            raise ValueError("Invalid value for `VersionId`, must not be `None`")  # noqa: E501

        self._VersionId = VersionId

    @property
    def FileRevisionInfos(self):
        """Gets the FileRevisionInfos of this ImportRevisionsArgs.  # noqa: E501

        The paths to the files to import  # noqa: E501

        :return: The FileRevisionInfos of this ImportRevisionsArgs.  # noqa: E501
        :rtype: list[FileRevisionInfo]
        """
        return self._FileRevisionInfos

    @FileRevisionInfos.setter
    def FileRevisionInfos(self, FileRevisionInfos):
        """Sets the FileRevisionInfos of this ImportRevisionsArgs.

        The paths to the files to import  # noqa: E501

        :param FileRevisionInfos: The FileRevisionInfos of this ImportRevisionsArgs.  # noqa: E501
        :type: list[FileRevisionInfo]
        """
        if self._configuration.client_side_validation and FileRevisionInfos is None:
            raise ValueError("Invalid value for `FileRevisionInfos`, must not be `None`")  # noqa: E501

        self._FileRevisionInfos = FileRevisionInfos

    @property
    def IgnoreLoadFileWarning(self):
        """Gets the IgnoreLoadFileWarning of this ImportRevisionsArgs.  # noqa: E501

        True to ignore the warnings detected before importing the file and continue the import process if they are not blocking.  False to stop the import if a warning is detected.  # noqa: E501

        :return: The IgnoreLoadFileWarning of this ImportRevisionsArgs.  # noqa: E501
        :rtype: bool
        """
        return self._IgnoreLoadFileWarning

    @IgnoreLoadFileWarning.setter
    def IgnoreLoadFileWarning(self, IgnoreLoadFileWarning):
        """Sets the IgnoreLoadFileWarning of this ImportRevisionsArgs.

        True to ignore the warnings detected before importing the file and continue the import process if they are not blocking.  False to stop the import if a warning is detected.  # noqa: E501

        :param IgnoreLoadFileWarning: The IgnoreLoadFileWarning of this ImportRevisionsArgs.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and IgnoreLoadFileWarning is None:
            raise ValueError("Invalid value for `IgnoreLoadFileWarning`, must not be `None`")  # noqa: E501

        self._IgnoreLoadFileWarning = IgnoreLoadFileWarning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportRevisionsArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportRevisionsArgs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportRevisionsArgs):
            return True

        return self.to_dict() != other.to_dict()

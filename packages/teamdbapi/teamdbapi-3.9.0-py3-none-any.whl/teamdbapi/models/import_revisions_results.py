# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class ImportRevisionsResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'BeforeImportWarning': 'str',
        'ImportReportResult': 'str',
        'Revisions': 'list[ImportRevisionsInfo]'
    }

    attribute_map = {
        'BeforeImportWarning': 'BeforeImportWarning',
        'ImportReportResult': 'ImportReportResult',
        'Revisions': 'Revisions'
    }

    def __init__(self, BeforeImportWarning=None, ImportReportResult=None, Revisions=None, _configuration=None):  # noqa: E501
        """ImportRevisionsResults - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._BeforeImportWarning = None
        self._ImportReportResult = None
        self._Revisions = None
        self.discriminator = None

        if BeforeImportWarning is not None:
            self.BeforeImportWarning = BeforeImportWarning
        if ImportReportResult is not None:
            self.ImportReportResult = ImportReportResult
        if Revisions is not None:
            self.Revisions = Revisions

    @property
    def BeforeImportWarning(self):
        """Gets the BeforeImportWarning of this ImportRevisionsResults.  # noqa: E501

        Warning before import  # noqa: E501

        :return: The BeforeImportWarning of this ImportRevisionsResults.  # noqa: E501
        :rtype: str
        """
        return self._BeforeImportWarning

    @BeforeImportWarning.setter
    def BeforeImportWarning(self, BeforeImportWarning):
        """Sets the BeforeImportWarning of this ImportRevisionsResults.

        Warning before import  # noqa: E501

        :param BeforeImportWarning: The BeforeImportWarning of this ImportRevisionsResults.  # noqa: E501
        :type: str
        """

        self._BeforeImportWarning = BeforeImportWarning

    @property
    def ImportReportResult(self):
        """Gets the ImportReportResult of this ImportRevisionsResults.  # noqa: E501

        The import report result  # noqa: E501

        :return: The ImportReportResult of this ImportRevisionsResults.  # noqa: E501
        :rtype: str
        """
        return self._ImportReportResult

    @ImportReportResult.setter
    def ImportReportResult(self, ImportReportResult):
        """Sets the ImportReportResult of this ImportRevisionsResults.

        The import report result  # noqa: E501

        :param ImportReportResult: The ImportReportResult of this ImportRevisionsResults.  # noqa: E501
        :type: str
        """

        self._ImportReportResult = ImportReportResult

    @property
    def Revisions(self):
        """Gets the Revisions of this ImportRevisionsResults.  # noqa: E501

        The revisions created for each parameter or not  # noqa: E501

        :return: The Revisions of this ImportRevisionsResults.  # noqa: E501
        :rtype: list[ImportRevisionsInfo]
        """
        return self._Revisions

    @Revisions.setter
    def Revisions(self, Revisions):
        """Sets the Revisions of this ImportRevisionsResults.

        The revisions created for each parameter or not  # noqa: E501

        :param Revisions: The Revisions of this ImportRevisionsResults.  # noqa: E501
        :type: list[ImportRevisionsInfo]
        """

        self._Revisions = Revisions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportRevisionsResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportRevisionsResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportRevisionsResults):
            return True

        return self.to_dict() != other.to_dict()

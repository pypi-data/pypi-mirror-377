# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class IssueCustomFieldValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'Description': 'str',
        'Type': 'str',
        'IssueWorkflowId': 'str',
        'DefaultValue': 'str',
        'ListDataSource': 'str',
        'Value': 'str'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'Description': 'Description',
        'Type': 'Type',
        'IssueWorkflowId': 'IssueWorkflowId',
        'DefaultValue': 'DefaultValue',
        'ListDataSource': 'ListDataSource',
        'Value': 'Value'
    }

    def __init__(self, Id=None, Name=None, Description=None, Type=None, IssueWorkflowId=None, DefaultValue=None, ListDataSource=None, Value=None, _configuration=None):  # noqa: E501
        """IssueCustomFieldValue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._Description = None
        self._Type = None
        self._IssueWorkflowId = None
        self._DefaultValue = None
        self._ListDataSource = None
        self._Value = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        if Description is not None:
            self.Description = Description
        self.Type = Type
        self.IssueWorkflowId = IssueWorkflowId
        if DefaultValue is not None:
            self.DefaultValue = DefaultValue
        if ListDataSource is not None:
            self.ListDataSource = ListDataSource
        if Value is not None:
            self.Value = Value

    @property
    def Id(self):
        """Gets the Id of this IssueCustomFieldValue.  # noqa: E501

        Id of the Issue Custom Field  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new custom field  # noqa: E501

        :return: The Id of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this IssueCustomFieldValue.

        Id of the Issue Custom Field  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new custom field  # noqa: E501

        :param Id: The Id of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this IssueCustomFieldValue.  # noqa: E501

        Name of the custom field  # noqa: E501

        :return: The Name of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this IssueCustomFieldValue.

        Name of the custom field  # noqa: E501

        :param Name: The Name of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def Description(self):
        """Gets the Description of this IssueCustomFieldValue.  # noqa: E501

        Description of the custom field  # noqa: E501

        :return: The Description of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        """Sets the Description of this IssueCustomFieldValue.

        Description of the custom field  # noqa: E501

        :param Description: The Description of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._Description = Description

    @property
    def Type(self):
        """Gets the Type of this IssueCustomFieldValue.  # noqa: E501

        Type of the custom field  # noqa: E501

        :return: The Type of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        """Sets the Type of this IssueCustomFieldValue.

        Type of the custom field  # noqa: E501

        :param Type: The Type of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Type is None:
            raise ValueError("Invalid value for `Type`, must not be `None`")  # noqa: E501
        allowed_values = ["String", "Date", "Decimal", "List", "MediaFile", "User"]  # noqa: E501
        if (self._configuration.client_side_validation and
                Type not in allowed_values):
            raise ValueError(
                "Invalid value for `Type` ({0}), must be one of {1}"  # noqa: E501
                .format(Type, allowed_values)
            )

        self._Type = Type

    @property
    def IssueWorkflowId(self):
        """Gets the IssueWorkflowId of this IssueCustomFieldValue.  # noqa: E501

        Unique identifier of the workflow the custom field belong to  # noqa: E501

        :return: The IssueWorkflowId of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._IssueWorkflowId

    @IssueWorkflowId.setter
    def IssueWorkflowId(self, IssueWorkflowId):
        """Sets the IssueWorkflowId of this IssueCustomFieldValue.

        Unique identifier of the workflow the custom field belong to  # noqa: E501

        :param IssueWorkflowId: The IssueWorkflowId of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and IssueWorkflowId is None:
            raise ValueError("Invalid value for `IssueWorkflowId`, must not be `None`")  # noqa: E501

        self._IssueWorkflowId = IssueWorkflowId

    @property
    def DefaultValue(self):
        """Gets the DefaultValue of this IssueCustomFieldValue.  # noqa: E501

        Default value of the custom field  # noqa: E501

        :return: The DefaultValue of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._DefaultValue

    @DefaultValue.setter
    def DefaultValue(self, DefaultValue):
        """Sets the DefaultValue of this IssueCustomFieldValue.

        Default value of the custom field  # noqa: E501

        :param DefaultValue: The DefaultValue of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._DefaultValue = DefaultValue

    @property
    def ListDataSource(self):
        """Gets the ListDataSource of this IssueCustomFieldValue.  # noqa: E501

        Unique identifier of the source list. Only for custom field of type : List  # noqa: E501

        :return: The ListDataSource of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._ListDataSource

    @ListDataSource.setter
    def ListDataSource(self, ListDataSource):
        """Sets the ListDataSource of this IssueCustomFieldValue.

        Unique identifier of the source list. Only for custom field of type : List  # noqa: E501

        :param ListDataSource: The ListDataSource of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._ListDataSource = ListDataSource

    @property
    def Value(self):
        """Gets the Value of this IssueCustomFieldValue.  # noqa: E501

        Value of the custom field  # noqa: E501

        :return: The Value of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        """Sets the Value of this IssueCustomFieldValue.

        Value of the custom field  # noqa: E501

        :param Value: The Value of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._Value = Value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueCustomFieldValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueCustomFieldValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IssueCustomFieldValue):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class ItemValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ModelFieldId': 'str',
        'ParentItemId': 'str',
        'Value': 'object'
    }

    attribute_map = {
        'ModelFieldId': 'ModelFieldId',
        'ParentItemId': 'ParentItemId',
        'Value': 'Value'
    }

    def __init__(self, ModelFieldId=None, ParentItemId=None, Value=None, _configuration=None):  # noqa: E501
        """ItemValue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ModelFieldId = None
        self._ParentItemId = None
        self._Value = None
        self.discriminator = None

        self.ModelFieldId = ModelFieldId
        self.ParentItemId = ParentItemId
        if Value is not None:
            self.Value = Value

    @property
    def ModelFieldId(self):
        """Gets the ModelFieldId of this ItemValue.  # noqa: E501

        The model field id to which the value is linked  # noqa: E501

        :return: The ModelFieldId of this ItemValue.  # noqa: E501
        :rtype: str
        """
        return self._ModelFieldId

    @ModelFieldId.setter
    def ModelFieldId(self, ModelFieldId):
        """Sets the ModelFieldId of this ItemValue.

        The model field id to which the value is linked  # noqa: E501

        :param ModelFieldId: The ModelFieldId of this ItemValue.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ModelFieldId is None:
            raise ValueError("Invalid value for `ModelFieldId`, must not be `None`")  # noqa: E501

        self._ModelFieldId = ModelFieldId

    @property
    def ParentItemId(self):
        """Gets the ParentItemId of this ItemValue.  # noqa: E501

        The id of the parent entity (event, car, session, run, lap) which owns the value.  # noqa: E501

        :return: The ParentItemId of this ItemValue.  # noqa: E501
        :rtype: str
        """
        return self._ParentItemId

    @ParentItemId.setter
    def ParentItemId(self, ParentItemId):
        """Sets the ParentItemId of this ItemValue.

        The id of the parent entity (event, car, session, run, lap) which owns the value.  # noqa: E501

        :param ParentItemId: The ParentItemId of this ItemValue.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ParentItemId is None:
            raise ValueError("Invalid value for `ParentItemId`, must not be `None`")  # noqa: E501

        self._ParentItemId = ParentItemId

    @property
    def Value(self):
        """Gets the Value of this ItemValue.  # noqa: E501

        The value object.  # noqa: E501

        :return: The Value of this ItemValue.  # noqa: E501
        :rtype: object
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        """Sets the Value of this ItemValue.

        The value object.  # noqa: E501

        :param Value: The Value of this ItemValue.  # noqa: E501
        :type: object
        """

        self._Value = Value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemValue):
            return True

        return self.to_dict() != other.to_dict()

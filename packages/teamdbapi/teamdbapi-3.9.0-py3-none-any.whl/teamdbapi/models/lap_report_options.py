# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class LapReportOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'UseSingleLapMode': 'bool',
        'LapReportFileFormat': 'str',
        'LapReportFilePath': 'str'
    }

    attribute_map = {
        'UseSingleLapMode': 'UseSingleLapMode',
        'LapReportFileFormat': 'LapReportFileFormat',
        'LapReportFilePath': 'LapReportFilePath'
    }

    def __init__(self, UseSingleLapMode=None, LapReportFileFormat=None, LapReportFilePath=None, _configuration=None):  # noqa: E501
        """LapReportOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._UseSingleLapMode = None
        self._LapReportFileFormat = None
        self._LapReportFilePath = None
        self.discriminator = None

        self.UseSingleLapMode = UseSingleLapMode
        self.LapReportFileFormat = LapReportFileFormat
        if LapReportFilePath is not None:
            self.LapReportFilePath = LapReportFilePath

    @property
    def UseSingleLapMode(self):
        """Gets the UseSingleLapMode of this LapReportOptions.  # noqa: E501

        A boolean value that specifies if you want to read only the last lap in the lap report. When the value is false then all the laps will be read  # noqa: E501

        :return: The UseSingleLapMode of this LapReportOptions.  # noqa: E501
        :rtype: bool
        """
        return self._UseSingleLapMode

    @UseSingleLapMode.setter
    def UseSingleLapMode(self, UseSingleLapMode):
        """Sets the UseSingleLapMode of this LapReportOptions.

        A boolean value that specifies if you want to read only the last lap in the lap report. When the value is false then all the laps will be read  # noqa: E501

        :param UseSingleLapMode: The UseSingleLapMode of this LapReportOptions.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and UseSingleLapMode is None:
            raise ValueError("Invalid value for `UseSingleLapMode`, must not be `None`")  # noqa: E501

        self._UseSingleLapMode = UseSingleLapMode

    @property
    def LapReportFileFormat(self):
        """Gets the LapReportFileFormat of this LapReportOptions.  # noqa: E501

        The lap report file format : Wintax or Atlas  # noqa: E501

        :return: The LapReportFileFormat of this LapReportOptions.  # noqa: E501
        :rtype: str
        """
        return self._LapReportFileFormat

    @LapReportFileFormat.setter
    def LapReportFileFormat(self, LapReportFileFormat):
        """Sets the LapReportFileFormat of this LapReportOptions.

        The lap report file format : Wintax or Atlas  # noqa: E501

        :param LapReportFileFormat: The LapReportFileFormat of this LapReportOptions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and LapReportFileFormat is None:
            raise ValueError("Invalid value for `LapReportFileFormat`, must not be `None`")  # noqa: E501
        allowed_values = ["Wintax", "Atlas"]  # noqa: E501
        if (self._configuration.client_side_validation and
                LapReportFileFormat not in allowed_values):
            raise ValueError(
                "Invalid value for `LapReportFileFormat` ({0}), must be one of {1}"  # noqa: E501
                .format(LapReportFileFormat, allowed_values)
            )

        self._LapReportFileFormat = LapReportFileFormat

    @property
    def LapReportFilePath(self):
        """Gets the LapReportFilePath of this LapReportOptions.  # noqa: E501

        The file path to the lap report.   You have to provide the file extension for example : C:/path/MyFile.csv.  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The LapReportFilePath of this LapReportOptions.  # noqa: E501
        :rtype: str
        """
        return self._LapReportFilePath

    @LapReportFilePath.setter
    def LapReportFilePath(self, LapReportFilePath):
        """Sets the LapReportFilePath of this LapReportOptions.

        The file path to the lap report.   You have to provide the file extension for example : C:/path/MyFile.csv.  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :param LapReportFilePath: The LapReportFilePath of this LapReportOptions.  # noqa: E501
        :type: str
        """

        self._LapReportFilePath = LapReportFilePath

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LapReportOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LapReportOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LapReportOptions):
            return True

        return self.to_dict() != other.to_dict()

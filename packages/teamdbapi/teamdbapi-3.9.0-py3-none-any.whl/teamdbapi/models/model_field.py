# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class ModelField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'Description': 'str',
        'TypeOfModelField': 'str',
        'TypeOfValue': 'str',
        'TypeOfValueSource': 'str',
        'SourcePath': 'str',
        'SourceTag': 'str',
        'Followed': 'bool',
        'Duplicate': 'bool',
        'IsComputedField': 'bool',
        'CalculType': 'str',
        'TargetModelFieldId': 'str',
        'ExportValueName': 'str',
        'ExportConstantFileName': 'str',
        'ListId': 'str',
        'ItemListCanBeAdd': 'bool',
        'RevisionSelectorParam': 'list[CoupleGuidText]',
        'RevisionSelectorShowOnlyGroupRev': 'bool',
        'RevisionEditorDisplayFormat': 'str',
        'ScriptContent': 'str',
        'UseInvalidLapForCalculation': 'bool',
        'Tags': 'str',
        'DefaultValue': 'object'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'Description': 'Description',
        'TypeOfModelField': 'TypeOfModelField',
        'TypeOfValue': 'TypeOfValue',
        'TypeOfValueSource': 'TypeOfValueSource',
        'SourcePath': 'SourcePath',
        'SourceTag': 'SourceTag',
        'Followed': 'Followed',
        'Duplicate': 'Duplicate',
        'IsComputedField': 'IsComputedField',
        'CalculType': 'CalculType',
        'TargetModelFieldId': 'TargetModelFieldId',
        'ExportValueName': 'ExportValueName',
        'ExportConstantFileName': 'ExportConstantFileName',
        'ListId': 'ListId',
        'ItemListCanBeAdd': 'ItemListCanBeAdd',
        'RevisionSelectorParam': 'RevisionSelectorParam',
        'RevisionSelectorShowOnlyGroupRev': 'RevisionSelectorShowOnlyGroupRev',
        'RevisionEditorDisplayFormat': 'RevisionEditorDisplayFormat',
        'ScriptContent': 'ScriptContent',
        'UseInvalidLapForCalculation': 'UseInvalidLapForCalculation',
        'Tags': 'Tags',
        'DefaultValue': 'DefaultValue'
    }

    def __init__(self, Id=None, Name=None, Description=None, TypeOfModelField=None, TypeOfValue=None, TypeOfValueSource=None, SourcePath=None, SourceTag=None, Followed=None, Duplicate=None, IsComputedField=None, CalculType=None, TargetModelFieldId=None, ExportValueName=None, ExportConstantFileName=None, ListId=None, ItemListCanBeAdd=None, RevisionSelectorParam=None, RevisionSelectorShowOnlyGroupRev=None, RevisionEditorDisplayFormat=None, ScriptContent=None, UseInvalidLapForCalculation=None, Tags=None, DefaultValue=None, _configuration=None):  # noqa: E501
        """ModelField - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._Description = None
        self._TypeOfModelField = None
        self._TypeOfValue = None
        self._TypeOfValueSource = None
        self._SourcePath = None
        self._SourceTag = None
        self._Followed = None
        self._Duplicate = None
        self._IsComputedField = None
        self._CalculType = None
        self._TargetModelFieldId = None
        self._ExportValueName = None
        self._ExportConstantFileName = None
        self._ListId = None
        self._ItemListCanBeAdd = None
        self._RevisionSelectorParam = None
        self._RevisionSelectorShowOnlyGroupRev = None
        self._RevisionEditorDisplayFormat = None
        self._ScriptContent = None
        self._UseInvalidLapForCalculation = None
        self._Tags = None
        self._DefaultValue = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        if Description is not None:
            self.Description = Description
        self.TypeOfModelField = TypeOfModelField
        self.TypeOfValue = TypeOfValue
        if TypeOfValueSource is not None:
            self.TypeOfValueSource = TypeOfValueSource
        if SourcePath is not None:
            self.SourcePath = SourcePath
        if SourceTag is not None:
            self.SourceTag = SourceTag
        if Followed is not None:
            self.Followed = Followed
        if Duplicate is not None:
            self.Duplicate = Duplicate
        if IsComputedField is not None:
            self.IsComputedField = IsComputedField
        if CalculType is not None:
            self.CalculType = CalculType
        if TargetModelFieldId is not None:
            self.TargetModelFieldId = TargetModelFieldId
        if ExportValueName is not None:
            self.ExportValueName = ExportValueName
        if ExportConstantFileName is not None:
            self.ExportConstantFileName = ExportConstantFileName
        if ListId is not None:
            self.ListId = ListId
        if ItemListCanBeAdd is not None:
            self.ItemListCanBeAdd = ItemListCanBeAdd
        if RevisionSelectorParam is not None:
            self.RevisionSelectorParam = RevisionSelectorParam
        if RevisionSelectorShowOnlyGroupRev is not None:
            self.RevisionSelectorShowOnlyGroupRev = RevisionSelectorShowOnlyGroupRev
        if RevisionEditorDisplayFormat is not None:
            self.RevisionEditorDisplayFormat = RevisionEditorDisplayFormat
        if ScriptContent is not None:
            self.ScriptContent = ScriptContent
        if UseInvalidLapForCalculation is not None:
            self.UseInvalidLapForCalculation = UseInvalidLapForCalculation
        if Tags is not None:
            self.Tags = Tags
        if DefaultValue is not None:
            self.DefaultValue = DefaultValue

    @property
    def Id(self):
        """Gets the Id of this ModelField.  # noqa: E501

        The unique model field Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Model Field.  # noqa: E501

        :return: The Id of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this ModelField.

        The unique model field Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Model Field.  # noqa: E501

        :param Id: The Id of this ModelField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this ModelField.  # noqa: E501

        The model field name  # noqa: E501

        :return: The Name of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this ModelField.

        The model field name  # noqa: E501

        :param Name: The Name of this ModelField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def Description(self):
        """Gets the Description of this ModelField.  # noqa: E501

        The model field description  # noqa: E501

        :return: The Description of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        """Sets the Description of this ModelField.

        The model field description  # noqa: E501

        :param Description: The Description of this ModelField.  # noqa: E501
        :type: str
        """

        self._Description = Description

    @property
    def TypeOfModelField(self):
        """Gets the TypeOfModelField of this ModelField.  # noqa: E501

        The model field type.  # noqa: E501

        :return: The TypeOfModelField of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._TypeOfModelField

    @TypeOfModelField.setter
    def TypeOfModelField(self, TypeOfModelField):
        """Sets the TypeOfModelField of this ModelField.

        The model field type.  # noqa: E501

        :param TypeOfModelField: The TypeOfModelField of this ModelField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and TypeOfModelField is None:
            raise ValueError("Invalid value for `TypeOfModelField`, must not be `None`")  # noqa: E501
        allowed_values = ["Event", "Session", "Run", "Lap", "Car", "Overall"]  # noqa: E501
        if (self._configuration.client_side_validation and
                TypeOfModelField not in allowed_values):
            raise ValueError(
                "Invalid value for `TypeOfModelField` ({0}), must be one of {1}"  # noqa: E501
                .format(TypeOfModelField, allowed_values)
            )

        self._TypeOfModelField = TypeOfModelField

    @property
    def TypeOfValue(self):
        """Gets the TypeOfValue of this ModelField.  # noqa: E501

        The model field value type.  # noqa: E501

        :return: The TypeOfValue of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._TypeOfValue

    @TypeOfValue.setter
    def TypeOfValue(self, TypeOfValue):
        """Sets the TypeOfValue of this ModelField.

        The model field value type.  # noqa: E501

        :param TypeOfValue: The TypeOfValue of this ModelField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and TypeOfValue is None:
            raise ValueError("Invalid value for `TypeOfValue`, must not be `None`")  # noqa: E501
        allowed_values = ["Double", "String", "Bool", "TimeSpan", "DateTime", "TeamDBList", "Int", "Rtf", "StringMultiline", "TeamDBGrid", "Image", "File", "RevisionSelector", "RevisionEditor", "HyperlinkTextBox", "HyperlinkIntTextBox", "LifingRunMountingDiff", "Files", "Text", "Spreadsheet"]  # noqa: E501
        if (self._configuration.client_side_validation and
                TypeOfValue not in allowed_values):
            raise ValueError(
                "Invalid value for `TypeOfValue` ({0}), must be one of {1}"  # noqa: E501
                .format(TypeOfValue, allowed_values)
            )

        self._TypeOfValue = TypeOfValue

    @property
    def TypeOfValueSource(self):
        """Gets the TypeOfValueSource of this ModelField.  # noqa: E501

        The model field value source.  # noqa: E501

        :return: The TypeOfValueSource of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._TypeOfValueSource

    @TypeOfValueSource.setter
    def TypeOfValueSource(self, TypeOfValueSource):
        """Sets the TypeOfValueSource of this ModelField.

        The model field value source.  # noqa: E501

        :param TypeOfValueSource: The TypeOfValueSource of this ModelField.  # noqa: E501
        :type: str
        """
        allowed_values = ["Manual", "LapReport", "Excel", "Spc", "Server"]  # noqa: E501
        if (self._configuration.client_side_validation and
                TypeOfValueSource not in allowed_values):
            raise ValueError(
                "Invalid value for `TypeOfValueSource` ({0}), must be one of {1}"  # noqa: E501
                .format(TypeOfValueSource, allowed_values)
            )

        self._TypeOfValueSource = TypeOfValueSource

    @property
    def SourcePath(self):
        """Gets the SourcePath of this ModelField.  # noqa: E501

        The model field value source path.  # noqa: E501

        :return: The SourcePath of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._SourcePath

    @SourcePath.setter
    def SourcePath(self, SourcePath):
        """Sets the SourcePath of this ModelField.

        The model field value source path.  # noqa: E501

        :param SourcePath: The SourcePath of this ModelField.  # noqa: E501
        :type: str
        """

        self._SourcePath = SourcePath

    @property
    def SourceTag(self):
        """Gets the SourceTag of this ModelField.  # noqa: E501

        The location of informations into the value source.  # noqa: E501

        :return: The SourceTag of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._SourceTag

    @SourceTag.setter
    def SourceTag(self, SourceTag):
        """Sets the SourceTag of this ModelField.

        The location of informations into the value source.  # noqa: E501

        :param SourceTag: The SourceTag of this ModelField.  # noqa: E501
        :type: str
        """

        self._SourceTag = SourceTag

    @property
    def Followed(self):
        """Gets the Followed of this ModelField.  # noqa: E501

        Set to True to automatically use a value when the field is created.  # noqa: E501

        :return: The Followed of this ModelField.  # noqa: E501
        :rtype: bool
        """
        return self._Followed

    @Followed.setter
    def Followed(self, Followed):
        """Sets the Followed of this ModelField.

        Set to True to automatically use a value when the field is created.  # noqa: E501

        :param Followed: The Followed of this ModelField.  # noqa: E501
        :type: bool
        """

        self._Followed = Followed

    @property
    def Duplicate(self):
        """Gets the Duplicate of this ModelField.  # noqa: E501

        Set to True to use previous value when the field is created.  # noqa: E501

        :return: The Duplicate of this ModelField.  # noqa: E501
        :rtype: bool
        """
        return self._Duplicate

    @Duplicate.setter
    def Duplicate(self, Duplicate):
        """Sets the Duplicate of this ModelField.

        Set to True to use previous value when the field is created.  # noqa: E501

        :param Duplicate: The Duplicate of this ModelField.  # noqa: E501
        :type: bool
        """

        self._Duplicate = Duplicate

    @property
    def IsComputedField(self):
        """Gets the IsComputedField of this ModelField.  # noqa: E501

        Set to True for a computed field.  WARNING: Computed fields may be computed for all events.   This could take a long time depending on your database size (from few minutes to several hours) and this will overload the server.  # noqa: E501

        :return: The IsComputedField of this ModelField.  # noqa: E501
        :rtype: bool
        """
        return self._IsComputedField

    @IsComputedField.setter
    def IsComputedField(self, IsComputedField):
        """Sets the IsComputedField of this ModelField.

        Set to True for a computed field.  WARNING: Computed fields may be computed for all events.   This could take a long time depending on your database size (from few minutes to several hours) and this will overload the server.  # noqa: E501

        :param IsComputedField: The IsComputedField of this ModelField.  # noqa: E501
        :type: bool
        """

        self._IsComputedField = IsComputedField

    @property
    def CalculType(self):
        """Gets the CalculType of this ModelField.  # noqa: E501

        The calculation type for a computed field.  # noqa: E501

        :return: The CalculType of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._CalculType

    @CalculType.setter
    def CalculType(self, CalculType):
        """Sets the CalculType of this ModelField.

        The calculation type for a computed field.  # noqa: E501

        :param CalculType: The CalculType of this ModelField.  # noqa: E501
        :type: str
        """
        allowed_values = ["Min", "Max", "Avg", "Sum", "UseScript", "First", "Last", "FollowingDifferenceByTag", "FirstNotNull", "LastNotNull"]  # noqa: E501
        if (self._configuration.client_side_validation and
                CalculType not in allowed_values):
            raise ValueError(
                "Invalid value for `CalculType` ({0}), must be one of {1}"  # noqa: E501
                .format(CalculType, allowed_values)
            )

        self._CalculType = CalculType

    @property
    def TargetModelFieldId(self):
        """Gets the TargetModelFieldId of this ModelField.  # noqa: E501

        The model field id used for calculation of a computed field.  # noqa: E501

        :return: The TargetModelFieldId of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._TargetModelFieldId

    @TargetModelFieldId.setter
    def TargetModelFieldId(self, TargetModelFieldId):
        """Sets the TargetModelFieldId of this ModelField.

        The model field id used for calculation of a computed field.  # noqa: E501

        :param TargetModelFieldId: The TargetModelFieldId of this ModelField.  # noqa: E501
        :type: str
        """

        self._TargetModelFieldId = TargetModelFieldId

    @property
    def ExportValueName(self):
        """Gets the ExportValueName of this ModelField.  # noqa: E501

        Name of the value for the file export.  # noqa: E501

        :return: The ExportValueName of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._ExportValueName

    @ExportValueName.setter
    def ExportValueName(self, ExportValueName):
        """Sets the ExportValueName of this ModelField.

        Name of the value for the file export.  # noqa: E501

        :param ExportValueName: The ExportValueName of this ModelField.  # noqa: E501
        :type: str
        """

        self._ExportValueName = ExportValueName

    @property
    def ExportConstantFileName(self):
        """Gets the ExportConstantFileName of this ModelField.  # noqa: E501

        Name of the value for the file export.  # noqa: E501

        :return: The ExportConstantFileName of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._ExportConstantFileName

    @ExportConstantFileName.setter
    def ExportConstantFileName(self, ExportConstantFileName):
        """Sets the ExportConstantFileName of this ModelField.

        Name of the value for the file export.  # noqa: E501

        :param ExportConstantFileName: The ExportConstantFileName of this ModelField.  # noqa: E501
        :type: str
        """

        self._ExportConstantFileName = ExportConstantFileName

    @property
    def ListId(self):
        """Gets the ListId of this ModelField.  # noqa: E501

        The id of the list which is used for a List Selector field.  # noqa: E501

        :return: The ListId of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._ListId

    @ListId.setter
    def ListId(self, ListId):
        """Sets the ListId of this ModelField.

        The id of the list which is used for a List Selector field.  # noqa: E501

        :param ListId: The ListId of this ModelField.  # noqa: E501
        :type: str
        """

        self._ListId = ListId

    @property
    def ItemListCanBeAdd(self):
        """Gets the ItemListCanBeAdd of this ModelField.  # noqa: E501

        True if an item can be added locally.  # noqa: E501

        :return: The ItemListCanBeAdd of this ModelField.  # noqa: E501
        :rtype: bool
        """
        return self._ItemListCanBeAdd

    @ItemListCanBeAdd.setter
    def ItemListCanBeAdd(self, ItemListCanBeAdd):
        """Sets the ItemListCanBeAdd of this ModelField.

        True if an item can be added locally.  # noqa: E501

        :param ItemListCanBeAdd: The ItemListCanBeAdd of this ModelField.  # noqa: E501
        :type: bool
        """

        self._ItemListCanBeAdd = ItemListCanBeAdd

    @property
    def RevisionSelectorParam(self):
        """Gets the RevisionSelectorParam of this ModelField.  # noqa: E501

        List of Target/Group for revisions selection in the views.  # noqa: E501

        :return: The RevisionSelectorParam of this ModelField.  # noqa: E501
        :rtype: list[CoupleGuidText]
        """
        return self._RevisionSelectorParam

    @RevisionSelectorParam.setter
    def RevisionSelectorParam(self, RevisionSelectorParam):
        """Sets the RevisionSelectorParam of this ModelField.

        List of Target/Group for revisions selection in the views.  # noqa: E501

        :param RevisionSelectorParam: The RevisionSelectorParam of this ModelField.  # noqa: E501
        :type: list[CoupleGuidText]
        """

        self._RevisionSelectorParam = RevisionSelectorParam

    @property
    def RevisionSelectorShowOnlyGroupRev(self):
        """Gets the RevisionSelectorShowOnlyGroupRev of this ModelField.  # noqa: E501

        Set to True to show only group revisions in revisions list.  # noqa: E501

        :return: The RevisionSelectorShowOnlyGroupRev of this ModelField.  # noqa: E501
        :rtype: bool
        """
        return self._RevisionSelectorShowOnlyGroupRev

    @RevisionSelectorShowOnlyGroupRev.setter
    def RevisionSelectorShowOnlyGroupRev(self, RevisionSelectorShowOnlyGroupRev):
        """Sets the RevisionSelectorShowOnlyGroupRev of this ModelField.

        Set to True to show only group revisions in revisions list.  # noqa: E501

        :param RevisionSelectorShowOnlyGroupRev: The RevisionSelectorShowOnlyGroupRev of this ModelField.  # noqa: E501
        :type: bool
        """

        self._RevisionSelectorShowOnlyGroupRev = RevisionSelectorShowOnlyGroupRev

    @property
    def RevisionEditorDisplayFormat(self):
        """Gets the RevisionEditorDisplayFormat of this ModelField.  # noqa: E501

        The revision editor display format.  # noqa: E501

        :return: The RevisionEditorDisplayFormat of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._RevisionEditorDisplayFormat

    @RevisionEditorDisplayFormat.setter
    def RevisionEditorDisplayFormat(self, RevisionEditorDisplayFormat):
        """Sets the RevisionEditorDisplayFormat of this ModelField.

        The revision editor display format.  # noqa: E501

        :param RevisionEditorDisplayFormat: The RevisionEditorDisplayFormat of this ModelField.  # noqa: E501
        :type: str
        """
        allowed_values = ["NumericBox", "TextBox", "NumericMultiDim", "TextMultiDim"]  # noqa: E501
        if (self._configuration.client_side_validation and
                RevisionEditorDisplayFormat not in allowed_values):
            raise ValueError(
                "Invalid value for `RevisionEditorDisplayFormat` ({0}), must be one of {1}"  # noqa: E501
                .format(RevisionEditorDisplayFormat, allowed_values)
            )

        self._RevisionEditorDisplayFormat = RevisionEditorDisplayFormat

    @property
    def ScriptContent(self):
        """Gets the ScriptContent of this ModelField.  # noqa: E501

        The Python script content.  # noqa: E501

        :return: The ScriptContent of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._ScriptContent

    @ScriptContent.setter
    def ScriptContent(self, ScriptContent):
        """Sets the ScriptContent of this ModelField.

        The Python script content.  # noqa: E501

        :param ScriptContent: The ScriptContent of this ModelField.  # noqa: E501
        :type: str
        """

        self._ScriptContent = ScriptContent

    @property
    def UseInvalidLapForCalculation(self):
        """Gets the UseInvalidLapForCalculation of this ModelField.  # noqa: E501

        Set to True to allow invalid laps in calculations.  # noqa: E501

        :return: The UseInvalidLapForCalculation of this ModelField.  # noqa: E501
        :rtype: bool
        """
        return self._UseInvalidLapForCalculation

    @UseInvalidLapForCalculation.setter
    def UseInvalidLapForCalculation(self, UseInvalidLapForCalculation):
        """Sets the UseInvalidLapForCalculation of this ModelField.

        Set to True to allow invalid laps in calculations.  # noqa: E501

        :param UseInvalidLapForCalculation: The UseInvalidLapForCalculation of this ModelField.  # noqa: E501
        :type: bool
        """

        self._UseInvalidLapForCalculation = UseInvalidLapForCalculation

    @property
    def Tags(self):
        """Gets the Tags of this ModelField.  # noqa: E501

        Tags associated with the model field.  # noqa: E501

        :return: The Tags of this ModelField.  # noqa: E501
        :rtype: str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        """Sets the Tags of this ModelField.

        Tags associated with the model field.  # noqa: E501

        :param Tags: The Tags of this ModelField.  # noqa: E501
        :type: str
        """

        self._Tags = Tags

    @property
    def DefaultValue(self):
        """Gets the DefaultValue of this ModelField.  # noqa: E501

        The default value.  # noqa: E501

        :return: The DefaultValue of this ModelField.  # noqa: E501
        :rtype: object
        """
        return self._DefaultValue

    @DefaultValue.setter
    def DefaultValue(self, DefaultValue):
        """Sets the DefaultValue of this ModelField.

        The default value.  # noqa: E501

        :param DefaultValue: The DefaultValue of this ModelField.  # noqa: E501
        :type: object
        """

        self._DefaultValue = DefaultValue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelField):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Mounting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'RevisionId': 'str',
        'MountingId': 'str',
        'Name': 'str',
        'Description': 'str',
        'CreationDateUtc': 'datetime',
        'Creator': 'str',
        'RevisionName': 'str',
        'DateExploitationStartUtc': 'datetime',
        'DateExploitationEndUtc': 'datetime',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'TemplateId': 'str',
        'Tags': 'str',
        'ReplicationFilter': 'str'
    }

    attribute_map = {
        'RevisionId': 'RevisionId',
        'MountingId': 'MountingId',
        'Name': 'Name',
        'Description': 'Description',
        'CreationDateUtc': 'CreationDateUtc',
        'Creator': 'Creator',
        'RevisionName': 'RevisionName',
        'DateExploitationStartUtc': 'DateExploitationStartUtc',
        'DateExploitationEndUtc': 'DateExploitationEndUtc',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'TemplateId': 'TemplateId',
        'Tags': 'Tags',
        'ReplicationFilter': 'ReplicationFilter'
    }

    def __init__(self, RevisionId=None, MountingId=None, Name=None, Description=None, CreationDateUtc=None, Creator=None, RevisionName=None, DateExploitationStartUtc=None, DateExploitationEndUtc=None, LastUpdateDateUtc=None, LastUpdateUser=None, TemplateId=None, Tags=None, ReplicationFilter=None, _configuration=None):  # noqa: E501
        """Mounting - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._RevisionId = None
        self._MountingId = None
        self._Name = None
        self._Description = None
        self._CreationDateUtc = None
        self._Creator = None
        self._RevisionName = None
        self._DateExploitationStartUtc = None
        self._DateExploitationEndUtc = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._TemplateId = None
        self._Tags = None
        self._ReplicationFilter = None
        self.discriminator = None

        self.RevisionId = RevisionId
        self.MountingId = MountingId
        self.Name = Name
        if Description is not None:
            self.Description = Description
        if CreationDateUtc is not None:
            self.CreationDateUtc = CreationDateUtc
        if Creator is not None:
            self.Creator = Creator
        self.RevisionName = RevisionName
        self.DateExploitationStartUtc = DateExploitationStartUtc
        self.DateExploitationEndUtc = DateExploitationEndUtc
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if TemplateId is not None:
            self.TemplateId = TemplateId
        if Tags is not None:
            self.Tags = Tags
        if ReplicationFilter is not None:
            self.ReplicationFilter = ReplicationFilter

    @property
    def RevisionId(self):
        """Gets the RevisionId of this Mounting.  # noqa: E501

        Mounting revision unique identifier.  Set the RevisionId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new mounting revision.  # noqa: E501

        :return: The RevisionId of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._RevisionId

    @RevisionId.setter
    def RevisionId(self, RevisionId):
        """Sets the RevisionId of this Mounting.

        Mounting revision unique identifier.  Set the RevisionId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new mounting revision.  # noqa: E501

        :param RevisionId: The RevisionId of this Mounting.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and RevisionId is None:
            raise ValueError("Invalid value for `RevisionId`, must not be `None`")  # noqa: E501

        self._RevisionId = RevisionId

    @property
    def MountingId(self):
        """Gets the MountingId of this Mounting.  # noqa: E501

        Mounting unique identifier, common to all revisions of the same mounting  Set the MountingId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new mounting.  # noqa: E501

        :return: The MountingId of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._MountingId

    @MountingId.setter
    def MountingId(self, MountingId):
        """Sets the MountingId of this Mounting.

        Mounting unique identifier, common to all revisions of the same mounting  Set the MountingId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new mounting.  # noqa: E501

        :param MountingId: The MountingId of this Mounting.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and MountingId is None:
            raise ValueError("Invalid value for `MountingId`, must not be `None`")  # noqa: E501

        self._MountingId = MountingId

    @property
    def Name(self):
        """Gets the Name of this Mounting.  # noqa: E501

        Mounting name  # noqa: E501

        :return: The Name of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Mounting.

        Mounting name  # noqa: E501

        :param Name: The Name of this Mounting.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def Description(self):
        """Gets the Description of this Mounting.  # noqa: E501

        Mounting description  # noqa: E501

        :return: The Description of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        """Sets the Description of this Mounting.

        Mounting description  # noqa: E501

        :param Description: The Description of this Mounting.  # noqa: E501
        :type: str
        """

        self._Description = Description

    @property
    def CreationDateUtc(self):
        """Gets the CreationDateUtc of this Mounting.  # noqa: E501

        Mounting creation utc date  # noqa: E501

        :return: The CreationDateUtc of this Mounting.  # noqa: E501
        :rtype: datetime
        """
        return self._CreationDateUtc

    @CreationDateUtc.setter
    def CreationDateUtc(self, CreationDateUtc):
        """Sets the CreationDateUtc of this Mounting.

        Mounting creation utc date  # noqa: E501

        :param CreationDateUtc: The CreationDateUtc of this Mounting.  # noqa: E501
        :type: datetime
        """

        self._CreationDateUtc = CreationDateUtc

    @property
    def Creator(self):
        """Gets the Creator of this Mounting.  # noqa: E501

        Mounting creator username  # noqa: E501

        :return: The Creator of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        """Sets the Creator of this Mounting.

        Mounting creator username  # noqa: E501

        :param Creator: The Creator of this Mounting.  # noqa: E501
        :type: str
        """

        self._Creator = Creator

    @property
    def RevisionName(self):
        """Gets the RevisionName of this Mounting.  # noqa: E501

        Mounting revision name  # noqa: E501

        :return: The RevisionName of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._RevisionName

    @RevisionName.setter
    def RevisionName(self, RevisionName):
        """Sets the RevisionName of this Mounting.

        Mounting revision name  # noqa: E501

        :param RevisionName: The RevisionName of this Mounting.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and RevisionName is None:
            raise ValueError("Invalid value for `RevisionName`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                RevisionName is not None and len(RevisionName) < 1):
            raise ValueError("Invalid value for `RevisionName`, length must be greater than or equal to `1`")  # noqa: E501

        self._RevisionName = RevisionName

    @property
    def DateExploitationStartUtc(self):
        """Gets the DateExploitationStartUtc of this Mounting.  # noqa: E501

        Mounting utc start date  # noqa: E501

        :return: The DateExploitationStartUtc of this Mounting.  # noqa: E501
        :rtype: datetime
        """
        return self._DateExploitationStartUtc

    @DateExploitationStartUtc.setter
    def DateExploitationStartUtc(self, DateExploitationStartUtc):
        """Sets the DateExploitationStartUtc of this Mounting.

        Mounting utc start date  # noqa: E501

        :param DateExploitationStartUtc: The DateExploitationStartUtc of this Mounting.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and DateExploitationStartUtc is None:
            raise ValueError("Invalid value for `DateExploitationStartUtc`, must not be `None`")  # noqa: E501

        self._DateExploitationStartUtc = DateExploitationStartUtc

    @property
    def DateExploitationEndUtc(self):
        """Gets the DateExploitationEndUtc of this Mounting.  # noqa: E501

        End utc date of mounting operation (or dismantling date)  # noqa: E501

        :return: The DateExploitationEndUtc of this Mounting.  # noqa: E501
        :rtype: datetime
        """
        return self._DateExploitationEndUtc

    @DateExploitationEndUtc.setter
    def DateExploitationEndUtc(self, DateExploitationEndUtc):
        """Sets the DateExploitationEndUtc of this Mounting.

        End utc date of mounting operation (or dismantling date)  # noqa: E501

        :param DateExploitationEndUtc: The DateExploitationEndUtc of this Mounting.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and DateExploitationEndUtc is None:
            raise ValueError("Invalid value for `DateExploitationEndUtc`, must not be `None`")  # noqa: E501

        self._DateExploitationEndUtc = DateExploitationEndUtc

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Mounting.  # noqa: E501

        Mounting last update utc date  # noqa: E501

        :return: The LastUpdateDateUtc of this Mounting.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Mounting.

        Mounting last update utc date  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Mounting.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Mounting.  # noqa: E501

        The name of the user who performed the last update on the mounting  # noqa: E501

        :return: The LastUpdateUser of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Mounting.

        The name of the user who performed the last update on the mounting  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Mounting.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def TemplateId(self):
        """Gets the TemplateId of this Mounting.  # noqa: E501

        Mounting related template id  # noqa: E501

        :return: The TemplateId of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._TemplateId

    @TemplateId.setter
    def TemplateId(self, TemplateId):
        """Sets the TemplateId of this Mounting.

        Mounting related template id  # noqa: E501

        :param TemplateId: The TemplateId of this Mounting.  # noqa: E501
        :type: str
        """

        self._TemplateId = TemplateId

    @property
    def Tags(self):
        """Gets the Tags of this Mounting.  # noqa: E501

        Mounting tags. Each tag must be separated by a semicolon.  # noqa: E501

        :return: The Tags of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        """Sets the Tags of this Mounting.

        Mounting tags. Each tag must be separated by a semicolon.  # noqa: E501

        :param Tags: The Tags of this Mounting.  # noqa: E501
        :type: str
        """

        self._Tags = Tags

    @property
    def ReplicationFilter(self):
        """Gets the ReplicationFilter of this Mounting.  # noqa: E501

        Filter level used for replication of large tables  # noqa: E501

        :return: The ReplicationFilter of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._ReplicationFilter

    @ReplicationFilter.setter
    def ReplicationFilter(self, ReplicationFilter):
        """Sets the ReplicationFilter of this Mounting.

        Filter level used for replication of large tables  # noqa: E501

        :param ReplicationFilter: The ReplicationFilter of this Mounting.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotForReplication", "ForReplication"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ReplicationFilter not in allowed_values):
            raise ValueError(
                "Invalid value for `ReplicationFilter` ({0}), must be one of {1}"  # noqa: E501
                .format(ReplicationFilter, allowed_values)
            )

        self._ReplicationFilter = ReplicationFilter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Mounting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mounting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Mounting):
            return True

        return self.to_dict() != other.to_dict()

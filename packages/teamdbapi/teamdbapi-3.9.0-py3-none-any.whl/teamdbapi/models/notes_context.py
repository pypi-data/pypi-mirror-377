# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class NotesContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'EventId': 'str',
        'CarId': 'str',
        'SessionId': 'str',
        'RunId': 'str',
        'LapId': 'str'
    }

    attribute_map = {
        'EventId': 'EventId',
        'CarId': 'CarId',
        'SessionId': 'SessionId',
        'RunId': 'RunId',
        'LapId': 'LapId'
    }

    def __init__(self, EventId=None, CarId=None, SessionId=None, RunId=None, LapId=None, _configuration=None):  # noqa: E501
        """NotesContext - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._EventId = None
        self._CarId = None
        self._SessionId = None
        self._RunId = None
        self._LapId = None
        self.discriminator = None

        if EventId is not None:
            self.EventId = EventId
        if CarId is not None:
            self.CarId = CarId
        if SessionId is not None:
            self.SessionId = SessionId
        if RunId is not None:
            self.RunId = RunId
        if LapId is not None:
            self.LapId = LapId

    @property
    def EventId(self):
        """Gets the EventId of this NotesContext.  # noqa: E501

        Event unique Id  # noqa: E501

        :return: The EventId of this NotesContext.  # noqa: E501
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        """Sets the EventId of this NotesContext.

        Event unique Id  # noqa: E501

        :param EventId: The EventId of this NotesContext.  # noqa: E501
        :type: str
        """

        self._EventId = EventId

    @property
    def CarId(self):
        """Gets the CarId of this NotesContext.  # noqa: E501

        Car unique Id  # noqa: E501

        :return: The CarId of this NotesContext.  # noqa: E501
        :rtype: str
        """
        return self._CarId

    @CarId.setter
    def CarId(self, CarId):
        """Sets the CarId of this NotesContext.

        Car unique Id  # noqa: E501

        :param CarId: The CarId of this NotesContext.  # noqa: E501
        :type: str
        """

        self._CarId = CarId

    @property
    def SessionId(self):
        """Gets the SessionId of this NotesContext.  # noqa: E501

        Session unique id  # noqa: E501

        :return: The SessionId of this NotesContext.  # noqa: E501
        :rtype: str
        """
        return self._SessionId

    @SessionId.setter
    def SessionId(self, SessionId):
        """Sets the SessionId of this NotesContext.

        Session unique id  # noqa: E501

        :param SessionId: The SessionId of this NotesContext.  # noqa: E501
        :type: str
        """

        self._SessionId = SessionId

    @property
    def RunId(self):
        """Gets the RunId of this NotesContext.  # noqa: E501

        Run unique id  # noqa: E501

        :return: The RunId of this NotesContext.  # noqa: E501
        :rtype: str
        """
        return self._RunId

    @RunId.setter
    def RunId(self, RunId):
        """Sets the RunId of this NotesContext.

        Run unique id  # noqa: E501

        :param RunId: The RunId of this NotesContext.  # noqa: E501
        :type: str
        """

        self._RunId = RunId

    @property
    def LapId(self):
        """Gets the LapId of this NotesContext.  # noqa: E501

        Lap unique id  # noqa: E501

        :return: The LapId of this NotesContext.  # noqa: E501
        :rtype: str
        """
        return self._LapId

    @LapId.setter
    def LapId(self, LapId):
        """Sets the LapId of this NotesContext.

        Lap unique id  # noqa: E501

        :param LapId: The LapId of this NotesContext.  # noqa: E501
        :type: str
        """

        self._LapId = LapId

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotesContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotesContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotesContext):
            return True

        return self.to_dict() != other.to_dict()

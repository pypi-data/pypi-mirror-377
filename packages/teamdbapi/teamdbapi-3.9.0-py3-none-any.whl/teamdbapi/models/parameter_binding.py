# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class ParameterBinding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'System': 'str',
        'Position': 'str',
        'XCoordinate': 'float',
        'YCoordinate': 'float',
        'ZCoordinate': 'float',
        'Type': 'str',
        'Acquisition': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'System': 'System',
        'Position': 'Position',
        'XCoordinate': 'XCoordinate',
        'YCoordinate': 'YCoordinate',
        'ZCoordinate': 'ZCoordinate',
        'Type': 'Type',
        'Acquisition': 'Acquisition',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser'
    }

    def __init__(self, Id=None, Name=None, System=None, Position=None, XCoordinate=None, YCoordinate=None, ZCoordinate=None, Type=None, Acquisition=None, LastUpdateDateUtc=None, LastUpdateUser=None, _configuration=None):  # noqa: E501
        """ParameterBinding - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._System = None
        self._Position = None
        self._XCoordinate = None
        self._YCoordinate = None
        self._ZCoordinate = None
        self._Type = None
        self._Acquisition = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        if System is not None:
            self.System = System
        if Position is not None:
            self.Position = Position
        if XCoordinate is not None:
            self.XCoordinate = XCoordinate
        if YCoordinate is not None:
            self.YCoordinate = YCoordinate
        if ZCoordinate is not None:
            self.ZCoordinate = ZCoordinate
        if Type is not None:
            self.Type = Type
        if Acquisition is not None:
            self.Acquisition = Acquisition
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser

    @property
    def Id(self):
        """Gets the Id of this ParameterBinding.  # noqa: E501

        ParameterBinding unique identifier.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new ParameterBinding.  # noqa: E501

        :return: The Id of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this ParameterBinding.

        ParameterBinding unique identifier.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new ParameterBinding.  # noqa: E501

        :param Id: The Id of this ParameterBinding.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this ParameterBinding.  # noqa: E501

        Name of the ParameterBinding  # noqa: E501

        :return: The Name of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this ParameterBinding.

        Name of the ParameterBinding  # noqa: E501

        :param Name: The Name of this ParameterBinding.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def System(self):
        """Gets the System of this ParameterBinding.  # noqa: E501

        ParameterBinding system  # noqa: E501

        :return: The System of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._System

    @System.setter
    def System(self, System):
        """Sets the System of this ParameterBinding.

        ParameterBinding system  # noqa: E501

        :param System: The System of this ParameterBinding.  # noqa: E501
        :type: str
        """

        self._System = System

    @property
    def Position(self):
        """Gets the Position of this ParameterBinding.  # noqa: E501

        ParameterBinding position  # noqa: E501

        :return: The Position of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._Position

    @Position.setter
    def Position(self, Position):
        """Sets the Position of this ParameterBinding.

        ParameterBinding position  # noqa: E501

        :param Position: The Position of this ParameterBinding.  # noqa: E501
        :type: str
        """

        self._Position = Position

    @property
    def XCoordinate(self):
        """Gets the XCoordinate of this ParameterBinding.  # noqa: E501

        X coordinate of the ParameterBinding  # noqa: E501

        :return: The XCoordinate of this ParameterBinding.  # noqa: E501
        :rtype: float
        """
        return self._XCoordinate

    @XCoordinate.setter
    def XCoordinate(self, XCoordinate):
        """Sets the XCoordinate of this ParameterBinding.

        X coordinate of the ParameterBinding  # noqa: E501

        :param XCoordinate: The XCoordinate of this ParameterBinding.  # noqa: E501
        :type: float
        """

        self._XCoordinate = XCoordinate

    @property
    def YCoordinate(self):
        """Gets the YCoordinate of this ParameterBinding.  # noqa: E501

        Y coordinate of the ParameterBinding  # noqa: E501

        :return: The YCoordinate of this ParameterBinding.  # noqa: E501
        :rtype: float
        """
        return self._YCoordinate

    @YCoordinate.setter
    def YCoordinate(self, YCoordinate):
        """Sets the YCoordinate of this ParameterBinding.

        Y coordinate of the ParameterBinding  # noqa: E501

        :param YCoordinate: The YCoordinate of this ParameterBinding.  # noqa: E501
        :type: float
        """

        self._YCoordinate = YCoordinate

    @property
    def ZCoordinate(self):
        """Gets the ZCoordinate of this ParameterBinding.  # noqa: E501

        Z coordinate of the ParameterBinding  # noqa: E501

        :return: The ZCoordinate of this ParameterBinding.  # noqa: E501
        :rtype: float
        """
        return self._ZCoordinate

    @ZCoordinate.setter
    def ZCoordinate(self, ZCoordinate):
        """Sets the ZCoordinate of this ParameterBinding.

        Z coordinate of the ParameterBinding  # noqa: E501

        :param ZCoordinate: The ZCoordinate of this ParameterBinding.  # noqa: E501
        :type: float
        """

        self._ZCoordinate = ZCoordinate

    @property
    def Type(self):
        """Gets the Type of this ParameterBinding.  # noqa: E501

        ParameterBinding type  # noqa: E501

        :return: The Type of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        """Sets the Type of this ParameterBinding.

        ParameterBinding type  # noqa: E501

        :param Type: The Type of this ParameterBinding.  # noqa: E501
        :type: str
        """

        self._Type = Type

    @property
    def Acquisition(self):
        """Gets the Acquisition of this ParameterBinding.  # noqa: E501

        ParameterBinding acquisition mode  # noqa: E501

        :return: The Acquisition of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._Acquisition

    @Acquisition.setter
    def Acquisition(self, Acquisition):
        """Sets the Acquisition of this ParameterBinding.

        ParameterBinding acquisition mode  # noqa: E501

        :param Acquisition: The Acquisition of this ParameterBinding.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Standard", "Virtual", "xCB"]  # noqa: E501
        if (self._configuration.client_side_validation and
                Acquisition not in allowed_values):
            raise ValueError(
                "Invalid value for `Acquisition` ({0}), must be one of {1}"  # noqa: E501
                .format(Acquisition, allowed_values)
            )

        self._Acquisition = Acquisition

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this ParameterBinding.  # noqa: E501

        Last update utc date of the ParameterBinding  # noqa: E501

        :return: The LastUpdateDateUtc of this ParameterBinding.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this ParameterBinding.

        Last update utc date of the ParameterBinding  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this ParameterBinding.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this ParameterBinding.  # noqa: E501

        The name of the user who performed the last update on the ParameterBinding  # noqa: E501

        :return: The LastUpdateUser of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this ParameterBinding.

        The name of the user who performed the last update on the ParameterBinding  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this ParameterBinding.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParameterBinding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParameterBinding):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParameterBinding):
            return True

        return self.to_dict() != other.to_dict()

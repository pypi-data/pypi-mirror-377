# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class ParameterCrossTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'FromParameterPath': 'str',
        'ToParameterPath': 'str'
    }

    attribute_map = {
        'FromParameterPath': 'FromParameterPath',
        'ToParameterPath': 'ToParameterPath'
    }

    def __init__(self, FromParameterPath=None, ToParameterPath=None, _configuration=None):  # noqa: E501
        """ParameterCrossTable - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._FromParameterPath = None
        self._ToParameterPath = None
        self.discriminator = None

        self.FromParameterPath = FromParameterPath
        self.ToParameterPath = ToParameterPath

    @property
    def FromParameterPath(self):
        """Gets the FromParameterPath of this ParameterCrossTable.  # noqa: E501

        The full parameter path which belongs to the From version  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The FromParameterPath of this ParameterCrossTable.  # noqa: E501
        :rtype: str
        """
        return self._FromParameterPath

    @FromParameterPath.setter
    def FromParameterPath(self, FromParameterPath):
        """Sets the FromParameterPath of this ParameterCrossTable.

        The full parameter path which belongs to the From version  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :param FromParameterPath: The FromParameterPath of this ParameterCrossTable.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and FromParameterPath is None:
            raise ValueError("Invalid value for `FromParameterPath`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                FromParameterPath is not None and len(FromParameterPath) < 1):
            raise ValueError("Invalid value for `FromParameterPath`, length must be greater than or equal to `1`")  # noqa: E501

        self._FromParameterPath = FromParameterPath

    @property
    def ToParameterPath(self):
        """Gets the ToParameterPath of this ParameterCrossTable.  # noqa: E501

        The full parameter path which belongs to the To version  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The ToParameterPath of this ParameterCrossTable.  # noqa: E501
        :rtype: str
        """
        return self._ToParameterPath

    @ToParameterPath.setter
    def ToParameterPath(self, ToParameterPath):
        """Sets the ToParameterPath of this ParameterCrossTable.

        The full parameter path which belongs to the To version  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :param ToParameterPath: The ToParameterPath of this ParameterCrossTable.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ToParameterPath is None:
            raise ValueError("Invalid value for `ToParameterPath`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ToParameterPath is not None and len(ToParameterPath) < 1):
            raise ValueError("Invalid value for `ToParameterPath`, length must be greater than or equal to `1`")  # noqa: E501

        self._ToParameterPath = ToParameterPath

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParameterCrossTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParameterCrossTable):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParameterCrossTable):
            return True

        return self.to_dict() != other.to_dict()

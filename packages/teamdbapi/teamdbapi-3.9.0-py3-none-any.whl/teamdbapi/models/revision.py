# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Revision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'DateRevision': 'datetime',
        'Maturity': 'int',
        'Value': 'list[object]',
        'ParameterId': 'str',
        'IsObsolete': 'bool',
        'ParameterValueCheckSum': 'str',
        'Comment': 'str',
        'UserName': 'str',
        'LastUpdateDateUtc': 'datetime',
        'IsNew': 'bool',
        'DataUpdatedDate': 'datetime',
        'DataAxeX': 'list[float]',
        'DataAxeY': 'list[float]',
        'DataAxeZ': 'list[float]',
        'LinkedXAxisId': 'str',
        'LinkedYAxisId': 'str',
        'LinkedZAxisId': 'str',
        'IsLifingSensorMainRevision': 'bool'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'DateRevision': 'DateRevision',
        'Maturity': 'Maturity',
        'Value': 'Value',
        'ParameterId': 'ParameterId',
        'IsObsolete': 'IsObsolete',
        'ParameterValueCheckSum': 'ParameterValueCheckSum',
        'Comment': 'Comment',
        'UserName': 'UserName',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'IsNew': 'IsNew',
        'DataUpdatedDate': 'DataUpdatedDate',
        'DataAxeX': 'DataAxeX',
        'DataAxeY': 'DataAxeY',
        'DataAxeZ': 'DataAxeZ',
        'LinkedXAxisId': 'LinkedXAxisId',
        'LinkedYAxisId': 'LinkedYAxisId',
        'LinkedZAxisId': 'LinkedZAxisId',
        'IsLifingSensorMainRevision': 'IsLifingSensorMainRevision'
    }

    def __init__(self, Id=None, Name=None, DateRevision=None, Maturity=None, Value=None, ParameterId=None, IsObsolete=None, ParameterValueCheckSum=None, Comment=None, UserName=None, LastUpdateDateUtc=None, IsNew=None, DataUpdatedDate=None, DataAxeX=None, DataAxeY=None, DataAxeZ=None, LinkedXAxisId=None, LinkedYAxisId=None, LinkedZAxisId=None, IsLifingSensorMainRevision=None, _configuration=None):  # noqa: E501
        """Revision - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._DateRevision = None
        self._Maturity = None
        self._Value = None
        self._ParameterId = None
        self._IsObsolete = None
        self._ParameterValueCheckSum = None
        self._Comment = None
        self._UserName = None
        self._LastUpdateDateUtc = None
        self._IsNew = None
        self._DataUpdatedDate = None
        self._DataAxeX = None
        self._DataAxeY = None
        self._DataAxeZ = None
        self._LinkedXAxisId = None
        self._LinkedYAxisId = None
        self._LinkedZAxisId = None
        self._IsLifingSensorMainRevision = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        self.DateRevision = DateRevision
        if Maturity is not None:
            self.Maturity = Maturity
        self.Value = Value
        self.ParameterId = ParameterId
        if IsObsolete is not None:
            self.IsObsolete = IsObsolete
        if ParameterValueCheckSum is not None:
            self.ParameterValueCheckSum = ParameterValueCheckSum
        if Comment is not None:
            self.Comment = Comment
        if UserName is not None:
            self.UserName = UserName
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if IsNew is not None:
            self.IsNew = IsNew
        if DataUpdatedDate is not None:
            self.DataUpdatedDate = DataUpdatedDate
        if DataAxeX is not None:
            self.DataAxeX = DataAxeX
        if DataAxeY is not None:
            self.DataAxeY = DataAxeY
        if DataAxeZ is not None:
            self.DataAxeZ = DataAxeZ
        if LinkedXAxisId is not None:
            self.LinkedXAxisId = LinkedXAxisId
        if LinkedYAxisId is not None:
            self.LinkedYAxisId = LinkedYAxisId
        if LinkedZAxisId is not None:
            self.LinkedZAxisId = LinkedZAxisId
        if IsLifingSensorMainRevision is not None:
            self.IsLifingSensorMainRevision = IsLifingSensorMainRevision

    @property
    def Id(self):
        """Gets the Id of this Revision.  # noqa: E501

        The unique revision id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new revision.  # noqa: E501

        :return: The Id of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Revision.

        The unique revision id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new revision.  # noqa: E501

        :param Id: The Id of this Revision.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this Revision.  # noqa: E501

        The revision name.  Must be unique for a parameter.  # noqa: E501

        :return: The Name of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Revision.

        The revision name.  Must be unique for a parameter.  # noqa: E501

        :param Name: The Name of this Revision.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def DateRevision(self):
        """Gets the DateRevision of this Revision.  # noqa: E501

        The creation date of the revision.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :return: The DateRevision of this Revision.  # noqa: E501
        :rtype: datetime
        """
        return self._DateRevision

    @DateRevision.setter
    def DateRevision(self, DateRevision):
        """Sets the DateRevision of this Revision.

        The creation date of the revision.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :param DateRevision: The DateRevision of this Revision.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and DateRevision is None:
            raise ValueError("Invalid value for `DateRevision`, must not be `None`")  # noqa: E501

        self._DateRevision = DateRevision

    @property
    def Maturity(self):
        """Gets the Maturity of this Revision.  # noqa: E501

        The revision maturity. Should be an integer value between [0 and 100]  # noqa: E501

        :return: The Maturity of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._Maturity

    @Maturity.setter
    def Maturity(self, Maturity):
        """Sets the Maturity of this Revision.

        The revision maturity. Should be an integer value between [0 and 100]  # noqa: E501

        :param Maturity: The Maturity of this Revision.  # noqa: E501
        :type: int
        """

        self._Maturity = Maturity

    @property
    def Value(self):
        """Gets the Value of this Revision.  # noqa: E501

        The revision value.  Depending on the parameter definition the value can be a single value or 2D value or 3D.  For this reason, the Value is represented as a 3 dimensionals JSON array.  The value type can be a string or double depending on the parameter.  For this reason, you have to serialize the value with invariant culture format.  Decimal separator must be the point. The coma is use to separate the elements inside the array.  Single Value sample : [[[0.7]]]  1D Value sample : [[[0.0]],[[0.1]],[[0.2]]]  2D Value sample : [[[1.0],[1.0],[1.0]], [[1.0],[1.0],[1.0],[1.0]]]  # noqa: E501

        :return: The Value of this Revision.  # noqa: E501
        :rtype: list[object]
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        """Sets the Value of this Revision.

        The revision value.  Depending on the parameter definition the value can be a single value or 2D value or 3D.  For this reason, the Value is represented as a 3 dimensionals JSON array.  The value type can be a string or double depending on the parameter.  For this reason, you have to serialize the value with invariant culture format.  Decimal separator must be the point. The coma is use to separate the elements inside the array.  Single Value sample : [[[0.7]]]  1D Value sample : [[[0.0]],[[0.1]],[[0.2]]]  2D Value sample : [[[1.0],[1.0],[1.0]], [[1.0],[1.0],[1.0],[1.0]]]  # noqa: E501

        :param Value: The Value of this Revision.  # noqa: E501
        :type: list[object]
        """
        if self._configuration.client_side_validation and Value is None:
            raise ValueError("Invalid value for `Value`, must not be `None`")  # noqa: E501

        self._Value = Value

    @property
    def ParameterId(self):
        """Gets the ParameterId of this Revision.  # noqa: E501

        The parameter unique Id to which the revision belongs to  # noqa: E501

        :return: The ParameterId of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._ParameterId

    @ParameterId.setter
    def ParameterId(self, ParameterId):
        """Sets the ParameterId of this Revision.

        The parameter unique Id to which the revision belongs to  # noqa: E501

        :param ParameterId: The ParameterId of this Revision.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ParameterId is None:
            raise ValueError("Invalid value for `ParameterId`, must not be `None`")  # noqa: E501

        self._ParameterId = ParameterId

    @property
    def IsObsolete(self):
        """Gets the IsObsolete of this Revision.  # noqa: E501

        Return true if the revision is obsolete  # noqa: E501

        :return: The IsObsolete of this Revision.  # noqa: E501
        :rtype: bool
        """
        return self._IsObsolete

    @IsObsolete.setter
    def IsObsolete(self, IsObsolete):
        """Sets the IsObsolete of this Revision.

        Return true if the revision is obsolete  # noqa: E501

        :param IsObsolete: The IsObsolete of this Revision.  # noqa: E501
        :type: bool
        """

        self._IsObsolete = IsObsolete

    @property
    def ParameterValueCheckSum(self):
        """Gets the ParameterValueCheckSum of this Revision.  # noqa: E501

        The checksum of the value used to check the revision unicity for each parameter.  This value will be automatically computed during the create or update. You can ignore it while editing the revision.  # noqa: E501

        :return: The ParameterValueCheckSum of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._ParameterValueCheckSum

    @ParameterValueCheckSum.setter
    def ParameterValueCheckSum(self, ParameterValueCheckSum):
        """Sets the ParameterValueCheckSum of this Revision.

        The checksum of the value used to check the revision unicity for each parameter.  This value will be automatically computed during the create or update. You can ignore it while editing the revision.  # noqa: E501

        :param ParameterValueCheckSum: The ParameterValueCheckSum of this Revision.  # noqa: E501
        :type: str
        """

        self._ParameterValueCheckSum = ParameterValueCheckSum

    @property
    def Comment(self):
        """Gets the Comment of this Revision.  # noqa: E501

        The revision comment  # noqa: E501

        :return: The Comment of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._Comment

    @Comment.setter
    def Comment(self, Comment):
        """Sets the Comment of this Revision.

        The revision comment  # noqa: E501

        :param Comment: The Comment of this Revision.  # noqa: E501
        :type: str
        """

        self._Comment = Comment

    @property
    def UserName(self):
        """Gets the UserName of this Revision.  # noqa: E501

        The name of the last user having updated the revision  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The UserName of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        """Sets the UserName of this Revision.

        The name of the last user having updated the revision  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param UserName: The UserName of this Revision.  # noqa: E501
        :type: str
        """

        self._UserName = UserName

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Revision.  # noqa: E501

        The last utc date time when the properties of the revision have been updated  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this Revision.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Revision.

        The last utc date time when the properties of the revision have been updated  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Revision.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def IsNew(self):
        """Gets the IsNew of this Revision.  # noqa: E501

        Return true if the revision is new  # noqa: E501

        :return: The IsNew of this Revision.  # noqa: E501
        :rtype: bool
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        """Sets the IsNew of this Revision.

        Return true if the revision is new  # noqa: E501

        :param IsNew: The IsNew of this Revision.  # noqa: E501
        :type: bool
        """

        self._IsNew = IsNew

    @property
    def DataUpdatedDate(self):
        """Gets the DataUpdatedDate of this Revision.  # noqa: E501

        The last utc date time when the value of the revision have been updated (independently of the others properties)  # noqa: E501

        :return: The DataUpdatedDate of this Revision.  # noqa: E501
        :rtype: datetime
        """
        return self._DataUpdatedDate

    @DataUpdatedDate.setter
    def DataUpdatedDate(self, DataUpdatedDate):
        """Sets the DataUpdatedDate of this Revision.

        The last utc date time when the value of the revision have been updated (independently of the others properties)  # noqa: E501

        :param DataUpdatedDate: The DataUpdatedDate of this Revision.  # noqa: E501
        :type: datetime
        """

        self._DataUpdatedDate = DataUpdatedDate

    @property
    def DataAxeX(self):
        """Gets the DataAxeX of this Revision.  # noqa: E501

        X axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :return: The DataAxeX of this Revision.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeX

    @DataAxeX.setter
    def DataAxeX(self, DataAxeX):
        """Sets the DataAxeX of this Revision.

        X axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :param DataAxeX: The DataAxeX of this Revision.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeX = DataAxeX

    @property
    def DataAxeY(self):
        """Gets the DataAxeY of this Revision.  # noqa: E501

        Y axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :return: The DataAxeY of this Revision.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeY

    @DataAxeY.setter
    def DataAxeY(self, DataAxeY):
        """Sets the DataAxeY of this Revision.

        Y axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :param DataAxeY: The DataAxeY of this Revision.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeY = DataAxeY

    @property
    def DataAxeZ(self):
        """Gets the DataAxeZ of this Revision.  # noqa: E501

        Z axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :return: The DataAxeZ of this Revision.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeZ

    @DataAxeZ.setter
    def DataAxeZ(self, DataAxeZ):
        """Sets the DataAxeZ of this Revision.

        Z axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :param DataAxeZ: The DataAxeZ of this Revision.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeZ = DataAxeZ

    @property
    def LinkedXAxisId(self):
        """Gets the LinkedXAxisId of this Revision.  # noqa: E501

        If Target.LinkMapToAxis is enabled then the field contains the X axis revision Id associated with the map/curve   revision  # noqa: E501

        :return: The LinkedXAxisId of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._LinkedXAxisId

    @LinkedXAxisId.setter
    def LinkedXAxisId(self, LinkedXAxisId):
        """Sets the LinkedXAxisId of this Revision.

        If Target.LinkMapToAxis is enabled then the field contains the X axis revision Id associated with the map/curve   revision  # noqa: E501

        :param LinkedXAxisId: The LinkedXAxisId of this Revision.  # noqa: E501
        :type: str
        """

        self._LinkedXAxisId = LinkedXAxisId

    @property
    def LinkedYAxisId(self):
        """Gets the LinkedYAxisId of this Revision.  # noqa: E501

        If Target.LinkMapToAxis is enabled then the field contains the Y axis revision Id associated with the map/curve   revision  # noqa: E501

        :return: The LinkedYAxisId of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._LinkedYAxisId

    @LinkedYAxisId.setter
    def LinkedYAxisId(self, LinkedYAxisId):
        """Sets the LinkedYAxisId of this Revision.

        If Target.LinkMapToAxis is enabled then the field contains the Y axis revision Id associated with the map/curve   revision  # noqa: E501

        :param LinkedYAxisId: The LinkedYAxisId of this Revision.  # noqa: E501
        :type: str
        """

        self._LinkedYAxisId = LinkedYAxisId

    @property
    def LinkedZAxisId(self):
        """Gets the LinkedZAxisId of this Revision.  # noqa: E501

        If Target.LinkMapToAxis is enabled then the field contains the Z axis revision Id associated with the map/curve   revision  # noqa: E501

        :return: The LinkedZAxisId of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._LinkedZAxisId

    @LinkedZAxisId.setter
    def LinkedZAxisId(self, LinkedZAxisId):
        """Sets the LinkedZAxisId of this Revision.

        If Target.LinkMapToAxis is enabled then the field contains the Z axis revision Id associated with the map/curve   revision  # noqa: E501

        :param LinkedZAxisId: The LinkedZAxisId of this Revision.  # noqa: E501
        :type: str
        """

        self._LinkedZAxisId = LinkedZAxisId

    @property
    def IsLifingSensorMainRevision(self):
        """Gets the IsLifingSensorMainRevision of this Revision.  # noqa: E501

        When the revision is associated with a lifing component, this flag  indicate that the revision will be used as the main revision when importing  the parameters data from a lifing mounting to a car parameter assembly.  This field is only filled when calling the routes:  \"partNumber/{partNumber}/serialNumber/{serialNumber}/revisions\"  \"partNumber/{partNumber}/serialNumber/{serialNumber}/parameterPath/{parameterPath}/targetName/{targetName}/revisions\"  # noqa: E501

        :return: The IsLifingSensorMainRevision of this Revision.  # noqa: E501
        :rtype: bool
        """
        return self._IsLifingSensorMainRevision

    @IsLifingSensorMainRevision.setter
    def IsLifingSensorMainRevision(self, IsLifingSensorMainRevision):
        """Sets the IsLifingSensorMainRevision of this Revision.

        When the revision is associated with a lifing component, this flag  indicate that the revision will be used as the main revision when importing  the parameters data from a lifing mounting to a car parameter assembly.  This field is only filled when calling the routes:  \"partNumber/{partNumber}/serialNumber/{serialNumber}/revisions\"  \"partNumber/{partNumber}/serialNumber/{serialNumber}/parameterPath/{parameterPath}/targetName/{targetName}/revisions\"  # noqa: E501

        :param IsLifingSensorMainRevision: The IsLifingSensorMainRevision of this Revision.  # noqa: E501
        :type: bool
        """

        self._IsLifingSensorMainRevision = IsLifingSensorMainRevision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Revision, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Revision):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Revision):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Run(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'ShortName': 'str',
        'Number': 'int',
        'Order': 'str',
        'SessionId': 'str',
        'RunDate': 'datetime',
        'RunStatus': 'str',
        'IsValid': 'bool',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'Revision': 'int',
        'TireSetId': 'str',
        'ChangedPart': 'str',
        'LapCount': 'int',
        'Distance': 'float',
        'DistanceReal': 'float',
        'UsedInRunPlan': 'bool'
    }

    attribute_map = {
        'Id': 'Id',
        'ShortName': 'ShortName',
        'Number': 'Number',
        'Order': 'Order',
        'SessionId': 'SessionId',
        'RunDate': 'RunDate',
        'RunStatus': 'RunStatus',
        'IsValid': 'IsValid',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'Revision': 'Revision',
        'TireSetId': 'TireSetId',
        'ChangedPart': 'ChangedPart',
        'LapCount': 'LapCount',
        'Distance': 'Distance',
        'DistanceReal': 'DistanceReal',
        'UsedInRunPlan': 'UsedInRunPlan'
    }

    def __init__(self, Id=None, ShortName=None, Number=None, Order=None, SessionId=None, RunDate=None, RunStatus=None, IsValid=True, LastUpdateDateUtc=None, LastUpdateUser=None, Revision=None, TireSetId=None, ChangedPart=None, LapCount=None, Distance=None, DistanceReal=None, UsedInRunPlan=True, _configuration=None):  # noqa: E501
        """Run - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._ShortName = None
        self._Number = None
        self._Order = None
        self._SessionId = None
        self._RunDate = None
        self._RunStatus = None
        self._IsValid = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._Revision = None
        self._TireSetId = None
        self._ChangedPart = None
        self._LapCount = None
        self._Distance = None
        self._DistanceReal = None
        self._UsedInRunPlan = None
        self.discriminator = None

        self.Id = Id
        if ShortName is not None:
            self.ShortName = ShortName
        self.Number = Number
        self.Order = Order
        self.SessionId = SessionId
        self.RunDate = RunDate
        if RunStatus is not None:
            self.RunStatus = RunStatus
        if IsValid is not None:
            self.IsValid = IsValid
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if Revision is not None:
            self.Revision = Revision
        if TireSetId is not None:
            self.TireSetId = TireSetId
        if ChangedPart is not None:
            self.ChangedPart = ChangedPart
        if LapCount is not None:
            self.LapCount = LapCount
        if Distance is not None:
            self.Distance = Distance
        if DistanceReal is not None:
            self.DistanceReal = DistanceReal
        if UsedInRunPlan is not None:
            self.UsedInRunPlan = UsedInRunPlan

    @property
    def Id(self):
        """Gets the Id of this Run.  # noqa: E501

        The run id.  # noqa: E501

        :return: The Id of this Run.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Run.

        The run id.  # noqa: E501

        :param Id: The Id of this Run.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def ShortName(self):
        """Gets the ShortName of this Run.  # noqa: E501

        The run short name.  # noqa: E501

        :return: The ShortName of this Run.  # noqa: E501
        :rtype: str
        """
        return self._ShortName

    @ShortName.setter
    def ShortName(self, ShortName):
        """Sets the ShortName of this Run.

        The run short name.  # noqa: E501

        :param ShortName: The ShortName of this Run.  # noqa: E501
        :type: str
        """

        self._ShortName = ShortName

    @property
    def Number(self):
        """Gets the Number of this Run.  # noqa: E501

        The run number.  # noqa: E501

        :return: The Number of this Run.  # noqa: E501
        :rtype: int
        """
        return self._Number

    @Number.setter
    def Number(self, Number):
        """Sets the Number of this Run.

        The run number.  # noqa: E501

        :param Number: The Number of this Run.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and Number is None:
            raise ValueError("Invalid value for `Number`, must not be `None`")  # noqa: E501

        self._Number = Number

    @property
    def Order(self):
        """Gets the Order of this Run.  # noqa: E501

        The run order.  # noqa: E501

        :return: The Order of this Run.  # noqa: E501
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        """Sets the Order of this Run.

        The run order.  # noqa: E501

        :param Order: The Order of this Run.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Order is None:
            raise ValueError("Invalid value for `Order`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Order is not None and len(Order) < 1):
            raise ValueError("Invalid value for `Order`, length must be greater than or equal to `1`")  # noqa: E501

        self._Order = Order

    @property
    def SessionId(self):
        """Gets the SessionId of this Run.  # noqa: E501

        The session unique id to which the run is linked.  # noqa: E501

        :return: The SessionId of this Run.  # noqa: E501
        :rtype: str
        """
        return self._SessionId

    @SessionId.setter
    def SessionId(self, SessionId):
        """Sets the SessionId of this Run.

        The session unique id to which the run is linked.  # noqa: E501

        :param SessionId: The SessionId of this Run.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and SessionId is None:
            raise ValueError("Invalid value for `SessionId`, must not be `None`")  # noqa: E501

        self._SessionId = SessionId

    @property
    def RunDate(self):
        """Gets the RunDate of this Run.  # noqa: E501

        The run date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :return: The RunDate of this Run.  # noqa: E501
        :rtype: datetime
        """
        return self._RunDate

    @RunDate.setter
    def RunDate(self, RunDate):
        """Sets the RunDate of this Run.

        The run date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :param RunDate: The RunDate of this Run.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and RunDate is None:
            raise ValueError("Invalid value for `RunDate`, must not be `None`")  # noqa: E501

        self._RunDate = RunDate

    @property
    def RunStatus(self):
        """Gets the RunStatus of this Run.  # noqa: E501

        The run status.  # noqa: E501

        :return: The RunStatus of this Run.  # noqa: E501
        :rtype: str
        """
        return self._RunStatus

    @RunStatus.setter
    def RunStatus(self, RunStatus):
        """Sets the RunStatus of this Run.

        The run status.  # noqa: E501

        :param RunStatus: The RunStatus of this Run.  # noqa: E501
        :type: str
        """
        allowed_values = ["Normal", "Service", "Virtual"]  # noqa: E501
        if (self._configuration.client_side_validation and
                RunStatus not in allowed_values):
            raise ValueError(
                "Invalid value for `RunStatus` ({0}), must be one of {1}"  # noqa: E501
                .format(RunStatus, allowed_values)
            )

        self._RunStatus = RunStatus

    @property
    def IsValid(self):
        """Gets the IsValid of this Run.  # noqa: E501

        The run \"valid\" status.  # noqa: E501

        :return: The IsValid of this Run.  # noqa: E501
        :rtype: bool
        """
        return self._IsValid

    @IsValid.setter
    def IsValid(self, IsValid):
        """Sets the IsValid of this Run.

        The run \"valid\" status.  # noqa: E501

        :param IsValid: The IsValid of this Run.  # noqa: E501
        :type: bool
        """

        self._IsValid = IsValid

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Run.  # noqa: E501

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this Run.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Run.

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Run.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Run.  # noqa: E501

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateUser of this Run.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Run.

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Run.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def Revision(self):
        """Gets the Revision of this Run.  # noqa: E501

        The revision number of the object.  # noqa: E501

        :return: The Revision of this Run.  # noqa: E501
        :rtype: int
        """
        return self._Revision

    @Revision.setter
    def Revision(self, Revision):
        """Sets the Revision of this Run.

        The revision number of the object.  # noqa: E501

        :param Revision: The Revision of this Run.  # noqa: E501
        :type: int
        """

        self._Revision = Revision

    @property
    def TireSetId(self):
        """Gets the TireSetId of this Run.  # noqa: E501

        The tyre set id linked to the run  # noqa: E501

        :return: The TireSetId of this Run.  # noqa: E501
        :rtype: str
        """
        return self._TireSetId

    @TireSetId.setter
    def TireSetId(self, TireSetId):
        """Sets the TireSetId of this Run.

        The tyre set id linked to the run  # noqa: E501

        :param TireSetId: The TireSetId of this Run.  # noqa: E501
        :type: str
        """

        self._TireSetId = TireSetId

    @property
    def ChangedPart(self):
        """Gets the ChangedPart of this Run.  # noqa: E501

        Car Part changed  # noqa: E501

        :return: The ChangedPart of this Run.  # noqa: E501
        :rtype: str
        """
        return self._ChangedPart

    @ChangedPart.setter
    def ChangedPart(self, ChangedPart):
        """Sets the ChangedPart of this Run.

        Car Part changed  # noqa: E501

        :param ChangedPart: The ChangedPart of this Run.  # noqa: E501
        :type: str
        """

        self._ChangedPart = ChangedPart

    @property
    def LapCount(self):
        """Gets the LapCount of this Run.  # noqa: E501

        Lap count in the run  # noqa: E501

        :return: The LapCount of this Run.  # noqa: E501
        :rtype: int
        """
        return self._LapCount

    @LapCount.setter
    def LapCount(self, LapCount):
        """Sets the LapCount of this Run.

        Lap count in the run  # noqa: E501

        :param LapCount: The LapCount of this Run.  # noqa: E501
        :type: int
        """

        self._LapCount = LapCount

    @property
    def Distance(self):
        """Gets the Distance of this Run.  # noqa: E501

        Distance performed on the run  # noqa: E501

        :return: The Distance of this Run.  # noqa: E501
        :rtype: float
        """
        return self._Distance

    @Distance.setter
    def Distance(self, Distance):
        """Sets the Distance of this Run.

        Distance performed on the run  # noqa: E501

        :param Distance: The Distance of this Run.  # noqa: E501
        :type: float
        """

        self._Distance = Distance

    @property
    def DistanceReal(self):
        """Gets the DistanceReal of this Run.  # noqa: E501

        distance real performed during the run  # noqa: E501

        :return: The DistanceReal of this Run.  # noqa: E501
        :rtype: float
        """
        return self._DistanceReal

    @DistanceReal.setter
    def DistanceReal(self, DistanceReal):
        """Sets the DistanceReal of this Run.

        distance real performed during the run  # noqa: E501

        :param DistanceReal: The DistanceReal of this Run.  # noqa: E501
        :type: float
        """

        self._DistanceReal = DistanceReal

    @property
    def UsedInRunPlan(self):
        """Gets the UsedInRunPlan of this Run.  # noqa: E501

        Specify whether the run can be used by a run plan  # noqa: E501

        :return: The UsedInRunPlan of this Run.  # noqa: E501
        :rtype: bool
        """
        return self._UsedInRunPlan

    @UsedInRunPlan.setter
    def UsedInRunPlan(self, UsedInRunPlan):
        """Sets the UsedInRunPlan of this Run.

        Specify whether the run can be used by a run plan  # noqa: E501

        :param UsedInRunPlan: The UsedInRunPlan of this Run.  # noqa: E501
        :type: bool
        """

        self._UsedInRunPlan = UsedInRunPlan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Run, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Run):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Run):
            return True

        return self.to_dict() != other.to_dict()

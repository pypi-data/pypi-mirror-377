# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Session(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'Number': 'int',
        'CarId': 'str',
        'TrackLayoutId': 'str',
        'SessionDate': 'datetime',
        'SessionStatus': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'Revision': 'int',
        'LapCount': 'int',
        'RunCount': 'int',
        'Distance': 'float',
        'DistanceReal': 'float',
        'DefaultAssemblies': 'list[str]',
        'Duration': 'float'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'Number': 'Number',
        'CarId': 'CarId',
        'TrackLayoutId': 'TrackLayoutId',
        'SessionDate': 'SessionDate',
        'SessionStatus': 'SessionStatus',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'Revision': 'Revision',
        'LapCount': 'LapCount',
        'RunCount': 'RunCount',
        'Distance': 'Distance',
        'DistanceReal': 'DistanceReal',
        'DefaultAssemblies': 'DefaultAssemblies',
        'Duration': 'Duration'
    }

    def __init__(self, Id=None, Name=None, Number=None, CarId=None, TrackLayoutId=None, SessionDate=None, SessionStatus=None, LastUpdateDateUtc=None, LastUpdateUser=None, Revision=None, LapCount=None, RunCount=None, Distance=None, DistanceReal=None, DefaultAssemblies=None, Duration=None, _configuration=None):  # noqa: E501
        """Session - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._Number = None
        self._CarId = None
        self._TrackLayoutId = None
        self._SessionDate = None
        self._SessionStatus = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._Revision = None
        self._LapCount = None
        self._RunCount = None
        self._Distance = None
        self._DistanceReal = None
        self._DefaultAssemblies = None
        self._Duration = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        self.Number = Number
        self.CarId = CarId
        self.TrackLayoutId = TrackLayoutId
        self.SessionDate = SessionDate
        if SessionStatus is not None:
            self.SessionStatus = SessionStatus
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if Revision is not None:
            self.Revision = Revision
        if LapCount is not None:
            self.LapCount = LapCount
        if RunCount is not None:
            self.RunCount = RunCount
        if Distance is not None:
            self.Distance = Distance
        if DistanceReal is not None:
            self.DistanceReal = DistanceReal
        if DefaultAssemblies is not None:
            self.DefaultAssemblies = DefaultAssemblies
        if Duration is not None:
            self.Duration = Duration

    @property
    def Id(self):
        """Gets the Id of this Session.  # noqa: E501

        The unique session Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Session.  # noqa: E501

        :return: The Id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Session.

        The unique session Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Session.  # noqa: E501

        :param Id: The Id of this Session.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this Session.  # noqa: E501

        The session name.  # noqa: E501

        :return: The Name of this Session.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Session.

        The session name.  # noqa: E501

        :param Name: The Name of this Session.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def Number(self):
        """Gets the Number of this Session.  # noqa: E501

        The session number.  # noqa: E501

        :return: The Number of this Session.  # noqa: E501
        :rtype: int
        """
        return self._Number

    @Number.setter
    def Number(self, Number):
        """Sets the Number of this Session.

        The session number.  # noqa: E501

        :param Number: The Number of this Session.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and Number is None:
            raise ValueError("Invalid value for `Number`, must not be `None`")  # noqa: E501

        self._Number = Number

    @property
    def CarId(self):
        """Gets the CarId of this Session.  # noqa: E501

        The car unique id to which the session is linked.  # noqa: E501

        :return: The CarId of this Session.  # noqa: E501
        :rtype: str
        """
        return self._CarId

    @CarId.setter
    def CarId(self, CarId):
        """Sets the CarId of this Session.

        The car unique id to which the session is linked.  # noqa: E501

        :param CarId: The CarId of this Session.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and CarId is None:
            raise ValueError("Invalid value for `CarId`, must not be `None`")  # noqa: E501

        self._CarId = CarId

    @property
    def TrackLayoutId(self):
        """Gets the TrackLayoutId of this Session.  # noqa: E501

        The track layout unique id.  # noqa: E501

        :return: The TrackLayoutId of this Session.  # noqa: E501
        :rtype: str
        """
        return self._TrackLayoutId

    @TrackLayoutId.setter
    def TrackLayoutId(self, TrackLayoutId):
        """Sets the TrackLayoutId of this Session.

        The track layout unique id.  # noqa: E501

        :param TrackLayoutId: The TrackLayoutId of this Session.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and TrackLayoutId is None:
            raise ValueError("Invalid value for `TrackLayoutId`, must not be `None`")  # noqa: E501

        self._TrackLayoutId = TrackLayoutId

    @property
    def SessionDate(self):
        """Gets the SessionDate of this Session.  # noqa: E501

        The session date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :return: The SessionDate of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._SessionDate

    @SessionDate.setter
    def SessionDate(self, SessionDate):
        """Sets the SessionDate of this Session.

        The session date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :param SessionDate: The SessionDate of this Session.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and SessionDate is None:
            raise ValueError("Invalid value for `SessionDate`, must not be `None`")  # noqa: E501

        self._SessionDate = SessionDate

    @property
    def SessionStatus(self):
        """Gets the SessionStatus of this Session.  # noqa: E501

        The session status.  # noqa: E501

        :return: The SessionStatus of this Session.  # noqa: E501
        :rtype: str
        """
        return self._SessionStatus

    @SessionStatus.setter
    def SessionStatus(self, SessionStatus):
        """Sets the SessionStatus of this Session.

        The session status.  # noqa: E501

        :param SessionStatus: The SessionStatus of this Session.  # noqa: E501
        :type: str
        """
        allowed_values = ["Normal", "Assembly", "Disassembly"]  # noqa: E501
        if (self._configuration.client_side_validation and
                SessionStatus not in allowed_values):
            raise ValueError(
                "Invalid value for `SessionStatus` ({0}), must be one of {1}"  # noqa: E501
                .format(SessionStatus, allowed_values)
            )

        self._SessionStatus = SessionStatus

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Session.  # noqa: E501

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Session.

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Session.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Session.  # noqa: E501

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateUser of this Session.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Session.

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Session.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def Revision(self):
        """Gets the Revision of this Session.  # noqa: E501

        The revision number of the object.  # noqa: E501

        :return: The Revision of this Session.  # noqa: E501
        :rtype: int
        """
        return self._Revision

    @Revision.setter
    def Revision(self, Revision):
        """Sets the Revision of this Session.

        The revision number of the object.  # noqa: E501

        :param Revision: The Revision of this Session.  # noqa: E501
        :type: int
        """

        self._Revision = Revision

    @property
    def LapCount(self):
        """Gets the LapCount of this Session.  # noqa: E501

        Lap count in the session  # noqa: E501

        :return: The LapCount of this Session.  # noqa: E501
        :rtype: int
        """
        return self._LapCount

    @LapCount.setter
    def LapCount(self, LapCount):
        """Sets the LapCount of this Session.

        Lap count in the session  # noqa: E501

        :param LapCount: The LapCount of this Session.  # noqa: E501
        :type: int
        """

        self._LapCount = LapCount

    @property
    def RunCount(self):
        """Gets the RunCount of this Session.  # noqa: E501

        Run count in the session  # noqa: E501

        :return: The RunCount of this Session.  # noqa: E501
        :rtype: int
        """
        return self._RunCount

    @RunCount.setter
    def RunCount(self, RunCount):
        """Sets the RunCount of this Session.

        Run count in the session  # noqa: E501

        :param RunCount: The RunCount of this Session.  # noqa: E501
        :type: int
        """

        self._RunCount = RunCount

    @property
    def Distance(self):
        """Gets the Distance of this Session.  # noqa: E501

        Distance performed during the session  # noqa: E501

        :return: The Distance of this Session.  # noqa: E501
        :rtype: float
        """
        return self._Distance

    @Distance.setter
    def Distance(self, Distance):
        """Sets the Distance of this Session.

        Distance performed during the session  # noqa: E501

        :param Distance: The Distance of this Session.  # noqa: E501
        :type: float
        """

        self._Distance = Distance

    @property
    def DistanceReal(self):
        """Gets the DistanceReal of this Session.  # noqa: E501

        Distance real performed during the session  # noqa: E501

        :return: The DistanceReal of this Session.  # noqa: E501
        :rtype: float
        """
        return self._DistanceReal

    @DistanceReal.setter
    def DistanceReal(self, DistanceReal):
        """Sets the DistanceReal of this Session.

        Distance real performed during the session  # noqa: E501

        :param DistanceReal: The DistanceReal of this Session.  # noqa: E501
        :type: float
        """

        self._DistanceReal = DistanceReal

    @property
    def DefaultAssemblies(self):
        """Gets the DefaultAssemblies of this Session.  # noqa: E501

        List of the default Assemblies used to create the first session's run.  You have to specify one assemblies by target.  # noqa: E501

        :return: The DefaultAssemblies of this Session.  # noqa: E501
        :rtype: list[str]
        """
        return self._DefaultAssemblies

    @DefaultAssemblies.setter
    def DefaultAssemblies(self, DefaultAssemblies):
        """Sets the DefaultAssemblies of this Session.

        List of the default Assemblies used to create the first session's run.  You have to specify one assemblies by target.  # noqa: E501

        :param DefaultAssemblies: The DefaultAssemblies of this Session.  # noqa: E501
        :type: list[str]
        """

        self._DefaultAssemblies = DefaultAssemblies

    @property
    def Duration(self):
        """Gets the Duration of this Session.  # noqa: E501

        The session duration in secondes  # noqa: E501

        :return: The Duration of this Session.  # noqa: E501
        :rtype: float
        """
        return self._Duration

    @Duration.setter
    def Duration(self, Duration):
        """Sets the Duration of this Session.

        The session duration in secondes  # noqa: E501

        :param Duration: The Duration of this Session.  # noqa: E501
        :type: float
        """

        self._Duration = Duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Session, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Session):
            return True

        return self.to_dict() != other.to_dict()

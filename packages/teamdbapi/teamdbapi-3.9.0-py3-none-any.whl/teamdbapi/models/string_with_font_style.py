# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class StringWithFontStyle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Text': 'str',
        'ColorFont': 'str',
        'BackColor': 'str',
        'Bold': 'str',
        'Italic': 'str',
        'Underline': 'str'
    }

    attribute_map = {
        'Text': 'Text',
        'ColorFont': 'ColorFont',
        'BackColor': 'BackColor',
        'Bold': 'Bold',
        'Italic': 'Italic',
        'Underline': 'Underline'
    }

    def __init__(self, Text=None, ColorFont=None, BackColor=None, Bold=None, Italic=None, Underline=None, _configuration=None):  # noqa: E501
        """StringWithFontStyle - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Text = None
        self._ColorFont = None
        self._BackColor = None
        self._Bold = None
        self._Italic = None
        self._Underline = None
        self.discriminator = None

        if Text is not None:
            self.Text = Text
        if ColorFont is not None:
            self.ColorFont = ColorFont
        if BackColor is not None:
            self.BackColor = BackColor
        if Bold is not None:
            self.Bold = Bold
        if Italic is not None:
            self.Italic = Italic
        if Underline is not None:
            self.Underline = Underline

    @property
    def Text(self):
        """Gets the Text of this StringWithFontStyle.  # noqa: E501

        The text  # noqa: E501

        :return: The Text of this StringWithFontStyle.  # noqa: E501
        :rtype: str
        """
        return self._Text

    @Text.setter
    def Text(self, Text):
        """Sets the Text of this StringWithFontStyle.

        The text  # noqa: E501

        :param Text: The Text of this StringWithFontStyle.  # noqa: E501
        :type: str
        """

        self._Text = Text

    @property
    def ColorFont(self):
        """Gets the ColorFont of this StringWithFontStyle.  # noqa: E501

        The font color. You must enter a ARGB hex value : #FF12EE33  # noqa: E501

        :return: The ColorFont of this StringWithFontStyle.  # noqa: E501
        :rtype: str
        """
        return self._ColorFont

    @ColorFont.setter
    def ColorFont(self, ColorFont):
        """Sets the ColorFont of this StringWithFontStyle.

        The font color. You must enter a ARGB hex value : #FF12EE33  # noqa: E501

        :param ColorFont: The ColorFont of this StringWithFontStyle.  # noqa: E501
        :type: str
        """

        self._ColorFont = ColorFont

    @property
    def BackColor(self):
        """Gets the BackColor of this StringWithFontStyle.  # noqa: E501

        The background color. You must enter a ARGB hex value : #FF12EE33  # noqa: E501

        :return: The BackColor of this StringWithFontStyle.  # noqa: E501
        :rtype: str
        """
        return self._BackColor

    @BackColor.setter
    def BackColor(self, BackColor):
        """Sets the BackColor of this StringWithFontStyle.

        The background color. You must enter a ARGB hex value : #FF12EE33  # noqa: E501

        :param BackColor: The BackColor of this StringWithFontStyle.  # noqa: E501
        :type: str
        """

        self._BackColor = BackColor

    @property
    def Bold(self):
        """Gets the Bold of this StringWithFontStyle.  # noqa: E501

        Specify whether the font style is bold  # noqa: E501

        :return: The Bold of this StringWithFontStyle.  # noqa: E501
        :rtype: str
        """
        return self._Bold

    @Bold.setter
    def Bold(self, Bold):
        """Sets the Bold of this StringWithFontStyle.

        Specify whether the font style is bold  # noqa: E501

        :param Bold: The Bold of this StringWithFontStyle.  # noqa: E501
        :type: str
        """
        allowed_values = ["Regular", "Bold", "Italic", "Underline", "Strikeout"]  # noqa: E501
        if (self._configuration.client_side_validation and
                Bold not in allowed_values):
            raise ValueError(
                "Invalid value for `Bold` ({0}), must be one of {1}"  # noqa: E501
                .format(Bold, allowed_values)
            )

        self._Bold = Bold

    @property
    def Italic(self):
        """Gets the Italic of this StringWithFontStyle.  # noqa: E501

        Specify whether the font style is italic  # noqa: E501

        :return: The Italic of this StringWithFontStyle.  # noqa: E501
        :rtype: str
        """
        return self._Italic

    @Italic.setter
    def Italic(self, Italic):
        """Sets the Italic of this StringWithFontStyle.

        Specify whether the font style is italic  # noqa: E501

        :param Italic: The Italic of this StringWithFontStyle.  # noqa: E501
        :type: str
        """
        allowed_values = ["Regular", "Bold", "Italic", "Underline", "Strikeout"]  # noqa: E501
        if (self._configuration.client_side_validation and
                Italic not in allowed_values):
            raise ValueError(
                "Invalid value for `Italic` ({0}), must be one of {1}"  # noqa: E501
                .format(Italic, allowed_values)
            )

        self._Italic = Italic

    @property
    def Underline(self):
        """Gets the Underline of this StringWithFontStyle.  # noqa: E501

        Specify whether the font style is underline  # noqa: E501

        :return: The Underline of this StringWithFontStyle.  # noqa: E501
        :rtype: str
        """
        return self._Underline

    @Underline.setter
    def Underline(self, Underline):
        """Sets the Underline of this StringWithFontStyle.

        Specify whether the font style is underline  # noqa: E501

        :param Underline: The Underline of this StringWithFontStyle.  # noqa: E501
        :type: str
        """
        allowed_values = ["Regular", "Bold", "Italic", "Underline", "Strikeout"]  # noqa: E501
        if (self._configuration.client_side_validation and
                Underline not in allowed_values):
            raise ValueError(
                "Invalid value for `Underline` ({0}), must be one of {1}"  # noqa: E501
                .format(Underline, allowed_values)
            )

        self._Underline = Underline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StringWithFontStyle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StringWithFontStyle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StringWithFontStyle):
            return True

        return self.to_dict() != other.to_dict()

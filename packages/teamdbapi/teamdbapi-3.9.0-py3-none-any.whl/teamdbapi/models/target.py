# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Target(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'Description': 'str',
        'FileFormat': 'str',
        'AutoGenerateAssembly': 'bool',
        'AutoGenerateAssemblyVersionId': 'str',
        'RevisionMergeCommentMandatory': 'bool',
        'AllowOverrideLimits': 'bool',
        'AssemblyNameSuffix': 'str',
        'ShowParamHasNewRevision': 'bool',
        'LinkMapToAxis': 'bool',
        'ReusePreviousRunAssembly': 'bool',
        'AutoGenerateAssemblyEventType': 'str'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'Description': 'Description',
        'FileFormat': 'FileFormat',
        'AutoGenerateAssembly': 'AutoGenerateAssembly',
        'AutoGenerateAssemblyVersionId': 'AutoGenerateAssemblyVersionId',
        'RevisionMergeCommentMandatory': 'RevisionMergeCommentMandatory',
        'AllowOverrideLimits': 'AllowOverrideLimits',
        'AssemblyNameSuffix': 'AssemblyNameSuffix',
        'ShowParamHasNewRevision': 'ShowParamHasNewRevision',
        'LinkMapToAxis': 'LinkMapToAxis',
        'ReusePreviousRunAssembly': 'ReusePreviousRunAssembly',
        'AutoGenerateAssemblyEventType': 'AutoGenerateAssemblyEventType'
    }

    def __init__(self, Id=None, Name=None, Description=None, FileFormat='M', AutoGenerateAssembly=None, AutoGenerateAssemblyVersionId=None, RevisionMergeCommentMandatory=None, AllowOverrideLimits=None, AssemblyNameSuffix=None, ShowParamHasNewRevision=None, LinkMapToAxis=None, ReusePreviousRunAssembly=None, AutoGenerateAssemblyEventType=None, _configuration=None):  # noqa: E501
        """Target - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._Description = None
        self._FileFormat = None
        self._AutoGenerateAssembly = None
        self._AutoGenerateAssemblyVersionId = None
        self._RevisionMergeCommentMandatory = None
        self._AllowOverrideLimits = None
        self._AssemblyNameSuffix = None
        self._ShowParamHasNewRevision = None
        self._LinkMapToAxis = None
        self._ReusePreviousRunAssembly = None
        self._AutoGenerateAssemblyEventType = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        if Description is not None:
            self.Description = Description
        self.FileFormat = FileFormat
        if AutoGenerateAssembly is not None:
            self.AutoGenerateAssembly = AutoGenerateAssembly
        if AutoGenerateAssemblyVersionId is not None:
            self.AutoGenerateAssemblyVersionId = AutoGenerateAssemblyVersionId
        if RevisionMergeCommentMandatory is not None:
            self.RevisionMergeCommentMandatory = RevisionMergeCommentMandatory
        if AllowOverrideLimits is not None:
            self.AllowOverrideLimits = AllowOverrideLimits
        if AssemblyNameSuffix is not None:
            self.AssemblyNameSuffix = AssemblyNameSuffix
        if ShowParamHasNewRevision is not None:
            self.ShowParamHasNewRevision = ShowParamHasNewRevision
        if LinkMapToAxis is not None:
            self.LinkMapToAxis = LinkMapToAxis
        if ReusePreviousRunAssembly is not None:
            self.ReusePreviousRunAssembly = ReusePreviousRunAssembly
        if AutoGenerateAssemblyEventType is not None:
            self.AutoGenerateAssemblyEventType = AutoGenerateAssemblyEventType

    @property
    def Id(self):
        """Gets the Id of this Target.  # noqa: E501

        The unique target id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new target.  # noqa: E501

        :return: The Id of this Target.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Target.

        The unique target id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new target.  # noqa: E501

        :param Id: The Id of this Target.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this Target.  # noqa: E501

        The target unique name  # noqa: E501

        :return: The Name of this Target.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Target.

        The target unique name  # noqa: E501

        :param Name: The Name of this Target.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def Description(self):
        """Gets the Description of this Target.  # noqa: E501

        The target description  # noqa: E501

        :return: The Description of this Target.  # noqa: E501
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        """Sets the Description of this Target.

        The target description  # noqa: E501

        :param Description: The Description of this Target.  # noqa: E501
        :type: str
        """

        self._Description = Description

    @property
    def FileFormat(self):
        """Gets the FileFormat of this Target.  # noqa: E501

        The file format used to create the target versions.  M = 2, Dcm = 3, Clx = 4  # noqa: E501

        :return: The FileFormat of this Target.  # noqa: E501
        :rtype: str
        """
        return self._FileFormat

    @FileFormat.setter
    def FileFormat(self, FileFormat):
        """Sets the FileFormat of this Target.

        The file format used to create the target versions.  M = 2, Dcm = 3, Clx = 4  # noqa: E501

        :param FileFormat: The FileFormat of this Target.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and FileFormat is None:
            raise ValueError("Invalid value for `FileFormat`, must not be `None`")  # noqa: E501
        allowed_values = ["Simu", "M", "Dcm", "Clx", "Canopy"]  # noqa: E501
        if (self._configuration.client_side_validation and
                FileFormat not in allowed_values):
            raise ValueError(
                "Invalid value for `FileFormat` ({0}), must be one of {1}"  # noqa: E501
                .format(FileFormat, allowed_values)
            )

        self._FileFormat = FileFormat

    @property
    def AutoGenerateAssembly(self):
        """Gets the AutoGenerateAssembly of this Target.  # noqa: E501

        True if we want to automatically generate assemblies when new Runs are created  If true, then ReusePreviousRunAssembly is disabled  Must be set to false when creating a new Target  # noqa: E501

        :return: The AutoGenerateAssembly of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._AutoGenerateAssembly

    @AutoGenerateAssembly.setter
    def AutoGenerateAssembly(self, AutoGenerateAssembly):
        """Sets the AutoGenerateAssembly of this Target.

        True if we want to automatically generate assemblies when new Runs are created  If true, then ReusePreviousRunAssembly is disabled  Must be set to false when creating a new Target  # noqa: E501

        :param AutoGenerateAssembly: The AutoGenerateAssembly of this Target.  # noqa: E501
        :type: bool
        """

        self._AutoGenerateAssembly = AutoGenerateAssembly

    @property
    def AutoGenerateAssemblyVersionId(self):
        """Gets the AutoGenerateAssemblyVersionId of this Target.  # noqa: E501

        The version unqiue Id used as reference to create the assemblies when AutoGenerateAssembly is true.  It is also used to display the current version in the drop down list.  Must be set to Guid.Empty (00000000-0000-0000-0000-000000000000) when creating a new Target.  # noqa: E501

        :return: The AutoGenerateAssemblyVersionId of this Target.  # noqa: E501
        :rtype: str
        """
        return self._AutoGenerateAssemblyVersionId

    @AutoGenerateAssemblyVersionId.setter
    def AutoGenerateAssemblyVersionId(self, AutoGenerateAssemblyVersionId):
        """Sets the AutoGenerateAssemblyVersionId of this Target.

        The version unqiue Id used as reference to create the assemblies when AutoGenerateAssembly is true.  It is also used to display the current version in the drop down list.  Must be set to Guid.Empty (00000000-0000-0000-0000-000000000000) when creating a new Target.  # noqa: E501

        :param AutoGenerateAssemblyVersionId: The AutoGenerateAssemblyVersionId of this Target.  # noqa: E501
        :type: str
        """

        self._AutoGenerateAssemblyVersionId = AutoGenerateAssemblyVersionId

    @property
    def RevisionMergeCommentMandatory(self):
        """Gets the RevisionMergeCommentMandatory of this Target.  # noqa: E501

        True if you want to set comments mandatory when you merge revisions after a comparison.  # noqa: E501

        :return: The RevisionMergeCommentMandatory of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._RevisionMergeCommentMandatory

    @RevisionMergeCommentMandatory.setter
    def RevisionMergeCommentMandatory(self, RevisionMergeCommentMandatory):
        """Sets the RevisionMergeCommentMandatory of this Target.

        True if you want to set comments mandatory when you merge revisions after a comparison.  # noqa: E501

        :param RevisionMergeCommentMandatory: The RevisionMergeCommentMandatory of this Target.  # noqa: E501
        :type: bool
        """

        self._RevisionMergeCommentMandatory = RevisionMergeCommentMandatory

    @property
    def AllowOverrideLimits(self):
        """Gets the AllowOverrideLimits of this Target.  # noqa: E501

        True if you want to allow overriding parameters limits  # noqa: E501

        :return: The AllowOverrideLimits of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._AllowOverrideLimits

    @AllowOverrideLimits.setter
    def AllowOverrideLimits(self, AllowOverrideLimits):
        """Sets the AllowOverrideLimits of this Target.

        True if you want to allow overriding parameters limits  # noqa: E501

        :param AllowOverrideLimits: The AllowOverrideLimits of this Target.  # noqa: E501
        :type: bool
        """

        self._AllowOverrideLimits = AllowOverrideLimits

    @property
    def AssemblyNameSuffix(self):
        """Gets the AssemblyNameSuffix of this Target.  # noqa: E501

        The suffix name automatically applyed to the assemblies name created by Teamdb.  Must not contains _. Only contains zero or many letters and end with at least one 0.  # noqa: E501

        :return: The AssemblyNameSuffix of this Target.  # noqa: E501
        :rtype: str
        """
        return self._AssemblyNameSuffix

    @AssemblyNameSuffix.setter
    def AssemblyNameSuffix(self, AssemblyNameSuffix):
        """Sets the AssemblyNameSuffix of this Target.

        The suffix name automatically applyed to the assemblies name created by Teamdb.  Must not contains _. Only contains zero or many letters and end with at least one 0.  # noqa: E501

        :param AssemblyNameSuffix: The AssemblyNameSuffix of this Target.  # noqa: E501
        :type: str
        """

        self._AssemblyNameSuffix = AssemblyNameSuffix

    @property
    def ShowParamHasNewRevision(self):
        """Gets the ShowParamHasNewRevision of this Target.  # noqa: E501

        True to highlight the parameters having new revisions on the parameters grid  # noqa: E501

        :return: The ShowParamHasNewRevision of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._ShowParamHasNewRevision

    @ShowParamHasNewRevision.setter
    def ShowParamHasNewRevision(self, ShowParamHasNewRevision):
        """Sets the ShowParamHasNewRevision of this Target.

        True to highlight the parameters having new revisions on the parameters grid  # noqa: E501

        :param ShowParamHasNewRevision: The ShowParamHasNewRevision of this Target.  # noqa: E501
        :type: bool
        """

        self._ShowParamHasNewRevision = ShowParamHasNewRevision

    @property
    def LinkMapToAxis(self):
        """Gets the LinkMapToAxis of this Target.  # noqa: E501

        true to enabled the option that allows you to select the axis revisions  you expect to find when you export an assembly  # noqa: E501

        :return: The LinkMapToAxis of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._LinkMapToAxis

    @LinkMapToAxis.setter
    def LinkMapToAxis(self, LinkMapToAxis):
        """Sets the LinkMapToAxis of this Target.

        true to enabled the option that allows you to select the axis revisions  you expect to find when you export an assembly  # noqa: E501

        :param LinkMapToAxis: The LinkMapToAxis of this Target.  # noqa: E501
        :type: bool
        """

        self._LinkMapToAxis = LinkMapToAxis

    @property
    def ReusePreviousRunAssembly(self):
        """Gets the ReusePreviousRunAssembly of this Target.  # noqa: E501

        True if we want to automatically reusue the same assemblies associated with the previous run when a new Run is created  If true, then AutoGenerateAssembly is disabled  # noqa: E501

        :return: The ReusePreviousRunAssembly of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._ReusePreviousRunAssembly

    @ReusePreviousRunAssembly.setter
    def ReusePreviousRunAssembly(self, ReusePreviousRunAssembly):
        """Sets the ReusePreviousRunAssembly of this Target.

        True if we want to automatically reusue the same assemblies associated with the previous run when a new Run is created  If true, then AutoGenerateAssembly is disabled  # noqa: E501

        :param ReusePreviousRunAssembly: The ReusePreviousRunAssembly of this Target.  # noqa: E501
        :type: bool
        """

        self._ReusePreviousRunAssembly = ReusePreviousRunAssembly

    @property
    def AutoGenerateAssemblyEventType(self):
        """Gets the AutoGenerateAssemblyEventType of this Target.  # noqa: E501

        List of event types separated with ; for which auto generate assembly is allowed.  If empty, all the event types are allowed.  Example: Race;Test  # noqa: E501

        :return: The AutoGenerateAssemblyEventType of this Target.  # noqa: E501
        :rtype: str
        """
        return self._AutoGenerateAssemblyEventType

    @AutoGenerateAssemblyEventType.setter
    def AutoGenerateAssemblyEventType(self, AutoGenerateAssemblyEventType):
        """Sets the AutoGenerateAssemblyEventType of this Target.

        List of event types separated with ; for which auto generate assembly is allowed.  If empty, all the event types are allowed.  Example: Race;Test  # noqa: E501

        :param AutoGenerateAssemblyEventType: The AutoGenerateAssemblyEventType of this Target.  # noqa: E501
        :type: str
        """

        self._AutoGenerateAssemblyEventType = AutoGenerateAssemblyEventType

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Target, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Target):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Target):
            return True

        return self.to_dict() != other.to_dict()

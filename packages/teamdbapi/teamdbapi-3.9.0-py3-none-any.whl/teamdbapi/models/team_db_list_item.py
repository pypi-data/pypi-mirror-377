# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class TeamDBListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'ListId': 'str',
        'Name': 'str',
        'ItemOrder': 'int'
    }

    attribute_map = {
        'Id': 'Id',
        'ListId': 'ListId',
        'Name': 'Name',
        'ItemOrder': 'ItemOrder'
    }

    def __init__(self, Id=None, ListId=None, Name=None, ItemOrder=None, _configuration=None):  # noqa: E501
        """TeamDBListItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._ListId = None
        self._Name = None
        self._ItemOrder = None
        self.discriminator = None

        self.Id = Id
        self.ListId = ListId
        self.Name = Name
        if ItemOrder is not None:
            self.ItemOrder = ItemOrder

    @property
    def Id(self):
        """Gets the Id of this TeamDBListItem.  # noqa: E501

        The unique list item Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new TeamDB List Item.  # noqa: E501

        :return: The Id of this TeamDBListItem.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this TeamDBListItem.

        The unique list item Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new TeamDB List Item.  # noqa: E501

        :param Id: The Id of this TeamDBListItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def ListId(self):
        """Gets the ListId of this TeamDBListItem.  # noqa: E501

        The unique list id to which this item belongs.  # noqa: E501

        :return: The ListId of this TeamDBListItem.  # noqa: E501
        :rtype: str
        """
        return self._ListId

    @ListId.setter
    def ListId(self, ListId):
        """Sets the ListId of this TeamDBListItem.

        The unique list id to which this item belongs.  # noqa: E501

        :param ListId: The ListId of this TeamDBListItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ListId is None:
            raise ValueError("Invalid value for `ListId`, must not be `None`")  # noqa: E501

        self._ListId = ListId

    @property
    def Name(self):
        """Gets the Name of this TeamDBListItem.  # noqa: E501

        The item name.  # noqa: E501

        :return: The Name of this TeamDBListItem.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this TeamDBListItem.

        The item name.  # noqa: E501

        :param Name: The Name of this TeamDBListItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def ItemOrder(self):
        """Gets the ItemOrder of this TeamDBListItem.  # noqa: E501

        The item order in the list.  # noqa: E501

        :return: The ItemOrder of this TeamDBListItem.  # noqa: E501
        :rtype: int
        """
        return self._ItemOrder

    @ItemOrder.setter
    def ItemOrder(self, ItemOrder):
        """Sets the ItemOrder of this TeamDBListItem.

        The item order in the list.  # noqa: E501

        :param ItemOrder: The ItemOrder of this TeamDBListItem.  # noqa: E501
        :type: int
        """

        self._ItemOrder = ItemOrder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamDBListItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamDBListItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeamDBListItem):
            return True

        return self.to_dict() != other.to_dict()

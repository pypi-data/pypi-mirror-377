# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Tire(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'TireSerial': 'str',
        'Comment': 'str',
        'InitialKm': 'int',
        'RimSerial': 'str',
        'TypeTireId': 'str',
        'EventId': 'str',
        'KmBasicForwardTotal': 'float',
        'KmBasicReverseTotal': 'float',
        'KmRealForwardTotal': 'float',
        'KmRealReverseTotal': 'float',
        'KmBasicOverall': 'float',
        'KmRealOverall': 'float',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'ColdPressure': 'float',
        'LapCountForwardTotal': 'int',
        'LapCountReverseTotal': 'int',
        'BleedAdjust': 'list[BleedAdjustment]',
        'Status': 'str',
        'Weight': 'float',
        'ReturnWeight': 'float',
        'InitialSlidingEnergy': 'float',
        'SlidingEnergyTotal': 'float'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'TireSerial': 'TireSerial',
        'Comment': 'Comment',
        'InitialKm': 'InitialKm',
        'RimSerial': 'RimSerial',
        'TypeTireId': 'TypeTireId',
        'EventId': 'EventId',
        'KmBasicForwardTotal': 'KmBasicForwardTotal',
        'KmBasicReverseTotal': 'KmBasicReverseTotal',
        'KmRealForwardTotal': 'KmRealForwardTotal',
        'KmRealReverseTotal': 'KmRealReverseTotal',
        'KmBasicOverall': 'KmBasicOverall',
        'KmRealOverall': 'KmRealOverall',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'ColdPressure': 'ColdPressure',
        'LapCountForwardTotal': 'LapCountForwardTotal',
        'LapCountReverseTotal': 'LapCountReverseTotal',
        'BleedAdjust': 'BleedAdjust',
        'Status': 'Status',
        'Weight': 'Weight',
        'ReturnWeight': 'ReturnWeight',
        'InitialSlidingEnergy': 'InitialSlidingEnergy',
        'SlidingEnergyTotal': 'SlidingEnergyTotal'
    }

    def __init__(self, Id=None, Name=None, TireSerial=None, Comment=None, InitialKm=None, RimSerial=None, TypeTireId=None, EventId=None, KmBasicForwardTotal=None, KmBasicReverseTotal=None, KmRealForwardTotal=None, KmRealReverseTotal=None, KmBasicOverall=None, KmRealOverall=None, LastUpdateDateUtc=None, LastUpdateUser=None, ColdPressure=None, LapCountForwardTotal=None, LapCountReverseTotal=None, BleedAdjust=None, Status=None, Weight=None, ReturnWeight=None, InitialSlidingEnergy=None, SlidingEnergyTotal=None, _configuration=None):  # noqa: E501
        """Tire - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._TireSerial = None
        self._Comment = None
        self._InitialKm = None
        self._RimSerial = None
        self._TypeTireId = None
        self._EventId = None
        self._KmBasicForwardTotal = None
        self._KmBasicReverseTotal = None
        self._KmRealForwardTotal = None
        self._KmRealReverseTotal = None
        self._KmBasicOverall = None
        self._KmRealOverall = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._ColdPressure = None
        self._LapCountForwardTotal = None
        self._LapCountReverseTotal = None
        self._BleedAdjust = None
        self._Status = None
        self._Weight = None
        self._ReturnWeight = None
        self._InitialSlidingEnergy = None
        self._SlidingEnergyTotal = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        if TireSerial is not None:
            self.TireSerial = TireSerial
        if Comment is not None:
            self.Comment = Comment
        if InitialKm is not None:
            self.InitialKm = InitialKm
        if RimSerial is not None:
            self.RimSerial = RimSerial
        self.TypeTireId = TypeTireId
        self.EventId = EventId
        if KmBasicForwardTotal is not None:
            self.KmBasicForwardTotal = KmBasicForwardTotal
        if KmBasicReverseTotal is not None:
            self.KmBasicReverseTotal = KmBasicReverseTotal
        if KmRealForwardTotal is not None:
            self.KmRealForwardTotal = KmRealForwardTotal
        if KmRealReverseTotal is not None:
            self.KmRealReverseTotal = KmRealReverseTotal
        if KmBasicOverall is not None:
            self.KmBasicOverall = KmBasicOverall
        if KmRealOverall is not None:
            self.KmRealOverall = KmRealOverall
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if ColdPressure is not None:
            self.ColdPressure = ColdPressure
        if LapCountForwardTotal is not None:
            self.LapCountForwardTotal = LapCountForwardTotal
        if LapCountReverseTotal is not None:
            self.LapCountReverseTotal = LapCountReverseTotal
        if BleedAdjust is not None:
            self.BleedAdjust = BleedAdjust
        if Status is not None:
            self.Status = Status
        if Weight is not None:
            self.Weight = Weight
        if ReturnWeight is not None:
            self.ReturnWeight = ReturnWeight
        if InitialSlidingEnergy is not None:
            self.InitialSlidingEnergy = InitialSlidingEnergy
        if SlidingEnergyTotal is not None:
            self.SlidingEnergyTotal = SlidingEnergyTotal

    @property
    def Id(self):
        """Gets the Id of this Tire.  # noqa: E501

        Tire unique identifier  # noqa: E501

        :return: The Id of this Tire.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Tire.

        Tire unique identifier  # noqa: E501

        :param Id: The Id of this Tire.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this Tire.  # noqa: E501

        Tire name  # noqa: E501

        :return: The Name of this Tire.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Tire.

        Tire name  # noqa: E501

        :param Name: The Name of this Tire.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def TireSerial(self):
        """Gets the TireSerial of this Tire.  # noqa: E501

        Tire serial number  # noqa: E501

        :return: The TireSerial of this Tire.  # noqa: E501
        :rtype: str
        """
        return self._TireSerial

    @TireSerial.setter
    def TireSerial(self, TireSerial):
        """Sets the TireSerial of this Tire.

        Tire serial number  # noqa: E501

        :param TireSerial: The TireSerial of this Tire.  # noqa: E501
        :type: str
        """

        self._TireSerial = TireSerial

    @property
    def Comment(self):
        """Gets the Comment of this Tire.  # noqa: E501

        Tire comments  # noqa: E501

        :return: The Comment of this Tire.  # noqa: E501
        :rtype: str
        """
        return self._Comment

    @Comment.setter
    def Comment(self, Comment):
        """Sets the Comment of this Tire.

        Tire comments  # noqa: E501

        :param Comment: The Comment of this Tire.  # noqa: E501
        :type: str
        """

        self._Comment = Comment

    @property
    def InitialKm(self):
        """Gets the InitialKm of this Tire.  # noqa: E501

        Initial tire km  # noqa: E501

        :return: The InitialKm of this Tire.  # noqa: E501
        :rtype: int
        """
        return self._InitialKm

    @InitialKm.setter
    def InitialKm(self, InitialKm):
        """Sets the InitialKm of this Tire.

        Initial tire km  # noqa: E501

        :param InitialKm: The InitialKm of this Tire.  # noqa: E501
        :type: int
        """

        self._InitialKm = InitialKm

    @property
    def RimSerial(self):
        """Gets the RimSerial of this Tire.  # noqa: E501

        Rim serial number  # noqa: E501

        :return: The RimSerial of this Tire.  # noqa: E501
        :rtype: str
        """
        return self._RimSerial

    @RimSerial.setter
    def RimSerial(self, RimSerial):
        """Sets the RimSerial of this Tire.

        Rim serial number  # noqa: E501

        :param RimSerial: The RimSerial of this Tire.  # noqa: E501
        :type: str
        """

        self._RimSerial = RimSerial

    @property
    def TypeTireId(self):
        """Gets the TypeTireId of this Tire.  # noqa: E501

        Unique identifier of the Tire rubber type. You must choose an Id from the TeamDBListItem collection corresponding to the TeamDBList named TypeTireRubber.  # noqa: E501

        :return: The TypeTireId of this Tire.  # noqa: E501
        :rtype: str
        """
        return self._TypeTireId

    @TypeTireId.setter
    def TypeTireId(self, TypeTireId):
        """Sets the TypeTireId of this Tire.

        Unique identifier of the Tire rubber type. You must choose an Id from the TeamDBListItem collection corresponding to the TeamDBList named TypeTireRubber.  # noqa: E501

        :param TypeTireId: The TypeTireId of this Tire.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and TypeTireId is None:
            raise ValueError("Invalid value for `TypeTireId`, must not be `None`")  # noqa: E501

        self._TypeTireId = TypeTireId

    @property
    def EventId(self):
        """Gets the EventId of this Tire.  # noqa: E501

        Unique identifier corresponding to the event to which the tire belongs  # noqa: E501

        :return: The EventId of this Tire.  # noqa: E501
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        """Sets the EventId of this Tire.

        Unique identifier corresponding to the event to which the tire belongs  # noqa: E501

        :param EventId: The EventId of this Tire.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and EventId is None:
            raise ValueError("Invalid value for `EventId`, must not be `None`")  # noqa: E501

        self._EventId = EventId

    @property
    def KmBasicForwardTotal(self):
        """Gets the KmBasicForwardTotal of this Tire.  # noqa: E501

        Total distance performed by the tire mounted in the forward direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :return: The KmBasicForwardTotal of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._KmBasicForwardTotal

    @KmBasicForwardTotal.setter
    def KmBasicForwardTotal(self, KmBasicForwardTotal):
        """Sets the KmBasicForwardTotal of this Tire.

        Total distance performed by the tire mounted in the forward direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :param KmBasicForwardTotal: The KmBasicForwardTotal of this Tire.  # noqa: E501
        :type: float
        """

        self._KmBasicForwardTotal = KmBasicForwardTotal

    @property
    def KmBasicReverseTotal(self):
        """Gets the KmBasicReverseTotal of this Tire.  # noqa: E501

        Total distance performed by the tire mounted in the reverse direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :return: The KmBasicReverseTotal of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._KmBasicReverseTotal

    @KmBasicReverseTotal.setter
    def KmBasicReverseTotal(self, KmBasicReverseTotal):
        """Sets the KmBasicReverseTotal of this Tire.

        Total distance performed by the tire mounted in the reverse direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :param KmBasicReverseTotal: The KmBasicReverseTotal of this Tire.  # noqa: E501
        :type: float
        """

        self._KmBasicReverseTotal = KmBasicReverseTotal

    @property
    def KmRealForwardTotal(self):
        """Gets the KmRealForwardTotal of this Tire.  # noqa: E501

        Total real distance performed lap by lap by the tire mounted in the forward direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :return: The KmRealForwardTotal of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._KmRealForwardTotal

    @KmRealForwardTotal.setter
    def KmRealForwardTotal(self, KmRealForwardTotal):
        """Sets the KmRealForwardTotal of this Tire.

        Total real distance performed lap by lap by the tire mounted in the forward direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :param KmRealForwardTotal: The KmRealForwardTotal of this Tire.  # noqa: E501
        :type: float
        """

        self._KmRealForwardTotal = KmRealForwardTotal

    @property
    def KmRealReverseTotal(self):
        """Gets the KmRealReverseTotal of this Tire.  # noqa: E501

        Total real distance performed lap by lap by the tire mounted in the reverse direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :return: The KmRealReverseTotal of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._KmRealReverseTotal

    @KmRealReverseTotal.setter
    def KmRealReverseTotal(self, KmRealReverseTotal):
        """Sets the KmRealReverseTotal of this Tire.

        Total real distance performed lap by lap by the tire mounted in the reverse direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :param KmRealReverseTotal: The KmRealReverseTotal of this Tire.  # noqa: E501
        :type: float
        """

        self._KmRealReverseTotal = KmRealReverseTotal

    @property
    def KmBasicOverall(self):
        """Gets the KmBasicOverall of this Tire.  # noqa: E501

        Global distance performed by the tire (readonly).  This field is automatically computed by the system.  # noqa: E501

        :return: The KmBasicOverall of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._KmBasicOverall

    @KmBasicOverall.setter
    def KmBasicOverall(self, KmBasicOverall):
        """Sets the KmBasicOverall of this Tire.

        Global distance performed by the tire (readonly).  This field is automatically computed by the system.  # noqa: E501

        :param KmBasicOverall: The KmBasicOverall of this Tire.  # noqa: E501
        :type: float
        """

        self._KmBasicOverall = KmBasicOverall

    @property
    def KmRealOverall(self):
        """Gets the KmRealOverall of this Tire.  # noqa: E501

        Global real distance performed by the tire (readonly).  This field is automatically computed by the system.  # noqa: E501

        :return: The KmRealOverall of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._KmRealOverall

    @KmRealOverall.setter
    def KmRealOverall(self, KmRealOverall):
        """Sets the KmRealOverall of this Tire.

        Global real distance performed by the tire (readonly).  This field is automatically computed by the system.  # noqa: E501

        :param KmRealOverall: The KmRealOverall of this Tire.  # noqa: E501
        :type: float
        """

        self._KmRealOverall = KmRealOverall

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Tire.  # noqa: E501

        Last updated utc date time. This field is automatically filled by the system.  # noqa: E501

        :return: The LastUpdateDateUtc of this Tire.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Tire.

        Last updated utc date time. This field is automatically filled by the system.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Tire.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Tire.  # noqa: E501

        Name of the last user who updated the data. This field is automatically filled by the system.  # noqa: E501

        :return: The LastUpdateUser of this Tire.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Tire.

        Name of the last user who updated the data. This field is automatically filled by the system.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Tire.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def ColdPressure(self):
        """Gets the ColdPressure of this Tire.  # noqa: E501

        The cold pressure value  # noqa: E501

        :return: The ColdPressure of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._ColdPressure

    @ColdPressure.setter
    def ColdPressure(self, ColdPressure):
        """Sets the ColdPressure of this Tire.

        The cold pressure value  # noqa: E501

        :param ColdPressure: The ColdPressure of this Tire.  # noqa: E501
        :type: float
        """

        self._ColdPressure = ColdPressure

    @property
    def LapCountForwardTotal(self):
        """Gets the LapCountForwardTotal of this Tire.  # noqa: E501

        Total lap count performed by the tire mounted in the forward direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :return: The LapCountForwardTotal of this Tire.  # noqa: E501
        :rtype: int
        """
        return self._LapCountForwardTotal

    @LapCountForwardTotal.setter
    def LapCountForwardTotal(self, LapCountForwardTotal):
        """Sets the LapCountForwardTotal of this Tire.

        Total lap count performed by the tire mounted in the forward direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :param LapCountForwardTotal: The LapCountForwardTotal of this Tire.  # noqa: E501
        :type: int
        """

        self._LapCountForwardTotal = LapCountForwardTotal

    @property
    def LapCountReverseTotal(self):
        """Gets the LapCountReverseTotal of this Tire.  # noqa: E501

        Total lap count performed by the tire mounted in the reverse direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :return: The LapCountReverseTotal of this Tire.  # noqa: E501
        :rtype: int
        """
        return self._LapCountReverseTotal

    @LapCountReverseTotal.setter
    def LapCountReverseTotal(self, LapCountReverseTotal):
        """Sets the LapCountReverseTotal of this Tire.

        Total lap count performed by the tire mounted in the reverse direction (readonly).  This field is automatically computed by the system.  # noqa: E501

        :param LapCountReverseTotal: The LapCountReverseTotal of this Tire.  # noqa: E501
        :type: int
        """

        self._LapCountReverseTotal = LapCountReverseTotal

    @property
    def BleedAdjust(self):
        """Gets the BleedAdjust of this Tire.  # noqa: E501

        the collection of bleed ajustements  # noqa: E501

        :return: The BleedAdjust of this Tire.  # noqa: E501
        :rtype: list[BleedAdjustment]
        """
        return self._BleedAdjust

    @BleedAdjust.setter
    def BleedAdjust(self, BleedAdjust):
        """Sets the BleedAdjust of this Tire.

        the collection of bleed ajustements  # noqa: E501

        :param BleedAdjust: The BleedAdjust of this Tire.  # noqa: E501
        :type: list[BleedAdjustment]
        """

        self._BleedAdjust = BleedAdjust

    @property
    def Status(self):
        """Gets the Status of this Tire.  # noqa: E501

        The tire status (value from the TireStatus enumeration)  # noqa: E501

        :return: The Status of this Tire.  # noqa: E501
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        """Sets the Status of this Tire.

        The tire status (value from the TireStatus enumeration)  # noqa: E501

        :param Status: The Status of this Tire.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotMounted", "Scrapped", "Mounted", "Heating", "Hot", "OnCar"]  # noqa: E501
        if (self._configuration.client_side_validation and
                Status not in allowed_values):
            raise ValueError(
                "Invalid value for `Status` ({0}), must be one of {1}"  # noqa: E501
                .format(Status, allowed_values)
            )

        self._Status = Status

    @property
    def Weight(self):
        """Gets the Weight of this Tire.  # noqa: E501

        The tire weight  # noqa: E501

        :return: The Weight of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._Weight

    @Weight.setter
    def Weight(self, Weight):
        """Sets the Weight of this Tire.

        The tire weight  # noqa: E501

        :param Weight: The Weight of this Tire.  # noqa: E501
        :type: float
        """

        self._Weight = Weight

    @property
    def ReturnWeight(self):
        """Gets the ReturnWeight of this Tire.  # noqa: E501

        The tire return weight  # noqa: E501

        :return: The ReturnWeight of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._ReturnWeight

    @ReturnWeight.setter
    def ReturnWeight(self, ReturnWeight):
        """Sets the ReturnWeight of this Tire.

        The tire return weight  # noqa: E501

        :param ReturnWeight: The ReturnWeight of this Tire.  # noqa: E501
        :type: float
        """

        self._ReturnWeight = ReturnWeight

    @property
    def InitialSlidingEnergy(self):
        """Gets the InitialSlidingEnergy of this Tire.  # noqa: E501

        Energie initial du pneu  # noqa: E501

        :return: The InitialSlidingEnergy of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._InitialSlidingEnergy

    @InitialSlidingEnergy.setter
    def InitialSlidingEnergy(self, InitialSlidingEnergy):
        """Sets the InitialSlidingEnergy of this Tire.

        Energie initial du pneu  # noqa: E501

        :param InitialSlidingEnergy: The InitialSlidingEnergy of this Tire.  # noqa: E501
        :type: float
        """

        self._InitialSlidingEnergy = InitialSlidingEnergy

    @property
    def SlidingEnergyTotal(self):
        """Gets the SlidingEnergyTotal of this Tire.  # noqa: E501

        Energie total du pneu  # noqa: E501

        :return: The SlidingEnergyTotal of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._SlidingEnergyTotal

    @SlidingEnergyTotal.setter
    def SlidingEnergyTotal(self, SlidingEnergyTotal):
        """Sets the SlidingEnergyTotal of this Tire.

        Energie total du pneu  # noqa: E501

        :param SlidingEnergyTotal: The SlidingEnergyTotal of this Tire.  # noqa: E501
        :type: float
        """

        self._SlidingEnergyTotal = SlidingEnergyTotal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tire, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tire):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tire):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class TireSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'EventId': 'str',
        'Name': 'str',
        'Comment': 'str',
        'IdFR': 'str',
        'IdFL': 'str',
        'IdRR': 'str',
        'IdRL': 'str',
        'MountingDirectionFL': 'str',
        'MountingDirectionFR': 'str',
        'MountingDirectionRL': 'str',
        'MountingDirectionRR': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'TireSetColor': 'str',
        'HeatingTimeOfUse': 'datetime',
        'HeatingDuration': 'float',
        'HeatingTemperature': 'str',
        'HeatingOven': 'StringWithFontStyle',
        'HeatingEngineerComment': 'StringWithFontStyle',
        'HeatingTimeOnHeat': 'datetime',
        'HeatingTireComment': 'StringWithFontStyle',
        'HeatingActionAfterUse': 'str',
        'HeatingDone': 'bool',
        'IdSpare1': 'str',
        'IdSpare2': 'str'
    }

    attribute_map = {
        'Id': 'Id',
        'EventId': 'EventId',
        'Name': 'Name',
        'Comment': 'Comment',
        'IdFR': 'IdFR',
        'IdFL': 'IdFL',
        'IdRR': 'IdRR',
        'IdRL': 'IdRL',
        'MountingDirectionFL': 'MountingDirectionFL',
        'MountingDirectionFR': 'MountingDirectionFR',
        'MountingDirectionRL': 'MountingDirectionRL',
        'MountingDirectionRR': 'MountingDirectionRR',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'TireSetColor': 'TireSetColor',
        'HeatingTimeOfUse': 'HeatingTimeOfUse',
        'HeatingDuration': 'HeatingDuration',
        'HeatingTemperature': 'HeatingTemperature',
        'HeatingOven': 'HeatingOven',
        'HeatingEngineerComment': 'HeatingEngineerComment',
        'HeatingTimeOnHeat': 'HeatingTimeOnHeat',
        'HeatingTireComment': 'HeatingTireComment',
        'HeatingActionAfterUse': 'HeatingActionAfterUse',
        'HeatingDone': 'HeatingDone',
        'IdSpare1': 'IdSpare1',
        'IdSpare2': 'IdSpare2'
    }

    def __init__(self, Id=None, EventId=None, Name=None, Comment=None, IdFR=None, IdFL=None, IdRR=None, IdRL=None, MountingDirectionFL=None, MountingDirectionFR=None, MountingDirectionRL=None, MountingDirectionRR=None, LastUpdateDateUtc=None, LastUpdateUser=None, TireSetColor=None, HeatingTimeOfUse=None, HeatingDuration=None, HeatingTemperature=None, HeatingOven=None, HeatingEngineerComment=None, HeatingTimeOnHeat=None, HeatingTireComment=None, HeatingActionAfterUse=None, HeatingDone=None, IdSpare1=None, IdSpare2=None, _configuration=None):  # noqa: E501
        """TireSet - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._EventId = None
        self._Name = None
        self._Comment = None
        self._IdFR = None
        self._IdFL = None
        self._IdRR = None
        self._IdRL = None
        self._MountingDirectionFL = None
        self._MountingDirectionFR = None
        self._MountingDirectionRL = None
        self._MountingDirectionRR = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._TireSetColor = None
        self._HeatingTimeOfUse = None
        self._HeatingDuration = None
        self._HeatingTemperature = None
        self._HeatingOven = None
        self._HeatingEngineerComment = None
        self._HeatingTimeOnHeat = None
        self._HeatingTireComment = None
        self._HeatingActionAfterUse = None
        self._HeatingDone = None
        self._IdSpare1 = None
        self._IdSpare2 = None
        self.discriminator = None

        self.Id = Id
        self.EventId = EventId
        self.Name = Name
        if Comment is not None:
            self.Comment = Comment
        if IdFR is not None:
            self.IdFR = IdFR
        if IdFL is not None:
            self.IdFL = IdFL
        if IdRR is not None:
            self.IdRR = IdRR
        if IdRL is not None:
            self.IdRL = IdRL
        if MountingDirectionFL is not None:
            self.MountingDirectionFL = MountingDirectionFL
        if MountingDirectionFR is not None:
            self.MountingDirectionFR = MountingDirectionFR
        if MountingDirectionRL is not None:
            self.MountingDirectionRL = MountingDirectionRL
        if MountingDirectionRR is not None:
            self.MountingDirectionRR = MountingDirectionRR
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if TireSetColor is not None:
            self.TireSetColor = TireSetColor
        if HeatingTimeOfUse is not None:
            self.HeatingTimeOfUse = HeatingTimeOfUse
        if HeatingDuration is not None:
            self.HeatingDuration = HeatingDuration
        if HeatingTemperature is not None:
            self.HeatingTemperature = HeatingTemperature
        if HeatingOven is not None:
            self.HeatingOven = HeatingOven
        if HeatingEngineerComment is not None:
            self.HeatingEngineerComment = HeatingEngineerComment
        if HeatingTimeOnHeat is not None:
            self.HeatingTimeOnHeat = HeatingTimeOnHeat
        if HeatingTireComment is not None:
            self.HeatingTireComment = HeatingTireComment
        if HeatingActionAfterUse is not None:
            self.HeatingActionAfterUse = HeatingActionAfterUse
        if HeatingDone is not None:
            self.HeatingDone = HeatingDone
        if IdSpare1 is not None:
            self.IdSpare1 = IdSpare1
        if IdSpare2 is not None:
            self.IdSpare2 = IdSpare2

    @property
    def Id(self):
        """Gets the Id of this TireSet.  # noqa: E501

        Unique identifier of the tire set  # noqa: E501

        :return: The Id of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this TireSet.

        Unique identifier of the tire set  # noqa: E501

        :param Id: The Id of this TireSet.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def EventId(self):
        """Gets the EventId of this TireSet.  # noqa: E501

        Unique identifier corresponding to the event to which the tire set belongs  # noqa: E501

        :return: The EventId of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        """Sets the EventId of this TireSet.

        Unique identifier corresponding to the event to which the tire set belongs  # noqa: E501

        :param EventId: The EventId of this TireSet.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and EventId is None:
            raise ValueError("Invalid value for `EventId`, must not be `None`")  # noqa: E501

        self._EventId = EventId

    @property
    def Name(self):
        """Gets the Name of this TireSet.  # noqa: E501

        Tire set name  # noqa: E501

        :return: The Name of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this TireSet.

        Tire set name  # noqa: E501

        :param Name: The Name of this TireSet.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def Comment(self):
        """Gets the Comment of this TireSet.  # noqa: E501

        Tire set comments  # noqa: E501

        :return: The Comment of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._Comment

    @Comment.setter
    def Comment(self, Comment):
        """Sets the Comment of this TireSet.

        Tire set comments  # noqa: E501

        :param Comment: The Comment of this TireSet.  # noqa: E501
        :type: str
        """

        self._Comment = Comment

    @property
    def IdFR(self):
        """Gets the IdFR of this TireSet.  # noqa: E501

        Unique identifier corresponding to the front right tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The IdFR of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._IdFR

    @IdFR.setter
    def IdFR(self, IdFR):
        """Sets the IdFR of this TireSet.

        Unique identifier corresponding to the front right tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param IdFR: The IdFR of this TireSet.  # noqa: E501
        :type: str
        """

        self._IdFR = IdFR

    @property
    def IdFL(self):
        """Gets the IdFL of this TireSet.  # noqa: E501

        Unique identifier corresponding to the front left tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The IdFL of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._IdFL

    @IdFL.setter
    def IdFL(self, IdFL):
        """Sets the IdFL of this TireSet.

        Unique identifier corresponding to the front left tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param IdFL: The IdFL of this TireSet.  # noqa: E501
        :type: str
        """

        self._IdFL = IdFL

    @property
    def IdRR(self):
        """Gets the IdRR of this TireSet.  # noqa: E501

        Unique identifier corresponding to the rear right tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The IdRR of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._IdRR

    @IdRR.setter
    def IdRR(self, IdRR):
        """Sets the IdRR of this TireSet.

        Unique identifier corresponding to the rear right tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param IdRR: The IdRR of this TireSet.  # noqa: E501
        :type: str
        """

        self._IdRR = IdRR

    @property
    def IdRL(self):
        """Gets the IdRL of this TireSet.  # noqa: E501

        Unique identifier corresponding to the rear left tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The IdRL of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._IdRL

    @IdRL.setter
    def IdRL(self, IdRL):
        """Sets the IdRL of this TireSet.

        Unique identifier corresponding to the rear left tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param IdRL: The IdRL of this TireSet.  # noqa: E501
        :type: str
        """

        self._IdRL = IdRL

    @property
    def MountingDirectionFL(self):
        """Gets the MountingDirectionFL of this TireSet.  # noqa: E501

        Mounting direction of the front left tire in the rim  # noqa: E501

        :return: The MountingDirectionFL of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._MountingDirectionFL

    @MountingDirectionFL.setter
    def MountingDirectionFL(self, MountingDirectionFL):
        """Sets the MountingDirectionFL of this TireSet.

        Mounting direction of the front left tire in the rim  # noqa: E501

        :param MountingDirectionFL: The MountingDirectionFL of this TireSet.  # noqa: E501
        :type: str
        """
        allowed_values = ["Forward", "Reverse"]  # noqa: E501
        if (self._configuration.client_side_validation and
                MountingDirectionFL not in allowed_values):
            raise ValueError(
                "Invalid value for `MountingDirectionFL` ({0}), must be one of {1}"  # noqa: E501
                .format(MountingDirectionFL, allowed_values)
            )

        self._MountingDirectionFL = MountingDirectionFL

    @property
    def MountingDirectionFR(self):
        """Gets the MountingDirectionFR of this TireSet.  # noqa: E501

        Mounting direction of the front right tire in the rim  # noqa: E501

        :return: The MountingDirectionFR of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._MountingDirectionFR

    @MountingDirectionFR.setter
    def MountingDirectionFR(self, MountingDirectionFR):
        """Sets the MountingDirectionFR of this TireSet.

        Mounting direction of the front right tire in the rim  # noqa: E501

        :param MountingDirectionFR: The MountingDirectionFR of this TireSet.  # noqa: E501
        :type: str
        """
        allowed_values = ["Forward", "Reverse"]  # noqa: E501
        if (self._configuration.client_side_validation and
                MountingDirectionFR not in allowed_values):
            raise ValueError(
                "Invalid value for `MountingDirectionFR` ({0}), must be one of {1}"  # noqa: E501
                .format(MountingDirectionFR, allowed_values)
            )

        self._MountingDirectionFR = MountingDirectionFR

    @property
    def MountingDirectionRL(self):
        """Gets the MountingDirectionRL of this TireSet.  # noqa: E501

        Mounting direction of the rear left tire in the rim  # noqa: E501

        :return: The MountingDirectionRL of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._MountingDirectionRL

    @MountingDirectionRL.setter
    def MountingDirectionRL(self, MountingDirectionRL):
        """Sets the MountingDirectionRL of this TireSet.

        Mounting direction of the rear left tire in the rim  # noqa: E501

        :param MountingDirectionRL: The MountingDirectionRL of this TireSet.  # noqa: E501
        :type: str
        """
        allowed_values = ["Forward", "Reverse"]  # noqa: E501
        if (self._configuration.client_side_validation and
                MountingDirectionRL not in allowed_values):
            raise ValueError(
                "Invalid value for `MountingDirectionRL` ({0}), must be one of {1}"  # noqa: E501
                .format(MountingDirectionRL, allowed_values)
            )

        self._MountingDirectionRL = MountingDirectionRL

    @property
    def MountingDirectionRR(self):
        """Gets the MountingDirectionRR of this TireSet.  # noqa: E501

        Mounting direction of the rear right tire in the rim  # noqa: E501

        :return: The MountingDirectionRR of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._MountingDirectionRR

    @MountingDirectionRR.setter
    def MountingDirectionRR(self, MountingDirectionRR):
        """Sets the MountingDirectionRR of this TireSet.

        Mounting direction of the rear right tire in the rim  # noqa: E501

        :param MountingDirectionRR: The MountingDirectionRR of this TireSet.  # noqa: E501
        :type: str
        """
        allowed_values = ["Forward", "Reverse"]  # noqa: E501
        if (self._configuration.client_side_validation and
                MountingDirectionRR not in allowed_values):
            raise ValueError(
                "Invalid value for `MountingDirectionRR` ({0}), must be one of {1}"  # noqa: E501
                .format(MountingDirectionRR, allowed_values)
            )

        self._MountingDirectionRR = MountingDirectionRR

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this TireSet.  # noqa: E501

        Last updated utc date time. This field is automatically filled by the system.  # noqa: E501

        :return: The LastUpdateDateUtc of this TireSet.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this TireSet.

        Last updated utc date time. This field is automatically filled by the system.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this TireSet.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this TireSet.  # noqa: E501

        Name of the last user who updated the data. This field is automatically filled by the system.  # noqa: E501

        :return: The LastUpdateUser of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this TireSet.

        Name of the last user who updated the data. This field is automatically filled by the system.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this TireSet.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def TireSetColor(self):
        """Gets the TireSetColor of this TireSet.  # noqa: E501

        The tireset color. You must enter a ARGB hex value : #FF12EE33  # noqa: E501

        :return: The TireSetColor of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._TireSetColor

    @TireSetColor.setter
    def TireSetColor(self, TireSetColor):
        """Sets the TireSetColor of this TireSet.

        The tireset color. You must enter a ARGB hex value : #FF12EE33  # noqa: E501

        :param TireSetColor: The TireSetColor of this TireSet.  # noqa: E501
        :type: str
        """

        self._TireSetColor = TireSetColor

    @property
    def HeatingTimeOfUse(self):
        """Gets the HeatingTimeOfUse of this TireSet.  # noqa: E501

        Time of the day when the tires are used. The date part will automatically replaced with the date of the day.  Here is an example : 2019-01-07T12:30:00.000Z  # noqa: E501

        :return: The HeatingTimeOfUse of this TireSet.  # noqa: E501
        :rtype: datetime
        """
        return self._HeatingTimeOfUse

    @HeatingTimeOfUse.setter
    def HeatingTimeOfUse(self, HeatingTimeOfUse):
        """Sets the HeatingTimeOfUse of this TireSet.

        Time of the day when the tires are used. The date part will automatically replaced with the date of the day.  Here is an example : 2019-01-07T12:30:00.000Z  # noqa: E501

        :param HeatingTimeOfUse: The HeatingTimeOfUse of this TireSet.  # noqa: E501
        :type: datetime
        """

        self._HeatingTimeOfUse = HeatingTimeOfUse

    @property
    def HeatingDuration(self):
        """Gets the HeatingDuration of this TireSet.  # noqa: E501

        Heating duration in seconds  # noqa: E501

        :return: The HeatingDuration of this TireSet.  # noqa: E501
        :rtype: float
        """
        return self._HeatingDuration

    @HeatingDuration.setter
    def HeatingDuration(self, HeatingDuration):
        """Sets the HeatingDuration of this TireSet.

        Heating duration in seconds  # noqa: E501

        :param HeatingDuration: The HeatingDuration of this TireSet.  # noqa: E501
        :type: float
        """

        self._HeatingDuration = HeatingDuration

    @property
    def HeatingTemperature(self):
        """Gets the HeatingTemperature of this TireSet.  # noqa: E501

        Heating temperature to use  # noqa: E501

        :return: The HeatingTemperature of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._HeatingTemperature

    @HeatingTemperature.setter
    def HeatingTemperature(self, HeatingTemperature):
        """Sets the HeatingTemperature of this TireSet.

        Heating temperature to use  # noqa: E501

        :param HeatingTemperature: The HeatingTemperature of this TireSet.  # noqa: E501
        :type: str
        """

        self._HeatingTemperature = HeatingTemperature

    @property
    def HeatingOven(self):
        """Gets the HeatingOven of this TireSet.  # noqa: E501


        :return: The HeatingOven of this TireSet.  # noqa: E501
        :rtype: StringWithFontStyle
        """
        return self._HeatingOven

    @HeatingOven.setter
    def HeatingOven(self, HeatingOven):
        """Sets the HeatingOven of this TireSet.


        :param HeatingOven: The HeatingOven of this TireSet.  # noqa: E501
        :type: StringWithFontStyle
        """

        self._HeatingOven = HeatingOven

    @property
    def HeatingEngineerComment(self):
        """Gets the HeatingEngineerComment of this TireSet.  # noqa: E501


        :return: The HeatingEngineerComment of this TireSet.  # noqa: E501
        :rtype: StringWithFontStyle
        """
        return self._HeatingEngineerComment

    @HeatingEngineerComment.setter
    def HeatingEngineerComment(self, HeatingEngineerComment):
        """Sets the HeatingEngineerComment of this TireSet.


        :param HeatingEngineerComment: The HeatingEngineerComment of this TireSet.  # noqa: E501
        :type: StringWithFontStyle
        """

        self._HeatingEngineerComment = HeatingEngineerComment

    @property
    def HeatingTimeOnHeat(self):
        """Gets the HeatingTimeOnHeat of this TireSet.  # noqa: E501

        Starting time of the tires heating. The date part will automatically replaced with the date of the day.  Here is an example : 2019-01-07T12:30:00.000Z  # noqa: E501

        :return: The HeatingTimeOnHeat of this TireSet.  # noqa: E501
        :rtype: datetime
        """
        return self._HeatingTimeOnHeat

    @HeatingTimeOnHeat.setter
    def HeatingTimeOnHeat(self, HeatingTimeOnHeat):
        """Sets the HeatingTimeOnHeat of this TireSet.

        Starting time of the tires heating. The date part will automatically replaced with the date of the day.  Here is an example : 2019-01-07T12:30:00.000Z  # noqa: E501

        :param HeatingTimeOnHeat: The HeatingTimeOnHeat of this TireSet.  # noqa: E501
        :type: datetime
        """

        self._HeatingTimeOnHeat = HeatingTimeOnHeat

    @property
    def HeatingTireComment(self):
        """Gets the HeatingTireComment of this TireSet.  # noqa: E501


        :return: The HeatingTireComment of this TireSet.  # noqa: E501
        :rtype: StringWithFontStyle
        """
        return self._HeatingTireComment

    @HeatingTireComment.setter
    def HeatingTireComment(self, HeatingTireComment):
        """Sets the HeatingTireComment of this TireSet.


        :param HeatingTireComment: The HeatingTireComment of this TireSet.  # noqa: E501
        :type: StringWithFontStyle
        """

        self._HeatingTireComment = HeatingTireComment

    @property
    def HeatingActionAfterUse(self):
        """Gets the HeatingActionAfterUse of this TireSet.  # noqa: E501

        Discribe the action to do after the use of the tire  # noqa: E501

        :return: The HeatingActionAfterUse of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._HeatingActionAfterUse

    @HeatingActionAfterUse.setter
    def HeatingActionAfterUse(self, HeatingActionAfterUse):
        """Sets the HeatingActionAfterUse of this TireSet.

        Discribe the action to do after the use of the tire  # noqa: E501

        :param HeatingActionAfterUse: The HeatingActionAfterUse of this TireSet.  # noqa: E501
        :type: str
        """

        self._HeatingActionAfterUse = HeatingActionAfterUse

    @property
    def HeatingDone(self):
        """Gets the HeatingDone of this TireSet.  # noqa: E501

        Specify whether the heating is completed or not  # noqa: E501

        :return: The HeatingDone of this TireSet.  # noqa: E501
        :rtype: bool
        """
        return self._HeatingDone

    @HeatingDone.setter
    def HeatingDone(self, HeatingDone):
        """Sets the HeatingDone of this TireSet.

        Specify whether the heating is completed or not  # noqa: E501

        :param HeatingDone: The HeatingDone of this TireSet.  # noqa: E501
        :type: bool
        """

        self._HeatingDone = HeatingDone

    @property
    def IdSpare1(self):
        """Gets the IdSpare1 of this TireSet.  # noqa: E501

        Unique identifier corresponding to the spare tire 1. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The IdSpare1 of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._IdSpare1

    @IdSpare1.setter
    def IdSpare1(self, IdSpare1):
        """Sets the IdSpare1 of this TireSet.

        Unique identifier corresponding to the spare tire 1. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param IdSpare1: The IdSpare1 of this TireSet.  # noqa: E501
        :type: str
        """

        self._IdSpare1 = IdSpare1

    @property
    def IdSpare2(self):
        """Gets the IdSpare2 of this TireSet.  # noqa: E501

        Unique identifier corresponding to the spare tire 2. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The IdSpare2 of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._IdSpare2

    @IdSpare2.setter
    def IdSpare2(self, IdSpare2):
        """Sets the IdSpare2 of this TireSet.

        Unique identifier corresponding to the spare tire 2. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param IdSpare2: The IdSpare2 of this TireSet.  # noqa: E501
        :type: str
        """

        self._IdSpare2 = IdSpare2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TireSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TireSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TireSet):
            return True

        return self.to_dict() != other.to_dict()

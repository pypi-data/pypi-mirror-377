# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class ValueField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'ModelFieldId': 'str',
        'Value': 'object',
        'IsValid': 'bool',
        'ParentItemId': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str'
    }

    attribute_map = {
        'Id': 'Id',
        'ModelFieldId': 'ModelFieldId',
        'Value': 'Value',
        'IsValid': 'IsValid',
        'ParentItemId': 'ParentItemId',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser'
    }

    def __init__(self, Id=None, ModelFieldId=None, Value=None, IsValid=True, ParentItemId=None, LastUpdateDateUtc=None, LastUpdateUser=None, _configuration=None):  # noqa: E501
        """ValueField - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._ModelFieldId = None
        self._Value = None
        self._IsValid = None
        self._ParentItemId = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self.discriminator = None

        self.Id = Id
        self.ModelFieldId = ModelFieldId
        if Value is not None:
            self.Value = Value
        if IsValid is not None:
            self.IsValid = IsValid
        self.ParentItemId = ParentItemId
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser

    @property
    def Id(self):
        """Gets the Id of this ValueField.  # noqa: E501

        The unique value field Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Value Field.  # noqa: E501

        :return: The Id of this ValueField.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this ValueField.

        The unique value field Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Value Field.  # noqa: E501

        :param Id: The Id of this ValueField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def ModelFieldId(self):
        """Gets the ModelFieldId of this ValueField.  # noqa: E501

        The model field id to which the value is linked  # noqa: E501

        :return: The ModelFieldId of this ValueField.  # noqa: E501
        :rtype: str
        """
        return self._ModelFieldId

    @ModelFieldId.setter
    def ModelFieldId(self, ModelFieldId):
        """Sets the ModelFieldId of this ValueField.

        The model field id to which the value is linked  # noqa: E501

        :param ModelFieldId: The ModelFieldId of this ValueField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ModelFieldId is None:
            raise ValueError("Invalid value for `ModelFieldId`, must not be `None`")  # noqa: E501

        self._ModelFieldId = ModelFieldId

    @property
    def Value(self):
        """Gets the Value of this ValueField.  # noqa: E501

        The value object.  # noqa: E501

        :return: The Value of this ValueField.  # noqa: E501
        :rtype: object
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        """Sets the Value of this ValueField.

        The value object.  # noqa: E501

        :param Value: The Value of this ValueField.  # noqa: E501
        :type: object
        """

        self._Value = Value

    @property
    def IsValid(self):
        """Gets the IsValid of this ValueField.  # noqa: E501

        Set to True when the value is valid.  # noqa: E501

        :return: The IsValid of this ValueField.  # noqa: E501
        :rtype: bool
        """
        return self._IsValid

    @IsValid.setter
    def IsValid(self, IsValid):
        """Sets the IsValid of this ValueField.

        Set to True when the value is valid.  # noqa: E501

        :param IsValid: The IsValid of this ValueField.  # noqa: E501
        :type: bool
        """

        self._IsValid = IsValid

    @property
    def ParentItemId(self):
        """Gets the ParentItemId of this ValueField.  # noqa: E501

        The id of the parent entity (event, car, session, run, lap) which owns the value.  # noqa: E501

        :return: The ParentItemId of this ValueField.  # noqa: E501
        :rtype: str
        """
        return self._ParentItemId

    @ParentItemId.setter
    def ParentItemId(self, ParentItemId):
        """Sets the ParentItemId of this ValueField.

        The id of the parent entity (event, car, session, run, lap) which owns the value.  # noqa: E501

        :param ParentItemId: The ParentItemId of this ValueField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ParentItemId is None:
            raise ValueError("Invalid value for `ParentItemId`, must not be `None`")  # noqa: E501

        self._ParentItemId = ParentItemId

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this ValueField.  # noqa: E501

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this ValueField.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this ValueField.

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this ValueField.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this ValueField.  # noqa: E501

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateUser of this ValueField.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this ValueField.

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this ValueField.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValueField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValueField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValueField):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Version(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'Description': 'str',
        'CreatedDate': 'datetime',
        'ReferenceFiles': 'str',
        'TargetId': 'str',
        'AutoGenerateAssemblyId': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'ReplicationFilter': 'str',
        'A2lFiles': 'str'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'Description': 'Description',
        'CreatedDate': 'CreatedDate',
        'ReferenceFiles': 'ReferenceFiles',
        'TargetId': 'TargetId',
        'AutoGenerateAssemblyId': 'AutoGenerateAssemblyId',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'ReplicationFilter': 'ReplicationFilter',
        'A2lFiles': 'A2lFiles'
    }

    def __init__(self, Id=None, Name=None, Description=None, CreatedDate=None, ReferenceFiles=None, TargetId=None, AutoGenerateAssemblyId=None, LastUpdateDateUtc=None, LastUpdateUser=None, ReplicationFilter=None, A2lFiles=None, _configuration=None):  # noqa: E501
        """Version - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._Description = None
        self._CreatedDate = None
        self._ReferenceFiles = None
        self._TargetId = None
        self._AutoGenerateAssemblyId = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._ReplicationFilter = None
        self._A2lFiles = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        if Description is not None:
            self.Description = Description
        self.CreatedDate = CreatedDate
        self.ReferenceFiles = ReferenceFiles
        self.TargetId = TargetId
        if AutoGenerateAssemblyId is not None:
            self.AutoGenerateAssemblyId = AutoGenerateAssemblyId
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if ReplicationFilter is not None:
            self.ReplicationFilter = ReplicationFilter
        if A2lFiles is not None:
            self.A2lFiles = A2lFiles

    @property
    def Id(self):
        """Gets the Id of this Version.  # noqa: E501

        The unique version Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Version.  # noqa: E501

        :return: The Id of this Version.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Version.

        The unique version Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Version.  # noqa: E501

        :param Id: The Id of this Version.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this Version.  # noqa: E501

        The version name  # noqa: E501

        :return: The Name of this Version.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Version.

        The version name  # noqa: E501

        :param Name: The Name of this Version.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def Description(self):
        """Gets the Description of this Version.  # noqa: E501

        The version description  # noqa: E501

        :return: The Description of this Version.  # noqa: E501
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        """Sets the Description of this Version.

        The version description  # noqa: E501

        :param Description: The Description of this Version.  # noqa: E501
        :type: str
        """

        self._Description = Description

    @property
    def CreatedDate(self):
        """Gets the CreatedDate of this Version.  # noqa: E501

        The version creation date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :return: The CreatedDate of this Version.  # noqa: E501
        :rtype: datetime
        """
        return self._CreatedDate

    @CreatedDate.setter
    def CreatedDate(self, CreatedDate):
        """Sets the CreatedDate of this Version.

        The version creation date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :param CreatedDate: The CreatedDate of this Version.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and CreatedDate is None:
            raise ValueError("Invalid value for `CreatedDate`, must not be `None`")  # noqa: E501

        self._CreatedDate = CreatedDate

    @property
    def ReferenceFiles(self):
        """Gets the ReferenceFiles of this Version.  # noqa: E501

        The path to the file used to create the version.  The path must be described only by / or \\\\\\\\. For example : C:/path/MyFile.m  To specify multiple files, separate each path with: \\r\\n  # noqa: E501

        :return: The ReferenceFiles of this Version.  # noqa: E501
        :rtype: str
        """
        return self._ReferenceFiles

    @ReferenceFiles.setter
    def ReferenceFiles(self, ReferenceFiles):
        """Sets the ReferenceFiles of this Version.

        The path to the file used to create the version.  The path must be described only by / or \\\\\\\\. For example : C:/path/MyFile.m  To specify multiple files, separate each path with: \\r\\n  # noqa: E501

        :param ReferenceFiles: The ReferenceFiles of this Version.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ReferenceFiles is None:
            raise ValueError("Invalid value for `ReferenceFiles`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ReferenceFiles is not None and len(ReferenceFiles) < 1):
            raise ValueError("Invalid value for `ReferenceFiles`, length must be greater than or equal to `1`")  # noqa: E501

        self._ReferenceFiles = ReferenceFiles

    @property
    def TargetId(self):
        """Gets the TargetId of this Version.  # noqa: E501

        The target unique id to which the version belongs to.  # noqa: E501

        :return: The TargetId of this Version.  # noqa: E501
        :rtype: str
        """
        return self._TargetId

    @TargetId.setter
    def TargetId(self, TargetId):
        """Sets the TargetId of this Version.

        The target unique id to which the version belongs to.  # noqa: E501

        :param TargetId: The TargetId of this Version.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and TargetId is None:
            raise ValueError("Invalid value for `TargetId`, must not be `None`")  # noqa: E501

        self._TargetId = TargetId

    @property
    def AutoGenerateAssemblyId(self):
        """Gets the AutoGenerateAssemblyId of this Version.  # noqa: E501

        The assembly unique Id used as reference when AutoGenerateAssembly is activated on the parent target.  Otherwise, set the property to Guid.Empty (00000000-0000-0000-0000-000000000000).  # noqa: E501

        :return: The AutoGenerateAssemblyId of this Version.  # noqa: E501
        :rtype: str
        """
        return self._AutoGenerateAssemblyId

    @AutoGenerateAssemblyId.setter
    def AutoGenerateAssemblyId(self, AutoGenerateAssemblyId):
        """Sets the AutoGenerateAssemblyId of this Version.

        The assembly unique Id used as reference when AutoGenerateAssembly is activated on the parent target.  Otherwise, set the property to Guid.Empty (00000000-0000-0000-0000-000000000000).  # noqa: E501

        :param AutoGenerateAssemblyId: The AutoGenerateAssemblyId of this Version.  # noqa: E501
        :type: str
        """

        self._AutoGenerateAssemblyId = AutoGenerateAssemblyId

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Version.  # noqa: E501

        The last utc date time when the properties of the version have been updated  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this Version.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Version.

        The last utc date time when the properties of the version have been updated  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Version.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Version.  # noqa: E501

        The name of the last user having updated the assembly.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateUser of this Version.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Version.

        The name of the last user having updated the assembly.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Version.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def ReplicationFilter(self):
        """Gets the ReplicationFilter of this Version.  # noqa: E501

        The level of the filter used for the replication  # noqa: E501

        :return: The ReplicationFilter of this Version.  # noqa: E501
        :rtype: str
        """
        return self._ReplicationFilter

    @ReplicationFilter.setter
    def ReplicationFilter(self, ReplicationFilter):
        """Sets the ReplicationFilter of this Version.

        The level of the filter used for the replication  # noqa: E501

        :param ReplicationFilter: The ReplicationFilter of this Version.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotForReplication", "ForReplication"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ReplicationFilter not in allowed_values):
            raise ValueError(
                "Invalid value for `ReplicationFilter` ({0}), must be one of {1}"  # noqa: E501
                .format(ReplicationFilter, allowed_values)
            )

        self._ReplicationFilter = ReplicationFilter

    @property
    def A2lFiles(self):
        """Gets the A2lFiles of this Version.  # noqa: E501

        The path to the A2L files used to create the version.  The path must be described only by / or \\\\\\\\. For example : C:/path/MyFile.m  To specify multiple files, separate each path with: \\r\\n  # noqa: E501

        :return: The A2lFiles of this Version.  # noqa: E501
        :rtype: str
        """
        return self._A2lFiles

    @A2lFiles.setter
    def A2lFiles(self, A2lFiles):
        """Sets the A2lFiles of this Version.

        The path to the A2L files used to create the version.  The path must be described only by / or \\\\\\\\. For example : C:/path/MyFile.m  To specify multiple files, separate each path with: \\r\\n  # noqa: E501

        :param A2lFiles: The A2lFiles of this Version.  # noqa: E501
        :type: str
        """

        self._A2lFiles = A2lFiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Version, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Version):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Version):
            return True

        return self.to_dict() != other.to_dict()

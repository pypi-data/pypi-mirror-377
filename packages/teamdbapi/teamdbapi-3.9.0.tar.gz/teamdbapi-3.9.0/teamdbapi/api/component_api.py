# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teamdbapi.api_client import ApiClient


class ComponentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_components_to_component_group_revision_content(self, component_id, revision_id, **kwargs):  # noqa: E501
        """[Command] Add a list of component to the content of a component group revision from it's unique identifiers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_components_to_component_group_revision_content(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component group. (required)
        :param str revision_id: The unique identifier of the component group revision. (required)
        :param list[str] components_id_to_add: The revisionId list of components to be added to the content of the component revision group
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_components_to_component_group_revision_content_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_components_to_component_group_revision_content_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
            return data

    def add_components_to_component_group_revision_content_with_http_info(self, component_id, revision_id, **kwargs):  # noqa: E501
        """[Command] Add a list of component to the content of a component group revision from it's unique identifiers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_components_to_component_group_revision_content_with_http_info(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component group. (required)
        :param str revision_id: The unique identifier of the component group revision. (required)
        :param list[str] components_id_to_add: The revisionId list of components to be added to the content of the component revision group
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'revision_id', 'components_id_to_add']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_components_to_component_group_revision_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if self.api_client.client_side_validation and ('component_id' not in params or
                                                       params['component_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `component_id` when calling `add_components_to_component_group_revision_content`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `add_components_to_component_group_revision_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'components_id_to_add' in params:
            body_params = params['components_id_to_add']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/component/{componentId}/revision/{revisionId}/addcontent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_component_revision(self, part_id, **kwargs):  # noqa: E501
        """Create a new component revision for a part identified by its unique identifier.  Set ComponentId to 00000000-0000-0000-0000-000000000000 to create a new component.  Fullfil ComponentId with an existing value to create a new component revision.  RevisionId must be equal to 00000000-0000-0000-0000-000000000000.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_component_revision(part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The unique identifier of the part. (required)
        :param Component component_from_body: The component revision data to create.
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_component_revision_with_http_info(part_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_component_revision_with_http_info(part_id, **kwargs)  # noqa: E501
            return data

    def create_component_revision_with_http_info(self, part_id, **kwargs):  # noqa: E501
        """Create a new component revision for a part identified by its unique identifier.  Set ComponentId to 00000000-0000-0000-0000-000000000000 to create a new component.  Fullfil ComponentId with an existing value to create a new component revision.  RevisionId must be equal to 00000000-0000-0000-0000-000000000000.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_component_revision_with_http_info(part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The unique identifier of the part. (required)
        :param Component component_from_body: The component revision data to create.
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_id', 'component_from_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_component_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_id' is set
        if self.api_client.client_side_validation and ('part_id' not in params or
                                                       params['part_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_id` when calling `create_component_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_id' in params:
            path_params['partId'] = params['part_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component_from_body' in params:
            body_params = params['component_from_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/part/{partId}/component', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_revision(self, component_id, revision_id, **kwargs):  # noqa: E501
        """Get a component revision from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revision(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component. (required)
        :param str revision_id: The unique identifier of the component revision. (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_revision_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_revision_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
            return data

    def get_component_revision_with_http_info(self, component_id, revision_id, **kwargs):  # noqa: E501
        """Get a component revision from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revision_with_http_info(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component. (required)
        :param str revision_id: The unique identifier of the component revision. (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if self.api_client.client_side_validation and ('component_id' not in params or
                                                       params['component_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `component_id` when calling `get_component_revision`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `get_component_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/component/{componentId}/revision/{revisionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_revision_content(self, component_id, revision_id, **kwargs):  # noqa: E501
        """Get the content of a component group revision from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revision_content(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component group. (required)
        :param str revision_id: The unique identifier of the component group revision. (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_revision_content_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_revision_content_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
            return data

    def get_component_revision_content_with_http_info(self, component_id, revision_id, **kwargs):  # noqa: E501
        """Get the content of a component group revision from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revision_content_with_http_info(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component group. (required)
        :param str revision_id: The unique identifier of the component group revision. (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_revision_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if self.api_client.client_side_validation and ('component_id' not in params or
                                                       params['component_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `component_id` when calling `get_component_revision_content`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `get_component_revision_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/component/{componentId}/revision/{revisionId}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_revision_criteria(self, component_id, revision_id, **kwargs):  # noqa: E501
        """Get the criteria of a component revision from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revision_criteria(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component. (required)
        :param str revision_id: The unique identifier of the component revision. (required)
        :return: list[CriteriaValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_revision_criteria_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_revision_criteria_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
            return data

    def get_component_revision_criteria_with_http_info(self, component_id, revision_id, **kwargs):  # noqa: E501
        """Get the criteria of a component revision from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revision_criteria_with_http_info(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component. (required)
        :param str revision_id: The unique identifier of the component revision. (required)
        :return: list[CriteriaValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_revision_criteria" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if self.api_client.client_side_validation and ('component_id' not in params or
                                                       params['component_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `component_id` when calling `get_component_revision_criteria`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `get_component_revision_criteria`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/component/{componentId}/revision/{revisionId}/criteria', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CriteriaValue]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_revision_criteria_details(self, component_id, revision_id, **kwargs):  # noqa: E501
        """Get the component's revision criteria values for each run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revision_criteria_details(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component. (required)
        :param str revision_id: The unique identifier of the component revision. (required)
        :return: list[CriteriaValueDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_revision_criteria_details_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_revision_criteria_details_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
            return data

    def get_component_revision_criteria_details_with_http_info(self, component_id, revision_id, **kwargs):  # noqa: E501
        """Get the component's revision criteria values for each run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revision_criteria_details_with_http_info(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component. (required)
        :param str revision_id: The unique identifier of the component revision. (required)
        :return: list[CriteriaValueDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_revision_criteria_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if self.api_client.client_side_validation and ('component_id' not in params or
                                                       params['component_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `component_id` when calling `get_component_revision_criteria_details`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `get_component_revision_criteria_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/component/{componentId}/revision/{revisionId}/criteriadetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CriteriaValueDetail]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_revisions(self, component_id, **kwargs):  # noqa: E501
        """Get all component's revisions from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revisions(component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component. (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_revisions_with_http_info(component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_revisions_with_http_info(component_id, **kwargs)  # noqa: E501
            return data

    def get_component_revisions_with_http_info(self, component_id, **kwargs):  # noqa: E501
        """Get all component's revisions from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_revisions_with_http_info(component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component. (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_revisions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if self.api_client.client_side_validation and ('component_id' not in params or
                                                       params['component_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `component_id` when calling `get_component_revisions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/component/{componentId}/revisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_components(self, part_id, **kwargs):  # noqa: E501
        """Get all component from it's part unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_components(part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The unique identifier of the part. (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_components_with_http_info(part_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_components_with_http_info(part_id, **kwargs)  # noqa: E501
            return data

    def get_components_with_http_info(self, part_id, **kwargs):  # noqa: E501
        """Get all component from it's part unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_components_with_http_info(part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The unique identifier of the part. (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_id' is set
        if self.api_client.client_side_validation and ('part_id' not in params or
                                                       params['part_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_id` when calling `get_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_id' in params:
            path_params['partId'] = params['part_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/part/{partId}/components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_components_from_component_group_revision_content(self, component_id, revision_id, **kwargs):  # noqa: E501
        """[Command] Remove a list of component from the content of a component group revision from it's unique identifiers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_components_from_component_group_revision_content(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component group. (required)
        :param str revision_id: The unique identifier of the component group revision. (required)
        :param list[str] components_id_to_remove: The revisionId list of components to be removed from the content of the component revision group
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_components_from_component_group_revision_content_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_components_from_component_group_revision_content_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
            return data

    def remove_components_from_component_group_revision_content_with_http_info(self, component_id, revision_id, **kwargs):  # noqa: E501
        """[Command] Remove a list of component from the content of a component group revision from it's unique identifiers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_components_from_component_group_revision_content_with_http_info(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component group. (required)
        :param str revision_id: The unique identifier of the component group revision. (required)
        :param list[str] components_id_to_remove: The revisionId list of components to be removed from the content of the component revision group
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'revision_id', 'components_id_to_remove']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_components_from_component_group_revision_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if self.api_client.client_side_validation and ('component_id' not in params or
                                                       params['component_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `component_id` when calling `remove_components_from_component_group_revision_content`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `remove_components_from_component_group_revision_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'components_id_to_remove' in params:
            body_params = params['components_id_to_remove']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/component/{componentId}/revision/{revisionId}/removecontent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_parameter_binding_to_component_group_revision_content(self, component_id, revision_id, sub_component_revision_id, parameter_binding, **kwargs):  # noqa: E501
        """[Command] Set the parameter binding to the content of a component group revision for a given sub component unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_binding_to_component_group_revision_content(component_id, revision_id, sub_component_revision_id, parameter_binding, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component group. (required)
        :param str revision_id: The unique identifier of the component group revision. (required)
        :param str sub_component_revision_id: The unique identifier of the sub component to edit the parameter binding (required)
        :param str parameter_binding: The parameter binding value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_parameter_binding_to_component_group_revision_content_with_http_info(component_id, revision_id, sub_component_revision_id, parameter_binding, **kwargs)  # noqa: E501
        else:
            (data) = self.set_parameter_binding_to_component_group_revision_content_with_http_info(component_id, revision_id, sub_component_revision_id, parameter_binding, **kwargs)  # noqa: E501
            return data

    def set_parameter_binding_to_component_group_revision_content_with_http_info(self, component_id, revision_id, sub_component_revision_id, parameter_binding, **kwargs):  # noqa: E501
        """[Command] Set the parameter binding to the content of a component group revision for a given sub component unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_binding_to_component_group_revision_content_with_http_info(component_id, revision_id, sub_component_revision_id, parameter_binding, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component group. (required)
        :param str revision_id: The unique identifier of the component group revision. (required)
        :param str sub_component_revision_id: The unique identifier of the sub component to edit the parameter binding (required)
        :param str parameter_binding: The parameter binding value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'revision_id', 'sub_component_revision_id', 'parameter_binding']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter_binding_to_component_group_revision_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if self.api_client.client_side_validation and ('component_id' not in params or
                                                       params['component_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `component_id` when calling `set_parameter_binding_to_component_group_revision_content`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `set_parameter_binding_to_component_group_revision_content`")  # noqa: E501
        # verify the required parameter 'sub_component_revision_id' is set
        if self.api_client.client_side_validation and ('sub_component_revision_id' not in params or
                                                       params['sub_component_revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sub_component_revision_id` when calling `set_parameter_binding_to_component_group_revision_content`")  # noqa: E501
        # verify the required parameter 'parameter_binding' is set
        if self.api_client.client_side_validation and ('parameter_binding' not in params or
                                                       params['parameter_binding'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_binding` when calling `set_parameter_binding_to_component_group_revision_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501
        if 'sub_component_revision_id' in params:
            path_params['subComponentRevisionId'] = params['sub_component_revision_id']  # noqa: E501
        if 'parameter_binding' in params:
            path_params['parameterBinding'] = params['parameter_binding']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/component/{componentId}/revision/{revisionId}/subComponent/{subComponentRevisionId}/parameterBinding/{parameterBinding}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trigger_lifing_export_components(self, **kwargs):  # noqa: E501
        """[Command] Trigger the lifing export components. The export concerns the components lifed linked to a mountinng and updated during the N last days  (depending on the server configuration option: Export lifing component period)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_lifing_export_components(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trigger_lifing_export_components_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.trigger_lifing_export_components_with_http_info(**kwargs)  # noqa: E501
            return data

    def trigger_lifing_export_components_with_http_info(self, **kwargs):  # noqa: E501
        """[Command] Trigger the lifing export components. The export concerns the components lifed linked to a mountinng and updated during the N last days  (depending on the server configuration option: Export lifing component period)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_lifing_export_components_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_lifing_export_components" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/component/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_component_revision(self, component_id, revision_id, **kwargs):  # noqa: E501
        """Update a component revision from it's unique identifiers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_component_revision(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component. (required)
        :param str revision_id: The unique identifier of the component revision. (required)
        :param bool apply_status_changes_to_all_sub_components: Indicates whether to cascade update the component status in subcomponents.
        :param Component component_from_body: The component revision data to update.
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_component_revision_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_component_revision_with_http_info(component_id, revision_id, **kwargs)  # noqa: E501
            return data

    def update_component_revision_with_http_info(self, component_id, revision_id, **kwargs):  # noqa: E501
        """Update a component revision from it's unique identifiers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_component_revision_with_http_info(component_id, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: The unique identifier of the component. (required)
        :param str revision_id: The unique identifier of the component revision. (required)
        :param bool apply_status_changes_to_all_sub_components: Indicates whether to cascade update the component status in subcomponents.
        :param Component component_from_body: The component revision data to update.
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'revision_id', 'apply_status_changes_to_all_sub_components', 'component_from_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_component_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if self.api_client.client_side_validation and ('component_id' not in params or
                                                       params['component_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `component_id` when calling `update_component_revision`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and ('revision_id' not in params or
                                                       params['revision_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `revision_id` when calling `update_component_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501
        if 'revision_id' in params:
            path_params['revisionId'] = params['revision_id']  # noqa: E501

        query_params = []
        if 'apply_status_changes_to_all_sub_components' in params:
            query_params.append(('applyStatusChangesToAllSubComponents', params['apply_status_changes_to_all_sub_components']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component_from_body' in params:
            body_params = params['component_from_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/component/{componentId}/revision/{revisionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

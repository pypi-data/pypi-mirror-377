# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teamdbapi.api_client import ApiClient


class PartApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_car_parameter_to_part(self, part_car_parameter, **kwargs):  # noqa: E501
        """Add a car parameter to a part. This will create an association between  a lifing part and car parameter.  You can specify a car parameter redirection for a part group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_car_parameter_to_part(part_car_parameter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddPartCarParameterArg part_car_parameter: The association beetween a part and a car parameter. (required)
        :return: PartCarParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_car_parameter_to_part_with_http_info(part_car_parameter, **kwargs)  # noqa: E501
        else:
            (data) = self.add_car_parameter_to_part_with_http_info(part_car_parameter, **kwargs)  # noqa: E501
            return data

    def add_car_parameter_to_part_with_http_info(self, part_car_parameter, **kwargs):  # noqa: E501
        """Add a car parameter to a part. This will create an association between  a lifing part and car parameter.  You can specify a car parameter redirection for a part group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_car_parameter_to_part_with_http_info(part_car_parameter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddPartCarParameterArg part_car_parameter: The association beetween a part and a car parameter. (required)
        :return: PartCarParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_car_parameter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_car_parameter_to_part" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_car_parameter' is set
        if self.api_client.client_side_validation and ('part_car_parameter' not in params or
                                                       params['part_car_parameter'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_car_parameter` when calling `add_car_parameter_to_part`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'part_car_parameter' in params:
            body_params = params['part_car_parameter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/part/carparameter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartCarParameters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_part_car_parameter(self, part_id, parameter_id, **kwargs):  # noqa: E501
        """Delete an existing assocation between a part and a car parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_part_car_parameter(part_id, parameter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The part unique identifier of the association to delete (required)
        :param str parameter_id: The car parameter unique identifier of the association to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_part_car_parameter_with_http_info(part_id, parameter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_part_car_parameter_with_http_info(part_id, parameter_id, **kwargs)  # noqa: E501
            return data

    def delete_part_car_parameter_with_http_info(self, part_id, parameter_id, **kwargs):  # noqa: E501
        """Delete an existing assocation between a part and a car parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_part_car_parameter_with_http_info(part_id, parameter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The part unique identifier of the association to delete (required)
        :param str parameter_id: The car parameter unique identifier of the association to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_id', 'parameter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_part_car_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_id' is set
        if self.api_client.client_side_validation and ('part_id' not in params or
                                                       params['part_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_id` when calling `delete_part_car_parameter`")  # noqa: E501
        # verify the required parameter 'parameter_id' is set
        if self.api_client.client_side_validation and ('parameter_id' not in params or
                                                       params['parameter_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameter_id` when calling `delete_part_car_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_id' in params:
            path_params['partId'] = params['part_id']  # noqa: E501
        if 'parameter_id' in params:
            path_params['parameterId'] = params['parameter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/part/{partId}/carParameter/{parameterId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_part(self, part_id, **kwargs):  # noqa: E501
        """Get a part from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_part(part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The unique identifier of the part to retrieve. (required)
        :return: Part
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_part_with_http_info(part_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_part_with_http_info(part_id, **kwargs)  # noqa: E501
            return data

    def get_part_with_http_info(self, part_id, **kwargs):  # noqa: E501
        """Get a part from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_part_with_http_info(part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The unique identifier of the part to retrieve. (required)
        :return: Part
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_part" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_id' is set
        if self.api_client.client_side_validation and ('part_id' not in params or
                                                       params['part_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_id` when calling `get_part`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_id' in params:
            path_params['partId'] = params['part_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/part/{partId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Part',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_part_by_part_number(self, part_number, **kwargs):  # noqa: E501
        """Get a part from it's part number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_part_by_part_number(part_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_number: The part number of the part to retrieve. (required)
        :return: Part
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_part_by_part_number_with_http_info(part_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_part_by_part_number_with_http_info(part_number, **kwargs)  # noqa: E501
            return data

    def get_part_by_part_number_with_http_info(self, part_number, **kwargs):  # noqa: E501
        """Get a part from it's part number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_part_by_part_number_with_http_info(part_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_number: The part number of the part to retrieve. (required)
        :return: Part
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_part_by_part_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_number' is set
        if self.api_client.client_side_validation and ('part_number' not in params or
                                                       params['part_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_number` when calling `get_part_by_part_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_number' in params:
            path_params['partNumber'] = params['part_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/partnumber/{partNumber}/part', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Part',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_part_car_parameters(self, part_id, **kwargs):  # noqa: E501
        """Get the car parameters associated with the part  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_part_car_parameters(part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The unique identifier of the part. (required)
        :return: list[PartCarParameters]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_part_car_parameters_with_http_info(part_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_part_car_parameters_with_http_info(part_id, **kwargs)  # noqa: E501
            return data

    def get_part_car_parameters_with_http_info(self, part_id, **kwargs):  # noqa: E501
        """Get the car parameters associated with the part  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_part_car_parameters_with_http_info(part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The unique identifier of the part. (required)
        :return: list[PartCarParameters]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_part_car_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_id' is set
        if self.api_client.client_side_validation and ('part_id' not in params or
                                                       params['part_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_id` when calling `get_part_car_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_id' in params:
            path_params['partId'] = params['part_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/part/{partId}/carparameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PartCarParameters]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_part_content(self, part_id, **kwargs):  # noqa: E501
        """Get the content of a part group  from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_part_content(part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The unique identifier of the part to retrieve. (required)
        :return: list[PartCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_part_content_with_http_info(part_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_part_content_with_http_info(part_id, **kwargs)  # noqa: E501
            return data

    def get_part_content_with_http_info(self, part_id, **kwargs):  # noqa: E501
        """Get the content of a part group  from it's unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_part_content_with_http_info(part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The unique identifier of the part to retrieve. (required)
        :return: list[PartCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_part_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_id' is set
        if self.api_client.client_side_validation and ('part_id' not in params or
                                                       params['part_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_id` when calling `get_part_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_id' in params:
            path_params['partId'] = params['part_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/part/{partId}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PartCount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parts(self, **kwargs):  # noqa: E501
        """Get all parts stored in TeamDB.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Part]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_parts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_parts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_parts_with_http_info(self, **kwargs):  # noqa: E501
        """Get all parts stored in TeamDB.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Part]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/parts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Part]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_criteria_set_to_part(self, part_id, criteria_set_id, **kwargs):  # noqa: E501
        """[Command] Associate a criteria set with a part  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_criteria_set_to_part(part_id, criteria_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The part unique identifier (required)
        :param str criteria_set_id: The criteria set unique identifier to associate with the part (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_criteria_set_to_part_with_http_info(part_id, criteria_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_criteria_set_to_part_with_http_info(part_id, criteria_set_id, **kwargs)  # noqa: E501
            return data

    def set_criteria_set_to_part_with_http_info(self, part_id, criteria_set_id, **kwargs):  # noqa: E501
        """[Command] Associate a criteria set with a part  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_criteria_set_to_part_with_http_info(part_id, criteria_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str part_id: The part unique identifier (required)
        :param str criteria_set_id: The criteria set unique identifier to associate with the part (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_id', 'criteria_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_criteria_set_to_part" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_id' is set
        if self.api_client.client_side_validation and ('part_id' not in params or
                                                       params['part_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_id` when calling `set_criteria_set_to_part`")  # noqa: E501
        # verify the required parameter 'criteria_set_id' is set
        if self.api_client.client_side_validation and ('criteria_set_id' not in params or
                                                       params['criteria_set_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `criteria_set_id` when calling `set_criteria_set_to_part`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'part_id' in params:
            path_params['partId'] = params['part_id']  # noqa: E501

        query_params = []
        if 'criteria_set_id' in params:
            query_params.append(('criteriaSetId', params['criteria_set_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/part/{partId}/associatewithcriteriaset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_part_car_parameter(self, part_car_parameter, **kwargs):  # noqa: E501
        """Update an existing assocation between a part and a car parameter.  You can specify a car parameter redirection for a part group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_part_car_parameter(part_car_parameter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddPartCarParameterArg part_car_parameter: The association beetween a part and a car parameter. (required)
        :return: PartCarParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_part_car_parameter_with_http_info(part_car_parameter, **kwargs)  # noqa: E501
        else:
            (data) = self.update_part_car_parameter_with_http_info(part_car_parameter, **kwargs)  # noqa: E501
            return data

    def update_part_car_parameter_with_http_info(self, part_car_parameter, **kwargs):  # noqa: E501
        """Update an existing assocation between a part and a car parameter.  You can specify a car parameter redirection for a part group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_part_car_parameter_with_http_info(part_car_parameter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddPartCarParameterArg part_car_parameter: The association beetween a part and a car parameter. (required)
        :return: PartCarParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['part_car_parameter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_part_car_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'part_car_parameter' is set
        if self.api_client.client_side_validation and ('part_car_parameter' not in params or
                                                       params['part_car_parameter'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `part_car_parameter` when calling `update_part_car_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'part_car_parameter' in params:
            body_params = params['part_car_parameter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/part/carParameter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartCarParameters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

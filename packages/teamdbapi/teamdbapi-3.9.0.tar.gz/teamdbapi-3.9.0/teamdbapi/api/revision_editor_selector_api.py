# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teamdbapi.api_client import ApiClient


class RevisionEditorSelectorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clear_revision_selector_filters(self, event_id, target_id, **kwargs):  # noqa: E501
        """[Command] Clear a tags list for an event and a target in order to filter the revision selector fields displayed on the drop down  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_revision_selector_filters(event_id, target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_id: The event unique id for which you want to clear the tags list (required)
        :param str target_id: The target unique id for which you want to clear the tags list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_revision_selector_filters_with_http_info(event_id, target_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_revision_selector_filters_with_http_info(event_id, target_id, **kwargs)  # noqa: E501
            return data

    def clear_revision_selector_filters_with_http_info(self, event_id, target_id, **kwargs):  # noqa: E501
        """[Command] Clear a tags list for an event and a target in order to filter the revision selector fields displayed on the drop down  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_revision_selector_filters_with_http_info(event_id, target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_id: The event unique id for which you want to clear the tags list (required)
        :param str target_id: The target unique id for which you want to clear the tags list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_revision_selector_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if self.api_client.client_side_validation and ('event_id' not in params or
                                                       params['event_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `event_id` when calling `clear_revision_selector_filters`")  # noqa: E501
        # verify the required parameter 'target_id' is set
        if self.api_client.client_side_validation and ('target_id' not in params or
                                                       params['target_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_id` when calling `clear_revision_selector_filters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']  # noqa: E501

        query_params = []
        if 'target_id' in params:
            query_params.append(('targetId', params['target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/event/{eventId}/clearrevisionselectorfilters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_revision_editor_value(self, model_field_id, parent_item_id, **kwargs):  # noqa: E501
        """Get the value of a RevisionEditor field depending on a model field id and a parent item Id (that corresponds to the run Id).  Important notice : RevisionEditor fields work only with Single value Parameters. 2D and 3D Parameters are not supported.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_editor_value(model_field_id, parent_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_field_id: The model field id for which you want to get the revision editor value (required)
        :param str parent_item_id: The parent item id (run id) for which you want to get the revision editor value (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_revision_editor_value_with_http_info(model_field_id, parent_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_revision_editor_value_with_http_info(model_field_id, parent_item_id, **kwargs)  # noqa: E501
            return data

    def get_revision_editor_value_with_http_info(self, model_field_id, parent_item_id, **kwargs):  # noqa: E501
        """Get the value of a RevisionEditor field depending on a model field id and a parent item Id (that corresponds to the run Id).  Important notice : RevisionEditor fields work only with Single value Parameters. 2D and 3D Parameters are not supported.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_editor_value_with_http_info(model_field_id, parent_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_field_id: The model field id for which you want to get the revision editor value (required)
        :param str parent_item_id: The parent item id (run id) for which you want to get the revision editor value (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_field_id', 'parent_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_revision_editor_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model_field_id' is set
        if self.api_client.client_side_validation and ('model_field_id' not in params or
                                                       params['model_field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model_field_id` when calling `get_revision_editor_value`")  # noqa: E501
        # verify the required parameter 'parent_item_id' is set
        if self.api_client.client_side_validation and ('parent_item_id' not in params or
                                                       params['parent_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parent_item_id` when calling `get_revision_editor_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_field_id' in params:
            path_params['modelFieldId'] = params['model_field_id']  # noqa: E501

        query_params = []
        if 'parent_item_id' in params:
            query_params.append(('parentItemId', params['parent_item_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/modelfield/{modelFieldId}/revisioneditorvalue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_revision_selector_filters(self, event_id, target_id, **kwargs):  # noqa: E501
        """Get the tags list defined for an event and a target in order to filter the revision selector fields displayed on the drop down  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_selector_filters(event_id, target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_id: The event unique id for which you want to get the tags list (required)
        :param str target_id: The target unique id for which you want to get the tags list (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_revision_selector_filters_with_http_info(event_id, target_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_revision_selector_filters_with_http_info(event_id, target_id, **kwargs)  # noqa: E501
            return data

    def get_revision_selector_filters_with_http_info(self, event_id, target_id, **kwargs):  # noqa: E501
        """Get the tags list defined for an event and a target in order to filter the revision selector fields displayed on the drop down  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_selector_filters_with_http_info(event_id, target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_id: The event unique id for which you want to get the tags list (required)
        :param str target_id: The target unique id for which you want to get the tags list (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'target_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_revision_selector_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if self.api_client.client_side_validation and ('event_id' not in params or
                                                       params['event_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `event_id` when calling `get_revision_selector_filters`")  # noqa: E501
        # verify the required parameter 'target_id' is set
        if self.api_client.client_side_validation and ('target_id' not in params or
                                                       params['target_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_id` when calling `get_revision_selector_filters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']  # noqa: E501

        query_params = []
        if 'target_id' in params:
            query_params.append(('targetId', params['target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/event/{eventId}/revisionselectorfilters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_revision_selector_list_of_values(self, model_field_id, parent_item_id, **kwargs):  # noqa: E501
        """Get the list of all the available values for a RevisionSelector field depending on a model field id and a parent item Id (that corresponds to the run Id).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_selector_list_of_values(model_field_id, parent_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_field_id: The model field id for which you want to get the revision selector value (required)
        :param str parent_item_id: The parent item id (run id) for which you want to get the revision selector value (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_revision_selector_list_of_values_with_http_info(model_field_id, parent_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_revision_selector_list_of_values_with_http_info(model_field_id, parent_item_id, **kwargs)  # noqa: E501
            return data

    def get_revision_selector_list_of_values_with_http_info(self, model_field_id, parent_item_id, **kwargs):  # noqa: E501
        """Get the list of all the available values for a RevisionSelector field depending on a model field id and a parent item Id (that corresponds to the run Id).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_selector_list_of_values_with_http_info(model_field_id, parent_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_field_id: The model field id for which you want to get the revision selector value (required)
        :param str parent_item_id: The parent item id (run id) for which you want to get the revision selector value (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_field_id', 'parent_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_revision_selector_list_of_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model_field_id' is set
        if self.api_client.client_side_validation and ('model_field_id' not in params or
                                                       params['model_field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model_field_id` when calling `get_revision_selector_list_of_values`")  # noqa: E501
        # verify the required parameter 'parent_item_id' is set
        if self.api_client.client_side_validation and ('parent_item_id' not in params or
                                                       params['parent_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parent_item_id` when calling `get_revision_selector_list_of_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_field_id' in params:
            path_params['modelFieldId'] = params['model_field_id']  # noqa: E501

        query_params = []
        if 'parent_item_id' in params:
            query_params.append(('parentItemId', params['parent_item_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/modelfield/{modelFieldId}/revisionselectorvalues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_revision_selector_value(self, model_field_id, parent_item_id, **kwargs):  # noqa: E501
        """Get the value of a RevisionSelector field depending on a model field id and a parent item Id (that corresponds to the run Id).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_selector_value(model_field_id, parent_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_field_id: The model field id for which you want to get the revision selector value (required)
        :param str parent_item_id: The parent item id (run id) for which you want to get the revision selector value (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_revision_selector_value_with_http_info(model_field_id, parent_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_revision_selector_value_with_http_info(model_field_id, parent_item_id, **kwargs)  # noqa: E501
            return data

    def get_revision_selector_value_with_http_info(self, model_field_id, parent_item_id, **kwargs):  # noqa: E501
        """Get the value of a RevisionSelector field depending on a model field id and a parent item Id (that corresponds to the run Id).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revision_selector_value_with_http_info(model_field_id, parent_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_field_id: The model field id for which you want to get the revision selector value (required)
        :param str parent_item_id: The parent item id (run id) for which you want to get the revision selector value (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_field_id', 'parent_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_revision_selector_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model_field_id' is set
        if self.api_client.client_side_validation and ('model_field_id' not in params or
                                                       params['model_field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model_field_id` when calling `get_revision_selector_value`")  # noqa: E501
        # verify the required parameter 'parent_item_id' is set
        if self.api_client.client_side_validation and ('parent_item_id' not in params or
                                                       params['parent_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parent_item_id` when calling `get_revision_selector_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_field_id' in params:
            path_params['modelFieldId'] = params['model_field_id']  # noqa: E501

        query_params = []
        if 'parent_item_id' in params:
            query_params.append(('parentItemId', params['parent_item_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/modelfield/{modelFieldId}/revisionselectorvalue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_revision_selector_filters(self, event_id, target_id, tags, **kwargs):  # noqa: E501
        """[Command] Remove a tags list for an event and a target in order to filter the revision selector fields displayed on the drop down  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_revision_selector_filters(event_id, target_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_id: The event unique id for which you want to remove the tags list (required)
        :param str target_id: The target unique id for which you want to remove the tags list (required)
        :param list[str] tags: The tags used to filter the revision selector fields you want to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_revision_selector_filters_with_http_info(event_id, target_id, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_revision_selector_filters_with_http_info(event_id, target_id, tags, **kwargs)  # noqa: E501
            return data

    def remove_revision_selector_filters_with_http_info(self, event_id, target_id, tags, **kwargs):  # noqa: E501
        """[Command] Remove a tags list for an event and a target in order to filter the revision selector fields displayed on the drop down  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_revision_selector_filters_with_http_info(event_id, target_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_id: The event unique id for which you want to remove the tags list (required)
        :param str target_id: The target unique id for which you want to remove the tags list (required)
        :param list[str] tags: The tags used to filter the revision selector fields you want to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'target_id', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_revision_selector_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if self.api_client.client_side_validation and ('event_id' not in params or
                                                       params['event_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `event_id` when calling `remove_revision_selector_filters`")  # noqa: E501
        # verify the required parameter 'target_id' is set
        if self.api_client.client_side_validation and ('target_id' not in params or
                                                       params['target_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_id` when calling `remove_revision_selector_filters`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if self.api_client.client_side_validation and ('tags' not in params or
                                                       params['tags'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tags` when calling `remove_revision_selector_filters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']  # noqa: E501

        query_params = []
        if 'target_id' in params:
            query_params.append(('targetId', params['target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/event/{eventId}/removerevisionselectorfilters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_revision_editor_value(self, model_field_id, parent_item_id, value, **kwargs):  # noqa: E501
        """[Command] Set the value of a RevisionEditor field depending on a model field id and a parent item Id (that corresponds to the run Id).  Important notice : RevisionEditor fields work only with Single value Parameters. 2D and 3D Parameters are not supported.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_revision_editor_value(model_field_id, parent_item_id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_field_id: The model field id for which you want to get the revision editor value (required)
        :param str parent_item_id: The parent item id (run id) for which you want to get the revision editor value (required)
        :param object value: The new value (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_revision_editor_value_with_http_info(model_field_id, parent_item_id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.set_revision_editor_value_with_http_info(model_field_id, parent_item_id, value, **kwargs)  # noqa: E501
            return data

    def set_revision_editor_value_with_http_info(self, model_field_id, parent_item_id, value, **kwargs):  # noqa: E501
        """[Command] Set the value of a RevisionEditor field depending on a model field id and a parent item Id (that corresponds to the run Id).  Important notice : RevisionEditor fields work only with Single value Parameters. 2D and 3D Parameters are not supported.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_revision_editor_value_with_http_info(model_field_id, parent_item_id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_field_id: The model field id for which you want to get the revision editor value (required)
        :param str parent_item_id: The parent item id (run id) for which you want to get the revision editor value (required)
        :param object value: The new value (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_field_id', 'parent_item_id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_revision_editor_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model_field_id' is set
        if self.api_client.client_side_validation and ('model_field_id' not in params or
                                                       params['model_field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model_field_id` when calling `set_revision_editor_value`")  # noqa: E501
        # verify the required parameter 'parent_item_id' is set
        if self.api_client.client_side_validation and ('parent_item_id' not in params or
                                                       params['parent_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parent_item_id` when calling `set_revision_editor_value`")  # noqa: E501
        # verify the required parameter 'value' is set
        if self.api_client.client_side_validation and ('value' not in params or
                                                       params['value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `value` when calling `set_revision_editor_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_field_id' in params:
            path_params['modelFieldId'] = params['model_field_id']  # noqa: E501

        query_params = []
        if 'parent_item_id' in params:
            query_params.append(('parentItemId', params['parent_item_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'value' in params:
            body_params = params['value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/modelfield/{modelFieldId}/revisioneditorvalue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_revision_selector_filters(self, event_id, target_id, tags, **kwargs):  # noqa: E501
        """[Command] Set the tags list for an event and a target in order to filter the revision selector fields displayed on the drop down  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_revision_selector_filters(event_id, target_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_id: The event unique id for which you want to add the tags list (required)
        :param str target_id: The target unique id for which you want to add the tags list (required)
        :param list[str] tags: The tags used to filter the revision selector fields you want to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_revision_selector_filters_with_http_info(event_id, target_id, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.set_revision_selector_filters_with_http_info(event_id, target_id, tags, **kwargs)  # noqa: E501
            return data

    def set_revision_selector_filters_with_http_info(self, event_id, target_id, tags, **kwargs):  # noqa: E501
        """[Command] Set the tags list for an event and a target in order to filter the revision selector fields displayed on the drop down  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_revision_selector_filters_with_http_info(event_id, target_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_id: The event unique id for which you want to add the tags list (required)
        :param str target_id: The target unique id for which you want to add the tags list (required)
        :param list[str] tags: The tags used to filter the revision selector fields you want to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'target_id', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_revision_selector_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if self.api_client.client_side_validation and ('event_id' not in params or
                                                       params['event_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `event_id` when calling `set_revision_selector_filters`")  # noqa: E501
        # verify the required parameter 'target_id' is set
        if self.api_client.client_side_validation and ('target_id' not in params or
                                                       params['target_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_id` when calling `set_revision_selector_filters`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if self.api_client.client_side_validation and ('tags' not in params or
                                                       params['tags'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tags` when calling `set_revision_selector_filters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']  # noqa: E501

        query_params = []
        if 'target_id' in params:
            query_params.append(('targetId', params['target_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/event/{eventId}/revisionselectorfilters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_revision_selector_value(self, model_field_id, parent_item_id, value, **kwargs):  # noqa: E501
        """[Command] Set the value of a RevisionSelector field depending on a model field id and a parent item Id (that corresponds to the run Id).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_revision_selector_value(model_field_id, parent_item_id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_field_id: The model field id for which you want to get the revision selector value (required)
        :param str parent_item_id: The parent item id (run id) for which you want to get the revision selector value (required)
        :param str value: The revision name value to apply. This value must match with a value available in the GetRevisionSelectorListOfValues function (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_revision_selector_value_with_http_info(model_field_id, parent_item_id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.set_revision_selector_value_with_http_info(model_field_id, parent_item_id, value, **kwargs)  # noqa: E501
            return data

    def set_revision_selector_value_with_http_info(self, model_field_id, parent_item_id, value, **kwargs):  # noqa: E501
        """[Command] Set the value of a RevisionSelector field depending on a model field id and a parent item Id (that corresponds to the run Id).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_revision_selector_value_with_http_info(model_field_id, parent_item_id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_field_id: The model field id for which you want to get the revision selector value (required)
        :param str parent_item_id: The parent item id (run id) for which you want to get the revision selector value (required)
        :param str value: The revision name value to apply. This value must match with a value available in the GetRevisionSelectorListOfValues function (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_field_id', 'parent_item_id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_revision_selector_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model_field_id' is set
        if self.api_client.client_side_validation and ('model_field_id' not in params or
                                                       params['model_field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model_field_id` when calling `set_revision_selector_value`")  # noqa: E501
        # verify the required parameter 'parent_item_id' is set
        if self.api_client.client_side_validation and ('parent_item_id' not in params or
                                                       params['parent_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parent_item_id` when calling `set_revision_selector_value`")  # noqa: E501
        # verify the required parameter 'value' is set
        if self.api_client.client_side_validation and ('value' not in params or
                                                       params['value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `value` when calling `set_revision_selector_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_field_id' in params:
            path_params['modelFieldId'] = params['model_field_id']  # noqa: E501

        query_params = []
        if 'parent_item_id' in params:
            query_params.append(('parentItemId', params['parent_item_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'value' in params:
            body_params = params['value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/modelfield/{modelFieldId}/revisionselectorvalue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

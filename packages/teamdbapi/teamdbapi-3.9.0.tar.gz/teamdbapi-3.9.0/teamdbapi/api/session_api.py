# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teamdbapi.api_client import ApiClient


class SessionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_session(self, car_id, new_session, **kwargs):  # noqa: E501
        """Create a new session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_session(car_id, new_session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str car_id: The parent car. (required)
        :param Session new_session: The session to create. (required)
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_session_with_http_info(car_id, new_session, **kwargs)  # noqa: E501
        else:
            (data) = self.create_session_with_http_info(car_id, new_session, **kwargs)  # noqa: E501
            return data

    def create_session_with_http_info(self, car_id, new_session, **kwargs):  # noqa: E501
        """Create a new session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_session_with_http_info(car_id, new_session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str car_id: The parent car. (required)
        :param Session new_session: The session to create. (required)
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['car_id', 'new_session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'car_id' is set
        if self.api_client.client_side_validation and ('car_id' not in params or
                                                       params['car_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `car_id` when calling `create_session`")  # noqa: E501
        # verify the required parameter 'new_session' is set
        if self.api_client.client_side_validation and ('new_session' not in params or
                                                       params['new_session'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_session` when calling `create_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'car_id' in params:
            path_params['carId'] = params['car_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_session' in params:
            body_params = params['new_session']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/car/{carId}/session', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_session(self, session_id, **kwargs):  # noqa: E501
        """Delete an existing session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_session(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The unique session id for which you want to delete the session (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_session_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_session_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def delete_session_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Delete an existing session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_session_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The unique session id for which you want to delete the session (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in params or
                                                       params['session_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `session_id` when calling `delete_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/session/{sessionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_session(self, **kwargs):  # noqa: E501
        """Get the current session.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_session(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_session_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_current_session_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_current_session_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current session.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_session_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_session" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/session/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_session(self, session_id, **kwargs):  # noqa: E501
        """Get a session via a unique id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The unique session id for which you want to get the session (required)
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_session_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_session_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_session_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get a session via a unique id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The unique session id for which you want to get the session (required)
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in params or
                                                       params['session_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `session_id` when calling `get_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/session/{sessionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_session_list(self, car_id, **kwargs):  # noqa: E501
        """Get the list of all sessions for an car.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_list(car_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str car_id: The unique car id for which you want to get the session list (required)
        :return: list[CoupleGuidText]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_session_list_with_http_info(car_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_session_list_with_http_info(car_id, **kwargs)  # noqa: E501
            return data

    def get_session_list_with_http_info(self, car_id, **kwargs):  # noqa: E501
        """Get the list of all sessions for an car.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_list_with_http_info(car_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str car_id: The unique car id for which you want to get the session list (required)
        :return: list[CoupleGuidText]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['car_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_session_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'car_id' is set
        if self.api_client.client_side_validation and ('car_id' not in params or
                                                       params['car_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `car_id` when calling `get_session_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'car_id' in params:
            path_params['carId'] = params['car_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/car/{carId}/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CoupleGuidText]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_session(self, session_id, updated_session, **kwargs):  # noqa: E501
        """Update an existing session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_session(session_id, updated_session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The unique session id for which you want to update the session (required)
        :param Session updated_session: The session to update. (required)
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_session_with_http_info(session_id, updated_session, **kwargs)  # noqa: E501
        else:
            (data) = self.update_session_with_http_info(session_id, updated_session, **kwargs)  # noqa: E501
            return data

    def update_session_with_http_info(self, session_id, updated_session, **kwargs):  # noqa: E501
        """Update an existing session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_session_with_http_info(session_id, updated_session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The unique session id for which you want to update the session (required)
        :param Session updated_session: The session to update. (required)
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'updated_session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in params or
                                                       params['session_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `session_id` when calling `update_session`")  # noqa: E501
        # verify the required parameter 'updated_session' is set
        if self.api_client.client_side_validation and ('updated_session' not in params or
                                                       params['updated_session'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `updated_session` when calling `update_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'updated_session' in params:
            body_params = params['updated_session']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/session/{sessionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_session_property(self, session_id, property_name, value, **kwargs):  # noqa: E501
        """Update a property value for an existing session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_session_property(session_id, property_name, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The unique session id (required)
        :param str property_name: The property name to update (required)
        :param object value: The new value. For SessionDate, you need to wrap the date around \" for instance : \"2018-12-20T09:31:25.111Z\" (required)
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_session_property_with_http_info(session_id, property_name, value, **kwargs)  # noqa: E501
        else:
            (data) = self.update_session_property_with_http_info(session_id, property_name, value, **kwargs)  # noqa: E501
            return data

    def update_session_property_with_http_info(self, session_id, property_name, value, **kwargs):  # noqa: E501
        """Update a property value for an existing session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_session_property_with_http_info(session_id, property_name, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The unique session id (required)
        :param str property_name: The property name to update (required)
        :param object value: The new value. For SessionDate, you need to wrap the date around \" for instance : \"2018-12-20T09:31:25.111Z\" (required)
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'property_name', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_session_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in params or
                                                       params['session_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `session_id` when calling `update_session_property`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if self.api_client.client_side_validation and ('property_name' not in params or
                                                       params['property_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `property_name` when calling `update_session_property`")  # noqa: E501
        # verify the required parameter 'value' is set
        if self.api_client.client_side_validation and ('value' not in params or
                                                       params['value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `value` when calling `update_session_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501
        if 'property_name' in params:
            path_params['propertyName'] = params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'value' in params:
            body_params = params['value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/teamdbapi/v2.0/session/{sessionId}/propertyName/{propertyName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

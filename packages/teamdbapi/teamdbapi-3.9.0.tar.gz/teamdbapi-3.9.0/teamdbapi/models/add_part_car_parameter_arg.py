# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class AddPartCarParameterArg(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'PartId': 'str',
        'ParameterId': 'str',
        'TargetId': 'str',
        'ParameterBinding': 'str',
        'RedirectPartId': 'str',
        'RedirectParameterId': 'str',
        'RedirectTargetId': 'str',
        'RedirectCoeffA': 'float',
        'RedirectCoeffB': 'float',
        'RedirectCoeffC': 'float',
        'RedirectCoeffD': 'float'
    }

    attribute_map = {
        'PartId': 'PartId',
        'ParameterId': 'ParameterId',
        'TargetId': 'TargetId',
        'ParameterBinding': 'ParameterBinding',
        'RedirectPartId': 'RedirectPartId',
        'RedirectParameterId': 'RedirectParameterId',
        'RedirectTargetId': 'RedirectTargetId',
        'RedirectCoeffA': 'RedirectCoeffA',
        'RedirectCoeffB': 'RedirectCoeffB',
        'RedirectCoeffC': 'RedirectCoeffC',
        'RedirectCoeffD': 'RedirectCoeffD'
    }

    def __init__(self, PartId=None, ParameterId=None, TargetId=None, ParameterBinding=None, RedirectPartId=None, RedirectParameterId=None, RedirectTargetId=None, RedirectCoeffA=None, RedirectCoeffB=None, RedirectCoeffC=None, RedirectCoeffD=None, _configuration=None):  # noqa: E501
        """AddPartCarParameterArg - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._PartId = None
        self._ParameterId = None
        self._TargetId = None
        self._ParameterBinding = None
        self._RedirectPartId = None
        self._RedirectParameterId = None
        self._RedirectTargetId = None
        self._RedirectCoeffA = None
        self._RedirectCoeffB = None
        self._RedirectCoeffC = None
        self._RedirectCoeffD = None
        self.discriminator = None

        self.PartId = PartId
        self.ParameterId = ParameterId
        self.TargetId = TargetId
        if ParameterBinding is not None:
            self.ParameterBinding = ParameterBinding
        if RedirectPartId is not None:
            self.RedirectPartId = RedirectPartId
        if RedirectParameterId is not None:
            self.RedirectParameterId = RedirectParameterId
        if RedirectTargetId is not None:
            self.RedirectTargetId = RedirectTargetId
        if RedirectCoeffA is not None:
            self.RedirectCoeffA = RedirectCoeffA
        if RedirectCoeffB is not None:
            self.RedirectCoeffB = RedirectCoeffB
        if RedirectCoeffC is not None:
            self.RedirectCoeffC = RedirectCoeffC
        if RedirectCoeffD is not None:
            self.RedirectCoeffD = RedirectCoeffD

    @property
    def PartId(self):
        """Gets the PartId of this AddPartCarParameterArg.  # noqa: E501

        The part unique identifier  # noqa: E501

        :return: The PartId of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._PartId

    @PartId.setter
    def PartId(self, PartId):
        """Sets the PartId of this AddPartCarParameterArg.

        The part unique identifier  # noqa: E501

        :param PartId: The PartId of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and PartId is None:
            raise ValueError("Invalid value for `PartId`, must not be `None`")  # noqa: E501

        self._PartId = PartId

    @property
    def ParameterId(self):
        """Gets the ParameterId of this AddPartCarParameterArg.  # noqa: E501

        The car parameters unique identifier  # noqa: E501

        :return: The ParameterId of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._ParameterId

    @ParameterId.setter
    def ParameterId(self, ParameterId):
        """Sets the ParameterId of this AddPartCarParameterArg.

        The car parameters unique identifier  # noqa: E501

        :param ParameterId: The ParameterId of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ParameterId is None:
            raise ValueError("Invalid value for `ParameterId`, must not be `None`")  # noqa: E501

        self._ParameterId = ParameterId

    @property
    def TargetId(self):
        """Gets the TargetId of this AddPartCarParameterArg.  # noqa: E501

        The car parameters target unique identifier  # noqa: E501

        :return: The TargetId of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._TargetId

    @TargetId.setter
    def TargetId(self, TargetId):
        """Sets the TargetId of this AddPartCarParameterArg.

        The car parameters target unique identifier  # noqa: E501

        :param TargetId: The TargetId of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and TargetId is None:
            raise ValueError("Invalid value for `TargetId`, must not be `None`")  # noqa: E501

        self._TargetId = TargetId

    @property
    def ParameterBinding(self):
        """Gets the ParameterBinding of this AddPartCarParameterArg.  # noqa: E501

        The parameter binfing used to identify the component to import from a mounting  to a car parameter assembly  # noqa: E501

        :return: The ParameterBinding of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._ParameterBinding

    @ParameterBinding.setter
    def ParameterBinding(self, ParameterBinding):
        """Sets the ParameterBinding of this AddPartCarParameterArg.

        The parameter binfing used to identify the component to import from a mounting  to a car parameter assembly  # noqa: E501

        :param ParameterBinding: The ParameterBinding of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """

        self._ParameterBinding = ParameterBinding

    @property
    def RedirectPartId(self):
        """Gets the RedirectPartId of this AddPartCarParameterArg.  # noqa: E501

        The redirect part name.  Optional field. Only valid with a group part.  # noqa: E501

        :return: The RedirectPartId of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._RedirectPartId

    @RedirectPartId.setter
    def RedirectPartId(self, RedirectPartId):
        """Sets the RedirectPartId of this AddPartCarParameterArg.

        The redirect part name.  Optional field. Only valid with a group part.  # noqa: E501

        :param RedirectPartId: The RedirectPartId of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """

        self._RedirectPartId = RedirectPartId

    @property
    def RedirectParameterId(self):
        """Gets the RedirectParameterId of this AddPartCarParameterArg.  # noqa: E501

        The redirected car parameters unique id  Optional field. Only valid with a group part.  # noqa: E501

        :return: The RedirectParameterId of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._RedirectParameterId

    @RedirectParameterId.setter
    def RedirectParameterId(self, RedirectParameterId):
        """Sets the RedirectParameterId of this AddPartCarParameterArg.

        The redirected car parameters unique id  Optional field. Only valid with a group part.  # noqa: E501

        :param RedirectParameterId: The RedirectParameterId of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """

        self._RedirectParameterId = RedirectParameterId

    @property
    def RedirectTargetId(self):
        """Gets the RedirectTargetId of this AddPartCarParameterArg.  # noqa: E501

        The redirected car parameters target unique id  Optional field. Only valid with a group part.  # noqa: E501

        :return: The RedirectTargetId of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._RedirectTargetId

    @RedirectTargetId.setter
    def RedirectTargetId(self, RedirectTargetId):
        """Sets the RedirectTargetId of this AddPartCarParameterArg.

        The redirected car parameters target unique id  Optional field. Only valid with a group part.  # noqa: E501

        :param RedirectTargetId: The RedirectTargetId of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """

        self._RedirectTargetId = RedirectTargetId

    @property
    def RedirectCoeffA(self):
        """Gets the RedirectCoeffA of this AddPartCarParameterArg.  # noqa: E501

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :return: The RedirectCoeffA of this AddPartCarParameterArg.  # noqa: E501
        :rtype: float
        """
        return self._RedirectCoeffA

    @RedirectCoeffA.setter
    def RedirectCoeffA(self, RedirectCoeffA):
        """Sets the RedirectCoeffA of this AddPartCarParameterArg.

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :param RedirectCoeffA: The RedirectCoeffA of this AddPartCarParameterArg.  # noqa: E501
        :type: float
        """

        self._RedirectCoeffA = RedirectCoeffA

    @property
    def RedirectCoeffB(self):
        """Gets the RedirectCoeffB of this AddPartCarParameterArg.  # noqa: E501

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :return: The RedirectCoeffB of this AddPartCarParameterArg.  # noqa: E501
        :rtype: float
        """
        return self._RedirectCoeffB

    @RedirectCoeffB.setter
    def RedirectCoeffB(self, RedirectCoeffB):
        """Sets the RedirectCoeffB of this AddPartCarParameterArg.

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :param RedirectCoeffB: The RedirectCoeffB of this AddPartCarParameterArg.  # noqa: E501
        :type: float
        """

        self._RedirectCoeffB = RedirectCoeffB

    @property
    def RedirectCoeffC(self):
        """Gets the RedirectCoeffC of this AddPartCarParameterArg.  # noqa: E501

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :return: The RedirectCoeffC of this AddPartCarParameterArg.  # noqa: E501
        :rtype: float
        """
        return self._RedirectCoeffC

    @RedirectCoeffC.setter
    def RedirectCoeffC(self, RedirectCoeffC):
        """Sets the RedirectCoeffC of this AddPartCarParameterArg.

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :param RedirectCoeffC: The RedirectCoeffC of this AddPartCarParameterArg.  # noqa: E501
        :type: float
        """

        self._RedirectCoeffC = RedirectCoeffC

    @property
    def RedirectCoeffD(self):
        """Gets the RedirectCoeffD of this AddPartCarParameterArg.  # noqa: E501

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :return: The RedirectCoeffD of this AddPartCarParameterArg.  # noqa: E501
        :rtype: float
        """
        return self._RedirectCoeffD

    @RedirectCoeffD.setter
    def RedirectCoeffD(self, RedirectCoeffD):
        """Sets the RedirectCoeffD of this AddPartCarParameterArg.

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :param RedirectCoeffD: The RedirectCoeffD of this AddPartCarParameterArg.  # noqa: E501
        :type: float
        """

        self._RedirectCoeffD = RedirectCoeffD

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddPartCarParameterArg, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddPartCarParameterArg):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddPartCarParameterArg):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Calibration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Name': 'str',
        'Description': 'str',
        'Reference': 'str',
        'Data': 'list[object]',
        'DataType': 'str',
        'NX': 'int',
        'NY': 'int',
        'NZ': 'int',
        'AxeX': 'str',
        'AxeY': 'str',
        'AxeZ': 'str',
        'CalibrationType': 'str',
        'GroupePath': 'str',
        'Unit': 'str',
        'DataAxeX': 'list[float]',
        'DataAxeY': 'list[float]',
        'DataAxeZ': 'list[float]',
        'IsAxe': 'bool',
        'GroupFullPath': 'str',
        'StringFormat': 'str',
        'UpperLimit': 'float',
        'LowerLimit': 'float',
        'ReadOnly': 'bool'
    }

    attribute_map = {
        'Name': 'Name',
        'Description': 'Description',
        'Reference': 'Reference',
        'Data': 'Data',
        'DataType': 'DataType',
        'NX': 'NX',
        'NY': 'NY',
        'NZ': 'NZ',
        'AxeX': 'AxeX',
        'AxeY': 'AxeY',
        'AxeZ': 'AxeZ',
        'CalibrationType': 'CalibrationType',
        'GroupePath': 'GroupePath',
        'Unit': 'Unit',
        'DataAxeX': 'DataAxeX',
        'DataAxeY': 'DataAxeY',
        'DataAxeZ': 'DataAxeZ',
        'IsAxe': 'IsAxe',
        'GroupFullPath': 'GroupFullPath',
        'StringFormat': 'StringFormat',
        'UpperLimit': 'UpperLimit',
        'LowerLimit': 'LowerLimit',
        'ReadOnly': 'ReadOnly'
    }

    def __init__(self, Name=None, Description=None, Reference=None, Data=None, DataType=None, NX=None, NY=None, NZ=None, AxeX=None, AxeY=None, AxeZ=None, CalibrationType=None, GroupePath=None, Unit=None, DataAxeX=None, DataAxeY=None, DataAxeZ=None, IsAxe=None, GroupFullPath=None, StringFormat=None, UpperLimit=None, LowerLimit=None, ReadOnly=None, _configuration=None):  # noqa: E501
        """Calibration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Name = None
        self._Description = None
        self._Reference = None
        self._Data = None
        self._DataType = None
        self._NX = None
        self._NY = None
        self._NZ = None
        self._AxeX = None
        self._AxeY = None
        self._AxeZ = None
        self._CalibrationType = None
        self._GroupePath = None
        self._Unit = None
        self._DataAxeX = None
        self._DataAxeY = None
        self._DataAxeZ = None
        self._IsAxe = None
        self._GroupFullPath = None
        self._StringFormat = None
        self._UpperLimit = None
        self._LowerLimit = None
        self._ReadOnly = None
        self.discriminator = None

        if Name is not None:
            self.Name = Name
        if Description is not None:
            self.Description = Description
        if Reference is not None:
            self.Reference = Reference
        if Data is not None:
            self.Data = Data
        if DataType is not None:
            self.DataType = DataType
        if NX is not None:
            self.NX = NX
        if NY is not None:
            self.NY = NY
        if NZ is not None:
            self.NZ = NZ
        if AxeX is not None:
            self.AxeX = AxeX
        if AxeY is not None:
            self.AxeY = AxeY
        if AxeZ is not None:
            self.AxeZ = AxeZ
        if CalibrationType is not None:
            self.CalibrationType = CalibrationType
        if GroupePath is not None:
            self.GroupePath = GroupePath
        if Unit is not None:
            self.Unit = Unit
        if DataAxeX is not None:
            self.DataAxeX = DataAxeX
        if DataAxeY is not None:
            self.DataAxeY = DataAxeY
        if DataAxeZ is not None:
            self.DataAxeZ = DataAxeZ
        if IsAxe is not None:
            self.IsAxe = IsAxe
        if GroupFullPath is not None:
            self.GroupFullPath = GroupFullPath
        if StringFormat is not None:
            self.StringFormat = StringFormat
        if UpperLimit is not None:
            self.UpperLimit = UpperLimit
        if LowerLimit is not None:
            self.LowerLimit = LowerLimit
        if ReadOnly is not None:
            self.ReadOnly = ReadOnly

    @property
    def Name(self):
        """Gets the Name of this Calibration.  # noqa: E501

        The parameter name  # noqa: E501

        :return: The Name of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Calibration.

        The parameter name  # noqa: E501

        :param Name: The Name of this Calibration.  # noqa: E501
        :type: str
        """

        self._Name = Name

    @property
    def Description(self):
        """Gets the Description of this Calibration.  # noqa: E501

        The parameter description  # noqa: E501

        :return: The Description of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        """Sets the Description of this Calibration.

        The parameter description  # noqa: E501

        :param Description: The Description of this Calibration.  # noqa: E501
        :type: str
        """

        self._Description = Description

    @property
    def Reference(self):
        """Gets the Reference of this Calibration.  # noqa: E501

        The parameter reference in the external system  # noqa: E501

        :return: The Reference of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        """Sets the Reference of this Calibration.

        The parameter reference in the external system  # noqa: E501

        :param Reference: The Reference of this Calibration.  # noqa: E501
        :type: str
        """

        self._Reference = Reference

    @property
    def Data(self):
        """Gets the Data of this Calibration.  # noqa: E501

        The parameter data.  Depending on the parameter definition the value can be a single value or 2D value or 3D.  For this reason, the Value is represented as a 3 dimensionals JSON array.  The value type can be a string or double depending on the parameter.  For this reason, you have to serialize the value with invariant culture format.  Decimal separator must be the point. The coma is use to separate the elements inside the array.  Single Value sample : [[[0.7]]]  1D Value sample : [[[0.0]],[[0.1]],[[0.2]]]  2D Value sample : [[[1.0],[1.0],[1.0]], [[1.0],[1.0],[1.0],[1.0]]]  # noqa: E501

        :return: The Data of this Calibration.  # noqa: E501
        :rtype: list[object]
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        """Sets the Data of this Calibration.

        The parameter data.  Depending on the parameter definition the value can be a single value or 2D value or 3D.  For this reason, the Value is represented as a 3 dimensionals JSON array.  The value type can be a string or double depending on the parameter.  For this reason, you have to serialize the value with invariant culture format.  Decimal separator must be the point. The coma is use to separate the elements inside the array.  Single Value sample : [[[0.7]]]  1D Value sample : [[[0.0]],[[0.1]],[[0.2]]]  2D Value sample : [[[1.0],[1.0],[1.0]], [[1.0],[1.0],[1.0],[1.0]]]  # noqa: E501

        :param Data: The Data of this Calibration.  # noqa: E501
        :type: list[object]
        """

        self._Data = Data

    @property
    def DataType(self):
        """Gets the DataType of this Calibration.  # noqa: E501

        The data type  None, Byte, SByte, Word, SWord, DWord, SDWord, Floatx, Float3, Group, Text, ULong, SLong, Float6  # noqa: E501

        :return: The DataType of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._DataType

    @DataType.setter
    def DataType(self, DataType):
        """Sets the DataType of this Calibration.

        The data type  None, Byte, SByte, Word, SWord, DWord, SDWord, Floatx, Float3, Group, Text, ULong, SLong, Float6  # noqa: E501

        :param DataType: The DataType of this Calibration.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Byte", "SByte", "Word", "SWord", "DWord", "SDWord", "Floatx", "Float3", "Group", "Text", "ULong", "SLong", "Float6"]  # noqa: E501
        if (self._configuration.client_side_validation and
                DataType not in allowed_values):
            raise ValueError(
                "Invalid value for `DataType` ({0}), must be one of {1}"  # noqa: E501
                .format(DataType, allowed_values)
            )

        self._DataType = DataType

    @property
    def NX(self):
        """Gets the NX of this Calibration.  # noqa: E501

        The X dimension of the data array  # noqa: E501

        :return: The NX of this Calibration.  # noqa: E501
        :rtype: int
        """
        return self._NX

    @NX.setter
    def NX(self, NX):
        """Sets the NX of this Calibration.

        The X dimension of the data array  # noqa: E501

        :param NX: The NX of this Calibration.  # noqa: E501
        :type: int
        """

        self._NX = NX

    @property
    def NY(self):
        """Gets the NY of this Calibration.  # noqa: E501

        The Y dimension of the data array  # noqa: E501

        :return: The NY of this Calibration.  # noqa: E501
        :rtype: int
        """
        return self._NY

    @NY.setter
    def NY(self, NY):
        """Sets the NY of this Calibration.

        The Y dimension of the data array  # noqa: E501

        :param NY: The NY of this Calibration.  # noqa: E501
        :type: int
        """

        self._NY = NY

    @property
    def NZ(self):
        """Gets the NZ of this Calibration.  # noqa: E501

        The Z dimension of the data array  # noqa: E501

        :return: The NZ of this Calibration.  # noqa: E501
        :rtype: int
        """
        return self._NZ

    @NZ.setter
    def NZ(self, NZ):
        """Sets the NZ of this Calibration.

        The Z dimension of the data array  # noqa: E501

        :param NZ: The NZ of this Calibration.  # noqa: E501
        :type: int
        """

        self._NZ = NZ

    @property
    def AxeX(self):
        """Gets the AxeX of this Calibration.  # noqa: E501

        The reference name of the X axis (if the parameter needs axis)  # noqa: E501

        :return: The AxeX of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._AxeX

    @AxeX.setter
    def AxeX(self, AxeX):
        """Sets the AxeX of this Calibration.

        The reference name of the X axis (if the parameter needs axis)  # noqa: E501

        :param AxeX: The AxeX of this Calibration.  # noqa: E501
        :type: str
        """

        self._AxeX = AxeX

    @property
    def AxeY(self):
        """Gets the AxeY of this Calibration.  # noqa: E501

        The reference name of the Y axis (if the parameter needs axis)  # noqa: E501

        :return: The AxeY of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._AxeY

    @AxeY.setter
    def AxeY(self, AxeY):
        """Sets the AxeY of this Calibration.

        The reference name of the Y axis (if the parameter needs axis)  # noqa: E501

        :param AxeY: The AxeY of this Calibration.  # noqa: E501
        :type: str
        """

        self._AxeY = AxeY

    @property
    def AxeZ(self):
        """Gets the AxeZ of this Calibration.  # noqa: E501

        The reference name of the Z axis (if the parameter needs axis)  # noqa: E501

        :return: The AxeZ of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._AxeZ

    @AxeZ.setter
    def AxeZ(self, AxeZ):
        """Sets the AxeZ of this Calibration.

        The reference name of the Z axis (if the parameter needs axis)  # noqa: E501

        :param AxeZ: The AxeZ of this Calibration.  # noqa: E501
        :type: str
        """

        self._AxeZ = AxeZ

    @property
    def CalibrationType(self):
        """Gets the CalibrationType of this Calibration.  # noqa: E501

        The parameter definition type (Single, 1D, 2D, 3D)  # noqa: E501

        :return: The CalibrationType of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._CalibrationType

    @CalibrationType.setter
    def CalibrationType(self, CalibrationType):
        """Sets the CalibrationType of this Calibration.

        The parameter definition type (Single, 1D, 2D, 3D)  # noqa: E501

        :param CalibrationType: The CalibrationType of this Calibration.  # noqa: E501
        :type: str
        """
        allowed_values = ["Single", "OneDimension", "TwoDimension", "ThreeDimension"]  # noqa: E501
        if (self._configuration.client_side_validation and
                CalibrationType not in allowed_values):
            raise ValueError(
                "Invalid value for `CalibrationType` ({0}), must be one of {1}"  # noqa: E501
                .format(CalibrationType, allowed_values)
            )

        self._CalibrationType = CalibrationType

    @property
    def GroupePath(self):
        """Gets the GroupePath of this Calibration.  # noqa: E501

        The group name to which the parameter belongs to.  # noqa: E501

        :return: The GroupePath of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._GroupePath

    @GroupePath.setter
    def GroupePath(self, GroupePath):
        """Sets the GroupePath of this Calibration.

        The group name to which the parameter belongs to.  # noqa: E501

        :param GroupePath: The GroupePath of this Calibration.  # noqa: E501
        :type: str
        """

        self._GroupePath = GroupePath

    @property
    def Unit(self):
        """Gets the Unit of this Calibration.  # noqa: E501

        The parameter unit  # noqa: E501

        :return: The Unit of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._Unit

    @Unit.setter
    def Unit(self, Unit):
        """Sets the Unit of this Calibration.

        The parameter unit  # noqa: E501

        :param Unit: The Unit of this Calibration.  # noqa: E501
        :type: str
        """

        self._Unit = Unit

    @property
    def DataAxeX(self):
        """Gets the DataAxeX of this Calibration.  # noqa: E501

        The X axis data embedded in the parameter  # noqa: E501

        :return: The DataAxeX of this Calibration.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeX

    @DataAxeX.setter
    def DataAxeX(self, DataAxeX):
        """Sets the DataAxeX of this Calibration.

        The X axis data embedded in the parameter  # noqa: E501

        :param DataAxeX: The DataAxeX of this Calibration.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeX = DataAxeX

    @property
    def DataAxeY(self):
        """Gets the DataAxeY of this Calibration.  # noqa: E501

        The Y axis data embedded in the parameter  # noqa: E501

        :return: The DataAxeY of this Calibration.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeY

    @DataAxeY.setter
    def DataAxeY(self, DataAxeY):
        """Sets the DataAxeY of this Calibration.

        The Y axis data embedded in the parameter  # noqa: E501

        :param DataAxeY: The DataAxeY of this Calibration.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeY = DataAxeY

    @property
    def DataAxeZ(self):
        """Gets the DataAxeZ of this Calibration.  # noqa: E501

        The Z axis data embedded in the parameter  # noqa: E501

        :return: The DataAxeZ of this Calibration.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeZ

    @DataAxeZ.setter
    def DataAxeZ(self, DataAxeZ):
        """Sets the DataAxeZ of this Calibration.

        The Z axis data embedded in the parameter  # noqa: E501

        :param DataAxeZ: The DataAxeZ of this Calibration.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeZ = DataAxeZ

    @property
    def IsAxe(self):
        """Gets the IsAxe of this Calibration.  # noqa: E501

        True if the parameter is an axis  # noqa: E501

        :return: The IsAxe of this Calibration.  # noqa: E501
        :rtype: bool
        """
        return self._IsAxe

    @IsAxe.setter
    def IsAxe(self, IsAxe):
        """Sets the IsAxe of this Calibration.

        True if the parameter is an axis  # noqa: E501

        :param IsAxe: The IsAxe of this Calibration.  # noqa: E501
        :type: bool
        """

        self._IsAxe = IsAxe

    @property
    def GroupFullPath(self):
        """Gets the GroupFullPath of this Calibration.  # noqa: E501

        The group full path in which the parameter is located  # noqa: E501

        :return: The GroupFullPath of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._GroupFullPath

    @GroupFullPath.setter
    def GroupFullPath(self, GroupFullPath):
        """Sets the GroupFullPath of this Calibration.

        The group full path in which the parameter is located  # noqa: E501

        :param GroupFullPath: The GroupFullPath of this Calibration.  # noqa: E501
        :type: str
        """

        self._GroupFullPath = GroupFullPath

    @property
    def StringFormat(self):
        """Gets the StringFormat of this Calibration.  # noqa: E501

        The parameter string format  # noqa: E501

        :return: The StringFormat of this Calibration.  # noqa: E501
        :rtype: str
        """
        return self._StringFormat

    @StringFormat.setter
    def StringFormat(self, StringFormat):
        """Sets the StringFormat of this Calibration.

        The parameter string format  # noqa: E501

        :param StringFormat: The StringFormat of this Calibration.  # noqa: E501
        :type: str
        """

        self._StringFormat = StringFormat

    @property
    def UpperLimit(self):
        """Gets the UpperLimit of this Calibration.  # noqa: E501

        The upper value authorized  # noqa: E501

        :return: The UpperLimit of this Calibration.  # noqa: E501
        :rtype: float
        """
        return self._UpperLimit

    @UpperLimit.setter
    def UpperLimit(self, UpperLimit):
        """Sets the UpperLimit of this Calibration.

        The upper value authorized  # noqa: E501

        :param UpperLimit: The UpperLimit of this Calibration.  # noqa: E501
        :type: float
        """

        self._UpperLimit = UpperLimit

    @property
    def LowerLimit(self):
        """Gets the LowerLimit of this Calibration.  # noqa: E501

        The lower value authorized  # noqa: E501

        :return: The LowerLimit of this Calibration.  # noqa: E501
        :rtype: float
        """
        return self._LowerLimit

    @LowerLimit.setter
    def LowerLimit(self, LowerLimit):
        """Sets the LowerLimit of this Calibration.

        The lower value authorized  # noqa: E501

        :param LowerLimit: The LowerLimit of this Calibration.  # noqa: E501
        :type: float
        """

        self._LowerLimit = LowerLimit

    @property
    def ReadOnly(self):
        """Gets the ReadOnly of this Calibration.  # noqa: E501

        True if the parameter is read only  # noqa: E501

        :return: The ReadOnly of this Calibration.  # noqa: E501
        :rtype: bool
        """
        return self._ReadOnly

    @ReadOnly.setter
    def ReadOnly(self, ReadOnly):
        """Sets the ReadOnly of this Calibration.

        True if the parameter is read only  # noqa: E501

        :param ReadOnly: The ReadOnly of this Calibration.  # noqa: E501
        :type: bool
        """

        self._ReadOnly = ReadOnly

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Calibration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Calibration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Calibration):
            return True

        return self.to_dict() != other.to_dict()

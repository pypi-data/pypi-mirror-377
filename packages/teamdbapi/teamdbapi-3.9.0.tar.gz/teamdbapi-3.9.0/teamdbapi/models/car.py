# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Car(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'EventId': 'str',
        'TypeCarId': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'Revision': 'int',
        'LapCount': 'int',
        'RunCount': 'int',
        'SessionCount': 'int',
        'Distance': 'float',
        'DistanceReal': 'float'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'EventId': 'EventId',
        'TypeCarId': 'TypeCarId',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'Revision': 'Revision',
        'LapCount': 'LapCount',
        'RunCount': 'RunCount',
        'SessionCount': 'SessionCount',
        'Distance': 'Distance',
        'DistanceReal': 'DistanceReal'
    }

    def __init__(self, Id=None, Name=None, EventId=None, TypeCarId=None, LastUpdateDateUtc=None, LastUpdateUser=None, Revision=None, LapCount=None, RunCount=None, SessionCount=None, Distance=None, DistanceReal=None, _configuration=None):  # noqa: E501
        """Car - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._EventId = None
        self._TypeCarId = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._Revision = None
        self._LapCount = None
        self._RunCount = None
        self._SessionCount = None
        self._Distance = None
        self._DistanceReal = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        self.EventId = EventId
        self.TypeCarId = TypeCarId
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if Revision is not None:
            self.Revision = Revision
        if LapCount is not None:
            self.LapCount = LapCount
        if RunCount is not None:
            self.RunCount = RunCount
        if SessionCount is not None:
            self.SessionCount = SessionCount
        if Distance is not None:
            self.Distance = Distance
        if DistanceReal is not None:
            self.DistanceReal = DistanceReal

    @property
    def Id(self):
        """Gets the Id of this Car.  # noqa: E501

        The unique car Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Car.  # noqa: E501

        :return: The Id of this Car.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Car.

        The unique car Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Car.  # noqa: E501

        :param Id: The Id of this Car.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this Car.  # noqa: E501

        The car name  # noqa: E501

        :return: The Name of this Car.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Car.

        The car name  # noqa: E501

        :param Name: The Name of this Car.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def EventId(self):
        """Gets the EventId of this Car.  # noqa: E501

        The event unique id to which the car is linked.  # noqa: E501

        :return: The EventId of this Car.  # noqa: E501
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        """Sets the EventId of this Car.

        The event unique id to which the car is linked.  # noqa: E501

        :param EventId: The EventId of this Car.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and EventId is None:
            raise ValueError("Invalid value for `EventId`, must not be `None`")  # noqa: E501

        self._EventId = EventId

    @property
    def TypeCarId(self):
        """Gets the TypeCarId of this Car.  # noqa: E501

        The car type unique id.  # noqa: E501

        :return: The TypeCarId of this Car.  # noqa: E501
        :rtype: str
        """
        return self._TypeCarId

    @TypeCarId.setter
    def TypeCarId(self, TypeCarId):
        """Sets the TypeCarId of this Car.

        The car type unique id.  # noqa: E501

        :param TypeCarId: The TypeCarId of this Car.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and TypeCarId is None:
            raise ValueError("Invalid value for `TypeCarId`, must not be `None`")  # noqa: E501

        self._TypeCarId = TypeCarId

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Car.  # noqa: E501

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this Car.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Car.

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Car.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Car.  # noqa: E501

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateUser of this Car.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Car.

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Car.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def Revision(self):
        """Gets the Revision of this Car.  # noqa: E501

        The revision number of the object.  # noqa: E501

        :return: The Revision of this Car.  # noqa: E501
        :rtype: int
        """
        return self._Revision

    @Revision.setter
    def Revision(self, Revision):
        """Sets the Revision of this Car.

        The revision number of the object.  # noqa: E501

        :param Revision: The Revision of this Car.  # noqa: E501
        :type: int
        """

        self._Revision = Revision

    @property
    def LapCount(self):
        """Gets the LapCount of this Car.  # noqa: E501

        Lap count for the car  # noqa: E501

        :return: The LapCount of this Car.  # noqa: E501
        :rtype: int
        """
        return self._LapCount

    @LapCount.setter
    def LapCount(self, LapCount):
        """Sets the LapCount of this Car.

        Lap count for the car  # noqa: E501

        :param LapCount: The LapCount of this Car.  # noqa: E501
        :type: int
        """

        self._LapCount = LapCount

    @property
    def RunCount(self):
        """Gets the RunCount of this Car.  # noqa: E501

        Run count for the car  # noqa: E501

        :return: The RunCount of this Car.  # noqa: E501
        :rtype: int
        """
        return self._RunCount

    @RunCount.setter
    def RunCount(self, RunCount):
        """Sets the RunCount of this Car.

        Run count for the car  # noqa: E501

        :param RunCount: The RunCount of this Car.  # noqa: E501
        :type: int
        """

        self._RunCount = RunCount

    @property
    def SessionCount(self):
        """Gets the SessionCount of this Car.  # noqa: E501

        Session count for the car  # noqa: E501

        :return: The SessionCount of this Car.  # noqa: E501
        :rtype: int
        """
        return self._SessionCount

    @SessionCount.setter
    def SessionCount(self, SessionCount):
        """Sets the SessionCount of this Car.

        Session count for the car  # noqa: E501

        :param SessionCount: The SessionCount of this Car.  # noqa: E501
        :type: int
        """

        self._SessionCount = SessionCount

    @property
    def Distance(self):
        """Gets the Distance of this Car.  # noqa: E501

        Distance performed by the car  # noqa: E501

        :return: The Distance of this Car.  # noqa: E501
        :rtype: float
        """
        return self._Distance

    @Distance.setter
    def Distance(self, Distance):
        """Sets the Distance of this Car.

        Distance performed by the car  # noqa: E501

        :param Distance: The Distance of this Car.  # noqa: E501
        :type: float
        """

        self._Distance = Distance

    @property
    def DistanceReal(self):
        """Gets the DistanceReal of this Car.  # noqa: E501

        Distance real performed by the car  # noqa: E501

        :return: The DistanceReal of this Car.  # noqa: E501
        :rtype: float
        """
        return self._DistanceReal

    @DistanceReal.setter
    def DistanceReal(self, DistanceReal):
        """Sets the DistanceReal of this Car.

        Distance real performed by the car  # noqa: E501

        :param DistanceReal: The DistanceReal of this Car.  # noqa: E501
        :type: float
        """

        self._DistanceReal = DistanceReal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Car, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Car):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Car):
            return True

        return self.to_dict() != other.to_dict()

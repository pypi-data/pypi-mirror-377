# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class CompareResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Reference': 'str',
        'DataAxeX': 'list[float]',
        'DataAxeY': 'list[float]',
        'DataAxeZ': 'list[float]',
        'Data': 'list[object]',
        'RevisionName': 'str'
    }

    attribute_map = {
        'Reference': 'Reference',
        'DataAxeX': 'DataAxeX',
        'DataAxeY': 'DataAxeY',
        'DataAxeZ': 'DataAxeZ',
        'Data': 'Data',
        'RevisionName': 'RevisionName'
    }

    def __init__(self, Reference=None, DataAxeX=None, DataAxeY=None, DataAxeZ=None, Data=None, RevisionName=None, _configuration=None):  # noqa: E501
        """CompareResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Reference = None
        self._DataAxeX = None
        self._DataAxeY = None
        self._DataAxeZ = None
        self._Data = None
        self._RevisionName = None
        self.discriminator = None

        if Reference is not None:
            self.Reference = Reference
        if DataAxeX is not None:
            self.DataAxeX = DataAxeX
        if DataAxeY is not None:
            self.DataAxeY = DataAxeY
        if DataAxeZ is not None:
            self.DataAxeZ = DataAxeZ
        if Data is not None:
            self.Data = Data
        if RevisionName is not None:
            self.RevisionName = RevisionName

    @property
    def Reference(self):
        """Gets the Reference of this CompareResult.  # noqa: E501

        Parameter reference  # noqa: E501

        :return: The Reference of this CompareResult.  # noqa: E501
        :rtype: str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        """Sets the Reference of this CompareResult.

        Parameter reference  # noqa: E501

        :param Reference: The Reference of this CompareResult.  # noqa: E501
        :type: str
        """

        self._Reference = Reference

    @property
    def DataAxeX(self):
        """Gets the DataAxeX of this CompareResult.  # noqa: E501

        Data axe X  # noqa: E501

        :return: The DataAxeX of this CompareResult.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeX

    @DataAxeX.setter
    def DataAxeX(self, DataAxeX):
        """Sets the DataAxeX of this CompareResult.

        Data axe X  # noqa: E501

        :param DataAxeX: The DataAxeX of this CompareResult.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeX = DataAxeX

    @property
    def DataAxeY(self):
        """Gets the DataAxeY of this CompareResult.  # noqa: E501

        Data axe Y  # noqa: E501

        :return: The DataAxeY of this CompareResult.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeY

    @DataAxeY.setter
    def DataAxeY(self, DataAxeY):
        """Sets the DataAxeY of this CompareResult.

        Data axe Y  # noqa: E501

        :param DataAxeY: The DataAxeY of this CompareResult.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeY = DataAxeY

    @property
    def DataAxeZ(self):
        """Gets the DataAxeZ of this CompareResult.  # noqa: E501

        Data axe Z  # noqa: E501

        :return: The DataAxeZ of this CompareResult.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeZ

    @DataAxeZ.setter
    def DataAxeZ(self, DataAxeZ):
        """Sets the DataAxeZ of this CompareResult.

        Data axe Z  # noqa: E501

        :param DataAxeZ: The DataAxeZ of this CompareResult.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeZ = DataAxeZ

    @property
    def Data(self):
        """Gets the Data of this CompareResult.  # noqa: E501

        Parameter data  # noqa: E501

        :return: The Data of this CompareResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        """Sets the Data of this CompareResult.

        Parameter data  # noqa: E501

        :param Data: The Data of this CompareResult.  # noqa: E501
        :type: list[object]
        """

        self._Data = Data

    @property
    def RevisionName(self):
        """Gets the RevisionName of this CompareResult.  # noqa: E501

        Revision name  # noqa: E501

        :return: The RevisionName of this CompareResult.  # noqa: E501
        :rtype: str
        """
        return self._RevisionName

    @RevisionName.setter
    def RevisionName(self, RevisionName):
        """Sets the RevisionName of this CompareResult.

        Revision name  # noqa: E501

        :param RevisionName: The RevisionName of this CompareResult.  # noqa: E501
        :type: str
        """

        self._RevisionName = RevisionName

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompareResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompareResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompareResult):
            return True

        return self.to_dict() != other.to_dict()

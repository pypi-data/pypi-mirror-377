# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Component(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'RevisionId': 'str',
        'ComponentId': 'str',
        'PartId': 'str',
        'TypeComponent': 'str',
        'Name': 'str',
        'BatchNumber': 'str',
        'ExpirationDateUtc': 'datetime',
        'InitialDistance': 'float',
        'InitialTime': 'int',
        'AccidentDamaged': 'bool',
        'Status': 'str',
        'IssuesHumanId': 'str',
        'DistanceRun': 'float',
        'TimeRun': 'int',
        'CreationDateUtc': 'datetime',
        'Creator': 'str',
        'Department': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'ProductionDateUtc': 'datetime',
        'Weight': 'float',
        'RevisionDateUtc': 'datetime',
        'RevisionName': 'str',
        'Tags': 'str',
        'Annotation': 'str',
        'Manufacturer': 'str',
        'ManufacturerNumber': 'str',
        'UserUpdateDateUtc': 'datetime',
        'UserUpdateName': 'str',
        'DistanceRunFactored': 'float',
        'DistanceRunPwr': 'float',
        'TimeRunPwr': 'int',
        'DistanceTotal': 'float',
        'TimeTotal': 'int',
        'DistancePwrTotal': 'float',
        'TimePwrTotal': 'int',
        'DistanceFactoredTotal': 'float',
        'HasCheckRuleAlert': 'bool',
        'EnergyRun': 'float',
        'EnergyTotal': 'float',
        'IntendedPurpose': 'str',
        'IsSpecialEquipment': 'bool',
        'SubComponentParameterBinding': 'str',
        'ManufacturerSerialNumber': 'str'
    }

    attribute_map = {
        'RevisionId': 'RevisionId',
        'ComponentId': 'ComponentId',
        'PartId': 'PartId',
        'TypeComponent': 'TypeComponent',
        'Name': 'Name',
        'BatchNumber': 'BatchNumber',
        'ExpirationDateUtc': 'ExpirationDateUtc',
        'InitialDistance': 'InitialDistance',
        'InitialTime': 'InitialTime',
        'AccidentDamaged': 'AccidentDamaged',
        'Status': 'Status',
        'IssuesHumanId': 'IssuesHumanId',
        'DistanceRun': 'DistanceRun',
        'TimeRun': 'TimeRun',
        'CreationDateUtc': 'CreationDateUtc',
        'Creator': 'Creator',
        'Department': 'Department',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'ProductionDateUtc': 'ProductionDateUtc',
        'Weight': 'Weight',
        'RevisionDateUtc': 'RevisionDateUtc',
        'RevisionName': 'RevisionName',
        'Tags': 'Tags',
        'Annotation': 'Annotation',
        'Manufacturer': 'Manufacturer',
        'ManufacturerNumber': 'ManufacturerNumber',
        'UserUpdateDateUtc': 'UserUpdateDateUtc',
        'UserUpdateName': 'UserUpdateName',
        'DistanceRunFactored': 'DistanceRunFactored',
        'DistanceRunPwr': 'DistanceRunPwr',
        'TimeRunPwr': 'TimeRunPwr',
        'DistanceTotal': 'DistanceTotal',
        'TimeTotal': 'TimeTotal',
        'DistancePwrTotal': 'DistancePwrTotal',
        'TimePwrTotal': 'TimePwrTotal',
        'DistanceFactoredTotal': 'DistanceFactoredTotal',
        'HasCheckRuleAlert': 'HasCheckRuleAlert',
        'EnergyRun': 'EnergyRun',
        'EnergyTotal': 'EnergyTotal',
        'IntendedPurpose': 'IntendedPurpose',
        'IsSpecialEquipment': 'IsSpecialEquipment',
        'SubComponentParameterBinding': 'SubComponentParameterBinding',
        'ManufacturerSerialNumber': 'ManufacturerSerialNumber'
    }

    def __init__(self, RevisionId=None, ComponentId=None, PartId=None, TypeComponent=None, Name=None, BatchNumber=None, ExpirationDateUtc=None, InitialDistance=None, InitialTime=None, AccidentDamaged=None, Status=None, IssuesHumanId=None, DistanceRun=None, TimeRun=None, CreationDateUtc=None, Creator=None, Department=None, LastUpdateDateUtc=None, LastUpdateUser=None, ProductionDateUtc=None, Weight=None, RevisionDateUtc=None, RevisionName=None, Tags=None, Annotation=None, Manufacturer=None, ManufacturerNumber=None, UserUpdateDateUtc=None, UserUpdateName=None, DistanceRunFactored=None, DistanceRunPwr=None, TimeRunPwr=None, DistanceTotal=None, TimeTotal=None, DistancePwrTotal=None, TimePwrTotal=None, DistanceFactoredTotal=None, HasCheckRuleAlert=None, EnergyRun=None, EnergyTotal=None, IntendedPurpose=None, IsSpecialEquipment=None, SubComponentParameterBinding=None, ManufacturerSerialNumber=None, _configuration=None):  # noqa: E501
        """Component - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._RevisionId = None
        self._ComponentId = None
        self._PartId = None
        self._TypeComponent = None
        self._Name = None
        self._BatchNumber = None
        self._ExpirationDateUtc = None
        self._InitialDistance = None
        self._InitialTime = None
        self._AccidentDamaged = None
        self._Status = None
        self._IssuesHumanId = None
        self._DistanceRun = None
        self._TimeRun = None
        self._CreationDateUtc = None
        self._Creator = None
        self._Department = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._ProductionDateUtc = None
        self._Weight = None
        self._RevisionDateUtc = None
        self._RevisionName = None
        self._Tags = None
        self._Annotation = None
        self._Manufacturer = None
        self._ManufacturerNumber = None
        self._UserUpdateDateUtc = None
        self._UserUpdateName = None
        self._DistanceRunFactored = None
        self._DistanceRunPwr = None
        self._TimeRunPwr = None
        self._DistanceTotal = None
        self._TimeTotal = None
        self._DistancePwrTotal = None
        self._TimePwrTotal = None
        self._DistanceFactoredTotal = None
        self._HasCheckRuleAlert = None
        self._EnergyRun = None
        self._EnergyTotal = None
        self._IntendedPurpose = None
        self._IsSpecialEquipment = None
        self._SubComponentParameterBinding = None
        self._ManufacturerSerialNumber = None
        self.discriminator = None

        self.RevisionId = RevisionId
        self.ComponentId = ComponentId
        self.PartId = PartId
        if TypeComponent is not None:
            self.TypeComponent = TypeComponent
        self.Name = Name
        if BatchNumber is not None:
            self.BatchNumber = BatchNumber
        if ExpirationDateUtc is not None:
            self.ExpirationDateUtc = ExpirationDateUtc
        if InitialDistance is not None:
            self.InitialDistance = InitialDistance
        if InitialTime is not None:
            self.InitialTime = InitialTime
        if AccidentDamaged is not None:
            self.AccidentDamaged = AccidentDamaged
        self.Status = Status
        if IssuesHumanId is not None:
            self.IssuesHumanId = IssuesHumanId
        if DistanceRun is not None:
            self.DistanceRun = DistanceRun
        if TimeRun is not None:
            self.TimeRun = TimeRun
        if CreationDateUtc is not None:
            self.CreationDateUtc = CreationDateUtc
        if Creator is not None:
            self.Creator = Creator
        self.Department = Department
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if ProductionDateUtc is not None:
            self.ProductionDateUtc = ProductionDateUtc
        if Weight is not None:
            self.Weight = Weight
        if RevisionDateUtc is not None:
            self.RevisionDateUtc = RevisionDateUtc
        if RevisionName is not None:
            self.RevisionName = RevisionName
        if Tags is not None:
            self.Tags = Tags
        if Annotation is not None:
            self.Annotation = Annotation
        if Manufacturer is not None:
            self.Manufacturer = Manufacturer
        if ManufacturerNumber is not None:
            self.ManufacturerNumber = ManufacturerNumber
        if UserUpdateDateUtc is not None:
            self.UserUpdateDateUtc = UserUpdateDateUtc
        if UserUpdateName is not None:
            self.UserUpdateName = UserUpdateName
        if DistanceRunFactored is not None:
            self.DistanceRunFactored = DistanceRunFactored
        if DistanceRunPwr is not None:
            self.DistanceRunPwr = DistanceRunPwr
        if TimeRunPwr is not None:
            self.TimeRunPwr = TimeRunPwr
        if DistanceTotal is not None:
            self.DistanceTotal = DistanceTotal
        if TimeTotal is not None:
            self.TimeTotal = TimeTotal
        if DistancePwrTotal is not None:
            self.DistancePwrTotal = DistancePwrTotal
        if TimePwrTotal is not None:
            self.TimePwrTotal = TimePwrTotal
        if DistanceFactoredTotal is not None:
            self.DistanceFactoredTotal = DistanceFactoredTotal
        if HasCheckRuleAlert is not None:
            self.HasCheckRuleAlert = HasCheckRuleAlert
        if EnergyRun is not None:
            self.EnergyRun = EnergyRun
        if EnergyTotal is not None:
            self.EnergyTotal = EnergyTotal
        if IntendedPurpose is not None:
            self.IntendedPurpose = IntendedPurpose
        if IsSpecialEquipment is not None:
            self.IsSpecialEquipment = IsSpecialEquipment
        if SubComponentParameterBinding is not None:
            self.SubComponentParameterBinding = SubComponentParameterBinding
        if ManufacturerSerialNumber is not None:
            self.ManufacturerSerialNumber = ManufacturerSerialNumber

    @property
    def RevisionId(self):
        """Gets the RevisionId of this Component.  # noqa: E501

        Component revision unique identifier.  Set the RevisionId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new component revision.  # noqa: E501

        :return: The RevisionId of this Component.  # noqa: E501
        :rtype: str
        """
        return self._RevisionId

    @RevisionId.setter
    def RevisionId(self, RevisionId):
        """Sets the RevisionId of this Component.

        Component revision unique identifier.  Set the RevisionId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new component revision.  # noqa: E501

        :param RevisionId: The RevisionId of this Component.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and RevisionId is None:
            raise ValueError("Invalid value for `RevisionId`, must not be `None`")  # noqa: E501

        self._RevisionId = RevisionId

    @property
    def ComponentId(self):
        """Gets the ComponentId of this Component.  # noqa: E501

        Component unique identifier, common to all revisions of the same component  Set the ComponentId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new component.  # noqa: E501

        :return: The ComponentId of this Component.  # noqa: E501
        :rtype: str
        """
        return self._ComponentId

    @ComponentId.setter
    def ComponentId(self, ComponentId):
        """Sets the ComponentId of this Component.

        Component unique identifier, common to all revisions of the same component  Set the ComponentId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new component.  # noqa: E501

        :param ComponentId: The ComponentId of this Component.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ComponentId is None:
            raise ValueError("Invalid value for `ComponentId`, must not be `None`")  # noqa: E501

        self._ComponentId = ComponentId

    @property
    def PartId(self):
        """Gets the PartId of this Component.  # noqa: E501

        Part id associated with the Component  # noqa: E501

        :return: The PartId of this Component.  # noqa: E501
        :rtype: str
        """
        return self._PartId

    @PartId.setter
    def PartId(self, PartId):
        """Sets the PartId of this Component.

        Part id associated with the Component  # noqa: E501

        :param PartId: The PartId of this Component.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and PartId is None:
            raise ValueError("Invalid value for `PartId`, must not be `None`")  # noqa: E501

        self._PartId = PartId

    @property
    def TypeComponent(self):
        """Gets the TypeComponent of this Component.  # noqa: E501

        Component type  # noqa: E501

        :return: The TypeComponent of this Component.  # noqa: E501
        :rtype: str
        """
        return self._TypeComponent

    @TypeComponent.setter
    def TypeComponent(self, TypeComponent):
        """Sets the TypeComponent of this Component.

        Component type  # noqa: E501

        :param TypeComponent: The TypeComponent of this Component.  # noqa: E501
        :type: str
        """
        allowed_values = ["Single", "Group"]  # noqa: E501
        if (self._configuration.client_side_validation and
                TypeComponent not in allowed_values):
            raise ValueError(
                "Invalid value for `TypeComponent` ({0}), must be one of {1}"  # noqa: E501
                .format(TypeComponent, allowed_values)
            )

        self._TypeComponent = TypeComponent

    @property
    def Name(self):
        """Gets the Name of this Component.  # noqa: E501

        Component name  # noqa: E501

        :return: The Name of this Component.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Component.

        Component name  # noqa: E501

        :param Name: The Name of this Component.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def BatchNumber(self):
        """Gets the BatchNumber of this Component.  # noqa: E501

        Component batch number  # noqa: E501

        :return: The BatchNumber of this Component.  # noqa: E501
        :rtype: str
        """
        return self._BatchNumber

    @BatchNumber.setter
    def BatchNumber(self, BatchNumber):
        """Sets the BatchNumber of this Component.

        Component batch number  # noqa: E501

        :param BatchNumber: The BatchNumber of this Component.  # noqa: E501
        :type: str
        """

        self._BatchNumber = BatchNumber

    @property
    def ExpirationDateUtc(self):
        """Gets the ExpirationDateUtc of this Component.  # noqa: E501

        Component expiry utc date  # noqa: E501

        :return: The ExpirationDateUtc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._ExpirationDateUtc

    @ExpirationDateUtc.setter
    def ExpirationDateUtc(self, ExpirationDateUtc):
        """Sets the ExpirationDateUtc of this Component.

        Component expiry utc date  # noqa: E501

        :param ExpirationDateUtc: The ExpirationDateUtc of this Component.  # noqa: E501
        :type: datetime
        """

        self._ExpirationDateUtc = ExpirationDateUtc

    @property
    def InitialDistance(self):
        """Gets the InitialDistance of this Component.  # noqa: E501

        Initial component distance  # noqa: E501

        :return: The InitialDistance of this Component.  # noqa: E501
        :rtype: float
        """
        return self._InitialDistance

    @InitialDistance.setter
    def InitialDistance(self, InitialDistance):
        """Sets the InitialDistance of this Component.

        Initial component distance  # noqa: E501

        :param InitialDistance: The InitialDistance of this Component.  # noqa: E501
        :type: float
        """

        self._InitialDistance = InitialDistance

    @property
    def InitialTime(self):
        """Gets the InitialTime of this Component.  # noqa: E501

        Initial component usage time (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :return: The InitialTime of this Component.  # noqa: E501
        :rtype: int
        """
        return self._InitialTime

    @InitialTime.setter
    def InitialTime(self, InitialTime):
        """Sets the InitialTime of this Component.

        Initial component usage time (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :param InitialTime: The InitialTime of this Component.  # noqa: E501
        :type: int
        """

        self._InitialTime = InitialTime

    @property
    def AccidentDamaged(self):
        """Gets the AccidentDamaged of this Component.  # noqa: E501

        Indicates whether the component has been involved in an accident  # noqa: E501

        :return: The AccidentDamaged of this Component.  # noqa: E501
        :rtype: bool
        """
        return self._AccidentDamaged

    @AccidentDamaged.setter
    def AccidentDamaged(self, AccidentDamaged):
        """Sets the AccidentDamaged of this Component.

        Indicates whether the component has been involved in an accident  # noqa: E501

        :param AccidentDamaged: The AccidentDamaged of this Component.  # noqa: E501
        :type: bool
        """

        self._AccidentDamaged = AccidentDamaged

    @property
    def Status(self):
        """Gets the Status of this Component.  # noqa: E501

        Component status name  # noqa: E501

        :return: The Status of this Component.  # noqa: E501
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        """Sets the Status of this Component.

        Component status name  # noqa: E501

        :param Status: The Status of this Component.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Status is None:
            raise ValueError("Invalid value for `Status`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Status is not None and len(Status) < 1):
            raise ValueError("Invalid value for `Status`, length must be greater than or equal to `1`")  # noqa: E501

        self._Status = Status

    @property
    def IssuesHumanId(self):
        """Gets the IssuesHumanId of this Component.  # noqa: E501

        Component associated issues HumanId.  Each HumanId must be separated by a semicolon.  Valid characters allowed are: literals, numbers, underscore and semicolon  # noqa: E501

        :return: The IssuesHumanId of this Component.  # noqa: E501
        :rtype: str
        """
        return self._IssuesHumanId

    @IssuesHumanId.setter
    def IssuesHumanId(self, IssuesHumanId):
        """Sets the IssuesHumanId of this Component.

        Component associated issues HumanId.  Each HumanId must be separated by a semicolon.  Valid characters allowed are: literals, numbers, underscore and semicolon  # noqa: E501

        :param IssuesHumanId: The IssuesHumanId of this Component.  # noqa: E501
        :type: str
        """

        self._IssuesHumanId = IssuesHumanId

    @property
    def DistanceRun(self):
        """Gets the DistanceRun of this Component.  # noqa: E501

        Distance covered by the component  # noqa: E501

        :return: The DistanceRun of this Component.  # noqa: E501
        :rtype: float
        """
        return self._DistanceRun

    @DistanceRun.setter
    def DistanceRun(self, DistanceRun):
        """Sets the DistanceRun of this Component.

        Distance covered by the component  # noqa: E501

        :param DistanceRun: The DistanceRun of this Component.  # noqa: E501
        :type: float
        """

        self._DistanceRun = DistanceRun

    @property
    def TimeRun(self):
        """Gets the TimeRun of this Component.  # noqa: E501

        Total component useful life (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :return: The TimeRun of this Component.  # noqa: E501
        :rtype: int
        """
        return self._TimeRun

    @TimeRun.setter
    def TimeRun(self, TimeRun):
        """Sets the TimeRun of this Component.

        Total component useful life (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :param TimeRun: The TimeRun of this Component.  # noqa: E501
        :type: int
        """

        self._TimeRun = TimeRun

    @property
    def CreationDateUtc(self):
        """Gets the CreationDateUtc of this Component.  # noqa: E501

        Component creation utc date  # noqa: E501

        :return: The CreationDateUtc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._CreationDateUtc

    @CreationDateUtc.setter
    def CreationDateUtc(self, CreationDateUtc):
        """Sets the CreationDateUtc of this Component.

        Component creation utc date  # noqa: E501

        :param CreationDateUtc: The CreationDateUtc of this Component.  # noqa: E501
        :type: datetime
        """

        self._CreationDateUtc = CreationDateUtc

    @property
    def Creator(self):
        """Gets the Creator of this Component.  # noqa: E501

        Component creator username  # noqa: E501

        :return: The Creator of this Component.  # noqa: E501
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        """Sets the Creator of this Component.

        Component creator username  # noqa: E501

        :param Creator: The Creator of this Component.  # noqa: E501
        :type: str
        """

        self._Creator = Creator

    @property
    def Department(self):
        """Gets the Department of this Component.  # noqa: E501

        Department name to which the component belongs  # noqa: E501

        :return: The Department of this Component.  # noqa: E501
        :rtype: str
        """
        return self._Department

    @Department.setter
    def Department(self, Department):
        """Sets the Department of this Component.

        Department name to which the component belongs  # noqa: E501

        :param Department: The Department of this Component.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Department is None:
            raise ValueError("Invalid value for `Department`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Department is not None and len(Department) < 1):
            raise ValueError("Invalid value for `Department`, length must be greater than or equal to `1`")  # noqa: E501

        self._Department = Department

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Component.  # noqa: E501

        Component last update utc date  # noqa: E501

        :return: The LastUpdateDateUtc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Component.

        Component last update utc date  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Component.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Component.  # noqa: E501

        The name of the user who performed the last update on the component  # noqa: E501

        :return: The LastUpdateUser of this Component.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Component.

        The name of the user who performed the last update on the component  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Component.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def ProductionDateUtc(self):
        """Gets the ProductionDateUtc of this Component.  # noqa: E501

        Component production utc date  # noqa: E501

        :return: The ProductionDateUtc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._ProductionDateUtc

    @ProductionDateUtc.setter
    def ProductionDateUtc(self, ProductionDateUtc):
        """Sets the ProductionDateUtc of this Component.

        Component production utc date  # noqa: E501

        :param ProductionDateUtc: The ProductionDateUtc of this Component.  # noqa: E501
        :type: datetime
        """

        self._ProductionDateUtc = ProductionDateUtc

    @property
    def Weight(self):
        """Gets the Weight of this Component.  # noqa: E501

        Component weight  # noqa: E501

        :return: The Weight of this Component.  # noqa: E501
        :rtype: float
        """
        return self._Weight

    @Weight.setter
    def Weight(self, Weight):
        """Sets the Weight of this Component.

        Component weight  # noqa: E501

        :param Weight: The Weight of this Component.  # noqa: E501
        :type: float
        """

        self._Weight = Weight

    @property
    def RevisionDateUtc(self):
        """Gets the RevisionDateUtc of this Component.  # noqa: E501

        Component revision utc date  # noqa: E501

        :return: The RevisionDateUtc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._RevisionDateUtc

    @RevisionDateUtc.setter
    def RevisionDateUtc(self, RevisionDateUtc):
        """Sets the RevisionDateUtc of this Component.

        Component revision utc date  # noqa: E501

        :param RevisionDateUtc: The RevisionDateUtc of this Component.  # noqa: E501
        :type: datetime
        """

        self._RevisionDateUtc = RevisionDateUtc

    @property
    def RevisionName(self):
        """Gets the RevisionName of this Component.  # noqa: E501

        Component revison name  # noqa: E501

        :return: The RevisionName of this Component.  # noqa: E501
        :rtype: str
        """
        return self._RevisionName

    @RevisionName.setter
    def RevisionName(self, RevisionName):
        """Sets the RevisionName of this Component.

        Component revison name  # noqa: E501

        :param RevisionName: The RevisionName of this Component.  # noqa: E501
        :type: str
        """

        self._RevisionName = RevisionName

    @property
    def Tags(self):
        """Gets the Tags of this Component.  # noqa: E501

        Component tags. Each tag must be separated by a semicolon.  Valid characters allowed are: literals, numbers, underscore and semicolon  # noqa: E501

        :return: The Tags of this Component.  # noqa: E501
        :rtype: str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        """Sets the Tags of this Component.

        Component tags. Each tag must be separated by a semicolon.  Valid characters allowed are: literals, numbers, underscore and semicolon  # noqa: E501

        :param Tags: The Tags of this Component.  # noqa: E501
        :type: str
        """

        self._Tags = Tags

    @property
    def Annotation(self):
        """Gets the Annotation of this Component.  # noqa: E501

        Comments associated with the component  # noqa: E501

        :return: The Annotation of this Component.  # noqa: E501
        :rtype: str
        """
        return self._Annotation

    @Annotation.setter
    def Annotation(self, Annotation):
        """Sets the Annotation of this Component.

        Comments associated with the component  # noqa: E501

        :param Annotation: The Annotation of this Component.  # noqa: E501
        :type: str
        """

        self._Annotation = Annotation

    @property
    def Manufacturer(self):
        """Gets the Manufacturer of this Component.  # noqa: E501

        Component manufacturer name (if any)  # noqa: E501

        :return: The Manufacturer of this Component.  # noqa: E501
        :rtype: str
        """
        return self._Manufacturer

    @Manufacturer.setter
    def Manufacturer(self, Manufacturer):
        """Sets the Manufacturer of this Component.

        Component manufacturer name (if any)  # noqa: E501

        :param Manufacturer: The Manufacturer of this Component.  # noqa: E501
        :type: str
        """

        self._Manufacturer = Manufacturer

    @property
    def ManufacturerNumber(self):
        """Gets the ManufacturerNumber of this Component.  # noqa: E501

        Component manufacturer number (if any)  # noqa: E501

        :return: The ManufacturerNumber of this Component.  # noqa: E501
        :rtype: str
        """
        return self._ManufacturerNumber

    @ManufacturerNumber.setter
    def ManufacturerNumber(self, ManufacturerNumber):
        """Sets the ManufacturerNumber of this Component.

        Component manufacturer number (if any)  # noqa: E501

        :param ManufacturerNumber: The ManufacturerNumber of this Component.  # noqa: E501
        :type: str
        """

        self._ManufacturerNumber = ManufacturerNumber

    @property
    def UserUpdateDateUtc(self):
        """Gets the UserUpdateDateUtc of this Component.  # noqa: E501

        Date utc of the last \"user update\"  # noqa: E501

        :return: The UserUpdateDateUtc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._UserUpdateDateUtc

    @UserUpdateDateUtc.setter
    def UserUpdateDateUtc(self, UserUpdateDateUtc):
        """Sets the UserUpdateDateUtc of this Component.

        Date utc of the last \"user update\"  # noqa: E501

        :param UserUpdateDateUtc: The UserUpdateDateUtc of this Component.  # noqa: E501
        :type: datetime
        """

        self._UserUpdateDateUtc = UserUpdateDateUtc

    @property
    def UserUpdateName(self):
        """Gets the UserUpdateName of this Component.  # noqa: E501

        The name of the user who made the last \"user update\"  # noqa: E501

        :return: The UserUpdateName of this Component.  # noqa: E501
        :rtype: str
        """
        return self._UserUpdateName

    @UserUpdateName.setter
    def UserUpdateName(self, UserUpdateName):
        """Sets the UserUpdateName of this Component.

        The name of the user who made the last \"user update\"  # noqa: E501

        :param UserUpdateName: The UserUpdateName of this Component.  # noqa: E501
        :type: str
        """

        self._UserUpdateName = UserUpdateName

    @property
    def DistanceRunFactored(self):
        """Gets the DistanceRunFactored of this Component.  # noqa: E501

        Factored run distance  # noqa: E501

        :return: The DistanceRunFactored of this Component.  # noqa: E501
        :rtype: float
        """
        return self._DistanceRunFactored

    @DistanceRunFactored.setter
    def DistanceRunFactored(self, DistanceRunFactored):
        """Sets the DistanceRunFactored of this Component.

        Factored run distance  # noqa: E501

        :param DistanceRunFactored: The DistanceRunFactored of this Component.  # noqa: E501
        :type: float
        """

        self._DistanceRunFactored = DistanceRunFactored

    @property
    def DistanceRunPwr(self):
        """Gets the DistanceRunPwr of this Component.  # noqa: E501

        Powered run distance  # noqa: E501

        :return: The DistanceRunPwr of this Component.  # noqa: E501
        :rtype: float
        """
        return self._DistanceRunPwr

    @DistanceRunPwr.setter
    def DistanceRunPwr(self, DistanceRunPwr):
        """Sets the DistanceRunPwr of this Component.

        Powered run distance  # noqa: E501

        :param DistanceRunPwr: The DistanceRunPwr of this Component.  # noqa: E501
        :type: float
        """

        self._DistanceRunPwr = DistanceRunPwr

    @property
    def TimeRunPwr(self):
        """Gets the TimeRunPwr of this Component.  # noqa: E501

        Powered run time (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :return: The TimeRunPwr of this Component.  # noqa: E501
        :rtype: int
        """
        return self._TimeRunPwr

    @TimeRunPwr.setter
    def TimeRunPwr(self, TimeRunPwr):
        """Sets the TimeRunPwr of this Component.

        Powered run time (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :param TimeRunPwr: The TimeRunPwr of this Component.  # noqa: E501
        :type: int
        """

        self._TimeRunPwr = TimeRunPwr

    @property
    def DistanceTotal(self):
        """Gets the DistanceTotal of this Component.  # noqa: E501

        Total distance for all revisions of a component  # noqa: E501

        :return: The DistanceTotal of this Component.  # noqa: E501
        :rtype: float
        """
        return self._DistanceTotal

    @DistanceTotal.setter
    def DistanceTotal(self, DistanceTotal):
        """Sets the DistanceTotal of this Component.

        Total distance for all revisions of a component  # noqa: E501

        :param DistanceTotal: The DistanceTotal of this Component.  # noqa: E501
        :type: float
        """

        self._DistanceTotal = DistanceTotal

    @property
    def TimeTotal(self):
        """Gets the TimeTotal of this Component.  # noqa: E501

        Total duration of all revisions of a component (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :return: The TimeTotal of this Component.  # noqa: E501
        :rtype: int
        """
        return self._TimeTotal

    @TimeTotal.setter
    def TimeTotal(self, TimeTotal):
        """Sets the TimeTotal of this Component.

        Total duration of all revisions of a component (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :param TimeTotal: The TimeTotal of this Component.  # noqa: E501
        :type: int
        """

        self._TimeTotal = TimeTotal

    @property
    def DistancePwrTotal(self):
        """Gets the DistancePwrTotal of this Component.  # noqa: E501

        The total powered distance for all revisions of a component  # noqa: E501

        :return: The DistancePwrTotal of this Component.  # noqa: E501
        :rtype: float
        """
        return self._DistancePwrTotal

    @DistancePwrTotal.setter
    def DistancePwrTotal(self, DistancePwrTotal):
        """Sets the DistancePwrTotal of this Component.

        The total powered distance for all revisions of a component  # noqa: E501

        :param DistancePwrTotal: The DistancePwrTotal of this Component.  # noqa: E501
        :type: float
        """

        self._DistancePwrTotal = DistancePwrTotal

    @property
    def TimePwrTotal(self):
        """Gets the TimePwrTotal of this Component.  # noqa: E501

        Total powered time for all revisions of a component (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :return: The TimePwrTotal of this Component.  # noqa: E501
        :rtype: int
        """
        return self._TimePwrTotal

    @TimePwrTotal.setter
    def TimePwrTotal(self, TimePwrTotal):
        """Sets the TimePwrTotal of this Component.

        Total powered time for all revisions of a component (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :param TimePwrTotal: The TimePwrTotal of this Component.  # noqa: E501
        :type: int
        """

        self._TimePwrTotal = TimePwrTotal

    @property
    def DistanceFactoredTotal(self):
        """Gets the DistanceFactoredTotal of this Component.  # noqa: E501

        Total factored distance for all revisions of a component  # noqa: E501

        :return: The DistanceFactoredTotal of this Component.  # noqa: E501
        :rtype: float
        """
        return self._DistanceFactoredTotal

    @DistanceFactoredTotal.setter
    def DistanceFactoredTotal(self, DistanceFactoredTotal):
        """Sets the DistanceFactoredTotal of this Component.

        Total factored distance for all revisions of a component  # noqa: E501

        :param DistanceFactoredTotal: The DistanceFactoredTotal of this Component.  # noqa: E501
        :type: float
        """

        self._DistanceFactoredTotal = DistanceFactoredTotal

    @property
    def HasCheckRuleAlert(self):
        """Gets the HasCheckRuleAlert of this Component.  # noqa: E501

        Indicates whether there are any checkRule overruns on the component revision  # noqa: E501

        :return: The HasCheckRuleAlert of this Component.  # noqa: E501
        :rtype: bool
        """
        return self._HasCheckRuleAlert

    @HasCheckRuleAlert.setter
    def HasCheckRuleAlert(self, HasCheckRuleAlert):
        """Sets the HasCheckRuleAlert of this Component.

        Indicates whether there are any checkRule overruns on the component revision  # noqa: E501

        :param HasCheckRuleAlert: The HasCheckRuleAlert of this Component.  # noqa: E501
        :type: bool
        """

        self._HasCheckRuleAlert = HasCheckRuleAlert

    @property
    def EnergyRun(self):
        """Gets the EnergyRun of this Component.  # noqa: E501

        Component revision energy  # noqa: E501

        :return: The EnergyRun of this Component.  # noqa: E501
        :rtype: float
        """
        return self._EnergyRun

    @EnergyRun.setter
    def EnergyRun(self, EnergyRun):
        """Sets the EnergyRun of this Component.

        Component revision energy  # noqa: E501

        :param EnergyRun: The EnergyRun of this Component.  # noqa: E501
        :type: float
        """

        self._EnergyRun = EnergyRun

    @property
    def EnergyTotal(self):
        """Gets the EnergyTotal of this Component.  # noqa: E501

        Total energy for all revisions of a component  # noqa: E501

        :return: The EnergyTotal of this Component.  # noqa: E501
        :rtype: float
        """
        return self._EnergyTotal

    @EnergyTotal.setter
    def EnergyTotal(self, EnergyTotal):
        """Sets the EnergyTotal of this Component.

        Total energy for all revisions of a component  # noqa: E501

        :param EnergyTotal: The EnergyTotal of this Component.  # noqa: E501
        :type: float
        """

        self._EnergyTotal = EnergyTotal

    @property
    def IntendedPurpose(self):
        """Gets the IntendedPurpose of this Component.  # noqa: E501

        Sensor database Intended Purpose  # noqa: E501

        :return: The IntendedPurpose of this Component.  # noqa: E501
        :rtype: str
        """
        return self._IntendedPurpose

    @IntendedPurpose.setter
    def IntendedPurpose(self, IntendedPurpose):
        """Sets the IntendedPurpose of this Component.

        Sensor database Intended Purpose  # noqa: E501

        :param IntendedPurpose: The IntendedPurpose of this Component.  # noqa: E501
        :type: str
        """

        self._IntendedPurpose = IntendedPurpose

    @property
    def IsSpecialEquipment(self):
        """Gets the IsSpecialEquipment of this Component.  # noqa: E501

        Sensor database Is Special Equipment  # noqa: E501

        :return: The IsSpecialEquipment of this Component.  # noqa: E501
        :rtype: bool
        """
        return self._IsSpecialEquipment

    @IsSpecialEquipment.setter
    def IsSpecialEquipment(self, IsSpecialEquipment):
        """Sets the IsSpecialEquipment of this Component.

        Sensor database Is Special Equipment  # noqa: E501

        :param IsSpecialEquipment: The IsSpecialEquipment of this Component.  # noqa: E501
        :type: bool
        """

        self._IsSpecialEquipment = IsSpecialEquipment

    @property
    def SubComponentParameterBinding(self):
        """Gets the SubComponentParameterBinding of this Component.  # noqa: E501

        The sensor parameter binding specified on the sub component.  This field is only filled when calling the route:  component/{componentId}/revision/{revisionId}/content  # noqa: E501

        :return: The SubComponentParameterBinding of this Component.  # noqa: E501
        :rtype: str
        """
        return self._SubComponentParameterBinding

    @SubComponentParameterBinding.setter
    def SubComponentParameterBinding(self, SubComponentParameterBinding):
        """Sets the SubComponentParameterBinding of this Component.

        The sensor parameter binding specified on the sub component.  This field is only filled when calling the route:  component/{componentId}/revision/{revisionId}/content  # noqa: E501

        :param SubComponentParameterBinding: The SubComponentParameterBinding of this Component.  # noqa: E501
        :type: str
        """

        self._SubComponentParameterBinding = SubComponentParameterBinding

    @property
    def ManufacturerSerialNumber(self):
        """Gets the ManufacturerSerialNumber of this Component.  # noqa: E501

        The manufacturer serial number. Allows you to store your  own manufacturer number.  # noqa: E501

        :return: The ManufacturerSerialNumber of this Component.  # noqa: E501
        :rtype: str
        """
        return self._ManufacturerSerialNumber

    @ManufacturerSerialNumber.setter
    def ManufacturerSerialNumber(self, ManufacturerSerialNumber):
        """Sets the ManufacturerSerialNumber of this Component.

        The manufacturer serial number. Allows you to store your  own manufacturer number.  # noqa: E501

        :param ManufacturerSerialNumber: The ManufacturerSerialNumber of this Component.  # noqa: E501
        :type: str
        """

        self._ManufacturerSerialNumber = ManufacturerSerialNumber

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Component, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Component):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Component):
            return True

        return self.to_dict() != other.to_dict()

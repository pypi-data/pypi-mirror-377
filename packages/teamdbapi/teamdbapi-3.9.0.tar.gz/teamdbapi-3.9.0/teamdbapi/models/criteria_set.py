# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class CriteriaSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'Criteria': 'list[str]'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'Criteria': 'Criteria'
    }

    def __init__(self, Id=None, Name=None, LastUpdateDateUtc=None, LastUpdateUser=None, Criteria=None, _configuration=None):  # noqa: E501
        """CriteriaSet - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._Criteria = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if Criteria is not None:
            self.Criteria = Criteria

    @property
    def Id(self):
        """Gets the Id of this CriteriaSet.  # noqa: E501

        Id du criteria set  Leave Id empty (00000000-0000-0000-0000-000000000000) to create a new criteria  # noqa: E501

        :return: The Id of this CriteriaSet.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this CriteriaSet.

        Id du criteria set  Leave Id empty (00000000-0000-0000-0000-000000000000) to create a new criteria  # noqa: E501

        :param Id: The Id of this CriteriaSet.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this CriteriaSet.  # noqa: E501

        Libellé du criteria set  # noqa: E501

        :return: The Name of this CriteriaSet.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this CriteriaSet.

        Libellé du criteria set  # noqa: E501

        :param Name: The Name of this CriteriaSet.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this CriteriaSet.  # noqa: E501

        Last update date utc  LastUpdateDateUtc will be automatically set  # noqa: E501

        :return: The LastUpdateDateUtc of this CriteriaSet.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this CriteriaSet.

        Last update date utc  LastUpdateDateUtc will be automatically set  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this CriteriaSet.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this CriteriaSet.  # noqa: E501

        Last update user  LastUpdateUser will be automatically set  # noqa: E501

        :return: The LastUpdateUser of this CriteriaSet.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this CriteriaSet.

        Last update user  LastUpdateUser will be automatically set  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this CriteriaSet.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def Criteria(self):
        """Gets the Criteria of this CriteriaSet.  # noqa: E501

        The criteria Id associated with the Criteria set  # noqa: E501

        :return: The Criteria of this CriteriaSet.  # noqa: E501
        :rtype: list[str]
        """
        return self._Criteria

    @Criteria.setter
    def Criteria(self, Criteria):
        """Sets the Criteria of this CriteriaSet.

        The criteria Id associated with the Criteria set  # noqa: E501

        :param Criteria: The Criteria of this CriteriaSet.  # noqa: E501
        :type: list[str]
        """

        self._Criteria = Criteria

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CriteriaSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CriteriaSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CriteriaSet):
            return True

        return self.to_dict() != other.to_dict()

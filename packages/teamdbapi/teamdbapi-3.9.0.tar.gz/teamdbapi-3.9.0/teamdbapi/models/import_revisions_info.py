# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class ImportRevisionsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'RevisionId': 'str',
        'ParameterId': 'str',
        'ParameterName': 'str',
        'IsNewRevision': 'bool'
    }

    attribute_map = {
        'RevisionId': 'RevisionId',
        'ParameterId': 'ParameterId',
        'ParameterName': 'ParameterName',
        'IsNewRevision': 'IsNewRevision'
    }

    def __init__(self, RevisionId=None, ParameterId=None, ParameterName=None, IsNewRevision=None, _configuration=None):  # noqa: E501
        """ImportRevisionsInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._RevisionId = None
        self._ParameterId = None
        self._ParameterName = None
        self._IsNewRevision = None
        self.discriminator = None

        if RevisionId is not None:
            self.RevisionId = RevisionId
        if ParameterId is not None:
            self.ParameterId = ParameterId
        if ParameterName is not None:
            self.ParameterName = ParameterName
        if IsNewRevision is not None:
            self.IsNewRevision = IsNewRevision

    @property
    def RevisionId(self):
        """Gets the RevisionId of this ImportRevisionsInfo.  # noqa: E501

        The revision Id  # noqa: E501

        :return: The RevisionId of this ImportRevisionsInfo.  # noqa: E501
        :rtype: str
        """
        return self._RevisionId

    @RevisionId.setter
    def RevisionId(self, RevisionId):
        """Sets the RevisionId of this ImportRevisionsInfo.

        The revision Id  # noqa: E501

        :param RevisionId: The RevisionId of this ImportRevisionsInfo.  # noqa: E501
        :type: str
        """

        self._RevisionId = RevisionId

    @property
    def ParameterId(self):
        """Gets the ParameterId of this ImportRevisionsInfo.  # noqa: E501

        The revision parameter id  # noqa: E501

        :return: The ParameterId of this ImportRevisionsInfo.  # noqa: E501
        :rtype: str
        """
        return self._ParameterId

    @ParameterId.setter
    def ParameterId(self, ParameterId):
        """Sets the ParameterId of this ImportRevisionsInfo.

        The revision parameter id  # noqa: E501

        :param ParameterId: The ParameterId of this ImportRevisionsInfo.  # noqa: E501
        :type: str
        """

        self._ParameterId = ParameterId

    @property
    def ParameterName(self):
        """Gets the ParameterName of this ImportRevisionsInfo.  # noqa: E501

        The revision parameter name  # noqa: E501

        :return: The ParameterName of this ImportRevisionsInfo.  # noqa: E501
        :rtype: str
        """
        return self._ParameterName

    @ParameterName.setter
    def ParameterName(self, ParameterName):
        """Sets the ParameterName of this ImportRevisionsInfo.

        The revision parameter name  # noqa: E501

        :param ParameterName: The ParameterName of this ImportRevisionsInfo.  # noqa: E501
        :type: str
        """

        self._ParameterName = ParameterName

    @property
    def IsNewRevision(self):
        """Gets the IsNewRevision of this ImportRevisionsInfo.  # noqa: E501

        True when the revision has been created during the import.  If false, the revision already existed.  # noqa: E501

        :return: The IsNewRevision of this ImportRevisionsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._IsNewRevision

    @IsNewRevision.setter
    def IsNewRevision(self, IsNewRevision):
        """Sets the IsNewRevision of this ImportRevisionsInfo.

        True when the revision has been created during the import.  If false, the revision already existed.  # noqa: E501

        :param IsNewRevision: The IsNewRevision of this ImportRevisionsInfo.  # noqa: E501
        :type: bool
        """

        self._IsNewRevision = IsNewRevision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportRevisionsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportRevisionsInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportRevisionsInfo):
            return True

        return self.to_dict() != other.to_dict()

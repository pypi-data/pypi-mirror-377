# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Issue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'IssueId': 'str',
        'HumanId': 'str',
        'Priority': 'IssuePriority',
        'Summary': 'str',
        'RichDescription': 'str',
        'CreatorName': 'str',
        'UpdatorName': 'str',
        'Type': 'IssueType',
        'CreationDate': 'datetime',
        'UpdatedDate': 'datetime',
        'EventId': 'str',
        'CarId': 'str',
        'SessionId': 'str',
        'RunId': 'str',
        'LapId': 'str',
        'Project': 'IssueProject',
        'Status': 'IssueStatus',
        'OwnerName': 'str',
        'Sector': 'IssueSector',
        'Occurrence': 'int',
        'CustomFields': 'list[IssueCustomFieldValue]'
    }

    attribute_map = {
        'IssueId': 'IssueId',
        'HumanId': 'HumanId',
        'Priority': 'Priority',
        'Summary': 'Summary',
        'RichDescription': 'RichDescription',
        'CreatorName': 'CreatorName',
        'UpdatorName': 'UpdatorName',
        'Type': 'Type',
        'CreationDate': 'CreationDate',
        'UpdatedDate': 'UpdatedDate',
        'EventId': 'EventId',
        'CarId': 'CarId',
        'SessionId': 'SessionId',
        'RunId': 'RunId',
        'LapId': 'LapId',
        'Project': 'Project',
        'Status': 'Status',
        'OwnerName': 'OwnerName',
        'Sector': 'Sector',
        'Occurrence': 'Occurrence',
        'CustomFields': 'CustomFields'
    }

    def __init__(self, IssueId=None, HumanId=None, Priority=None, Summary=None, RichDescription=None, CreatorName=None, UpdatorName=None, Type=None, CreationDate=None, UpdatedDate=None, EventId=None, CarId=None, SessionId=None, RunId=None, LapId=None, Project=None, Status=None, OwnerName=None, Sector=None, Occurrence=None, CustomFields=None, _configuration=None):  # noqa: E501
        """Issue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._IssueId = None
        self._HumanId = None
        self._Priority = None
        self._Summary = None
        self._RichDescription = None
        self._CreatorName = None
        self._UpdatorName = None
        self._Type = None
        self._CreationDate = None
        self._UpdatedDate = None
        self._EventId = None
        self._CarId = None
        self._SessionId = None
        self._RunId = None
        self._LapId = None
        self._Project = None
        self._Status = None
        self._OwnerName = None
        self._Sector = None
        self._Occurrence = None
        self._CustomFields = None
        self.discriminator = None

        self.IssueId = IssueId
        if HumanId is not None:
            self.HumanId = HumanId
        self.Priority = Priority
        if Summary is not None:
            self.Summary = Summary
        if RichDescription is not None:
            self.RichDescription = RichDescription
        if CreatorName is not None:
            self.CreatorName = CreatorName
        if UpdatorName is not None:
            self.UpdatorName = UpdatorName
        self.Type = Type
        if CreationDate is not None:
            self.CreationDate = CreationDate
        if UpdatedDate is not None:
            self.UpdatedDate = UpdatedDate
        if EventId is not None:
            self.EventId = EventId
        if CarId is not None:
            self.CarId = CarId
        if SessionId is not None:
            self.SessionId = SessionId
        if RunId is not None:
            self.RunId = RunId
        if LapId is not None:
            self.LapId = LapId
        self.Project = Project
        self.Status = Status
        if OwnerName is not None:
            self.OwnerName = OwnerName
        if Sector is not None:
            self.Sector = Sector
        if Occurrence is not None:
            self.Occurrence = Occurrence
        if CustomFields is not None:
            self.CustomFields = CustomFields

    @property
    def IssueId(self):
        """Gets the IssueId of this Issue.  # noqa: E501

        Unique identifier of the Issue  Set the IssueId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Issue.  # noqa: E501

        :return: The IssueId of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._IssueId

    @IssueId.setter
    def IssueId(self, IssueId):
        """Sets the IssueId of this Issue.

        Unique identifier of the Issue  Set the IssueId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Issue.  # noqa: E501

        :param IssueId: The IssueId of this Issue.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and IssueId is None:
            raise ValueError("Invalid value for `IssueId`, must not be `None`")  # noqa: E501

        self._IssueId = IssueId

    @property
    def HumanId(self):
        """Gets the HumanId of this Issue.  # noqa: E501

        Human-readable identifier  # noqa: E501

        :return: The HumanId of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._HumanId

    @HumanId.setter
    def HumanId(self, HumanId):
        """Sets the HumanId of this Issue.

        Human-readable identifier  # noqa: E501

        :param HumanId: The HumanId of this Issue.  # noqa: E501
        :type: str
        """

        self._HumanId = HumanId

    @property
    def Priority(self):
        """Gets the Priority of this Issue.  # noqa: E501


        :return: The Priority of this Issue.  # noqa: E501
        :rtype: IssuePriority
        """
        return self._Priority

    @Priority.setter
    def Priority(self, Priority):
        """Sets the Priority of this Issue.


        :param Priority: The Priority of this Issue.  # noqa: E501
        :type: IssuePriority
        """
        if self._configuration.client_side_validation and Priority is None:
            raise ValueError("Invalid value for `Priority`, must not be `None`")  # noqa: E501

        self._Priority = Priority

    @property
    def Summary(self):
        """Gets the Summary of this Issue.  # noqa: E501

        Summary of the Issue  # noqa: E501

        :return: The Summary of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._Summary

    @Summary.setter
    def Summary(self, Summary):
        """Sets the Summary of this Issue.

        Summary of the Issue  # noqa: E501

        :param Summary: The Summary of this Issue.  # noqa: E501
        :type: str
        """

        self._Summary = Summary

    @property
    def RichDescription(self):
        """Gets the RichDescription of this Issue.  # noqa: E501

        Description of the Issue  # noqa: E501

        :return: The RichDescription of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._RichDescription

    @RichDescription.setter
    def RichDescription(self, RichDescription):
        """Sets the RichDescription of this Issue.

        Description of the Issue  # noqa: E501

        :param RichDescription: The RichDescription of this Issue.  # noqa: E501
        :type: str
        """

        self._RichDescription = RichDescription

    @property
    def CreatorName(self):
        """Gets the CreatorName of this Issue.  # noqa: E501

        Issue creator  # noqa: E501

        :return: The CreatorName of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._CreatorName

    @CreatorName.setter
    def CreatorName(self, CreatorName):
        """Sets the CreatorName of this Issue.

        Issue creator  # noqa: E501

        :param CreatorName: The CreatorName of this Issue.  # noqa: E501
        :type: str
        """

        self._CreatorName = CreatorName

    @property
    def UpdatorName(self):
        """Gets the UpdatorName of this Issue.  # noqa: E501

        Name of last user to modify Issue  # noqa: E501

        :return: The UpdatorName of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._UpdatorName

    @UpdatorName.setter
    def UpdatorName(self, UpdatorName):
        """Sets the UpdatorName of this Issue.

        Name of last user to modify Issue  # noqa: E501

        :param UpdatorName: The UpdatorName of this Issue.  # noqa: E501
        :type: str
        """

        self._UpdatorName = UpdatorName

    @property
    def Type(self):
        """Gets the Type of this Issue.  # noqa: E501


        :return: The Type of this Issue.  # noqa: E501
        :rtype: IssueType
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        """Sets the Type of this Issue.


        :param Type: The Type of this Issue.  # noqa: E501
        :type: IssueType
        """
        if self._configuration.client_side_validation and Type is None:
            raise ValueError("Invalid value for `Type`, must not be `None`")  # noqa: E501

        self._Type = Type

    @property
    def CreationDate(self):
        """Gets the CreationDate of this Issue.  # noqa: E501

        Issue creation date  # noqa: E501

        :return: The CreationDate of this Issue.  # noqa: E501
        :rtype: datetime
        """
        return self._CreationDate

    @CreationDate.setter
    def CreationDate(self, CreationDate):
        """Sets the CreationDate of this Issue.

        Issue creation date  # noqa: E501

        :param CreationDate: The CreationDate of this Issue.  # noqa: E501
        :type: datetime
        """

        self._CreationDate = CreationDate

    @property
    def UpdatedDate(self):
        """Gets the UpdatedDate of this Issue.  # noqa: E501

        Date of last Issue update  # noqa: E501

        :return: The UpdatedDate of this Issue.  # noqa: E501
        :rtype: datetime
        """
        return self._UpdatedDate

    @UpdatedDate.setter
    def UpdatedDate(self, UpdatedDate):
        """Sets the UpdatedDate of this Issue.

        Date of last Issue update  # noqa: E501

        :param UpdatedDate: The UpdatedDate of this Issue.  # noqa: E501
        :type: datetime
        """

        self._UpdatedDate = UpdatedDate

    @property
    def EventId(self):
        """Gets the EventId of this Issue.  # noqa: E501

        Potential Event identifier  # noqa: E501

        :return: The EventId of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        """Sets the EventId of this Issue.

        Potential Event identifier  # noqa: E501

        :param EventId: The EventId of this Issue.  # noqa: E501
        :type: str
        """

        self._EventId = EventId

    @property
    def CarId(self):
        """Gets the CarId of this Issue.  # noqa: E501

        Potential Car identifier  # noqa: E501

        :return: The CarId of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._CarId

    @CarId.setter
    def CarId(self, CarId):
        """Sets the CarId of this Issue.

        Potential Car identifier  # noqa: E501

        :param CarId: The CarId of this Issue.  # noqa: E501
        :type: str
        """

        self._CarId = CarId

    @property
    def SessionId(self):
        """Gets the SessionId of this Issue.  # noqa: E501

        Potential Session identifier  # noqa: E501

        :return: The SessionId of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._SessionId

    @SessionId.setter
    def SessionId(self, SessionId):
        """Sets the SessionId of this Issue.

        Potential Session identifier  # noqa: E501

        :param SessionId: The SessionId of this Issue.  # noqa: E501
        :type: str
        """

        self._SessionId = SessionId

    @property
    def RunId(self):
        """Gets the RunId of this Issue.  # noqa: E501

        Potential Run identifier  # noqa: E501

        :return: The RunId of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._RunId

    @RunId.setter
    def RunId(self, RunId):
        """Sets the RunId of this Issue.

        Potential Run identifier  # noqa: E501

        :param RunId: The RunId of this Issue.  # noqa: E501
        :type: str
        """

        self._RunId = RunId

    @property
    def LapId(self):
        """Gets the LapId of this Issue.  # noqa: E501

        Potential Lap identifier  # noqa: E501

        :return: The LapId of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._LapId

    @LapId.setter
    def LapId(self, LapId):
        """Sets the LapId of this Issue.

        Potential Lap identifier  # noqa: E501

        :param LapId: The LapId of this Issue.  # noqa: E501
        :type: str
        """

        self._LapId = LapId

    @property
    def Project(self):
        """Gets the Project of this Issue.  # noqa: E501


        :return: The Project of this Issue.  # noqa: E501
        :rtype: IssueProject
        """
        return self._Project

    @Project.setter
    def Project(self, Project):
        """Sets the Project of this Issue.


        :param Project: The Project of this Issue.  # noqa: E501
        :type: IssueProject
        """
        if self._configuration.client_side_validation and Project is None:
            raise ValueError("Invalid value for `Project`, must not be `None`")  # noqa: E501

        self._Project = Project

    @property
    def Status(self):
        """Gets the Status of this Issue.  # noqa: E501


        :return: The Status of this Issue.  # noqa: E501
        :rtype: IssueStatus
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        """Sets the Status of this Issue.


        :param Status: The Status of this Issue.  # noqa: E501
        :type: IssueStatus
        """
        if self._configuration.client_side_validation and Status is None:
            raise ValueError("Invalid value for `Status`, must not be `None`")  # noqa: E501

        self._Status = Status

    @property
    def OwnerName(self):
        """Gets the OwnerName of this Issue.  # noqa: E501

        Issue owner identifer  # noqa: E501

        :return: The OwnerName of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._OwnerName

    @OwnerName.setter
    def OwnerName(self, OwnerName):
        """Sets the OwnerName of this Issue.

        Issue owner identifer  # noqa: E501

        :param OwnerName: The OwnerName of this Issue.  # noqa: E501
        :type: str
        """

        self._OwnerName = OwnerName

    @property
    def Sector(self):
        """Gets the Sector of this Issue.  # noqa: E501


        :return: The Sector of this Issue.  # noqa: E501
        :rtype: IssueSector
        """
        return self._Sector

    @Sector.setter
    def Sector(self, Sector):
        """Sets the Sector of this Issue.


        :param Sector: The Sector of this Issue.  # noqa: E501
        :type: IssueSector
        """

        self._Sector = Sector

    @property
    def Occurrence(self):
        """Gets the Occurrence of this Issue.  # noqa: E501

        Issue occurrence  # noqa: E501

        :return: The Occurrence of this Issue.  # noqa: E501
        :rtype: int
        """
        return self._Occurrence

    @Occurrence.setter
    def Occurrence(self, Occurrence):
        """Sets the Occurrence of this Issue.

        Issue occurrence  # noqa: E501

        :param Occurrence: The Occurrence of this Issue.  # noqa: E501
        :type: int
        """

        self._Occurrence = Occurrence

    @property
    def CustomFields(self):
        """Gets the CustomFields of this Issue.  # noqa: E501

        List of custom fields for the issue  # noqa: E501

        :return: The CustomFields of this Issue.  # noqa: E501
        :rtype: list[IssueCustomFieldValue]
        """
        return self._CustomFields

    @CustomFields.setter
    def CustomFields(self, CustomFields):
        """Sets the CustomFields of this Issue.

        List of custom fields for the issue  # noqa: E501

        :param CustomFields: The CustomFields of this Issue.  # noqa: E501
        :type: list[IssueCustomFieldValue]
        """

        self._CustomFields = CustomFields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Issue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Issue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Issue):
            return True

        return self.to_dict() != other.to_dict()

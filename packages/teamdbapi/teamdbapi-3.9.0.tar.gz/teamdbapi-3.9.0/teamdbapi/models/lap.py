# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Lap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Number': 'int',
        'AbsoluteNumber': 'int',
        'Order': 'int',
        'RunId': 'str',
        'LapDate': 'datetime',
        'LapTime': 'float',
        'IsValid': 'bool',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'Revision': 'int',
        'DistanceReal': 'float',
        'TireFL_SlidingEnergy': 'float',
        'TireFR_SlidingEnergy': 'float',
        'TireRL_SlidingEnergy': 'float',
        'TireRR_SlidingEnergy': 'float',
        'DistancePower': 'float',
        'LapTimePower': 'float',
        'Energy': 'float',
        'TimeOfDay': 'str',
        'Consumption': 'float',
        'UsedInRunPlan': 'bool'
    }

    attribute_map = {
        'Id': 'Id',
        'Number': 'Number',
        'AbsoluteNumber': 'AbsoluteNumber',
        'Order': 'Order',
        'RunId': 'RunId',
        'LapDate': 'LapDate',
        'LapTime': 'LapTime',
        'IsValid': 'IsValid',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'Revision': 'Revision',
        'DistanceReal': 'DistanceReal',
        'TireFL_SlidingEnergy': 'TireFL_SlidingEnergy',
        'TireFR_SlidingEnergy': 'TireFR_SlidingEnergy',
        'TireRL_SlidingEnergy': 'TireRL_SlidingEnergy',
        'TireRR_SlidingEnergy': 'TireRR_SlidingEnergy',
        'DistancePower': 'DistancePower',
        'LapTimePower': 'LapTimePower',
        'Energy': 'Energy',
        'TimeOfDay': 'TimeOfDay',
        'Consumption': 'Consumption',
        'UsedInRunPlan': 'UsedInRunPlan'
    }

    def __init__(self, Id=None, Number=None, AbsoluteNumber=None, Order=None, RunId=None, LapDate=None, LapTime=None, IsValid=True, LastUpdateDateUtc=None, LastUpdateUser=None, Revision=None, DistanceReal=None, TireFL_SlidingEnergy=None, TireFR_SlidingEnergy=None, TireRL_SlidingEnergy=None, TireRR_SlidingEnergy=None, DistancePower=None, LapTimePower=None, Energy=None, TimeOfDay=None, Consumption=None, UsedInRunPlan=True, _configuration=None):  # noqa: E501
        """Lap - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Number = None
        self._AbsoluteNumber = None
        self._Order = None
        self._RunId = None
        self._LapDate = None
        self._LapTime = None
        self._IsValid = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._Revision = None
        self._DistanceReal = None
        self._TireFL_SlidingEnergy = None
        self._TireFR_SlidingEnergy = None
        self._TireRL_SlidingEnergy = None
        self._TireRR_SlidingEnergy = None
        self._DistancePower = None
        self._LapTimePower = None
        self._Energy = None
        self._TimeOfDay = None
        self._Consumption = None
        self._UsedInRunPlan = None
        self.discriminator = None

        self.Id = Id
        self.Number = Number
        self.AbsoluteNumber = AbsoluteNumber
        self.Order = Order
        self.RunId = RunId
        self.LapDate = LapDate
        self.LapTime = LapTime
        if IsValid is not None:
            self.IsValid = IsValid
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if Revision is not None:
            self.Revision = Revision
        if DistanceReal is not None:
            self.DistanceReal = DistanceReal
        if TireFL_SlidingEnergy is not None:
            self.TireFL_SlidingEnergy = TireFL_SlidingEnergy
        if TireFR_SlidingEnergy is not None:
            self.TireFR_SlidingEnergy = TireFR_SlidingEnergy
        if TireRL_SlidingEnergy is not None:
            self.TireRL_SlidingEnergy = TireRL_SlidingEnergy
        if TireRR_SlidingEnergy is not None:
            self.TireRR_SlidingEnergy = TireRR_SlidingEnergy
        if DistancePower is not None:
            self.DistancePower = DistancePower
        if LapTimePower is not None:
            self.LapTimePower = LapTimePower
        if Energy is not None:
            self.Energy = Energy
        if TimeOfDay is not None:
            self.TimeOfDay = TimeOfDay
        if Consumption is not None:
            self.Consumption = Consumption
        if UsedInRunPlan is not None:
            self.UsedInRunPlan = UsedInRunPlan

    @property
    def Id(self):
        """Gets the Id of this Lap.  # noqa: E501

        The lap id.  # noqa: E501

        :return: The Id of this Lap.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Lap.

        The lap id.  # noqa: E501

        :param Id: The Id of this Lap.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Number(self):
        """Gets the Number of this Lap.  # noqa: E501

        The lap number.  # noqa: E501

        :return: The Number of this Lap.  # noqa: E501
        :rtype: int
        """
        return self._Number

    @Number.setter
    def Number(self, Number):
        """Sets the Number of this Lap.

        The lap number.  # noqa: E501

        :param Number: The Number of this Lap.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and Number is None:
            raise ValueError("Invalid value for `Number`, must not be `None`")  # noqa: E501

        self._Number = Number

    @property
    def AbsoluteNumber(self):
        """Gets the AbsoluteNumber of this Lap.  # noqa: E501

        The lap absolute number.  # noqa: E501

        :return: The AbsoluteNumber of this Lap.  # noqa: E501
        :rtype: int
        """
        return self._AbsoluteNumber

    @AbsoluteNumber.setter
    def AbsoluteNumber(self, AbsoluteNumber):
        """Sets the AbsoluteNumber of this Lap.

        The lap absolute number.  # noqa: E501

        :param AbsoluteNumber: The AbsoluteNumber of this Lap.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and AbsoluteNumber is None:
            raise ValueError("Invalid value for `AbsoluteNumber`, must not be `None`")  # noqa: E501

        self._AbsoluteNumber = AbsoluteNumber

    @property
    def Order(self):
        """Gets the Order of this Lap.  # noqa: E501

        The lap order.  # noqa: E501

        :return: The Order of this Lap.  # noqa: E501
        :rtype: int
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        """Sets the Order of this Lap.

        The lap order.  # noqa: E501

        :param Order: The Order of this Lap.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and Order is None:
            raise ValueError("Invalid value for `Order`, must not be `None`")  # noqa: E501

        self._Order = Order

    @property
    def RunId(self):
        """Gets the RunId of this Lap.  # noqa: E501

        The run unique id to which the lap is linked.  # noqa: E501

        :return: The RunId of this Lap.  # noqa: E501
        :rtype: str
        """
        return self._RunId

    @RunId.setter
    def RunId(self, RunId):
        """Sets the RunId of this Lap.

        The run unique id to which the lap is linked.  # noqa: E501

        :param RunId: The RunId of this Lap.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and RunId is None:
            raise ValueError("Invalid value for `RunId`, must not be `None`")  # noqa: E501

        self._RunId = RunId

    @property
    def LapDate(self):
        """Gets the LapDate of this Lap.  # noqa: E501

        The lap date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :return: The LapDate of this Lap.  # noqa: E501
        :rtype: datetime
        """
        return self._LapDate

    @LapDate.setter
    def LapDate(self, LapDate):
        """Sets the LapDate of this Lap.

        The lap date.  The date must be an UTC date time. Here is an example : 2018-06-05T12:36:34.168Z  # noqa: E501

        :param LapDate: The LapDate of this Lap.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and LapDate is None:
            raise ValueError("Invalid value for `LapDate`, must not be `None`")  # noqa: E501

        self._LapDate = LapDate

    @property
    def LapTime(self):
        """Gets the LapTime of this Lap.  # noqa: E501

        The lap time in seconds.  # noqa: E501

        :return: The LapTime of this Lap.  # noqa: E501
        :rtype: float
        """
        return self._LapTime

    @LapTime.setter
    def LapTime(self, LapTime):
        """Sets the LapTime of this Lap.

        The lap time in seconds.  # noqa: E501

        :param LapTime: The LapTime of this Lap.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and LapTime is None:
            raise ValueError("Invalid value for `LapTime`, must not be `None`")  # noqa: E501

        self._LapTime = LapTime

    @property
    def IsValid(self):
        """Gets the IsValid of this Lap.  # noqa: E501

        The lap \"valid\" status.  # noqa: E501

        :return: The IsValid of this Lap.  # noqa: E501
        :rtype: bool
        """
        return self._IsValid

    @IsValid.setter
    def IsValid(self, IsValid):
        """Sets the IsValid of this Lap.

        The lap \"valid\" status.  # noqa: E501

        :param IsValid: The IsValid of this Lap.  # noqa: E501
        :type: bool
        """

        self._IsValid = IsValid

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Lap.  # noqa: E501

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this Lap.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Lap.

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Lap.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Lap.  # noqa: E501

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateUser of this Lap.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Lap.

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Lap.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def Revision(self):
        """Gets the Revision of this Lap.  # noqa: E501

        The revision number of the object.  # noqa: E501

        :return: The Revision of this Lap.  # noqa: E501
        :rtype: int
        """
        return self._Revision

    @Revision.setter
    def Revision(self, Revision):
        """Sets the Revision of this Lap.

        The revision number of the object.  # noqa: E501

        :param Revision: The Revision of this Lap.  # noqa: E501
        :type: int
        """

        self._Revision = Revision

    @property
    def DistanceReal(self):
        """Gets the DistanceReal of this Lap.  # noqa: E501

        Real distance performed  # noqa: E501

        :return: The DistanceReal of this Lap.  # noqa: E501
        :rtype: float
        """
        return self._DistanceReal

    @DistanceReal.setter
    def DistanceReal(self, DistanceReal):
        """Sets the DistanceReal of this Lap.

        Real distance performed  # noqa: E501

        :param DistanceReal: The DistanceReal of this Lap.  # noqa: E501
        :type: float
        """

        self._DistanceReal = DistanceReal

    @property
    def TireFL_SlidingEnergy(self):
        """Gets the TireFL_SlidingEnergy of this Lap.  # noqa: E501

        énergie obtenue pour le pneu FL durant le lap  # noqa: E501

        :return: The TireFL_SlidingEnergy of this Lap.  # noqa: E501
        :rtype: float
        """
        return self._TireFL_SlidingEnergy

    @TireFL_SlidingEnergy.setter
    def TireFL_SlidingEnergy(self, TireFL_SlidingEnergy):
        """Sets the TireFL_SlidingEnergy of this Lap.

        énergie obtenue pour le pneu FL durant le lap  # noqa: E501

        :param TireFL_SlidingEnergy: The TireFL_SlidingEnergy of this Lap.  # noqa: E501
        :type: float
        """

        self._TireFL_SlidingEnergy = TireFL_SlidingEnergy

    @property
    def TireFR_SlidingEnergy(self):
        """Gets the TireFR_SlidingEnergy of this Lap.  # noqa: E501

        énergie obtenue pour le pneu FR durant le lap  # noqa: E501

        :return: The TireFR_SlidingEnergy of this Lap.  # noqa: E501
        :rtype: float
        """
        return self._TireFR_SlidingEnergy

    @TireFR_SlidingEnergy.setter
    def TireFR_SlidingEnergy(self, TireFR_SlidingEnergy):
        """Sets the TireFR_SlidingEnergy of this Lap.

        énergie obtenue pour le pneu FR durant le lap  # noqa: E501

        :param TireFR_SlidingEnergy: The TireFR_SlidingEnergy of this Lap.  # noqa: E501
        :type: float
        """

        self._TireFR_SlidingEnergy = TireFR_SlidingEnergy

    @property
    def TireRL_SlidingEnergy(self):
        """Gets the TireRL_SlidingEnergy of this Lap.  # noqa: E501

        énergie obtenue pour le pneu RL durant le lap  # noqa: E501

        :return: The TireRL_SlidingEnergy of this Lap.  # noqa: E501
        :rtype: float
        """
        return self._TireRL_SlidingEnergy

    @TireRL_SlidingEnergy.setter
    def TireRL_SlidingEnergy(self, TireRL_SlidingEnergy):
        """Sets the TireRL_SlidingEnergy of this Lap.

        énergie obtenue pour le pneu RL durant le lap  # noqa: E501

        :param TireRL_SlidingEnergy: The TireRL_SlidingEnergy of this Lap.  # noqa: E501
        :type: float
        """

        self._TireRL_SlidingEnergy = TireRL_SlidingEnergy

    @property
    def TireRR_SlidingEnergy(self):
        """Gets the TireRR_SlidingEnergy of this Lap.  # noqa: E501

        énergie obtenue pour le pneu RR durant le lap  # noqa: E501

        :return: The TireRR_SlidingEnergy of this Lap.  # noqa: E501
        :rtype: float
        """
        return self._TireRR_SlidingEnergy

    @TireRR_SlidingEnergy.setter
    def TireRR_SlidingEnergy(self, TireRR_SlidingEnergy):
        """Sets the TireRR_SlidingEnergy of this Lap.

        énergie obtenue pour le pneu RR durant le lap  # noqa: E501

        :param TireRR_SlidingEnergy: The TireRR_SlidingEnergy of this Lap.  # noqa: E501
        :type: float
        """

        self._TireRR_SlidingEnergy = TireRR_SlidingEnergy

    @property
    def DistancePower(self):
        """Gets the DistancePower of this Lap.  # noqa: E501

        Distance covered in power  # noqa: E501

        :return: The DistancePower of this Lap.  # noqa: E501
        :rtype: float
        """
        return self._DistancePower

    @DistancePower.setter
    def DistancePower(self, DistancePower):
        """Sets the DistancePower of this Lap.

        Distance covered in power  # noqa: E501

        :param DistancePower: The DistancePower of this Lap.  # noqa: E501
        :type: float
        """

        self._DistancePower = DistancePower

    @property
    def LapTimePower(self):
        """Gets the LapTimePower of this Lap.  # noqa: E501

        Time elpased in power  # noqa: E501

        :return: The LapTimePower of this Lap.  # noqa: E501
        :rtype: float
        """
        return self._LapTimePower

    @LapTimePower.setter
    def LapTimePower(self, LapTimePower):
        """Sets the LapTimePower of this Lap.

        Time elpased in power  # noqa: E501

        :param LapTimePower: The LapTimePower of this Lap.  # noqa: E501
        :type: float
        """

        self._LapTimePower = LapTimePower

    @property
    def Energy(self):
        """Gets the Energy of this Lap.  # noqa: E501

        Lap energy  # noqa: E501

        :return: The Energy of this Lap.  # noqa: E501
        :rtype: float
        """
        return self._Energy

    @Energy.setter
    def Energy(self, Energy):
        """Sets the Energy of this Lap.

        Lap energy  # noqa: E501

        :param Energy: The Energy of this Lap.  # noqa: E501
        :type: float
        """

        self._Energy = Energy

    @property
    def TimeOfDay(self):
        """Gets the TimeOfDay of this Lap.  # noqa: E501

        Le time of the day de la télémétrie  # noqa: E501

        :return: The TimeOfDay of this Lap.  # noqa: E501
        :rtype: str
        """
        return self._TimeOfDay

    @TimeOfDay.setter
    def TimeOfDay(self, TimeOfDay):
        """Sets the TimeOfDay of this Lap.

        Le time of the day de la télémétrie  # noqa: E501

        :param TimeOfDay: The TimeOfDay of this Lap.  # noqa: E501
        :type: str
        """

        self._TimeOfDay = TimeOfDay

    @property
    def Consumption(self):
        """Gets the Consumption of this Lap.  # noqa: E501

        Le niveau de consommation d'énergie  # noqa: E501

        :return: The Consumption of this Lap.  # noqa: E501
        :rtype: float
        """
        return self._Consumption

    @Consumption.setter
    def Consumption(self, Consumption):
        """Sets the Consumption of this Lap.

        Le niveau de consommation d'énergie  # noqa: E501

        :param Consumption: The Consumption of this Lap.  # noqa: E501
        :type: float
        """

        self._Consumption = Consumption

    @property
    def UsedInRunPlan(self):
        """Gets the UsedInRunPlan of this Lap.  # noqa: E501

        Indique si le lap peut être utilisé par le run plan  # noqa: E501

        :return: The UsedInRunPlan of this Lap.  # noqa: E501
        :rtype: bool
        """
        return self._UsedInRunPlan

    @UsedInRunPlan.setter
    def UsedInRunPlan(self, UsedInRunPlan):
        """Sets the UsedInRunPlan of this Lap.

        Indique si le lap peut être utilisé par le run plan  # noqa: E501

        :param UsedInRunPlan: The UsedInRunPlan of this Lap.  # noqa: E501
        :type: bool
        """

        self._UsedInRunPlan = UsedInRunPlan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Lap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Lap):
            return True

        return self.to_dict() != other.to_dict()

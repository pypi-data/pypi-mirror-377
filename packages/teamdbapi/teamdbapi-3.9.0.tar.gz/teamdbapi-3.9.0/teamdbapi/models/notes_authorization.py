# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class NotesAuthorization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'ConcernedEntityId': 'str',
        'ConcernedEntityIsGroup': 'bool',
        'ItemBaseId': 'str',
        'HasAcces': 'bool'
    }

    attribute_map = {
        'Id': 'Id',
        'ConcernedEntityId': 'ConcernedEntityId',
        'ConcernedEntityIsGroup': 'ConcernedEntityIsGroup',
        'ItemBaseId': 'ItemBaseId',
        'HasAcces': 'HasAcces'
    }

    def __init__(self, Id=None, ConcernedEntityId=None, ConcernedEntityIsGroup=None, ItemBaseId=None, HasAcces=None, _configuration=None):  # noqa: E501
        """NotesAuthorization - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._ConcernedEntityId = None
        self._ConcernedEntityIsGroup = None
        self._ItemBaseId = None
        self._HasAcces = None
        self.discriminator = None

        self.Id = Id
        self.ConcernedEntityId = ConcernedEntityId
        if ConcernedEntityIsGroup is not None:
            self.ConcernedEntityIsGroup = ConcernedEntityIsGroup
        self.ItemBaseId = ItemBaseId
        self.HasAcces = HasAcces

    @property
    def Id(self):
        """Gets the Id of this NotesAuthorization.  # noqa: E501

        The unique authorization Id.  # noqa: E501

        :return: The Id of this NotesAuthorization.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this NotesAuthorization.

        The unique authorization Id.  # noqa: E501

        :param Id: The Id of this NotesAuthorization.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def ConcernedEntityId(self):
        """Gets the ConcernedEntityId of this NotesAuthorization.  # noqa: E501

        The unique id of the concerned entity (user or group).  # noqa: E501

        :return: The ConcernedEntityId of this NotesAuthorization.  # noqa: E501
        :rtype: str
        """
        return self._ConcernedEntityId

    @ConcernedEntityId.setter
    def ConcernedEntityId(self, ConcernedEntityId):
        """Sets the ConcernedEntityId of this NotesAuthorization.

        The unique id of the concerned entity (user or group).  # noqa: E501

        :param ConcernedEntityId: The ConcernedEntityId of this NotesAuthorization.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ConcernedEntityId is None:
            raise ValueError("Invalid value for `ConcernedEntityId`, must not be `None`")  # noqa: E501

        self._ConcernedEntityId = ConcernedEntityId

    @property
    def ConcernedEntityIsGroup(self):
        """Gets the ConcernedEntityIsGroup of this NotesAuthorization.  # noqa: E501

        Set to True if `ConcernedEntityId` is a group id.  # noqa: E501

        :return: The ConcernedEntityIsGroup of this NotesAuthorization.  # noqa: E501
        :rtype: bool
        """
        return self._ConcernedEntityIsGroup

    @ConcernedEntityIsGroup.setter
    def ConcernedEntityIsGroup(self, ConcernedEntityIsGroup):
        """Sets the ConcernedEntityIsGroup of this NotesAuthorization.

        Set to True if `ConcernedEntityId` is a group id.  # noqa: E501

        :param ConcernedEntityIsGroup: The ConcernedEntityIsGroup of this NotesAuthorization.  # noqa: E501
        :type: bool
        """

        self._ConcernedEntityIsGroup = ConcernedEntityIsGroup

    @property
    def ItemBaseId(self):
        """Gets the ItemBaseId of this NotesAuthorization.  # noqa: E501

        The itemBase (event or car) id to which this authorization belongs.  # noqa: E501

        :return: The ItemBaseId of this NotesAuthorization.  # noqa: E501
        :rtype: str
        """
        return self._ItemBaseId

    @ItemBaseId.setter
    def ItemBaseId(self, ItemBaseId):
        """Sets the ItemBaseId of this NotesAuthorization.

        The itemBase (event or car) id to which this authorization belongs.  # noqa: E501

        :param ItemBaseId: The ItemBaseId of this NotesAuthorization.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ItemBaseId is None:
            raise ValueError("Invalid value for `ItemBaseId`, must not be `None`")  # noqa: E501

        self._ItemBaseId = ItemBaseId

    @property
    def HasAcces(self):
        """Gets the HasAcces of this NotesAuthorization.  # noqa: E501

        Set to True to allow the user/group to access to the event or car.  # noqa: E501

        :return: The HasAcces of this NotesAuthorization.  # noqa: E501
        :rtype: bool
        """
        return self._HasAcces

    @HasAcces.setter
    def HasAcces(self, HasAcces):
        """Sets the HasAcces of this NotesAuthorization.

        Set to True to allow the user/group to access to the event or car.  # noqa: E501

        :param HasAcces: The HasAcces of this NotesAuthorization.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and HasAcces is None:
            raise ValueError("Invalid value for `HasAcces`, must not be `None`")  # noqa: E501

        self._HasAcces = HasAcces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotesAuthorization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotesAuthorization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotesAuthorization):
            return True

        return self.to_dict() != other.to_dict()

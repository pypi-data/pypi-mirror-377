# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Parameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'ValueType': 'str',
        'TargetId': 'str',
        'CreatedInVersion': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'VersionId': 'str',
        'GroupId': 'str',
        'ParameterDefinition': 'Calibration',
        'Responsible': 'str'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'ValueType': 'ValueType',
        'TargetId': 'TargetId',
        'CreatedInVersion': 'CreatedInVersion',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'VersionId': 'VersionId',
        'GroupId': 'GroupId',
        'ParameterDefinition': 'ParameterDefinition',
        'Responsible': 'Responsible'
    }

    def __init__(self, Id=None, Name=None, ValueType=None, TargetId=None, CreatedInVersion=None, LastUpdateDateUtc=None, LastUpdateUser=None, VersionId=None, GroupId=None, ParameterDefinition=None, Responsible=None, _configuration=None):  # noqa: E501
        """Parameter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._ValueType = None
        self._TargetId = None
        self._CreatedInVersion = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._VersionId = None
        self._GroupId = None
        self._ParameterDefinition = None
        self._Responsible = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        self.ValueType = ValueType
        self.TargetId = TargetId
        if CreatedInVersion is not None:
            self.CreatedInVersion = CreatedInVersion
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        self.VersionId = VersionId
        if GroupId is not None:
            self.GroupId = GroupId
        if ParameterDefinition is not None:
            self.ParameterDefinition = ParameterDefinition
        if Responsible is not None:
            self.Responsible = Responsible

    @property
    def Id(self):
        """Gets the Id of this Parameter.  # noqa: E501

        The unique parameter id  # noqa: E501

        :return: The Id of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this Parameter.

        The unique parameter id  # noqa: E501

        :param Id: The Id of this Parameter.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this Parameter.  # noqa: E501

        The parameter name  # noqa: E501

        :return: The Name of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this Parameter.

        The parameter name  # noqa: E501

        :param Name: The Name of this Parameter.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def ValueType(self):
        """Gets the ValueType of this Parameter.  # noqa: E501

        The parameter value type   None = 0, String = 1, Double = 2, Integer = 3  # noqa: E501

        :return: The ValueType of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._ValueType

    @ValueType.setter
    def ValueType(self, ValueType):
        """Sets the ValueType of this Parameter.

        The parameter value type   None = 0, String = 1, Double = 2, Integer = 3  # noqa: E501

        :param ValueType: The ValueType of this Parameter.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ValueType is None:
            raise ValueError("Invalid value for `ValueType`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "String", "Double", "Integer"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ValueType not in allowed_values):
            raise ValueError(
                "Invalid value for `ValueType` ({0}), must be one of {1}"  # noqa: E501
                .format(ValueType, allowed_values)
            )

        self._ValueType = ValueType

    @property
    def TargetId(self):
        """Gets the TargetId of this Parameter.  # noqa: E501

        The target id to which the parameter belongs to.  Parameters are linked to the version through the VersionParam object.  But you don't have to care about this. Just call th parameters Api function and provide a version id to which you want to get the parameters.  # noqa: E501

        :return: The TargetId of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._TargetId

    @TargetId.setter
    def TargetId(self, TargetId):
        """Sets the TargetId of this Parameter.

        The target id to which the parameter belongs to.  Parameters are linked to the version through the VersionParam object.  But you don't have to care about this. Just call th parameters Api function and provide a version id to which you want to get the parameters.  # noqa: E501

        :param TargetId: The TargetId of this Parameter.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and TargetId is None:
            raise ValueError("Invalid value for `TargetId`, must not be `None`")  # noqa: E501

        self._TargetId = TargetId

    @property
    def CreatedInVersion(self):
        """Gets the CreatedInVersion of this Parameter.  # noqa: E501

        The first version to which the parameter has been created for.  # noqa: E501

        :return: The CreatedInVersion of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._CreatedInVersion

    @CreatedInVersion.setter
    def CreatedInVersion(self, CreatedInVersion):
        """Sets the CreatedInVersion of this Parameter.

        The first version to which the parameter has been created for.  # noqa: E501

        :param CreatedInVersion: The CreatedInVersion of this Parameter.  # noqa: E501
        :type: str
        """

        self._CreatedInVersion = CreatedInVersion

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Parameter.  # noqa: E501

        The last utc date time when the properties of the paremeter have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this Parameter.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Parameter.

        The last utc date time when the properties of the paremeter have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Parameter.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Parameter.  # noqa: E501

        The name of the last user having updated the parameter.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateUser of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Parameter.

        The name of the last user having updated the parameter.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Parameter.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def VersionId(self):
        """Gets the VersionId of this Parameter.  # noqa: E501

        The version Id to which the parameter is linked  # noqa: E501

        :return: The VersionId of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._VersionId

    @VersionId.setter
    def VersionId(self, VersionId):
        """Sets the VersionId of this Parameter.

        The version Id to which the parameter is linked  # noqa: E501

        :param VersionId: The VersionId of this Parameter.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and VersionId is None:
            raise ValueError("Invalid value for `VersionId`, must not be `None`")  # noqa: E501

        self._VersionId = VersionId

    @property
    def GroupId(self):
        """Gets the GroupId of this Parameter.  # noqa: E501

        The group id to which the parameter is located.   Or Guid.Empty (00000000-0000-0000-0000-000000000000) if the paramater is located on the root.  # noqa: E501

        :return: The GroupId of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._GroupId

    @GroupId.setter
    def GroupId(self, GroupId):
        """Sets the GroupId of this Parameter.

        The group id to which the parameter is located.   Or Guid.Empty (00000000-0000-0000-0000-000000000000) if the paramater is located on the root.  # noqa: E501

        :param GroupId: The GroupId of this Parameter.  # noqa: E501
        :type: str
        """

        self._GroupId = GroupId

    @property
    def ParameterDefinition(self):
        """Gets the ParameterDefinition of this Parameter.  # noqa: E501


        :return: The ParameterDefinition of this Parameter.  # noqa: E501
        :rtype: Calibration
        """
        return self._ParameterDefinition

    @ParameterDefinition.setter
    def ParameterDefinition(self, ParameterDefinition):
        """Sets the ParameterDefinition of this Parameter.


        :param ParameterDefinition: The ParameterDefinition of this Parameter.  # noqa: E501
        :type: Calibration
        """

        self._ParameterDefinition = ParameterDefinition

    @property
    def Responsible(self):
        """Gets the Responsible of this Parameter.  # noqa: E501

        The parameter's responsible name for the specified version  # noqa: E501

        :return: The Responsible of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._Responsible

    @Responsible.setter
    def Responsible(self, Responsible):
        """Sets the Responsible of this Parameter.

        The parameter's responsible name for the specified version  # noqa: E501

        :param Responsible: The Responsible of this Parameter.  # noqa: E501
        :type: str
        """

        self._Responsible = Responsible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Parameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Parameter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Parameter):
            return True

        return self.to_dict() != other.to_dict()

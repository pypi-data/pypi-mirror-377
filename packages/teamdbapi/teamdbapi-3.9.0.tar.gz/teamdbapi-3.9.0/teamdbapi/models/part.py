# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class Part(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'PartId': 'str',
        'IsLifed': 'bool',
        'PartName': 'str',
        'ManufacturerNumber': 'str',
        'Description': 'str',
        'Tags': 'str',
        'IsClass': 'bool',
        'HasExpirationDate': 'bool',
        'MaxDistance': 'float',
        'MinDistance': 'float',
        'MaxTime': 'float',
        'DateCreationUtc': 'datetime',
        'Creator': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'PartStatus': 'str',
        'PartType': 'str',
        'Manufacturer': 'str',
        'ParentPartClass': 'str',
        'IconId': 'str',
        'Department': 'str',
        'Annotation': 'str',
        'MultiManufacturer': 'bool',
        'ClassificationCode': 'str',
        'MaxDistanceFactored': 'float',
        'FactorId': 'str',
        'MaxEnergy': 'float',
        'CriteriaSetId': 'str',
        'InheritedStatus': 'bool',
        'MinWeight': 'float',
        'MaxWeight': 'float',
        'IsSensor': 'bool',
        'DnuDistance': 'float',
        'DnuTime': 'float',
        'DnuEnergy': 'float',
        'DnuDistanceFactored': 'float'
    }

    attribute_map = {
        'PartId': 'PartId',
        'IsLifed': 'IsLifed',
        'PartName': 'PartName',
        'ManufacturerNumber': 'ManufacturerNumber',
        'Description': 'Description',
        'Tags': 'Tags',
        'IsClass': 'IsClass',
        'HasExpirationDate': 'HasExpirationDate',
        'MaxDistance': 'MaxDistance',
        'MinDistance': 'MinDistance',
        'MaxTime': 'MaxTime',
        'DateCreationUtc': 'DateCreationUtc',
        'Creator': 'Creator',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'PartStatus': 'PartStatus',
        'PartType': 'PartType',
        'Manufacturer': 'Manufacturer',
        'ParentPartClass': 'ParentPartClass',
        'IconId': 'IconId',
        'Department': 'Department',
        'Annotation': 'Annotation',
        'MultiManufacturer': 'MultiManufacturer',
        'ClassificationCode': 'ClassificationCode',
        'MaxDistanceFactored': 'MaxDistanceFactored',
        'FactorId': 'FactorId',
        'MaxEnergy': 'MaxEnergy',
        'CriteriaSetId': 'CriteriaSetId',
        'InheritedStatus': 'InheritedStatus',
        'MinWeight': 'MinWeight',
        'MaxWeight': 'MaxWeight',
        'IsSensor': 'IsSensor',
        'DnuDistance': 'DnuDistance',
        'DnuTime': 'DnuTime',
        'DnuEnergy': 'DnuEnergy',
        'DnuDistanceFactored': 'DnuDistanceFactored'
    }

    def __init__(self, PartId=None, IsLifed=None, PartName=None, ManufacturerNumber=None, Description=None, Tags=None, IsClass=None, HasExpirationDate=None, MaxDistance=None, MinDistance=None, MaxTime=None, DateCreationUtc=None, Creator=None, LastUpdateDateUtc=None, LastUpdateUser=None, PartStatus=None, PartType=None, Manufacturer=None, ParentPartClass=None, IconId=None, Department=None, Annotation=None, MultiManufacturer=None, ClassificationCode=None, MaxDistanceFactored=None, FactorId=None, MaxEnergy=None, CriteriaSetId=None, InheritedStatus=None, MinWeight=None, MaxWeight=None, IsSensor=None, DnuDistance=None, DnuTime=None, DnuEnergy=None, DnuDistanceFactored=None, _configuration=None):  # noqa: E501
        """Part - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._PartId = None
        self._IsLifed = None
        self._PartName = None
        self._ManufacturerNumber = None
        self._Description = None
        self._Tags = None
        self._IsClass = None
        self._HasExpirationDate = None
        self._MaxDistance = None
        self._MinDistance = None
        self._MaxTime = None
        self._DateCreationUtc = None
        self._Creator = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._PartStatus = None
        self._PartType = None
        self._Manufacturer = None
        self._ParentPartClass = None
        self._IconId = None
        self._Department = None
        self._Annotation = None
        self._MultiManufacturer = None
        self._ClassificationCode = None
        self._MaxDistanceFactored = None
        self._FactorId = None
        self._MaxEnergy = None
        self._CriteriaSetId = None
        self._InheritedStatus = None
        self._MinWeight = None
        self._MaxWeight = None
        self._IsSensor = None
        self._DnuDistance = None
        self._DnuTime = None
        self._DnuEnergy = None
        self._DnuDistanceFactored = None
        self.discriminator = None

        self.PartId = PartId
        if IsLifed is not None:
            self.IsLifed = IsLifed
        if PartName is not None:
            self.PartName = PartName
        if ManufacturerNumber is not None:
            self.ManufacturerNumber = ManufacturerNumber
        if Description is not None:
            self.Description = Description
        if Tags is not None:
            self.Tags = Tags
        if IsClass is not None:
            self.IsClass = IsClass
        if HasExpirationDate is not None:
            self.HasExpirationDate = HasExpirationDate
        if MaxDistance is not None:
            self.MaxDistance = MaxDistance
        if MinDistance is not None:
            self.MinDistance = MinDistance
        if MaxTime is not None:
            self.MaxTime = MaxTime
        if DateCreationUtc is not None:
            self.DateCreationUtc = DateCreationUtc
        if Creator is not None:
            self.Creator = Creator
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        self.PartStatus = PartStatus
        self.PartType = PartType
        if Manufacturer is not None:
            self.Manufacturer = Manufacturer
        if ParentPartClass is not None:
            self.ParentPartClass = ParentPartClass
        if IconId is not None:
            self.IconId = IconId
        self.Department = Department
        if Annotation is not None:
            self.Annotation = Annotation
        if MultiManufacturer is not None:
            self.MultiManufacturer = MultiManufacturer
        if ClassificationCode is not None:
            self.ClassificationCode = ClassificationCode
        if MaxDistanceFactored is not None:
            self.MaxDistanceFactored = MaxDistanceFactored
        if FactorId is not None:
            self.FactorId = FactorId
        if MaxEnergy is not None:
            self.MaxEnergy = MaxEnergy
        if CriteriaSetId is not None:
            self.CriteriaSetId = CriteriaSetId
        if InheritedStatus is not None:
            self.InheritedStatus = InheritedStatus
        if MinWeight is not None:
            self.MinWeight = MinWeight
        if MaxWeight is not None:
            self.MaxWeight = MaxWeight
        if IsSensor is not None:
            self.IsSensor = IsSensor
        if DnuDistance is not None:
            self.DnuDistance = DnuDistance
        if DnuTime is not None:
            self.DnuTime = DnuTime
        if DnuEnergy is not None:
            self.DnuEnergy = DnuEnergy
        if DnuDistanceFactored is not None:
            self.DnuDistanceFactored = DnuDistanceFactored

    @property
    def PartId(self):
        """Gets the PartId of this Part.  # noqa: E501

        Part unique identifier, common to all revisions of the same part  Set the PartId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new part.  # noqa: E501

        :return: The PartId of this Part.  # noqa: E501
        :rtype: str
        """
        return self._PartId

    @PartId.setter
    def PartId(self, PartId):
        """Sets the PartId of this Part.

        Part unique identifier, common to all revisions of the same part  Set the PartId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new part.  # noqa: E501

        :param PartId: The PartId of this Part.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and PartId is None:
            raise ValueError("Invalid value for `PartId`, must not be `None`")  # noqa: E501

        self._PartId = PartId

    @property
    def IsLifed(self):
        """Gets the IsLifed of this Part.  # noqa: E501

        Indicates whether the part should be monitored because it has is limited lifespan  # noqa: E501

        :return: The IsLifed of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._IsLifed

    @IsLifed.setter
    def IsLifed(self, IsLifed):
        """Sets the IsLifed of this Part.

        Indicates whether the part should be monitored because it has is limited lifespan  # noqa: E501

        :param IsLifed: The IsLifed of this Part.  # noqa: E501
        :type: bool
        """

        self._IsLifed = IsLifed

    @property
    def PartName(self):
        """Gets the PartName of this Part.  # noqa: E501

        Part name  # noqa: E501

        :return: The PartName of this Part.  # noqa: E501
        :rtype: str
        """
        return self._PartName

    @PartName.setter
    def PartName(self, PartName):
        """Sets the PartName of this Part.

        Part name  # noqa: E501

        :param PartName: The PartName of this Part.  # noqa: E501
        :type: str
        """

        self._PartName = PartName

    @property
    def ManufacturerNumber(self):
        """Gets the ManufacturerNumber of this Part.  # noqa: E501

        Part number in the manufacturer's reference system  # noqa: E501

        :return: The ManufacturerNumber of this Part.  # noqa: E501
        :rtype: str
        """
        return self._ManufacturerNumber

    @ManufacturerNumber.setter
    def ManufacturerNumber(self, ManufacturerNumber):
        """Sets the ManufacturerNumber of this Part.

        Part number in the manufacturer's reference system  # noqa: E501

        :param ManufacturerNumber: The ManufacturerNumber of this Part.  # noqa: E501
        :type: str
        """

        self._ManufacturerNumber = ManufacturerNumber

    @property
    def Description(self):
        """Gets the Description of this Part.  # noqa: E501

        Part description  # noqa: E501

        :return: The Description of this Part.  # noqa: E501
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        """Sets the Description of this Part.

        Part description  # noqa: E501

        :param Description: The Description of this Part.  # noqa: E501
        :type: str
        """

        self._Description = Description

    @property
    def Tags(self):
        """Gets the Tags of this Part.  # noqa: E501

        Part tags. Each tag must be separated by a semicolon.  # noqa: E501

        :return: The Tags of this Part.  # noqa: E501
        :rtype: str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        """Sets the Tags of this Part.

        Part tags. Each tag must be separated by a semicolon.  # noqa: E501

        :param Tags: The Tags of this Part.  # noqa: E501
        :type: str
        """

        self._Tags = Tags

    @property
    def IsClass(self):
        """Gets the IsClass of this Part.  # noqa: E501

        Indicates whether it is a class part  # noqa: E501

        :return: The IsClass of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._IsClass

    @IsClass.setter
    def IsClass(self, IsClass):
        """Sets the IsClass of this Part.

        Indicates whether it is a class part  # noqa: E501

        :param IsClass: The IsClass of this Part.  # noqa: E501
        :type: bool
        """

        self._IsClass = IsClass

    @property
    def HasExpirationDate(self):
        """Gets the HasExpirationDate of this Part.  # noqa: E501

        Indicates whether the part has an expiry date  # noqa: E501

        :return: The HasExpirationDate of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._HasExpirationDate

    @HasExpirationDate.setter
    def HasExpirationDate(self, HasExpirationDate):
        """Sets the HasExpirationDate of this Part.

        Indicates whether the part has an expiry date  # noqa: E501

        :param HasExpirationDate: The HasExpirationDate of this Part.  # noqa: E501
        :type: bool
        """

        self._HasExpirationDate = HasExpirationDate

    @property
    def MaxDistance(self):
        """Gets the MaxDistance of this Part.  # noqa: E501

        Maximum distance that the part can cover  # noqa: E501

        :return: The MaxDistance of this Part.  # noqa: E501
        :rtype: float
        """
        return self._MaxDistance

    @MaxDistance.setter
    def MaxDistance(self, MaxDistance):
        """Sets the MaxDistance of this Part.

        Maximum distance that the part can cover  # noqa: E501

        :param MaxDistance: The MaxDistance of this Part.  # noqa: E501
        :type: float
        """

        self._MaxDistance = MaxDistance

    @property
    def MinDistance(self):
        """Gets the MinDistance of this Part.  # noqa: E501

        Minimum distance that the part can cover  # noqa: E501

        :return: The MinDistance of this Part.  # noqa: E501
        :rtype: float
        """
        return self._MinDistance

    @MinDistance.setter
    def MinDistance(self, MinDistance):
        """Sets the MinDistance of this Part.

        Minimum distance that the part can cover  # noqa: E501

        :param MinDistance: The MinDistance of this Part.  # noqa: E501
        :type: float
        """

        self._MinDistance = MinDistance

    @property
    def MaxTime(self):
        """Gets the MaxTime of this Part.  # noqa: E501

        Maximum duration of use of the part (in hours)  # noqa: E501

        :return: The MaxTime of this Part.  # noqa: E501
        :rtype: float
        """
        return self._MaxTime

    @MaxTime.setter
    def MaxTime(self, MaxTime):
        """Sets the MaxTime of this Part.

        Maximum duration of use of the part (in hours)  # noqa: E501

        :param MaxTime: The MaxTime of this Part.  # noqa: E501
        :type: float
        """

        self._MaxTime = MaxTime

    @property
    def DateCreationUtc(self):
        """Gets the DateCreationUtc of this Part.  # noqa: E501

        Part creation utc date  # noqa: E501

        :return: The DateCreationUtc of this Part.  # noqa: E501
        :rtype: datetime
        """
        return self._DateCreationUtc

    @DateCreationUtc.setter
    def DateCreationUtc(self, DateCreationUtc):
        """Sets the DateCreationUtc of this Part.

        Part creation utc date  # noqa: E501

        :param DateCreationUtc: The DateCreationUtc of this Part.  # noqa: E501
        :type: datetime
        """

        self._DateCreationUtc = DateCreationUtc

    @property
    def Creator(self):
        """Gets the Creator of this Part.  # noqa: E501

        Part creator username  # noqa: E501

        :return: The Creator of this Part.  # noqa: E501
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        """Sets the Creator of this Part.

        Part creator username  # noqa: E501

        :param Creator: The Creator of this Part.  # noqa: E501
        :type: str
        """

        self._Creator = Creator

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this Part.  # noqa: E501

        Part last update utc date  # noqa: E501

        :return: The LastUpdateDateUtc of this Part.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this Part.

        Part last update utc date  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this Part.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this Part.  # noqa: E501

        The name of the user who performed the last update on the part  # noqa: E501

        :return: The LastUpdateUser of this Part.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this Part.

        The name of the user who performed the last update on the part  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this Part.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def PartStatus(self):
        """Gets the PartStatus of this Part.  # noqa: E501

        Part status name  # noqa: E501

        :return: The PartStatus of this Part.  # noqa: E501
        :rtype: str
        """
        return self._PartStatus

    @PartStatus.setter
    def PartStatus(self, PartStatus):
        """Sets the PartStatus of this Part.

        Part status name  # noqa: E501

        :param PartStatus: The PartStatus of this Part.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and PartStatus is None:
            raise ValueError("Invalid value for `PartStatus`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                PartStatus is not None and len(PartStatus) < 1):
            raise ValueError("Invalid value for `PartStatus`, length must be greater than or equal to `1`")  # noqa: E501

        self._PartStatus = PartStatus

    @property
    def PartType(self):
        """Gets the PartType of this Part.  # noqa: E501

        Part type  # noqa: E501

        :return: The PartType of this Part.  # noqa: E501
        :rtype: str
        """
        return self._PartType

    @PartType.setter
    def PartType(self, PartType):
        """Sets the PartType of this Part.

        Part type  # noqa: E501

        :param PartType: The PartType of this Part.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and PartType is None:
            raise ValueError("Invalid value for `PartType`, must not be `None`")  # noqa: E501
        allowed_values = ["Single", "Group"]  # noqa: E501
        if (self._configuration.client_side_validation and
                PartType not in allowed_values):
            raise ValueError(
                "Invalid value for `PartType` ({0}), must be one of {1}"  # noqa: E501
                .format(PartType, allowed_values)
            )

        self._PartType = PartType

    @property
    def Manufacturer(self):
        """Gets the Manufacturer of this Part.  # noqa: E501

        Part manufacturer name  # noqa: E501

        :return: The Manufacturer of this Part.  # noqa: E501
        :rtype: str
        """
        return self._Manufacturer

    @Manufacturer.setter
    def Manufacturer(self, Manufacturer):
        """Sets the Manufacturer of this Part.

        Part manufacturer name  # noqa: E501

        :param Manufacturer: The Manufacturer of this Part.  # noqa: E501
        :type: str
        """

        self._Manufacturer = Manufacturer

    @property
    def ParentPartClass(self):
        """Gets the ParentPartClass of this Part.  # noqa: E501

        Parent class part identifier or null  # noqa: E501

        :return: The ParentPartClass of this Part.  # noqa: E501
        :rtype: str
        """
        return self._ParentPartClass

    @ParentPartClass.setter
    def ParentPartClass(self, ParentPartClass):
        """Sets the ParentPartClass of this Part.

        Parent class part identifier or null  # noqa: E501

        :param ParentPartClass: The ParentPartClass of this Part.  # noqa: E501
        :type: str
        """

        self._ParentPartClass = ParentPartClass

    @property
    def IconId(self):
        """Gets the IconId of this Part.  # noqa: E501

        Identifier of the icon associated with the part or null  # noqa: E501

        :return: The IconId of this Part.  # noqa: E501
        :rtype: str
        """
        return self._IconId

    @IconId.setter
    def IconId(self, IconId):
        """Sets the IconId of this Part.

        Identifier of the icon associated with the part or null  # noqa: E501

        :param IconId: The IconId of this Part.  # noqa: E501
        :type: str
        """

        self._IconId = IconId

    @property
    def Department(self):
        """Gets the Department of this Part.  # noqa: E501

        The department to which the part belongs  # noqa: E501

        :return: The Department of this Part.  # noqa: E501
        :rtype: str
        """
        return self._Department

    @Department.setter
    def Department(self, Department):
        """Sets the Department of this Part.

        The department to which the part belongs  # noqa: E501

        :param Department: The Department of this Part.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Department is None:
            raise ValueError("Invalid value for `Department`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Department is not None and len(Department) < 1):
            raise ValueError("Invalid value for `Department`, length must be greater than or equal to `1`")  # noqa: E501

        self._Department = Department

    @property
    def Annotation(self):
        """Gets the Annotation of this Part.  # noqa: E501

        Comments associated with the part  # noqa: E501

        :return: The Annotation of this Part.  # noqa: E501
        :rtype: str
        """
        return self._Annotation

    @Annotation.setter
    def Annotation(self, Annotation):
        """Sets the Annotation of this Part.

        Comments associated with the part  # noqa: E501

        :param Annotation: The Annotation of this Part.  # noqa: E501
        :type: str
        """

        self._Annotation = Annotation

    @property
    def MultiManufacturer(self):
        """Gets the MultiManufacturer of this Part.  # noqa: E501

        Indicates whether the part has multiple manufacturers  # noqa: E501

        :return: The MultiManufacturer of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._MultiManufacturer

    @MultiManufacturer.setter
    def MultiManufacturer(self, MultiManufacturer):
        """Sets the MultiManufacturer of this Part.

        Indicates whether the part has multiple manufacturers  # noqa: E501

        :param MultiManufacturer: The MultiManufacturer of this Part.  # noqa: E501
        :type: bool
        """

        self._MultiManufacturer = MultiManufacturer

    @property
    def ClassificationCode(self):
        """Gets the ClassificationCode of this Part.  # noqa: E501

        Part classification code  # noqa: E501

        :return: The ClassificationCode of this Part.  # noqa: E501
        :rtype: str
        """
        return self._ClassificationCode

    @ClassificationCode.setter
    def ClassificationCode(self, ClassificationCode):
        """Sets the ClassificationCode of this Part.

        Part classification code  # noqa: E501

        :param ClassificationCode: The ClassificationCode of this Part.  # noqa: E501
        :type: str
        """

        self._ClassificationCode = ClassificationCode

    @property
    def MaxDistanceFactored(self):
        """Gets the MaxDistanceFactored of this Part.  # noqa: E501

        Maximum factorized distance for the part  # noqa: E501

        :return: The MaxDistanceFactored of this Part.  # noqa: E501
        :rtype: float
        """
        return self._MaxDistanceFactored

    @MaxDistanceFactored.setter
    def MaxDistanceFactored(self, MaxDistanceFactored):
        """Sets the MaxDistanceFactored of this Part.

        Maximum factorized distance for the part  # noqa: E501

        :param MaxDistanceFactored: The MaxDistanceFactored of this Part.  # noqa: E501
        :type: float
        """

        self._MaxDistanceFactored = MaxDistanceFactored

    @property
    def FactorId(self):
        """Gets the FactorId of this Part.  # noqa: E501

        Identifier of the factor associated with the part or null  # noqa: E501

        :return: The FactorId of this Part.  # noqa: E501
        :rtype: str
        """
        return self._FactorId

    @FactorId.setter
    def FactorId(self, FactorId):
        """Sets the FactorId of this Part.

        Identifier of the factor associated with the part or null  # noqa: E501

        :param FactorId: The FactorId of this Part.  # noqa: E501
        :type: str
        """

        self._FactorId = FactorId

    @property
    def MaxEnergy(self):
        """Gets the MaxEnergy of this Part.  # noqa: E501

        Maximum energy allowed for the part  # noqa: E501

        :return: The MaxEnergy of this Part.  # noqa: E501
        :rtype: float
        """
        return self._MaxEnergy

    @MaxEnergy.setter
    def MaxEnergy(self, MaxEnergy):
        """Sets the MaxEnergy of this Part.

        Maximum energy allowed for the part  # noqa: E501

        :param MaxEnergy: The MaxEnergy of this Part.  # noqa: E501
        :type: float
        """

        self._MaxEnergy = MaxEnergy

    @property
    def CriteriaSetId(self):
        """Gets the CriteriaSetId of this Part.  # noqa: E501

        Identifier of the criteria set associated with the part or null  # noqa: E501

        :return: The CriteriaSetId of this Part.  # noqa: E501
        :rtype: str
        """
        return self._CriteriaSetId

    @CriteriaSetId.setter
    def CriteriaSetId(self, CriteriaSetId):
        """Sets the CriteriaSetId of this Part.

        Identifier of the criteria set associated with the part or null  # noqa: E501

        :param CriteriaSetId: The CriteriaSetId of this Part.  # noqa: E501
        :type: str
        """

        self._CriteriaSetId = CriteriaSetId

    @property
    def InheritedStatus(self):
        """Gets the InheritedStatus of this Part.  # noqa: E501

        Indicates whether to use the part status when creating a component  # noqa: E501

        :return: The InheritedStatus of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._InheritedStatus

    @InheritedStatus.setter
    def InheritedStatus(self, InheritedStatus):
        """Sets the InheritedStatus of this Part.

        Indicates whether to use the part status when creating a component  # noqa: E501

        :param InheritedStatus: The InheritedStatus of this Part.  # noqa: E501
        :type: bool
        """

        self._InheritedStatus = InheritedStatus

    @property
    def MinWeight(self):
        """Gets the MinWeight of this Part.  # noqa: E501

        Minimum authorized weight for the part  # noqa: E501

        :return: The MinWeight of this Part.  # noqa: E501
        :rtype: float
        """
        return self._MinWeight

    @MinWeight.setter
    def MinWeight(self, MinWeight):
        """Sets the MinWeight of this Part.

        Minimum authorized weight for the part  # noqa: E501

        :param MinWeight: The MinWeight of this Part.  # noqa: E501
        :type: float
        """

        self._MinWeight = MinWeight

    @property
    def MaxWeight(self):
        """Gets the MaxWeight of this Part.  # noqa: E501

        Maximum authorized weight for the part  # noqa: E501

        :return: The MaxWeight of this Part.  # noqa: E501
        :rtype: float
        """
        return self._MaxWeight

    @MaxWeight.setter
    def MaxWeight(self, MaxWeight):
        """Sets the MaxWeight of this Part.

        Maximum authorized weight for the part  # noqa: E501

        :param MaxWeight: The MaxWeight of this Part.  # noqa: E501
        :type: float
        """

        self._MaxWeight = MaxWeight

    @property
    def IsSensor(self):
        """Gets the IsSensor of this Part.  # noqa: E501

        Indicates whether the part is a sensor  # noqa: E501

        :return: The IsSensor of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._IsSensor

    @IsSensor.setter
    def IsSensor(self, IsSensor):
        """Sets the IsSensor of this Part.

        Indicates whether the part is a sensor  # noqa: E501

        :param IsSensor: The IsSensor of this Part.  # noqa: E501
        :type: bool
        """

        self._IsSensor = IsSensor

    @property
    def DnuDistance(self):
        """Gets the DnuDistance of this Part.  # noqa: E501

        Distance max Do not use: la pice n'est plus utilisable même en essai  après cette limite atteinte  # noqa: E501

        :return: The DnuDistance of this Part.  # noqa: E501
        :rtype: float
        """
        return self._DnuDistance

    @DnuDistance.setter
    def DnuDistance(self, DnuDistance):
        """Sets the DnuDistance of this Part.

        Distance max Do not use: la pice n'est plus utilisable même en essai  après cette limite atteinte  # noqa: E501

        :param DnuDistance: The DnuDistance of this Part.  # noqa: E501
        :type: float
        """

        self._DnuDistance = DnuDistance

    @property
    def DnuTime(self):
        """Gets the DnuTime of this Part.  # noqa: E501

        Time max Do not use: la pice n'est plus utilisable même en essai  après cette limite atteinte  # noqa: E501

        :return: The DnuTime of this Part.  # noqa: E501
        :rtype: float
        """
        return self._DnuTime

    @DnuTime.setter
    def DnuTime(self, DnuTime):
        """Sets the DnuTime of this Part.

        Time max Do not use: la pice n'est plus utilisable même en essai  après cette limite atteinte  # noqa: E501

        :param DnuTime: The DnuTime of this Part.  # noqa: E501
        :type: float
        """

        self._DnuTime = DnuTime

    @property
    def DnuEnergy(self):
        """Gets the DnuEnergy of this Part.  # noqa: E501

        Energy max Do not use: la pice n'est plus utilisable même en essai  après cette limite atteinte  # noqa: E501

        :return: The DnuEnergy of this Part.  # noqa: E501
        :rtype: float
        """
        return self._DnuEnergy

    @DnuEnergy.setter
    def DnuEnergy(self, DnuEnergy):
        """Sets the DnuEnergy of this Part.

        Energy max Do not use: la pice n'est plus utilisable même en essai  après cette limite atteinte  # noqa: E501

        :param DnuEnergy: The DnuEnergy of this Part.  # noqa: E501
        :type: float
        """

        self._DnuEnergy = DnuEnergy

    @property
    def DnuDistanceFactored(self):
        """Gets the DnuDistanceFactored of this Part.  # noqa: E501

        Distance Factored max Do not use: la pice n'est plus utilisable même en essai  après cette limite atteinte  # noqa: E501

        :return: The DnuDistanceFactored of this Part.  # noqa: E501
        :rtype: float
        """
        return self._DnuDistanceFactored

    @DnuDistanceFactored.setter
    def DnuDistanceFactored(self, DnuDistanceFactored):
        """Sets the DnuDistanceFactored of this Part.

        Distance Factored max Do not use: la pice n'est plus utilisable même en essai  après cette limite atteinte  # noqa: E501

        :param DnuDistanceFactored: The DnuDistanceFactored of this Part.  # noqa: E501
        :type: float
        """

        self._DnuDistanceFactored = DnuDistanceFactored

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Part, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Part):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Part):
            return True

        return self.to_dict() != other.to_dict()

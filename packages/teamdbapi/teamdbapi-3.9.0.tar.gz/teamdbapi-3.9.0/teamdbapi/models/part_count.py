# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class PartCount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'PartParentId': 'str',
        'PartChildId': 'str',
        'Count': 'int',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str'
    }

    attribute_map = {
        'PartParentId': 'PartParentId',
        'PartChildId': 'PartChildId',
        'Count': 'Count',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser'
    }

    def __init__(self, PartParentId=None, PartChildId=None, Count=None, LastUpdateDateUtc=None, LastUpdateUser=None, _configuration=None):  # noqa: E501
        """PartCount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._PartParentId = None
        self._PartChildId = None
        self._Count = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self.discriminator = None

        self.PartParentId = PartParentId
        self.PartChildId = PartChildId
        self.Count = Count
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser

    @property
    def PartParentId(self):
        """Gets the PartParentId of this PartCount.  # noqa: E501

        Parent part unique identifier, common to all revisions of the same part  # noqa: E501

        :return: The PartParentId of this PartCount.  # noqa: E501
        :rtype: str
        """
        return self._PartParentId

    @PartParentId.setter
    def PartParentId(self, PartParentId):
        """Sets the PartParentId of this PartCount.

        Parent part unique identifier, common to all revisions of the same part  # noqa: E501

        :param PartParentId: The PartParentId of this PartCount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and PartParentId is None:
            raise ValueError("Invalid value for `PartParentId`, must not be `None`")  # noqa: E501

        self._PartParentId = PartParentId

    @property
    def PartChildId(self):
        """Gets the PartChildId of this PartCount.  # noqa: E501

        Child part unique identifier, common to all revisions of the same part  # noqa: E501

        :return: The PartChildId of this PartCount.  # noqa: E501
        :rtype: str
        """
        return self._PartChildId

    @PartChildId.setter
    def PartChildId(self, PartChildId):
        """Sets the PartChildId of this PartCount.

        Child part unique identifier, common to all revisions of the same part  # noqa: E501

        :param PartChildId: The PartChildId of this PartCount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and PartChildId is None:
            raise ValueError("Invalid value for `PartChildId`, must not be `None`")  # noqa: E501

        self._PartChildId = PartChildId

    @property
    def Count(self):
        """Gets the Count of this PartCount.  # noqa: E501

        TODO  Nombre d'occurence du part enfant dans le parent  # noqa: E501

        :return: The Count of this PartCount.  # noqa: E501
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        """Sets the Count of this PartCount.

        TODO  Nombre d'occurence du part enfant dans le parent  # noqa: E501

        :param Count: The Count of this PartCount.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and Count is None:
            raise ValueError("Invalid value for `Count`, must not be `None`")  # noqa: E501

        self._Count = Count

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this PartCount.  # noqa: E501

        Last partCount update utc date  # noqa: E501

        :return: The LastUpdateDateUtc of this PartCount.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this PartCount.

        Last partCount update utc date  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this PartCount.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this PartCount.  # noqa: E501

        The name of the user who performed the last update on the partCount  # noqa: E501

        :return: The LastUpdateUser of this PartCount.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this PartCount.

        The name of the user who performed the last update on the partCount  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this PartCount.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartCount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartCount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PartCount):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class RevisionValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Value': 'list[object]',
        'DataAxeX': 'list[float]',
        'DataAxeY': 'list[float]',
        'DataAxeZ': 'list[float]',
        'IsMainRevision': 'bool'
    }

    attribute_map = {
        'Value': 'Value',
        'DataAxeX': 'DataAxeX',
        'DataAxeY': 'DataAxeY',
        'DataAxeZ': 'DataAxeZ',
        'IsMainRevision': 'IsMainRevision'
    }

    def __init__(self, Value=None, DataAxeX=None, DataAxeY=None, DataAxeZ=None, IsMainRevision=None, _configuration=None):  # noqa: E501
        """RevisionValue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Value = None
        self._DataAxeX = None
        self._DataAxeY = None
        self._DataAxeZ = None
        self._IsMainRevision = None
        self.discriminator = None

        self.Value = Value
        if DataAxeX is not None:
            self.DataAxeX = DataAxeX
        if DataAxeY is not None:
            self.DataAxeY = DataAxeY
        if DataAxeZ is not None:
            self.DataAxeZ = DataAxeZ
        if IsMainRevision is not None:
            self.IsMainRevision = IsMainRevision

    @property
    def Value(self):
        """Gets the Value of this RevisionValue.  # noqa: E501

        The revision value.  Depending on the parameter definition the value can be a single value or 2D value or 3D.  For this reason, the Value is represented as a 3 dimensionals JSON array.  The value type can be a string or double depending on the parameter.  For this reason, you have to serialize the value with invariant culture format.  Decimal separator must be the point. The coma is use to separate the elements inside the array.  Single Value sample : [[[0.7]]]  1D Value sample : [[[0.0]],[[0.1]],[[0.2]]]  2D Value sample : [[[1.0],[1.0],[1.0]], [[1.0],[1.0],[1.0],[1.0]]]  # noqa: E501

        :return: The Value of this RevisionValue.  # noqa: E501
        :rtype: list[object]
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        """Sets the Value of this RevisionValue.

        The revision value.  Depending on the parameter definition the value can be a single value or 2D value or 3D.  For this reason, the Value is represented as a 3 dimensionals JSON array.  The value type can be a string or double depending on the parameter.  For this reason, you have to serialize the value with invariant culture format.  Decimal separator must be the point. The coma is use to separate the elements inside the array.  Single Value sample : [[[0.7]]]  1D Value sample : [[[0.0]],[[0.1]],[[0.2]]]  2D Value sample : [[[1.0],[1.0],[1.0]], [[1.0],[1.0],[1.0],[1.0]]]  # noqa: E501

        :param Value: The Value of this RevisionValue.  # noqa: E501
        :type: list[object]
        """
        if self._configuration.client_side_validation and Value is None:
            raise ValueError("Invalid value for `Value`, must not be `None`")  # noqa: E501

        self._Value = Value

    @property
    def DataAxeX(self):
        """Gets the DataAxeX of this RevisionValue.  # noqa: E501

        X axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :return: The DataAxeX of this RevisionValue.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeX

    @DataAxeX.setter
    def DataAxeX(self, DataAxeX):
        """Sets the DataAxeX of this RevisionValue.

        X axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :param DataAxeX: The DataAxeX of this RevisionValue.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeX = DataAxeX

    @property
    def DataAxeY(self):
        """Gets the DataAxeY of this RevisionValue.  # noqa: E501

        Y axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :return: The DataAxeY of this RevisionValue.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeY

    @DataAxeY.setter
    def DataAxeY(self, DataAxeY):
        """Sets the DataAxeY of this RevisionValue.

        Y axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :param DataAxeY: The DataAxeY of this RevisionValue.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeY = DataAxeY

    @property
    def DataAxeZ(self):
        """Gets the DataAxeZ of this RevisionValue.  # noqa: E501

        Z axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :return: The DataAxeZ of this RevisionValue.  # noqa: E501
        :rtype: list[float]
        """
        return self._DataAxeZ

    @DataAxeZ.setter
    def DataAxeZ(self, DataAxeZ):
        """Sets the DataAxeZ of this RevisionValue.

        Z axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :param DataAxeZ: The DataAxeZ of this RevisionValue.  # noqa: E501
        :type: list[float]
        """

        self._DataAxeZ = DataAxeZ

    @property
    def IsMainRevision(self):
        """Gets the IsMainRevision of this RevisionValue.  # noqa: E501

        When true, the revision is used in priority when importing revision from a Lifing mounting to a car parameters  assembly. Otherwise, the most recent revision will be used.  # noqa: E501

        :return: The IsMainRevision of this RevisionValue.  # noqa: E501
        :rtype: bool
        """
        return self._IsMainRevision

    @IsMainRevision.setter
    def IsMainRevision(self, IsMainRevision):
        """Sets the IsMainRevision of this RevisionValue.

        When true, the revision is used in priority when importing revision from a Lifing mounting to a car parameters  assembly. Otherwise, the most recent revision will be used.  # noqa: E501

        :param IsMainRevision: The IsMainRevision of this RevisionValue.  # noqa: E501
        :type: bool
        """

        self._IsMainRevision = IsMainRevision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RevisionValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RevisionValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RevisionValue):
            return True

        return self.to_dict() != other.to_dict()

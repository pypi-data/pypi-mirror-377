# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from teamdbapi.configuration import Configuration


class TrackLayout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'Id': 'str',
        'Name': 'str',
        'Length': 'float',
        'TrackId': 'str',
        'LastUpdateDateUtc': 'datetime',
        'LastUpdateUser': 'str',
        'Revision': 'int'
    }

    attribute_map = {
        'Id': 'Id',
        'Name': 'Name',
        'Length': 'Length',
        'TrackId': 'TrackId',
        'LastUpdateDateUtc': 'LastUpdateDateUtc',
        'LastUpdateUser': 'LastUpdateUser',
        'Revision': 'Revision'
    }

    def __init__(self, Id=None, Name=None, Length=None, TrackId=None, LastUpdateDateUtc=None, LastUpdateUser=None, Revision=None, _configuration=None):  # noqa: E501
        """TrackLayout - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._Id = None
        self._Name = None
        self._Length = None
        self._TrackId = None
        self._LastUpdateDateUtc = None
        self._LastUpdateUser = None
        self._Revision = None
        self.discriminator = None

        self.Id = Id
        self.Name = Name
        self.Length = Length
        self.TrackId = TrackId
        if LastUpdateDateUtc is not None:
            self.LastUpdateDateUtc = LastUpdateDateUtc
        if LastUpdateUser is not None:
            self.LastUpdateUser = LastUpdateUser
        if Revision is not None:
            self.Revision = Revision

    @property
    def Id(self):
        """Gets the Id of this TrackLayout.  # noqa: E501

        The unique track layout Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Track Layout.  # noqa: E501

        :return: The Id of this TrackLayout.  # noqa: E501
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        """Sets the Id of this TrackLayout.

        The unique track layout Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Track Layout.  # noqa: E501

        :param Id: The Id of this TrackLayout.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Id is None:
            raise ValueError("Invalid value for `Id`, must not be `None`")  # noqa: E501

        self._Id = Id

    @property
    def Name(self):
        """Gets the Name of this TrackLayout.  # noqa: E501

        The track layout name  # noqa: E501

        :return: The Name of this TrackLayout.  # noqa: E501
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """Sets the Name of this TrackLayout.

        The track layout name  # noqa: E501

        :param Name: The Name of this TrackLayout.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and Name is None:
            raise ValueError("Invalid value for `Name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                Name is not None and len(Name) < 1):
            raise ValueError("Invalid value for `Name`, length must be greater than or equal to `1`")  # noqa: E501

        self._Name = Name

    @property
    def Length(self):
        """Gets the Length of this TrackLayout.  # noqa: E501

        The track layout length in meters  # noqa: E501

        :return: The Length of this TrackLayout.  # noqa: E501
        :rtype: float
        """
        return self._Length

    @Length.setter
    def Length(self, Length):
        """Sets the Length of this TrackLayout.

        The track layout length in meters  # noqa: E501

        :param Length: The Length of this TrackLayout.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and Length is None:
            raise ValueError("Invalid value for `Length`, must not be `None`")  # noqa: E501

        self._Length = Length

    @property
    def TrackId(self):
        """Gets the TrackId of this TrackLayout.  # noqa: E501

        The track Id to which this track layout belongs.  # noqa: E501

        :return: The TrackId of this TrackLayout.  # noqa: E501
        :rtype: str
        """
        return self._TrackId

    @TrackId.setter
    def TrackId(self, TrackId):
        """Sets the TrackId of this TrackLayout.

        The track Id to which this track layout belongs.  # noqa: E501

        :param TrackId: The TrackId of this TrackLayout.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and TrackId is None:
            raise ValueError("Invalid value for `TrackId`, must not be `None`")  # noqa: E501

        self._TrackId = TrackId

    @property
    def LastUpdateDateUtc(self):
        """Gets the LastUpdateDateUtc of this TrackLayout.  # noqa: E501

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateDateUtc of this TrackLayout.  # noqa: E501
        :rtype: datetime
        """
        return self._LastUpdateDateUtc

    @LastUpdateDateUtc.setter
    def LastUpdateDateUtc(self, LastUpdateDateUtc):
        """Sets the LastUpdateDateUtc of this TrackLayout.

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateDateUtc: The LastUpdateDateUtc of this TrackLayout.  # noqa: E501
        :type: datetime
        """

        self._LastUpdateDateUtc = LastUpdateDateUtc

    @property
    def LastUpdateUser(self):
        """Gets the LastUpdateUser of this TrackLayout.  # noqa: E501

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The LastUpdateUser of this TrackLayout.  # noqa: E501
        :rtype: str
        """
        return self._LastUpdateUser

    @LastUpdateUser.setter
    def LastUpdateUser(self, LastUpdateUser):
        """Sets the LastUpdateUser of this TrackLayout.

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param LastUpdateUser: The LastUpdateUser of this TrackLayout.  # noqa: E501
        :type: str
        """

        self._LastUpdateUser = LastUpdateUser

    @property
    def Revision(self):
        """Gets the Revision of this TrackLayout.  # noqa: E501

        The revision number of the object.  # noqa: E501

        :return: The Revision of this TrackLayout.  # noqa: E501
        :rtype: int
        """
        return self._Revision

    @Revision.setter
    def Revision(self, Revision):
        """Sets the Revision of this TrackLayout.

        The revision number of the object.  # noqa: E501

        :param Revision: The Revision of this TrackLayout.  # noqa: E501
        :type: int
        """

        self._Revision = Revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackLayout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackLayout):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrackLayout):
            return True

        return self.to_dict() != other.to_dict()

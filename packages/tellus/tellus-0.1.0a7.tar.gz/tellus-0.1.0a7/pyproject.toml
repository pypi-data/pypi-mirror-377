[project]
authors = [{name = "Paul Gierz", email = "pgierz@awi.de"}]
name = "tellus"
requires-python = ">= 3.11"
dynamic = ["version"]
dependencies = [
    # Core CLI and utilities
    "click>=8.0.0",
    "rich>=13.0.0", 
    "rich-click>=1.8.9,<2",
    "fsspec>=2025.7.0,<2026",
    "requests>=2.32.4,<3",
    "loguru>=0.7.3,<0.8",
    "networkx>=3.0.0,<4",
    # Interactive CLI
    "questionary>=2.1.0,<3",
    "inquirerpy>=0.3.4,<0.4",
    "textual>=5.3.0,<6",
    # Data processing and domain layer
    "pydantic>=2.0.0",
    "nc-time-axis>=1.4.1,<2",
    # Database persistence
    "sqlalchemy>=2.0.0,<3",
    "psycopg[binary]>=3.1.0,<4",
    "aiosqlite>=0.19.0,<0.20",
    "alembic>=1.13.0,<2",
    "greenlet>=2.0.0,<4",
    # File system and remote access
    "paramiko>=3.5.1,<4",
    # Web API
    "fastapi>=0.116.1,<0.117",
    "uvicorn>=0.35.0,<0.36",
    "httpx>=0.28.1,<0.29",
    # Workflow and notebook support
    "snakemake>=9.9.0,<10",
    "nbconvert>=7.16.6,<8",
    "papermill>=2.6.0,<3",
    # Scientific computing (for workflows)
    "hypothesis>=6.136.9,<7",
]

[project.optional-dependencies]
# Removed api section - all dependencies are now in main [project] dependencies

[project.scripts]
tellus = "tellus.core.main:main"
tellus-chat = "tellus_chat.cli:main"

[tool.pytest.ini_options]
python_files = "test_*.py"
testpaths = ["tests"]
pythonpath = ["src"]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--durations=10",
    "-m", "not performance"
]   
markers = [
    "unit: Unit tests for individual components", 
    "integration: Integration tests for component interactions",
    "performance: Performance tests for large datasets (skipped by default - use -m performance to run)",
    "property: Property-based tests for data integrity",
    "earth_science: Tests specific to Earth science workflows",
    "archive: Tests for archive system components",
    "cache: Tests for caching functionality",
    "asyncio: Tests that use asyncio functionality",
    "location: Tests for multi-location functionality",
    "security: Security tests for defensive measures and vulnerability prevention",
    "slow: Tests that take more than 30 seconds",
    "network: Tests that require network access",
    "large_data: Tests that work with large datasets (>100MB)",
    "hpc: Tests for HPC environment scenarios",
    "timeout: Tests that should time out after a certain duration",
    "xarray: Tests that require xarray",
    "benchmark: Performance benchmark tests",
    "trio: Tests that use trio async framework"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore:numpy.ndarray size changed, may indicate binary incompatibility:RuntimeWarning"
    # "ignore::fsspec.exceptions.FSTimeoutError"
]

# [tool.pytest.ini_options.timeout]
# timeout = 300
# timeout_method = "thread"

[build-system]
build-backend = "hatchling.build"  
requires = ["hatchling", "hatch-vcs"]

[tool.hatch.build.targets.wheel]
packages = ["src/tellus"]

[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.0-dev"

[tool.pixi.workspace]
channels = ["conda-forge", "bioconda"]
platforms = ["osx-arm64", "linux-64"]

[tool.pixi.pypi-dependencies]
tellus = { path = ".", editable = true }
tellus-chat = { path = "./src/tellus_chat", editable = true }
# animavox = { path = "./vendor/animavox", editable = true }  # Future work: CRDT P2P sharing
# snakemake-storage-plugin-fsspec = { git = "git+https://github.com/pgierz/snakemake-storage-plugin-fsspec.git" }
# snakemake-storage-plugin-fsspec = { git = "git+https://github.com/pgierz/snakemake-storage-plugin-fsspec.git" }

[tool.pixi.tasks]
# sandbox = "python3 sandbox/manual_tests.py"
tellus = {cmd = "python -m tellus", cwd = "." }
sandbox = { cmd = "python3 my_tellus_script.py", cwd = "sandbox" , description = "Run a dummy script using tellus"}
api = { cmd = "python scripts/start_api.py", description = "Start the Tellus FastAPI server (auto-detects available port starting from 1968)" }
api-fixed = { cmd = "uvicorn src.tellus.interfaces.web.main:app --reload --host 0.0.0.0 --port 1968", description = "Start the Tellus FastAPI server on fixed port 1968" }

[tool.pixi.feature.test.pypi-dependencies]
factory-boy = "*"  # Move to Py-PI
testcontainers = "*"  # For database testing

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-timeout = "*"
pytest-mock = "*"
pytest-xdist = "*"
pytest-benchmark = "*"
hypothesis = "*"
faker = "*"
responses = "*"
freezegun = "*"
behave = "*"
numpy = ">=1.24,<2.0"
netcdf4 = ">=1.7.2,<2"
xarray = "*"
zarr = "*"
dask = "*"
jupyter = ">=1.1.1,<2"
ipykernel = ">=6.30.1,<7"
matplotlib = ">=3.10.5,<4"
cartopy = ">=0.25.0,<0.26"
h5netcdf = ">=1.6.4,<2"
nc-time-axis = ">=1.4.1,<2"
scipy = ">=1.16.0,<2"
seaborn = ">=0.13.2,<0.14"
httpx = ">=0.28.1,<0.29"
pytest-asyncio = ">=1.1.0,<2"

[tool.pixi.feature.test.tasks]
test = "pytest"
test-performance = { cmd = "pytest -m performance --timeout=600", description = "Run performance tests (may take 30+ minutes)" }
test-all = { cmd = "pytest -m 'performance or not performance'", description = "Run all tests including performance tests" }

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.environments]
test = ["test"]
test-py311 = ["py311", "test"]
test-py312 = ["py312", "test"]
docs = ["docs"]
build = ["build"]

[tool.pixi.dependencies]
python = "*"
# Note: Core dependencies are now defined in [project] dependencies above
# Pixi will automatically install those via the editable install

[tool.pixi.feature.docs.dependencies]
jupyter-book = "*"
pydata-sphinx-theme = "*"
sphinx = ">=4.0"
myst-nb = "*"
sphinx-copybutton = "*"
sphinx-design = "*"
jupyter = "*"

[tool.pixi.feature.docs.tasks]
docs-build = "jupyter-book build docs"
docs-clean = "jupyter-book clean docs"
docs-serve = { cmd = "python -m http.server 8000", cwd = "docs/_build/html", description = "Serve documentation locally" }

[tool.pixi.feature.build.pypi-dependencies]
build = "*"
twine = "*"
commitizen = "*"
setuptools-scm = "*"

[tool.pixi.feature.build.tasks]
# Version management
version-current = { cmd = "cz version --project", description = "Show current version" }
version-dry-run = { cmd = "cz bump --dry-run --prerelease alpha", description = "Preview what version bump would do" }
version-bump = { cmd = "cz bump --prerelease alpha", description = "Bump version based on conventional commits" }

# Building and publishing  
build-dist = "python -m build"
upload-test = "python -m twine upload --repository testpypi dist/*"
upload = "python -m twine upload dist/*"

# Complete release workflows
release = { cmd = "cz bump --prerelease alpha && python -m build", description = "Bump version, create tag, and build package" }
release-test = { cmd = "cz bump --prerelease alpha && python -m build && python -m twine upload --repository testpypi dist/*", description = "Full release to TestPyPI" }
release-prod = { cmd = "cz bump --prerelease alpha && python -m build && python -m twine upload dist/*", description = "Full release to PyPI" }

[tool.setuptools_scm]
# Dynamic versioning from git tags
root = "."

[tool.commitizen]
name = "cz_conventional_commits"
version_scheme = "pep440" 
version_provider = "scm"
update_changelog_on_bump = true
major_version_zero = true  
tag_format = "v$version"
bump_message = "bump: version $current_version â†’ $new_version"
# Stay in prerelease alpha mode (--prerelease alpha flag in tasks handles this)
prerelease = "alpha"


[project]
name = "tgedr-dataops2"
version = "0.0.4"
description = "this is a template for a python package"
authors = [
    {name = "developer",email = "developer@email.com"}
]
readme = "README.md"
requires-python = ">=3.11"

[tool.poetry]
package-mode = true
packages = [{include = "tgedr", from = "src"}]
include = [
    { path = "CHANGELOG", format = ["sdist", "wheel"] }
]

[tool.poetry.dependencies]
numpy = "~=2.2.6"
pandas = "~=2.2.3"
pyarrow = "~=20.0.0"
delta-spark = "~=3.3.2"
deltalake = "~=0.16.4"
pyspark = "==3.5.5"
great_expectations = "~=0.18.8"
openpyxl = "~=3.1.2"

[tool.poetry.group.dev.dependencies]
pytest = "~=7.4.3"
pytest-cov = "~=4.1.0"
pytest-mock = "~=3.14.0"
ruff = "^0.9.10"
pre-commit = "^4.2.0"

[tool.poetry.group.dev]
optional = true

# [tool.poetry.scripts]
# run = "ssds_pycommons.pip_entrypoint:entrypoint" 

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.run]
source = ["src/"]
include = ["src/*"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false
skip_empty = false

[tool.pytest.ini_options]
pythonpath = "."

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tests/",
    "typings/"
]

line-length = 120
indent-width = 4

[tool.ruff.lint]
select = ["ALL"]
ignore = ["D203", "S101", "D104", "INP001", "D213", "COM812", "I001", 
    "D401", "D407", "RET504", "PLR2004", "FA102", "E501", "EXE002", "PLR0913", 
    "PLR0912", "C901", "PLR0911", "G004", "TC002", "TRY003", "EM102", "ANN401",
    "N812", "SIM300", "N818", "ANN003", "ANN204"]
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

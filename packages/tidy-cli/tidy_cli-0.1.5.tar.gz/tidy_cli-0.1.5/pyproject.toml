#-------------------------------------------------------------------------------
# Project Configuration

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tidy-cli"
version = "0.1.5"
description = "CLI tool for managing linting, formatting and testing"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Alfredo Cinelli", email = "alfredocinelli96@gmail.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
]
requires-python = ">=3.10"
dependencies = [
    "rich>=13.0.0",
    "pytest>=8.4.1",
    "pytest-sugar>=1.0.0",
    "coverage[toml]>=7.9.2",
    "ruff>=0.12.2",
    "mypy>=1.16.1",
    "typer>=0.16.0",
    "pydoclint[flake8]>=0.6.6",
    "flake8-pyproject>=1.2.3",
]

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest-sugar>=1.0.0",
    "coverage[toml]>=7.6.1",
    "twine>=6.1.0",
    "ipython>=8.37.0",
    "typer>=0.16.0",
    "pydoclint[flake8]>=0.6.6",
    "flake8-pyproject>=1.2.3",
    "mkdocs>=1.6.1",
    "mkdocstrings>=0.30.0",
    "mkdocs-material>=9.6.19",
]

[project.scripts]
tidy-cli = "tidy_cli:app"

[project.urls]
Repository = "https://github.com/AlfredoCinelli/tidy-cli"
Documentation = "https://alfredocinelli.github.io/tidy-cli/"
Changelog = "https://github.com/AlfredoCinelli/tidy-cli/blob/main/CHANGELOG.md"

[tool.hatch.build.targets.wheel]
packages = ["src/tidy_cli"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

#-------------------------------------------------------------------------------
# Tool Configuration

[tool.ruff]
target-version = "py310"
line-length = 175

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
omit = [
    "tests/*",
    "**/__init__.py",
]

[tool.pydoclint]
style = "sphinx" # Sphinx format is the one adopted by the team
arg-type-hints-in-docstring = true # require type hints in docstring
arg-type-hints-in-signature = true # require type hints in signature
check-arg-order = true # require the order of signature to match the docstring one
skip-checking-short-docstrings = false # check, triggering a failure, functions/methods with summary only
skip-checking-raises = true # skip not annotated raises in function/method docstring
require-return-section-when-returning-nothing = false # none returning function/methods can skip the annotation in their docstrings
check-return-types = true # check the function/method return annotation
check-class-attributes = true # check attributes at class level with class top level docstring

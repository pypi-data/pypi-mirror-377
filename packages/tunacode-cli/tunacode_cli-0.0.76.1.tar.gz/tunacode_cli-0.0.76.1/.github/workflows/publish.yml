name: Publish to PyPI

"on":
  release:
    types: [published]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install hatch twine uv

      - name: Determine version from tag
        id: ver
        shell: bash
        run: |
          # Prefer release tag when present; fall back to ref name
          if [ "${{ github.event_name }}" = "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          TAG="${TAG#v}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Check version consistency
        shell: bash
        run: |
          TAG="${{ steps.ver.outputs.tag }}"
          # Extract only the [project] version from pyproject.toml
          PYPROJ=$(awk '
            /^\[project\]/ { in_proj=1; next }
            /^\[/ { if (in_proj) exit }
            in_proj && /^version =/ { match($0, /"([^"]+)"/, m); print m[1]; exit }
          ' pyproject.toml)
          # Extract APP_VERSION from constants
          CONST=$(awk -F '"' '/^APP_VERSION =/ { print $2; exit }' src/tunacode/constants.py)
          echo "Tag: $TAG"
          echo "pyproject.toml: $PYPROJ"
          echo "constants.APP_VERSION: $CONST"
          if [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            [[ "$TAG" == "$PYPROJ" ]] || { echo 'pyproject.toml version mismatch'; exit 1; }
            [[ "$TAG" == "$CONST" ]] || { echo 'constants.py APP_VERSION mismatch'; exit 1; }
          else
            echo "No semver tag detected; skipping tag consistency check."
          fi

      - name: Lint
        run: hatch run lint-check

      - name: Test
        run: hatch run test

      - name: Build
        run: hatch build

      # Preferred: API token secret
      - name: Publish to PyPI (API token)
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist/*

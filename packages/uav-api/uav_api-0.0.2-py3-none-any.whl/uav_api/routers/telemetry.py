from fastapi import APIRouter, Depends, HTTPException
from uav_api.copter import Copter
from uav_api.copter_connection import get_copter_instance

telemetry_router = APIRouter(
    prefix="/telemetry",
    tags=["telemetry"],
)

@telemetry_router.get("/general", tags=["telemetry"], summary="Returns Copter general information such as velocities, heading, throttle percentage and altitude")
def general_info(uav: Copter = Depends(get_copter_instance)):
    try:
        info = uav.get_general_info()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"GET_GENERAL_INFO FAIL: {e}")
    return {
        "result": "Success",
        "info": {
            "airspeed": info.airspeed,
            "groundspeed": info.groundspeed,
            "heading": info.heading,
            "throttle": info.throttle,
            "alt": info.alt
        }
    }

@telemetry_router.get("/gps", tags=["telemetry"], summary="Returns the copter current GPS information (the information provided by this endpoint is generated by the fusion of multiple sensor data such as GPS and accelerometers)")
def gps_info(uav: Copter = Depends(get_copter_instance)):
    try:
        info = uav.get_gps_info()
        res_obj = {
            "result": "Success", 
            "info": {
                "position": {
                    "lat": info.lat / 1.0e7, # to degrees
                    "lon": info.lon / 1.0e7, # to degrees
                    "alt": info.alt / 1000, # to meters
                    "relative_alt": info.relative_alt / 1000, # to meters
                },
                "velocity": {
                    "vx": info.vx / 100, # to meters per second
                    "vy": info.vy / 100, # to meters per second
                    "vz": info.vz / 100, # to meters per second
                },
                "heading": info.hdg / 100 # to degrees
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"GET_GPS_POSITION FAIL: {e}")
    return res_obj

@telemetry_router.get("/gps_raw", tags=["telemetry"], summary="Returns the copter current raw GPS information (the information provided by this endpoint is generated directly by the GPS sensor)")
def gps_raw(uav: Copter = Depends(get_copter_instance)):
    try:
        info = uav.get_raw_gps()
        res_obj = {
            "result": "success",
            "info": {
                "position": {
                    "lat": info.lat / 1.0e7, # to degrees
                    "lon": info.lon / 1.0e7, # to degrees
                    "alt": info.alt / 1000, # to meters
                },
                "velocity": {
                    "ground_speed": info.vel / 100, # to meters per second
                    "speed_direction": info.cog / 100 # to degrees
                },
                "satelites": info.satellites_visible
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"GET_GPS_RAW FAIL: {e}")
    return res_obj

@telemetry_router.get("/ned", tags=["telemetry"], summary="Returns the copter current NED information (the information provided by this endpoint is generated by the fusion of multiple sensor data such as GPS and accelerometers)")
def ned_info(uav: Copter = Depends(get_copter_instance)):
    try:
        info = uav.get_ned_info()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"GET_NED_INFO FAIL: {e}")
    return {
        "result": "Success", 
        "info": {
            "position": {
                "x": info.x,
                "y": info.y,
                "z": info.z,
            },
            "velocity": {
                "vx": info.vx,
                "vy": info.vy,
                "vz": info.vz
            }
        }}

@telemetry_router.get("/compass", tags=["telemetry"], summary="Returns compass calibration information")
def compass_info(uav: Copter = Depends(get_copter_instance)):
    try:
        info = uav.get_compass_info()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"GET_COMPASS_INFO FAIL: {e}")

@telemetry_router.get("/sys_status", tags=["telemetry"], summary="Returns raw SYS_STATUS message")
def sys_status(uav: Copter = Depends(get_copter_instance)):
    try:
        status_message = uav.get_raw_status_message()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"GET_RAW_SYS_STATUS FAIL: {e}")
    return {"result": "success", "status": status_message.to_dict()}

@telemetry_router.get("/sensor_status", tags=["telemetry"], summary="Returns sensors status extraced from SYS_STATUS message")
def sensor_status(uav: Copter = Depends(get_copter_instance)):
    try:
        sensor_status = uav.get_sensor_status()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"GET_SENSOR_STATUS FAIL: {e}")
    return {"result": "success", "status": sensor_status}

@telemetry_router.get("/battery_info", tags=["telemetry"], summary="Returns battery information extracted from SYS_STATUS message")
def battery_info(uav: Copter = Depends(get_copter_instance)):
    try:
        info = uav.get_battery_info()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"GET_BATTERY_INFO FAIL: {e}")
    return {"result": "success", "info": info}

@telemetry_router.get("/error_info", tags=["telemetry"], summary="Returns errors information extracted from SYS_STATUS message")
def error_info(uav: Copter = Depends(get_copter_instance)):
    try:
        info = uav.get_error_info()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"GET_ERROR_INFO FAIL: {e}")
    return {"result": "success", "info": info}
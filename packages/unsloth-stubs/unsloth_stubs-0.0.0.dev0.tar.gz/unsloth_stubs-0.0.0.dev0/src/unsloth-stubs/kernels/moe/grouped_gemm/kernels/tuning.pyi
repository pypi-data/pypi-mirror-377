import types
from _typeshed import Incomplete
from dataclasses import dataclass

@dataclass
class DeviceProperties:
    NUM_SM: int
    NUM_REGS: int
    SIZE_SMEM: int
    WARP_SIZE: int

def get_device_properties(): ...

@dataclass
class KernelConfig:
    BLOCK_SIZE_M: int = ...
    BLOCK_SIZE_N: int = ...
    BLOCK_SIZE_K: int = ...
    num_warps: int = ...
    num_stages: int = ...
    flatten: bool = ...
    permute_x: bool = ...
    permute_y: bool = ...
    fuse_mul_post: bool = ...
    use_tma_store: bool = ...
    def to_string(self, include_tuning_params: bool = False, include_tma: bool = False): ...

@dataclass
class KernelConfigForward(KernelConfig):
    use_tma_load_w: bool = ...
    use_tma_load_x: bool = ...

@dataclass
class KernelConfigBackward_dW(KernelConfig):
    use_tma_load_dy: bool = ...
    use_tma_load_x: bool = ...

@dataclass
class KernelConfigBackward_dX(KernelConfig):
    use_tma_load_dy: bool = ...
    use_tma_load_w: bool = ...

@dataclass
class KernelResult:
    torch_time: float
    triton_time: float
    speedup: float
    kernel_config: KernelConfig
    def to_dict(self): ...
    @staticmethod
    def to_dataframe(results: list['KernelResult'], sort_by: str = 'speedup', ascending: bool = False): ...
    @staticmethod
    def to_csv(results: list['KernelResult'], sort_by: str = 'speedup', ascending: bool = False, filename: str = 'results.csv'): ...
    @staticmethod
    def print_table(results: list['KernelResult'], sort_by: str = 'speedup', ascending: bool = False, num_results: int = 10): ...

def get_kernel_configs(BLOCK_M=..., BLOCK_N=..., BLOCK_K=..., num_warps=..., num_stages=..., use_tma_loads=..., fuse_permute=...): ...
def prune_kernel_configs_fwd(configs: list[KernelConfigForward]): ...
def prune_kernel_configs_backward_dX(configs: list[KernelConfigBackward_dX]): ...
def prune_kernel_configs_backward_dW(configs: list[KernelConfigBackward_dW]): ...

class TritonTuningContext:
    kernel_config: Incomplete
    success: bool
    def __init__(self, kernel_config: KernelConfig) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None): ...

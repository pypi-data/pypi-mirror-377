# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _jr_sdde
else:
    import _jr_sdde

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _jr_sdde.delete_SwigPyIterator

    def value(self):
        return _jr_sdde.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _jr_sdde.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _jr_sdde.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _jr_sdde.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _jr_sdde.SwigPyIterator_equal(self, x)

    def copy(self):
        return _jr_sdde.SwigPyIterator_copy(self)

    def next(self):
        return _jr_sdde.SwigPyIterator_next(self)

    def __next__(self):
        return _jr_sdde.SwigPyIterator___next__(self)

    def previous(self):
        return _jr_sdde.SwigPyIterator_previous(self)

    def advance(self, n):
        return _jr_sdde.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _jr_sdde.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _jr_sdde.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _jr_sdde.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _jr_sdde.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _jr_sdde.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _jr_sdde.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _jr_sdde:
_jr_sdde.SwigPyIterator_swigregister(SwigPyIterator)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _jr_sdde.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _jr_sdde.IntVector___nonzero__(self)

    def __bool__(self):
        return _jr_sdde.IntVector___bool__(self)

    def __len__(self):
        return _jr_sdde.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _jr_sdde.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _jr_sdde.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _jr_sdde.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _jr_sdde.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _jr_sdde.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _jr_sdde.IntVector___setitem__(self, *args)

    def pop(self):
        return _jr_sdde.IntVector_pop(self)

    def append(self, x):
        return _jr_sdde.IntVector_append(self, x)

    def empty(self):
        return _jr_sdde.IntVector_empty(self)

    def size(self):
        return _jr_sdde.IntVector_size(self)

    def swap(self, v):
        return _jr_sdde.IntVector_swap(self, v)

    def begin(self):
        return _jr_sdde.IntVector_begin(self)

    def end(self):
        return _jr_sdde.IntVector_end(self)

    def rbegin(self):
        return _jr_sdde.IntVector_rbegin(self)

    def rend(self):
        return _jr_sdde.IntVector_rend(self)

    def clear(self):
        return _jr_sdde.IntVector_clear(self)

    def get_allocator(self):
        return _jr_sdde.IntVector_get_allocator(self)

    def pop_back(self):
        return _jr_sdde.IntVector_pop_back(self)

    def erase(self, *args):
        return _jr_sdde.IntVector_erase(self, *args)

    def __init__(self, *args):
        _jr_sdde.IntVector_swiginit(self, _jr_sdde.new_IntVector(*args))

    def push_back(self, x):
        return _jr_sdde.IntVector_push_back(self, x)

    def front(self):
        return _jr_sdde.IntVector_front(self)

    def back(self):
        return _jr_sdde.IntVector_back(self)

    def assign(self, n, x):
        return _jr_sdde.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _jr_sdde.IntVector_resize(self, *args)

    def insert(self, *args):
        return _jr_sdde.IntVector_insert(self, *args)

    def reserve(self, n):
        return _jr_sdde.IntVector_reserve(self, n)

    def capacity(self):
        return _jr_sdde.IntVector_capacity(self)
    __swig_destroy__ = _jr_sdde.delete_IntVector

# Register IntVector in _jr_sdde:
_jr_sdde.IntVector_swigregister(IntVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _jr_sdde.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _jr_sdde.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _jr_sdde.DoubleVector___bool__(self)

    def __len__(self):
        return _jr_sdde.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _jr_sdde.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _jr_sdde.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _jr_sdde.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _jr_sdde.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _jr_sdde.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _jr_sdde.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _jr_sdde.DoubleVector_pop(self)

    def append(self, x):
        return _jr_sdde.DoubleVector_append(self, x)

    def empty(self):
        return _jr_sdde.DoubleVector_empty(self)

    def size(self):
        return _jr_sdde.DoubleVector_size(self)

    def swap(self, v):
        return _jr_sdde.DoubleVector_swap(self, v)

    def begin(self):
        return _jr_sdde.DoubleVector_begin(self)

    def end(self):
        return _jr_sdde.DoubleVector_end(self)

    def rbegin(self):
        return _jr_sdde.DoubleVector_rbegin(self)

    def rend(self):
        return _jr_sdde.DoubleVector_rend(self)

    def clear(self):
        return _jr_sdde.DoubleVector_clear(self)

    def get_allocator(self):
        return _jr_sdde.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _jr_sdde.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _jr_sdde.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _jr_sdde.DoubleVector_swiginit(self, _jr_sdde.new_DoubleVector(*args))

    def push_back(self, x):
        return _jr_sdde.DoubleVector_push_back(self, x)

    def front(self):
        return _jr_sdde.DoubleVector_front(self)

    def back(self):
        return _jr_sdde.DoubleVector_back(self)

    def assign(self, n, x):
        return _jr_sdde.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _jr_sdde.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _jr_sdde.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _jr_sdde.DoubleVector_reserve(self, n)

    def capacity(self):
        return _jr_sdde.DoubleVector_capacity(self)
    __swig_destroy__ = _jr_sdde.delete_DoubleVector

# Register DoubleVector in _jr_sdde:
_jr_sdde.DoubleVector_swigregister(DoubleVector)
class DoubleVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _jr_sdde.DoubleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _jr_sdde.DoubleVector2___nonzero__(self)

    def __bool__(self):
        return _jr_sdde.DoubleVector2___bool__(self)

    def __len__(self):
        return _jr_sdde.DoubleVector2___len__(self)

    def __getslice__(self, i, j):
        return _jr_sdde.DoubleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _jr_sdde.DoubleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _jr_sdde.DoubleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _jr_sdde.DoubleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _jr_sdde.DoubleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _jr_sdde.DoubleVector2___setitem__(self, *args)

    def pop(self):
        return _jr_sdde.DoubleVector2_pop(self)

    def append(self, x):
        return _jr_sdde.DoubleVector2_append(self, x)

    def empty(self):
        return _jr_sdde.DoubleVector2_empty(self)

    def size(self):
        return _jr_sdde.DoubleVector2_size(self)

    def swap(self, v):
        return _jr_sdde.DoubleVector2_swap(self, v)

    def begin(self):
        return _jr_sdde.DoubleVector2_begin(self)

    def end(self):
        return _jr_sdde.DoubleVector2_end(self)

    def rbegin(self):
        return _jr_sdde.DoubleVector2_rbegin(self)

    def rend(self):
        return _jr_sdde.DoubleVector2_rend(self)

    def clear(self):
        return _jr_sdde.DoubleVector2_clear(self)

    def get_allocator(self):
        return _jr_sdde.DoubleVector2_get_allocator(self)

    def pop_back(self):
        return _jr_sdde.DoubleVector2_pop_back(self)

    def erase(self, *args):
        return _jr_sdde.DoubleVector2_erase(self, *args)

    def __init__(self, *args):
        _jr_sdde.DoubleVector2_swiginit(self, _jr_sdde.new_DoubleVector2(*args))

    def push_back(self, x):
        return _jr_sdde.DoubleVector2_push_back(self, x)

    def front(self):
        return _jr_sdde.DoubleVector2_front(self)

    def back(self):
        return _jr_sdde.DoubleVector2_back(self)

    def assign(self, n, x):
        return _jr_sdde.DoubleVector2_assign(self, n, x)

    def resize(self, *args):
        return _jr_sdde.DoubleVector2_resize(self, *args)

    def insert(self, *args):
        return _jr_sdde.DoubleVector2_insert(self, *args)

    def reserve(self, n):
        return _jr_sdde.DoubleVector2_reserve(self, n)

    def capacity(self):
        return _jr_sdde.DoubleVector2_capacity(self)
    __swig_destroy__ = _jr_sdde.delete_DoubleVector2

# Register DoubleVector2 in _jr_sdde:
_jr_sdde.DoubleVector2_swigregister(DoubleVector2)
class SingleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _jr_sdde.SingleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _jr_sdde.SingleVector___nonzero__(self)

    def __bool__(self):
        return _jr_sdde.SingleVector___bool__(self)

    def __len__(self):
        return _jr_sdde.SingleVector___len__(self)

    def __getslice__(self, i, j):
        return _jr_sdde.SingleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _jr_sdde.SingleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _jr_sdde.SingleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _jr_sdde.SingleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _jr_sdde.SingleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _jr_sdde.SingleVector___setitem__(self, *args)

    def pop(self):
        return _jr_sdde.SingleVector_pop(self)

    def append(self, x):
        return _jr_sdde.SingleVector_append(self, x)

    def empty(self):
        return _jr_sdde.SingleVector_empty(self)

    def size(self):
        return _jr_sdde.SingleVector_size(self)

    def swap(self, v):
        return _jr_sdde.SingleVector_swap(self, v)

    def begin(self):
        return _jr_sdde.SingleVector_begin(self)

    def end(self):
        return _jr_sdde.SingleVector_end(self)

    def rbegin(self):
        return _jr_sdde.SingleVector_rbegin(self)

    def rend(self):
        return _jr_sdde.SingleVector_rend(self)

    def clear(self):
        return _jr_sdde.SingleVector_clear(self)

    def get_allocator(self):
        return _jr_sdde.SingleVector_get_allocator(self)

    def pop_back(self):
        return _jr_sdde.SingleVector_pop_back(self)

    def erase(self, *args):
        return _jr_sdde.SingleVector_erase(self, *args)

    def __init__(self, *args):
        _jr_sdde.SingleVector_swiginit(self, _jr_sdde.new_SingleVector(*args))

    def push_back(self, x):
        return _jr_sdde.SingleVector_push_back(self, x)

    def front(self):
        return _jr_sdde.SingleVector_front(self)

    def back(self):
        return _jr_sdde.SingleVector_back(self)

    def assign(self, n, x):
        return _jr_sdde.SingleVector_assign(self, n, x)

    def resize(self, *args):
        return _jr_sdde.SingleVector_resize(self, *args)

    def insert(self, *args):
        return _jr_sdde.SingleVector_insert(self, *args)

    def reserve(self, n):
        return _jr_sdde.SingleVector_reserve(self, n)

    def capacity(self):
        return _jr_sdde.SingleVector_capacity(self)
    __swig_destroy__ = _jr_sdde.delete_SingleVector

# Register SingleVector in _jr_sdde:
_jr_sdde.SingleVector_swigregister(SingleVector)
class SingleVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _jr_sdde.SingleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _jr_sdde.SingleVector2___nonzero__(self)

    def __bool__(self):
        return _jr_sdde.SingleVector2___bool__(self)

    def __len__(self):
        return _jr_sdde.SingleVector2___len__(self)

    def __getslice__(self, i, j):
        return _jr_sdde.SingleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _jr_sdde.SingleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _jr_sdde.SingleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _jr_sdde.SingleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _jr_sdde.SingleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _jr_sdde.SingleVector2___setitem__(self, *args)

    def pop(self):
        return _jr_sdde.SingleVector2_pop(self)

    def append(self, x):
        return _jr_sdde.SingleVector2_append(self, x)

    def empty(self):
        return _jr_sdde.SingleVector2_empty(self)

    def size(self):
        return _jr_sdde.SingleVector2_size(self)

    def swap(self, v):
        return _jr_sdde.SingleVector2_swap(self, v)

    def begin(self):
        return _jr_sdde.SingleVector2_begin(self)

    def end(self):
        return _jr_sdde.SingleVector2_end(self)

    def rbegin(self):
        return _jr_sdde.SingleVector2_rbegin(self)

    def rend(self):
        return _jr_sdde.SingleVector2_rend(self)

    def clear(self):
        return _jr_sdde.SingleVector2_clear(self)

    def get_allocator(self):
        return _jr_sdde.SingleVector2_get_allocator(self)

    def pop_back(self):
        return _jr_sdde.SingleVector2_pop_back(self)

    def erase(self, *args):
        return _jr_sdde.SingleVector2_erase(self, *args)

    def __init__(self, *args):
        _jr_sdde.SingleVector2_swiginit(self, _jr_sdde.new_SingleVector2(*args))

    def push_back(self, x):
        return _jr_sdde.SingleVector2_push_back(self, x)

    def front(self):
        return _jr_sdde.SingleVector2_front(self)

    def back(self):
        return _jr_sdde.SingleVector2_back(self)

    def assign(self, n, x):
        return _jr_sdde.SingleVector2_assign(self, n, x)

    def resize(self, *args):
        return _jr_sdde.SingleVector2_resize(self, *args)

    def insert(self, *args):
        return _jr_sdde.SingleVector2_insert(self, *args)

    def reserve(self, n):
        return _jr_sdde.SingleVector2_reserve(self, n)

    def capacity(self):
        return _jr_sdde.SingleVector2_capacity(self)
    __swig_destroy__ = _jr_sdde.delete_SingleVector2

# Register SingleVector2 in _jr_sdde:
_jr_sdde.SingleVector2_swigregister(SingleVector2)
class JR_sdde(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nstart = property(_jr_sdde.JR_sdde_nstart_get, _jr_sdde.JR_sdde_nstart_set)
    sti_vector = property(_jr_sdde.JR_sdde_sti_vector_get, _jr_sdde.JR_sdde_sti_vector_set)

    def __init__(self, dt, y0, adj, delays, coupling, dimension, A, B, a, b, r, v0, vmax, C0, C1, C2, C3, sti_amp, sti_gain, sti_ti, sti_duration, noise_mu, noise_sigma, t_transition=1.0, t_final=10.0, noise_seed=0):
        _jr_sdde.JR_sdde_swiginit(self, _jr_sdde.new_JR_sdde(dt, y0, adj, delays, coupling, dimension, A, B, a, b, r, v0, vmax, C0, C1, C2, C3, sti_amp, sti_gain, sti_ti, sti_duration, noise_mu, noise_sigma, t_transition, t_final, noise_seed))

    def set_history(self, hist):
        return _jr_sdde.JR_sdde_set_history(self, hist)

    def prepare_sti(self, sti_amp, sti_gain, sti_ti, sti_duration):
        return _jr_sdde.JR_sdde_prepare_sti(self, sti_amp, sti_gain, sti_ti, sti_duration)

    def _sigma(self, v):
        return _jr_sdde.JR_sdde__sigma(self, v)

    def f_sys(self, t, n):
        return _jr_sdde.JR_sdde_f_sys(self, t, n)

    def euler(self, t, n):
        return _jr_sdde.JR_sdde_euler(self, t, n)

    def heun(self, t, n):
        return _jr_sdde.JR_sdde_heun(self, t, n)

    def integrate(self, method):
        return _jr_sdde.JR_sdde_integrate(self, method)

    def get_t(self):
        return _jr_sdde.JR_sdde_get_t(self)

    def get_y(self):
        return _jr_sdde.JR_sdde_get_y(self)

    def get_sti_vector(self):
        return _jr_sdde.JR_sdde_get_sti_vector(self)
    __swig_destroy__ = _jr_sdde.delete_JR_sdde

# Register JR_sdde in _jr_sdde:
_jr_sdde.JR_sdde_swigregister(JR_sdde)


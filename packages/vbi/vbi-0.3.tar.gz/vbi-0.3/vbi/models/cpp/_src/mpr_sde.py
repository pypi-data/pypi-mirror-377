# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mpr_sde
else:
    import _mpr_sde

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mpr_sde.delete_SwigPyIterator

    def value(self):
        return _mpr_sde.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mpr_sde.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mpr_sde.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mpr_sde.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mpr_sde.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mpr_sde.SwigPyIterator_copy(self)

    def next(self):
        return _mpr_sde.SwigPyIterator_next(self)

    def __next__(self):
        return _mpr_sde.SwigPyIterator___next__(self)

    def previous(self):
        return _mpr_sde.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mpr_sde.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mpr_sde.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mpr_sde.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mpr_sde.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mpr_sde.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mpr_sde.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mpr_sde.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _mpr_sde:
_mpr_sde.SwigPyIterator_swigregister(SwigPyIterator)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mpr_sde.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mpr_sde.IntVector___nonzero__(self)

    def __bool__(self):
        return _mpr_sde.IntVector___bool__(self)

    def __len__(self):
        return _mpr_sde.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _mpr_sde.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mpr_sde.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mpr_sde.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mpr_sde.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mpr_sde.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mpr_sde.IntVector___setitem__(self, *args)

    def pop(self):
        return _mpr_sde.IntVector_pop(self)

    def append(self, x):
        return _mpr_sde.IntVector_append(self, x)

    def empty(self):
        return _mpr_sde.IntVector_empty(self)

    def size(self):
        return _mpr_sde.IntVector_size(self)

    def swap(self, v):
        return _mpr_sde.IntVector_swap(self, v)

    def begin(self):
        return _mpr_sde.IntVector_begin(self)

    def end(self):
        return _mpr_sde.IntVector_end(self)

    def rbegin(self):
        return _mpr_sde.IntVector_rbegin(self)

    def rend(self):
        return _mpr_sde.IntVector_rend(self)

    def clear(self):
        return _mpr_sde.IntVector_clear(self)

    def get_allocator(self):
        return _mpr_sde.IntVector_get_allocator(self)

    def pop_back(self):
        return _mpr_sde.IntVector_pop_back(self)

    def erase(self, *args):
        return _mpr_sde.IntVector_erase(self, *args)

    def __init__(self, *args):
        _mpr_sde.IntVector_swiginit(self, _mpr_sde.new_IntVector(*args))

    def push_back(self, x):
        return _mpr_sde.IntVector_push_back(self, x)

    def front(self):
        return _mpr_sde.IntVector_front(self)

    def back(self):
        return _mpr_sde.IntVector_back(self)

    def assign(self, n, x):
        return _mpr_sde.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _mpr_sde.IntVector_resize(self, *args)

    def insert(self, *args):
        return _mpr_sde.IntVector_insert(self, *args)

    def reserve(self, n):
        return _mpr_sde.IntVector_reserve(self, n)

    def capacity(self):
        return _mpr_sde.IntVector_capacity(self)
    __swig_destroy__ = _mpr_sde.delete_IntVector

# Register IntVector in _mpr_sde:
_mpr_sde.IntVector_swigregister(IntVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mpr_sde.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mpr_sde.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _mpr_sde.DoubleVector___bool__(self)

    def __len__(self):
        return _mpr_sde.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _mpr_sde.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mpr_sde.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mpr_sde.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mpr_sde.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mpr_sde.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mpr_sde.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _mpr_sde.DoubleVector_pop(self)

    def append(self, x):
        return _mpr_sde.DoubleVector_append(self, x)

    def empty(self):
        return _mpr_sde.DoubleVector_empty(self)

    def size(self):
        return _mpr_sde.DoubleVector_size(self)

    def swap(self, v):
        return _mpr_sde.DoubleVector_swap(self, v)

    def begin(self):
        return _mpr_sde.DoubleVector_begin(self)

    def end(self):
        return _mpr_sde.DoubleVector_end(self)

    def rbegin(self):
        return _mpr_sde.DoubleVector_rbegin(self)

    def rend(self):
        return _mpr_sde.DoubleVector_rend(self)

    def clear(self):
        return _mpr_sde.DoubleVector_clear(self)

    def get_allocator(self):
        return _mpr_sde.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _mpr_sde.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _mpr_sde.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _mpr_sde.DoubleVector_swiginit(self, _mpr_sde.new_DoubleVector(*args))

    def push_back(self, x):
        return _mpr_sde.DoubleVector_push_back(self, x)

    def front(self):
        return _mpr_sde.DoubleVector_front(self)

    def back(self):
        return _mpr_sde.DoubleVector_back(self)

    def assign(self, n, x):
        return _mpr_sde.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _mpr_sde.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _mpr_sde.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _mpr_sde.DoubleVector_reserve(self, n)

    def capacity(self):
        return _mpr_sde.DoubleVector_capacity(self)
    __swig_destroy__ = _mpr_sde.delete_DoubleVector

# Register DoubleVector in _mpr_sde:
_mpr_sde.DoubleVector_swigregister(DoubleVector)
class DoubleVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mpr_sde.DoubleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mpr_sde.DoubleVector2___nonzero__(self)

    def __bool__(self):
        return _mpr_sde.DoubleVector2___bool__(self)

    def __len__(self):
        return _mpr_sde.DoubleVector2___len__(self)

    def __getslice__(self, i, j):
        return _mpr_sde.DoubleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mpr_sde.DoubleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mpr_sde.DoubleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mpr_sde.DoubleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mpr_sde.DoubleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mpr_sde.DoubleVector2___setitem__(self, *args)

    def pop(self):
        return _mpr_sde.DoubleVector2_pop(self)

    def append(self, x):
        return _mpr_sde.DoubleVector2_append(self, x)

    def empty(self):
        return _mpr_sde.DoubleVector2_empty(self)

    def size(self):
        return _mpr_sde.DoubleVector2_size(self)

    def swap(self, v):
        return _mpr_sde.DoubleVector2_swap(self, v)

    def begin(self):
        return _mpr_sde.DoubleVector2_begin(self)

    def end(self):
        return _mpr_sde.DoubleVector2_end(self)

    def rbegin(self):
        return _mpr_sde.DoubleVector2_rbegin(self)

    def rend(self):
        return _mpr_sde.DoubleVector2_rend(self)

    def clear(self):
        return _mpr_sde.DoubleVector2_clear(self)

    def get_allocator(self):
        return _mpr_sde.DoubleVector2_get_allocator(self)

    def pop_back(self):
        return _mpr_sde.DoubleVector2_pop_back(self)

    def erase(self, *args):
        return _mpr_sde.DoubleVector2_erase(self, *args)

    def __init__(self, *args):
        _mpr_sde.DoubleVector2_swiginit(self, _mpr_sde.new_DoubleVector2(*args))

    def push_back(self, x):
        return _mpr_sde.DoubleVector2_push_back(self, x)

    def front(self):
        return _mpr_sde.DoubleVector2_front(self)

    def back(self):
        return _mpr_sde.DoubleVector2_back(self)

    def assign(self, n, x):
        return _mpr_sde.DoubleVector2_assign(self, n, x)

    def resize(self, *args):
        return _mpr_sde.DoubleVector2_resize(self, *args)

    def insert(self, *args):
        return _mpr_sde.DoubleVector2_insert(self, *args)

    def reserve(self, n):
        return _mpr_sde.DoubleVector2_reserve(self, n)

    def capacity(self):
        return _mpr_sde.DoubleVector2_capacity(self)
    __swig_destroy__ = _mpr_sde.delete_DoubleVector2

# Register DoubleVector2 in _mpr_sde:
_mpr_sde.DoubleVector2_swigregister(DoubleVector2)
class SingleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mpr_sde.SingleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mpr_sde.SingleVector___nonzero__(self)

    def __bool__(self):
        return _mpr_sde.SingleVector___bool__(self)

    def __len__(self):
        return _mpr_sde.SingleVector___len__(self)

    def __getslice__(self, i, j):
        return _mpr_sde.SingleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mpr_sde.SingleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mpr_sde.SingleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mpr_sde.SingleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mpr_sde.SingleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mpr_sde.SingleVector___setitem__(self, *args)

    def pop(self):
        return _mpr_sde.SingleVector_pop(self)

    def append(self, x):
        return _mpr_sde.SingleVector_append(self, x)

    def empty(self):
        return _mpr_sde.SingleVector_empty(self)

    def size(self):
        return _mpr_sde.SingleVector_size(self)

    def swap(self, v):
        return _mpr_sde.SingleVector_swap(self, v)

    def begin(self):
        return _mpr_sde.SingleVector_begin(self)

    def end(self):
        return _mpr_sde.SingleVector_end(self)

    def rbegin(self):
        return _mpr_sde.SingleVector_rbegin(self)

    def rend(self):
        return _mpr_sde.SingleVector_rend(self)

    def clear(self):
        return _mpr_sde.SingleVector_clear(self)

    def get_allocator(self):
        return _mpr_sde.SingleVector_get_allocator(self)

    def pop_back(self):
        return _mpr_sde.SingleVector_pop_back(self)

    def erase(self, *args):
        return _mpr_sde.SingleVector_erase(self, *args)

    def __init__(self, *args):
        _mpr_sde.SingleVector_swiginit(self, _mpr_sde.new_SingleVector(*args))

    def push_back(self, x):
        return _mpr_sde.SingleVector_push_back(self, x)

    def front(self):
        return _mpr_sde.SingleVector_front(self)

    def back(self):
        return _mpr_sde.SingleVector_back(self)

    def assign(self, n, x):
        return _mpr_sde.SingleVector_assign(self, n, x)

    def resize(self, *args):
        return _mpr_sde.SingleVector_resize(self, *args)

    def insert(self, *args):
        return _mpr_sde.SingleVector_insert(self, *args)

    def reserve(self, n):
        return _mpr_sde.SingleVector_reserve(self, n)

    def capacity(self):
        return _mpr_sde.SingleVector_capacity(self)
    __swig_destroy__ = _mpr_sde.delete_SingleVector

# Register SingleVector in _mpr_sde:
_mpr_sde.SingleVector_swigregister(SingleVector)
class SingleVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mpr_sde.SingleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mpr_sde.SingleVector2___nonzero__(self)

    def __bool__(self):
        return _mpr_sde.SingleVector2___bool__(self)

    def __len__(self):
        return _mpr_sde.SingleVector2___len__(self)

    def __getslice__(self, i, j):
        return _mpr_sde.SingleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mpr_sde.SingleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mpr_sde.SingleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mpr_sde.SingleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mpr_sde.SingleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mpr_sde.SingleVector2___setitem__(self, *args)

    def pop(self):
        return _mpr_sde.SingleVector2_pop(self)

    def append(self, x):
        return _mpr_sde.SingleVector2_append(self, x)

    def empty(self):
        return _mpr_sde.SingleVector2_empty(self)

    def size(self):
        return _mpr_sde.SingleVector2_size(self)

    def swap(self, v):
        return _mpr_sde.SingleVector2_swap(self, v)

    def begin(self):
        return _mpr_sde.SingleVector2_begin(self)

    def end(self):
        return _mpr_sde.SingleVector2_end(self)

    def rbegin(self):
        return _mpr_sde.SingleVector2_rbegin(self)

    def rend(self):
        return _mpr_sde.SingleVector2_rend(self)

    def clear(self):
        return _mpr_sde.SingleVector2_clear(self)

    def get_allocator(self):
        return _mpr_sde.SingleVector2_get_allocator(self)

    def pop_back(self):
        return _mpr_sde.SingleVector2_pop_back(self)

    def erase(self, *args):
        return _mpr_sde.SingleVector2_erase(self, *args)

    def __init__(self, *args):
        _mpr_sde.SingleVector2_swiginit(self, _mpr_sde.new_SingleVector2(*args))

    def push_back(self, x):
        return _mpr_sde.SingleVector2_push_back(self, x)

    def front(self):
        return _mpr_sde.SingleVector2_front(self)

    def back(self):
        return _mpr_sde.SingleVector2_back(self)

    def assign(self, n, x):
        return _mpr_sde.SingleVector2_assign(self, n, x)

    def resize(self, *args):
        return _mpr_sde.SingleVector2_resize(self, *args)

    def insert(self, *args):
        return _mpr_sde.SingleVector2_insert(self, *args)

    def reserve(self, n):
        return _mpr_sde.SingleVector2_reserve(self, n)

    def capacity(self):
        return _mpr_sde.SingleVector2_capacity(self)
    __swig_destroy__ = _mpr_sde.delete_SingleVector2

# Register SingleVector2 in _mpr_sde:
_mpr_sde.SingleVector2_swigregister(SingleVector2)
class BoldParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kappa = property(_mpr_sde.BoldParams_kappa_get, _mpr_sde.BoldParams_kappa_set)
    gamma = property(_mpr_sde.BoldParams_gamma_get, _mpr_sde.BoldParams_gamma_set)
    tau = property(_mpr_sde.BoldParams_tau_get, _mpr_sde.BoldParams_tau_set)
    alpha = property(_mpr_sde.BoldParams_alpha_get, _mpr_sde.BoldParams_alpha_set)
    epsilon = property(_mpr_sde.BoldParams_epsilon_get, _mpr_sde.BoldParams_epsilon_set)
    Eo = property(_mpr_sde.BoldParams_Eo_get, _mpr_sde.BoldParams_Eo_set)
    TE = property(_mpr_sde.BoldParams_TE_get, _mpr_sde.BoldParams_TE_set)
    vo = property(_mpr_sde.BoldParams_vo_get, _mpr_sde.BoldParams_vo_set)
    r0 = property(_mpr_sde.BoldParams_r0_get, _mpr_sde.BoldParams_r0_set)
    theta0 = property(_mpr_sde.BoldParams_theta0_get, _mpr_sde.BoldParams_theta0_set)
    rtol = property(_mpr_sde.BoldParams_rtol_get, _mpr_sde.BoldParams_rtol_set)
    atol = property(_mpr_sde.BoldParams_atol_get, _mpr_sde.BoldParams_atol_set)
    dt_b = property(_mpr_sde.BoldParams_dt_b_get, _mpr_sde.BoldParams_dt_b_set)
    K1 = property(_mpr_sde.BoldParams_K1_get, _mpr_sde.BoldParams_K1_set)
    K2 = property(_mpr_sde.BoldParams_K2_get, _mpr_sde.BoldParams_K2_set)
    K3 = property(_mpr_sde.BoldParams_K3_get, _mpr_sde.BoldParams_K3_set)
    ialpha = property(_mpr_sde.BoldParams_ialpha_get, _mpr_sde.BoldParams_ialpha_set)

    def __init__(self, *args):
        _mpr_sde.BoldParams_swiginit(self, _mpr_sde.new_BoldParams(*args))
    __swig_destroy__ = _mpr_sde.delete_BoldParams

# Register BoldParams in _mpr_sde:
_mpr_sde.BoldParams_swigregister(BoldParams)
class MPR_sde(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bold_d = property(_mpr_sde.MPR_sde_bold_d_get, _mpr_sde.MPR_sde_bold_d_set)
    bold_t = property(_mpr_sde.MPR_sde_bold_t_get, _mpr_sde.MPR_sde_bold_t_set)
    r_d = property(_mpr_sde.MPR_sde_r_d_get, _mpr_sde.MPR_sde_r_d_set)
    r_t = property(_mpr_sde.MPR_sde_r_t_get, _mpr_sde.MPR_sde_r_t_set)

    def __init__(self, dt, dt_b, rv_decimate, weights, initial_state, delta, tau, eta, J, i_app, noise_amp, G, t_end, t_cut, tr, RECORD_RV, RECORD_BOLD, fix_seed, bp):
        _mpr_sde.MPR_sde_swiginit(self, _mpr_sde.new_MPR_sde(dt, dt_b, rv_decimate, weights, initial_state, delta, tau, eta, J, i_app, noise_amp, G, t_end, t_cut, tr, RECORD_RV, RECORD_BOLD, fix_seed, bp))

    def f_mpr(self, x, dxdt, t):
        return _mpr_sde.MPR_sde_f_mpr(self, x, dxdt, t)

    def heun_step(self, y, t):
        return _mpr_sde.MPR_sde_heun_step(self, y, t)

    def bold_step(self, r_in, s, f, ftilde, vtilde, qtilde, v, q, dtt):
        return _mpr_sde.MPR_sde_bold_step(self, r_in, s, f, ftilde, vtilde, qtilde, v, q, dtt)

    def integrate(self):
        return _mpr_sde.MPR_sde_integrate(self)

    def get_bold_d(self):
        return _mpr_sde.MPR_sde_get_bold_d(self)

    def get_bold_t(self):
        return _mpr_sde.MPR_sde_get_bold_t(self)

    def get_r_d(self):
        return _mpr_sde.MPR_sde_get_r_d(self)

    def get_r_t(self):
        return _mpr_sde.MPR_sde_get_r_t(self)
    __swig_destroy__ = _mpr_sde.delete_MPR_sde

# Register MPR_sde in _mpr_sde:
_mpr_sde.MPR_sde_swigregister(MPR_sde)


{"abi":[{"type":"function","name":"batchGetBalance","inputs":[{"name":"_tokens","type":"address[]","internalType":"address[]"},{"name":"_partner","type":"address","internalType":"address"}],"outputs":[{"name":"_fees","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"batchWithdrawAllERC20","inputs":[{"name":"_tokens","type":"address[]","internalType":"address[]"},{"name":"_recipient","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"batchWithdrawSomeERC20","inputs":[{"name":"_tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"_tokenAmounts","type":"uint256[]","internalType":"uint256[]"},{"name":"_recipient","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"getBalance","inputs":[{"name":"_token","type":"address","internalType":"contract IERC20"},{"name":"_partner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getUnallocatedFees","inputs":[{"name":"_token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"registerFee","inputs":[{"name":"_account","type":"address","internalType":"address"},{"name":"_token","type":"address","internalType":"contract IERC20"},{"name":"_fee","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdrawAllERC20","inputs":[{"name":"_token","type":"address","internalType":"contract IERC20"},{"name":"_recipient","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"withdrawSomeERC20","inputs":[{"name":"_token","type":"address","internalType":"contract IERC20"},{"name":"_tokenAmount","type":"uint256","internalType":"uint256"},{"name":"_recipient","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"batchGetBalance(address[],address)":"b0a65b17","batchWithdrawAllERC20(address[],address)":"bbedcc40","batchWithdrawSomeERC20(address[],uint256[],address)":"ffcc41ee","getBalance(address,address)":"d4fac45d","getUnallocatedFees(address)":"f89abe8c","registerFee(address,address,uint256)":"d1f4354b","withdrawAllERC20(address,address)":"ae11c7f8","withdrawSomeERC20(address,uint256,address)":"8f79528c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"batchGetBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"batchWithdrawAllERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"batchWithdrawSomeERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUnallocatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"registerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawAllERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawSomeERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchGetBalance(address[],address)\":{\"details\":\"retrieves the balance of ERC20 token fee amount for a partner in batch\",\"params\":{\"_partner\":\"account address of the partner\",\"_tokens\":\"list of ERC20 token addresses\"},\"returns\":{\"_fees\":\"array of the token amount\"}},\"batchWithdrawAllERC20(address[],address)\":{\"details\":\"transfers ERC20 token balance to the caller's account      the call will fail if withdrawer have zero balance in the contract\",\"params\":{\"_recipient\":\"address of recipient\",\"_tokens\":\"list of addresses of the ERC20 token\"},\"returns\":{\"_0\":\"true if the withdraw was successfull\"}},\"batchWithdrawSomeERC20(address[],uint256[],address)\":{\"details\":\"transfers ERC20 token balance to the caller's account      the call will fail if withdrawer have zero balance in the contract\",\"params\":{\"_recipient\":\"destination account addresses\",\"_tokenAmounts\":\"array of amounts\",\"_tokens\":\"address of the ERC20 tokens\"},\"returns\":{\"_0\":\"true if the withdraw was successfull\"}},\"getBalance(address,address)\":{\"details\":\"retrieves the balance of ERC20 token fee amount for a partner\",\"params\":{\"_partner\":\"account address of the partner\",\"_token\":\"address of the ERC20 token\"},\"returns\":{\"_0\":\"amount of balance\"}},\"getUnallocatedFees(address)\":{\"params\":{\"_token\":\"address of the ERC20 token\"},\"returns\":{\"_0\":\"amount of unallocated token in fees\"}},\"registerFee(address,address,uint256)\":{\"details\":\"only callable by AugustusSwapper contract\",\"params\":{\"_account\":\"account address used to withdraw fees\",\"_fee\":\"fee amount in token\",\"_token\":\"token address\"}},\"withdrawAllERC20(address,address)\":{\"details\":\"transfers ERC20 token balance to the caller's account      the call will fail if withdrawer have zero balance in the contract\",\"params\":{\"_recipient\":\"address\",\"_token\":\"address of the ERC20 token\"},\"returns\":{\"_0\":\"true if the withdraw was successfull\"}},\"withdrawSomeERC20(address,uint256,address)\":{\"details\":\"transfers ERC20 token amount to the caller's account      the call will fail if withdrawer have zero balance in the contract\",\"params\":{\"_recipient\":\"address\",\"_token\":\"address of the ERC20 token\"},\"returns\":{\"_0\":\"true if the withdraw was successfull\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchGetBalance(address[],address)\":{\"notice\":\"returns unclaimed fee amount given the token in batch\"},\"batchWithdrawAllERC20(address[],address)\":{\"notice\":\"batch claim whole balance of fee share amount\"},\"batchWithdrawSomeERC20(address[],uint256[],address)\":{\"notice\":\"batch claim some amount of fee share in ERC20 token\"},\"getBalance(address,address)\":{\"notice\":\"returns unclaimed fee amount given the token\"},\"getUnallocatedFees(address)\":{\"notice\":\"compute unallocated fee in token\"},\"registerFee(address,address,uint256)\":{\"notice\":\"register partner's, affiliate's and PP's fee\"},\"withdrawAllERC20(address,address)\":{\"notice\":\"claim partner share fee in ERC20 token\"},\"withdrawSomeERC20(address,uint256,address)\":{\"notice\":\"claim some partner share fee in ERC20 token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/extensions/paraswap-adapters/interfaces/IFeeClaimer.sol\":\"IFeeClaimer\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":aave-v3-core/=src/core/\",\":aave-v3-periphery/=src/periphery/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/\",\":solidity-utils/=lib/solidity-utils/src/\"]},\"sources\":{\"src/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"keccak256\":\"0x59485ca93d265d39a3993403c708a43b2548b35937a94b88c41b7a2edcfb656e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f35d88f3ae38c88e3b52f3f1e0bff0f80b5b661b292d856c69ec9ab7019e744\",\"dweb:/ipfs/QmWVk2r38WQEasD6p7CJPAp3PBWve3Y37wUJFTMagwtPgK\"]},\"src/contracts/extensions/paraswap-adapters/interfaces/IFeeClaimer.sol\":{\"keccak256\":\"0xb8d344206568935afb2cec0edd2d7788123f637033244e1520443d91849ca6f3\",\"license\":\"ISC\",\"urls\":[\"bzz-raw://f49b6d4eef0d08d71be603a18d2e36194cea7784a36f526f526ef6664b51a9e6\",\"dweb:/ipfs/Qmc3q9z7ye3JWAhMveijwvi6tvuXx6FcbkjTvfZhSNdqKd\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address[]","name":"_tokens","type":"address[]"},{"internalType":"address","name":"_partner","type":"address"}],"stateMutability":"view","type":"function","name":"batchGetBalance","outputs":[{"internalType":"uint256[]","name":"_fees","type":"uint256[]"}]},{"inputs":[{"internalType":"address[]","name":"_tokens","type":"address[]"},{"internalType":"address","name":"_recipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"batchWithdrawAllERC20","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"contract IERC20[]","name":"_tokens","type":"address[]"},{"internalType":"uint256[]","name":"_tokenAmounts","type":"uint256[]"},{"internalType":"address","name":"_recipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"batchWithdrawSomeERC20","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"address","name":"_partner","type":"address"}],"stateMutability":"view","type":"function","name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"_token","type":"address"}],"stateMutability":"view","type":"function","name":"getUnallocatedFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"uint256","name":"_fee","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"registerFee"},{"inputs":[{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"address","name":"_recipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"withdrawAllERC20","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"uint256","name":"_tokenAmount","type":"uint256"},{"internalType":"address","name":"_recipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"withdrawSomeERC20","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"batchGetBalance(address[],address)":{"details":"retrieves the balance of ERC20 token fee amount for a partner in batch","params":{"_partner":"account address of the partner","_tokens":"list of ERC20 token addresses"},"returns":{"_fees":"array of the token amount"}},"batchWithdrawAllERC20(address[],address)":{"details":"transfers ERC20 token balance to the caller's account      the call will fail if withdrawer have zero balance in the contract","params":{"_recipient":"address of recipient","_tokens":"list of addresses of the ERC20 token"},"returns":{"_0":"true if the withdraw was successfull"}},"batchWithdrawSomeERC20(address[],uint256[],address)":{"details":"transfers ERC20 token balance to the caller's account      the call will fail if withdrawer have zero balance in the contract","params":{"_recipient":"destination account addresses","_tokenAmounts":"array of amounts","_tokens":"address of the ERC20 tokens"},"returns":{"_0":"true if the withdraw was successfull"}},"getBalance(address,address)":{"details":"retrieves the balance of ERC20 token fee amount for a partner","params":{"_partner":"account address of the partner","_token":"address of the ERC20 token"},"returns":{"_0":"amount of balance"}},"getUnallocatedFees(address)":{"params":{"_token":"address of the ERC20 token"},"returns":{"_0":"amount of unallocated token in fees"}},"registerFee(address,address,uint256)":{"details":"only callable by AugustusSwapper contract","params":{"_account":"account address used to withdraw fees","_fee":"fee amount in token","_token":"token address"}},"withdrawAllERC20(address,address)":{"details":"transfers ERC20 token balance to the caller's account      the call will fail if withdrawer have zero balance in the contract","params":{"_recipient":"address","_token":"address of the ERC20 token"},"returns":{"_0":"true if the withdraw was successfull"}},"withdrawSomeERC20(address,uint256,address)":{"details":"transfers ERC20 token amount to the caller's account      the call will fail if withdrawer have zero balance in the contract","params":{"_recipient":"address","_token":"address of the ERC20 token"},"returns":{"_0":"true if the withdraw was successfull"}}},"version":1},"userdoc":{"kind":"user","methods":{"batchGetBalance(address[],address)":{"notice":"returns unclaimed fee amount given the token in batch"},"batchWithdrawAllERC20(address[],address)":{"notice":"batch claim whole balance of fee share amount"},"batchWithdrawSomeERC20(address[],uint256[],address)":{"notice":"batch claim some amount of fee share in ERC20 token"},"getBalance(address,address)":{"notice":"returns unclaimed fee amount given the token"},"getUnallocatedFees(address)":{"notice":"compute unallocated fee in token"},"registerFee(address,address,uint256)":{"notice":"register partner's, affiliate's and PP's fee"},"withdrawAllERC20(address,address)":{"notice":"claim partner share fee in ERC20 token"},"withdrawSomeERC20(address,uint256,address)":{"notice":"claim some partner share fee in ERC20 token"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/","aave-v3-core/=src/core/","aave-v3-periphery/=src/periphery/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/","solidity-utils/=lib/solidity-utils/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/contracts/extensions/paraswap-adapters/interfaces/IFeeClaimer.sol":"IFeeClaimer"},"evmVersion":"shanghai","libraries":{}},"sources":{"src/contracts/dependencies/openzeppelin/contracts/IERC20.sol":{"keccak256":"0x59485ca93d265d39a3993403c708a43b2548b35937a94b88c41b7a2edcfb656e","urls":["bzz-raw://2f35d88f3ae38c88e3b52f3f1e0bff0f80b5b661b292d856c69ec9ab7019e744","dweb:/ipfs/QmWVk2r38WQEasD6p7CJPAp3PBWve3Y37wUJFTMagwtPgK"],"license":"MIT"},"src/contracts/extensions/paraswap-adapters/interfaces/IFeeClaimer.sol":{"keccak256":"0xb8d344206568935afb2cec0edd2d7788123f637033244e1520443d91849ca6f3","urls":["bzz-raw://f49b6d4eef0d08d71be603a18d2e36194cea7784a36f526f526ef6664b51a9e6","dweb:/ipfs/Qmc3q9z7ye3JWAhMveijwvi6tvuXx6FcbkjTvfZhSNdqKd"],"license":"ISC"}},"version":1},"id":106}
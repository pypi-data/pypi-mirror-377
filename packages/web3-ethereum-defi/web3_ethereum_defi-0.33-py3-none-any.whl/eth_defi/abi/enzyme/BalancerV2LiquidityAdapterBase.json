{ "abi": [ { "type": "constructor", "inputs": [ { "name": "_integrationManager", "type": "address", "internalType": "address" }, { "name": "_balancerVault", "type": "address", "internalType": "address" } ], "stateMutability": "nonpayable" }, { "type": "function", "name": "CLAIM_REWARDS_SELECTOR", "inputs": [], "outputs": [ { "name": "", "type": "bytes4", "internalType": "bytes4" } ], "stateMutability": "view" }, { "type": "function", "name": "LEND_AND_STAKE_SELECTOR", "inputs": [], "outputs": [ { "name": "", "type": "bytes4", "internalType": "bytes4" } ], "stateMutability": "view" }, { "type": "function", "name": "LEND_SELECTOR", "inputs": [], "outputs": [ { "name": "", "type": "bytes4", "internalType": "bytes4" } ], "stateMutability": "view" }, { "type": "function", "name": "REDEEM_SELECTOR", "inputs": [], "outputs": [ { "name": "", "type": "bytes4", "internalType": "bytes4" } ], "stateMutability": "view" }, { "type": "function", "name": "STAKE_SELECTOR", "inputs": [], "outputs": [ { "name": "", "type": "bytes4", "internalType": "bytes4" } ], "stateMutability": "view" }, { "type": "function", "name": "TAKE_MULTIPLE_ORDERS_SELECTOR", "inputs": [], "outputs": [ { "name": "", "type": "bytes4", "internalType": "bytes4" } ], "stateMutability": "view" }, { "type": "function", "name": "TAKE_ORDER_SELECTOR", "inputs": [], "outputs": [ { "name": "", "type": "bytes4", "internalType": "bytes4" } ], "stateMutability": "view" }, { "type": "function", "name": "UNSTAKE_AND_REDEEM_SELECTOR", "inputs": [], "outputs": [ { "name": "", "type": "bytes4", "internalType": "bytes4" } ], "stateMutability": "view" }, { "type": "function", "name": "UNSTAKE_SELECTOR", "inputs": [], "outputs": [ { "name": "", "type": "bytes4", "internalType": "bytes4" } ], "stateMutability": "view" }, { "type": "function", "name": "claimRewards", "inputs": [ { "name": "_vaultProxy", "type": "address", "internalType": "address" }, { "name": "_actionData", "type": "bytes", "internalType": "bytes" }, { "name": "", "type": "bytes", "internalType": "bytes" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "getIntegrationManager", "inputs": [], "outputs": [ { "name": "integrationManager_", "type": "address", "internalType": "address" } ], "stateMutability": "view" }, { "type": "function", "name": "lendAndStake", "inputs": [ { "name": "_vaultProxy", "type": "address", "internalType": "address" }, { "name": "_actionData", "type": "bytes", "internalType": "bytes" }, { "name": "", "type": "bytes", "internalType": "bytes" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "parseAssetsForAction", "inputs": [ { "name": "", "type": "address", "internalType": "address" }, { "name": "_selector", "type": "bytes4", "internalType": "bytes4" }, { "name": "_actionData", "type": "bytes", "internalType": "bytes" } ], "outputs": [ { "name": "spendAssetsHandleType_", "type": "uint8", "internalType": "enum IIntegrationManager.SpendAssetsHandleType" }, { "name": "spendAssets_", "type": "address[]", "internalType": "address[]" }, { "name": "spendAssetAmounts_", "type": "uint256[]", "internalType": "uint256[]" }, { "name": "incomingAssets_", "type": "address[]", "internalType": "address[]" }, { "name": "minIncomingAssetAmounts_", "type": "uint256[]", "internalType": "uint256[]" } ], "stateMutability": "view" }, { "type": "function", "name": "stake", "inputs": [ { "name": "_vaultProxy", "type": "address", "internalType": "address" }, { "name": "_actionData", "type": "bytes", "internalType": "bytes" }, { "name": "", "type": "bytes", "internalType": "bytes" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "takeOrder", "inputs": [ { "name": "_vaultProxy", "type": "address", "internalType": "address" }, { "name": "_actionData", "type": "bytes", "internalType": "bytes" }, { "name": "", "type": "bytes", "internalType": "bytes" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "unstake", "inputs": [ { "name": "_vaultProxy", "type": "address", "internalType": "address" }, { "name": "_actionData", "type": "bytes", "internalType": "bytes" }, { "name": "", "type": "bytes", "internalType": "bytes" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "unstakeAndRedeem", "inputs": [ { "name": "_vaultProxy", "type": "address", "internalType": "address" }, { "name": "_actionData", "type": "bytes", "internalType": "bytes" }, { "name": "", "type": "bytes", "internalType": "bytes" } ], "outputs": [], "stateMutability": "nonpayable" } ], "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} }, "deployedBytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} }, "methodIdentifiers": { "CLAIM_REWARDS_SELECTOR()": "40da225d", "LEND_AND_STAKE_SELECTOR()": "131461c0", "LEND_SELECTOR()": "257cb1a3", "REDEEM_SELECTOR()": "f7d882b5", "STAKE_SELECTOR()": "3ffc1591", "TAKE_MULTIPLE_ORDERS_SELECTOR()": "c32990a2", "TAKE_ORDER_SELECTOR()": "863e5ad0", "UNSTAKE_AND_REDEEM_SELECTOR()": "080456c1", "UNSTAKE_SELECTOR()": "b23228cf", "claimRewards(address,bytes,bytes)": "b9dfbacc", "getIntegrationManager()": "e7c45690", "lendAndStake(address,bytes,bytes)": "29fa046e", "parseAssetsForAction(address,bytes4,bytes)": "c54efee5", "stake(address,bytes,bytes)": "fa7dd04d", "takeOrder(address,bytes,bytes)": "03e38a2b", "unstake(address,bytes,bytes)": "68e30677", "unstakeAndRedeem(address,bytes,bytes)": "8334eb99" }, "rawMetadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_MULTIPLE_ORDERS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lendAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForAction\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"takeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"unstakeAndRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"Rewards tokens are not included as incoming assets for claimRewards()\",\"kind\":\"dev\",\"methods\":{\"claimRewards(address,bytes,bytes)\":{\"details\":\"Needs `onlyIntegrationManager` because Minter claiming permission is given by the fund\",\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"lendAndStake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"parseAssetsForAction(address,bytes4,bytes)\":{\"params\":{\"_actionData\":\"The encoded parameters for the callOnIntegration\",\"_selector\":\"The function selector for the callOnIntegration\"},\"returns\":{\"incomingAssets_\":\"The assets to receive in the call\",\"minIncomingAssetAmounts_\":\"The min asset amounts to receive in the call\",\"spendAssetAmounts_\":\"The max asset amounts to spend in the call\",\"spendAssetsHandleType_\":\"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)\",\"spendAssets_\":\"The assets to spend in the call\"}},\"stake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"takeOrder(address,bytes,bytes)\":{\"details\":\"All `_actionData` inputs are Balancer `batchSwap()` params, with the exception of `stakingTokens`. \\\"Spend assets\\\" and \\\"incoming assets\\\" are parsed from the `limits` values corresponding to `assets`: - limit > 0 is a spend asset - limit < 0 is an incoming asset (including a partially-consumed intermediary asset) - limit == 0 is an intermediary asset that is completely consumed in the swap This function can also used for \\\"LPing\\\" with ComposableStablePool instances, since those pools contain their own BPT as an underlying asset. `stakingTokens` facilitates \\\"lend and stake\\\" and \\\"unstake and redeem\\\"-like functionality for such pools. If `stakingTokens[i]` is non-empty, it is considered to be the actual spend/incoming asset that must be unstaked to / staked from the BPT specified in `assets[i]` before/after the batchSawp().\",\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"unstake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"unstakeAndRedeem(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}}},\"title\":\"BalancerV2LiquidityAdapterBase Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(address,bytes,bytes)\":{\"notice\":\"Claims all rewards\"},\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"lendAndStake(address,bytes,bytes)\":{\"notice\":\"Lends assets for LP tokens, then stakes the received LP tokens\"},\"parseAssetsForAction(address,bytes4,bytes)\":{\"notice\":\"Parses the expected assets to receive from a call on integration\"},\"stake(address,bytes,bytes)\":{\"notice\":\"Stakes LP tokens\"},\"takeOrder(address,bytes,bytes)\":{\"notice\":\"Swaps assets on Balancer via batchSwap()\"},\"unstake(address,bytes,bytes)\":{\"notice\":\"Unstakes LP tokens\"},\"unstakeAndRedeem(address,bytes,bytes)\":{\"notice\":\"Unstakes LP tokens, then redeems them\"}},\"notice\":\"Base adapter for liquidity provision in Balancer V2 pools. Implementing contracts can allow staking via Balancer gauges, Aura, etc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/integrations/utils/bases/BalancerV2LiquidityAdapterBase.sol\":\"BalancerV2LiquidityAdapterBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[\":@enzyme/=contracts/\",\":@openzeppelin-solc-0.7/=node_modules/@openzeppelin-solc-0.7/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"keccak256\":\"0x29aff2a05a50430f732dd67cd3dfbfcf3b2fd86697f61b1ef91bebc8ff3e00ef\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://8b1f03cd376a3743dfaeff7cfbb1114341099d18ab32165365c76eba8e9dbc23\",\"dweb:/ipfs/QmZEwZEUcFwWEKkYXmjcijChwfAkFHkgMMRnv4QY8abhdk\"]},\"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\":{\"keccak256\":\"0x14b11777e21aceca340931832874342546731493bb169dbb4de736b16e9a7cc1\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d86c25f7deaddc311bfcd4da5ce08c275f548e164cb732137be91466acc75336\",\"dweb:/ipfs/QmYE2XeBKMoqUrfNZAX66mi34sth4ehoZnVzGhZFLBxbwS\"]},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\":{\"keccak256\":\"0x067e49bf0d3c1655ab41a413c65ccf61d4e593308132e1ffc484a0fadfbbaf26\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://387f425017e18e89cc1893521101fa99df595314847d0b3d9a1162369f714fcf\",\"dweb:/ipfs/Qmco3jCvuWAyfCpBYpGzHrQjiFJG63w1RJKcakoTEbxRQm\"]},\"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\":{\"keccak256\":\"0xfd34c7ca8231c6935e25dede32ca2b3121738e624d0fc896f7b895a731edcf88\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d492c061963d36d07718446db191d4c5a340c0d847f6cd209f027bd99f7cb176\",\"dweb:/ipfs/QmfCvRZt56ftDdrEh6LepHXFJ4fVtcfpQGvEyY8k4zxG1A\"]},\"contracts/release/extensions/integration-manager/integrations/utils/actions/BalancerV2ActionsMixin.sol\":{\"keccak256\":\"0xf2411ca1c42e8881a6aed8381294a03e363738bb4bf7b030dad47871ba27411f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://7916355a56eaa4337d28019dc84249e9e5abe5cc188718f11f945d92afc593f0\",\"dweb:/ipfs/QmXSe7UDdrutvCf5RujJxeurLUEotkTzm8Tn27xDqvwc6X\"]},\"contracts/release/extensions/integration-manager/integrations/utils/bases/BalancerV2LiquidityAdapterBase.sol\":{\"keccak256\":\"0x584e1b88ebc1c7911d8df42b3f4d7739863a5c9922e3d007a0e97b261c24ff71\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://55299164a30b0e3170d3c9d4973559afa609410d19ff6c177fd4f7879ba11959\",\"dweb:/ipfs/QmaviuM17N3UtGmwo67MAavncrKWv99PnDx3yv2kUqoe3T\"]},\"contracts/release/interfaces/IBalancerV2Vault.sol\":{\"keccak256\":\"0xb3c8da122ab160129c74ffeb0310ff96c4977d65eef12888bc1a8276fa2a3fd2\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://c9c89c1e04327c6fa45fbdf9ae8fd132ed95c9101ab49d078ef99c6590c30867\",\"dweb:/ipfs/QmWKrLQg5xBVmi6snaAwU3zUTjxQ6ugYj6n45x1hqRxv9A\"]},\"contracts/release/utils/AddressArrayLib.sol\":{\"keccak256\":\"0xd76e220cc754d7c939e54c18d4060f843ca798bccaf9a9dbbd428e38d0f0960f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bf0cbaedaec3390b6912ecef7bf62b2e8ec00d7f2b4f0045bab121b812e6f9d6\",\"dweb:/ipfs/QmSd5kxsv5x37TXeRDD91YmVCVA3GVFishdVyC2B9ed9ap\"]},\"contracts/release/utils/AssetHelpers.sol\":{\"keccak256\":\"0x01825f9b744f0bdbbcbed59503845b46e31b67ab510d53d4834c22967e12fc5f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a6937098b8b5e2238c5d2617d4c7870b61eb3dc6b24e38a6d037353f92a7db4b\",\"dweb:/ipfs/QmXfdWqtc4Dyn4ShhCc6ZZscApMZWtSaonvikwemhczb5E\"]},\"node_modules/@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://991b44ff44e0496e8554a90f4c0512c28faed45104d40430019f3c67ea67740e\",\"dweb:/ipfs/Qmc3nRapVbcctELoZS5qe17zLkFB3bETBfwzCTMF1CSuGE\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08\",\"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a849c2d95e85463909e5b5c920b13e7a11216ca14127085e16d22b9379d52a\",\"dweb:/ipfs/QmUg3CZDbCCcQdroEpexBy5ZFd5vD1UWijWQq9qHZjtJNQ\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c\",\"dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN\"]},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}", "metadata": { "compiler": { "version": "0.6.12+commit.27d51765" }, "language": "Solidity", "output": { "abi": [ { "inputs": [ { "internalType": "address", "name": "_integrationManager", "type": "address" }, { "internalType": "address", "name": "_balancerVault", "type": "address" } ], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "CLAIM_REWARDS_SELECTOR", "outputs": [ { "internalType": "bytes4", "name": "", "type": "bytes4" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "LEND_AND_STAKE_SELECTOR", "outputs": [ { "internalType": "bytes4", "name": "", "type": "bytes4" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "LEND_SELECTOR", "outputs": [ { "internalType": "bytes4", "name": "", "type": "bytes4" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "REDEEM_SELECTOR", "outputs": [ { "internalType": "bytes4", "name": "", "type": "bytes4" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "STAKE_SELECTOR", "outputs": [ { "internalType": "bytes4", "name": "", "type": "bytes4" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "TAKE_MULTIPLE_ORDERS_SELECTOR", "outputs": [ { "internalType": "bytes4", "name": "", "type": "bytes4" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "TAKE_ORDER_SELECTOR", "outputs": [ { "internalType": "bytes4", "name": "", "type": "bytes4" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "UNSTAKE_AND_REDEEM_SELECTOR", "outputs": [ { "internalType": "bytes4", "name": "", "type": "bytes4" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "UNSTAKE_SELECTOR", "outputs": [ { "internalType": "bytes4", "name": "", "type": "bytes4" } ] }, { "inputs": [ { "internalType": "address", "name": "_vaultProxy", "type": "address" }, { "internalType": "bytes", "name": "_actionData", "type": "bytes" }, { "internalType": "bytes", "name": "", "type": "bytes" } ], "stateMutability": "nonpayable", "type": "function", "name": "claimRewards" }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "getIntegrationManager", "outputs": [ { "internalType": "address", "name": "integrationManager_", "type": "address" } ] }, { "inputs": [ { "internalType": "address", "name": "_vaultProxy", "type": "address" }, { "internalType": "bytes", "name": "_actionData", "type": "bytes" }, { "internalType": "bytes", "name": "", "type": "bytes" } ], "stateMutability": "nonpayable", "type": "function", "name": "lendAndStake" }, { "inputs": [ { "internalType": "address", "name": "", "type": "address" }, { "internalType": "bytes4", "name": "_selector", "type": "bytes4" }, { "internalType": "bytes", "name": "_actionData", "type": "bytes" } ], "stateMutability": "view", "type": "function", "name": "parseAssetsForAction", "outputs": [ { "internalType": "enum IIntegrationManager.SpendAssetsHandleType", "name": "spendAssetsHandleType_", "type": "uint8" }, { "internalType": "address[]", "name": "spendAssets_", "type": "address[]" }, { "internalType": "uint256[]", "name": "spendAssetAmounts_", "type": "uint256[]" }, { "internalType": "address[]", "name": "incomingAssets_", "type": "address[]" }, { "internalType": "uint256[]", "name": "minIncomingAssetAmounts_", "type": "uint256[]" } ] }, { "inputs": [ { "internalType": "address", "name": "_vaultProxy", "type": "address" }, { "internalType": "bytes", "name": "_actionData", "type": "bytes" }, { "internalType": "bytes", "name": "", "type": "bytes" } ], "stateMutability": "nonpayable", "type": "function", "name": "stake" }, { "inputs": [ { "internalType": "address", "name": "_vaultProxy", "type": "address" }, { "internalType": "bytes", "name": "_actionData", "type": "bytes" }, { "internalType": "bytes", "name": "", "type": "bytes" } ], "stateMutability": "nonpayable", "type": "function", "name": "takeOrder" }, { "inputs": [ { "internalType": "address", "name": "_vaultProxy", "type": "address" }, { "internalType": "bytes", "name": "_actionData", "type": "bytes" }, { "internalType": "bytes", "name": "", "type": "bytes" } ], "stateMutability": "nonpayable", "type": "function", "name": "unstake" }, { "inputs": [ { "internalType": "address", "name": "_vaultProxy", "type": "address" }, { "internalType": "bytes", "name": "_actionData", "type": "bytes" }, { "internalType": "bytes", "name": "", "type": "bytes" } ], "stateMutability": "nonpayable", "type": "function", "name": "unstakeAndRedeem" } ], "devdoc": { "kind": "dev", "methods": { "claimRewards(address,bytes,bytes)": { "details": "Needs `onlyIntegrationManager` because Minter claiming permission is given by the fund", "params": { "_actionData": "Data specific to this action", "_vaultProxy": "The VaultProxy of the calling fund" } }, "getIntegrationManager()": { "returns": { "integrationManager_": "The `INTEGRATION_MANAGER` variable value" } }, "lendAndStake(address,bytes,bytes)": { "params": { "_actionData": "Data specific to this action", "_vaultProxy": "The VaultProxy of the calling fund" } }, "parseAssetsForAction(address,bytes4,bytes)": { "params": { "_actionData": "The encoded parameters for the callOnIntegration", "_selector": "The function selector for the callOnIntegration" }, "returns": { "incomingAssets_": "The assets to receive in the call", "minIncomingAssetAmounts_": "The min asset amounts to receive in the call", "spendAssetAmounts_": "The max asset amounts to spend in the call", "spendAssetsHandleType_": "A type that dictates how to handle granting the adapter access to spend assets (`None` by default)", "spendAssets_": "The assets to spend in the call" } }, "stake(address,bytes,bytes)": { "params": { "_actionData": "Data specific to this action", "_vaultProxy": "The VaultProxy of the calling fund" } }, "takeOrder(address,bytes,bytes)": { "details": "All `_actionData` inputs are Balancer `batchSwap()` params, with the exception of `stakingTokens`. \"Spend assets\" and \"incoming assets\" are parsed from the `limits` values corresponding to `assets`: - limit > 0 is a spend asset - limit < 0 is an incoming asset (including a partially-consumed intermediary asset) - limit == 0 is an intermediary asset that is completely consumed in the swap This function can also used for \"LPing\" with ComposableStablePool instances, since those pools contain their own BPT as an underlying asset. `stakingTokens` facilitates \"lend and stake\" and \"unstake and redeem\"-like functionality for such pools. If `stakingTokens[i]` is non-empty, it is considered to be the actual spend/incoming asset that must be unstaked to / staked from the BPT specified in `assets[i]` before/after the batchSawp().", "params": { "_actionData": "Data specific to this action", "_vaultProxy": "The VaultProxy of the calling fund" } }, "unstake(address,bytes,bytes)": { "params": { "_actionData": "Data specific to this action", "_vaultProxy": "The VaultProxy of the calling fund" } }, "unstakeAndRedeem(address,bytes,bytes)": { "params": { "_actionData": "Data specific to this action", "_vaultProxy": "The VaultProxy of the calling fund" } } }, "version": 1 }, "userdoc": { "kind": "user", "methods": { "claimRewards(address,bytes,bytes)": { "notice": "Claims all rewards" }, "getIntegrationManager()": { "notice": "Gets the `INTEGRATION_MANAGER` variable" }, "lendAndStake(address,bytes,bytes)": { "notice": "Lends assets for LP tokens, then stakes the received LP tokens" }, "parseAssetsForAction(address,bytes4,bytes)": { "notice": "Parses the expected assets to receive from a call on integration" }, "stake(address,bytes,bytes)": { "notice": "Stakes LP tokens" }, "takeOrder(address,bytes,bytes)": { "notice": "Swaps assets on Balancer via batchSwap()" }, "unstake(address,bytes,bytes)": { "notice": "Unstakes LP tokens" }, "unstakeAndRedeem(address,bytes,bytes)": { "notice": "Unstakes LP tokens, then redeems them" } }, "version": 1 } }, "settings": { "remappings": [ "@enzyme/=contracts/", "@openzeppelin-solc-0.7/=node_modules/@openzeppelin-solc-0.7/", "@openzeppelin/=node_modules/@openzeppelin/", "@uniswap/=node_modules/@uniswap/", "base64-sol/=node_modules/base64-sol/", "ds-test/=lib/forge-std/lib/ds-test/src/", "forge-std/=lib/forge-std/src/", "hardhat-deploy/=node_modules/hardhat-deploy/", "hardhat/=node_modules/hardhat/" ], "optimizer": { "runs": 200, "details": { "peephole": true, "jumpdestRemover": true, "orderLiterals": true, "deduplicate": true, "cse": true, "constantOptimizer": true, "yul": false } }, "metadata": { "bytecodeHash": "none" }, "compilationTarget": { "contracts/release/extensions/integration-manager/integrations/utils/bases/BalancerV2LiquidityAdapterBase.sol": "BalancerV2LiquidityAdapterBase" }, "evmVersion": "istanbul", "libraries": {} }, "sources": { "contracts/release/extensions/integration-manager/IIntegrationManager.sol": { "keccak256": "0x29aff2a05a50430f732dd67cd3dfbfcf3b2fd86697f61b1ef91bebc8ff3e00ef", "urls": [ "bzz-raw://8b1f03cd376a3743dfaeff7cfbb1114341099d18ab32165365c76eba8e9dbc23", "dweb:/ipfs/QmZEwZEUcFwWEKkYXmjcijChwfAkFHkgMMRnv4QY8abhdk" ], "license": "GPL-3.0" }, "contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol": { "keccak256": "0x14b11777e21aceca340931832874342546731493bb169dbb4de736b16e9a7cc1", "urls": [ "bzz-raw://d86c25f7deaddc311bfcd4da5ce08c275f548e164cb732137be91466acc75336", "dweb:/ipfs/QmYE2XeBKMoqUrfNZAX66mi34sth4ehoZnVzGhZFLBxbwS" ], "license": "GPL-3.0" }, "contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol": { "keccak256": "0x067e49bf0d3c1655ab41a413c65ccf61d4e593308132e1ffc484a0fadfbbaf26", "urls": [ "bzz-raw://387f425017e18e89cc1893521101fa99df595314847d0b3d9a1162369f714fcf", "dweb:/ipfs/Qmco3jCvuWAyfCpBYpGzHrQjiFJG63w1RJKcakoTEbxRQm" ], "license": "GPL-3.0" }, "contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol": { "keccak256": "0xfd34c7ca8231c6935e25dede32ca2b3121738e624d0fc896f7b895a731edcf88", "urls": [ "bzz-raw://d492c061963d36d07718446db191d4c5a340c0d847f6cd209f027bd99f7cb176", "dweb:/ipfs/QmfCvRZt56ftDdrEh6LepHXFJ4fVtcfpQGvEyY8k4zxG1A" ], "license": "GPL-3.0" }, "contracts/release/extensions/integration-manager/integrations/utils/actions/BalancerV2ActionsMixin.sol": { "keccak256": "0xf2411ca1c42e8881a6aed8381294a03e363738bb4bf7b030dad47871ba27411f", "urls": [ "bzz-raw://7916355a56eaa4337d28019dc84249e9e5abe5cc188718f11f945d92afc593f0", "dweb:/ipfs/QmXSe7UDdrutvCf5RujJxeurLUEotkTzm8Tn27xDqvwc6X" ], "license": "GPL-3.0" }, "contracts/release/extensions/integration-manager/integrations/utils/bases/BalancerV2LiquidityAdapterBase.sol": { "keccak256": "0x584e1b88ebc1c7911d8df42b3f4d7739863a5c9922e3d007a0e97b261c24ff71", "urls": [ "bzz-raw://55299164a30b0e3170d3c9d4973559afa609410d19ff6c177fd4f7879ba11959", "dweb:/ipfs/QmaviuM17N3UtGmwo67MAavncrKWv99PnDx3yv2kUqoe3T" ], "license": "GPL-3.0" }, "contracts/release/interfaces/IBalancerV2Vault.sol": { "keccak256": "0xb3c8da122ab160129c74ffeb0310ff96c4977d65eef12888bc1a8276fa2a3fd2", "urls": [ "bzz-raw://c9c89c1e04327c6fa45fbdf9ae8fd132ed95c9101ab49d078ef99c6590c30867", "dweb:/ipfs/QmWKrLQg5xBVmi6snaAwU3zUTjxQ6ugYj6n45x1hqRxv9A" ], "license": "GPL-3.0" }, "contracts/release/utils/AddressArrayLib.sol": { "keccak256": "0xd76e220cc754d7c939e54c18d4060f843ca798bccaf9a9dbbd428e38d0f0960f", "urls": [ "bzz-raw://bf0cbaedaec3390b6912ecef7bf62b2e8ec00d7f2b4f0045bab121b812e6f9d6", "dweb:/ipfs/QmSd5kxsv5x37TXeRDD91YmVCVA3GVFishdVyC2B9ed9ap" ], "license": "GPL-3.0" }, "contracts/release/utils/AssetHelpers.sol": { "keccak256": "0x01825f9b744f0bdbbcbed59503845b46e31b67ab510d53d4834c22967e12fc5f", "urls": [ "bzz-raw://a6937098b8b5e2238c5d2617d4c7870b61eb3dc6b24e38a6d037353f92a7db4b", "dweb:/ipfs/QmXfdWqtc4Dyn4ShhCc6ZZscApMZWtSaonvikwemhczb5E" ], "license": "GPL-3.0" }, "node_modules/@openzeppelin/contracts/math/SafeMath.sol": { "keccak256": "0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52", "urls": [ "bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c", "dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR" ], "license": "MIT" }, "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": { "keccak256": "0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3", "urls": [ "bzz-raw://991b44ff44e0496e8554a90f4c0512c28faed45104d40430019f3c67ea67740e", "dweb:/ipfs/Qmc3nRapVbcctELoZS5qe17zLkFB3bETBfwzCTMF1CSuGE" ], "license": "MIT" }, "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": { "keccak256": "0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5", "urls": [ "bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08", "dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC" ], "license": "MIT" }, "node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol": { "keccak256": "0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc", "urls": [ "bzz-raw://b3a849c2d95e85463909e5b5c920b13e7a11216ca14127085e16d22b9379d52a", "dweb:/ipfs/QmUg3CZDbCCcQdroEpexBy5ZFd5vD1UWijWQq9qHZjtJNQ" ], "license": "MIT" }, "node_modules/@openzeppelin/contracts/utils/Address.sol": { "keccak256": "0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea", "urls": [ "bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c", "dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN" ], "license": "MIT" }, "node_modules/@openzeppelin/contracts/utils/Context.sol": { "keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0", "urls": [ "bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f", "dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96" ], "license": "MIT" } }, "version": 1 }, "id": 201 }

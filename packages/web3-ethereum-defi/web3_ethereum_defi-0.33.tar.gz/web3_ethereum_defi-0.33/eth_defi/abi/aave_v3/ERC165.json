{"abi":[{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/dependencies/openzeppelin/contracts/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":aave-v3-core/=src/core/\",\":aave-v3-periphery/=src/periphery/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/\",\":solidity-utils/=lib/solidity-utils/src/\"]},\"sources\":{\"src/contracts/dependencies/openzeppelin/contracts/ERC165.sol\":{\"keccak256\":\"0xab4362027aeb6ee07b534268c18e765c72f8e55c9991f9c995084def565be105\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb152396fcaf514f861acea3ad3d8d0bc775abc6374849eab6011062be783c29\",\"dweb:/ipfs/QmSs7cKFXNHKHse4MXby5iAVxcBNAFMFz5AANLbk1uoWmk\"]},\"src/contracts/dependencies/openzeppelin/contracts/IERC165.sol\":{\"keccak256\":\"0x65491d7983ef45382626be1e59fddd2ecc5d9c11e261f702e2d2e72d60af679f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://82f5bc22db86ea49d058b3c5c0b50a359fae1b10d5145e76ee652de10f51a3f3\",\"dweb:/ipfs/QmbFzRKDmoLRM6EBKArA7vtbVhoaHB9ndGKKFDwoi8Prxq\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/","aave-v3-core/=src/core/","aave-v3-periphery/=src/periphery/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/","solidity-utils/=lib/solidity-utils/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/contracts/dependencies/openzeppelin/contracts/ERC165.sol":"ERC165"},"evmVersion":"shanghai","libraries":{}},"sources":{"src/contracts/dependencies/openzeppelin/contracts/ERC165.sol":{"keccak256":"0xab4362027aeb6ee07b534268c18e765c72f8e55c9991f9c995084def565be105","urls":["bzz-raw://eb152396fcaf514f861acea3ad3d8d0bc775abc6374849eab6011062be783c29","dweb:/ipfs/QmSs7cKFXNHKHse4MXby5iAVxcBNAFMFz5AANLbk1uoWmk"],"license":"MIT"},"src/contracts/dependencies/openzeppelin/contracts/IERC165.sol":{"keccak256":"0x65491d7983ef45382626be1e59fddd2ecc5d9c11e261f702e2d2e72d60af679f","urls":["bzz-raw://82f5bc22db86ea49d058b3c5c0b50a359fae1b10d5145e76ee652de10f51a3f3","dweb:/ipfs/QmbFzRKDmoLRM6EBKArA7vtbVhoaHB9ndGKKFDwoi8Prxq"],"license":"MIT"}},"version":1},"id":79}
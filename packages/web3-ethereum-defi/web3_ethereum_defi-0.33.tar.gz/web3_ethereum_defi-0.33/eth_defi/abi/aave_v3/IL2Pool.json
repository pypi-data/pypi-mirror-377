{"abi":[{"type":"function","name":"borrow","inputs":[{"name":"args","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"liquidationCall","inputs":[{"name":"args1","type":"bytes32","internalType":"bytes32"},{"name":"args2","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"repay","inputs":[{"name":"args","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"repayWithATokens","inputs":[{"name":"args","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"repayWithPermit","inputs":[{"name":"args","type":"bytes32","internalType":"bytes32"},{"name":"r","type":"bytes32","internalType":"bytes32"},{"name":"s","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"setUserUseReserveAsCollateral","inputs":[{"name":"args","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supply","inputs":[{"name":"args","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supplyWithPermit","inputs":[{"name":"args","type":"bytes32","internalType":"bytes32"},{"name":"r","type":"bytes32","internalType":"bytes32"},{"name":"s","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdraw","inputs":[{"name":"args","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"borrow(bytes32)":"d5eed868","liquidationCall(bytes32,bytes32)":"fd21ecff","repay(bytes32)":"563dd613","repayWithATokens(bytes32)":"dc7c0bff","repayWithPermit(bytes32,bytes32,bytes32)":"94b576de","setUserUseReserveAsCollateral(bytes32)":"4d013f03","supply(bytes32)":"f7a73840","supplyWithPermit(bytes32,bytes32,bytes32)":"680dd47c","withdraw(bytes32)":"8e19899e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"args\",\"type\":\"bytes32\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"args1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"args2\",\"type\":\"bytes32\"}],\"name\":\"liquidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"args\",\"type\":\"bytes32\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"args\",\"type\":\"bytes32\"}],\"name\":\"repayWithATokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"args\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"repayWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"args\",\"type\":\"bytes32\"}],\"name\":\"setUserUseReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"args\",\"type\":\"bytes32\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"args\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"supplyWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"args\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"kind\":\"dev\",\"methods\":{\"borrow(bytes32)\":{\"details\":\"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.\",\"params\":{\"args\":\"Arguments for the borrow function packed in one bytes32    88 bits       16 bits             8 bits                 128 bits       16 bits | 0-padding | referralCode | shortenedInterestRateMode | shortenedAmount | assetId |\"}},\"liquidationCall(bytes32,bytes32)\":{\"details\":\"the shortenedDebtToCover is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).max\",\"params\":{\"args1\":\"part of the arguments for the liquidationCall function packed in one bytes32    64 bits      160 bits       16 bits         16 bits | 0-padding | user address | debtAssetId | collateralAssetId |\",\"args2\":\"part of the arguments for the liquidationCall function packed in one bytes32    127 bits       1 bit             128 bits | 0-padding | receiveAToken | shortenedDebtToCover |\"}},\"repay(bytes32)\":{\"details\":\"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.\",\"params\":{\"args\":\"Arguments for the repay function packed in one bytes32    104 bits             8 bits               128 bits       16 bits | 0-padding | shortenedInterestRateMode | shortenedAmount | assetId |\"},\"returns\":{\"_0\":\"The final amount repaid\"}},\"repayWithATokens(bytes32)\":{\"details\":\"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.\",\"params\":{\"args\":\"Arguments for the repayWithATokens function packed in one bytes32    104 bits             8 bits               128 bits       16 bits | 0-padding | shortenedInterestRateMode | shortenedAmount | assetId |\"},\"returns\":{\"_0\":\"The final amount repaid\"}},\"repayWithPermit(bytes32,bytes32,bytes32)\":{\"details\":\"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.\",\"params\":{\"args\":\"Arguments for the repayWithPermit function packed in one bytes32    64 bits    8 bits        32 bits                   8 bits               128 bits       16 bits | 0-padding | permitV | shortenedDeadline | shortenedInterestRateMode | shortenedAmount | assetId |\",\"r\":\"The R parameter of ERC712 permit sig\",\"s\":\"The S parameter of ERC712 permit sig\"},\"returns\":{\"_0\":\"The final amount repaid\"}},\"setUserUseReserveAsCollateral(bytes32)\":{\"details\":\"assetId is the index of the asset in the reservesList.\",\"params\":{\"args\":\"Arguments for the setUserUseReserveAsCollateral function packed in one bytes32    239 bits         1 bit       16 bits | 0-padding | useAsCollateral | assetId |\"}},\"supply(bytes32)\":{\"details\":\"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.\",\"params\":{\"args\":\"Arguments for the supply function packed in one bytes32    96 bits       16 bits         128 bits      16 bits | 0-padding | referralCode | shortenedAmount | assetId |\"}},\"supplyWithPermit(bytes32,bytes32,bytes32)\":{\"details\":\"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.\",\"params\":{\"args\":\"Arguments for the supply function packed in one bytes32    56 bits    8 bits         32 bits           16 bits         128 bits      16 bits | 0-padding | permitV | shortenedDeadline | referralCode | shortenedAmount | assetId |\",\"r\":\"The R parameter of ERC712 permit sig\",\"s\":\"The S parameter of ERC712 permit sig\"}},\"withdraw(bytes32)\":{\"details\":\"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.\",\"params\":{\"args\":\"Arguments for the withdraw function packed in one bytes32    112 bits       128 bits      16 bits | 0-padding | shortenedAmount | assetId |\"},\"returns\":{\"_0\":\"The final amount withdrawn\"}}},\"title\":\"IL2Pool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(bytes32)\":{\"notice\":\"Calldata efficient wrapper of the borrow function, borrowing on behalf of the caller\"},\"liquidationCall(bytes32,bytes32)\":{\"notice\":\"Calldata efficient wrapper of the liquidationCall function\"},\"repay(bytes32)\":{\"notice\":\"Calldata efficient wrapper of the repay function, repaying on behalf of the caller\"},\"repayWithATokens(bytes32)\":{\"notice\":\"Calldata efficient wrapper of the repayWithATokens function\"},\"repayWithPermit(bytes32,bytes32,bytes32)\":{\"notice\":\"Calldata efficient wrapper of the repayWithPermit function, repaying on behalf of the caller\"},\"setUserUseReserveAsCollateral(bytes32)\":{\"notice\":\"Calldata efficient wrapper of the setUserUseReserveAsCollateral function\"},\"supply(bytes32)\":{\"notice\":\"Calldata efficient wrapper of the supply function on behalf of the caller\"},\"supplyWithPermit(bytes32,bytes32,bytes32)\":{\"notice\":\"Calldata efficient wrapper of the supplyWithPermit function on behalf of the caller\"},\"withdraw(bytes32)\":{\"notice\":\"Calldata efficient wrapper of the withdraw function, withdrawing to the caller\"}},\"notice\":\"Defines the basic extension interface for an L2 Aave Pool.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/interfaces/IL2Pool.sol\":\"IL2Pool\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":aave-v3-core/=src/core/\",\":aave-v3-periphery/=src/periphery/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/\",\":solidity-utils/=lib/solidity-utils/src/\"]},\"sources\":{\"src/contracts/interfaces/IL2Pool.sol\":{\"keccak256\":\"0xdd65892ff31a86c9db228ea596e9d0203d9c555f75266081cbf5f34dc1ea139b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://657208bcbde5e8e2f2027d9a45ac58f78336c05e52cb8828da1cd703f35fc3ea\",\"dweb:/ipfs/QmRQUEWZDqpjUa5omRfGwwziahPwbohX3xgttBKz3DWEAP\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"args","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"borrow"},{"inputs":[{"internalType":"bytes32","name":"args1","type":"bytes32"},{"internalType":"bytes32","name":"args2","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"liquidationCall"},{"inputs":[{"internalType":"bytes32","name":"args","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"repay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"args","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"repayWithATokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"args","type":"bytes32"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"repayWithPermit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"args","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"setUserUseReserveAsCollateral"},{"inputs":[{"internalType":"bytes32","name":"args","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"supply"},{"inputs":[{"internalType":"bytes32","name":"args","type":"bytes32"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"supplyWithPermit"},{"inputs":[{"internalType":"bytes32","name":"args","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"withdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"borrow(bytes32)":{"details":"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.","params":{"args":"Arguments for the borrow function packed in one bytes32    88 bits       16 bits             8 bits                 128 bits       16 bits | 0-padding | referralCode | shortenedInterestRateMode | shortenedAmount | assetId |"}},"liquidationCall(bytes32,bytes32)":{"details":"the shortenedDebtToCover is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).max","params":{"args1":"part of the arguments for the liquidationCall function packed in one bytes32    64 bits      160 bits       16 bits         16 bits | 0-padding | user address | debtAssetId | collateralAssetId |","args2":"part of the arguments for the liquidationCall function packed in one bytes32    127 bits       1 bit             128 bits | 0-padding | receiveAToken | shortenedDebtToCover |"}},"repay(bytes32)":{"details":"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.","params":{"args":"Arguments for the repay function packed in one bytes32    104 bits             8 bits               128 bits       16 bits | 0-padding | shortenedInterestRateMode | shortenedAmount | assetId |"},"returns":{"_0":"The final amount repaid"}},"repayWithATokens(bytes32)":{"details":"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.","params":{"args":"Arguments for the repayWithATokens function packed in one bytes32    104 bits             8 bits               128 bits       16 bits | 0-padding | shortenedInterestRateMode | shortenedAmount | assetId |"},"returns":{"_0":"The final amount repaid"}},"repayWithPermit(bytes32,bytes32,bytes32)":{"details":"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.","params":{"args":"Arguments for the repayWithPermit function packed in one bytes32    64 bits    8 bits        32 bits                   8 bits               128 bits       16 bits | 0-padding | permitV | shortenedDeadline | shortenedInterestRateMode | shortenedAmount | assetId |","r":"The R parameter of ERC712 permit sig","s":"The S parameter of ERC712 permit sig"},"returns":{"_0":"The final amount repaid"}},"setUserUseReserveAsCollateral(bytes32)":{"details":"assetId is the index of the asset in the reservesList.","params":{"args":"Arguments for the setUserUseReserveAsCollateral function packed in one bytes32    239 bits         1 bit       16 bits | 0-padding | useAsCollateral | assetId |"}},"supply(bytes32)":{"details":"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.","params":{"args":"Arguments for the supply function packed in one bytes32    96 bits       16 bits         128 bits      16 bits | 0-padding | referralCode | shortenedAmount | assetId |"}},"supplyWithPermit(bytes32,bytes32,bytes32)":{"details":"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.","params":{"args":"Arguments for the supply function packed in one bytes32    56 bits    8 bits         32 bits           16 bits         128 bits      16 bits | 0-padding | permitV | shortenedDeadline | referralCode | shortenedAmount | assetId |","r":"The R parameter of ERC712 permit sig","s":"The S parameter of ERC712 permit sig"}},"withdraw(bytes32)":{"details":"the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to type(uint256).maxassetId is the index of the asset in the reservesList.","params":{"args":"Arguments for the withdraw function packed in one bytes32    112 bits       128 bits      16 bits | 0-padding | shortenedAmount | assetId |"},"returns":{"_0":"The final amount withdrawn"}}},"version":1},"userdoc":{"kind":"user","methods":{"borrow(bytes32)":{"notice":"Calldata efficient wrapper of the borrow function, borrowing on behalf of the caller"},"liquidationCall(bytes32,bytes32)":{"notice":"Calldata efficient wrapper of the liquidationCall function"},"repay(bytes32)":{"notice":"Calldata efficient wrapper of the repay function, repaying on behalf of the caller"},"repayWithATokens(bytes32)":{"notice":"Calldata efficient wrapper of the repayWithATokens function"},"repayWithPermit(bytes32,bytes32,bytes32)":{"notice":"Calldata efficient wrapper of the repayWithPermit function, repaying on behalf of the caller"},"setUserUseReserveAsCollateral(bytes32)":{"notice":"Calldata efficient wrapper of the setUserUseReserveAsCollateral function"},"supply(bytes32)":{"notice":"Calldata efficient wrapper of the supply function on behalf of the caller"},"supplyWithPermit(bytes32,bytes32,bytes32)":{"notice":"Calldata efficient wrapper of the supplyWithPermit function on behalf of the caller"},"withdraw(bytes32)":{"notice":"Calldata efficient wrapper of the withdraw function, withdrawing to the caller"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/","aave-v3-core/=src/core/","aave-v3-periphery/=src/periphery/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/","solidity-utils/=lib/solidity-utils/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/contracts/interfaces/IL2Pool.sol":"IL2Pool"},"evmVersion":"shanghai","libraries":{}},"sources":{"src/contracts/interfaces/IL2Pool.sol":{"keccak256":"0xdd65892ff31a86c9db228ea596e9d0203d9c555f75266081cbf5f34dc1ea139b","urls":["bzz-raw://657208bcbde5e8e2f2027d9a45ac58f78336c05e52cb8828da1cd703f35fc3ea","dweb:/ipfs/QmRQUEWZDqpjUa5omRfGwwziahPwbohX3xgttBKz3DWEAP"],"license":"MIT"}},"version":1},"id":156}
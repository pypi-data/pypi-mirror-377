{"abi":[{"type":"function","name":"calculateInterestRates","inputs":[{"name":"params","type":"tuple","internalType":"struct DataTypes.CalculateInterestRatesParams","components":[{"name":"unbacked","type":"uint256","internalType":"uint256"},{"name":"liquidityAdded","type":"uint256","internalType":"uint256"},{"name":"liquidityTaken","type":"uint256","internalType":"uint256"},{"name":"totalDebt","type":"uint256","internalType":"uint256"},{"name":"reserveFactor","type":"uint256","internalType":"uint256"},{"name":"reserve","type":"address","internalType":"address"},{"name":"usingVirtualBalance","type":"bool","internalType":"bool"},{"name":"virtualUnderlyingBalance","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"setInterestRateParams","inputs":[{"name":"reserve","type":"address","internalType":"address"},{"name":"rateData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"calculateInterestRates((uint256,uint256,uint256,uint256,uint256,address,bool,uint256))":"b90db31b","setInterestRateParams(address,bytes)":"a8d9e56f"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unbacked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usingVirtualBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"virtualUnderlyingBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CalculateInterestRatesParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rateData\",\"type\":\"bytes\"}],\"name\":\"setInterestRateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BGD Labs\",\"kind\":\"dev\",\"methods\":{\"calculateInterestRates((uint256,uint256,uint256,uint256,uint256,address,bool,uint256))\":{\"params\":{\"params\":\"The parameters needed to calculate interest rates\"},\"returns\":{\"_0\":\"liquidityRate The liquidity rate expressed in ray\",\"_1\":\"variableBorrowRate The variable borrow rate expressed in ray\"}},\"setInterestRateParams(address,bytes)\":{\"params\":{\"rateData\":\"The abi encoded reserve interest rate data to apply to the given reserve   Abstracted this way as rate strategies can be custom\",\"reserve\":\"The reserve to update\"}}},\"title\":\"IReserveInterestRateStrategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateInterestRates((uint256,uint256,uint256,uint256,uint256,address,bool,uint256))\":{\"notice\":\"Calculates the interest rates depending on the reserve's state and configurations\"},\"setInterestRateParams(address,bytes)\":{\"notice\":\"Sets interest rate data for an Aave rate strategy\"}},\"notice\":\"Basic interface for any rate strategy used by the Aave protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/interfaces/IReserveInterestRateStrategy.sol\":\"IReserveInterestRateStrategy\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":aave-v3-core/=src/core/\",\":aave-v3-periphery/=src/periphery/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/\",\":solidity-utils/=lib/solidity-utils/src/\"]},\"sources\":{\"src/contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"keccak256\":\"0xc82474bc3eb94e6a7e174840b80749c97a80062dba4bd18d6e22f234bee3e861\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://199905fa96990083beb0683470855728f3da7ce2f040b74db4edd604afd1304a\",\"dweb:/ipfs/QmRdZg5XB4tkZ5iezAyiTsPyDUfu3v6k1hWTcs1eHGjviH\"]},\"src/contracts/protocol/libraries/types/DataTypes.sol\":{\"keccak256\":\"0xee3ca1b61a7cd2e7f88913c7e57d03346909a10a7e2965d2dda6bb1296f44423\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0605fd702844db9cc505c2411417e40607a9e94d1a488ecc3a70109394f315d\",\"dweb:/ipfs/QmW3UD8oSnAexGgUX6udKqHtC5F4PdR98EPnyETacMtKhY\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct DataTypes.CalculateInterestRatesParams","name":"params","type":"tuple","components":[{"internalType":"uint256","name":"unbacked","type":"uint256"},{"internalType":"uint256","name":"liquidityAdded","type":"uint256"},{"internalType":"uint256","name":"liquidityTaken","type":"uint256"},{"internalType":"uint256","name":"totalDebt","type":"uint256"},{"internalType":"uint256","name":"reserveFactor","type":"uint256"},{"internalType":"address","name":"reserve","type":"address"},{"internalType":"bool","name":"usingVirtualBalance","type":"bool"},{"internalType":"uint256","name":"virtualUnderlyingBalance","type":"uint256"}]}],"stateMutability":"view","type":"function","name":"calculateInterestRates","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"reserve","type":"address"},{"internalType":"bytes","name":"rateData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"setInterestRateParams"}],"devdoc":{"kind":"dev","methods":{"calculateInterestRates((uint256,uint256,uint256,uint256,uint256,address,bool,uint256))":{"params":{"params":"The parameters needed to calculate interest rates"},"returns":{"_0":"liquidityRate The liquidity rate expressed in ray","_1":"variableBorrowRate The variable borrow rate expressed in ray"}},"setInterestRateParams(address,bytes)":{"params":{"rateData":"The abi encoded reserve interest rate data to apply to the given reserve   Abstracted this way as rate strategies can be custom","reserve":"The reserve to update"}}},"version":1},"userdoc":{"kind":"user","methods":{"calculateInterestRates((uint256,uint256,uint256,uint256,uint256,address,bool,uint256))":{"notice":"Calculates the interest rates depending on the reserve's state and configurations"},"setInterestRateParams(address,bytes)":{"notice":"Sets interest rate data for an Aave rate strategy"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/","aave-v3-core/=src/core/","aave-v3-periphery/=src/periphery/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/","solidity-utils/=lib/solidity-utils/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/contracts/interfaces/IReserveInterestRateStrategy.sol":"IReserveInterestRateStrategy"},"evmVersion":"shanghai","libraries":{}},"sources":{"src/contracts/interfaces/IReserveInterestRateStrategy.sol":{"keccak256":"0xc82474bc3eb94e6a7e174840b80749c97a80062dba4bd18d6e22f234bee3e861","urls":["bzz-raw://199905fa96990083beb0683470855728f3da7ce2f040b74db4edd604afd1304a","dweb:/ipfs/QmRdZg5XB4tkZ5iezAyiTsPyDUfu3v6k1hWTcs1eHGjviH"],"license":"MIT"},"src/contracts/protocol/libraries/types/DataTypes.sol":{"keccak256":"0xee3ca1b61a7cd2e7f88913c7e57d03346909a10a7e2965d2dda6bb1296f44423","urls":["bzz-raw://a0605fd702844db9cc505c2411417e40607a9e94d1a488ecc3a70109394f315d","dweb:/ipfs/QmW3UD8oSnAexGgUX6udKqHtC5F4PdR98EPnyETacMtKhY"],"license":"MIT"}},"version":1},"id":165}
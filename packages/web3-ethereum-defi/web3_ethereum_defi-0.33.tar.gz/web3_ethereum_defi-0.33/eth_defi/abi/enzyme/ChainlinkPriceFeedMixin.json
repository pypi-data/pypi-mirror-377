{ "abi": [ { "type": "constructor", "inputs": [ { "name": "_wethToken", "type": "address", "internalType": "address" }, { "name": "_staleRateThreshold", "type": "uint256", "internalType": "uint256" } ], "stateMutability": "nonpayable" }, { "type": "function", "name": "getAggregatorForPrimitive", "inputs": [ { "name": "_primitive", "type": "address", "internalType": "address" } ], "outputs": [ { "name": "aggregator_", "type": "address", "internalType": "address" } ], "stateMutability": "view" }, { "type": "function", "name": "getEthUsdAggregator", "inputs": [], "outputs": [ { "name": "ethUsdAggregator_", "type": "address", "internalType": "address" } ], "stateMutability": "view" }, { "type": "function", "name": "getRateAssetForPrimitive", "inputs": [ { "name": "_primitive", "type": "address", "internalType": "address" } ], "outputs": [ { "name": "rateAsset_", "type": "uint8", "internalType": "enum ChainlinkPriceFeedMixin.RateAsset" } ], "stateMutability": "view" }, { "type": "function", "name": "getStaleRateThreshold", "inputs": [], "outputs": [ { "name": "staleRateThreshold_", "type": "uint256", "internalType": "uint256" } ], "stateMutability": "view" }, { "type": "function", "name": "getUnitForPrimitive", "inputs": [ { "name": "_primitive", "type": "address", "internalType": "address" } ], "outputs": [ { "name": "unit_", "type": "uint256", "internalType": "uint256" } ], "stateMutability": "view" }, { "type": "function", "name": "getWethToken", "inputs": [], "outputs": [ { "name": "wethToken_", "type": "address", "internalType": "address" } ], "stateMutability": "view" }, { "type": "event", "name": "EthUsdAggregatorSet", "inputs": [ { "name": "prevEthUsdAggregator", "type": "address", "indexed": false, "internalType": "address" }, { "name": "nextEthUsdAggregator", "type": "address", "indexed": false, "internalType": "address" } ], "anonymous": false }, { "type": "event", "name": "PrimitiveAdded", "inputs": [ { "name": "primitive", "type": "address", "indexed": true, "internalType": "address" }, { "name": "aggregator", "type": "address", "indexed": false, "internalType": "address" }, { "name": "rateAsset", "type": "uint8", "indexed": false, "internalType": "enum ChainlinkPriceFeedMixin.RateAsset" }, { "name": "unit", "type": "uint256", "indexed": false, "internalType": "uint256" } ], "anonymous": false }, { "type": "event", "name": "PrimitiveRemoved", "inputs": [ { "name": "primitive", "type": "address", "indexed": true, "internalType": "address" } ], "anonymous": false } ], "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} }, "deployedBytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} }, "methodIdentifiers": { "getAggregatorForPrimitive(address)": "e2dd0978", "getEthUsdAggregator()": "74626f87", "getRateAssetForPrimitive(address)": "e35e318e", "getStaleRateThreshold()": "b54fbdaa", "getUnitForPrimitive(address)": "787f2568", "getWethToken()": "4c252f91" }, "rawMetadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_staleRateThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevEthUsdAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextEthUsdAggregator\",\"type\":\"address\"}],\"name\":\"EthUsdAggregatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ChainlinkPriceFeedMixin.RateAsset\",\"name\":\"rateAsset\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"PrimitiveAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"}],\"name\":\"PrimitiveRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getAggregatorForPrimitive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"aggregator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthUsdAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ethUsdAggregator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getRateAssetForPrimitive\",\"outputs\":[{\"internalType\":\"enum ChainlinkPriceFeedMixin.RateAsset\",\"name\":\"rateAsset_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaleRateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staleRateThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getUnitForPrimitive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unit_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"getAggregatorForPrimitive(address)\":{\"params\":{\"_primitive\":\"The primitive asset for which to get the aggregator value\"},\"returns\":{\"aggregator_\":\"The aggregator address\"}},\"getEthUsdAggregator()\":{\"returns\":{\"ethUsdAggregator_\":\"The `ethUsdAggregator` variable value\"}},\"getRateAssetForPrimitive(address)\":{\"details\":\"This isn't strictly necessary as WETH_TOKEN will be undefined and thus the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the behavior more explicit\",\"returns\":{\"rateAsset_\":\"The rateAsset variable value\"}},\"getStaleRateThreshold()\":{\"returns\":{\"staleRateThreshold_\":\"The `STALE_RATE_THRESHOLD` value\"}},\"getUnitForPrimitive(address)\":{\"returns\":{\"unit_\":\"The unit variable value\"}},\"getWethToken()\":{\"returns\":{\"wethToken_\":\"The `WETH_TOKEN` variable value\"}}},\"title\":\"ChainlinkPriceFeedMixin Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAggregatorForPrimitive(address)\":{\"notice\":\"Gets the aggregator for a primitive\"},\"getEthUsdAggregator()\":{\"notice\":\"Gets the `ethUsdAggregator` variable value\"},\"getRateAssetForPrimitive(address)\":{\"notice\":\"Gets the rateAsset variable value for a primitive\"},\"getStaleRateThreshold()\":{\"notice\":\"Gets the `STALE_RATE_THRESHOLD` variable value\"},\"getUnitForPrimitive(address)\":{\"notice\":\"Gets the unit variable value for a primitive\"},\"getWethToken()\":{\"notice\":\"Gets the `WETH_TOKEN` variable value\"}},\"notice\":\"A price feed that uses Chainlink oracles as price sources\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeedMixin.sol\":\"ChainlinkPriceFeedMixin\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[\":@enzyme/=contracts/\",\":@openzeppelin-solc-0.7/=node_modules/@openzeppelin-solc-0.7/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeedMixin.sol\":{\"keccak256\":\"0x7fb0078e7387f07ff09958fe4e4e7b317e72c23884f61e8c133776cad522f8bb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e973f29ed0c3bf03e20154ab4b0cfc68c3a4372a52ec746f9d9f86697b30e977\",\"dweb:/ipfs/QmfMb7H1zNnj2hzmUr6742HmCTiNVuQ2PFjeR8q2M4Liyu\"]},\"contracts/release/interfaces/IChainlinkAggregator.sol\":{\"keccak256\":\"0x8104db68d4edc00c86b29b366f4397cdbe7bd95bb9dc90f54140af4bae963788\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://4664240be22fe76bd4e84d1cbaace3998dbc96759a14345819a889f0c288d22e\",\"dweb:/ipfs/QmQ8fbA4tvXeCeaAFeS2JrLEQUPFeYrePAKoUywRtcicgA\"]},\"node_modules/@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://991b44ff44e0496e8554a90f4c0512c28faed45104d40430019f3c67ea67740e\",\"dweb:/ipfs/Qmc3nRapVbcctELoZS5qe17zLkFB3bETBfwzCTMF1CSuGE\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08\",\"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC\"]},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}", "metadata": { "compiler": { "version": "0.6.12+commit.27d51765" }, "language": "Solidity", "output": { "abi": [ { "inputs": [ { "internalType": "address", "name": "_wethToken", "type": "address" }, { "internalType": "uint256", "name": "_staleRateThreshold", "type": "uint256" } ], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [ { "internalType": "address", "name": "prevEthUsdAggregator", "type": "address", "indexed": false }, { "internalType": "address", "name": "nextEthUsdAggregator", "type": "address", "indexed": false } ], "type": "event", "name": "EthUsdAggregatorSet", "anonymous": false }, { "inputs": [ { "internalType": "address", "name": "primitive", "type": "address", "indexed": true }, { "internalType": "address", "name": "aggregator", "type": "address", "indexed": false }, { "internalType": "enum ChainlinkPriceFeedMixin.RateAsset", "name": "rateAsset", "type": "uint8", "indexed": false }, { "internalType": "uint256", "name": "unit", "type": "uint256", "indexed": false } ], "type": "event", "name": "PrimitiveAdded", "anonymous": false }, { "inputs": [ { "internalType": "address", "name": "primitive", "type": "address", "indexed": true } ], "type": "event", "name": "PrimitiveRemoved", "anonymous": false }, { "inputs": [ { "internalType": "address", "name": "_primitive", "type": "address" } ], "stateMutability": "view", "type": "function", "name": "getAggregatorForPrimitive", "outputs": [ { "internalType": "address", "name": "aggregator_", "type": "address" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "getEthUsdAggregator", "outputs": [ { "internalType": "address", "name": "ethUsdAggregator_", "type": "address" } ] }, { "inputs": [ { "internalType": "address", "name": "_primitive", "type": "address" } ], "stateMutability": "view", "type": "function", "name": "getRateAssetForPrimitive", "outputs": [ { "internalType": "enum ChainlinkPriceFeedMixin.RateAsset", "name": "rateAsset_", "type": "uint8" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "getStaleRateThreshold", "outputs": [ { "internalType": "uint256", "name": "staleRateThreshold_", "type": "uint256" } ] }, { "inputs": [ { "internalType": "address", "name": "_primitive", "type": "address" } ], "stateMutability": "view", "type": "function", "name": "getUnitForPrimitive", "outputs": [ { "internalType": "uint256", "name": "unit_", "type": "uint256" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "getWethToken", "outputs": [ { "internalType": "address", "name": "wethToken_", "type": "address" } ] } ], "devdoc": { "kind": "dev", "methods": { "getAggregatorForPrimitive(address)": { "params": { "_primitive": "The primitive asset for which to get the aggregator value" }, "returns": { "aggregator_": "The aggregator address" } }, "getEthUsdAggregator()": { "returns": { "ethUsdAggregator_": "The `ethUsdAggregator` variable value" } }, "getRateAssetForPrimitive(address)": { "details": "This isn't strictly necessary as WETH_TOKEN will be undefined and thus the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the behavior more explicit", "returns": { "rateAsset_": "The rateAsset variable value" } }, "getStaleRateThreshold()": { "returns": { "staleRateThreshold_": "The `STALE_RATE_THRESHOLD` value" } }, "getUnitForPrimitive(address)": { "returns": { "unit_": "The unit variable value" } }, "getWethToken()": { "returns": { "wethToken_": "The `WETH_TOKEN` variable value" } } }, "version": 1 }, "userdoc": { "kind": "user", "methods": { "getAggregatorForPrimitive(address)": { "notice": "Gets the aggregator for a primitive" }, "getEthUsdAggregator()": { "notice": "Gets the `ethUsdAggregator` variable value" }, "getRateAssetForPrimitive(address)": { "notice": "Gets the rateAsset variable value for a primitive" }, "getStaleRateThreshold()": { "notice": "Gets the `STALE_RATE_THRESHOLD` variable value" }, "getUnitForPrimitive(address)": { "notice": "Gets the unit variable value for a primitive" }, "getWethToken()": { "notice": "Gets the `WETH_TOKEN` variable value" } }, "version": 1 } }, "settings": { "remappings": [ "@enzyme/=contracts/", "@openzeppelin-solc-0.7/=node_modules/@openzeppelin-solc-0.7/", "@openzeppelin/=node_modules/@openzeppelin/", "@uniswap/=node_modules/@uniswap/", "base64-sol/=node_modules/base64-sol/", "ds-test/=lib/forge-std/lib/ds-test/src/", "forge-std/=lib/forge-std/src/", "hardhat-deploy/=node_modules/hardhat-deploy/", "hardhat/=node_modules/hardhat/" ], "optimizer": { "runs": 200, "details": { "peephole": true, "jumpdestRemover": true, "orderLiterals": true, "deduplicate": true, "cse": true, "constantOptimizer": true, "yul": false } }, "metadata": { "bytecodeHash": "none" }, "compilationTarget": { "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeedMixin.sol": "ChainlinkPriceFeedMixin" }, "evmVersion": "istanbul", "libraries": {} }, "sources": { "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeedMixin.sol": { "keccak256": "0x7fb0078e7387f07ff09958fe4e4e7b317e72c23884f61e8c133776cad522f8bb", "urls": [ "bzz-raw://e973f29ed0c3bf03e20154ab4b0cfc68c3a4372a52ec746f9d9f86697b30e977", "dweb:/ipfs/QmfMb7H1zNnj2hzmUr6742HmCTiNVuQ2PFjeR8q2M4Liyu" ], "license": "GPL-3.0" }, "contracts/release/interfaces/IChainlinkAggregator.sol": { "keccak256": "0x8104db68d4edc00c86b29b366f4397cdbe7bd95bb9dc90f54140af4bae963788", "urls": [ "bzz-raw://4664240be22fe76bd4e84d1cbaace3998dbc96759a14345819a889f0c288d22e", "dweb:/ipfs/QmQ8fbA4tvXeCeaAFeS2JrLEQUPFeYrePAKoUywRtcicgA" ], "license": "GPL-3.0" }, "node_modules/@openzeppelin/contracts/math/SafeMath.sol": { "keccak256": "0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52", "urls": [ "bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c", "dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR" ], "license": "MIT" }, "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": { "keccak256": "0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3", "urls": [ "bzz-raw://991b44ff44e0496e8554a90f4c0512c28faed45104d40430019f3c67ea67740e", "dweb:/ipfs/Qmc3nRapVbcctELoZS5qe17zLkFB3bETBfwzCTMF1CSuGE" ], "license": "MIT" }, "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": { "keccak256": "0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5", "urls": [ "bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08", "dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC" ], "license": "MIT" }, "node_modules/@openzeppelin/contracts/utils/Context.sol": { "keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0", "urls": [ "bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f", "dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96" ], "license": "MIT" } }, "version": 1 }, "id": 253 }

{ "abi": [ { "type": "constructor", "inputs": [ { "name": "_feeManager", "type": "address", "internalType": "address" }, { "name": "_settlementType", "type": "uint8", "internalType": "enum IFeeManager.SettlementType" } ], "stateMutability": "nonpayable" }, { "type": "function", "name": "activateForFund", "inputs": [ { "name": "", "type": "address", "internalType": "address" }, { "name": "", "type": "address", "internalType": "address" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "addFundSettings", "inputs": [ { "name": "_comptrollerProxy", "type": "address", "internalType": "address" }, { "name": "_settingsData", "type": "bytes", "internalType": "bytes" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "getFeeManager", "inputs": [], "outputs": [ { "name": "feeManager_", "type": "address", "internalType": "address" } ], "stateMutability": "view" }, { "type": "function", "name": "getInKindRateForFund", "inputs": [ { "name": "_comptrollerProxy", "type": "address", "internalType": "address" } ], "outputs": [ { "name": "rate_", "type": "uint256", "internalType": "uint256" } ], "stateMutability": "view" }, { "type": "function", "name": "getRecipientForFund", "inputs": [ { "name": "", "type": "address", "internalType": "address" } ], "outputs": [ { "name": "recipient_", "type": "address", "internalType": "address" } ], "stateMutability": "view" }, { "type": "function", "name": "getSettlementType", "inputs": [], "outputs": [ { "name": "settlementType_", "type": "uint8", "internalType": "enum IFeeManager.SettlementType" } ], "stateMutability": "view" }, { "type": "function", "name": "getSpecificAssetsRateForFund", "inputs": [ { "name": "_comptrollerProxy", "type": "address", "internalType": "address" } ], "outputs": [ { "name": "rate_", "type": "uint256", "internalType": "uint256" } ], "stateMutability": "view" }, { "type": "function", "name": "payout", "inputs": [ { "name": "", "type": "address", "internalType": "address" }, { "name": "", "type": "address", "internalType": "address" } ], "outputs": [ { "name": "", "type": "bool", "internalType": "bool" } ], "stateMutability": "nonpayable" }, { "type": "function", "name": "settle", "inputs": [ { "name": "_comptrollerProxy", "type": "address", "internalType": "address" }, { "name": "", "type": "address", "internalType": "address" }, { "name": "", "type": "uint8", "internalType": "enum IFeeManager.FeeHook" }, { "name": "_settlementData", "type": "bytes", "internalType": "bytes" }, { "name": "", "type": "uint256", "internalType": "uint256" } ], "outputs": [ { "name": "settlementType_", "type": "uint8", "internalType": "enum IFeeManager.SettlementType" }, { "name": "payer_", "type": "address", "internalType": "address" }, { "name": "sharesDue_", "type": "uint256", "internalType": "uint256" } ], "stateMutability": "nonpayable" }, { "type": "function", "name": "settlesOnHook", "inputs": [ { "name": "_hook", "type": "uint8", "internalType": "enum IFeeManager.FeeHook" } ], "outputs": [ { "name": "settles_", "type": "bool", "internalType": "bool" }, { "name": "usesGav_", "type": "bool", "internalType": "bool" } ], "stateMutability": "view" }, { "type": "function", "name": "update", "inputs": [ { "name": "", "type": "address", "internalType": "address" }, { "name": "", "type": "address", "internalType": "address" }, { "name": "", "type": "uint8", "internalType": "enum IFeeManager.FeeHook" }, { "name": "", "type": "bytes", "internalType": "bytes" }, { "name": "", "type": "uint256", "internalType": "uint256" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "updatesOnHook", "inputs": [ { "name": "", "type": "uint8", "internalType": "enum IFeeManager.FeeHook" } ], "outputs": [ { "name": "updates_", "type": "bool", "internalType": "bool" }, { "name": "usesGav_", "type": "bool", "internalType": "bool" } ], "stateMutability": "view" }, { "type": "event", "name": "FundSettingsAdded", "inputs": [ { "name": "comptrollerProxy", "type": "address", "indexed": true, "internalType": "address" }, { "name": "inKindRate", "type": "uint256", "indexed": false, "internalType": "uint256" }, { "name": "specificAssetsRate", "type": "uint256", "indexed": false, "internalType": "uint256" } ], "anonymous": false }, { "type": "event", "name": "Settled", "inputs": [ { "name": "comptrollerProxy", "type": "address", "indexed": true, "internalType": "address" }, { "name": "payer", "type": "address", "indexed": true, "internalType": "address" }, { "name": "sharesQuantity", "type": "uint256", "indexed": false, "internalType": "uint256" }, { "name": "forSpecificAssets", "type": "bool", "indexed": true, "internalType": "bool" } ], "anonymous": false } ], "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} }, "deployedBytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} }, "methodIdentifiers": { "activateForFund(address,address)": "3146d058", "addFundSettings(address,bytes)": "0f5f6b4f", "getFeeManager()": "f2d63826", "getInKindRateForFund(address)": "223e6505", "getRecipientForFund(address)": "62780b3c", "getSettlementType()": "7bdd5b1d", "getSpecificAssetsRateForFund(address)": "a8a0fa7d", "payout(address,address)": "b78b4813", "settle(address,address,uint8,bytes,uint256)": "41892d7e", "settlesOnHook(uint8)": "320f0ddd", "update(address,address,uint8,bytes,uint256)": "233faf5f", "updatesOnHook(uint8)": "e337a91f" }, "rawMetadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"_settlementType\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inKindRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"specificAssetsRate\",\"type\":\"uint256\"}],\"name\":\"FundSettingsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesQuantity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"forSpecificAssets\",\"type\":\"bool\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_settingsData\",\"type\":\"bytes\"}],\"name\":\"addFundSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getInKindRateForFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getRecipientForFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettlementType\",\"outputs\":[{\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"settlementType_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getSpecificAssetsRateForFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_settlementData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"settlementType_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"payer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesDue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"_hook\",\"type\":\"uint8\"}],\"name\":\"settlesOnHook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"settles_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usesGav_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"updatesOnHook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"updates_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usesGav_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"activateForFund(address,address)\":{\"details\":\"Unimplemented by default, may be overrode.\"},\"addFundSettings(address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_settingsData\":\"Encoded settings to apply to the fee for a fund\"}},\"getFeeManager()\":{\"returns\":{\"feeManager_\":\"The `FEE_MANAGER` variable value\"}},\"getInKindRateForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy contract for the fund\"},\"returns\":{\"rate_\":\"The fee rate\"}},\"getRecipientForFund(address)\":{\"details\":\"address(0) signifies the VaultProxy owner. Returns address(0) by default, can be overridden by fee.\"},\"getSettlementType()\":{\"returns\":{\"settlementType_\":\"The `SETTLEMENT_TYPE` variable value\"}},\"getSpecificAssetsRateForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy contract for the fund\"},\"returns\":{\"rate_\":\"The fee rate\"}},\"payout(address,address)\":{\"details\":\"Returns false by default, can be overridden by fee\"},\"settle(address,address,uint8,bytes,uint256)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_settlementData\":\"Encoded args to use in calculating the settlement\"},\"returns\":{\"payer_\":\"The payer of shares due\",\"settlementType_\":\"The type of settlement\",\"sharesDue_\":\"The amount of shares due\"}},\"settlesOnHook(uint8)\":{\"params\":{\"_hook\":\"The FeeHook\"},\"returns\":{\"settles_\":\"True if the fee settles on the _hook\",\"usesGav_\":\"True if the fee uses GAV during settle() for the _hook\"}},\"update(address,address,uint8,bytes,uint256)\":{\"details\":\"Unimplemented by default, can be overridden by fee\"},\"updatesOnHook(uint8)\":{\"details\":\"Returns false values by default, can be overridden by fee\",\"returns\":{\"updates_\":\"True if the fee updates on the _hook\",\"usesGav_\":\"True if the fee uses GAV during update() for the _hook\"}}},\"title\":\"ExitRateFeeBase Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(address,address)\":{\"notice\":\"Allows Fee to run logic during fund activation\"},\"addFundSettings(address,bytes)\":{\"notice\":\"Add the initial fee settings for a fund\"},\"getFeeManager()\":{\"notice\":\"Gets the `FEE_MANAGER` variable\"},\"getInKindRateForFund(address)\":{\"notice\":\"Gets the fee rate for an in-kind redemption\"},\"getRecipientForFund(address)\":{\"notice\":\"Gets the recipient of the fee for a given fund\"},\"getSettlementType()\":{\"notice\":\"Gets the `SETTLEMENT_TYPE` variable\"},\"getSpecificAssetsRateForFund(address)\":{\"notice\":\"Gets the fee rate for a specific assets redemption\"},\"payout(address,address)\":{\"notice\":\"Runs payout logic for a fee that utilizes shares outstanding as its settlement type\"},\"settle(address,address,uint8,bytes,uint256)\":{\"notice\":\"Settles the fee\"},\"settlesOnHook(uint8)\":{\"notice\":\"Gets whether the fee settles and requires GAV on a particular hook\"},\"update(address,address,uint8,bytes,uint256)\":{\"notice\":\"Update fee state after all settlement has occurred during a given fee hook\"},\"updatesOnHook(uint8)\":{\"notice\":\"Gets whether the fee updates and requires GAV on a particular hook\"}},\"notice\":\"Calculates a fee based on a rate to be charged to an investor upon exiting a fund\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/fee-manager/fees/utils/ExitRateFeeBase.sol\":\"ExitRateFeeBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[\":@enzyme/=contracts/\",\":@openzeppelin-solc-0.7/=node_modules/@openzeppelin-solc-0.7/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/release/extensions/fee-manager/IFee.sol\":{\"keccak256\":\"0x38e3f324c67f3205e38197165586ea82ca226069902f34214bcde76cf905fcff\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://c1fff656d1bdde3324421bc9e77cbfc4e80baf4e665f8713fdb65611b046f4b0\",\"dweb:/ipfs/QmVRFjNwmsVHdh4sp3DWdL74VWmhRhPZE5kDxJiuPL8Gu2\"]},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"keccak256\":\"0x26accd01ce839ee396cbaf3f72d93f2135656845c3e74c4ae575f8b02b8efd51\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1462f4081d1aa407faa1a92bb94ecae526a6792c79052dd446d898e75b3e5e22\",\"dweb:/ipfs/QmQzLS7raSD2ojJbxoraorzA8wRTS2iQtpaedm1x47teod\"]},\"contracts/release/extensions/fee-manager/fees/utils/ExitRateFeeBase.sol\":{\"keccak256\":\"0x5db95baa1ba9312cf22745331635831ac765913a661c69bfdd5b63010ba524f3\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d1aae0eb8b22a98647ec2950eb793f6f65f590e3d52fa04eb75a940086bad09d\",\"dweb:/ipfs/QmPHVpcgSqxsG4kBZzqqy7YYi2ao8QpNgBR6McpqAcmu8R\"]},\"contracts/release/extensions/fee-manager/fees/utils/FeeBase.sol\":{\"keccak256\":\"0x485c03e3088b6dc9828d2e895cce6856501448b4a2c71a0acae4e012bc644b14\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b63aef3cd20eb4dd585632c74619235ef1d5c3c2c52fd61f8802d0a50569b767\",\"dweb:/ipfs/QmSuTYChj2j8NnLYCg47feAJ5P9NheQpK46fG6fhmMtimA\"]},\"node_modules/@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]}},\"version\":1}", "metadata": { "compiler": { "version": "0.6.12+commit.27d51765" }, "language": "Solidity", "output": { "abi": [ { "inputs": [ { "internalType": "address", "name": "_feeManager", "type": "address" }, { "internalType": "enum IFeeManager.SettlementType", "name": "_settlementType", "type": "uint8" } ], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [ { "internalType": "address", "name": "comptrollerProxy", "type": "address", "indexed": true }, { "internalType": "uint256", "name": "inKindRate", "type": "uint256", "indexed": false }, { "internalType": "uint256", "name": "specificAssetsRate", "type": "uint256", "indexed": false } ], "type": "event", "name": "FundSettingsAdded", "anonymous": false }, { "inputs": [ { "internalType": "address", "name": "comptrollerProxy", "type": "address", "indexed": true }, { "internalType": "address", "name": "payer", "type": "address", "indexed": true }, { "internalType": "uint256", "name": "sharesQuantity", "type": "uint256", "indexed": false }, { "internalType": "bool", "name": "forSpecificAssets", "type": "bool", "indexed": true } ], "type": "event", "name": "Settled", "anonymous": false }, { "inputs": [ { "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" } ], "stateMutability": "nonpayable", "type": "function", "name": "activateForFund" }, { "inputs": [ { "internalType": "address", "name": "_comptrollerProxy", "type": "address" }, { "internalType": "bytes", "name": "_settingsData", "type": "bytes" } ], "stateMutability": "nonpayable", "type": "function", "name": "addFundSettings" }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "getFeeManager", "outputs": [ { "internalType": "address", "name": "feeManager_", "type": "address" } ] }, { "inputs": [ { "internalType": "address", "name": "_comptrollerProxy", "type": "address" } ], "stateMutability": "view", "type": "function", "name": "getInKindRateForFund", "outputs": [ { "internalType": "uint256", "name": "rate_", "type": "uint256" } ] }, { "inputs": [ { "internalType": "address", "name": "", "type": "address" } ], "stateMutability": "view", "type": "function", "name": "getRecipientForFund", "outputs": [ { "internalType": "address", "name": "recipient_", "type": "address" } ] }, { "inputs": [], "stateMutability": "view", "type": "function", "name": "getSettlementType", "outputs": [ { "internalType": "enum IFeeManager.SettlementType", "name": "settlementType_", "type": "uint8" } ] }, { "inputs": [ { "internalType": "address", "name": "_comptrollerProxy", "type": "address" } ], "stateMutability": "view", "type": "function", "name": "getSpecificAssetsRateForFund", "outputs": [ { "internalType": "uint256", "name": "rate_", "type": "uint256" } ] }, { "inputs": [ { "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" } ], "stateMutability": "nonpayable", "type": "function", "name": "payout", "outputs": [ { "internalType": "bool", "name": "", "type": "bool" } ] }, { "inputs": [ { "internalType": "address", "name": "_comptrollerProxy", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "enum IFeeManager.FeeHook", "name": "", "type": "uint8" }, { "internalType": "bytes", "name": "_settlementData", "type": "bytes" }, { "internalType": "uint256", "name": "", "type": "uint256" } ], "stateMutability": "nonpayable", "type": "function", "name": "settle", "outputs": [ { "internalType": "enum IFeeManager.SettlementType", "name": "settlementType_", "type": "uint8" }, { "internalType": "address", "name": "payer_", "type": "address" }, { "internalType": "uint256", "name": "sharesDue_", "type": "uint256" } ] }, { "inputs": [ { "internalType": "enum IFeeManager.FeeHook", "name": "_hook", "type": "uint8" } ], "stateMutability": "view", "type": "function", "name": "settlesOnHook", "outputs": [ { "internalType": "bool", "name": "settles_", "type": "bool" }, { "internalType": "bool", "name": "usesGav_", "type": "bool" } ] }, { "inputs": [ { "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "enum IFeeManager.FeeHook", "name": "", "type": "uint8" }, { "internalType": "bytes", "name": "", "type": "bytes" }, { "internalType": "uint256", "name": "", "type": "uint256" } ], "stateMutability": "nonpayable", "type": "function", "name": "update" }, { "inputs": [ { "internalType": "enum IFeeManager.FeeHook", "name": "", "type": "uint8" } ], "stateMutability": "view", "type": "function", "name": "updatesOnHook", "outputs": [ { "internalType": "bool", "name": "updates_", "type": "bool" }, { "internalType": "bool", "name": "usesGav_", "type": "bool" } ] } ], "devdoc": { "kind": "dev", "methods": { "activateForFund(address,address)": { "details": "Unimplemented by default, may be overrode." }, "addFundSettings(address,bytes)": { "params": { "_comptrollerProxy": "The ComptrollerProxy of the fund", "_settingsData": "Encoded settings to apply to the fee for a fund" } }, "getFeeManager()": { "returns": { "feeManager_": "The `FEE_MANAGER` variable value" } }, "getInKindRateForFund(address)": { "params": { "_comptrollerProxy": "The ComptrollerProxy contract for the fund" }, "returns": { "rate_": "The fee rate" } }, "getRecipientForFund(address)": { "details": "address(0) signifies the VaultProxy owner. Returns address(0) by default, can be overridden by fee." }, "getSettlementType()": { "returns": { "settlementType_": "The `SETTLEMENT_TYPE` variable value" } }, "getSpecificAssetsRateForFund(address)": { "params": { "_comptrollerProxy": "The ComptrollerProxy contract for the fund" }, "returns": { "rate_": "The fee rate" } }, "payout(address,address)": { "details": "Returns false by default, can be overridden by fee" }, "settle(address,address,uint8,bytes,uint256)": { "params": { "_comptrollerProxy": "The ComptrollerProxy of the fund", "_settlementData": "Encoded args to use in calculating the settlement" }, "returns": { "payer_": "The payer of shares due", "settlementType_": "The type of settlement", "sharesDue_": "The amount of shares due" } }, "settlesOnHook(uint8)": { "params": { "_hook": "The FeeHook" }, "returns": { "settles_": "True if the fee settles on the _hook", "usesGav_": "True if the fee uses GAV during settle() for the _hook" } }, "update(address,address,uint8,bytes,uint256)": { "details": "Unimplemented by default, can be overridden by fee" }, "updatesOnHook(uint8)": { "details": "Returns false values by default, can be overridden by fee", "returns": { "updates_": "True if the fee updates on the _hook", "usesGav_": "True if the fee uses GAV during update() for the _hook" } } }, "version": 1 }, "userdoc": { "kind": "user", "methods": { "activateForFund(address,address)": { "notice": "Allows Fee to run logic during fund activation" }, "addFundSettings(address,bytes)": { "notice": "Add the initial fee settings for a fund" }, "getFeeManager()": { "notice": "Gets the `FEE_MANAGER` variable" }, "getInKindRateForFund(address)": { "notice": "Gets the fee rate for an in-kind redemption" }, "getRecipientForFund(address)": { "notice": "Gets the recipient of the fee for a given fund" }, "getSettlementType()": { "notice": "Gets the `SETTLEMENT_TYPE` variable" }, "getSpecificAssetsRateForFund(address)": { "notice": "Gets the fee rate for a specific assets redemption" }, "payout(address,address)": { "notice": "Runs payout logic for a fee that utilizes shares outstanding as its settlement type" }, "settle(address,address,uint8,bytes,uint256)": { "notice": "Settles the fee" }, "settlesOnHook(uint8)": { "notice": "Gets whether the fee settles and requires GAV on a particular hook" }, "update(address,address,uint8,bytes,uint256)": { "notice": "Update fee state after all settlement has occurred during a given fee hook" }, "updatesOnHook(uint8)": { "notice": "Gets whether the fee updates and requires GAV on a particular hook" } }, "version": 1 } }, "settings": { "remappings": [ "@enzyme/=contracts/", "@openzeppelin-solc-0.7/=node_modules/@openzeppelin-solc-0.7/", "@openzeppelin/=node_modules/@openzeppelin/", "@uniswap/=node_modules/@uniswap/", "base64-sol/=node_modules/base64-sol/", "ds-test/=lib/forge-std/lib/ds-test/src/", "forge-std/=lib/forge-std/src/", "hardhat-deploy/=node_modules/hardhat-deploy/", "hardhat/=node_modules/hardhat/" ], "optimizer": { "runs": 200, "details": { "peephole": true, "jumpdestRemover": true, "orderLiterals": true, "deduplicate": true, "cse": true, "constantOptimizer": true, "yul": false } }, "metadata": { "bytecodeHash": "none" }, "compilationTarget": { "contracts/release/extensions/fee-manager/fees/utils/ExitRateFeeBase.sol": "ExitRateFeeBase" }, "evmVersion": "istanbul", "libraries": {} }, "sources": { "contracts/release/extensions/fee-manager/IFee.sol": { "keccak256": "0x38e3f324c67f3205e38197165586ea82ca226069902f34214bcde76cf905fcff", "urls": [ "bzz-raw://c1fff656d1bdde3324421bc9e77cbfc4e80baf4e665f8713fdb65611b046f4b0", "dweb:/ipfs/QmVRFjNwmsVHdh4sp3DWdL74VWmhRhPZE5kDxJiuPL8Gu2" ], "license": "GPL-3.0" }, "contracts/release/extensions/fee-manager/IFeeManager.sol": { "keccak256": "0x26accd01ce839ee396cbaf3f72d93f2135656845c3e74c4ae575f8b02b8efd51", "urls": [ "bzz-raw://1462f4081d1aa407faa1a92bb94ecae526a6792c79052dd446d898e75b3e5e22", "dweb:/ipfs/QmQzLS7raSD2ojJbxoraorzA8wRTS2iQtpaedm1x47teod" ], "license": "GPL-3.0" }, "contracts/release/extensions/fee-manager/fees/utils/ExitRateFeeBase.sol": { "keccak256": "0x5db95baa1ba9312cf22745331635831ac765913a661c69bfdd5b63010ba524f3", "urls": [ "bzz-raw://d1aae0eb8b22a98647ec2950eb793f6f65f590e3d52fa04eb75a940086bad09d", "dweb:/ipfs/QmPHVpcgSqxsG4kBZzqqy7YYi2ao8QpNgBR6McpqAcmu8R" ], "license": "GPL-3.0" }, "contracts/release/extensions/fee-manager/fees/utils/FeeBase.sol": { "keccak256": "0x485c03e3088b6dc9828d2e895cce6856501448b4a2c71a0acae4e012bc644b14", "urls": [ "bzz-raw://b63aef3cd20eb4dd585632c74619235ef1d5c3c2c52fd61f8802d0a50569b767", "dweb:/ipfs/QmSuTYChj2j8NnLYCg47feAJ5P9NheQpK46fG6fhmMtimA" ], "license": "GPL-3.0" }, "node_modules/@openzeppelin/contracts/math/SafeMath.sol": { "keccak256": "0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52", "urls": [ "bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c", "dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR" ], "license": "MIT" } }, "version": 1 }, "id": 153 }

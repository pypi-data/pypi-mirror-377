{ "abi": [ { "type": "function", "name": "calcFaceValue", "inputs": [ { "name": "_totalBorrowed", "type": "uint256", "internalType": "uint256" }, { "name": "_totalRepaid", "type": "uint256", "internalType": "uint256" } ], "outputs": [ { "name": "faceValue_", "type": "uint256", "internalType": "uint256" } ], "stateMutability": "view" }, { "type": "function", "name": "configure", "inputs": [ { "name": "_configData", "type": "bytes", "internalType": "bytes" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "preBorrow", "inputs": [ { "name": "_prevTotalBorrowed", "type": "uint256", "internalType": "uint256" }, { "name": "_totalRepaid", "type": "uint256", "internalType": "uint256" }, { "name": "_borrowAmount", "type": "uint256", "internalType": "uint256" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "preClose", "inputs": [ { "name": "_totalBorrowed", "type": "uint256", "internalType": "uint256" }, { "name": "_totalRepaid", "type": "uint256", "internalType": "uint256" } ], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "preReconcile", "inputs": [ { "name": "_totalBorrowed", "type": "uint256", "internalType": "uint256" }, { "name": "_prevTotalRepaid", "type": "uint256", "internalType": "uint256" }, { "name": "_repayableLoanAssetAmount", "type": "uint256", "internalType": "uint256" }, { "name": "_extraAssets", "type": "address[]", "internalType": "address[]" } ], "outputs": [ { "name": "repayAmount_", "type": "uint256", "internalType": "uint256" } ], "stateMutability": "nonpayable" }, { "type": "function", "name": "preRepay", "inputs": [ { "name": "_totalBorrowed", "type": "uint256", "internalType": "uint256" }, { "name": "_prevTotalRepaid", "type": "uint256", "internalType": "uint256" }, { "name": "_repayAmountInput", "type": "uint256", "internalType": "uint256" } ], "outputs": [ { "name": "repayAmount_", "type": "uint256", "internalType": "uint256" } ], "stateMutability": "nonpayable" }, { "type": "function", "name": "receiveCallFromLoan", "inputs": [ { "name": "_actionData", "type": "bytes", "internalType": "bytes" } ], "outputs": [], "stateMutability": "nonpayable" } ], "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} }, "deployedBytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} }, "methodIdentifiers": { "calcFaceValue(uint256,uint256)": "7bb6668e", "configure(bytes)": "46739e73", "preBorrow(uint256,uint256,uint256)": "8602074e", "preClose(uint256,uint256)": "1770ac3a", "preReconcile(uint256,uint256,uint256,address[])": "e00c3490", "preRepay(uint256,uint256,uint256)": "1324041c", "receiveCallFromLoan(bytes)": "9e950b22" }, "rawMetadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRepaid\",\"type\":\"uint256\"}],\"name\":\"calcFaceValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"faceValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_configData\",\"type\":\"bytes\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prevTotalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"preBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRepaid\",\"type\":\"uint256\"}],\"name\":\"preClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prevTotalRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayableLoanAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_extraAssets\",\"type\":\"address[]\"}],\"name\":\"preReconcile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prevTotalRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmountInput\",\"type\":\"uint256\"}],\"name\":\"preRepay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"receiveCallFromLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"calcFaceValue(uint256,uint256)\":{\"params\":{\"_totalBorrowed\":\"The total borrowed amount\",\"_totalRepaid\":\"The total repaid amount\"},\"returns\":{\"faceValue_\":\"The face value\"}},\"configure(bytes)\":{\"params\":{\"_configData\":\"Encoded options\"}},\"preBorrow(uint256,uint256,uint256)\":{\"params\":{\"_borrowAmount\":\"The new borrow amount\",\"_prevTotalBorrowed\":\"The total borrowed amount not including the new borrow amount\",\"_totalRepaid\":\"The total repaid amount\"}},\"preClose(uint256,uint256)\":{\"params\":{\"_totalBorrowed\":\"The total borrowed amount\",\"_totalRepaid\":\"The total repaid amount\"}},\"preReconcile(uint256,uint256,uint256,address[])\":{\"details\":\"Should not revert in case of over-repayment. Instead, it is recommended to return the full loan balance as repayAmount_ where necessary. _extraAssets allows a module to use its own pricing to calculate the value of each extra asset in terms of the loanAsset, which can be included in the repayAmount_.\",\"params\":{\"_extraAssets\":\"The extra assets (non-loanAsset) being swept to the VaultProxy\",\"_prevTotalRepaid\":\"The total repaid amount not including the reconciled assets\",\"_repayableLoanAssetAmount\":\"The loanAsset amount available for repayment\",\"_totalBorrowed\":\"The total borrowed amount\"},\"returns\":{\"repayAmount_\":\"The formatted amount to consider as repayment in terms of the loanAsset\"}},\"preRepay(uint256,uint256,uint256)\":{\"params\":{\"_prevTotalRepaid\":\"The total repaid amount not including the new repay amount\",\"_repayAmountInput\":\"The user-input repay amount\",\"_totalBorrowed\":\"The total borrowed amount\"},\"returns\":{\"repayAmount_\":\"The formatted amount to repay\"}},\"receiveCallFromLoan(bytes)\":{\"params\":{\"_actionData\":\"Encoded data for the arbitrary call\"}}},\"title\":\"IArbitraryLoanAccountingModule Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calcFaceValue(uint256,uint256)\":{\"notice\":\"Calculates the canonical face value of the loan\"},\"configure(bytes)\":{\"notice\":\"Configures options per-loan\"},\"preBorrow(uint256,uint256,uint256)\":{\"notice\":\"Implements logic immediately prior to effects and interactions during a borrow\"},\"preClose(uint256,uint256)\":{\"notice\":\"Implements logic immediately prior to effects and interactions when closing a loan\"},\"preReconcile(uint256,uint256,uint256,address[])\":{\"notice\":\"Implements logic immediately prior to effects and interactions during a reconciliation, and returns the formatted amount to consider as a repayment\"},\"preRepay(uint256,uint256,uint256)\":{\"notice\":\"Implements logic immediately prior to effects and interactions during a repay, and returns the formatted amount to repay (e.g., in the case of a user-input max)\"},\"receiveCallFromLoan(bytes)\":{\"notice\":\"Receives and executes an arbitrary call from the loan contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/external-position-manager/external-positions/arbitrary-loan/modules/IArbitraryLoanAccountingModule.sol\":\"IArbitraryLoanAccountingModule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[\":@enzyme/=contracts/\",\":@openzeppelin-solc-0.7/=node_modules/@openzeppelin-solc-0.7/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/release/extensions/external-position-manager/external-positions/arbitrary-loan/modules/IArbitraryLoanAccountingModule.sol\":{\"keccak256\":\"0x95b63e11b0e628c5a0bd382fb07b6fbd06bdd130ff7b8afa429f49990991c5f7\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://8f7ecd88d1158d6ec02a0ae1a76c8c9cfdab49fe3d0fb344c0313376e2dc744f\",\"dweb:/ipfs/QmWeJjbsXX27ADWJpDV7pABtdGADs2nk4gmSUN9dtA7X2S\"]}},\"version\":1}", "metadata": { "compiler": { "version": "0.6.12+commit.27d51765" }, "language": "Solidity", "output": { "abi": [ { "inputs": [ { "internalType": "uint256", "name": "_totalBorrowed", "type": "uint256" }, { "internalType": "uint256", "name": "_totalRepaid", "type": "uint256" } ], "stateMutability": "view", "type": "function", "name": "calcFaceValue", "outputs": [ { "internalType": "uint256", "name": "faceValue_", "type": "uint256" } ] }, { "inputs": [ { "internalType": "bytes", "name": "_configData", "type": "bytes" } ], "stateMutability": "nonpayable", "type": "function", "name": "configure" }, { "inputs": [ { "internalType": "uint256", "name": "_prevTotalBorrowed", "type": "uint256" }, { "internalType": "uint256", "name": "_totalRepaid", "type": "uint256" }, { "internalType": "uint256", "name": "_borrowAmount", "type": "uint256" } ], "stateMutability": "nonpayable", "type": "function", "name": "preBorrow" }, { "inputs": [ { "internalType": "uint256", "name": "_totalBorrowed", "type": "uint256" }, { "internalType": "uint256", "name": "_totalRepaid", "type": "uint256" } ], "stateMutability": "nonpayable", "type": "function", "name": "preClose" }, { "inputs": [ { "internalType": "uint256", "name": "_totalBorrowed", "type": "uint256" }, { "internalType": "uint256", "name": "_prevTotalRepaid", "type": "uint256" }, { "internalType": "uint256", "name": "_repayableLoanAssetAmount", "type": "uint256" }, { "internalType": "address[]", "name": "_extraAssets", "type": "address[]" } ], "stateMutability": "nonpayable", "type": "function", "name": "preReconcile", "outputs": [ { "internalType": "uint256", "name": "repayAmount_", "type": "uint256" } ] }, { "inputs": [ { "internalType": "uint256", "name": "_totalBorrowed", "type": "uint256" }, { "internalType": "uint256", "name": "_prevTotalRepaid", "type": "uint256" }, { "internalType": "uint256", "name": "_repayAmountInput", "type": "uint256" } ], "stateMutability": "nonpayable", "type": "function", "name": "preRepay", "outputs": [ { "internalType": "uint256", "name": "repayAmount_", "type": "uint256" } ] }, { "inputs": [ { "internalType": "bytes", "name": "_actionData", "type": "bytes" } ], "stateMutability": "nonpayable", "type": "function", "name": "receiveCallFromLoan" } ], "devdoc": { "kind": "dev", "methods": { "calcFaceValue(uint256,uint256)": { "params": { "_totalBorrowed": "The total borrowed amount", "_totalRepaid": "The total repaid amount" }, "returns": { "faceValue_": "The face value" } }, "configure(bytes)": { "params": { "_configData": "Encoded options" } }, "preBorrow(uint256,uint256,uint256)": { "params": { "_borrowAmount": "The new borrow amount", "_prevTotalBorrowed": "The total borrowed amount not including the new borrow amount", "_totalRepaid": "The total repaid amount" } }, "preClose(uint256,uint256)": { "params": { "_totalBorrowed": "The total borrowed amount", "_totalRepaid": "The total repaid amount" } }, "preReconcile(uint256,uint256,uint256,address[])": { "details": "Should not revert in case of over-repayment. Instead, it is recommended to return the full loan balance as repayAmount_ where necessary. _extraAssets allows a module to use its own pricing to calculate the value of each extra asset in terms of the loanAsset, which can be included in the repayAmount_.", "params": { "_extraAssets": "The extra assets (non-loanAsset) being swept to the VaultProxy", "_prevTotalRepaid": "The total repaid amount not including the reconciled assets", "_repayableLoanAssetAmount": "The loanAsset amount available for repayment", "_totalBorrowed": "The total borrowed amount" }, "returns": { "repayAmount_": "The formatted amount to consider as repayment in terms of the loanAsset" } }, "preRepay(uint256,uint256,uint256)": { "params": { "_prevTotalRepaid": "The total repaid amount not including the new repay amount", "_repayAmountInput": "The user-input repay amount", "_totalBorrowed": "The total borrowed amount" }, "returns": { "repayAmount_": "The formatted amount to repay" } }, "receiveCallFromLoan(bytes)": { "params": { "_actionData": "Encoded data for the arbitrary call" } } }, "version": 1 }, "userdoc": { "kind": "user", "methods": { "calcFaceValue(uint256,uint256)": { "notice": "Calculates the canonical face value of the loan" }, "configure(bytes)": { "notice": "Configures options per-loan" }, "preBorrow(uint256,uint256,uint256)": { "notice": "Implements logic immediately prior to effects and interactions during a borrow" }, "preClose(uint256,uint256)": { "notice": "Implements logic immediately prior to effects and interactions when closing a loan" }, "preReconcile(uint256,uint256,uint256,address[])": { "notice": "Implements logic immediately prior to effects and interactions during a reconciliation, and returns the formatted amount to consider as a repayment" }, "preRepay(uint256,uint256,uint256)": { "notice": "Implements logic immediately prior to effects and interactions during a repay, and returns the formatted amount to repay (e.g., in the case of a user-input max)" }, "receiveCallFromLoan(bytes)": { "notice": "Receives and executes an arbitrary call from the loan contract" } }, "version": 1 } }, "settings": { "remappings": [ "@enzyme/=contracts/", "@openzeppelin-solc-0.7/=node_modules/@openzeppelin-solc-0.7/", "@openzeppelin/=node_modules/@openzeppelin/", "@uniswap/=node_modules/@uniswap/", "base64-sol/=node_modules/base64-sol/", "ds-test/=lib/forge-std/lib/ds-test/src/", "forge-std/=lib/forge-std/src/", "hardhat-deploy/=node_modules/hardhat-deploy/", "hardhat/=node_modules/hardhat/" ], "optimizer": { "runs": 200, "details": { "peephole": true, "jumpdestRemover": true, "orderLiterals": true, "deduplicate": true, "cse": true, "constantOptimizer": true, "yul": false } }, "metadata": { "bytecodeHash": "none" }, "compilationTarget": { "contracts/release/extensions/external-position-manager/external-positions/arbitrary-loan/modules/IArbitraryLoanAccountingModule.sol": "IArbitraryLoanAccountingModule" }, "evmVersion": "istanbul", "libraries": {} }, "sources": { "contracts/release/extensions/external-position-manager/external-positions/arbitrary-loan/modules/IArbitraryLoanAccountingModule.sol": { "keccak256": "0x95b63e11b0e628c5a0bd382fb07b6fbd06bdd130ff7b8afa429f49990991c5f7", "urls": [ "bzz-raw://8f7ecd88d1158d6ec02a0ae1a76c8c9cfdab49fe3d0fb344c0313376e2dc744f", "dweb:/ipfs/QmWeJjbsXX27ADWJpDV7pABtdGADs2nk4gmSUN9dtA7X2S" ], "license": "GPL-3.0" } }, "version": 1 }, "id": 98 }

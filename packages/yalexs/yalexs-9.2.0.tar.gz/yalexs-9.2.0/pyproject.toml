[tool.poetry]
name = "yalexs"
version = "9.2.0"
description = "Python API for Yale Access (formerly August) Smart Lock and Doorbell"
authors = ["J. Nick Koston <nick@koston.org>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/bdraco/yalexs"
documentation = "https://yalexs.readthedocs.io"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
packages = [
    { include = "yalexs", from = "." },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/bdraco/yalexs/issues"
"Changelog" = "https://github.com/bdraco/yalexs/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.10"
ciso8601 = ">=2.1.3"
pyjwt = ">=2.8.0"
requests = ">=2"
python-dateutil = ">=2.9.0"
aiohttp = ">=3.10.5"
aiofiles = ">=23"
freenub = ">=0.1.0"
typing-extensions = ">=4.5.0"
python-socketio = {version = ">=5.11.3", extras = ["asyncio-client"]}
propcache = ">=0.0.0"

[tool.poetry.group.dev.dependencies]
pytest = ">=8"
pytest-cov = ">=3,<8"
aioresponses = "^0.7.6"
requests-mock = "^1.12.1"
aiounittest = "^1.4.2"
pytest-asyncio = ">=0.24.0"
freezegun = "^1.5.1"
pytest-freezegun = "^0.4.2"
setuptools = ">=74.1.2,<81.0.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = ">=0.16"
sphinx = ">=4.0"
sphinx-rtd-theme = ">=1.0"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "yalexs/__init__.py:__version__",
]
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true

[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov=yalexs --cov-report=term-missing:skip-covered"
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
]

[tool.isort]
profile = "black"
known_first_party = ["yalexs", "tests"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
    'docs/.*',
    'setup.py',
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.ruff.lint]
select = [
    "A001", # Variable {name} is shadowing a Python builtin
    "ASYNC210", # Async functions should not call blocking HTTP methods
    "ASYNC220", # Async functions should not create subprocesses with blocking methods
    "ASYNC221", # Async functions should not run processes with blocking methods
    "ASYNC222", # Async functions should not wait on processes with blocking methods
    "ASYNC230", # Async functions should not open files with blocking methods like open
    "ASYNC251", # Async functions should not call time.sleep
    "B002", # Python does not support the unary prefix increment
    "B005", # Using .strip() with multi-character strings is misleading
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "B015", # Pointless comparison. Did you mean to assign a value? Otherwise, prepend assert or remove it.
    "B017", # pytest.raises(BaseException) should be considered evil
    "B018", # Found useless attribute access. Either assign it to a variable or remove it.
    "B023", # Function definition does not bind loop variable {name}
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "B032", # Possible unintentional type annotation (using :). Did you mean to assign (using =)?
    "B904", # Use raise from to specify exception cause
    "B905", # zip() without an explicit strict= parameter
    "BLE",
    "C", # complexity
    "COM818", # Trailing comma on bare tuple prohibited
    "D", # docstrings
    "DTZ003", # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004", # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E", # pycodestyle
    "F", # pyflakes/autoflake
    "F541", # f-string without any placeholders
    "FLY", # flynt
    "FURB", # refurb
    "G", # flake8-logging-format
    "I", # isort
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "ICN001", # import concentions; {name} should be imported as {asname}
    "LOG", # flake8-logging
    "N804", # First argument of a class method should be named cls
    "N805", # First argument of a method should be named self
    "N815", # Variable {name} in class scope should not be mixedCase
    "PERF", # Perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-pathlib
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF005", # Consider iterable unpacking instead of concatenation
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "RUF007", # Prefer itertools.pairwise() over zip() when iterating over successive pairs
    "RUF008", # Do not use mutable default values for dataclass attributes
    "RUF010", # Use explicit conversion flag
    "RUF013", # PEP 484 prohibits implicit Optional
    "RUF016", # Slice in indexed access to type {value_type} uses type {index_type} instead of an integer
    "RUF017", # Avoid quadratic list summation
    "RUF018", # Avoid assignment expressions in assert statements
    "RUF019", # Unnecessary key check before dictionary access
    "RUF020", # {never_like} | T is equivalent to T
    "RUF021", # Parenthesize a and b expressions when chaining and and or together, to make the precedence clear
    "RUF022", # Sort __all__
    "RUF023", # Sort __slots__
    "RUF024", # Do not pass mutable objects as values to dict.fromkeys
    "RUF026", # default_factory is a positional-only argument to defaultdict
    "RUF030", # print() call in assert statement is likely unintentional
    "RUF032", # Decimal() called with float literal argument
    "RUF033", # __post_init__ method with argument defaults
    "RUF034", # Useless if-else condition
    "RUF100", # Unused `noqa` directive
    "RUF101", # noqa directives that use redirected rule codes
    "RUF200", # Failed to parse pyproject.toml: {message}
    "S102", # Use of exec detected
    "S103", # bad-file-permissions
    "S108", # hardcoded-temp-file
    "S306", # suspicious-mktemp-usage
    "S307", # suspicious-eval-usage
    "S313", # suspicious-xmlc-element-tree-usage
    "S314", # suspicious-xml-element-tree-usage
    "S315", # suspicious-xml-expat-reader-usage
    "S316", # suspicious-xml-expat-builder-usage
    "S317", # suspicious-xml-sax-usage
    "S318", # suspicious-xml-mini-dom-usage
    "S319", # suspicious-xml-pull-dom-usage
    "S601", # paramiko-call
    "S602", # subprocess-popen-with-shell-equals-true
    "S604", # call-with-shell-equals-true
    "S608", # hardcoded-sql-expression
    "S609", # unix-command-wildcard-injection
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "T100", # Trace found: {name} used
    "T20", # flake8-print
    "TC", # flake8-type-checking
    "TID", # Tidy imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "UP031", # Use format specifiers instead of percent format
    "UP032", # Use f-string instead of `format` call
    "W", # pycodestyle
]


ignore = [
    "T201", # used in examples
    "T203", # used in examples
    "D102", # Too many to fix now
    "D103", # Too many to fix now
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D205", # Too many to fix now
    "D213", # Multi-line docstring summary should start at the second line
    "D400", # Too many to fix now
    "D401", # Too many to fix right now
    "D406", # Section name should end with a newline
    "D407", # Section name underlining
    "D415", # Too many to fix now
    "E501", # line too long

    "PTH118", # Too many to fix now
    "PTH120", # Too many to fix now
    "PTH123", # Too many to fix now
    "PGH003", # Too many to fix now

    "PLC1901", # {existing} can be simplified to {replacement} as an empty string is falsey; too many false positives
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "PT011", # pytest.raises({exception}) is too broad, set the `match` parameter or use a more specific exception
    "PT018", # Assertion should be broken down into multiple parts
    "RUF001", # String contains ambiguous unicode character.
    "RUF002", # Docstring contains ambiguous unicode character.
    "RUF003", # Comment contains ambiguous unicode character.
    "RUF015", # Prefer next(...) over single element slice
    "SIM102", # Use a single if statement instead of nested if statements
    "SIM103", # Return the condition {condition} directly
    "SIM108", # Use ternary operator {contents} instead of if-else-block
    "SIM115", # Use context handler for opening files

    # Moving imports into type-checking blocks can mess with pytest.patch()
    "TC001", # Move application import {} into a type-checking block
    "TC002", # Move third-party import {} into a type-checking block
    "TC003", # Move standard library import {} into a type-checking block

    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY400", # Use `logging.exception` instead of `logging.error`
    # Ignored due to performance: https://github.com/charliermarsh/ruff/issues/2923
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`

    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",

    # Disabled because ruff does not understand type of __all__ generated by a function
    "PLE0605",
    "PLC0206", # Too many to fix
    "PT009", # Too many to fix
    "PT012", # Too many to fix
    "PT017", # Too many to fix
    "PT027", # Too many to fix
    "TRY004", # Would be a breaking change
    "D100", # Too many to fix
    "D101", # Too many to fix
    "D104", # Too many to fix
    "D105", # Too many to fix
    "D107", # Too many to fix
    "TID252", # Too many to fix
    "PTH110", # Too many to fix
    "PTH108", # Too many to fix
    "SLF001", # Too many to fix
]



[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["z007"]

[tool.hatch.version]
path = "z007/__init__.py"

[project]
name = "z007"
dynamic = ["version"]
description = "Micro agent with tool support and MCP integration."
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Igor Okulist", email = "okigan@gmail.com" }
]
keywords = ["ai", "llm", "agent", "mcp", "bedrock", "tools", "async"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "anyio>=4.10.0",
    "boto3",
    "botocore",
    "httpx>=0.28.1",
    "python-dotenv>=1.0.0",
    "rich>=14.1.0",
]

[project.urls]
"Homepage" = "https://github.com/okigan/z007"
"Repository" = "https://github.com/okigan/z007"
"Issues" = "https://github.com/okigan/z007/issues"
"Changelog" = "https://github.com/okigan/z007/releases"

[project.scripts]
z007 = "z007.main:main"

[tool.uv]
dev-dependencies = [
    "mypy-boto3-bedrock-runtime>=1.40.0",
    "mypy-boto3-bedrock>=1.40.0",
    "boto3-stubs[essential]>=1.40.0",
    "mypy>=1.17.1",
    "ruff>=0.12.11",
    "build>=1.0.0",
    "twine>=4.0.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
]

[tool.mypy]
# Basic strict settings we can achieve
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# We can be more strict now with better type stubs
disallow_untyped_defs = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_subclassing_any = false

# Third-party libraries without proper stubs
[[tool.mypy.overrides]]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "anyio.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "select"
ignore_missing_imports = true

[tool.ruff]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.9+
target-version = "py39"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]

ignore = [
    "E501",   # line too long, handled by formatter
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PLR0912", # too many branches
    "B904",    # within except clause, raise from err
    "PLC0415", # import should be at top level (sometimes needed for dynamic imports)
    "B023",    # function does not bind loop variable (sometimes needed)
    "RUF001",  # ambiguous unicode characters (test data)
    "ERA001",  # found commented-out code (examples and documentation)
    "PTH123",  # use Path.open() instead of open()
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
known-first-party = ["z007"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py files

[tool.pytest.ini_options]
asyncio_mode = "auto"


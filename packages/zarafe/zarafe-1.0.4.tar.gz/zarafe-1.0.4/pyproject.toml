[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "zarafe"
dynamic = ["version"]
description = "Video annotation tool for marking timed events in eye tracking research"
authors = [
    {name = "Mohammadhossein Salari", email = "mohammadhossein.salari@gmail.com"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.11"
dependencies = [
    "opencv-python-headless>=4.11.0",
    "pandas>=2.3.0",
    "PyQt6>=6.9.0",
    "numpy>=2.3.0",
    "scipy>=1.16.0",
    "pyqtgraph>=0.13.7",
    "glassestools==1.23.1",
]

[project.optional-dependencies]
dev = [
    "pytest",
]

[project.scripts]
zarafe = "main:main"


[tool.hatch.version]
source = "vcs"
tag-regex = "^(?P<version>\\d+\\.\\d+\\.\\d+)$"

[tool.hatch.build.targets.wheel]
packages = ["."]

[dependency-groups]
dev = [
    "build>=1.3.0",
    "pyinstaller>=6.15.0",
    "twine>=6.2.0",
]

[tool.ruff]
line-length = 119
preview = true

# RUFF DEFAULTS
# (These are all the default groups, even if you don't currently select them)
# select = [
#     "F",    # Pyflakes – detects syntax errors and basic mistakes
#     "E4",   # Pycodestyle errors (part of E group)
#     "E7",   # Pycodestyle E7xx errors (naming, etc.)
#     "E9",   # Pycodestyle E9xx errors (syntax)
# ]

lint.extend-select = [
    "E",    # Pycodestyle errors (style issues)
    "W",    # Pycodestyle warnings (style issues)
    "C90",  # McCabe – complexity metric for functions
    "I",    # isort – import ordering checks
    "N",    # PEP8 Naming – naming conventions
    "D",    # Pydocstyle – docstring formatting
    "UP",   # Pyupgrade – upgrades syntax to newer Python versions
    "YTT",  # Flake8-2020 – checks for Python 2020 best practices
    "ANN",  # Flake8-annotations – enforces type annotation style
    "ASYNC",# Flake8-async – checks async/await usage
    "S",    # Flake8-bandit – security issues
    "BLE",  # Flake8-blind-except – flags bare excepts
    "FBT",  # Flake8-boolean-trap – potential pitfalls with booleans
    "B",    # Flake8-bugbear – common bug patterns
    "A",    # Flake8-builtins – misuse of Python built-in names
    "COM",  # Flake8-commas – trailing/comma issues
    "C4",   # Flake8-comprehensions – best practices in comprehensions
    "DTZ",  # Flake8-datetimez – requires timezone-aware datetime objects
    "T10",  # Flake8-debugger – debugger statements (e.g. pdb)
    "DJ",   # Flake8-django – Django-specific conventions
    "EM",   # Flake8-errmsg – error message style
    "EXE",  # Flake8-executable – executable file checks
    "FA",   # Flake8-future-annotations – future import for annotations
    "ISC",  # Flake8-implicit-str-concat – warns on implicit string concatenation
    "ICN",  # Flake8-import-conventions – enforces conventional import aliases
    "LOG",  # Flake8-logging – proper logging usage
    "G",    # Flake8-logging-format – logging format string issues
    "INP",  # Flake8-no-pep420 – warns against non-PEP420 namespace usage
    "PIE",  # Flake8-pie – Python improvement suggestions
    "PYI",  # Flake8-pyi – checks for type stub (.pyi) consistency
    "PT",   # Flake8-pytest-style – pytest best practices
    "Q",    # Flake8-quotes – enforces quote style consistency
    "RSE",  # Flake8-raise – proper raise statement usage
    "RET",  # Flake8-return – return statement issues
    "SLF",  # Flake8-self – flags instance methods that don't use self
    "SLOT", # Flake8-slots – suggests use of __slots__ where appropriate
    "SIM",  # Flake8-simplify – code simplification hints
    "TID",  # Flake8-tidy-imports – enforces specific import styles (e.g., no relative imports)
    "TC",   # Flake8-type-checking – proper import of typing in type checks
    "INT",  # Flake8-gettext – checks for proper internationalization usage
    "ARG",  # Flake8-unused-arguments – flags unused function arguments
    "PTH",  # Flake8-use-pathlib – encourages pathlib over os.path
    "TD",   # Flake8-todos – flags TODO comments
    "FIX",  # Flake8-fixme – flags FIXME comments
    "PD",   # Pandas-vet – checks pandas-specific code practices
    "PGH",  # Pygrep-hooks – custom grep hooks for linting
    "PL",   # Pylint – integration with Pylint conventions
    "TRY",  # Tryceratops – try/except usage suggestions
    "FLY",  # Flynt – f-string conversion suggestions
    "NPY",  # NumPy-specific rules – ensures NumPy coding standards
    "FAST", # FastAPI – FastAPI-specific linting rules
    "AIR",  # Airflow – Airflow-specific linting rules
    "PERF", # Perflint – performance-related checks
    "FURB", # Refurb – rules for code refurbishment
    "RUF",  # Ruff-specific rules – additional Ruff checks
    "PLC0415", #`import` should be at the top-level of a file
]

lint.ignore = [
    "E501",  # Pycodestyle - line too long
    "E741",  # Pycodestyle - ambiguous variable name
    "FBT003", # Flake8-boolean-trap - boolean position value in function call
    "D203",  # Pydocstyle - one blank line required before class docstring
    "D213",  # Pydocstyle - multi-line docstring summary should start at the second line
    "S311",  # Flake8-bandit - Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "PERF401", # Perflint - Checks for for loops that can be replaced by a list comprehension.
    "RET504", # Flake8-return - Checks for variable assignments that immediately precede a return of the assigned variable.
    "FA102", # Flake8-future-annotations - Missing `from __future__ import annotations`, but uses PEP 604 union
    "COM812", # Flake8-commas - Trailing comma missing
    "TRY300", # Tryceratops - Consider moving this statement to an `else` block
    "BLE001", # Flake8-blind-except - Do not catch blind exception
    "PLR2004", # Pylint - Magic value used in comparison
    "D400",  # First line should end with a period
    "D415",  # First line should end with a period, question mark, or exclamation point
    "TID252", # Flake8-tidy-imports - Prefer absolute imports over relative imports from parent modules
    "FBT001", # Flake8-boolean-trap - Boolean-typed positional argument in function definition
    "FBT002", # Flake8-boolean-trap - Boolean default positional argument in function definition
    "PLR0915", # Pylint - Too many statements
    "TRY003", # Tryceratops - Avoid specifying long messages outside the exception class
    "EM101", # Flake8-errmsg - Exception must not use a string literal, assign to variable first
    "EM102", # Flake8-errmsg - Exception must not use an f-string literal, assign to variable first
    "D401", # Pydocstyle - First line of docstring should be in imperative mood
]

[tool.ruff.lint.per-file-ignores]
"build-tools/**/*.py" = ["S101", "S404", "S603", "N999", "D100", "D104", "PLC0415", "PTH118", "PTH120", "PTH113", "C901", "ANN001", "ANN202", "ANN201", "ANN204"]
"zarafe/utils/ffmpeg_compat.py" = ["S404", "S603", "PLC0415", "ANN401"]

